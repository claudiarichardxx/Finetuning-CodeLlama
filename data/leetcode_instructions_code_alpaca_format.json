[
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_.\n\nYou may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice.\n\nYou can return the answer in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,7,11,15\\], target = 9\n**Output:** \\[0,1\\]\n**Explanation:** Because nums\\[0\\] + nums\\[1\\] == 9, we return \\[0, 1\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,4\\], target = 6\n**Output:** \\[1,2\\]\n\n**Example 3:**\n\n**Input:** nums = \\[3,3\\], target = 6\n**Output:** \\[0,1\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 104`\n*   `-109 <= nums[i] <= 109`\n*   `-109 <= target <= 109`\n*   **Only one valid answer exists.**\n\n**Follow-up:** Can you come up with an algorithm that is less than `O(n2)` time complexity?A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations. So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster? The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?",
          "output": "def twoSum(nums, target):\n    map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in map:\n            return [map[complement], i]\n        map[num] = i\n    return []\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n",
          "input": "**Example 1:**\n\n**Input:** l1 = \\[2,4,3\\], l2 = \\[5,6,4\\]\n**Output:** \\[7,0,8\\]\n**Explanation:** 342 + 465 = 807.\n\n**Example 2:**\n\n**Input:** l1 = \\[0\\], l2 = \\[0\\]\n**Output:** \\[0\\]\n\n**Example 3:**\n\n**Input:** l1 = \\[9,9,9,9,9,9,9\\], l2 = \\[9,9,9,9\\]\n**Output:** \\[8,9,9,9,0,0,0,1\\]\n\n**Constraints:**\n\n*   The number of nodes in each linked list is in the range `[1, 100]`.\n*   `0 <= Node.val <= 9`\n*   It is guaranteed that the list represents a number that does not have leading zeros.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef addTwoNumbers(l1, l2):\n    dummy = ListNode(0)\n    current = dummy\n    carry = 0\n\n    while l1 or l2 or carry:\n        sum_val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + carry\n        carry = sum_val // 10\n        current.next = ListNode(sum_val % 10)\n        current = current.next\n\n        if l1: l1 = l1.next\n        if l2: l2 = l2.next\n\n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, find the length of the **longest** **substring** without repeating characters.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcabcbb \"\n**Output:** 3\n**Explanation:** The answer is  \"abc \", with the length of 3.\n\n**Example 2:**\n\n**Input:** s =  \"bbbbb \"\n**Output:** 1\n**Explanation:** The answer is  \"b \", with the length of 1.\n\n**Example 3:**\n\n**Input:** s =  \"pwwkew \"\n**Output:** 3\n**Explanation:** The answer is  \"wke \", with the length of 3.\nNotice that the answer must be a substring,  \"pwke \" is a subsequence and not a substring.\n\n**Constraints:**\n\n*   `0 <= s.length <= 5 * 104`\n*   `s` consists of English letters, digits, symbols and spaces.",
          "output": "def length_of_longest_substring(s: str) -> int:\n    left = 0\n    right = 0\n    max_length = 0\n    characters = set()\n\n    while right < len(s):\n        if s[right] not in characters:\n            characters.add(s[right])\n            max_length = max(max_length, right - left + 1)\n            right += 1\n        else:\n            characters.remove(s[left])\n            left += 1\n\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays.\n\nThe overall run time complexity should be `O(log (m+n))`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,3\\], nums2 = \\[2\\]\n**Output:** 2.00000\n**Explanation:** merged array = \\[1,2,3\\] and median is 2.\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,2\\], nums2 = \\[3,4\\]\n**Output:** 2.50000\n**Explanation:** merged array = \\[1,2,3,4\\] and median is (2 + 3) / 2 = 2.5.\n\n**Constraints:**\n\n*   `nums1.length == m`\n*   `nums2.length == n`\n*   `0 <= m <= 1000`\n*   `0 <= n <= 1000`\n*   `1 <= m + n <= 2000`\n*   `-106 <= nums1[i], nums2[i] <= 106`",
          "output": "def findMedianSortedArrays(nums1, nums2):\n    if len(nums1) > len(nums2):\n        return findMedianSortedArrays(nums2, nums1)\n    \n    x, y = len(nums1), len(nums2)\n    low, high = 0, x\n\n    while low <= high:\n        partition_x = (low + high) // 2\n        partition_y = (x + y + 1) // 2 - partition_x\n\n        max_left_x = float('-inf') if partition_x == 0 else nums1[partition_x - 1]\n        min_right_x = float('inf') if partition_x == x else nums1[partition_x]\n\n        max_left_y = float('-inf') if partition_y == 0 else nums2[partition_y - 1]\n        min_right_y = float('inf') if partition_y == y else nums2[partition_y]\n\n        if max_left_x <= min_right_y and max_left_y <= min_right_x:\n            if (x + y) % 2 == 0:\n                return (max(max_left_x, max_left_y) + min(min_right_x, min_right_y)) / 2\n            else:\n                return max(max_left_x, max_left_y)\n        elif max_left_x > min_right_y:\n            high = partition_x - 1\n        else:\n            low = partition_x + 1\n    \n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the longest_ _palindromic_ _substring_ in `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"babad \"\n**Output:**  \"bab \"\n**Explanation:**  \"aba \" is also a valid answer.\n\n**Example 2:**\n\n**Input:** s =  \"cbbd \"\n**Output:**  \"bb \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consist of only digits and English letters.How can we reuse a previously computed palindrome to compute a larger palindrome? If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome? Complexity based hint:\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation.",
          "output": "def longest_palindromic_substring(s: str) -> str:\n    n = len(s)\n    if n == 0: return \"\"\n\n    start, max_length = 0, 1\n\n    for i in range(n):\n        l, r = i, i\n\n        while r < n - 1 and s[r] == s[r + 1]:\n            r += 1\n        i = r\n\n        while l > 0 and r < n - 1 and s[l - 1] == s[r + 1]:\n            l -= 1\n            r += 1\n\n        length = r - l + 1\n        if length > max_length:\n            start, max_length = l, length\n\n    return s[start:start + max_length]\n"
     },
     {
          "instruction": "Write python code for this problem: The string `\"PAYPALISHIRING \"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: `\"PAHNAPLSIIGYIR \"`\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string s, int numRows);\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"PAYPALISHIRING \", numRows = 3\n**Output:**  \"PAHNAPLSIIGYIR \"\n\n**Example 2:**\n\n**Input:** s =  \"PAYPALISHIRING \", numRows = 4\n**Output:**  \"PINALSIGYAHRPI \"\n**Explanation:**\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\n**Example 3:**\n\n**Input:** s =  \"A \", numRows = 1\n**Output:**  \"A \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of English letters (lower-case and upper-case), `','` and `'.'`.\n*   `1 <= numRows <= 1000`",
          "output": "def convert(s: str, numRows: int) -> str:\n    if numRows == 1 or numRows >= len(s):\n        return s\n\n    rows = [\"\"] * numRows\n    curRow = 0\n    goingDown = False\n\n    for c in s:\n        rows[curRow] += c\n        if curRow == 0 or curRow == numRows - 1:\n            goingDown = not goingDown\n        curRow += 1 if goingDown else -1\n\n    return \"\".join(rows)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a signed 32-bit integer `x`, return `x` _with its digits reversed_. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 123\n**Output:** 321\n\n**Example 2:**\n\n**Input:** x = -123\n**Output:** -321\n\n**Example 3:**\n\n**Input:** x = 120\n**Output:** 21\n\n**Constraints:**\n\n*   `-231 <= x <= 231 - 1`",
          "output": "def reverse(x: int) -> int:\n    sign = -1 if x < 0 else 1\n    x = abs(x)\n    res = 0\n    while x:\n        res = res * 10 + x % 10\n        x //= 10\n    res *= sign\n    return res if -2**31 <= res <= 2**31 - 1 else 0\n"
     },
     {
          "instruction": "Write python code for this problem: Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n1.  Read in and ignore any leading whitespace.\n2.  Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n3.  Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4.  Convert these digits into an integer (i.e. `\"123 \" -> 123`, `\"0032 \" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).\n5.  If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`.\n6.  Return the integer as the final result.\n\n**Note:**\n\n*   Only the space character `' '` is considered a whitespace character.\n*   **Do not ignore** any characters other than the leading whitespace or the rest of the string after the digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"42 \"\n**Output:** 42\n**Explanation:** The underlined characters are what is read in, the caret is the current reader position.\nStep 1:  \"42 \" (no characters read because there is no leading whitespace)\n         ^\nStep 2:  \"42 \" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3:  \"42 \" ( \"42 \" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range \\[-231, 231 - 1\\], the final result is 42.\n\n**Example 2:**\n\n**Input:** s =  \"   -42 \"\n**Output:** -42\n**Explanation:**\nStep 1:  \"   \\-42 \" (leading whitespace is read and ignored)\n            ^\nStep 2:  \"   \\-42 \" ('-' is read, so the result should be negative)\n             ^\nStep 3:  \"   -42 \" ( \"42 \" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range \\[-231, 231 - 1\\], the final result is -42.\n\n**Example 3:**\n\n**Input:** s =  \"4193 with words \"\n**Output:** 4193\n**Explanation:**\nStep 1:  \"4193 with words \" (no characters read because there is no leading whitespace)\n         ^\nStep 2:  \"4193 with words \" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3:  \"4193 with words \" ( \"4193 \" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range \\[-231, 231 - 1\\], the final result is 4193.\n\n**Constraints:**\n\n*   `0 <= s.length <= 200`\n*   `s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`.",
          "output": "def myAtoi(s):\n    result, i, sign = 0, 0, 1\n    while i < len(s) and s[i] == ' ': i += 1\n    if i < len(s) and (s[i] == '-' or s[i] == '+'):\n        sign = -1 if s[i] == '-' else 1\n        i += 1\n    while i < len(s) and s[i].isdigit():\n        result = result * 10 + int(s[i])\n        i += 1\n        if result * sign > 2**31 - 1: return 2**31 - 1\n        if result * sign < -2**31: return -2**31\n    return result * sign\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `x`, return `true` _if_ `x` _is a_ _**palindrome**__, and_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 121\n**Output:** true\n**Explanation:** 121 reads as 121 from left to right and from right to left.\n\n**Example 2:**\n\n**Input:** x = -121\n**Output:** false\n**Explanation:** From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\n**Example 3:**\n\n**Input:** x = 10\n**Output:** false\n**Explanation:** Reads 01 from right to left. Therefore it is not a palindrome.\n\n**Constraints:**\n\n*   `-231 <= x <= 231 - 1`\n\n**Follow up:** Could you solve it without converting the integer to a string?Beware of overflow when you reverse the integer.",
          "output": "def is_palindrome(x: int) -> bool:\n    if x < 0:\n        return False\n    original, reversed = x, 0\n    while x > 0:\n        reversed = reversed * 10 + x % 10\n        x //= 10\n    return original == reversed\n"
     },
     {
          "instruction": "Write python code for this problem: Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n*   `'.'` Matches any single character.\u200b\u200b\u200b\u200b\n*   `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the **entire** input string (not partial).\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aa \", p =  \"a \"\n**Output:** false\n**Explanation:**  \"a \" does not match the entire string  \"aa \".\n\n**Example 2:**\n\n**Input:** s =  \"aa \", p =  \"a\\* \"\n**Output:** true\n**Explanation:** '\\*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes  \"aa \".\n\n**Example 3:**\n\n**Input:** s =  \"ab \", p =  \".\\* \"\n**Output:** true\n**Explanation:**  \".\\* \" means  \"zero or more (\\*) of any character (.) \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 20`\n*   `1 <= p.length <= 20`\n*   `s` contains only lowercase English letters.\n*   `p` contains only lowercase English letters, `'.'`, and `'*'`.\n*   It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.",
          "output": "def is_match(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for j in range(1, n + 1):\n        if p[j - 1] == '*' and dp[0][j - 2]:\n            dp[0][j] = True\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == s[i - 1] or p[j - 1] == '.':\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))\n\n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`.\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn _the maximum amount of water a container can store_.\n\n**Notice** that you may not slant the container.\n\n",
          "input": "**Example 1:**\n\n**Input:** height = \\[1,8,6,2,5,4,8,3,7\\]\n**Output:** 49\n**Explanation:** The above vertical lines are represented by array \\[1,8,6,2,5,4,8,3,7\\]. In this case, the max area of water (blue section) the container can contain is 49.\n\n**Example 2:**\n\n**Input:** height = \\[1,1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `n == height.length`\n*   `2 <= n <= 105`\n*   `0 <= height[i] <= 104`The aim is to maximize the area formed between the vertical lines. The area of any container is calculated using the shorter line as length and the distance between the lines as the width of the rectangle.\r\n\r\n\r\nArea = length of shorter vertical line * distance between lines\r\n\r\n\r\nWe can definitely get the maximum width container as the outermost lines have the maximum distance between them. However, this container might not be the maximum in size as one of the vertical lines of this container could be really short. Start with the maximum width container and go to a shorter width container if there is a vertical line longer than the current containers shorter line. This way we are compromising on the width but we are looking forward to a longer length container.",
          "output": "def max_area(height):\n    max_area, left, right = 0, 0, len(height) - 1\n    while left < right:\n        max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area\n"
     },
     {
          "instruction": "Write python code for this problem: Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\n**Symbol**       **Value**\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n\n*   `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.\n*   `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.\n*   `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 3\n**Output:**  \"III \"\n**Explanation:** 3 is represented as 3 ones.\n\n**Example 2:**\n\n**Input:** num = 58\n**Output:**  \"LVIII \"\n**Explanation:** L = 50, V = 5, III = 3.\n\n**Example 3:**\n\n**Input:** num = 1994\n**Output:**  \"MCMXCIV \"\n**Explanation:** M = 1000, CM = 900, XC = 90 and IV = 4.\n\n**Constraints:**\n\n*   `1 <= num <= 3999`",
          "output": "def int_to_roman(num):\n    romans = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"),\n        (400, \"CD\"), (100, \"C\"), (90, \"XC\"),\n        (50, \"L\"), (40, \"XL\"), (10, \"X\"), \n        (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (1, \"I\")\n    ]\n    roman = \"\"\n    for value, symbol in romans:\n        while num >= value:\n            roman += symbol\n            num -= value\n    return roman\n"
     },
     {
          "instruction": "Write python code for this problem: Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\n**Symbol**       **Value**\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, `2` is written as `II` in Roman numeral, just two ones added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n\n*   `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.\n*   `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.\n*   `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"III \"\n**Output:** 3\n**Explanation:** III = 3.\n\n**Example 2:**\n\n**Input:** s =  \"LVIII \"\n**Output:** 58\n**Explanation:** L = 50, V= 5, III = 3.\n\n**Example 3:**\n\n**Input:** s =  \"MCMXCIV \"\n**Output:** 1994\n**Explanation:** M = 1000, CM = 900, XC = 90 and IV = 4.\n\n**Constraints:**\n\n*   `1 <= s.length <= 15`\n*   `s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.\n*   It is **guaranteed** that `s` is a valid roman numeral in the range `[1, 3999]`.Problem is simpler to solve by working the string from back to front and using a map.",
          "output": "def roman_to_int(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for c in s:\n        current_value = roman_values[c]\n        if current_value > prev_value:\n            total += current_value - 2 * prev_value\n        else:\n            total += current_value\n        prev_value = current_value\n\n    return total\n"
     },
     {
          "instruction": "Write python code for this problem: Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string `\" \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[ \"flower \", \"flow \", \"flight \"\\]\n**Output:**  \"fl \"\n\n**Example 2:**\n\n**Input:** strs = \\[ \"dog \", \"racecar \", \"car \"\\]\n**Output:**  \" \"\n**Explanation:** There is no common prefix among the input strings.\n\n**Constraints:**\n\n*   `1 <= strs.length <= 200`\n*   `0 <= strs[i].length <= 200`\n*   `strs[i]` consists of only lowercase English letters.",
          "output": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    for i, c in enumerate(strs[0]):\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[j][i] != c:\n                return strs[0][:i]\n    return strs[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-1,0,1,2,-1,-4\\]\n**Output:** \\[\\[-1,-1,2\\],\\[-1,0,1\\]\\]\n**Explanation:** \nnums\\[0\\] + nums\\[1\\] + nums\\[2\\] = (-1) + 0 + 1 = 0.\nnums\\[1\\] + nums\\[2\\] + nums\\[4\\] = 0 + 1 + (-1) = 0.\nnums\\[0\\] + nums\\[3\\] + nums\\[4\\] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are \\[-1,0,1\\] and \\[-1,-1,2\\].\nNotice that the order of the output and the order of the triplets does not matter.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,1\\]\n**Output:** \\[\\]\n**Explanation:** The only possible triplet does not sum up to 0.\n\n**Example 3:**\n\n**Input:** nums = \\[0,0,0\\]\n**Output:** \\[\\[0,0,0\\]\\]\n**Explanation:** The only possible triplet sums up to 0.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 3000`\n*   `-105 <= nums[i] <= 105`So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand! For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next numbery which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster? The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?",
          "output": "def threeSum(nums):\n    nums.sort()\n    result = []\n\n    for i in range(len(nums) - 2):\n        if i == 0 or nums[i] != nums[i - 1]:\n            j, k = i + 1, len(nums) - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == 0:\n                    result.append([nums[i], nums[j], nums[k]])\n                    while j < k and nums[j] == nums[j + 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k - 1]:\n                        k -= 1\n                    j += 1\n                    k -= 1\n                elif s < 0:\n                    j += 1\n                else:\n                    k -= 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.\n\nReturn _the sum of the three integers_.\n\nYou may assume that each input would have exactly one solution.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-1,2,1,-4\\], target = 1\n**Output:** 2\n**Explanation:** The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,0\\], target = 1\n**Output:** 0\n**Explanation:** The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n\n**Constraints:**\n\n*   `3 <= nums.length <= 500`\n*   `-1000 <= nums[i] <= 1000`\n*   `-104 <= target <= 104`",
          "output": "def threeSumClosest(nums, target):\n    nums.sort()\n    closest = sum(nums[:3])\n    for i in range(len(nums) - 2):\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            cur_sum = nums[i] + nums[left] + nums[right]\n            if cur_sum == target:\n                return cur_sum\n            if abs(target - cur_sum) < abs(target - closest):\n                closest = cur_sum\n            if cur_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return closest\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n",
          "input": "**Example 1:**\n\n**Input:** digits =  \"23 \"\n**Output:** \\[ \"ad \", \"ae \", \"af \", \"bd \", \"be \", \"bf \", \"cd \", \"ce \", \"cf \"\\]\n\n**Example 2:**\n\n**Input:** digits =  \" \"\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** digits =  \"2 \"\n**Output:** \\[ \"a \", \"b \", \"c \"\\]\n\n**Constraints:**\n\n*   `0 <= digits.length <= 4`\n*   `digits[i]` is a digit in the range `['2', '9']`.",
          "output": "def letter_combinations(digits: str):\n    if not digits: return []\n    phone = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"]\n    result = [\"\"]\n\n    for digit in digits:\n        temp = []\n        for s in result:\n            for c in phone[int(digit) - 2]:\n                temp.append(s + c)\n        result = temp\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of `n` integers, return _an array of all the **unique** quadruplets_ `[nums[a], nums[b], nums[c], nums[d]]` such that:\n\n*   `0 <= a, b, c, d < n`\n*   `a`, `b`, `c`, and `d` are **distinct**.\n*   `nums[a] + nums[b] + nums[c] + nums[d] == target`\n\nYou may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,0,-1,0,-2,2\\], target = 0\n**Output:** \\[\\[-2,-1,1,2\\],\\[-2,0,0,2\\],\\[-1,0,0,1\\]\\]\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\], target = 8\n**Output:** \\[\\[2,2,2,2\\]\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 200`\n*   `-109 <= nums[i] <= 109`\n*   `-109 <= target <= 109`",
          "output": "def fourSum(nums, target):\n    nums.sort()\n    result = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                cur_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if cur_sum == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]: left += 1\n                    while left < right and nums[right] == nums[right + 1]: right -= 1\n                elif cur_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\], n = 2\n**Output:** \\[1,2,3,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[1\\], n = 1\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** head = \\[1,2\\], n = 1\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is `sz`.\n*   `1 <= sz <= 30`\n*   `0 <= Node.val <= 100`\n*   `1 <= n <= sz`\n\n**Follow up:** Could you do this in one pass?Maintain two pointers and update one with a delay of n steps.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef removeNthFromEnd(head, n):\n    first = head\n    second = head\n    \n    for i in range(n):\n        first = first.next\n    \n    if not first:\n        head = head.next\n        return head\n    \n    while first.next:\n        first = first.next\n        second = second.next\n    \n    second.next = second.next.next\n    \n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.\n\nAn input string is valid if:\n\n1.  Open brackets must be closed by the same type of brackets.\n2.  Open brackets must be closed in the correct order.\n3.  Every close bracket has a corresponding open bracket of the same type.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"() \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s =  \"()\\[\\]{} \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** s =  \"(\\] \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of parentheses only `'()[]{}'`.An interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.\r\n\r\n\r\n{ { } [ ] [ [ [ ] ] ] } is VALID expression\r\n          [ [ [ ] ] ]    is VALID sub-expression\r\n  { } [ ]                is VALID sub-expression\r\n\r\n\r\nCan we exploit this recursive structure somehow? What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g.\r\n\r\n\r\n{ { ( { } ) } }\r\n      |_|\r\n\r\n{ { (      ) } }\r\n    |______|\r\n\r\n{ {          } }\r\n  |__________|\r\n\r\n{                }\r\n|________________|\r\n\r\nVALID EXPRESSION! The stack data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards.",
          "output": "def is_valid(s: str) -> bool:\n    stack = []\n\n    for c in s:\n        if c in '([{':\n            stack.append(c)\n        else:\n            if not stack:\n                return False\n            if c == ')' and stack[-1] != '(':\n                return False\n            if c == '}' and stack[-1] != '{':\n                return False\n            if c == ']' and stack[-1] != '[':\n                return False\n            stack.pop()\n\n    return not stack\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists in a one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn _the head of the merged linked list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** list1 = \\[1,2,4\\], list2 = \\[1,3,4\\]\n**Output:** \\[1,1,2,3,4,4\\]\n\n**Example 2:**\n\n**Input:** list1 = \\[\\], list2 = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** list1 = \\[\\], list2 = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   The number of nodes in both lists is in the range `[0, 50]`.\n*   `-100 <= Node.val <= 100`\n*   Both `list1` and `list2` are sorted in **non-decreasing** order.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n         \ndef merge_two_lists(list1, list2):\n    if list1 is None:\n        return list2\n    if list2 is None:\n        return list1\n\n    if list1.val < list2.val:\n        list1.next = merge_two_lists(list1.next, list2)\n        return list1\n    else:\n        list2.next = merge_two_lists(list1, list2.next)\n        return list2\n"
     },
     {
          "instruction": "Write python code for this problem: Given `n` pairs of parentheses, write a function to _generate all combinations of well-formed parentheses_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** \\[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"\\]\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** \\[\"()\"\\]\n\n**Constraints:**\n\n*   `1 <= n <= 8`",
          "output": "def generate_parenthesis(n):\n    def generate_parenthesis_helper(open, close, current):\n        if open == 0 and close == 0:\n            result.append(current)\n            return\n        if open > 0:\n            generate_parenthesis_helper(open - 1, close + 1, current + '(')\n        if close > 0:\n            generate_parenthesis_helper(open, close - 1, current + ')')\n\n    result = []\n    generate_parenthesis_helper(n, 0, '')\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\n_Merge all the linked-lists into one sorted linked-list and return it._\n\n",
          "input": "**Example 1:**\n\n**Input:** lists = \\[\\[1,4,5\\],\\[1,3,4\\],\\[2,6\\]\\]\n**Output:** \\[1,1,2,3,4,4,5,6\\]\n**Explanation:** The linked-lists are:\n\\[\n  1->4->5,\n  1->3->4,\n  2->6\n\\]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\n**Example 2:**\n\n**Input:** lists = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** lists = \\[\\[\\]\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `k == lists.length`\n*   `0 <= k <= 104`\n*   `0 <= lists[i].length <= 500`\n*   `-104 <= lists[i][j] <= 104`\n*   `lists[i]` is sorted in **ascending order**.\n*   The sum of `lists[i].length` will not exceed `104`.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n        \nclass Solution:\n    def mergeKLists(self, lists):\n        if not lists: return None\n        while len(lists) > 1:\n            lists.append(self.merge2Lists(lists.pop(0), lists.pop(0)))\n        return lists[0]\n        \n    def merge2Lists(self, l1, l2):\n        if not l1: return l2\n        if not l2: return l1\n        if l1.val <= l2.val:\n            l1.next = self.merge2Lists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.merge2Lists(l1, l2.next)\n            return l2\n"
     },
     {
          "instruction": "Write python code for this problem: Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4\\]\n**Output:** \\[2,1,4,3\\]\n\n**Example 2:**\n\n**Input:** head = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** head = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 100]`.\n*   `0 <= Node.val <= 100`",
          "output": "def swapPairs(head: Optional[ListNode]) -> Optional[ListNode]:\n    if not head or not head.next:\n        return head\n\n    second = head.next\n    head.next = swapPairs(second.next)\n    second.next = head\n\n    return second\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return _the modified list_.\n\n`k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is.\n\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\], k = 2\n**Output:** \\[2,1,4,3,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4,5\\], k = 3\n**Output:** \\[3,2,1,4,5\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is `n`.\n*   `1 <= k <= n <= 5000`\n*   `0 <= Node.val <= 1000`\n\n**Follow-up:** Can you solve the problem in `O(1)` extra memory space?",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseKGroup(head, k):\n    if not head or k == 1:\n        return head\n        \n    cur = head\n    length = 0\n    while cur:\n        length += 1\n        cur = cur.next\n        \n    dummy = ListNode(0)\n    dummy.next = head\n    prev = dummy\n    cur = head\n    \n    while length >= k:\n        for _ in range(1, k):\n            temp = cur.next\n            cur.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n            \n        prev = cur\n        cur = cur.next\n        length -= k\n        \n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return _the number of unique elements in_ `nums`.\n\nConsider the number of unique elements of `nums` be `k`, to get accepted, you need to do the following things:\n\n*   Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.\n*   Return `k`.\n\n**Custom Judge:**\n\nThe judge will test your solution with the following code:\n\nint\\[\\] nums = \\[...\\]; // Input array\nint\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums\\[i\\] == expectedNums\\[i\\];\n}\n\nIf all assertions pass, then your solution will be **accepted**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,2\\]\n**Output:** 2, nums = \\[1,2,\\_\\]\n**Explanation:** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,1,1,1,2,2,3,3,4\\]\n**Output:** 5, nums = \\[0,1,2,3,4,\\_,\\_,\\_,\\_,\\_\\]\n**Explanation:** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-100 <= nums[i] <= 100`\n*   `nums` is sorted in **non-decreasing** order.In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements? We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements. Essentially, once an element is encountered, you simply need to bypass its duplicates and move on to the next unique element.",
          "output": "def removeDuplicates(nums):\n    if not nums: return 0\n    i = 0\n    for j in range(1, len(nums)):\n        if nums[j] != nums[i]:\n            i += 1\n            nums[i] = nums[j]\n    return i + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return _the number of elements in_ `nums` _which are not equal to_ `val`.\n\nConsider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:\n\n*   Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.\n*   Return `k`.\n\n**Custom Judge:**\n\nThe judge will test your solution with the following code:\n\nint\\[\\] nums = \\[...\\]; // Input array\nint val = ...; // Value to remove\nint\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums\\[i\\] == expectedNums\\[i\\];\n}\n\nIf all assertions pass, then your solution will be **accepted**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,2,2,3\\], val = 3\n**Output:** 2, nums = \\[2,2,\\_,\\_\\]\n**Explanation:** Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,2,2,3,0,4,2\\], val = 2\n**Output:** 5, nums = \\[0,1,4,0,3,\\_,\\_,\\_\\]\n**Explanation:** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Constraints:**\n\n*   `0 <= nums.length <= 100`\n*   `0 <= nums[i] <= 50`\n*   `0 <= val <= 100`The problem statement clearly asks us to modify the array in-place and it also says that the element beyond the new length of the array can be anything. Given an element, we need to remove all the occurrences of it from the array. We don't technically need to remove that element per-say, right? We can move all the occurrences of this element to the end of the array. Use two pointers! Yet another direction of thought is to consider the elements to be removed as non-existent. In a single pass, if we keep copying the visible elements in-place, that should also solve this problem for us.",
          "output": "def removeElement(nums, val):\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != val:\n            nums[i] = nums[j]\n            i += 1\n    return i\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`.\n\nReturn _the **quotient** after dividing_ `dividend` _by_ `divisor`.\n\n**Note:** Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[-231, 231 - 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`.\n\n",
          "input": "**Example 1:**\n\n**Input:** dividend = 10, divisor = 3\n**Output:** 3\n**Explanation:** 10/3 = 3.33333.. which is truncated to 3.\n\n**Example 2:**\n\n**Input:** dividend = 7, divisor = -3\n**Output:** -2\n**Explanation:** 7/-3 = -2.33333.. which is truncated to -2.\n\n**Constraints:**\n\n*   `-231 <= dividend, divisor <= 231 - 1`\n*   `divisor != 0`",
          "output": "def divide(dividend: int, divisor: int) -> int:\n    if dividend == -(2**31) and divisor == -1:\n        return 2**31 - 1\n\n    sign = -1 if (dividend > 0) ^ (divisor > 0) else 1\n\n    dvd = abs(dividend)\n    dvs = abs(divisor)\n    ans = 0\n\n    while dvd >= dvs:\n        temp = dvs\n        multiple = 1\n        while dvd >= (temp << 1):\n            temp <<= 1\n            multiple <<= 1\n        dvd -= temp\n        ans += multiple\n\n    return ans * sign\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and an array of strings `words`. All the strings of `words` are of **the same length**.\n\nA **concatenated substring** in `s` is a substring that contains all the strings of any permutation of `words` concatenated.\n\n*   For example, if `words = [ \"ab \", \"cd \", \"ef \"]`, then `\"abcdef \"`, `\"abefcd \"`, `\"cdabef \"`, `\"cdefab \"`, `\"efabcd \"`, and `\"efcdab \"` are all concatenated strings. `\"acdbef \"` is not a concatenated substring because it is not the concatenation of any permutation of `words`.\n\nReturn _the starting indices of all the concatenated substrings in_ `s`. You can return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"barfoothefoobarman \", words = \\[ \"foo \", \"bar \"\\]\n**Output:** \\[0,9\\]\n**Explanation:** Since words.length == 2 and words\\[i\\].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is  \"barfoo \". It is the concatenation of \\[ \"bar \", \"foo \"\\] which is a permutation of words.\nThe substring starting at 9 is  \"foobar \". It is the concatenation of \\[ \"foo \", \"bar \"\\] which is a permutation of words.\nThe output order does not matter. Returning \\[9,0\\] is fine too.\n\n**Example 2:**\n\n**Input:** s =  \"wordgoodgoodgoodbestword \", words = \\[ \"word \", \"good \", \"best \", \"word \"\\]\n**Output:** \\[\\]\n**Explanation:** Since words.length == 4 and words\\[i\\].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n\n**Example 3:**\n\n**Input:** s =  \"barfoofoobarthefoobarman \", words = \\[ \"bar \", \"foo \", \"the \"\\]\n**Output:** \\[6,9,12\\]\n**Explanation:** Since words.length == 3 and words\\[i\\].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is  \"foobarthe \". It is the concatenation of \\[ \"foo \", \"bar \", \"the \"\\] which is a permutation of words.\nThe substring starting at 9 is  \"barthefoo \". It is the concatenation of \\[ \"bar \", \"the \", \"foo \"\\] which is a permutation of words.\nThe substring starting at 12 is  \"thefoobar \". It is the concatenation of \\[ \"the \", \"foo \", \"bar \"\\] which is a permutation of words.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `1 <= words.length <= 5000`\n*   `1 <= words[i].length <= 30`\n*   `s` and `words[i]` consist of lowercase English letters.",
          "output": "from collections import Counter\n\ndef findSubstring(s, words):\n    if not s or not words:\n        return []\n\n    word_count = Counter(words)\n    word_length = len(words[0])\n    total_words = len(words)\n    total_length = word_length * total_words\n    result = []\n\n    for i in range(len(s) - total_length + 1):\n        temp_word_count = Counter()\n        for j in range(total_words):\n            current_word = s[i + j * word_length:i + (j + 1) * word_length]\n            if current_word not in word_count:\n                break\n            temp_word_count[current_word] += 1\n            if temp_word_count[current_word] > word_count[current_word]:\n                break\n            if j + 1 == total_words:\n                result.append(i)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order.\n\n*   For example, for `arr = [1,2,3]`, the following are all the permutations of `arr`: `[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]`.\n\nThe **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\n*   For example, the next permutation of `arr = [1,2,3]` is `[1,3,2]`.\n*   Similarly, the next permutation of `arr = [2,3,1]` is `[3,1,2]`.\n*   While the next permutation of `arr = [3,2,1]` is `[1,2,3]` because `[3,2,1]` does not have a lexicographical larger rearrangement.\n\nGiven an array of integers `nums`, _find the next permutation of_ `nums`.\n\nThe replacement must be **[in place](http://en.wikipedia.org/wiki/In-place_algorithm)** and use only constant extra memory.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** \\[1,3,2\\]\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,1\\]\n**Output:** \\[1,2,3\\]\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,5\\]\n**Output:** \\[1,5,1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 100`",
          "output": "def nextPermutation(nums):\n    n, k = len(nums), -1\n    for i in range(n - 1, 0, -1):\n        if nums[i - 1] < nums[i]:\n            k = i - 1\n            break\n    if k == -1:\n        nums.reverse()\n    else:\n        l = 0\n        for i in range(n - 1, k, -1):\n            if nums[i] > nums[k]:\n                l = i\n                break\n        nums[k], nums[l] = nums[l], nums[k]\n        nums[k + 1:] = reversed(nums[k + 1:])\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string containing just the characters `'('` and `')'`, return _the length of the longest valid (well-formed) parentheses_ _substring_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"(() \"\n**Output:** 2\n**Explanation:** The longest valid parentheses substring is  \"() \".\n\n**Example 2:**\n\n**Input:** s =  \")()()) \"\n**Output:** 4\n**Explanation:** The longest valid parentheses substring is  \"()() \".\n\n**Example 3:**\n\n**Input:** s =  \" \"\n**Output:** 0\n\n**Constraints:**\n\n*   `0 <= s.length <= 3 * 104`\n*   `s[i]` is `'('`, or `')'`.",
          "output": "def longest_valid_parentheses(s: str) -> int:\n    n = len(s)\n    result = 0\n    st = []\n\n    for i in range(n):\n        if s[i] == '(':\n            st.append(i)\n        else:\n            if st and s[st[-1]] == '(':\n                st.pop()\n            else:\n                st.append(i)\n\n    if not st:\n        result = n\n    else:\n        right, left = n, 0\n        while st:\n            left = st.pop()\n            result = max(result, right - left - 1)\n            right = left\n        result = max(result, right)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There is an integer array `nums` sorted in ascending order (with **distinct** values).\n\nPrior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.\n\nGiven the array `nums` **after** the possible rotation and an integer `target`, return _the index of_ `target` _if it is in_ `nums`_, or_ `-1` _if it is not in_ `nums`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,5,6,7,0,1,2\\], target = 0\n**Output:** 4\n\n**Example 2:**\n\n**Input:** nums = \\[4,5,6,7,0,1,2\\], target = 3\n**Output:** -1\n\n**Example 3:**\n\n**Input:** nums = \\[1\\], target = 0\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `-104 <= nums[i] <= 104`\n*   All values of `nums` are **unique**.\n*   `nums` is an ascending array that is possibly rotated.\n*   `-104 <= target <= 104`",
          "output": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] >= nums[left]:\n            if target >= nums[left] and target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if target > nums[mid] and target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.\n\nIf `target` is not found in the array, return `[-1, -1]`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,7,7,8,8,10\\], target = 8\n**Output:** \\[3,4\\]\n\n**Example 2:**\n\n**Input:** nums = \\[5,7,7,8,8,10\\], target = 6\n**Output:** \\[-1,-1\\]\n\n**Example 3:**\n\n**Input:** nums = \\[\\], target = 0\n**Output:** \\[-1,-1\\]\n\n**Constraints:**\n\n*   `0 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`\n*   `nums` is a non-decreasing array.\n*   `-109 <= target <= 109`",
          "output": "def searchRange(nums, target):\n    start, end = -1, -1\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            if nums[mid] == target:\n                start = mid\n\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] > target:right = mid - 1\n        else:\n            left = mid + 1\n            if nums[mid] == target:\n                end = mid\n    \n    return [start, end]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,5,6\\], target = 5\n**Output:** 2\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,5,6\\], target = 2\n**Output:** 1\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,5,6\\], target = 7\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `nums` contains **distinct** values sorted in **ascending** order.\n*   `-104 <= target <= 104`",
          "output": "def searchInsert(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**:\n\n1.  Each row must contain the digits `1-9` without repetition.\n2.  Each column must contain the digits `1-9` without repetition.\n3.  Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.\n\n**Note:**\n\n*   A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n*   Only the filled cells need to be validated according to the mentioned rules.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \n\\[\\[ \"5 \", \"3 \", \". \", \". \", \"7 \", \". \", \". \", \". \", \". \"\\]\n,\\[ \"6 \", \". \", \". \", \"1 \", \"9 \", \"5 \", \". \", \". \", \". \"\\]\n,\\[ \". \", \"9 \", \"8 \", \". \", \". \", \". \", \". \", \"6 \", \". \"\\]\n,\\[ \"8 \", \". \", \". \", \". \", \"6 \", \". \", \". \", \". \", \"3 \"\\]\n,\\[ \"4 \", \". \", \". \", \"8 \", \". \", \"3 \", \". \", \". \", \"1 \"\\]\n,\\[ \"7 \", \". \", \". \", \". \", \"2 \", \". \", \". \", \". \", \"6 \"\\]\n,\\[ \". \", \"6 \", \". \", \". \", \". \", \". \", \"2 \", \"8 \", \". \"\\]\n,\\[ \". \", \". \", \". \", \"4 \", \"1 \", \"9 \", \". \", \". \", \"5 \"\\]\n,\\[ \". \", \". \", \". \", \". \", \"8 \", \". \", \". \", \"7 \", \"9 \"\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** board = \n\\[\\[ \"8 \", \"3 \", \". \", \". \", \"7 \", \". \", \". \", \". \", \". \"\\]\n,\\[ \"6 \", \". \", \". \", \"1 \", \"9 \", \"5 \", \". \", \". \", \". \"\\]\n,\\[ \". \", \"9 \", \"8 \", \". \", \". \", \". \", \". \", \"6 \", \". \"\\]\n,\\[ \"8 \", \". \", \". \", \". \", \"6 \", \". \", \". \", \". \", \"3 \"\\]\n,\\[ \"4 \", \". \", \". \", \"8 \", \". \", \"3 \", \". \", \". \", \"1 \"\\]\n,\\[ \"7 \", \". \", \". \", \". \", \"2 \", \". \", \". \", \". \", \"6 \"\\]\n,\\[ \". \", \"6 \", \". \", \". \", \". \", \". \", \"2 \", \"8 \", \". \"\\]\n,\\[ \". \", \". \", \". \", \"4 \", \"1 \", \"9 \", \". \", \". \", \"5 \"\\]\n,\\[ \". \", \". \", \". \", \". \", \"8 \", \". \", \". \", \"7 \", \"9 \"\\]\\]\n**Output:** false\n**Explanation:** Same as Example 1, except with the **5** in the top left corner being modified to **8**. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n\n**Constraints:**\n\n*   `board.length == 9`\n*   `board[i].length == 9`\n*   `board[i][j]` is a digit `1-9` or `'.'`.",
          "output": "def isValidSudoku(board):\n    seen = set()\n\n    for i in range(9):\n        for j in range(9):\n            current_val = board[i][j]\n            \n            if current_val != '.':\n                row = f\"{current_val} in row {i}\"\n                col = f\"{current_val} in col {j}\"\n                box = f\"{current_val} in box {i // 3}-{j // 3}\"\n                \n                if row in seen or col in seen or box in seen:\n                    return False\n\n                seen.add(row)\n                seen.add(col)\n                seen.add(box)\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy **all of the following rules**:\n\n1.  Each of the digits `1-9` must occur exactly once in each row.\n2.  Each of the digits `1-9` must occur exactly once in each column.\n3.  Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.\n\nThe `'.'` character indicates empty cells.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \"5 \", \"3 \", \". \", \". \", \"7 \", \". \", \". \", \". \", \". \"\\],\\[ \"6 \", \". \", \". \", \"1 \", \"9 \", \"5 \", \". \", \". \", \". \"\\],\\[ \". \", \"9 \", \"8 \", \". \", \". \", \". \", \". \", \"6 \", \". \"\\],\\[ \"8 \", \". \", \". \", \". \", \"6 \", \". \", \". \", \". \", \"3 \"\\],\\[ \"4 \", \". \", \". \", \"8 \", \". \", \"3 \", \". \", \". \", \"1 \"\\],\\[ \"7 \", \". \", \". \", \". \", \"2 \", \". \", \". \", \". \", \"6 \"\\],\\[ \". \", \"6 \", \". \", \". \", \". \", \". \", \"2 \", \"8 \", \". \"\\],\\[ \". \", \". \", \". \", \"4 \", \"1 \", \"9 \", \". \", \". \", \"5 \"\\],\\[ \". \", \". \", \". \", \". \", \"8 \", \". \", \". \", \"7 \", \"9 \"\\]\\]\n**Output:** \\[\\[ \"5 \", \"3 \", \"4 \", \"6 \", \"7 \", \"8 \", \"9 \", \"1 \", \"2 \"\\],\\[ \"6 \", \"7 \", \"2 \", \"1 \", \"9 \", \"5 \", \"3 \", \"4 \", \"8 \"\\],\\[ \"1 \", \"9 \", \"8 \", \"3 \", \"4 \", \"2 \", \"5 \", \"6 \", \"7 \"\\],\\[ \"8 \", \"5 \", \"9 \", \"7 \", \"6 \", \"1 \", \"4 \", \"2 \", \"3 \"\\],\\[ \"4 \", \"2 \", \"6 \", \"8 \", \"5 \", \"3 \", \"7 \", \"9 \", \"1 \"\\],\\[ \"7 \", \"1 \", \"3 \", \"9 \", \"2 \", \"4 \", \"8 \", \"5 \", \"6 \"\\],\\[ \"9 \", \"6 \", \"1 \", \"5 \", \"3 \", \"7 \", \"2 \", \"8 \", \"4 \"\\],\\[ \"2 \", \"8 \", \"7 \", \"4 \", \"1 \", \"9 \", \"6 \", \"3 \", \"5 \"\\],\\[ \"3 \", \"4 \", \"5 \", \"2 \", \"8 \", \"6 \", \"1 \", \"7 \", \"9 \"\\]\\]\n**Explanation:** The input board is shown above and the only valid solution is shown below:\n\n \n\n**Constraints:**\n\n*   `board.length == 9`\n*   `board[i].length == 9`\n*   `board[i][j]` is a digit or `'.'`.\n*   It is **guaranteed** that the input board has only one solution.",
          "output": "def isValid(board, row, col, c):\n    for i in range(9):\n        if board[i][col] == c:\n            return False\n        if board[row][i] == c:\n            return False\n        if board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == c:\n            return False\n    return True\n\ndef solveSudokuHelper(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == '.':\n                for c in '123456789':\n                    if isValid(board, i, j, c):\n                        board[i][j] = c\n\n                        if solveSudokuHelper(board):\n                            return True\n\n                        board[i][j] = '.'\n                return False\n\n    return True\n\ndef solveSudoku(board):\n    solveSudokuHelper(board)\n"
     },
     {
          "instruction": "Write python code for this problem: The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula:\n\n*   `countAndSay(1) = \"1 \"`\n*   `countAndSay(n)` is the way you would \"say \" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.\n\nTo determine how you \"say \" a digit string, split it into the **minimal** number of substrings such that each substring contains exactly **one** unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n\nFor example, the saying and conversion for digit string `\"3322251 \"`:\n\nGiven a positive integer `n`, return _the_ `nth` _term of the **count-and-say** sequence_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:**  \"1 \"\n**Explanation:** This is the base case.\n\n**Example 2:**\n\n**Input:** n = 4\n**Output:**  \"1211 \"\n**Explanation:**\ncountAndSay(1) =  \"1 \"\ncountAndSay(2) = say  \"1 \" = one 1 =  \"11 \"\ncountAndSay(3) = say  \"11 \" = two 1's =  \"21 \"\ncountAndSay(4) = say  \"21 \" = one 2 + one 1 =  \"12 \" +  \"11 \" =  \"1211 \"\n\n**Constraints:**\n\n*   `1 <= n <= 30`The following are the terms from n=1 to n=10 of the count-and-say sequence:\r\n\r\n 1.     1\r\n 2.     11\r\n 3.     21\r\n 4.     1211\r\n 5.     111221 \r\n 6.     312211\r\n 7.     13112221\r\n 8.     1113213211\r\n 9.     31131211131221\r\n10.     13211311123113112211 To generate the nth term, just count and say the n-1th term.",
          "output": "def count_and_say(n):\n    if n == 1:\n        return \"1\"\n    previous = count_and_say(n - 1)\n    result = []\n    count = 1\n    for i in range(1, len(previous)):\n        if previous[i] == previous[i - 1]:\n            count += 1\n        else:\n            result.append(str(count))\n            result.append(previous[i - 1])\n            count = 1\n    result.append(str(count))\n    result.append(previous[-1])\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of **distinct** integers `candidates` and a target integer `target`, return _a list of all **unique combinations** of_ `candidates` _where the chosen numbers sum to_ `target`_._ You may return the combinations in **any order**.\n\nThe **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nThe test cases are generated such that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.\n\n",
          "input": "**Example 1:**\n\n**Input:** candidates = \\[2,3,6,7\\], target = 7\n**Output:** \\[\\[2,2,3\\],\\[7\\]\\]\n**Explanation:**\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n\n**Example 2:**\n\n**Input:** candidates = \\[2,3,5\\], target = 8\n**Output:** \\[\\[2,2,2,2\\],\\[2,3,3\\],\\[3,5\\]\\]\n\n**Example 3:**\n\n**Input:** candidates = \\[2\\], target = 1\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= candidates.length <= 30`\n*   `2 <= candidates[i] <= 40`\n*   All elements of `candidates` are **distinct**.\n*   `1 <= target <= 40`",
          "output": "def combinationSum(candidates, target):\n    def findCombinations(startIndex, remaining):\n        if remaining == 0:\n            return [[]]\n        if startIndex == len(candidates) or remaining < 0:\n            return []\n\n        result = []\n        result.extend(findCombinations(startIndex + 1, remaining))\n        result.extend([x + [candidates[startIndex]] for x in findCombinations(startIndex, remaining - candidates[startIndex])])\n        \n        return result\n\n    return findCombinations(0, target)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.\n\nEach number in `candidates` may only be used **once** in the combination.\n\n**Note:** The solution set must not contain duplicate combinations.\n\n",
          "input": "**Example 1:**\n\n**Input:** candidates = \\[10,1,2,7,6,1,5\\], target = 8\n**Output:** \n\\[\n\\[1,1,6\\],\n\\[1,2,5\\],\n\\[1,7\\],\n\\[2,6\\]\n\\]\n\n**Example 2:**\n\n**Input:** candidates = \\[2,5,2,1,2\\], target = 5\n**Output:** \n\\[\n\\[1,2,2\\],\n\\[5\\]\n\\]\n\n**Constraints:**\n\n*   `1 <= candidates.length <= 100`\n*   `1 <= candidates[i] <= 50`\n*   `1 <= target <= 30`",
          "output": "def combinationSum2(candidates, target):\n    def combine(candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i - 1]:\n                continue\n            if candidates[i] > target:\n                break\n            combine(candidates, target - candidates[i], i+1, path + [candidates[i]], res)\n\n    candidates.sort()\n    res = []\n    combine(candidates, target, 0, [], res)\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given an unsorted integer array `nums`, return the smallest missing positive integer.\n\nYou must implement an algorithm that runs in `O(n)` time and uses constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,0\\]\n**Output:** 3\n**Explanation:** The numbers in the range \\[1,2\\] are all in the array.\n\n**Example 2:**\n\n**Input:** nums = \\[3,4,-1,1\\]\n**Output:** 2\n**Explanation:** 1 is in the array but 2 is missing.\n\n**Example 3:**\n\n**Input:** nums = \\[7,8,9,11,12\\]\n**Output:** 1\n**Explanation:** The smallest positive integer 1 is missing.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-231 <= nums[i] <= 231 - 1`Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space? We don't care about duplicates or non-positive integers Remember that O(2n) = O(n)",
          "output": "def firstMissingPositive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.\n\n",
          "input": "**Example 1:**\n\n**Input:** height = \\[0,1,0,2,1,0,1,3,2,1,2,1\\]\n**Output:** 6\n**Explanation:** The above elevation map (black section) is represented by array \\[0,1,0,2,1,0,1,3,2,1,2,1\\]. In this case, 6 units of rain water (blue section) are being trapped.\n\n**Example 2:**\n\n**Input:** height = \\[4,2,0,3,2,5\\]\n**Output:** 9\n\n**Constraints:**\n\n*   `n == height.length`\n*   `1 <= n <= 2 * 104`\n*   `0 <= height[i] <= 105`",
          "output": "def trap(height):\n    n = len(height)\n    left, right, max_left, max_right, water = 0, n - 1, 0, 0, 0\n\n    while left < right:\n        if height[left] <= height[right]:\n            max_left = max(max_left, height[left])\n            water += max_left - height[left]\n            left += 1\n        else:\n            max_right = max(max_right, height[right])\n            water += max_right - height[right]\n            right -= 1\n\n    return water\n"
     },
     {
          "instruction": "Write python code for this problem: Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.\n\n**Note:** You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n",
          "input": "**Example 1:**\n\n**Input:** num1 = \"2\", num2 = \"3\"\n**Output:** \"6\"\n\n**Example 2:**\n\n**Input:** num1 = \"123\", num2 = \"456\"\n**Output:** \"56088\"\n\n**Constraints:**\n\n*   `1 <= num1.length, num2.length <= 200`\n*   `num1` and `num2` consist of digits only.\n*   Both `num1` and `num2` do not contain any leading zero, except the number `0` itself.",
          "output": "def multiply(num1, num2):\n    m, n = len(num1), len(num2)\n    pos = [0] * (m + n)\n    \n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            mult = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))\n            p1, p2 = i + j, i + j + 1\n            total_pos = mult + pos[p2]\n            pos[p1] += total_pos // 10\n            pos[p2] = total_pos % 10\n            \n    res = ''.join(str(p) for p in pos if not (len(res) == 0 and p == 0))            \n    return '0' if len(res) == 0 else res\n"
     },
     {
          "instruction": "Write python code for this problem: Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:\n\n*   `'?'` Matches any single character.\n*   `'*'` Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the **entire** input string (not partial).\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aa \", p =  \"a \"\n**Output:** false\n**Explanation:**  \"a \" does not match the entire string  \"aa \".\n\n**Example 2:**\n\n**Input:** s =  \"aa \", p =  \"\\* \"\n**Output:** true\n**Explanation:** '\\*' matches any sequence.\n\n**Example 3:**\n\n**Input:** s =  \"cb \", p =  \"?a \"\n**Output:** false\n**Explanation:** '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n**Constraints:**\n\n*   `0 <= s.length, p.length <= 2000`\n*   `s` contains only lowercase English letters.\n*   `p` contains only lowercase English letters, `'?'` or `'*'`.",
          "output": "def is_match(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    i = j = 0\n    match = asterisk = -1\n    while i < m:\n        if j < n and (s[i] == p[j] or p[j] == '?'):\n            i, j = i + 1, j + 1\n        elif j < n and p[j] == '*':\n            match, asterisk = i, j\n            j += 1\n        elif asterisk >= 0:\n            i, j = match + 1, asterisk + 1\n            match += 1\n        else:\n            return False\n    while j < n and p[j] == '*':\n        j += 1\n    return j == n\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of integers `nums` of length `n`. You are initially positioned at `nums[0]`.\n\nEach element `nums[i]` represents the maximum length of a forward jump from index `i`. In other words, if you are at `nums[i]`, you can jump to any `nums[i + j]` where:\n\n*   `0 <= j <= nums[i]` and\n*   `i + j < n`\n\nReturn _the minimum number of jumps to reach_ `nums[n - 1]`. The test cases are generated such that you can reach `nums[n - 1]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,1,1,4\\]\n**Output:** 2\n**Explanation:** The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,0,1,4\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `0 <= nums[i] <= 1000`\n*   It's guaranteed that you can reach `nums[n - 1]`.",
          "output": "def jump(nums):\n    jumps = 0\n    current_end = 0\n    current_farthest = 0\n\n    for i in range(len(nums) - 1):\n        current_farthest = max(current_farthest, i + nums[i])\n        if i == current_end:\n            jumps += 1\n            current_end = current_farthest\n\n    return jumps\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of distinct integers, return _all the possible permutations_. You can return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** \\[\\[1,2,3\\],\\[1,3,2\\],\\[2,1,3\\],\\[2,3,1\\],\\[3,1,2\\],\\[3,2,1\\]\\]\n\n**Example 2:**\n\n**Input:** nums = \\[0,1\\]\n**Output:** \\[\\[0,1\\],\\[1,0\\]\\]\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** \\[\\[1\\]\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 6`\n*   `-10 <= nums[i] <= 10`\n*   All the integers of `nums` are **unique**.",
          "output": "from typing import List\n\ndef permute(nums: List[int]) -> List[List[int]]:\n    def helper(index):\n        if index == len(nums) - 1:\n            results.append(nums[:])\n            return\n\n        for i in range(index, len(nums)):\n            nums[index], nums[i] = nums[i], nums[index]\n            helper(index + 1)\n            nums[index], nums[i] = nums[i], nums[index]\n\n    results = []\n    helper(0)\n    return results\n"
     },
     {
          "instruction": "Write python code for this problem: Given a collection of numbers, `nums`, that might contain duplicates, return _all possible unique permutations **in any order**._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,2\\]\n**Output:**\n\\[\\[1,1,2\\],\n \\[1,2,1\\],\n \\[2,1,1\\]\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** \\[\\[1,2,3\\],\\[1,3,2\\],\\[2,1,3\\],\\[2,3,1\\],\\[3,1,2\\],\\[3,2,1\\]\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 8`\n*   `-10 <= nums[i] <= 10`",
          "output": "from typing import List\n\ndef permuteUnique(nums: List[int]) -> List[List[int]]:\n    def backtrack(start):\n        if start == len(nums):\n            result.append(nums[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[start]:\n                continue\n            nums[start], nums[i] = nums[i], nums[start]\n            backtrack(start + 1)\n            nums[start], nums[i] = nums[i], nums[start]\n\n    nums.sort()\n    result = []\n    backtrack(0)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` 2D `matrix` representing an image, rotate the image by **90** degrees (clockwise).\n\nYou have to rotate the image [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm), which means you have to modify the input 2D matrix directly. **DO NOT** allocate another 2D matrix and do the rotation.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** \\[\\[7,4,1\\],\\[8,5,2\\],\\[9,6,3\\]\\]\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[5,1,9,11\\],\\[2,4,8,10\\],\\[13,3,6,7\\],\\[15,14,12,16\\]\\]\n**Output:** \\[\\[15,13,2,5\\],\\[14,3,4,1\\],\\[12,6,8,9\\],\\[16,7,10,11\\]\\]\n\n**Constraints:**\n\n*   `n == matrix.length == matrix[i].length`\n*   `1 <= n <= 20`\n*   `-1000 <= matrix[i][j] <= 1000`",
          "output": "def rotate(matrix):\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `strs`, group **the anagrams** together. You can return the answer in **any order**.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"\\]\n**Output:** \\[\\[\"bat\"\\],\\[\"nat\",\"tan\"\\],\\[\"ate\",\"eat\",\"tea\"\\]\\]\n\n**Example 2:**\n\n**Input:** strs = \\[\"\"\\]\n**Output:** \\[\\[\"\"\\]\\]\n\n**Example 3:**\n\n**Input:** strs = \\[\"a\"\\]\n**Output:** \\[\\[\"a\"\\]\\]\n\n**Constraints:**\n\n*   `1 <= strs.length <= 104`\n*   `0 <= strs[i].length <= 100`\n*   `strs[i]` consists of lowercase English letters.",
          "output": "from collections import defaultdict\n\ndef group_anagrams(strs):\n    anagram_map = defaultdict(list)\n\n    for s in strs:\n        key = ''.join(sorted(s))\n        anagram_map[key].append(s)\n\n    return list(anagram_map.values())\n"
     },
     {
          "instruction": "Write python code for this problem: Implement [pow(x, n)](http://www.cplusplus.com/reference/valarray/pow/), which calculates `x` raised to the power `n` (i.e., `xn`).\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 2.00000, n = 10\n**Output:** 1024.00000\n\n**Example 2:**\n\n**Input:** x = 2.10000, n = 3\n**Output:** 9.26100\n\n**Example 3:**\n\n**Input:** x = 2.00000, n = -2\n**Output:** 0.25000\n**Explanation:** 2\\-2 = 1/22 = 1/4 = 0.25\n\n**Constraints:**\n\n*   `-100.0 < x < 100.0`\n*   `-231 <= n <= 231-1`\n*   `n` is an integer.\n*   `-104 <= xn <= 104`",
          "output": "def myPow(x: float, n: int) -> float:\n    if n == 0:\n        return 1\n    if n < 0:\n        x = 1 / x\n        n = -n\n    result = 1\n    currentProduct = x\n    i = n\n    while i:\n        if i % 2 == 1:\n            result *= currentProduct\n        currentProduct *= currentProduct\n        i //= 2\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return _all distinct solutions to the **n-queens puzzle**_. You may return the answer in **any order**.\n\nEach solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:** \\[\\[ \".Q.. \", \"...Q \", \"Q... \", \"..Q. \"\\],\\[ \"..Q. \", \"Q... \", \"...Q \", \".Q.. \"\\]\\]\n**Explanation:** There exist two distinct solutions to the 4-queens puzzle as shown above\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** \\[\\[ \"Q \"\\]\\]\n\n**Constraints:**\n\n*   `1 <= n <= 9`",
          "output": "def solveNQueens(n):\n    def isSafe(board, row, col):\n        for i in range(col):\n            if board[row][i] == 'Q': return False\n        i, j = row, col\n        while i >= 0 and j >= 0:\n            if board[i][j] == 'Q': return False\n            i, j = i - 1, j - 1\n        i, j = row, col\n        while i < n and j >= 0:\n            if board[i][j] == 'Q': return False\n            i, j = i + 1, j - 1\n        return True\n\n    def solve(result, board, n, col):\n        if col == n:\n            result.append(board.copy())\n            return\n        for row in range(n):\n            if isSafe(board, row, col):\n                board[row] = board[row][:col] + 'Q' + board[row][col + 1:]\n                solve(result, board, n, col + 1)\n                board[row] = board[row][:col] + '.' + board[row][col + 1:]\n\n    result, board = [], ['.' * n for _ in range(n)]\n    solve(result, board, n, 0)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return _the number of distinct solutions to the **n-queens puzzle**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:** 2\n**Explanation:** There are two distinct solutions to the 4-queens puzzle as shown.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 9`",
          "output": "def is_safe(cols, row):\n    col = len(cols)\n    for i, r in enumerate(cols):\n        if r == row or abs(i - col) == abs(r - row):\n            return False\n    return True\n\n\ndef backtrack(n, cols):\n    if len(cols) == n:\n        return 1\n\n    count = 0\n    for i in range(n):\n        if is_safe(cols, i):\n            cols.append(i)\n            count += backtrack(n, cols)\n            cols.pop()\n\n    return count\n\n\ndef total_n_queens(n):\n    cols = []\n    return backtrack(n, cols)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, find the subarray with the largest sum, and return _its sum_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-2,1,-3,4,-1,2,1,-5,4\\]\n**Output:** 6\n**Explanation:** The subarray \\[4,-1,2,1\\] has the largest sum 6.\n\n**Example 2:**\n\n**Input:** nums = \\[1\\]\n**Output:** 1\n**Explanation:** The subarray \\[1\\] has the largest sum 1.\n\n**Example 3:**\n\n**Input:** nums = \\[5,4,-1,7,8\\]\n**Output:** 23\n**Explanation:** The subarray \\[5,4,-1,7,8\\] has the largest sum 23.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`\n\n**Follow up:** If you have figured out the `O(n)` solution, try coding another solution using the **divide and conquer** approach, which is more subtle.",
          "output": "def maxSubArray(nums):\n    max_sum = current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` `matrix`, return _all elements of the_ `matrix` _in spiral order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** \\[1,2,3,6,9,8,7,4,5\\]\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,2,3,4\\],\\[5,6,7,8\\],\\[9,10,11,12\\]\\]\n**Output:** \\[1,2,3,4,8,12,11,10,9,5,6,7\\]\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 10`\n*   `-100 <= matrix[i][j] <= 100`Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do. We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column and then we move inwards by 1 and then repeat. That's all, that is all the simulation that we need. Think about when you want to switch the progress on one of the indexes. If you progress on i out of [i, j], you'd be shifting in the same column. Similarly, by changing values for j, you'd be shifting in the same row.\r\nAlso, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to run the simulation on edge cases like a single column or a single row to see if anything breaks or not.",
          "output": "def spiralOrder(matrix):\n    result = []\n    if not matrix: return result\n    m, n = len(matrix), len(matrix[0])\n    rowStart, colStart, rowEnd, colEnd = 0, 0, m - 1, n - 1\n\n    while rowStart <= rowEnd and colStart <= colEnd:\n        for i in range(colStart, colEnd + 1): \n            result.append(matrix[rowStart][i])\n        rowStart += 1\n        \n        for i in range(rowStart, rowEnd + 1): \n            result.append(matrix[i][colEnd]) \n        colEnd -= 1\n        \n        if rowStart <= rowEnd:\n            for i in range(colEnd, colStart - 1, -1): \n                result.append(matrix[rowEnd][i]) \n        rowEnd -= 1\n        \n        if colStart <= colEnd:\n            for i in range(rowEnd, rowStart - 1, -1): \n                result.append(matrix[i][colStart]) \n        colStart += 1\n        \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. You are initially positioned at the array's **first index**, and each element in the array represents your maximum jump length at that position.\n\nReturn `true` _if you can reach the last index, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,1,1,4\\]\n**Output:** true\n**Explanation:** Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,1,0,4\\]\n**Output:** false\n**Explanation:** You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `0 <= nums[i] <= 105`",
          "output": "def canJump(nums):\n    max_reach = 0\n    for i, num in enumerate(nums):\n        if i > max_reach:\n            return False\n        max_reach = max(max_reach, i + num)\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return _an array of the non-overlapping intervals that cover all the intervals in the input_.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[1,3\\],\\[2,6\\],\\[8,10\\],\\[15,18\\]\\]\n**Output:** \\[\\[1,6\\],\\[8,10\\],\\[15,18\\]\\]\n**Explanation:** Since intervals \\[1,3\\] and \\[2,6\\] overlap, merge them into \\[1,6\\].\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[1,4\\],\\[4,5\\]\\]\n**Output:** \\[\\[1,5\\]\\]\n**Explanation:** Intervals \\[1,4\\] and \\[4,5\\] are considered overlapping.\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 104`\n*   `intervals[i].length == 2`\n*   `0 <= starti <= endi <= 104`",
          "output": "def merge(intervals):\n    if not intervals:\n        return []\n\n    intervals.sort()\n    result = [intervals[0]]\n\n    for i in range(1, len(intervals)):\n        if result[-1][1] >= intervals[i][0]:\n            result[-1][1] = max(result[-1][1], intervals[i][1])\n        else:\n            result.append(intervals[i])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.\n\nInsert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn `intervals` _after the insertion_.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[1,3\\],\\[6,9\\]\\], newInterval = \\[2,5\\]\n**Output:** \\[\\[1,5\\],\\[6,9\\]\\]\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[1,2\\],\\[3,5\\],\\[6,7\\],\\[8,10\\],\\[12,16\\]\\], newInterval = \\[4,8\\]\n**Output:** \\[\\[1,2\\],\\[3,10\\],\\[12,16\\]\\]\n**Explanation:** Because the new interval \\[4,8\\] overlaps with \\[3,5\\],\\[6,7\\],\\[8,10\\].\n\n**Constraints:**\n\n*   `0 <= intervals.length <= 104`\n*   `intervals[i].length == 2`\n*   `0 <= starti <= endi <= 105`\n*   `intervals` is sorted by `starti` in **ascending** order.\n*   `newInterval.length == 2`\n*   `0 <= start <= end <= 105`",
          "output": "from typing import List\n\ndef insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n    result = []\n    start_pos = 0\n\n    while start_pos < len(intervals) and intervals[start_pos][1] < newInterval[0]:\n        result.append(intervals[start_pos])\n        start_pos += 1\n\n    while start_pos < len(intervals) and intervals[start_pos][0] <= newInterval[1]:\n        newInterval[0] = min(newInterval[0], intervals[start_pos][0])\n        newInterval[1] = max(newInterval[1], intervals[start_pos][1])\n        start_pos += 1\n\n    result.append(newInterval)\n\n    while start_pos < len(intervals):\n        result.append(intervals[start_pos])\n        start_pos += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` consisting of words and spaces, return _the length of the **last** word in the string._\n\nA **word** is a maximal substring consisting of non-space characters only.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"Hello World \"\n**Output:** 5\n**Explanation:** The last word is  \"World \" with length 5.\n\n**Example 2:**\n\n**Input:** s =  \"   fly me   to   the moon   \"\n**Output:** 4\n**Explanation:** The last word is  \"moon \" with length 4.\n\n**Example 3:**\n\n**Input:** s =  \"luffy is still joyboy \"\n**Output:** 6\n**Explanation:** The last word is  \"joyboy \" with length 6.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of only English letters and spaces `' '`.\n*   There will be at least one word in `s`.",
          "output": "def length_of_last_word(s: str) -> int:\n    length = 0\n    tail = len(s) - 1\n    while tail >= 0 and s[tail] == ' ':\n        tail -= 1\n    while tail >= 0 and s[tail] != ' ':\n        length += 1\n        tail -= 1\n    return length\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** \\[\\[1,2,3\\],\\[8,9,4\\],\\[7,6,5\\]\\]\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** \\[\\[1\\]\\]\n\n**Constraints:**\n\n*   `1 <= n <= 20`",
          "output": "def generateMatrix(n: int) -> List[List[int]]:\n    matrix = [[0] * n for _ in range(n)]\n    value, top, bottom, left, right = 1, 0, n - 1, 0, n - 1\n\n    while value <= n * n:\n        for i in range(left, right + 1):\n            matrix[top][i] = value\n            value += 1\n\n        for i in range(top + 1, bottom + 1):\n            matrix[i][right] = value\n            value += 1\n\n        if top < bottom and left < right:\n            for i in range(right - 1, left - 1, -1):\n                matrix[bottom][i] = value\n                value += 1\n\n            for i in range(bottom - 1, top, -1):\n                matrix[i][left] = value\n                value += 1\n\n        top, bottom, left, right = top + 1, bottom - 1, left + 1, right - 1\n\n    return matrix\n"
     },
     {
          "instruction": "Write python code for this problem: The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:\n\n1.  `\"123 \"`\n2.  `\"132 \"`\n3.  `\"213 \"`\n4.  `\"231 \"`\n5.  `\"312 \"`\n6.  `\"321 \"`\n\nGiven `n` and `k`, return the `kth` permutation sequence.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 3\n**Output:** \"213\"\n\n**Example 2:**\n\n**Input:** n = 4, k = 9\n**Output:** \"2314\"\n\n**Example 3:**\n\n**Input:** n = 3, k = 1\n**Output:** \"123\"\n\n**Constraints:**\n\n*   `1 <= n <= 9`\n*   `1 <= k <= n!`",
          "output": "def getPermutation(n, k):\n    factorials = [1]\n    nums = list(range(1, n + 1))\n    result = []\n\n    for i in range(1, n):\n        factorials.append(factorials[-1] * i)\n\n    k -= 1\n\n    for i in range(n, 0, -1):\n        index = k // factorials[i - 1]\n        k %= factorials[i - 1]\n        result.append(str(nums.pop(index)))\n\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list, rotate the list to the right by `k` places.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\], k = 2\n**Output:** \\[4,5,1,2,3\\]\n\n**Example 2:**\n\n**Input:** head = \\[0,1,2\\], k = 4\n**Output:** \\[2,0,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 500]`.\n*   `-100 <= Node.val <= 100`\n*   `0 <= k <= 2 * 109`",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef rotateRight(head, k):\n    if not head or not head.next or k == 0:\n        return head\n\n    current = head\n    length = 1\n    while current.next:\n        length += 1\n        current = current.next\n    current.next = head\n    k = length - k % length\n\n    while k:\n        k -= 1\n        current = current.next\n    head = current.next\n    current.next = None\n\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\nGiven the two integers `m` and `n`, return _the number of possible unique paths that the robot can take to reach the bottom-right corner_.\n\nThe test cases are generated so that the answer will be less than or equal to `2 * 109`.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 3, n = 7\n**Output:** 28\n\n**Example 2:**\n\n**Input:** m = 3, n = 2\n**Output:** 3\n**Explanation:** From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n\n**Constraints:**\n\n*   `1 <= m, n <= 100`",
          "output": "def uniquePaths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\nAn obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle.\n\nReturn _the number of possible unique paths that the robot can take to reach the bottom-right corner_.\n\nThe testcases are generated so that the answer will be less than or equal to `2 * 109`.\n\n",
          "input": "**Example 1:**\n\n**Input:** obstacleGrid = \\[\\[0,0,0\\],\\[0,1,0\\],\\[0,0,0\\]\\]\n**Output:** 2\n**Explanation:** There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\n**Example 2:**\n\n**Input:** obstacleGrid = \\[\\[0,1\\],\\[0,0\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == obstacleGrid.length`\n*   `n == obstacleGrid[i].length`\n*   `1 <= m, n <= 100`\n*   `obstacleGrid[i][j]` is `0` or `1`.The robot can only move either down or right. Hence any cell in the first row can only be reached from the cell left to it. However, if any cell has an obstacle, you don't let that cell contribute to any path. So, for the first row, the number of ways will simply be \r\n\r\n\r\nif obstacleGrid[i][j] is not an obstacle\r\n     obstacleGrid[i,j] = obstacleGrid[i,j - 1] \r\nelse\r\n     obstacleGrid[i,j] = 0\r\n\r\n\r\nYou can do a similar processing for finding out the number of ways of reaching the cells in the first column. For any other cell, we can find out the number of ways of reaching it, by making use of the number of ways of reaching the cell directly above it and the cell to the left of it in the grid. This is because these are the only two directions from which the robot can come to the current cell. Since we are making use of pre-computed values along the iteration, this becomes a dynamic programming problem.\r\n\r\n\r\nif obstacleGrid[i][j] is not an obstacle\r\n     obstacleGrid[i,j] = obstacleGrid[i,j - 1]  + obstacleGrid[i - 1][j]\r\nelse\r\n     obstacleGrid[i,j] = 0",
          "output": "def uniquePathsWithObstacles(grid):\n    m, n = len(grid), len(grid[0])\n    if grid[0][0] == 1:\n        return 0\n\n    grid[0][0] = 1\n    for i in range(1, m):\n        grid[i][0] = 1 if grid[i][0] == 0 and grid[i - 1][0] == 1 else 0\n    for i in range(1, n):\n        grid[0][i] = 1 if grid[0][i] == 0 and grid[0][i - 1] == 1 else 0\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i][j] == 0:\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1]\n            else:\n                grid[i][j] = 0\n\n    return grid[m - 1][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\n**Note:** You can only move either down or right at any point in time.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,3,1\\],\\[1,5,1\\],\\[4,2,1\\]\\]\n**Output:** 7\n**Explanation:** Because the path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,2,3\\],\\[4,5,6\\]\\]\n**Output:** 12\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 200`\n*   `0 <= grid[i][j] <= 100`",
          "output": "def minPathSum(grid):\n    m, n = len(grid), len(grid[0])\n\n    for i in range(1, m):\n        grid[i][0] += grid[i - 1][0]\n\n    for i in range(1, n):\n        grid[0][i] += grid[0][i - 1]\n\n    for i in range(1, m):\n        for j in range(1, n):\n            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1])\n\n    return grid[m - 1][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: A **valid number** can be split up into these components (in order):\n\n1.  A **decimal number** or an **integer**.\n2.  (Optional) An `'e'` or `'E'`, followed by an **integer**.\n\nA **decimal number** can be split up into these components (in order):\n\n1.  (Optional) A sign character (either `'+'` or `'-'`).\n2.  One of the following formats:\n    1.  One or more digits, followed by a dot `'.'`.\n    2.  One or more digits, followed by a dot `'.'`, followed by one or more digits.\n    3.  A dot `'.'`, followed by one or more digits.\n\nAn **integer** can be split up into these components (in order):\n\n1.  (Optional) A sign character (either `'+'` or `'-'`).\n2.  One or more digits.\n\nFor example, all the following are valid numbers: `[ \"2 \", \"0089 \", \"-0.1 \", \"+3.14 \", \"4. \", \"-.9 \", \"2e10 \", \"-90E3 \", \"3e+7 \", \"+6e-1 \", \"53.5e93 \", \"-123.456e789 \"]`, while the following are not valid numbers: `[ \"abc \", \"1a \", \"1e \", \"e3 \", \"99e2.5 \", \"--6 \", \"-+3 \", \"95a54e53 \"]`.\n\nGiven a string `s`, return `true` _if_ `s` _is a **valid number**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"0 \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s =  \"e \"\n**Output:** false\n\n**Example 3:**\n\n**Input:** s =  \". \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length <= 20`\n*   `s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.",
          "output": "import re\n\ndef is_number(s: str) -> bool:\n    pattern = re.compile(r'^[-+]?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(e[-+]?[0-9]+)?$')\n    return bool(pattern.match(s))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s.\n\nIncrement the large integer by one and return _the resulting array of digits_.\n\n",
          "input": "**Example 1:**\n\n**Input:** digits = \\[1,2,3\\]\n**Output:** \\[1,2,4\\]\n**Explanation:** The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be \\[1,2,4\\].\n\n**Example 2:**\n\n**Input:** digits = \\[4,3,2,1\\]\n**Output:** \\[4,3,2,2\\]\n**Explanation:** The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be \\[4,3,2,2\\].\n\n**Example 3:**\n\n**Input:** digits = \\[9\\]\n**Output:** \\[1,0\\]\n**Explanation:** The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be \\[1,0\\].\n\n**Constraints:**\n\n*   `1 <= digits.length <= 100`\n*   `0 <= digits[i] <= 9`\n*   `digits` does not contain any leading `0`'s.",
          "output": "def plusOne(digits: List[int]) -> List[int]:\n    n = len(digits)\n\n    for i in range(n - 1, -1, -1):\n        if digits[i] < 9:\n            digits[i] += 1\n            return digits\n        digits[i] = 0\n\n    digits.insert(0, 1)\n    return digits\n"
     },
     {
          "instruction": "Write python code for this problem: Given two binary strings `a` and `b`, return _their sum as a binary string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** a = \"11\", b = \"1\"\n**Output:** \"100\"\n\n**Example 2:**\n\n**Input:** a = \"1010\", b = \"1011\"\n**Output:** \"10101\"\n\n**Constraints:**\n\n*   `1 <= a.length, b.length <= 104`\n*   `a` and `b` consist only of `'0'` or `'1'` characters.\n*   Each string does not contain leading zeros except for the zero itself.",
          "output": "def addBinary(a: str, b: str) -> str:\n    result, carry, i, j = \"\", 0, len(a) - 1, len(b) - 1\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0:\n            carry += int(a[i])\n            i -= 1\n        if j >= 0:\n            carry += int(b[j])\n            j -= 1\n        result = str(carry % 2) + result\n        carry //= 2\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\n\n**Note:**\n\n*   A word is defined as a character sequence consisting of non-space characters only.\n*   Each word's length is guaranteed to be greater than `0` and not exceed `maxWidth`.\n*   The input array `words` contains at least one word.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"This \",  \"is \",  \"an \",  \"example \",  \"of \",  \"text \",  \"justification. \"\\], maxWidth = 16\n**Output:**\n\\[\n    \"This    is    an \",\n    \"example  of text \",\n    \"justification.   \"\n\\]\n\n**Example 2:**\n\n**Input:** words = \\[ \"What \", \"must \", \"be \", \"acknowledgment \", \"shall \", \"be \"\\], maxWidth = 16\n**Output:**\n\\[\n   \"What   must   be \",\n   \"acknowledgment   \",\n   \"shall be         \"\n\\]\n**Explanation:** Note that the last line is  \"shall be     \" instead of  \"shall     be \", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.\n\n**Example 3:**\n\n**Input:** words = \\[ \"Science \", \"is \", \"what \", \"we \", \"understand \", \"well \", \"enough \", \"to \", \"explain \", \"to \", \"a \", \"computer. \", \"Art \", \"is \", \"everything \", \"else \", \"we \", \"do \"\\], maxWidth = 20\n**Output:**\n\\[\n   \"Science  is  what we \",\n   \"understand      well \",\n   \"enough to explain to \",\n   \"a  computer.  Art is \",\n   \"everything  else  we \",\n   \"do                   \"\n\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 300`\n*   `1 <= words[i].length <= 20`\n*   `words[i]` consists of only English letters and symbols.\n*   `1 <= maxWidth <= 100`\n*   `words[i].length <= maxWidth`",
          "output": "def fullJustify(words, maxWidth):\n    result = []\n    idx = 0\n    while idx < len(words):\n        total_chars = len(words[idx])\n        last = idx + 1\n        while last < len(words):\n            if total_chars + 1 + len(words[last]) > maxWidth:\n                break\n            total_chars += 1 + len(words[last])\n            last += 1\n        gaps = last - idx - 1\n        line = []\n        if last == len(words) or gaps == 0:\n            for i in range(idx, last):\n                line.append(words[i])\n                if i < last - 1:\n                    line.append(\" \")\n            while sum(len(w) for w in line) < maxWidth:\n                line.append(\" \")\n        else:\n            even_spaces = (maxWidth - total_chars) // gaps\n            extra_spaces = (maxWidth - total_chars) % gaps\n            for i in range(idx, last):\n                line.append(words[i])\n                if i < last - 1:\n                    line.append(\" \" * (even_spaces + (1 if i - idx < extra_spaces else 0)))\n        idx = last\n        result.append(\"\".join(line))\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a non-negative integer `x`, return _the square root of_ `x` _rounded down to the nearest integer_. The returned integer should be **non-negative** as well.\n\nYou **must not use** any built-in exponent function or operator.\n\n*   For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 4\n**Output:** 2\n**Explanation:** The square root of 4 is 2, so we return 2.\n\n**Example 2:**\n\n**Input:** x = 8\n**Output:** 2\n**Explanation:** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n**Constraints:**\n\n*   `0 <= x <= 231 - 1`Try exploring all integers. (Credits: @annujoshi) Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)",
          "output": "def mySqrt(x):\n    if x == 0 or x == 1:\n        return x\n    start, end, ans = 1, x, 0\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * mid == x:\n            return mid\n        if mid * mid < x:\n            start = mid + 1\n            ans = mid\n        else:\n            end = mid - 1\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 2\n**Explanation:** There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** 3\n**Explanation:** There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n**Constraints:**\n\n*   `1 <= n <= 45`To reach nth step, what could have been your previous steps? (Think about the step sizes)",
          "output": "def climbStairs(n):\n    if n <= 2:\n        return n\n    a, b = 1, 2\n    for _ in range(3, n+1):\n        a, b = b, a + b\n    return b\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `path`, which is an **absolute path** (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified **canonical path**.\n\nIn a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.\n\nThe **canonical path** should have the following format:\n\n*   The path starts with a single slash `'/'`.\n*   Any two directories are separated by a single slash `'/'`.\n*   The path does not end with a trailing `'/'`.\n*   The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)\n\nReturn _the simplified **canonical path**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** path =  \"/home/ \"\n**Output:**  \"/home \"\n**Explanation:** Note that there is no trailing slash after the last directory name.\n\n**Example 2:**\n\n**Input:** path =  \"/../ \"\n**Output:**  \"/ \"\n**Explanation:** Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n\n**Example 3:**\n\n**Input:** path =  \"/home//foo/ \"\n**Output:**  \"/home/foo \"\n**Explanation:** In the canonical path, multiple consecutive slashes are replaced by a single one.\n\n**Constraints:**\n\n*   `1 <= path.length <= 3000`\n*   `path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.\n*   `path` is a valid absolute Unix path.",
          "output": "def simplifyPath(path: str) -> str:\n    stack = []\n    parts = path.split(\"/\")\n\n    for part in parts:\n        if not part or part == \".\":\n            continue\n        if part == \"..\":\n            if stack:\n                stack.pop()\n        else:\n            stack.append(part)\n\n    return \"/\" + \"/\".join(stack)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `word1` and `word2`, return _the minimum number of operations required to convert `word1` to `word2`_.\n\nYou have the following three operations permitted on a word:\n\n*   Insert a character\n*   Delete a character\n*   Replace a character\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 =  \"horse \", word2 =  \"ros \"\n**Output:** 3\n**Explanation:** \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\n\n**Example 2:**\n\n**Input:** word1 =  \"intention \", word2 =  \"execution \"\n**Output:** 5\n**Explanation:** \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n\n**Constraints:**\n\n*   `0 <= word1.length, word2.length <= 500`\n*   `word1` and `word2` consist of lowercase English letters.",
          "output": "def minDistance(word1: str, word2: str) -> int:\n    m, n = len(word1), len(word2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif word1[i - 1] == word2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n    \n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s.\n\nYou must do it [in place](https://en.wikipedia.org/wiki/In-place_algorithm).\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** \\[\\[1,0,1\\],\\[0,0,0\\],\\[1,0,1\\]\\]\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[0,1,2,0\\],\\[3,4,5,2\\],\\[1,3,1,5\\]\\]\n**Output:** \\[\\[0,0,0,0\\],\\[0,4,5,0\\],\\[0,3,1,0\\]\\]\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[0].length`\n*   `1 <= m, n <= 200`\n*   `-231 <= matrix[i][j] <= 231 - 1`\n\n**Follow up:**\n\n*   A straightforward solution using `O(mn)` space is probably a bad idea.\n*   A simple improvement uses `O(m + n)` space, but still not the best solution.\n*   Could you devise a constant space solution?If any cell of the matrix has a zero we can record its row and column number using additional memory.\r\nBut if you don't want to use extra memory then you can manipulate the array instead. i.e. simulating exactly what the question says. Setting cell values to zero on the fly while iterating might lead to discrepancies. What if you use some other integer value as your marker?\r\nThere is still a better approach for this problem with 0(1) space. We could have used 2 sets to keep a record of rows/columns which need to be set to zero. But for an O(1) space solution, you can use one of the rows and and one of the columns to keep track of this information. We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero.",
          "output": "def setZeroes(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    firstRow, firstCol = False, False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 0:\n                if i == 0: firstRow = True\n                if j == 0: firstCol = True\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n\n    for i in range(1, rows):\n        for j in range(1, cols):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\n    if firstRow:\n        for j in range(cols):\n            matrix[0][j] = 0\n\n    if firstCol:\n        for i in range(rows):\n            matrix[i][0] = 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer matrix `matrix` with the following two properties:\n\n*   Each row is sorted in non-decreasing order.\n*   The first integer of each row is greater than the last integer of the previous row.\n\nGiven an integer `target`, return `true` _if_ `target` _is in_ `matrix` _or_ `false` _otherwise_.\n\nYou must write a solution in `O(log(m * n))` time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,3,5,7\\],\\[10,11,16,20\\],\\[23,30,34,60\\]\\], target = 3\n**Output:** true\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,3,5,7\\],\\[10,11,16,20\\],\\[23,30,34,60\\]\\], target = 13\n**Output:** false\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 100`\n*   `-104 <= matrix[i][j], target <= 104`",
          "output": "def searchMatrix(matrix, target):\n    m, n = len(matrix), len(matrix[0])\n    l, r = 0, m * n - 1\n\n    while l <= r:\n        mid = l + (r - l) // 2\n        mid_val = matrix[mid // n][mid % n]\n\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` with `n` objects colored red, white, or blue, sort them **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.\n\nYou must solve this problem without using the library's sort function.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,0,2,1,1,0\\]\n**Output:** \\[0,0,1,1,2,2\\]\n\n**Example 2:**\n\n**Input:** nums = \\[2,0,1\\]\n**Output:** \\[0,1,2\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 300`\n*   `nums[i]` is either `0`, `1`, or `2`.\n\n**Follow up:** Could you come up with a one-pass algorithm using only constant extra space?A rather straight forward solution is a two-pass algorithm using counting sort. Iterate the array counting number of 0's, 1's, and 2's. Overwrite array with the total number of 0's, then 1's and followed by 2's.",
          "output": "def sortColors(nums: List[int]) -> None:\n    red, white, blue = 0, 0, len(nums) - 1\n    while white <= blue:\n        if nums[white] == 0:\n            nums[red], nums[white] = nums[white], nums[red]\n            red += 1\n            white += 1\n        elif nums[white] == 1:\n            white += 1\n        else:\n            nums[white], nums[blue] = nums[blue], nums[white]\n            blue -= 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t` of lengths `m` and `n` respectively, return _the **minimum window**_ **_substring_** _of_ `s` _such that every character in_ `t` _(**including duplicates**) is included in the window_. If there is no such substring, return _the empty string_ `\" \"`.\n\nThe testcases will be generated such that the answer is **unique**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ADOBECODEBANC \", t =  \"ABC \"\n**Output:**  \"BANC \"\n**Explanation:** The minimum window substring  \"BANC \" includes 'A', 'B', and 'C' from string t.\n\n**Example 2:**\n\n**Input:** s =  \"a \", t =  \"a \"\n**Output:**  \"a \"\n**Explanation:** The entire string s is the minimum window.\n\n**Example 3:**\n\n**Input:** s =  \"a \", t =  \"aa \"\n**Output:**  \" \"\n**Explanation:** Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n\n**Constraints:**\n\n*   `m == s.length`\n*   `n == t.length`\n*   `1 <= m, n <= 105`\n*   `s` and `t` consist of uppercase and lowercase English letters.\n\n**Follow up:** Could you find an algorithm that runs in `O(m + n)` time?Use two pointers to create a window of letters in S, which would have all the characters from T. Since you have to find the minimum window in S which has all the characters from T, you need to expand and contract the window using the two pointers and keep checking the window for all the characters. This approach is also called Sliding Window Approach.\r\n\r\n\n\r\nL ------------------------ R , Suppose this is the window that contains all characters of T \r\n                          \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 L----------------- R , this is the contracted window. We found a smaller window that still contains all the characters in T\r\n\r\nWhen the window is no longer valid, start expanding again using the right pointer.",
          "output": "from collections import Counter\n\ndef min_window(s, t):\n    need = Counter(t)\n    window = {}\n    \n    left = 0\n    right = 0\n    valid = 0\n    start = 0\n    length = float('inf')\n\n    while right < len(s):\n        c = s[right]\n        right += 1\n        if c in need:\n            window[c] = window.get(c, 0) + 1\n            if window[c] <= need[c]:\n                valid += 1\n\n        while valid == len(t):\n            if right - left < length:\n                start = left\n                length = right - left\n\n            d = s[left]\n            left += 1\n            if d in need:\n                if window[d] <= need[d]:\n                    valid -= 1\n                window[d] -= 1\n\n    return \"\" if length == float('inf') else s[start : start + length]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `n` and `k`, return _all possible combinations of_ `k` _numbers chosen from the range_ `[1, n]`.\n\nYou may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, k = 2\n**Output:** \\[\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[2,3\\],\\[2,4\\],\\[3,4\\]\\]\n**Explanation:** There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., \\[1,2\\] and \\[2,1\\] are considered to be the same combination.\n\n**Example 2:**\n\n**Input:** n = 1, k = 1\n**Output:** \\[\\[1\\]\\]\n**Explanation:** There is 1 choose 1 = 1 total combination.\n\n**Constraints:**\n\n*   `1 <= n <= 20`\n*   `1 <= k <= n`",
          "output": "from typing import List\n\ndef combine(n: int, k: int) -> List[List[int]]:\n    def backtrack(start, current_combination):\n        if len(current_combination) == k:\n            result.append(current_combination[:])\n\n        for i in range(start, n + 1):\n            current_combination.append(i)\n            backtrack(i + 1, current_combination)\n            current_combination.pop()\n\n    result = []\n    backtrack(1, [])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of **unique** elements, return _all possible_ _subsets_ _(the power set)_.\n\nThe solution set **must not** contain duplicate subsets. Return the solution in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** \\[\\[\\],\\[1\\],\\[2\\],\\[1,2\\],\\[3\\],\\[1,3\\],\\[2,3\\],\\[1,2,3\\]\\]\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** \\[\\[\\],\\[0\\]\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 10`\n*   `-10 <= nums[i] <= 10`\n*   All the numbers of `nums` are **unique**.",
          "output": "def subsets(nums):\n    n = len(nums)\n    num_subsets = 1 << n\n    result = []\n\n    for i in range(num_subsets):\n        subset = []\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(nums[j])\n        result.append(subset)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \"A \", \"B \", \"C \", \"E \"\\],\\[ \"S \", \"F \", \"C \", \"S \"\\],\\[ \"A \", \"D \", \"E \", \"E \"\\]\\], word =  \"ABCCED \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \"A \", \"B \", \"C \", \"E \"\\],\\[ \"S \", \"F \", \"C \", \"S \"\\],\\[ \"A \", \"D \", \"E \", \"E \"\\]\\], word =  \"SEE \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** board = \\[\\[ \"A \", \"B \", \"C \", \"E \"\\],\\[ \"S \", \"F \", \"C \", \"S \"\\],\\[ \"A \", \"D \", \"E \", \"E \"\\]\\], word =  \"ABCB \"\n**Output:** false\n\n**Constraints:**\n\n*   `m == board.length`\n*   `n = board[i].length`\n*   `1 <= m, n <= 6`\n*   `1 <= word.length <= 15`\n*   `board` and `word` consists of only lowercase and uppercase English letters.\n\n**Follow up:** Could you use search pruning to make your solution faster with a larger `board`?",
          "output": "def exist(board, word):\n    m, n = len(board), len(board[0])\n\n    def dfs(i, j, k):\n        if not 0 <= i < m or not 0 <= j < n or board[i][j] != word[k]:\n            return False\n        if k == len(word) - 1:\n            return True\n\n        tmp, board[i][j] = board[i][j], '/'\n        res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n        board[i][j] = tmp\n        return res\n\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` sorted in **non-decreasing order**, remove some duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**.\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums` should hold the final result. It does not matter what you leave beyond the first `k` elements.\n\nReturn `k` _after placing the final result in the first_ `k` _slots of_ `nums`.\n\nDo **not** allocate extra space for another array. You must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n\n**Custom Judge:**\n\nThe judge will test your solution with the following code:\n\nint\\[\\] nums = \\[...\\]; // Input array\nint\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums\\[i\\] == expectedNums\\[i\\];\n}\n\nIf all assertions pass, then your solution will be **accepted**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1,2,2,3\\]\n**Output:** 5, nums = \\[1,1,2,2,3,\\_\\]\n**Explanation:** Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,1,1,1,1,2,3,3\\]\n**Output:** 7, nums = \\[0,0,1,1,2,3,3,\\_,\\_\\]\n**Explanation:** Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-104 <= nums[i] <= 104`\n*   `nums` is sorted in **non-decreasing** order.",
          "output": "def remove_duplicates(nums):\n    i = 0\n    for num in nums:\n        if i < 2 or num > nums[i - 2]:\n            nums[i] = num\n            i += 1\n    return i\n"
     },
     {
          "instruction": "Write python code for this problem: There is an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values).\n\nBefore being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.\n\nGiven the array `nums` **after** the rotation and an integer `target`, return `true` _if_ `target` _is in_ `nums`_, or_ `false` _if it is not in_ `nums`_._\n\nYou must decrease the overall operation steps as much as possible.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,5,6,0,0,1,2\\], target = 0\n**Output:** true\n\n**Example 2:**\n\n**Input:** nums = \\[2,5,6,0,0,1,2\\], target = 3\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `-104 <= nums[i] <= 104`\n*   `nums` is guaranteed to be rotated at some pivot.\n*   `-104 <= target <= 104`\n\n**Follow up:** This problem is similar to Search in Rotated Sorted Array, but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?",
          "output": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return True\n\n        if nums[mid] == nums[left]:\n            left += 1\n        elif nums[mid] > nums[left]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a sorted linked list, _delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list_. Return _the linked list **sorted** as well_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,3,4,4,5\\]\n**Output:** \\[1,2,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[1,1,1,2,3\\]\n**Output:** \\[2,3\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 300]`.\n*   `-100 <= Node.val <= 100`\n*   The list is guaranteed to be **sorted** in ascending order.",
          "output": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef deleteDuplicates(head):\n    dummy = ListNode(0)\n    dummy.next = head\n    prev, curr = dummy, head\n    while curr:\n        while curr.next and curr.val == curr.next.val:\n            curr = curr.next\n        if prev.next == curr:\n            prev = prev.next\n        else:\n            prev.next = curr.next\n        curr = curr.next\n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a sorted linked list, _delete all duplicates such that each element appears only once_. Return _the linked list **sorted** as well_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,1,2\\]\n**Output:** \\[1,2\\]\n\n**Example 2:**\n\n**Input:** head = \\[1,1,2,3,3\\]\n**Output:** \\[1,2,3\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 300]`.\n*   `-100 <= Node.val <= 100`\n*   The list is guaranteed to be **sorted** in ascending order.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef delete_duplicates(head):\n    current = head\n    while current and current.next:\n        if current.next.val == current.val:\n            current.next = current.next.next\n        else:\n            current = current.next\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return _the area of the largest rectangle in the histogram_.\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[2,1,5,6,2,3\\]\n**Output:** 10\n**Explanation:** The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n\n**Example 2:**\n\n**Input:** heights = \\[2,4\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= heights.length <= 105`\n*   `0 <= heights[i] <= 104`",
          "output": "def largestRectangleArea(heights):\n    stack = []\n    max_area = 0\n    for i, h in enumerate(heights + [0]):\n        while stack and heights[stack[-1]] > h:\n            height = heights[stack.pop()]\n            width = i if not stack else i - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        stack.append(i)\n    return max_area\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return _its area_.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[ \"1 \", \"0 \", \"1 \", \"0 \", \"0 \"\\],\\[ \"1 \", \"0 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"1 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"0 \", \"0 \", \"1 \", \"0 \"\\]\\]\n**Output:** 6\n**Explanation:** The maximal rectangle is shown in the above picture.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[ \"0 \"\\]\\]\n**Output:** 0\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[ \"1 \"\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `rows == matrix.length`\n*   `cols == matrix[i].length`\n*   `1 <= row, cols <= 200`\n*   `matrix[i][j]` is `'0'` or `'1'`.",
          "output": "def maximalRectangle(matrix):\n    if not matrix:\n        return 0\n\n    m = len(matrix)\n    n = len(matrix[0])\n    height = [0] * (n + 1)\n    max_area = 0\n\n    for i in range(m):\n        s = []\n        for j in range(n + 1):\n            if j < n:\n                height[j] = height[j] + 1 if matrix[i][j] == '1' else 0\n            while s and height[j] < height[s[-1]]:\n                h = height[s.pop()]\n                w = j if not s else j - s[-1] - 1\n                max_area = max(max_area, h * w)\n            s.append(j)\n\n    return max_area\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`.\n\nYou should **preserve** the original relative order of the nodes in each of the two partitions.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,4,3,2,5,2\\], x = 3\n**Output:** \\[1,2,2,4,3,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[2,1\\], x = 2\n**Output:** \\[1,2\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 200]`.\n*   `-100 <= Node.val <= 100`\n*   `-200 <= x <= 200`",
          "output": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef partition(head, x):\n    less_head = ListNode(0)\n    more_head = ListNode(0)\n    less_ptr, more_ptr = less_head, more_head\n    \n    while head:\n        if head.val < x:\n            less_ptr.next = head\n            less_ptr = head\n        else:\n            more_ptr.next = head\n            more_ptr = head\n        head = head.next\n    \n    less_ptr.next = more_head.next\n    more_ptr.next = None\n    \n    return less_head.next\n"
     },
     {
          "instruction": "Write python code for this problem: We can scramble a string s to get a string t using the following algorithm:\n\n1.  If the length of the string is 1, stop.\n2.  If the length of the string is > 1, do the following:\n    *   Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.\n    *   **Randomly** decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.\n    *   Apply step 1 recursively on each of the two substrings `x` and `y`.\n\nGiven two strings `s1` and `s2` of **the same length**, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"great \", s2 =  \"rgeat \"\n**Output:** true\n**Explanation:** One possible scenario applied on s1 is:\n \"great \" -->  \"gr/eat \" // divide at random index.\n \"gr/eat \" -->  \"gr/eat \" // random decision is not to swap the two substrings and keep them in order.\n \"gr/eat \" -->  \"g/r / e/at \" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n \"g/r / e/at \" -->  \"r/g / e/at \" // random decision was to swap the first substring and to keep the second substring in the same order.\n \"r/g / e/at \" -->  \"r/g / e/ a/t \" // again apply the algorithm recursively, divide  \"at \" to  \"a/t \".\n \"r/g / e/ a/t \" -->  \"r/g / e/ a/t \" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is  \"rgeat \" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n\n**Example 2:**\n\n**Input:** s1 =  \"abcde \", s2 =  \"caebd \"\n**Output:** false\n\n**Example 3:**\n\n**Input:** s1 =  \"a \", s2 =  \"a \"\n**Output:** true\n\n**Constraints:**\n\n*   `s1.length == s2.length`\n*   `1 <= s1.length <= 30`\n*   `s1` and `s2` consist of lowercase English letters.",
          "output": "def isScramble(s1: str, s2: str) -> bool:\n    if s1 == s2:\n        return True\n    if len(s1) != len(s2) or sorted(s1) != sorted(s2):\n        return False\n\n    for i in range(1, len(s1)):\n        if (isScramble(s1[:i], s2[:i]) and isScramble(s1[i:], s2[i:])) or \\\n           (isScramble(s1[:i], s2[-i:]) and isScramble(s1[i:], s2[:-i])):\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.\n\n**Merge** `nums1` and `nums2` into a single array sorted in **non-decreasing order**.\n\nThe final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2,3,0,0,0\\], m = 3, nums2 = \\[2,5,6\\], n = 3\n**Output:** \\[1,2,2,3,5,6\\]\n**Explanation:** The arrays we are merging are \\[1,2,3\\] and \\[2,5,6\\].\nThe result of the merge is \\[1,2,2,3,5,6\\] with the underlined elements coming from nums1.\n\n**Example 2:**\n\n**Input:** nums1 = \\[1\\], m = 1, nums2 = \\[\\], n = 0\n**Output:** \\[1\\]\n**Explanation:** The arrays we are merging are \\[1\\] and \\[\\].\nThe result of the merge is \\[1\\].\n\n**Example 3:**\n\n**Input:** nums1 = \\[0\\], m = 0, nums2 = \\[1\\], n = 1\n**Output:** \\[1\\]\n**Explanation:** The arrays we are merging are \\[\\] and \\[1\\].\nThe result of the merge is \\[1\\].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n\n**Constraints:**\n\n*   `nums1.length == m + n`\n*   `nums2.length == n`\n*   `0 <= m, n <= 200`\n*   `1 <= m + n <= 200`\n*   `-109 <= nums1[i], nums2[j] <= 109`\n\n**Follow up:** Can you come up with an algorithm that runs in `O(m + n)` time?You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution? If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution.",
          "output": "def merge(nums1, m, nums2, n):\n    i, j, k = m - 1, n - 1, m + n - 1\n    while i >= 0 and j >= 0:\n        if nums1[i] > nums2[j]:\n            nums1[k] = nums1[i]\n            i -= 1\n        else:\n            nums1[k] = nums2[j]\n            j -= 1\n        k -= 1\n    while j >= 0:\n        nums1[k] = nums2[j]\n        k -= 1\n        j -= 1\n"
     },
     {
          "instruction": "Write python code for this problem: An **n-bit gray code sequence** is a sequence of `2n` integers where:\n\n*   Every integer is in the **inclusive** range `[0, 2n - 1]`,\n*   The first integer is `0`,\n*   An integer appears **no more than once** in the sequence,\n*   The binary representation of every pair of **adjacent** integers differs by **exactly one bit**, and\n*   The binary representation of the **first** and **last** integers differs by **exactly one bit**.\n\nGiven an integer `n`, return _any valid **n-bit gray code sequence**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** \\[0,1,3,2\\]\n**Explanation:**\nThe binary representation of \\[0,1,3,2\\] is \\[00,01,11,10\\].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n\\[0,2,3,1\\] is also a valid gray code sequence, whose binary representation is \\[00,10,11,01\\].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** \\[0,1\\]\n\n**Constraints:**\n\n*   `1 <= n <= 16`",
          "output": "def grayCode(n):\n    result = []\n    for i in range(1 << n):\n        result.append(i ^ (i >> 1))\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` that may contain duplicates, return _all possible_ _subsets_ _(the power set)_.\n\nThe solution set **must not** contain duplicate subsets. Return the solution in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,2\\]\n**Output:** \\[\\[\\],\\[1\\],\\[1,2\\],\\[1,2,2\\],\\[2\\],\\[2,2\\]\\]\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** \\[\\[\\],\\[0\\]\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 10`\n*   `-10 <= nums[i] <= 10`",
          "output": "from itertools import combinations\n\ndef subsetsWithDup(nums):\n    result = set()\n    nums.sort()\n    for i in range(len(nums) + 1):\n        for combo in combinations(nums, i):\n            result.add(combo)\n    return list(result)\n"
     },
     {
          "instruction": "Write python code for this problem: A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n'A' ->  \"1 \"\n'B' ->  \"2 \"\n...\n'Z' ->  \"26 \"\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into:\n\n*   `\"AAJF \"` with the grouping `(1 1 10 6)`\n*   `\"KJF \"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`.\n\nGiven a string `s` containing only digits, return _the **number** of ways to **decode** it_.\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"12 \"\n**Output:** 2\n**Explanation:**  \"12 \" could be decoded as  \"AB \" (1 2) or  \"L \" (12).\n\n**Example 2:**\n\n**Input:** s =  \"226 \"\n**Output:** 3\n**Explanation:**  \"226 \" could be decoded as  \"BZ \" (2 26),  \"VF \" (22 6), or  \"BBF \" (2 2 6).\n\n**Example 3:**\n\n**Input:** s =  \"06 \"\n**Output:** 0\n**Explanation:**  \"06 \" cannot be mapped to  \"F \" because of the leading zero ( \"6 \" is different from  \"06 \").\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` contains only digits and may contain leading zero(s).",
          "output": "def numDecodings(s: str) -> int:\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1 if s[0] != '0' else 0\n\n    for i in range(2, n + 1):\n        one_digit = int(s[i - 1:i])\n        two_digits = int(s[i - 2:i])\n\n        if one_digit >= 1:\n            dp[i] += dp[i - 1]\n        if two_digits >= 10 and two_digits <= 26:\n            dp[i] += dp[i - 2]\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return _the reversed list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\], left = 2, right = 4\n**Output:** \\[1,4,3,2,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[5\\], left = 1, right = 1\n**Output:** \\[5\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is `n`.\n*   `1 <= n <= 500`\n*   `-500 <= Node.val <= 500`\n*   `1 <= left <= right <= n`\n\n**Follow up:** Could you do it in one pass?",
          "output": "def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n    if not head or left == right:\n        return head\n    dummy = ListNode(0)\n    dummy.next = head\n    pre = dummy\n    for _ in range(left - 1):\n        pre = pre.next\n    cur = pre.next\n    for _ in range(left, right):\n        t = cur.next\n        cur.next = t.next\n        t.next = pre.next\n        pre.next = t\n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: A **valid IP address** consists of exactly four integers separated by single dots. Each integer is between `0` and `255` (**inclusive**) and cannot have leading zeros.\n\n*   For example, `\"0.1.2.201 \"` and `\"192.168.1.1 \"` are **valid** IP addresses, but `\"0.011.255.245 \"`, `\"192.168.1.312 \"` and `\"192.168@1.1 \"` are **invalid** IP addresses.\n\nGiven a string `s` containing only digits, return _all possible valid IP addresses that can be formed by inserting dots into_ `s`. You are **not** allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in **any** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"25525511135 \"\n**Output:** \\[ \"255.255.11.135 \", \"255.255.111.35 \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"0000 \"\n**Output:** \\[ \"0.0.0.0 \"\\]\n\n**Example 3:**\n\n**Input:** s =  \"101023 \"\n**Output:** \\[ \"1.0.10.23 \", \"1.0.102.3 \", \"10.1.0.23 \", \"10.10.2.3 \", \"101.0.2.3 \"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 20`\n*   `s` consists of digits only.",
          "output": "def restore_ip_addresses(s):\n    def dfs(s, start, ip, result, part):\n        if part == 4 and start == len(s):\n            result.append(ip[:-1])\n            return\n        if part == 4 or start >= len(s):\n            return\n\n        num = 0\n        for i in range(start, len(s)):\n            num = num * 10 + int(s[i])\n            if num > 255:\n                break\n            dfs(s, i + 1, ip + s[i] + \".\", result, part + 1)\n            if num == 0:\n                break\n\n    result = []\n    dfs(s, 0, \"\", result, 0)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the inorder traversal of its nodes' values_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,3\\]\n**Output:** \\[1,3,2\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorderTraversalHelper(root, result):\n    if not root:\n        return\n    inorderTraversalHelper(root.left, result)\n    result.append(root.val)\n    inorderTraversalHelper(root.right, result)\n\ndef inorderTraversal(root):\n    result = []\n    inorderTraversalHelper(root, result)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _all the structurally unique **BST'**s (binary search trees), which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`. Return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** \\[\\[1,null,2,null,3\\],\\[1,null,3,2\\],\\[2,1,3\\],\\[3,1,null,null,2\\],\\[3,2,null,1\\]\\]\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** \\[\\[1\\]\\]\n\n**Constraints:**\n\n*   `1 <= n <= 8`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef generate_trees(start, end):\n    trees = []\n    if start > end:\n        trees.append(None)\n        return trees\n\n    for i in range(start, end + 1):\n        left_subtrees = generate_trees(start, i - 1)\n        right_subtrees = generate_trees(i + 1, end)\n\n        for left in left_subtrees:\n            for right in right_subtrees:\n                new_node = TreeNode(i)\n                new_node.left = left\n                new_node.right = right\n                trees.append(new_node)\n\n    return trees\n\ndef generate_trees(n):\n    if n == 0:\n        return []\n    return generate_trees(1, n)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the number of structurally unique **BST'**s (binary search trees) which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 5\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 19`",
          "output": "def numTrees(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`.\n\nAn **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that:\n\n*   `s = s1 + s2 + ... + sn`\n*   `t = t1 + t2 + ... + tm`\n*   `|n - m| <= 1`\n*   The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\n**Note:** `a + b` is the concatenation of strings `a` and `b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"aabcc \", s2 =  \"dbbca \", s3 =  \"aadbbcbcac \"\n**Output:** true\n**Explanation:** One way to obtain s3 is:\nSplit s1 into s1 =  \"aa \" +  \"bc \" +  \"c \", and s2 into s2 =  \"dbbc \" +  \"a \".\nInterleaving the two splits, we get  \"aa \" +  \"dbbc \" +  \"bc \" +  \"a \" +  \"c \" =  \"aadbbcbcac \".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n\n**Example 2:**\n\n**Input:** s1 =  \"aabcc \", s2 =  \"dbbca \", s3 =  \"aadbbbaccc \"\n**Output:** false\n**Explanation:** Notice how it is impossible to interleave s2 with any other string to obtain s3.\n\n**Example 3:**\n\n**Input:** s1 =  \" \", s2 =  \" \", s3 =  \" \"\n**Output:** true\n\n**Constraints:**\n\n*   `0 <= s1.length, s2.length <= 100`\n*   `0 <= s3.length <= 200`\n*   `s1`, `s2`, and `s3` consist of lowercase English letters.\n\n**Follow up:** Could you solve it using only `O(s2.length)` additional memory space?",
          "output": "def isInterleave(s1, s2, s3):\n    m, n = len(s1), len(s2)\n    if m + n != len(s3):\n        return False\n\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or \\\n                       (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n\n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, _determine if it is a valid binary search tree (BST)_.\n\nA **valid BST** is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[5,1,4,null,null,3,6\\]\n**Output:** false\n**Explanation:** The root node's value is 5 but its right child's value is 4.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-231 <= Node.val <= 231 - 1`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef isValidBSTHelper(node, min_val, max_val):\n    if node is None:\n        return True\n    if not min_val < node.val < max_val:\n        return False\n    return (isValidBSTHelper(node.left, min_val, node.val) and\n            isValidBSTHelper(node.right, node.val, max_val))\n\ndef isValidBST(root):\n    return isValidBSTHelper(root, float('-inf'), float('inf'))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. _Recover the tree without changing its structure_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,3,null,null,2\\]\n**Output:** \\[3,1,null,null,2\\]\n**Explanation:** 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n\n**Example 2:**\n\n**Input:** root = \\[3,1,4,null,null,2\\]\n**Output:** \\[2,1,4,null,null,3\\]\n**Explanation:** 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 1000]`.\n*   `-231 <= Node.val <= 231 - 1`\n\n**Follow up:** A solution using `O(n)` space is pretty straight-forward. Could you devise a constant `O(1)` space solution?",
          "output": "def inorder(node, nodes):\n    if not node: return\n    inorder(node.left, nodes)\n    if nodes[1] and nodes[1].val > node.val:\n        if not nodes[0]: nodes[0] = nodes[1]\n        nodes[2] = node\n    nodes[1] = node\n    inorder(node.right, nodes)\n\ndef recoverTree(root):\n    nodes = [None, None, None]\n    inorder(root, nodes)\n    nodes[0].val, nodes[2].val = nodes[2].val, nodes[0].val\n"
     },
     {
          "instruction": "Write python code for this problem: Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n",
          "input": "**Example 1:**\n\n**Input:** p = \\[1,2,3\\], q = \\[1,2,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** p = \\[1,2\\], q = \\[1,null,2\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** p = \\[1,2,1\\], q = \\[1,1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in both trees is in the range `[0, 100]`.\n*   `-104 <= Node.val <= 104`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_same_tree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val != q.val:\n        return False\n    return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, _check whether it is a mirror of itself_ (i.e., symmetric around its center).\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,2,3,4,4,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[1,2,2,null,3,null,3\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Could you solve it both recursively and iteratively?",
          "output": "def isSymmetric(root):\n    return checkSymmetry(root, root)\n\ndef checkSymmetry(node1, node2):\n    if not node1 and not node2:\n        return True\n    if not node1 or not node2:\n        return False\n    return (node1.val == node2.val) and checkSymmetry(node1.right, node2.left) and checkSymmetry(node1.left, node2.right)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the level order traversal of its nodes' values_. (i.e., from left to right, level by level).\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** \\[\\[3\\],\\[9,20\\],\\[15,7\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[\\[1\\]\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 2000]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = [root]\n\n    while queue:\n        level = []\n        for i in range(len(queue)):\n            node = queue.pop(0)\n\n            if node.left:\n                queue.append(node.left)\n\n            if node.right:\n                queue.append(node.right)\n\n            level.append(node.val)\n\n        result.append(level)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the zigzag level order traversal of its nodes' values_. (i.e., from left to right, then right to left for the next level and alternate between).\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** \\[\\[3\\],\\[20,9\\],\\[15,7\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[\\[1\\]\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 2000]`.\n*   `-100 <= Node.val <= 100`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef zigzagLevelOrder(root):\n    if not root:\n        return []\n\n    result = []\n    queue = [root]\n    zigzag = False\n\n    while queue:\n        level = []\n        for i in range(len(queue)):\n            node = queue.pop(0)\n\n            if zigzag:\n                level.insert(0, node.val)\n            else:\n                level.append(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(level)\n        zigzag = not zigzag\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _its maximum depth_.\n\nA binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2\\]\n**Output:** 2\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-100 <= Node.val <= 100`",
          "output": "def maxDepth(root):\n    if root is None:\n        return 0\n    return 1 + max(maxDepth(root.left), maxDepth(root.right))\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return _the binary tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** preorder = \\[3,9,20,15,7\\], inorder = \\[9,3,15,20,7\\]\n**Output:** \\[3,9,20,null,null,15,7\\]\n\n**Example 2:**\n\n**Input:** preorder = \\[-1\\], inorder = \\[-1\\]\n**Output:** \\[-1\\]\n\n**Constraints:**\n\n*   `1 <= preorder.length <= 3000`\n*   `inorder.length == preorder.length`\n*   `-3000 <= preorder[i], inorder[i] <= 3000`\n*   `preorder` and `inorder` consist of **unique** values.\n*   Each value of `inorder` also appears in `preorder`.\n*   `preorder` is **guaranteed** to be the preorder traversal of the tree.\n*   `inorder` is **guaranteed** to be the inorder traversal of the tree.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(preorder, inorder):\n    def construct_tree(in_left, in_right):\n        nonlocal pre_idx\n        if in_left > in_right:\n            return None\n\n        root_val = preorder[pre_idx]\n        root = TreeNode(root_val)\n        idx = in_map[root_val]\n\n        pre_idx += 1\n        root.left = construct_tree(in_left, idx - 1)\n        root.right = construct_tree(idx + 1, in_right)\n\n        return root\n\n    in_map = {val: idx for idx, val in enumerate(inorder)}\n    pre_idx = 0\n    return construct_tree(0, len(inorder) - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return _the binary tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** inorder = \\[9,3,15,20,7\\], postorder = \\[9,15,7,20,3\\]\n**Output:** \\[3,9,20,null,null,15,7\\]\n\n**Example 2:**\n\n**Input:** inorder = \\[-1\\], postorder = \\[-1\\]\n**Output:** \\[-1\\]\n\n**Constraints:**\n\n*   `1 <= inorder.length <= 3000`\n*   `postorder.length == inorder.length`\n*   `-3000 <= inorder[i], postorder[i] <= 3000`\n*   `inorder` and `postorder` consist of **unique** values.\n*   Each value of `postorder` also appears in `inorder`.\n*   `inorder` is **guaranteed** to be the inorder traversal of the tree.\n*   `postorder` is **guaranteed** to be the postorder traversal of the tree.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        def _build(in_left, in_right, post_root):\n            if in_left > in_right:\n                return None\n            \n            root = TreeNode(postorder[post_root])\n\n            inorder_root_index = index_map[root.val]\n            left_tree_size = inorder_root_index - in_left\n\n            root.left = _build(in_left, inorder_root_index - 1, post_root - 1 - in_right + inorder_root_index)\n            root.right = _build(inorder_root_index + 1, in_right, post_root - 1)\n\n            return root\n\n        index_map = {val: i for i, val in enumerate(inorder)}\n        return _build(0, len(inorder) - 1, len(postorder) - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the bottom-up level order traversal of its nodes' values_. (i.e., from left to right, level by level from leaf to root).\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** \\[\\[15,7\\],\\[9,20\\],\\[3\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[\\[1\\]\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 2000]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef levelOrderBottom(root):\n    result = []\n    if not root:\n        return result\n\n    queue = deque([root])\n\n    while queue:\n        level = []\n        size = len(queue)\n\n        for i in range(size):\n            current = queue.popleft()\n            level.append(current.val)\n\n            if current.left:\n                queue.append(current.left)\n            if current.right:\n                queue.append(current.right)\n\n        result.insert(0, level)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` where the elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-10,-3,0,5,9\\]\n**Output:** \\[0,-3,9,-10,null,5\\]\n**Explanation:** \\[0,-10,5,null,-3,null,9\\] is also accepted:\n \n\n**Example 2:**\n\n**Input:** nums = \\[1,3\\]\n**Output:** \\[3,1\\]\n**Explanation:** \\[1,null,3\\] and \\[3,1\\] are both height-balanced BSTs.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `nums` is sorted in a **strictly increasing** order.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sorted_array_to_bst(nums):\n    def helper(start, end):\n        if start > end:\n            return None\n\n        mid = start + (end - start) // 2\n        node = TreeNode(nums[mid])\n        node.left = helper(start, mid - 1)\n        node.right = helper(mid + 1, end)\n\n        return node\n\n    return helper(0, len(nums) - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list where elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[-10,-3,0,5,9\\]\n**Output:** \\[0,-3,9,-10,null,5\\]\n**Explanation:** One possible answer is \\[0,-3,9,-10,null,5\\], which represents the shown height balanced BST.\n\n**Example 2:**\n\n**Input:** head = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in `head` is in the range `[0, 2 * 104]`.\n*   `-105 <= Node.val <= 105`",
          "output": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef sortedListToBST(head):\n    if not head:\n        return None\n    if not head.next:\n        return TreeNode(head.val)\n    slow = head\n    fast = head\n    prev = None\n\n    while fast and fast.next:\n        prev = slow\n        slow = slow.next\n        fast = fast.next.next\n\n    prev.next = None\n\n    root = TreeNode(slow.val)\n    root.left = sortedListToBST(head)\n    root.right = sortedListToBST(slow.next)\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree, determine if it is **height-balanced**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[1,2,2,3,3,null,null,4,4\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** true\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 5000]`.\n*   `-104 <= Node.val <= 104`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef getHeight(node):\n    if not node:\n        return 0\n    left_height = getHeight(node.left)\n    right_height = getHeight(node.right)\n    if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n        return -1\n    return 1 + max(left_height, right_height)\n\ndef isBalanced(root):\n    return getHeight(root) != -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n**Note:** A leaf is a node with no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** root = \\[2,null,3,null,4,null,5,null,6\\]\n**Output:** 5\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 105]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "def minDepth(root):\n    if not root:\n        return 0\n    left = minDepth(root.left)\n    right = minDepth(root.right)\n    return (left == 0 or right == 0) and left + right + 1 or min(left, right) + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`.\n\nA **leaf** is a node with no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,4,8,11,null,13,4,7,2,null,null,null,1\\], targetSum = 22\n**Output:** true\n**Explanation:** The root-to-leaf path with the target sum is shown.\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3\\], targetSum = 5\n**Output:** false\n**Explanation:** There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\n**Example 3:**\n\n**Input:** root = \\[\\], targetSum = 0\n**Output:** false\n**Explanation:** Since the tree is empty, there are no root-to-leaf paths.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 5000]`.\n*   `-1000 <= Node.val <= 1000`\n*   `-1000 <= targetSum <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef hasPathSum(root, targetSum):\n    if root is None:\n        return False\n    if root.left is None and root.right is None:\n        return targetSum - root.val == 0\n    return hasPathSum(root.left, targetSum - root.val) or hasPathSum(root.right, targetSum - root.val)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and an integer `targetSum`, return _all **root-to-leaf** paths where the sum of the node values in the path equals_ `targetSum`_. Each path should be returned as a list of the node **values**, not node references_.\n\nA **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,4,8,11,null,13,4,7,2,null,null,5,1\\], targetSum = 22\n**Output:** \\[\\[5,4,11,2\\],\\[5,8,4,5\\]\\]\n**Explanation:** There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3\\], targetSum = 5\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1,2\\], targetSum = 0\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 5000]`.\n*   `-1000 <= Node.val <= 1000`\n*   `-1000 <= targetSum <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef pathSum(root, targetSum):\n    def helper(root, targetSum, current, ans):\n        if not root:\n            return\n        current.append(root.val)\n        if not root.left and not root.right and targetSum == root.val:\n            ans.append(current[:])\n        helper(root.left, targetSum - root.val, current, ans)\n        helper(root.right, targetSum - root.val, current, ans)\n        current.pop()\n\n    ans = []\n    helper(root, targetSum, [], ans)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, flatten the tree into a \"linked list \":\n\n*   The \"linked list \" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.\n*   The \"linked list \" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,5,3,4,null,6\\]\n**Output:** \\[1,null,2,null,3,null,4,null,5,null,6\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 2000]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Can you flatten the tree in-place (with `O(1)` extra space)?If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.",
          "output": "def flatten(root):\n    if not root:\n        return\n    flatten(root.left)\n    flatten(root.right)\n    if root.left:\n        temp = root.right\n        root.right = root.left\n        root.left = None\n        while root.right:\n            root = root.right\n        root.right = temp\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, return _the number of distinct_ **_subsequences_** _of_ `s` _which equals_ `t`.\n\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"rabbbit \", t =  \"rabbit \"\n**Output:** 3\n**Explanation:**\nAs shown below, there are 3 ways you can generate  \"rabbit \" from s.\n`**rabb**b**it**`\n`**ra**b**bbit**`\n`**rab**b**bit**`\n\n**Example 2:**\n\n**Input:** s =  \"babgbag \", t =  \"bag \"\n**Output:** 5\n**Explanation:**\nAs shown below, there are 5 ways you can generate  \"bag \" from s.\n`**ba**b**g**bag`\n`**ba**bgba**g**`\n`**b**abgb**ag**`\n`ba**b**gb**ag**`\n`babg**bag**`\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 1000`\n*   `s` and `t` consist of English letters.",
          "output": "def numDistinct(s: str, t: str) -> int:\n    m, n = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        dp[i][0] = 1\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\nstruct Node {\n  int val;\n  Node \\*left;\n  Node \\*right;\n  Node \\*next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,6,7\\]\n**Output:** \\[1,#,2,3,#,4,5,6,7,#\\]\n**Explanation:** Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 212 - 1]`.\n*   `-1000 <= Node.val <= 1000`\n\n**Follow-up:**\n\n*   You may only use constant extra space.\n*   The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
          "output": "def connect(self, root: 'Node') -> 'Node':\n    if not root or not root.left:\n        return root\n    root.left.next = root.right\n    if root.next:\n        root.right.next = root.next.left\n    self.connect(root.left)\n    self.connect(root.right)\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree\n\nstruct Node {\n  int val;\n  Node \\*left;\n  Node \\*right;\n  Node \\*next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,null,7\\]\n**Output:** \\[1,#,2,3,#,4,5,7,#\\]\n**Explanation:** Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 6000]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow-up:**\n\n*   You may only use constant extra space.\n*   The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.",
          "output": "class Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\ndef connect(root: 'Node') -> 'Node':\n    if not root:\n        return None\n\n    q = [root]\n\n    while q:\n        level_size = len(q)\n        prev = None\n\n        for i in range(level_size):\n            current_node = q.pop(0)\n\n            if prev:\n                prev.next = current_node\n            prev = current_node\n\n            if current_node.left:\n                q.append(current_node.left)\n            if current_node.right:\n                q.append(current_node.right)\n\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `numRows`, return the first numRows of **Pascal's triangle**.\n\nIn **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:\n\n",
          "input": "**Example 1:**\n\n**Input:** numRows = 5\n**Output:** \\[\\[1\\],\\[1,1\\],\\[1,2,1\\],\\[1,3,3,1\\],\\[1,4,6,4,1\\]\\]\n\n**Example 2:**\n\n**Input:** numRows = 1\n**Output:** \\[\\[1\\]\\]\n\n**Constraints:**\n\n*   `1 <= numRows <= 30`",
          "output": "def generate(numRows):\n    pascalsTriangle = []\n    for i in range(numRows):\n        row = [1]\n        if i > 0:\n            for j in range(1, i):\n                row.append(pascalsTriangle[i-1][j-1] + pascalsTriangle[i-1][j])\n            row.append(1)\n        pascalsTriangle.append(row)\n    return pascalsTriangle\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `rowIndex`, return the `rowIndexth` (**0-indexed**) row of the **Pascal's triangle**.\n\nIn **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:\n\n",
          "input": "**Example 1:**\n\n**Input:** rowIndex = 3\n**Output:** \\[1,3,3,1\\]\n\n**Example 2:**\n\n**Input:** rowIndex = 0\n**Output:** \\[1\\]\n\n**Example 3:**\n\n**Input:** rowIndex = 1\n**Output:** \\[1,1\\]\n\n**Constraints:**\n\n*   `0 <= rowIndex <= 33`\n\n**Follow up:** Could you optimize your algorithm to use only `O(rowIndex)` extra space?",
          "output": "def get_row(rowIndex):\n    row = [1] * (rowIndex + 1)\n    for i in range(1, rowIndex + 1):\n        for j in range(i - 1, 0, -1):\n            row[j] += row[j - 1]\n    return row\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `triangle` array, return _the minimum path sum from top to bottom_.\n\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.\n\n",
          "input": "**Example 1:**\n\n**Input:** triangle = \\[\\[2\\],\\[3,4\\],\\[6,5,7\\],\\[4,1,8,3\\]\\]\n**Output:** 11\n**Explanation:** The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n\n**Example 2:**\n\n**Input:** triangle = \\[\\[-10\\]\\]\n**Output:** -10\n\n**Constraints:**\n\n*   `1 <= triangle.length <= 200`\n*   `triangle[0].length == 1`\n*   `triangle[i].length == triangle[i - 1].length + 1`\n*   `-104 <= triangle[i][j] <= 104`\n\n**Follow up:** Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?",
          "output": "def minimumTotal(triangle):\n    for row in range(len(triangle) - 2, -1, -1):\n        for col in range(len(triangle[row])):\n            triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n    return triangle[0][0]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\nReturn _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[7,1,5,3,6,4\\]\n**Output:** 5\n**Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n**Example 2:**\n\n**Input:** prices = \\[7,6,4,3,1\\]\n**Output:** 0\n**Explanation:** In this case, no transactions are done and the max profit = 0.\n\n**Constraints:**\n\n*   `1 <= prices.length <= 105`\n*   `0 <= prices[i] <= 104`",
          "output": "def maxProfit(prices):\n    minPrice = float('inf')\n    maxProfit = 0\n    for price in prices:\n        minPrice = min(minPrice, price)\n        maxProfit = max(maxProfit, price - minPrice)\n    return maxProfit\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold **at most one** share of the stock at any time. However, you can buy it then immediately sell it on the **same day**.\n\nFind and return _the **maximum** profit you can achieve_.\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[7,1,5,3,6,4\\]\n**Output:** 7\n**Explanation:** Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n\n**Example 2:**\n\n**Input:** prices = \\[1,2,3,4,5\\]\n**Output:** 4\n**Explanation:** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n\n**Example 3:**\n\n**Input:** prices = \\[7,6,4,3,1\\]\n**Output:** 0\n**Explanation:** There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n\n**Constraints:**\n\n*   `1 <= prices.length <= 3 * 104`\n*   `0 <= prices[i] <= 104`",
          "output": "def max_profit(prices):\n    max_profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i - 1]:\n            max_profit += prices[i] - prices[i - 1]\n    return max_profit\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete **at most two transactions**.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[3,3,5,0,0,3,1,4\\]\n**Output:** 6\n**Explanation:** Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n\n**Example 2:**\n\n**Input:** prices = \\[1,2,3,4,5\\]\n**Output:** 4\n**Explanation:** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\n**Example 3:**\n\n**Input:** prices = \\[7,6,4,3,1\\]\n**Output:** 0\n**Explanation:** In this case, no transaction is done, i.e. max profit = 0.\n\n**Constraints:**\n\n*   `1 <= prices.length <= 105`\n*   `0 <= prices[i] <= 105`",
          "output": "def maxProfit(prices):\n    buy1, buy2 = float(\"inf\"), float(\"inf\")\n    profit1, profit2 = 0, 0\n\n    for price in prices:\n        buy1 = min(buy1, price)\n        profit1 = max(profit1, price - buy1)\n        buy2 = min(buy2, price - profit1)\n        profit2 = max(profit2, price - buy2)\n\n    return profit2\n"
     },
     {
          "instruction": "Write python code for this problem: A **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root.\n\nThe **path sum** of a path is the sum of the node's values in the path.\n\nGiven the `root` of a binary tree, return _the maximum **path sum** of any **non-empty** path_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3\\]\n**Output:** 6\n**Explanation:** The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\n**Example 2:**\n\n**Input:** root = \\[-10,9,20,null,null,15,7\\]\n**Output:** 42\n**Explanation:** The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 3 * 104]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef maxPathSum(root: TreeNode) -> int:\n    def helper(root):\n        nonlocal maxSum\n        if not root:\n            return 0\n\n        left = max(0, helper(root.left))\n        right = max(0, helper(root.right))\n\n        maxSum = max(maxSum, left + right + root.val)\n\n        return max(left, right) + root.val\n\n    maxSum = float('-inf')\n    helper(root)\n    return maxSum\n"
     },
     {
          "instruction": "Write python code for this problem: A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string `s`, return `true` _if it is a **palindrome**, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"A man, a plan, a canal: Panama \"\n**Output:** true\n**Explanation:**  \"amanaplanacanalpanama \" is a palindrome.\n\n**Example 2:**\n\n**Input:** s =  \"race a car \"\n**Output:** false\n**Explanation:**  \"raceacar \" is not a palindrome.\n\n**Example 3:**\n\n**Input:** s =  \"  \"\n**Output:** true\n**Explanation:** s is an empty string  \" \" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2 * 105`\n*   `s` consists only of printable ASCII characters.",
          "output": "def isPalindrome(s: str) -> bool:\n    cleaned = \"\".join(c.lower() for c in s if c.isalnum())\n    left, right = 0, len(cleaned) - 1\n    while left < right:\n        if cleaned[left] != cleaned[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n*   Every adjacent pair of words differs by a single letter.\n*   Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n*   `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _all the **shortest transformation sequences** from_ `beginWord` _to_ `endWord`_, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words_ `[beginWord, s1, s2, ..., sk]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \", \"cog \"\\]\n**Output:** \\[\\[ \"hit \", \"hot \", \"dot \", \"dog \", \"cog \"\\],\\[ \"hit \", \"hot \", \"lot \", \"log \", \"cog \"\\]\\]\n**Explanation:** There are 2 shortest transformation sequences:\n \"hit \" ->  \"hot \" ->  \"dot \" ->  \"dog \" ->  \"cog \"\n \"hit \" ->  \"hot \" ->  \"lot \" ->  \"log \" ->  \"cog \"\n\n**Example 2:**\n\n**Input:** beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \"\\]\n**Output:** \\[\\]\n**Explanation:** The endWord  \"cog \" is not in wordList, therefore there is no valid transformation sequence.\n\n**Constraints:**\n\n*   `1 <= beginWord.length <= 5`\n*   `endWord.length == beginWord.length`\n*   `1 <= wordList.length <= 500`\n*   `wordList[i].length == beginWord.length`\n*   `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n*   `beginWord != endWord`\n*   All the words in `wordList` are **unique**.\n*   The **sum** of all shortest transformation sequences does not exceed `105`.",
          "output": "from collections import defaultdict, deque\n\ndef findLadders(beginWord, endWord, wordList):\n    wordList = set(wordList)\n    if endWord not in wordList:\n        return []\n\n    adjacent = defaultdict(list)\n    distance = defaultdict(int)\n    queue = deque([beginWord])\n    distance[beginWord] = 0\n    \n    def neighbors(word):\n        for i in range(len(word)):\n            for j in range(ord('a'), ord('z') + 1):\n                yield word[:i] + chr(j) + word[i + 1:]\n                \n    while queue:\n        current = queue.popleft()\n        if current == endWord:\n            break\n        for neighbor in neighbors(current):\n            if neighbor not in wordList:\n                continue\n            if neighbor not in distance:\n                distance[neighbor] = distance[current] + 1\n                queue.append(neighbor)\n            if distance[neighbor] == distance[current] + 1:\n                adjacent[current].append(neighbor)\n\n    result = []\n    path = [beginWord]\n\n    def backtrack(word):\n        if word == endWord:\n            result.append(path[:])\n        else:\n            for next_word in adjacent[word]:\n                path.append(next_word)\n                backtrack(next_word)\n                path.pop()\n                \n    backtrack(beginWord)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n*   Every adjacent pair of words differs by a single letter.\n*   Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n*   `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _the **number of words** in the **shortest transformation sequence** from_ `beginWord` _to_ `endWord`_, or_ `0` _if no such sequence exists._\n\n",
          "input": "**Example 1:**\n\n**Input:** beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \", \"cog \"\\]\n**Output:** 5\n**Explanation:** One shortest transformation sequence is  \"hit \" ->  \"hot \" ->  \"dot \" ->  \"dog \" -> cog \", which is 5 words long.\n\n**Example 2:**\n\n**Input:** beginWord =  \"hit \", endWord =  \"cog \", wordList = \\[ \"hot \", \"dot \", \"dog \", \"lot \", \"log \"\\]\n**Output:** 0\n**Explanation:** The endWord  \"cog \" is not in wordList, therefore there is no valid transformation sequence.\n\n**Constraints:**\n\n*   `1 <= beginWord.length <= 10`\n*   `endWord.length == beginWord.length`\n*   `1 <= wordList.length <= 5000`\n*   `wordList[i].length == beginWord.length`\n*   `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n*   `beginWord != endWord`\n*   All the words in `wordList` are **unique**.",
          "output": "from collections import deque\n\ndef ladderLength(beginWord, endWord, wordList):\n    word_set = set(wordList)\n    if endWord not in word_set:\n        return 0\n\n    q = deque([beginWord])\n    steps = 1\n\n    while q:\n        size = len(q)\n        current_level = set()\n        \n        for _ in range(size):\n            current_word = q.popleft()\n            if current_word == endWord:\n                return steps\n\n            word_chars = list(current_word)\n            for i in range(len(word_chars)):\n                original_char = word_chars[i]\n                for j in range(26):\n                    word_chars[i] = chr(ord('a') + j)\n                    new_word = ''.join(word_chars)\n                    if new_word in word_set:\n                        q.append(new_word)\n                        current_level.add(new_word)\n                        \n                word_chars[i] = original_char\n        \n        word_set -= current_level\n        steps += 1\n        \n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given an unsorted array of integers `nums`, return _the length of the longest consecutive elements sequence._\n\nYou must write an algorithm that runs in `O(n)` time.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[100,4,200,1,3,2\\]\n**Output:** 4\n**Explanation:** The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4.\n\n**Example 2:**\n\n**Input:** nums = \\[0,3,7,2,5,8,4,6,0,1\\]\n**Output:** 9\n\n**Constraints:**\n\n*   `0 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`",
          "output": "def longest_consecutive(nums):\n    elements = set(nums)\n    longest_seq = 0\n\n    for num in nums:\n        if num - 1 not in elements:\n            current_num = num\n            current_seq = 1\n            \n            while current_num + 1 in elements:\n                current_num += 1\n                current_seq += 1\n\n            longest_seq = max(longest_seq, current_seq)\n    \n    return longest_seq\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree containing digits from `0` to `9` only.\n\nEach root-to-leaf path in the tree represents a number.\n\n*   For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.\n\nReturn _the total sum of all root-to-leaf numbers_. Test cases are generated so that the answer will fit in a **32-bit** integer.\n\nA **leaf** node is a node with no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3\\]\n**Output:** 25\n**Explanation:**\nThe root-to-leaf path `1->2` represents the number `12`.\nThe root-to-leaf path `1->3` represents the number `13`.\nTherefore, sum = 12 + 13 = `25`.\n\n**Example 2:**\n\n**Input:** root = \\[4,9,0,5,1\\]\n**Output:** 1026\n**Explanation:**\nThe root-to-leaf path `4->9->5` represents the number 495.\nThe root-to-leaf path `4->9->1` represents the number 491.\nThe root-to-leaf path `4->0` represents the number 40.\nTherefore, sum = 495 + 491 + 40 = `1026`.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `0 <= Node.val <= 9`\n*   The depth of the tree will not exceed `10`.",
          "output": "def sumNumbers(root, cur=0):\n    if root is None: return 0\n    cur = cur * 10 + root.val\n    if root.left is None and root.right is None: return cur\n    return sumNumbers(root.left, cur) + sumNumbers(root.right, cur)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` matrix `board` containing `'X'` and `'O'`, _capture all regions that are 4-directionally surrounded by_ `'X'`.\n\nA region is **captured** by flipping all `'O'`s into `'X'`s in that surrounded region.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"X \"\\],\\[ \"X \", \"X \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"X \", \"X \"\\]\\]\n**Output:** \\[\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"O \", \"X \", \"X \"\\]\\]\n**Explanation:** Notice that an 'O' should not be flipped if:\n- It is on the border, or\n- It is adjacent to an 'O' that should not be flipped.\nThe bottom 'O' is on the border, so it is not flipped.\nThe other three 'O' form a surrounded region, so they are flipped.\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \"X \"\\]\\]\n**Output:** \\[\\[ \"X \"\\]\\]\n\n**Constraints:**\n\n*   `m == board.length`\n*   `n == board[i].length`\n*   `1 <= m, n <= 200`\n*   `board[i][j]` is `'X'` or `'O'`.",
          "output": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        if not board:\n            return\n        m, n = len(board), len(board[0])\n\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or board[x][y] != 'O':\n                return\n            board[x][y] = '#'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n\n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n        for i in range(n):\n            dfs(0, i)\n            dfs(m - 1, i)\n\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == '#':\n                    board[i][j] = 'O'\n                elif board[i][j] == 'O':\n                    board[i][j] = 'X'\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return _all possible palindrome partitioning of_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"aab\"\n**Output:** \\[\\[\"a\",\"a\",\"b\"\\],\\[\"aa\",\"b\"\\]\\]\n\n**Example 2:**\n\n**Input:** s = \"a\"\n**Output:** \\[\\[\"a\"\\]\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 16`\n*   `s` contains only lowercase English letters.",
          "output": "def isPalindrome(s, start, end):\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\ndef dfs(s, start, results, current):\n    if start == len(s):\n        results.append(current[:])\n        return\n    \n    for end in range(start, len(s)):\n        if isPalindrome(s, start, end):\n            current.append(s[start:end+1])\n            dfs(s, end + 1, results, current)\n            current.pop()\n\ndef partition(s):\n    results = []\n    dfs(s, 0, results, [])\n    return results\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, partition `s` such that every substring of the partition is a palindrome.\n\nReturn _the **minimum** cuts needed for a palindrome partitioning of_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aab \"\n**Output:** 1\n**Explanation:** The palindrome partitioning \\[ \"aa \", \"b \"\\] could be produced using 1 cut.\n\n**Example 2:**\n\n**Input:** s =  \"a \"\n**Output:** 0\n\n**Example 3:**\n\n**Input:** s =  \"ab \"\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= s.length <= 2000`\n*   `s` consists of lowercase English letters only.",
          "output": "def minCut(s):\n    n = len(s)\n    dp = [i - 1 for i in range(n + 1)]\n    is_palindrome = [[False] * n for _ in range(n)]\n    \n    for j in range(1, n):\n        for i in range(j, -1, -1):\n            if s[i] == s[j] and (j - i < 2 or is_palindrome[i + 1][j - 1]):\n                is_palindrome[i][j] = True\n                dp[j + 1] = min(dp[j + 1], dp[i] + 1)\n                \n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a reference of a node in a **[connected](https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph)** undirected graph.\n\nReturn a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the graph.\n\nEach node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors.\n\nclass Node {\n    public int val;\n    public List neighbors;\n}\n\n**Test case format:**\n\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with `val == 1`, the second node with `val == 2`, and so on. The graph is represented in the test case using an adjacency list.\n\n**An adjacency list** is a collection of unordered **lists** used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n\nThe given node will always be the first node with `val = 1`. You must return the **copy of the given node** as a reference to the cloned graph.\n\n",
          "input": "**Example 1:**\n\n**Input:** adjList = \\[\\[2,4\\],\\[1,3\\],\\[2,4\\],\\[1,3\\]\\]\n**Output:** \\[\\[2,4\\],\\[1,3\\],\\[2,4\\],\\[1,3\\]\\]\n**Explanation:** There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n\n**Example 2:**\n\n**Input:** adjList = \\[\\[\\]\\]\n**Output:** \\[\\[\\]\\]\n**Explanation:** Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n\n**Example 3:**\n\n**Input:** adjList = \\[\\]\n**Output:** \\[\\]\n**Explanation:** This an empty graph, it does not have any nodes.\n\n**Constraints:**\n\n*   The number of nodes in the graph is in the range `[0, 100]`.\n*   `1 <= Node.val <= 100`\n*   `Node.val` is unique for each node.\n*   There are no repeated edges and no self-loops in the graph.\n*   The Graph is connected and all nodes can be visited starting from the given node.",
          "output": "class Node:\n    def __init__(self, val=0, neighbors=None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\ndef cloneGraph(node, visited=None):\n    if node is None:\n        return None\n\n    if visited is None:\n        visited = {}\n\n    if node in visited:\n        return visited[node]\n\n    cloneNode = Node(node.val)\n    visited[node] = cloneNode\n\n    for neighbor in node.neighbors:\n        cloneNode.neighbors.append(cloneGraph(neighbor, visited))\n\n    return cloneNode\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.\n\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.\n\nGiven two integer arrays `gas` and `cost`, return _the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return_ `-1`. If there exists a solution, it is **guaranteed** to be **unique**\n\n",
          "input": "**Example 1:**\n\n**Input:** gas = \\[1,2,3,4,5\\], cost = \\[3,4,5,1,2\\]\n**Output:** 3\n**Explanation:**\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\n**Example 2:**\n\n**Input:** gas = \\[2,3,4\\], cost = \\[3,4,3\\]\n**Output:** -1\n**Explanation:**\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n\n**Constraints:**\n\n*   `n == gas.length == cost.length`\n*   `1 <= n <= 105`\n*   `0 <= gas[i], cost[i] <= 104`",
          "output": "def can_complete_circuit(gas, cost):\n    total_gas, total_cost, start, gas_tank = 0, 0, 0, 0\n    for i in range(len(gas)):\n        total_gas += gas[i]\n        total_cost += cost[i]\n        gas_tank += gas[i] - cost[i]\n        if gas_tank < 0:\n            start = i + 1\n            gas_tank = 0\n    return -1 if total_gas < total_cost else start\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.\n\nYou are giving candies to these children subjected to the following requirements:\n\n*   Each child must have at least one candy.\n*   Children with a higher rating get more candies than their neighbors.\n\nReturn _the minimum number of candies you need to have to distribute the candies to the children_.\n\n",
          "input": "**Example 1:**\n\n**Input:** ratings = \\[1,0,2\\]\n**Output:** 5\n**Explanation:** You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\n**Example 2:**\n\n**Input:** ratings = \\[1,2,2\\]\n**Output:** 4\n**Explanation:** You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n\n**Constraints:**\n\n*   `n == ratings.length`\n*   `1 <= n <= 2 * 104`\n*   `0 <= ratings[i] <= 2 * 104`",
          "output": "def min_candies(ratings):\n    n = len(ratings)\n    candies = [1] * n\n\n    for i in range(1, n):\n        if ratings[i] > ratings[i - 1]:\n            candies[i] = candies[i - 1] + 1\n\n    for i in range(n - 2, -1, -1):\n        if ratings[i] > ratings[i + 1]:\n            candies[i] = max(candies[i], candies[i + 1] + 1)\n\n    return sum(candies)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **non-empty** array of integers `nums`, every element appears _twice_ except for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,2,1\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** nums = \\[4,1,2,1,2\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-3 * 104 <= nums[i] <= 3 * 104`\n*   Each element in the array appears twice except for one element which appears only once.",
          "output": "def singleNumber(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` where every element appears **three times** except for one, which appears **exactly once**. _Find the single element and return it_.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,2,3,2\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,0,1,0,1,99\\]\n**Output:** 99\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-231 <= nums[i] <= 231 - 1`\n*   Each element in `nums` appears exactly **three times** except for one element which appears **once**.",
          "output": "def singleNumber(nums):\n    ones, twos = 0, 0\n    for n in nums:\n        ones = (ones ^ n) & ~twos\n        twos = (twos ^ n) & ~ones\n    return ones\n"
     },
     {
          "instruction": "Write python code for this problem: A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.\n\nConstruct a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**.\n\nFor example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.\n\nReturn _the head of the copied linked list_.\n\nThe linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:\n\n*   `val`: an integer representing `Node.val`\n*   `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.\n\nYour code will **only** be given the `head` of the original linked list.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[\\[7,null\\],\\[13,0\\],\\[11,4\\],\\[10,2\\],\\[1,0\\]\\]\n**Output:** \\[\\[7,null\\],\\[13,0\\],\\[11,4\\],\\[10,2\\],\\[1,0\\]\\]\n\n**Example 2:**\n\n**Input:** head = \\[\\[1,1\\],\\[2,1\\]\\]\n**Output:** \\[\\[1,1\\],\\[2,1\\]\\]\n\n**Example 3:**\n\n**Input:** head = \\[\\[3,null\\],\\[3,0\\],\\[3,null\\]\\]\n**Output:** \\[\\[3,null\\],\\[3,0\\],\\[3,null\\]\\]\n\n**Constraints:**\n\n*   `0 <= n <= 1000`\n*   `-104 <= Node.val <= 104`\n*   `Node.random` is `null` or is pointing to some node in the linked list.Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, make sure you are not making multiple copies of the same node. You may want to use extra space to keep old node ---> new node mapping to prevent creating multiples copies of same node. We can avoid using extra space for old node ---> new node mapping, by tweaking the original linked list. Simply interweave the nodes of the old and copied list. \r\nFor e.g.\r\n\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D' The interweaving is done using next pointers and we can make use of interweaved structure to get the correct reference nodes for random pointers.",
          "output": "class Node:\n    def __init__(self, val, next=None, random=None):\n        self.val = val\n        self.next = next\n        self.random = random\n        \ndef copyRandomList(head):\n    if not head:\n        return None\n\n    curr = head\n    while curr:\n        temp = Node(curr.val)\n        temp.next = curr.next\n        curr.next = temp\n        curr = curr.next.next\n\n    curr = head\n    while curr:\n        if curr.random:\n            curr.next.random = curr.random.next\n        curr = curr.next.next\n\n    orig = head\n    copy = head.next\n    copy_head = copy\n\n    while orig and copy:\n        orig.next = copy.next\n        orig = orig.next\n        if orig:\n            copy.next = orig.next\n            copy = copy.next\n\n    return copy_head\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\n**Note** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leetcode \", wordDict = \\[ \"leet \", \"code \"\\]\n**Output:** true\n**Explanation:** Return true because  \"leetcode \" can be segmented as  \"leet code \".\n\n**Example 2:**\n\n**Input:** s =  \"applepenapple \", wordDict = \\[ \"apple \", \"pen \"\\]\n**Output:** true\n**Explanation:** Return true because  \"applepenapple \" can be segmented as  \"apple pen apple \".\nNote that you are allowed to reuse a dictionary word.\n\n**Example 3:**\n\n**Input:** s =  \"catsandog \", wordDict = \\[ \"cats \", \"dog \", \"sand \", \"and \", \"cat \"\\]\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length <= 300`\n*   `1 <= wordDict.length <= 1000`\n*   `1 <= wordDict[i].length <= 20`\n*   `s` and `wordDict[i]` consist of only lowercase English letters.\n*   All the strings of `wordDict` are **unique**.",
          "output": "def word_break(s, word_dict):\n    word_set = set(word_dict)\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_set:\n                dp[i] = True\n                break\n    return dp[len(s)]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**.\n\n**Note** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"catsanddog \", wordDict = \\[ \"cat \", \"cats \", \"and \", \"sand \", \"dog \"\\]\n**Output:** \\[ \"cats and dog \", \"cat sand dog \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"pineapplepenapple \", wordDict = \\[ \"apple \", \"pen \", \"applepen \", \"pine \", \"pineapple \"\\]\n**Output:** \\[ \"pine apple pen apple \", \"pineapple pen apple \", \"pine applepen apple \"\\]\n**Explanation:** Note that you are allowed to reuse a dictionary word.\n\n**Example 3:**\n\n**Input:** s =  \"catsandog \", wordDict = \\[ \"cats \", \"dog \", \"sand \", \"and \", \"cat \"\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 20`\n*   `1 <= wordDict.length <= 1000`\n*   `1 <= wordDict[i].length <= 10`\n*   `s` and `wordDict[i]` consist of only lowercase English letters.\n*   All the strings of `wordDict` are **unique**.\n*   Input is generated in a way that the length of the answer doesn't exceed 105.",
          "output": "def word_break(s, word_dict):\n    def helper(s, dict, memo):\n        if s in memo:\n            return memo[s]\n\n        res = []\n        if s in dict:\n            res.append(s)\n\n        for i in range(1, len(s)):\n            prefix = s[:i]\n            if prefix not in dict:\n                continue\n            suffix = s[i:]\n            temp = helper(suffix, dict, memo)\n            for t in temp:\n                res.append(prefix + \" \" + t)\n\n        memo[s] = res\n        return res\n\n    word_set = set(word_dict)\n    memo = {}\n    return helper(s, word_set, memo)\n"
     },
     {
          "instruction": "Write python code for this problem: Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**.\n\nReturn `true` _if there is a cycle in the linked list_. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[3,2,0,-4\\], pos = 1\n**Output:** true\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\n**Example 2:**\n\n**Input:** head = \\[1,2\\], pos = 0\n**Output:** true\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 0th node.\n\n**Example 3:**\n\n**Input:** head = \\[1\\], pos = -1\n**Output:** false\n**Explanation:** There is no cycle in the linked list.\n\n**Constraints:**\n\n*   The number of the nodes in the list is in the range `[0, 104]`.\n*   `-105 <= Node.val <= 105`\n*   `pos` is `-1` or a **valid index** in the linked-list.\n\n**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?",
          "output": "def hasCycle(head):\n    slow = fast = head\n    while fast is not None and fast.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list, return _the node where the cycle begins. If there is no cycle, return_ `null`.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (**0-indexed**). It is `-1` if there is no cycle. **Note that** `pos` **is not passed as a parameter**.\n\n**Do not modify** the linked list.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[3,2,0,-4\\], pos = 1\n**Output:** tail connects to node index 1\n**Explanation:** There is a cycle in the linked list, where tail connects to the second node.\n\n**Example 2:**\n\n**Input:** head = \\[1,2\\], pos = 0\n**Output:** tail connects to node index 0\n**Explanation:** There is a cycle in the linked list, where tail connects to the first node.\n\n**Example 3:**\n\n**Input:** head = \\[1\\], pos = -1\n**Output:** no cycle\n**Explanation:** There is no cycle in the linked list.\n\n**Constraints:**\n\n*   The number of the nodes in the list is in the range `[0, 104]`.\n*   `-105 <= Node.val <= 105`\n*   `pos` is `-1` or a **valid index** in the linked-list.\n\n**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef detectCycle(head):\n    slow, fast = head, head\n    \n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        \n        if slow == fast:\n            start = head\n            while start != slow:\n                start = start.next\n                slow = slow.next\n            return start\n    \n    return None\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the head of a singly linked-list. The list can be represented as:\n\nL0 -> L1 -> ... -> Ln - 1 -> Ln\n\n_Reorder the list to be on the following form:_\n\nL0 -> Ln -> L1 -> Ln - 1 -> L2 -> Ln - 2 -> ...\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4\\]\n**Output:** \\[1,4,2,3\\]\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4,5\\]\n**Output:** \\[1,5,2,4,3\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 5 * 104]`.\n*   `1 <= Node.val <= 1000`",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reorderList(head):\n    if not head or not head.next or not head.next.next:\n        return\n\n    # Find the middle node\n    slow = head\n    fast = head\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n\n    # Reverse the second half\n    prev = None\n    curr = slow.next\n    while curr:\n        next = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next\n    slow.next = None\n\n    # Merge two halves\n    first = head\n    second = prev\n    while second:\n        next = first.next\n        first.next = second\n        first = second\n        second = next\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the preorder traversal of its nodes' values_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,3\\]\n**Output:** \\[1,2,3\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef preorderTraversal(root):\n    if root is None:\n        return []\n        \n    return [root.val] + preorderTraversal(root.left) + preorderTraversal(root.right)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the postorder traversal of its nodes' values_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,3\\]\n**Output:** \\[3,2,1\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of the nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef postorderTraversal(root):\n    if not root:\n        return []\n\n    result = []\n    s = [root]\n    while s:\n        current = s.pop()\n        result.insert(0, current.val)\n        if current.left:\n            s.append(current.left)\n        if current.right:\n            s.append(current.right)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure that follows the constraints of a **[Least Recently Used (LRU) cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)**.\n\nImplement the `LRUCache` class:\n\n*   `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`.\n*   `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.\n*   `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key.\n\nThe functions `get` and `put` must each run in `O(1)` average time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"LRUCache \",  \"put \",  \"put \",  \"get \",  \"put \",  \"get \",  \"put \",  \"get \",  \"get \",  \"get \"\\]\n\\[\\[2\\], \\[1, 1\\], \\[2, 2\\], \\[1\\], \\[3, 3\\], \\[2\\], \\[4, 4\\], \\[1\\], \\[3\\], \\[4\\]\\]\n**Output**\n\\[null, null, null, 1, null, -1, null, -1, 3, 4\\]\n\n**Explanation**\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n**Constraints:**\n\n*   `1 <= capacity <= 3000`\n*   `0 <= key <= 104`\n*   `0 <= value <= 105`\n*   At most `2 * 105` calls will be made to `get` and `put`.",
          "output": "from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        value = self.cache.pop(key)\n        self.cache[key] = value\n        return value\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.cache.pop(key)\n        elif len(self.cache) >= self.capacity:\n            self.cache.popitem(last=False)\n        self.cache[key] = value\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list, sort the list using **insertion sort**, and return _the sorted list's head_.\n\nThe steps of the **insertion sort** algorithm:\n\n1.  Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n2.  At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n3.  It repeats until no input elements remain.\n\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[4,2,1,3\\]\n**Output:** \\[1,2,3,4\\]\n\n**Example 2:**\n\n**Input:** head = \\[-1,5,3,4,0\\]\n**Output:** \\[-1,0,3,4,5\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 5000]`.\n*   `-5000 <= Node.val <= 5000`",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef insertionSortList(head):\n    dummy = ListNode(0)\n    cur = dummy\n\n    while head:\n        while cur.next and cur.next.val < head.val:\n            cur = cur.next\n        \n        temp = head.next\n        head.next = cur.next\n        cur.next = head\n        head = temp\n        cur = dummy\n\n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list, return _the list after sorting it in **ascending order**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[4,2,1,3\\]\n**Output:** \\[1,2,3,4\\]\n\n**Example 2:**\n\n**Input:** head = \\[-1,5,3,4,0\\]\n**Output:** \\[-1,0,3,4,5\\]\n\n**Example 3:**\n\n**Input:** head = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 5 * 104]`.\n*   `-105 <= Node.val <= 105`\n\n**Follow up:** Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?",
          "output": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef sortList(head):\n    if not head or not head.next:\n        return head\n\n    slow, fast = head, head.next\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n\n    mid = slow.next\n    slow.next = None\n\n    return merge(sortList(head), sortList(mid))\n\ndef merge(left, right):\n    if not left:\n        return right\n    if not right:\n        return left\n    if left.val < right.val:\n        left.next = merge(left.next, right)\n        return left\n    else:\n        right.next = merge(left, right.next)\n        return right\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return _the maximum number of points that lie on the same straight line_.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,1\\],\\[3,2\\],\\[5,3\\],\\[4,1\\],\\[2,3\\],\\[1,4\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= points.length <= 300`\n*   `points[i].length == 2`\n*   `-104 <= xi, yi <= 104`\n*   All the `points` are **unique**.",
          "output": "from math import gcd\nfrom collections import defaultdict\n\ndef maxPoints(points):\n    n = len(points)\n    if n <= 2:\n        return n\n\n    max_count = 0\n\n    for i in range(n):\n        slope_map = defaultdict(int)\n        duplicates = 0\n        local_max = 0\n\n        for j in range(i+1, n):\n            deltaX = points[j][0] - points[i][0]\n            deltaY = points[j][1] - points[i][1]\n\n            if deltaX == 0 and deltaY == 0:\n                duplicates += 1\n                continue\n\n            g = gcd(deltaX, deltaY)\n            deltaX = deltaX // g\n            deltaY = deltaY // g\n\n            key = f\"{deltaX}_{deltaY}\"\n            slope_map[key] += 1\n            local_max = max(local_max, slope_map[key])\n\n        max_count = max(max_count, local_max + duplicates + 1)\n\n    return max_count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `tokens` that represents an arithmetic expression in a [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).\n\nEvaluate the expression. Return _an integer that represents the value of the expression_.\n\n**Note** that:\n\n*   The valid operators are `'+'`, `'-'`, `'*'`, and `'/'`.\n*   Each operand may be an integer or another expression.\n*   The division between two integers always **truncates toward zero**.\n*   There will not be any division by zero.\n*   The input represents a valid arithmetic expression in a reverse polish notation.\n*   The answer and all the intermediate calculations can be represented in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** tokens = \\[ \"2 \", \"1 \", \"+ \", \"3 \", \"\\* \"\\]\n**Output:** 9\n**Explanation:** ((2 + 1) \\* 3) = 9\n\n**Example 2:**\n\n**Input:** tokens = \\[ \"4 \", \"13 \", \"5 \", \"/ \", \"+ \"\\]\n**Output:** 6\n**Explanation:** (4 + (13 / 5)) = 6\n\n**Example 3:**\n\n**Input:** tokens = \\[ \"10 \", \"6 \", \"9 \", \"3 \", \"+ \", \"-11 \", \"\\* \", \"/ \", \"\\* \", \"17 \", \"+ \", \"5 \", \"+ \"\\]\n**Output:** 22\n**Explanation:** ((10 \\* (6 / ((9 + 3) \\* -11))) + 17) + 5\n= ((10 \\* (6 / (12 \\* -11))) + 17) + 5\n= ((10 \\* (6 / -132)) + 17) + 5\n= ((10 \\* 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\n**Constraints:**\n\n*   `1 <= tokens.length <= 104`\n*   `tokens[i]` is either an operator: `\"+ \"`, `\"- \"`, `\"* \"`, or `\"/ \"`, or an integer in the range `[-200, 200]`.",
          "output": "def evalRPN(tokens):\n    stack = []\n    for token in tokens:\n        if token in {\"+\", \"-\", \"*\", \"/\"}:\n            b = stack.pop()\n            a = stack.pop()\n            if token == \"+\":\n                stack.append(a + b)\n            elif token == \"-\":\n                stack.append(a - b)\n            elif token == \"*\":\n                stack.append(a * b)\n            else:\n                stack.append(int(a / b))\n        else:\n            stack.append(int(token))\n    return stack[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an input string `s`, reverse the order of the **words**.\n\nA **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space.\n\nReturn _a string of the words in reverse order concatenated by a single space._\n\n**Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"the sky is blue \"\n**Output:**  \"blue is sky the \"\n\n**Example 2:**\n\n**Input:** s =  \"  hello world   \"\n**Output:**  \"world hello \"\n**Explanation:** Your reversed string should not contain leading or trailing spaces.\n\n**Example 3:**\n\n**Input:** s =  \"a good   example \"\n**Output:**  \"example good a \"\n**Explanation:** You need to reduce multiple spaces between two words to a single space in the reversed string.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.\n*   There is **at least one** word in `s`.\n\n**Follow-up:** If the string data type is mutable in your language, can you solve it **in-place** with `O(1)` extra space?",
          "output": "def reverseWords(s):\n    words = s.split()\n    words.reverse()\n    return ' '.join(words)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, find a subarray that has the largest product, and return _the product_.\n\nThe test cases are generated so that the answer will fit in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,-2,4\\]\n**Output:** 6\n**Explanation:** \\[2,3\\] has the largest product 6.\n\n**Example 2:**\n\n**Input:** nums = \\[-2,0,-1\\]\n**Output:** 0\n**Explanation:** The result cannot be 2, because \\[-2,-1\\] is not a subarray.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `-10 <= nums[i] <= 10`\n*   The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.",
          "output": "def maxProduct(nums):\n    max_so_far = min_so_far = result = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_so_far, min_so_far = min_so_far, max_so_far\n        \n        max_so_far = max(nums[i], max_so_far * nums[i])\n        min_so_far = min(nums[i], min_so_far * nums[i])\n        result = max(result, max_so_far)\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n\n*   `[4,5,6,7,0,1,2]` if it was rotated `4` times.\n*   `[0,1,2,4,5,6,7]` if it was rotated `7` times.\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` of **unique** elements, return _the minimum element of this array_.\n\nYou must write an algorithm that runs in `O(log n) time.`\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,4,5,1,2\\]\n**Output:** 1\n**Explanation:** The original array was \\[1,2,3,4,5\\] rotated 3 times.\n\n**Example 2:**\n\n**Input:** nums = \\[4,5,6,7,0,1,2\\]\n**Output:** 0\n**Explanation:** The original array was \\[0,1,2,4,5,6,7\\] and it was rotated 4 times.\n\n**Example 3:**\n\n**Input:** nums = \\[11,13,15,17\\]\n**Output:** 11\n**Explanation:** The original array was \\[11,13,15,17\\] and it was rotated 4 times. \n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 5000`\n*   `-5000 <= nums[i] <= 5000`\n*   All the integers of `nums` are **unique**.\n*   `nums` is sorted and rotated between `1` and `n` times.Array was originally in ascending order. Now that the array is rotated, there would be a point in the array where there is a small deflection from the increasing sequence. eg. The array would be something like [4, 5, 6, 7, 0, 1, 2]. You can divide the search space into two and see which direction to go.\r\nCan you think of an algorithm which has O(logN) search complexity? All the elements to the left of inflection point > first element of the array.\nAll the elements to the right of inflection point < first element of the array.",
          "output": "def find_min(nums):\n    left, right = 0, len(nums) - 1\n\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]\n"
     },
     {
          "instruction": "Write python code for this problem: Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:\n\n*   `[4,5,6,7,0,1,4]` if it was rotated `4` times.\n*   `[0,1,4,4,5,6,7]` if it was rotated `7` times.\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` that may contain **duplicates**, return _the minimum element of this array_.\n\nYou must decrease the overall operation steps as much as possible.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,5\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,0,1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 5000`\n*   `-5000 <= nums[i] <= 5000`\n*   `nums` is sorted and rotated between `1` and `n` times.\n\n**Follow up:** This problem is similar to [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/), but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?",
          "output": "def findMin(nums):\n    low, high = 0, len(nums) - 1\n    \n    while low < high:\n        mid = low + (high - low) // 2\n        if nums[mid] > nums[high]:\n            low = mid + 1\n        elif nums[mid] < nums[high]:\n            high = mid\n        else:\n            high -= 1\n            \n    return nums[low]\n"
     },
     {
          "instruction": "Write python code for this problem: Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the `MinStack` class:\n\n*   `MinStack()` initializes the stack object.\n*   `void push(int val)` pushes the element `val` onto the stack.\n*   `void pop()` removes the element on the top of the stack.\n*   `int top()` gets the top element of the stack.\n*   `int getMin()` retrieves the minimum element in the stack.\n\nYou must implement a solution with `O(1)` time complexity for each function.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MinStack \", \"push \", \"push \", \"push \", \"getMin \", \"pop \", \"top \", \"getMin \"\\]\n\\[\\[\\],\\[-2\\],\\[0\\],\\[-3\\],\\[\\],\\[\\],\\[\\],\\[\\]\\]\n\n**Output**\n\\[null,null,null,null,-3,null,0,-2\\]\n\n**Explanation**\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n**Constraints:**\n\n*   `-231 <= val <= 231 - 1`\n*   Methods `pop`, `top` and `getMin` operations will always be called on **non-empty** stacks.\n*   At most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)",
          "output": "class MinStack:\n\n    def __init__(self):\n        self.stack = []\n        self.min_stack = []\n        \n    def push(self, val: int):\n        self.stack.append(val)\n        if not self.min_stack or val <= self.min_stack[-1]:\n            self.min_stack.append(val)\n        \n    def pop(self):\n        if self.stack[-1] == self.min_stack[-1]:\n            self.min_stack.pop()\n        self.stack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def getMin(self) -> int:\n        return self.min_stack[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, turn the tree upside down and return _the new root_.\n\nYou can turn a binary tree upside down with the following steps:\n\n1.  The original left child becomes the new root.\n2.  The original root becomes the new right child.\n3.  The original right child becomes the new left child.\n\nThe mentioned steps are done level by level. It is **guaranteed** that every right node has a sibling (a left node with the same parent) and has no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5\\]\n**Output:** \\[4,5,2,null,null,3,1\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree will be in the range `[0, 10]`.\n*   `1 <= Node.val <= 10`\n*   Every right node in the tree has a sibling (a left node that shares the same parent).\n*   Every right node in the tree has no children.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef upside_down_binary_tree(root):\n    if not root or not root.left:\n        return root\n    new_root = upside_down_binary_tree(root.left)\n    root.left.right = root\n    root.left.left = root.right\n    root.left = None\n    root.right = None\n    return new_root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.\n\n**Method read4:**\n\nThe API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`.\n\nThe return value is the number of actual characters read.\n\nNote that `read4()` has its own file pointer, much like `FILE *fp` in C.\n\n**Definition of read4:**\n\n    Parameter:  char\\[\\] buf4\n    Returns:    int\n\nbuf4\\[\\] is a destination, not a source. The results from read4 will be copied to buf4\\[\\].\n\nBelow is a high-level example of how `read4` works:\n\nFile file( \"abcde `\"); // File is  \"`abcde `\", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 =  \"abcd \", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 =  \"e \", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 =  \" \", fp points to end of file`\n\n**Method read:**\n\nBy using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.\n\nThe return value is the number of actual characters read.\n\n**Definition of read:**\n\n    Parameters:\tchar\\[\\] buf, int n\n    Returns:\tint\n\nbuf\\[\\] is a destination, not a source. You will need to write the results to buf\\[\\].\n\n**Note:**\n\n*   Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.\n*   The `read` function will only be called once for each test case.\n*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.\n\n",
          "input": "**Example 1:**\n\n**Input:** file =  \"abc \", n = 4\n**Output:** 3\n**Explanation:** After calling your read method, buf should contain  \"abc \". We read a total of 3 characters from the file, so return 3.\nNote that  \"abc \" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.\n\n**Example 2:**\n\n**Input:** file =  \"abcde \", n = 5\n**Output:** 5\n**Explanation:** After calling your read method, buf should contain  \"abcde \". We read a total of 5 characters from the file, so return 5.\n\n**Example 3:**\n\n**Input:** file =  \"abcdABCD1234 \", n = 12\n**Output:** 12\n**Explanation:** After calling your read method, buf should contain  \"abcdABCD1234 \". We read a total of 12 characters from the file, so return 12.\n\n**Constraints:**\n\n*   `1 <= file.length <= 500`\n*   `file` consist of English letters and digits.\n*   `1 <= n <= 1000`",
          "output": "def read4(buf4: List[str]) -> int:\n    pass\n\ndef read(buf: List[str], n: int) -> int:\n    total_read = 0\n    buf4 = [''] * 4\n\n    while total_read < n:\n        read4_count = read4(buf4)\n        for i in range(read4_count):\n            if total_read < n:\n                buf[total_read] = buf4[i]\n                total_read += 1\n            else:\n                break\n        if read4_count < 4:\n            break\n\n    return total_read\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be **called multiple times**.\n\n**Method read4:**\n\nThe API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`.\n\nThe return value is the number of actual characters read.\n\nNote that `read4()` has its own file pointer, much like `FILE *fp` in C.\n\n**Definition of read4:**\n\n    Parameter:  char\\[\\] buf4\n    Returns:    int\n\nbuf4\\[\\] is a destination, not a source. The results from read4 will be copied to buf4\\[\\].\n\nBelow is a high-level example of how `read4` works:\n\nFile file( \"abcde `\"); // File is  \"`abcde `\", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 =  \"abcd \", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 =  \"e \", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 =  \" \", fp points to end of file`\n\n**Method read:**\n\nBy using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.\n\nThe return value is the number of actual characters read.\n\n**Definition of read:**\n\n    Parameters:\tchar\\[\\] buf, int n\n    Returns:\tint\n\nbuf\\[\\] is a destination, not a source. You will need to write the results to buf\\[\\].\n\n**Note:**\n\n*   Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.\n*   The read function may be **called multiple times**.\n*   Please remember to **RESET** your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see [here](https://leetcode.com/faq/) for more details.\n*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.\n*   It is guaranteed that in a given test case the same buffer `buf` is called by `read`.\n\n",
          "input": "**Example 1:**\n\n**Input:** file =  \"abc \", queries = \\[1,2,1\\]\n**Output:** \\[1,2,0\\]\n**Explanation:** The test case represents the following scenario:\nFile file( \"abc \");\nSolution sol;\nsol.read(buf, 1); // After calling your read method, buf should contain  \"a \". We read a total of 1 character from the file, so return 1.\nsol.read(buf, 2); // Now buf should contain  \"bc \". We read a total of 2 characters from the file, so return 2.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\nAssume buf is allocated and guaranteed to have enough space for storing all characters from the file.\n\n**Example 2:**\n\n**Input:** file =  \"abc \", queries = \\[4,1\\]\n**Output:** \\[3,0\\]\n**Explanation:** The test case represents the following scenario:\nFile file( \"abc \");\nSolution sol;\nsol.read(buf, 4); // After calling your read method, buf should contain  \"abc \". We read a total of 3 characters from the file, so return 3.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\n\n**Constraints:**\n\n*   `1 <= file.length <= 500`\n*   `file` consist of English letters and digits.\n*   `1 <= queries.length <= 10`\n*   `1 <= queries[i] <= 500`",
          "output": "class Solution:\n    def __init__(self):\n        self.buffer_index = 0\n        self.buffer_len = 0\n        self.buf4 = [None] * 4\n\n    def read(self, buf, n):\n        cnt = 0\n        while cnt < n:\n            if self.buffer_index == self.buffer_len:\n                self.buffer_len = self.read4(self.buf4)\n                self.buffer_index = 0\n            if self.buffer_len == 0:\n                break\n            while cnt < n and self.buffer_index < self.buffer_len:\n                buf[cnt] = self.buf4[self.buffer_index]\n                cnt += 1\n                self.buffer_index += 1\n        return cnt\n\n    def read4(self, buf4):\n        return 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the length of the longest_ _substring_ _that contains at most **two distinct characters**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"eceba \"\n**Output:** 3\n**Explanation:** The substring is  \"ece \" which its length is 3.\n\n**Example 2:**\n\n**Input:** s =  \"ccaabbb \"\n**Output:** 5\n**Explanation:** The substring is  \"aabbb \" which its length is 5.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of English letters.",
          "output": "def lengthOfLongestSubstringTwoDistinct(s: str) -> int:\n    l, r, max_len, cur_len = 0, 0, 0, 0\n    char_count = {}\n\n    while r < len(s):\n        if s[r] in char_count:\n            char_count[s[r]] += 1\n        else:\n            char_count[s[r]] = 1\n        if len(char_count) <= 2:\n            cur_len += 1\n        else:\n            while len(char_count) > 2 and l <= r:\n                char_count[s[l]] -= 1\n                if char_count[s[l]] == 0:\n                    del char_count[s[l]]\n                l += 1\n                cur_len -= 1\n            cur_len += 1\n        max_len = max(max_len, cur_len)\n        r += 1\n    return max_len\n"
     },
     {
          "instruction": "Write python code for this problem: Given the heads of two singly linked-lists `headA` and `headB`, return _the node at which the two lists intersect_. If the two linked lists have no intersection at all, return `null`.\n\nFor example, the following two linked lists begin to intersect at node `c1`:\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\n\n**Note** that the linked lists must **retain their original structure** after the function returns.\n\n**Custom Judge:**\n\nThe inputs to the **judge** are given as follows (your program is **not** given these inputs):\n\n*   `intersectVal` - The value of the node where the intersection occurs. This is `0` if there is no intersected node.\n*   `listA` - The first linked list.\n*   `listB` - The second linked list.\n*   `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node.\n*   `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**.\n\n",
          "input": "**Example 1:**\n\n**Input:** intersectVal = 8, listA = \\[4,1,8,4,5\\], listB = \\[5,6,1,8,4,5\\], skipA = 2, skipB = 3\n**Output:** Intersected at '8'\n**Explanation:** The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as \\[4,1,8,4,5\\]. From the head of B, it reads as \\[5,6,1,8,4,5\\]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.\n\n**Example 2:**\n\n**Input:** intersectVal = 2, listA = \\[1,9,1,2,4\\], listB = \\[3,2,4\\], skipA = 3, skipB = 1\n**Output:** Intersected at '2'\n**Explanation:** The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as \\[1,9,1,2,4\\]. From the head of B, it reads as \\[3,2,4\\]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n\n**Example 3:**\n\n**Input:** intersectVal = 0, listA = \\[2,6,4\\], listB = \\[1,5\\], skipA = 3, skipB = 2\n**Output:** No intersection\n**Explanation:** From the head of A, it reads as \\[2,6,4\\]. From the head of B, it reads as \\[1,5\\]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n\n**Constraints:**\n\n*   The number of nodes of `listA` is in the `m`.\n*   The number of nodes of `listB` is in the `n`.\n*   `1 <= m, n <= 3 * 104`\n*   `1 <= Node.val <= 105`\n*   `0 <= skipA < m`\n*   `0 <= skipB < n`\n*   `intersectVal` is `0` if `listA` and `listB` do not intersect.\n*   `intersectVal == listA[skipA] == listB[skipB]` if `listA` and `listB` intersect.\n\n**Follow up:** Could you write a solution that runs in `O(m + n)` time and use only `O(1)` memory?",
          "output": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef getIntersectionNode(headA, headB):\n    pA, pB = headA, headB\n    while pA is not pB:\n        pA = pA.next if pA else headB\n        pB = pB.next if pB else headA\n    return pA\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.\n\nA string `s` is said to be one distance apart from a string `t` if you can:\n\n*   Insert **exactly one** character into `s` to get `t`.\n*   Delete **exactly one** character from `s` to get `t`.\n*   Replace **exactly one** character of `s` with **a different character** to get `t`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ab \", t =  \"acb \"\n**Output:** true\n**Explanation:** We can insert 'c' into s to get t.\n\n**Example 2:**\n\n**Input:** s =  \" \", t =  \" \"\n**Output:** false\n**Explanation:** We cannot get t from s by only one step.\n\n**Constraints:**\n\n*   `0 <= s.length, t.length <= 104`\n*   `s` and `t` consist of lowercase letters, uppercase letters, and digits.",
          "output": "def isOneEditDistance(s: str, t: str) -> bool:\n    m, n = len(s), len(t)\n    if m > n:\n        return isOneEditDistance(t, s)\n    if n - m > 1:\n        return False\n    for i in range(m):\n        if s[i] != t[i]:\n            return s[i + (m < n):] == t[i + 1:]\n    return m + 1 == n\n"
     },
     {
          "instruction": "Write python code for this problem: A peak element is an element that is strictly greater than its neighbors.\n\nGiven a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.\n\nYou may imagine that `nums[-1] = nums[n] = -\u221e`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n\nYou must write an algorithm that runs in `O(log n)` time.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,1\\]\n**Output:** 2\n**Explanation:** 3 is a peak element and your function should return the index number 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,1,3,5,6,4\\]\n**Output:** 5\n**Explanation:** Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-231 <= nums[i] <= 231 - 1`\n*   `nums[i] != nums[i + 1]` for all valid `i`.",
          "output": "def findPeakElement(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] < nums[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an inclusive range `[lower, upper]` and a **sorted unique** integer array `nums`, where all elements are in the inclusive range.\n\nA number `x` is considered **missing** if `x` is in the range `[lower, upper]` and `x` is not in `nums`.\n\nReturn _the **smallest sorted** list of ranges that **cover every missing number exactly**_. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.\n\nEach range `[a,b]` in the list should be output as:\n\n*   `\"a->b \"` if `a != b`\n*   `\"a \"` if `a == b`\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,3,50,75\\], lower = 0, upper = 99\n**Output:** \\[ \"2 \", \"4->49 \", \"51->74 \", \"76->99 \"\\]\n**Explanation:** The ranges are:\n\\[2,2\\] -->  \"2 \"\n\\[4,49\\] -->  \"4->49 \"\n\\[51,74\\] -->  \"51->74 \"\n\\[76,99\\] -->  \"76->99 \"\n\n**Example 2:**\n\n**Input:** nums = \\[-1\\], lower = -1, upper = -1\n**Output:** \\[\\]\n**Explanation:** There are no missing ranges since there are no missing numbers.\n\n**Constraints:**\n\n*   `-109 <= lower <= upper <= 109`\n*   `0 <= nums.length <= 100`\n*   `lower <= nums[i] <= upper`\n*   All the values of `nums` are **unique**.",
          "output": "from typing import List\n\ndef find_missing_ranges(nums: List[int], lower: int, upper: int) -> List[str]:\n    result = []\n    prev = lower - 1\n\n    for i, num in enumerate(nums + [upper + 1]):\n        if num - prev >= 2:\n            result.append(f\"{prev + 1}\" + (\"\" if num - prev == 2 else \"->\") + f\"{num - 1}\")\n        prev = num\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the maximum difference between two successive elements in its sorted form_. If the array contains less than two elements, return `0`.\n\nYou must write an algorithm that runs in linear time and uses linear extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,6,9,1\\]\n**Output:** 3\n**Explanation:** The sorted form of the array is \\[1,3,6,9\\], either (3,6) or (6,9) has the maximum difference 3.\n\n**Example 2:**\n\n**Input:** nums = \\[10\\]\n**Output:** 0\n**Explanation:** The array contains less than 2 elements, therefore return 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 109`",
          "output": "def maximumGap(nums):\n    if len(nums) < 2:\n        return 0\n\n    min_val = min(nums)\n    max_val = max(nums)\n    length = len(nums)\n    bucket_size = max(1, (max_val - min_val) // (length - 1))\n    bucket_num = (max_val - min_val) // bucket_size + 1\n    buckets = [[float(\"inf\"), float(\"-inf\")] for _ in range(bucket_num)]\n\n    for num in nums:\n        idx = (num - min_val) // bucket_size\n        buckets[idx][0] = min(buckets[idx][0], num)\n        buckets[idx][1] = max(buckets[idx][1], num)\n\n    max_gap = 0\n    prev_max = min_val\n    for bucket in buckets:\n        if bucket[0] == float(\"inf\"):\n            continue\n        max_gap = max(max_gap, bucket[0] - prev_max)\n        prev_max = bucket[1]\n    return max_gap\n"
     },
     {
          "instruction": "Write python code for this problem: Given two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.\n\nTo compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.\n\n_Return the following:_\n\n*   If `version1 < version2`, return `-1`.\n*   If `version1 > version2`, return `1`.\n*   Otherwise, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** version1 =  \"1.01 \", version2 =  \"1.001 \"\n**Output:** 0\n**Explanation:** Ignoring leading zeroes, both  \"01 \" and  \"001 \" represent the same integer  \"1 \".\n\n**Example 2:**\n\n**Input:** version1 =  \"1.0 \", version2 =  \"1.0.0 \"\n**Output:** 0\n**Explanation:** version1 does not specify revision 2, which means it is treated as  \"0 \".\n\n**Example 3:**\n\n**Input:** version1 =  \"0.1 \", version2 =  \"1.1 \"\n**Output:** -1\n**Explanation:** version1's revision 0 is  \"0 \", while version2's revision 0 is  \"1 \". 0 < 1, so version1 < version2.\n\n**Constraints:**\n\n*   `1 <= version1.length, version2.length <= 500`\n*   `version1` and `version2` only contain digits and `'.'`.\n*   `version1` and `version2` **are valid version numbers**.\n*   All the given revisions in `version1` and `version2` can be stored in a **32-bit integer**.",
          "output": "def compare_version(version1, version2):\n    v1 = version1.split('.')\n    v2 = version2.split('.')\n    \n    while v1 or v2:\n        num1 = int(v1.pop(0)) if v1 else 0\n        num2 = int(v2.pop(0)) if v2 else 0\n        \n        if num1 < num2:\n            return -1\n        if num1 > num2:\n            return 1\n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers representing the `numerator` and `denominator` of a fraction, return _the fraction in string format_.\n\nIf the fractional part is repeating, enclose the repeating part in parentheses.\n\nIf multiple answers are possible, return **any of them**.\n\nIt is **guaranteed** that the length of the answer string is less than `104` for all the given inputs.\n\n",
          "input": "**Example 1:**\n\n**Input:** numerator = 1, denominator = 2\n**Output:**  \"0.5 \"\n\n**Example 2:**\n\n**Input:** numerator = 2, denominator = 1\n**Output:**  \"2 \"\n\n**Example 3:**\n\n**Input:** numerator = 4, denominator = 333\n**Output:**  \"0.(012) \"\n\n**Constraints:**\n\n*   `-231 <= numerator, denominator <= 231 - 1`\n*   `denominator != 0`No scary math, just apply elementary math knowledge. Still remember how to perform a long division? Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern? Notice that once the remainder starts repeating, so does the divided result. Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly.",
          "output": "def fraction_to_decimal(numerator, denominator):\n    if numerator == 0:\n        return \"0\"\n    res = []\n    if (numerator > 0) ^ (denominator > 0):\n        res.append(\"-\")\n    num = abs(numerator)\n    den = abs(denominator)\n    res.append(str(num // den))\n    num %= den\n    if num == 0:\n        return \"\".join(res)\n    res.append(\".\")\n    map = {}\n    while num:\n        if num in map:\n            res.insert(map[num], \"(\")\n            res.append(\")\")\n            break\n        map[num] = len(res)\n        num *= 10\n        res.append(str(num // den))\n        num %= den\n    return \"\".join(res)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **1-indexed** array of integers `numbers` that is already **_sorted in non-decreasing order_**, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`.\n\nReturn _the indices of the two numbers,_ `index1` _and_ `index2`_, **added by one** as an integer array_ `[index1, index2]` _of length 2._\n\nThe tests are generated such that there is **exactly one solution**. You **may not** use the same element twice.\n\nYour solution must use only constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** numbers = \\[2,7,11,15\\], target = 9\n**Output:** \\[1,2\\]\n**Explanation:** The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return \\[1, 2\\].\n\n**Example 2:**\n\n**Input:** numbers = \\[2,3,4\\], target = 6\n**Output:** \\[1,3\\]\n**Explanation:** The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return \\[1, 3\\].\n\n**Example 3:**\n\n**Input:** numbers = \\[\\-1,0\\], target = -1\n**Output:** \\[1,2\\]\n**Explanation:** The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return \\[1, 2\\].\n\n**Constraints:**\n\n*   `2 <= numbers.length <= 3 * 104`\n*   `-1000 <= numbers[i] <= 1000`\n*   `numbers` is sorted in **non-decreasing order**.\n*   `-1000 <= target <= 1000`\n*   The tests are generated such that there is **exactly one solution**.",
          "output": "def twoSum(numbers, target):\n    left, right = 0, len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return []\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `columnNumber`, return _its corresponding column title as it appears in an Excel sheet_.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n",
          "input": "**Example 1:**\n\n**Input:** columnNumber = 1\n**Output:**  \"A \"\n\n**Example 2:**\n\n**Input:** columnNumber = 28\n**Output:**  \"AB \"\n\n**Example 3:**\n\n**Input:** columnNumber = 701\n**Output:**  \"ZY \"\n\n**Constraints:**\n\n*   `1 <= columnNumber <= 231 - 1`",
          "output": "def convert_to_title(columnNumber: int) -> str:\n    result = \"\"\n    while columnNumber:\n        columnNumber -= 1\n        result = chr(columnNumber % 26 + ord('A')) + result\n        columnNumber //= 26\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of size `n`, return _the majority element_.\n\nThe majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,2,3\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,1,1,1,2,2\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 5 * 104`\n*   `-109 <= nums[i] <= 109`\n\n**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?",
          "output": "def majority_element(nums):\n    count = 0\n    candidate = None\n\n    for num in nums:\n        if count == 0:\n            candidate = num\n        count += (num == candidate) - (num != candidate)\n\n    return candidate\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.\n\nImplement the `TwoSum` class:\n\n*   `TwoSum()` Initializes the `TwoSum` object, with an empty array initially.\n*   `void add(int number)` Adds `number` to the data structure.\n*   `boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"TwoSum \",  \"add \",  \"add \",  \"add \",  \"find \",  \"find \"\\]\n\\[\\[\\], \\[1\\], \\[3\\], \\[5\\], \\[4\\], \\[7\\]\\]\n**Output**\n\\[null, null, null, null, true, false\\]\n\n**Explanation**\nTwoSum twoSum = new TwoSum();\ntwoSum.add(1);   // \\[\\] --> \\[1\\]\ntwoSum.add(3);   // \\[1\\] --> \\[1,3\\]\ntwoSum.add(5);   // \\[1,3\\] --> \\[1,3,5\\]\ntwoSum.find(4);  // 1 + 3 = 4, return true\ntwoSum.find(7);  // No two integers sum up to 7, return false\n\n**Constraints:**\n\n*   `-105 <= number <= 105`\n*   `-231 <= value <= 231 - 1`\n*   At most `104` calls will be made to `add` and `find`.",
          "output": "class TwoSum:\n\n    def __init__(self):\n        self.nums = {}\n\n    def add(self, number: int) -> None:\n        if number in self.nums:\n            self.nums[number] += 1\n        else:\n            self.nums[number] = 1\n\n    def find(self, value: int) -> bool:\n        for num in self.nums:\n            target = value - num\n            if target in self.nums:\n                if target != num or self.nums[num] > 1:\n                    return True\n        return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return _its corresponding column number_.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n",
          "input": "**Example 1:**\n\n**Input:** columnTitle =  \"A \"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** columnTitle =  \"AB \"\n**Output:** 28\n\n**Example 3:**\n\n**Input:** columnTitle =  \"ZY \"\n**Output:** 701\n\n**Constraints:**\n\n*   `1 <= columnTitle.length <= 7`\n*   `columnTitle` consists only of uppercase English letters.\n*   `columnTitle` is in the range `[ \"A \", \"FXSHRXW \"]`.",
          "output": "def title_to_number(column_title: str) -> int:\n    result = 0\n    for c in column_title:\n        result = result * 26 + (ord(c) - ord('A') + 1)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the number of trailing zeroes in_ `n!`.\n\nNote that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 0\n**Explanation:** 3! = 6, no trailing zero.\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** 1\n**Explanation:** 5! = 120, one trailing zero.\n\n**Example 3:**\n\n**Input:** n = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `0 <= n <= 104`\n\n**Follow up:** Could you write a solution that works in logarithmic time complexity?",
          "output": "def trailing_zeroes(n: int) -> int:\n    count = 0\n    while n > 0:\n        n //= 5\n        count += n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST):\n\n*   `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n*   `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n*   `int next()` Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"BSTIterator \",  \"next \",  \"next \",  \"hasNext \",  \"next \",  \"hasNext \",  \"next \",  \"hasNext \",  \"next \",  \"hasNext \"\\]\n\\[\\[\\[7, 3, 15, null, null, 9, 20\\]\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, 3, 7, true, 9, true, 15, true, 20, false\\]\n\n**Explanation**\nBSTIterator bSTIterator = new BSTIterator(\\[7, 3, 15, null, null, 9, 20\\]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 105]`.\n*   `0 <= Node.val <= 106`\n*   At most `105` calls will be made to `hasNext`, and `next`.\n\n**Follow up:**\n\n*   Could you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?",
          "output": "class BSTIterator:\n\n    def __init__(self, root):\n        self.stack = []\n        self.push_left(root)\n\n    def next(self):\n        top = self.stack.pop()\n        self.push_left(top.right)\n        return top.val\n\n    def hasNext(self):\n        return len(self.stack) > 0\n\n    def push_left(self, node):\n        while node:\n            self.stack.append(node)\n            node = node.left\n"
     },
     {
          "instruction": "Write python code for this problem: The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess.\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\nTo reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step.\n\nReturn _the knight's minimum initial health so that he can rescue the princess_.\n\n**Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\n",
          "input": "**Example 1:**\n\n**Input:** dungeon = \\[\\[-2,-3,3\\],\\[-5,-10,1\\],\\[10,30,-5\\]\\]\n**Output:** 7\n**Explanation:** The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n\n**Example 2:**\n\n**Input:** dungeon = \\[\\[0\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == dungeon.length`\n*   `n == dungeon[i].length`\n*   `1 <= m, n <= 200`\n*   `-1000 <= dungeon[i][j] <= 1000`",
          "output": "def calculateMinimumHP(dungeon):\n    m, n = len(dungeon), len(dungeon[0])\n    dp = [[0] * n for _ in range(m)]\n\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if i == m - 1 and j == n - 1:\n                dp[i][j] = min(0, dungeon[i][j])\n            elif i == m - 1:\n                dp[i][j] = min(0, dp[i][j + 1] + dungeon[i][j])\n            elif j == n - 1:\n                dp[i][j] = min(0, dp[i + 1][j] + dungeon[i][j])\n            else:\n                dp[i][j] = min(0, max(dp[i + 1][j], dp[i][j + 1]) + dungeon[i][j])\n\n    return abs(dp[0][0]) + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.\n\nSince the result may be very large, so you need to return a string instead of an integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[10,2\\]\n**Output:**  \"210 \"\n\n**Example 2:**\n\n**Input:** nums = \\[3,30,34,5,9\\]\n**Output:**  \"9534330 \"\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 109`",
          "output": "from functools import cmp_to_key\n\ndef largestNumber(nums):\n    def comparator(a, b):\n        return -1 if a + b > b + a else int(a + b < b + a)\n\n    nums_as_str = list(map(str, nums))\n    nums_as_str.sort(key=cmp_to_key(comparator))\n    return '0' if nums_as_str[0] == \"0\" else \"\".join(nums_as_str)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a character array `s`, reverse the order of the **words**.\n\nA **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by a single space.\n\nYour code must solve the problem **in-place,** i.e. without allocating extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \\[\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"\\]\n**Output:** \\[\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"\\]\n\n**Example 2:**\n\n**Input:** s = \\[\"a\"\\]\n**Output:** \\[\"a\"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is an English letter (uppercase or lowercase), digit, or space `' '`.\n*   There is **at least one** word in `s`.\n*   `s` does not contain leading or trailing spaces.\n*   All the words in `s` are guaranteed to be separated by a single space.",
          "output": "def reverseWords(s: list) -> None:\n    def reverse(s, start, end):\n        while start < end:\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n\n    reverse(s, 0, len(s)-1)\n    start = 0\n    for i, char in enumerate(s + [' ']):\n        if char == ' ':\n            reverse(s, start, i - 1)\n            start = i + 1\n"
     },
     {
          "instruction": "Write python code for this problem: The **DNA sequence** is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.\n\n*   For example, `\"ACGAATTCCG \"` is a **DNA sequence**.\n\nWhen studying **DNA**, it is useful to identify repeated sequences within the DNA.\n\nGiven a string `s` that represents a **DNA sequence**, return all the **`10`\\-letter-long** sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n**Output:** \\[\"AAAAACCCCC\",\"CCCCCAAAAA\"\\]\n\n**Example 2:**\n\n**Input:** s = \"AAAAAAAAAAAAA\"\n**Output:** \\[\"AAAAAAAAAA\"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`.",
          "output": "from collections import defaultdict\n\ndef findRepeatedDnaSequences(s: str):\n    dna_counter = defaultdict(int)\n    result = []\n\n    for i in range(len(s) - 9):\n        sequence = s[i:i + 10]\n        dna_counter[sequence] += 1\n        if dna_counter[sequence] == 2:\n            result.append(sequence)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.\n\nFind the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 2, prices = \\[2,4,1\\]\n**Output:** 2\n**Explanation:** Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\n**Example 2:**\n\n**Input:** k = 2, prices = \\[3,2,6,5,0,3\\]\n**Output:** 7\n**Explanation:** Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\n**Constraints:**\n\n*   `1 <= k <= 100`\n*   `1 <= prices.length <= 1000`\n*   `0 <= prices[i] <= 1000`",
          "output": "def maxProfit(k, prices):\n    n = len(prices)\n    if k > n // 2:\n        return sum(max(prices[i] - prices[i - 1], 0) for i in range(1, n))\n\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n    return dp[k][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5,6,7\\], k = 3\n**Output:** \\[5,6,7,1,2,3,4\\]\n**Explanation:**\nrotate 1 steps to the right: \\[7,1,2,3,4,5,6\\]\nrotate 2 steps to the right: \\[6,7,1,2,3,4,5\\]\nrotate 3 steps to the right: \\[5,6,7,1,2,3,4\\]\n\n**Example 2:**\n\n**Input:** nums = \\[-1,-100,3,99\\], k = 2\n**Output:** \\[3,99,-1,-100\\]\n**Explanation:** \nrotate 1 steps to the right: \\[99,-1,-100,3\\]\nrotate 2 steps to the right: \\[3,99,-1,-100\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-231 <= nums[i] <= 231 - 1`\n*   `0 <= k <= 105`\n\n**Follow up:**\n\n*   Try to come up with as many solutions as you can. There are at least **three** different ways to solve this problem.\n*   Could you do it in-place with `O(1)` extra space?The easiest solution would use additional memory and that is perfectly fine. The actual trick comes when trying to solve this problem without using any additional memory. This means you need to use the original array somehow to move the elements around. Now, we can place each element in its original location and shift all the elements around it to adjust as that would be too costly and most likely will time out on larger input arrays. One line of thought is based on reversing the array (or parts of it) to obtain the desired result. Think about how reversal might potentially help us out by using an example. The other line of thought is a tad bit complicated but essentially it builds on the idea of placing each element in its original position while keeping track of the element originally in that position. Basically, at every step, we place an element in its rightful position and keep track of the element already there or the one being overwritten in an additional variable. We can't do this in one linear pass and the idea here is based on cyclic-dependencies between elements.",
          "output": "def rotate(nums, k):\n    n = len(nums)\n    k %= n\n    nums[:] = nums[-k:] + nums[:-k]\n"
     },
     {
          "instruction": "Write python code for this problem: Reverse bits of a given 32 bits unsigned integer.\n\n**Note:**\n\n*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 2** above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 00000010100101000001111010011100\n**Output:**    964176192 (00111001011110000010100101000000)\n**Explanation:** The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**.\n\n**Example 2:**\n\n**Input:** n = 11111111111111111111111111111101\n**Output:**   3221225471 (10111111111111111111111111111111)\n**Explanation:** The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**.\n\n**Constraints:**\n\n*   The input must be a **binary string** of length `32`\n\n**Follow up:** If this function is called many times, how would you optimize it?",
          "output": "def reverse_bits(n: int) -> int:\n    res = 0\n    for _ in range(32):\n        res <<= 1\n        res |= n & 1\n        n >>= 1\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).\n\n**Note:**\n\n*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 3**, the input represents the signed integer. `-3`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 00000000000000000000000000001011\n**Output:** 3\n**Explanation:** The input binary string **00000000000000000000000000001011** has a total of three '1' bits.\n\n**Example 2:**\n\n**Input:** n = 00000000000000000000000010000000\n**Output:** 1\n**Explanation:** The input binary string **00000000000000000000000010000000** has a total of one '1' bit.\n\n**Example 3:**\n\n**Input:** n = 11111111111111111111111111111101\n**Output:** 31\n**Explanation:** The input binary string **11111111111111111111111111111101** has a total of thirty one '1' bits.\n\n**Constraints:**\n\n*   The input must be a **binary string** of length `32`.\n\n**Follow up:** If this function is called many times, how would you optimize it?",
          "output": "def hamming_weight(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,1\\]\n**Output:** 4\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n**Example 2:**\n\n**Input:** nums = \\[2,7,9,3,1\\]\n**Output:** 12\n**Explanation:** Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 400`",
          "output": "def rob(nums):\n    prev1, prev2 = 0, 0\n    for num in nums:\n        prev1, prev2 = max(prev2 + num, prev1), prev1\n    return prev1\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return _the values of the nodes you can see ordered from top to bottom_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,null,5,null,4\\]\n**Output:** \\[1,3,4\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,3\\]\n**Output:** \\[1,3\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef rightSideView(root):\n    if not root:\n        return []\n\n    result = []\n    queue = [root]\n\n    while queue:\n        level_size = len(queue)\n\n        for i in range(level_size):\n            current = queue.pop(0)\n\n            if i == level_size - 1:\n                result.append(current.val)\n            \n            if current.left:\n                queue.append(current.left)\n            if current.right:\n                queue.append(current.right)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return _the number of islands_.\n\nAn **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\n  \\[ \"1 \", \"1 \", \"1 \", \"1 \", \"0 \"\\],\n  \\[ \"1 \", \"1 \", \"0 \", \"1 \", \"0 \"\\],\n  \\[ \"1 \", \"1 \", \"0 \", \"0 \", \"0 \"\\],\n  \\[ \"0 \", \"0 \", \"0 \", \"0 \", \"0 \"\\]\n\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** grid = \\[\n  \\[ \"1 \", \"1 \", \"0 \", \"0 \", \"0 \"\\],\n  \\[ \"1 \", \"1 \", \"0 \", \"0 \", \"0 \"\\],\n  \\[ \"0 \", \"0 \", \"1 \", \"0 \", \"0 \"\\],\n  \\[ \"0 \", \"0 \", \"0 \", \"1 \", \"1 \"\\]\n\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 300`\n*   `grid[i][j]` is `'0'` or `'1'`.",
          "output": "def dfs(grid, i, j):\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':\n        return\n\n    grid[i][j] = '0'\n    dfs(grid, i + 1, j)\n    dfs(grid, i - 1, j)\n    dfs(grid, i, j + 1)\n    dfs(grid, i, j - 1)\n\ndef numIslands(grid):\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1':\n                count += 1\n                dfs(grid, i, j)\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `left` and `right` that represent the range `[left, right]`, return _the bitwise AND of all numbers in this range, inclusive_.\n\n",
          "input": "**Example 1:**\n\n**Input:** left = 5, right = 7\n**Output:** 4\n\n**Example 2:**\n\n**Input:** left = 0, right = 0\n**Output:** 0\n\n**Example 3:**\n\n**Input:** left = 1, right = 2147483647\n**Output:** 0\n\n**Constraints:**\n\n*   `0 <= left <= right <= 231 - 1`",
          "output": "def range_bitwise_and(left: int, right: int) -> int:\n    shift = 0\n    while left != right:\n        left >>= 1\n        right >>= 1\n        shift += 1\n    return left << shift\n"
     },
     {
          "instruction": "Write python code for this problem: Write an algorithm to determine if a number `n` is happy.\n\nA **happy number** is a number defined by the following process:\n\n*   Starting with any positive integer, replace the number by the sum of the squares of its digits.\n*   Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1.\n*   Those numbers for which this process **ends in 1** are happy.\n\nReturn `true` _if_ `n` _is a happy number, and_ `false` _if not_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 19\n**Output:** true\n**Explanation:**\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`",
          "output": "def get_next(n):\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit * digit\n        n //= 10\n    return sum\n\ndef is_happy(n):\n    slow, fast = n, get_next(n)\n    while fast != 1 and slow != fast:\n        slow = get_next(slow)\n        fast = get_next(get_next(fast))\n    return fast == 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return _the new head_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,6,3,4,5,6\\], val = 6\n**Output:** \\[1,2,3,4,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[\\], val = 1\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** head = \\[7,7,7,7\\], val = 7\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 104]`.\n*   `1 <= Node.val <= 50`\n*   `0 <= val <= 50`",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef remove_elements(head, val):\n    sentinel = ListNode(0)\n    sentinel.next = head\n    prev, curr = sentinel, head\n\n    while curr:\n        if curr.val == val:\n            prev.next = curr.next\n        else:\n            prev = curr\n        curr = curr.next\n\n    return sentinel.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the number of prime numbers that are strictly less than_ `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10\n**Output:** 4\n**Explanation:** There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\n**Example 2:**\n\n**Input:** n = 0\n**Output:** 0\n\n**Example 3:**\n\n**Input:** n = 1\n**Output:** 0\n\n**Constraints:**\n\n*   `0 <= n <= 5 * 106`Let's start with a isPrime function. To determine if a number is prime, we need to check if it is not divisible by any number less than n. The runtime complexity of isPrime function would be O(n) and hence counting the total prime numbers up to n would be O(n2). Could we do better? As we know the number must not be divisible by any number > n / 2, we can immediately cut the total iterations half by dividing only up to n / 2. Could we still do better? Let's write down all of 12's factors:\n\r\n2 \u00d7 6 = 12\r\n3 \u00d7 4 = 12\r\n4 \u00d7 3 = 12\r\n6 \u00d7 2 = 12\r\n\nAs you can see, calculations of 4 \u00d7 3 and 6 \u00d7 2 are not necessary. Therefore, we only need to consider factors up to \u221an because, if n is divisible by some number p, then n = p \u00d7 q and since p \u2264 q, we could derive that p \u2264 \u221an.\nOur total runtime has now improved to O(n1.5), which is slightly better. Is there a faster approach?\n\r\npublic int countPrimes(int n) {\r\n   int count = 0;\r\n   for (int i = 1; i < n; i++) {\r\n      if (isPrime(i)) count++;\r\n   }\r\n   return count;\r\n}\r\n\r\nprivate boolean isPrime(int num) {\r\n   if (num <= 1) return false;\r\n   // Loop's ending condition is i * i <= num instead of i <= sqrt(num)\r\n   // to avoid repeatedly calling an expensive function sqrt().\r\n   for (int i = 2; i * i <= num; i++) {\r\n      if (num % i == 0) return false;\r\n   }\r\n   return true;\r\n} The Sieve of Eratosthenes is one of the most efficient ways to find all prime numbers up to n. But don't let that name scare you, I promise that the concept is surprisingly simple.\n\n\nSieve of Eratosthenes: algorithm steps for primes below 121. \"Sieve of Eratosthenes Animation\" by SKopp is licensed under CC BY 2.0.\n\nWe start off with a table of n numbers. Let's look at the first number, 2. We know all multiples of 2 must not be primes, so we mark them off as non-primes. Then we look at the next number, 3. Similarly, all multiples of 3 such as 3 \u00d7 2 = 6, 3 \u00d7 3 = 9, ... must not be primes, so we mark them off as well. Now we look at the next number, 4, which was already marked off. What does this tell you? Should you mark off all multiples of 4 as well? 4 is not a prime because it is divisible by 2, which means all multiples of 4 must also be divisible by 2 and were already marked off. So we can skip 4 immediately and go to the next number, 5. Now, all multiples of 5 such as 5 \u00d7 2 = 10, 5 \u00d7 3 = 15, 5 \u00d7 4 = 20, 5 \u00d7 5 = 25, ... can be marked off. There is a slight optimization here, we do not need to start from 5 \u00d7 2 = 10. Where should we start marking off? In fact, we can mark off multiples of 5 starting at 5 \u00d7 5 = 25, because 5 \u00d7 2 = 10 was already marked off by multiple of 2, similarly 5 \u00d7 3 = 15 was already marked off by multiple of 3. Therefore, if the current number is p, we can always mark off multiples of p starting at p2, then in increments of p: p2 + p, p2 + 2p, ... Now what should be the terminating loop condition? It is easy to say that the terminating loop condition is p < n, which is certainly correct but not efficient. Do you still remember Hint #3? Yes, the terminating loop condition can be p < \u221an, as all non-primes \u2265 \u221an must have already been marked off. When the loop terminates, all the numbers in the table that are non-marked are prime.\nThe Sieve of Eratosthenes uses an extra O(n) memory and its runtime complexity is O(n log log n). For the more mathematically inclined readers, you can read more about its algorithm complexity on Wikipedia.\n\r\npublic int countPrimes(int n) {\r\n   boolean[] isPrime = new boolean[n];\r\n   for (int i = 2; i < n; i++) {\r\n      isPrime[i] = true;\r\n   }\r\n   // Loop's ending condition is i * i < n instead of i < sqrt(n)\r\n   // to avoid repeatedly calling an expensive function sqrt().\r\n   for (int i = 2; i * i < n; i++) {\r\n      if (!isPrime[i]) continue;\r\n      for (int j = i * i; j < n; j += i) {\r\n         isPrime[j] = false;\r\n      }\r\n   }\r\n   int count = 0;\r\n   for (int i = 2; i < n; i++) {\r\n      if (isPrime[i]) count++;\r\n   }\r\n   return count;\r\n}",
          "output": "def countPrimes(n: int) -> int:\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, _determine if they are isomorphic_.\n\nTwo strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.\n\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"egg\", t = \"add\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"foo\", t = \"bar\"\n**Output:** false\n\n**Example 3:**\n\n**Input:** s = \"paper\", t = \"title\"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `t.length == s.length`\n*   `s` and `t` consist of any valid ascii character.",
          "output": "def is_isomorphic(s: str, t: str) -> bool:\n    map1, map2 = {}, {}\n    for char_s, char_t in zip(s, t):\n        if char_s not in map1:\n            map1[char_s] = char_t\n        if char_t not in map2:\n            map2[char_t] = char_s\n        if map1[char_s] != char_t or map2[char_t] != char_s:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list, reverse the list, and return _the reversed list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\]\n**Output:** \\[5,4,3,2,1\\]\n\n**Example 2:**\n\n**Input:** head = \\[1,2\\]\n**Output:** \\[2,1\\]\n\n**Example 3:**\n\n**Input:** head = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is the range `[0, 5000]`.\n*   `-5000 <= Node.val <= 5000`\n\n**Follow up:** A linked list can be reversed either iteratively or recursively. Could you implement both?",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current is not None:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev\n"
     },
     {
          "instruction": "Write python code for this problem: There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.\n\n*   For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** numCourses = 2, prerequisites = \\[\\[1,0\\]\\]\n**Output:** true\n**Explanation:** There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n\n**Example 2:**\n\n**Input:** numCourses = 2, prerequisites = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** false\n**Explanation:** There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n\n**Constraints:**\n\n*   `1 <= numCourses <= 2000`\n*   `0 <= prerequisites.length <= 5000`\n*   `prerequisites[i].length == 2`\n*   `0 <= ai, bi < numCourses`\n*   All the pairs prerequisites\\[i\\] are **unique**.This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses. Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort. Topological sort could also be done via BFS.",
          "output": "from collections import defaultdict, deque\n\ndef canFinish(numCourses, prerequisites):\n    adj = defaultdict(list)\n    inDegree = [0] * numCourses\n    \n    for a, b in prerequisites:\n        adj[b].append(a)\n        inDegree[a] += 1\n    \n    q = deque([i for i in range(numCourses) if inDegree[i]==0])\n    \n    while q:\n        currCourse = q.popleft()\n        numCourses -= 1\n        \n        for nextCourse in adj[currCourse]:\n            inDegree[nextCourse] -= 1\n            if inDegree[nextCourse] == 0:\n                q.append(nextCourse)\n    \n    return numCourses == 0\n"
     },
     {
          "instruction": "Write python code for this problem: A [**trie**](https://en.wikipedia.org/wiki/Trie) (pronounced as \"try \") or **prefix tree** is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n\n*   `Trie()` Initializes the trie object.\n*   `void insert(String word)` Inserts the string `word` into the trie.\n*   `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.\n*   `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Trie \",  \"insert \",  \"search \",  \"search \",  \"startsWith \",  \"insert \",  \"search \"\\]\n\\[\\[\\], \\[ \"apple \"\\], \\[ \"apple \"\\], \\[ \"app \"\\], \\[ \"app \"\\], \\[ \"app \"\\], \\[ \"app \"\\]\\]\n**Output**\n\\[null, null, true, false, true, null, true\\]\n\n**Explanation**\nTrie trie = new Trie();\ntrie.insert( \"apple \");\ntrie.search( \"apple \");   // return True\ntrie.search( \"app \");     // return False\ntrie.startsWith( \"app \"); // return True\ntrie.insert( \"app \");\ntrie.search( \"app \");     // return True\n\n**Constraints:**\n\n*   `1 <= word.length, prefix.length <= 2000`\n*   `word` and `prefix` consist only of lowercase English letters.\n*   At most `3 * 104` calls **in total** will be made to `insert`, `search`, and `startsWith`.",
          "output": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.is_end_of_word = True\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                return False\n            node = node.children[c]\n        return node.is_end_of_word\n\n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for c in prefix:\n            if c not in node.children:\n                return False\n            node = node.children[c]\n        return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of positive integers `nums` and a positive integer `target`, return _the **minimal length** of a_ _subarray_ _whose sum is greater than or equal to_ `target`. If there is no such subarray, return `0` instead.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = 7, nums = \\[2,3,1,2,4,3\\]\n**Output:** 2\n**Explanation:** The subarray \\[4,3\\] has the minimal length under the problem constraint.\n\n**Example 2:**\n\n**Input:** target = 4, nums = \\[1,4,4\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** target = 11, nums = \\[1,1,1,1,1,1,1,1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= target <= 109`\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 104`\n\n**Follow up:** If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`.",
          "output": "def minSubArrayLen(target: int, nums: List[int]) -> int:\n    left, cur_sum, min_len = 0, 0, float('inf')\n    for right in range(len(nums)):\n        cur_sum += nums[right]\n        while cur_sum >= target:\n            min_len = min(min_len, right - left + 1)\n            cur_sum -= nums[left]\n            left += 1\n    return min_len if min_len != float('inf') else 0\n"
     },
     {
          "instruction": "Write python code for this problem: There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.\n\n*   For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn _the ordering of courses you should take to finish all courses_. If there are many valid answers, return **any** of them. If it is impossible to finish all courses, return **an empty array**.\n\n",
          "input": "**Example 1:**\n\n**Input:** numCourses = 2, prerequisites = \\[\\[1,0\\]\\]\n**Output:** \\[0,1\\]\n**Explanation:** There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is \\[0,1\\].\n\n**Example 2:**\n\n**Input:** numCourses = 4, prerequisites = \\[\\[1,0\\],\\[2,0\\],\\[3,1\\],\\[3,2\\]\\]\n**Output:** \\[0,2,1,3\\]\n**Explanation:** There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is \\[0,1,2,3\\]. Another correct ordering is \\[0,2,1,3\\].\n\n**Example 3:**\n\n**Input:** numCourses = 1, prerequisites = \\[\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= numCourses <= 2000`\n*   `0 <= prerequisites.length <= numCourses * (numCourses - 1)`\n*   `prerequisites[i].length == 2`\n*   `0 <= ai, bi < numCourses`\n*   `ai != bi`\n*   All the pairs `[ai, bi]` are **distinct**.This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses. Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort. Topological sort could also be done via BFS.",
          "output": "from collections import deque\n\ndef findOrder(numCourses, prerequisites):\n    in_degree = [0] * numCourses\n    adj_list = [[] for _ in range(numCourses)]\n    \n    for p in prerequisites:\n        adj_list[p[1]].append(p[0])\n        in_degree[p[0]] += 1\n    \n    q = deque([i for i in range(numCourses) if in_degree[i] == 0])\n    order = []\n    \n    while q:\n        curr = q.popleft()\n        order.append(curr)\n        for next in adj_list[curr]:\n            in_degree[next] -= 1\n            if in_degree[next] == 0:\n                q.append(next)\n    \n    return order if len(order) == numCourses else []\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure that supports adding new words and finding if a string matches any previously added string.\n\nImplement the `WordDictionary` class:\n\n*   `WordDictionary()` Initializes the object.\n*   `void addWord(word)` Adds `word` to the data structure, it can be matched later.\n*   `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.\n\n**Example:**\n\n**Input**\n\\[ \"WordDictionary \", \"addWord \", \"addWord \", \"addWord \", \"search \", \"search \", \"search \", \"search \"\\]\n\\[\\[\\],\\[ \"bad \"\\],\\[ \"dad \"\\],\\[ \"mad \"\\],\\[ \"pad \"\\],\\[ \"bad \"\\],\\[ \".ad \"\\],\\[ \"b.. \"\\]\\]\n**Output**\n\\[null,null,null,null,false,true,true,true\\]\n\n**Explanation**\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord( \"bad \");\nwordDictionary.addWord( \"dad \");\nwordDictionary.addWord( \"mad \");\nwordDictionary.search( \"pad \"); // return False\nwordDictionary.search( \"bad \"); // return True\nwordDictionary.search( \".ad \"); // return True\nwordDictionary.search( \"b.. \"); // return True\n\n**Constraints:**\n\n*   `1 <= word.length <= 25`\n*   `word` in `addWord` consists of lowercase English letters.\n*   `word` in `search` consist of `'.'` or lowercase English letters.\n*   There will be at most `2` dots in `word` for `search` queries.\n*   At most `104` calls will be made to `addWord` and `search`",
          "input": ".You should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.",
          "output": "class TrieNode:\n    def __init__(self):\n        self.children = [None] * 26\n        self.is_word = False\n\nclass WordDictionary:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def addWord(self, word: str) -> None:\n        current = self.root\n        for c in word:\n            index = ord(c) - ord('a')\n            if current.children[index] is None:\n                current.children[index] = TrieNode()\n            current = current.children[index]\n        current.is_word = True\n\n    def search(self, word: str) -> bool:\n        return self._search_helper(self.root, word, 0)\n\n    def _search_helper(self, node: TrieNode, word: str, index: int) -> bool:\n        if index == len(word):\n            return node.is_word\n\n        if word[index] == '.':\n            for child_node in node.children:\n                if child_node is not None and self._search_helper(child_node, word, index + 1):\n                    return True\n            return False\n        else:\n            child_node = node.children[ord(word[index]) - ord('a')]\n            if child_node is None:\n                return False\n            return self._search_helper(child_node, word, index + 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` `board` of characters and a list of strings `words`, return _all words on the board_.\n\nEach word must be constructed from letters of sequentially adjacent cells, where **adjacent cells** are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \"o \", \"a \", \"a \", \"n \"\\],\\[ \"e \", \"t \", \"a \", \"e \"\\],\\[ \"i \", \"h \", \"k \", \"r \"\\],\\[ \"i \", \"f \", \"l \", \"v \"\\]\\], words = \\[ \"oath \", \"pea \", \"eat \", \"rain \"\\]\n**Output:** \\[ \"eat \", \"oath \"\\]\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \"a \", \"b \"\\],\\[ \"c \", \"d \"\\]\\], words = \\[ \"abcb \"\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `m == board.length`\n*   `n == board[i].length`\n*   `1 <= m, n <= 12`\n*   `board[i][j]` is a lowercase English letter.\n*   `1 <= words.length <= 3 * 104`\n*   `1 <= words[i].length <= 10`\n*   `words[i]` consists of lowercase English letters.\n*   All the strings of `words` are unique.You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier? If the current candidate does not exist in all words' prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: Implement Trie (Prefix Tree) first.",
          "output": "def findWords(board, words):\n    def dfs(board, word, index, i, j, visited):\n        if index == len(word):\n            return True\n        if i < 0 or j < 0 or i >= len(board) or j >= len(board[0]) or visited[i][j] or board[i][j] != word[index]:\n            return False\n        visited[i][j] = True\n        found = dfs(board, word, index + 1, i - 1, j, visited) or \\\n                dfs(board, word, index + 1, i + 1, j, visited) or \\\n                dfs(board, word, index + 1, i, j - 1, visited) or \\\n                dfs(board, word, index + 1, i, j + 1, visited)\n        visited[i][j] = False\n        return found\n\n    res = []\n    for word in words:\n        if any(dfs(board, word, 0, i, j, [[False] * len(board[0]) for _ in range(len(board))])\n               for i in range(len(board)) for j in range(len(board[0]))):\n            res.append(word)\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,2\\]\n**Output:** 3\n**Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,1\\]\n**Output:** 4\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 1000`Since House[1] and House[n] are adjacent, they cannot be robbed together. Therefore, the problem becomes to rob either House[1]-House[n-1] or House[2]-House[n], depending on which choice offers more money. Now the problem has degenerated to the House Robber, which is already been solved.",
          "output": "def rob(nums):\n    if len(nums) == 1:\n        return nums[0]\n    prev, curr = 0, 0\n    for i in range(len(nums) - 1):\n        temp = max(curr, prev + nums[i])\n        prev, curr = curr, temp\n    res = curr\n    prev, curr = 0, 0\n    for i in range(1, len(nums)):\n        temp = max(curr, prev + nums[i])\n        prev, curr = curr, temp\n    return max(res, curr)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.\n\nReturn _the shortest palindrome you can find by performing this transformation_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"aacecaaa\"\n**Output:** \"aaacecaaa\"\n\n**Example 2:**\n\n**Input:** s = \"abcd\"\n**Output:** \"dcbabcd\"\n\n**Constraints:**\n\n*   `0 <= s.length <= 5 * 104`\n*   `s` consists of lowercase English letters only.",
          "output": "def shortest_palindrome(s: str) -> str:\n    n = len(s)\n    rev_s = s[::-1]\n    \n    for i in range(n):\n        if s[:n - i] == rev_s[i:]:\n            return rev_s[:i] + s\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return _the_ `kth` _largest element in the array_.\n\nNote that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\nYou must solve it in `O(n)` time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,2,1,5,6,4\\], k = 2\n**Output:** 5\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,3,1,2,4,5,5,6\\], k = 4\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`",
          "output": "def findKthLargest(nums: List[int], k: int) -> int:\n    nums.sort(reverse=True)\n    return nums[k-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:\n\n*   Only numbers `1` through `9` are used.\n*   Each number is used **at most once**.\n\nReturn _a list of all possible valid combinations_. The list must not contain the same combination twice, and the combinations may be returned in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 3, n = 7\n**Output:** \\[\\[1,2,4\\]\\]\n**Explanation:**\n1 + 2 + 4 = 7\nThere are no other valid combinations.\n\n**Example 2:**\n\n**Input:** k = 3, n = 9\n**Output:** \\[\\[1,2,6\\],\\[1,3,5\\],\\[2,3,4\\]\\]\n**Explanation:**\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n\n**Example 3:**\n\n**Input:** k = 4, n = 1\n**Output:** \\[\\]\n**Explanation:** There are no valid combinations.\nUsing 4 different numbers in the range \\[1,9\\], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n\n**Constraints:**\n\n*   `2 <= k <= 9`\n*   `1 <= n <= 60`",
          "output": "def combinationSum3(k, n):\n    def helper(k, n, current, current_comb, result):\n        if k == 0 and n == 0:\n            result.append(list(current_comb))\n        elif k > 0 and n > 0:\n            for i in range(current + 1, 10):\n                current_comb.append(i)\n                helper(k - 1, n - i, i, current_comb, result)\n                current_comb.pop()\n\n    result = []\n    helper(k, n, 0, [], result)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1,3,3,4,3,2,4,2\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`",
          "output": "def containsDuplicate(nums):\n    return len(nums) != len(set(nums))\n"
     },
     {
          "instruction": "Write python code for this problem: A city's **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return _the **skyline** formed by these buildings collectively_.\n\nThe geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:\n\n*   `lefti` is the x coordinate of the left edge of the `ith` building.\n*   `righti` is the x coordinate of the right edge of the `ith` building.\n*   `heighti` is the height of the `ith` building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.\n\nThe **skyline** should be represented as a list of \"key points \" **sorted by their x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n\n**Note:** There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`\n\n",
          "input": "**Example 1:**\n\n**Input:** buildings = \\[\\[2,9,10\\],\\[3,7,15\\],\\[5,12,12\\],\\[15,20,10\\],\\[19,24,8\\]\\]\n**Output:** \\[\\[2,10\\],\\[3,15\\],\\[7,12\\],\\[12,0\\],\\[15,10\\],\\[20,8\\],\\[24,0\\]\\]\n**Explanation:**\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\n**Example 2:**\n\n**Input:** buildings = \\[\\[0,2,3\\],\\[2,5,3\\]\\]\n**Output:** \\[\\[0,3\\],\\[5,0\\]\\]\n\n**Constraints:**\n\n*   `1 <= buildings.length <= 104`\n*   `0 <= lefti < righti <= 231 - 1`\n*   `1 <= heighti <= 231 - 1`\n*   `buildings` is sorted by `lefti` in non-decreasing order.",
          "output": "from sortedcontainers import SortedList\n\ndef getSkyline(buildings):\n    points = []\n    for l, r, h in buildings:\n        points.append((l, -h))\n        points.append((r, h))\n    points.sort()\n    heights = SortedList([0])\n    prev = 0\n    skyline = []\n    for x, h in points:\n        if h < 0:\n            heights.add(-h)\n        else:\n            heights.remove(h)\n        cur = heights[-1]\n        if cur != prev:\n            skyline.append([x, cur])\n            prev = cur\n    return skyline\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return `true` _if there are two **distinct indices**_ `i` _and_ `j` _in the array such that_ `nums[i] == nums[j]` _and_ `abs(i - j) <= k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,1\\], k = 3\n**Output:** true\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,1,1\\], k = 1\n**Output:** true\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,1,2,3\\], k = 2\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`\n*   `0 <= k <= 105`",
          "output": "def containsNearbyDuplicate(nums, k):\n    value_index_map = {}\n    for i, num in enumerate(nums):\n        if num in value_index_map and i - value_index_map[num] <= k:\n            return True\n        value_index_map[num] = i\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`.\n\nFind a pair of indices `(i, j)` such that:\n\n*   `i != j`,\n*   `abs(i - j) <= indexDiff`.\n*   `abs(nums[i] - nums[j]) <= valueDiff`, and\n\nReturn `true` _if such pair exists or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,1\\], indexDiff = 3, valueDiff = 0\n**Output:** true\n**Explanation:** We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums\\[i\\] - nums\\[j\\]) <= valueDiff --> abs(1 - 1) <= 0\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,9,1,5,9\\], indexDiff = 2, valueDiff = 3\n**Output:** false\n**Explanation:** After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`\n*   `1 <= indexDiff <= nums.length`\n*   `0 <= valueDiff <= 109`Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements. Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again.",
          "output": "from sortedcontainers import SortedList\n\ndef containsNearbyAlmostDuplicate(nums, k, t):\n    window = SortedList()\n    for i in range(len(nums)):\n        if i > k:\n            window.remove(nums[i - k - 1])\n        pos = window.bisect_left(nums[i] - t)\n        if pos != len(window) and window[pos] - nums[i] <= t:\n            return True\n        window.add(nums[i])\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, _find the largest square containing only_ `1`'s _and return its area_.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[ \"1 \", \"0 \", \"1 \", \"0 \", \"0 \"\\],\\[ \"1 \", \"0 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"1 \", \"1 \", \"1 \", \"1 \"\\],\\[ \"1 \", \"0 \", \"0 \", \"1 \", \"0 \"\\]\\]\n**Output:** 4\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[ \"0 \", \"1 \"\\],\\[ \"1 \", \"0 \"\\]\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[ \"0 \"\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 300`\n*   `matrix[i][j]` is `'0'` or `'1'`.",
          "output": "def maximalSquare(matrix):\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    maxSize = 0\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                maxSize = max(maxSize, dp[i][j])\n\n    return maxSize * maxSize\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a **complete** binary tree, return the number of the nodes in the tree.\n\nAccording to **[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\nDesign an algorithm that runs in less than `O(n)` time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,6\\]\n**Output:** 6\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** 0\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 5 * 104]`.\n*   `0 <= Node.val <= 5 * 104`\n*   The tree is guaranteed to be **complete**.",
          "output": "class TreeNode:\n    def __init__(self, left=None, right=None):\n        self.left = left\n        self.right = right\n\ndef count_nodes(root):\n    if not root:\n        return 0\n    ld = rd = 0\n    l = r = root\n\n    while l:\n        l = l.left\n        ld += 1\n\n    while r:\n        r = r.right\n        rd += 1\n\n    if ld == rd:\n        return (1 << ld) - 1\n    return 1 + count_nodes(root.left) + count_nodes(root.right)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the coordinates of two **rectilinear** rectangles in a 2D plane, return _the total area covered by the two rectangles_.\n\nThe first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and its **top-right** corner `(ax2, ay2)`.\n\nThe second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and its **top-right** corner `(bx2, by2)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\n**Output:** 45\n\n**Example 2:**\n\n**Input:** ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\n**Output:** 16\n\n**Constraints:**\n\n*   `-104 <= ax1 <= ax2 <= 104`\n*   `-104 <= ay1 <= ay2 <= 104`\n*   `-104 <= bx1 <= bx2 <= 104`\n*   `-104 <= by1 <= by2 <= 104`",
          "output": "def total_area(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2):\n    area1 = (ax2 - ax1) * (ay2 - ay1)\n    area2 = (bx2 - bx1) * (by2 - by1)\n\n    overlap_width = min(ax2, bx2) - max(ax1, bx1)\n    overlap_height = min(ay2, by2) - max(ay1, by1)\n\n    overlap_area = max(overlap_width, 0) * max(overlap_height, 0)\n\n    return area1 + area2 - overlap_area\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return _the result of the evaluation_.\n\n**Note:** You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1 + 1 \"\n**Output:** 2\n\n**Example 2:**\n\n**Input:** s =  \" 2-1 + 2  \"\n**Output:** 3\n\n**Example 3:**\n\n**Input:** s =  \"(1+(4+5+2)-3)+(6+8) \"\n**Output:** 23\n\n**Constraints:**\n\n*   `1 <= s.length <= 3 * 105`\n*   `s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.\n*   `s` represents a valid expression.\n*   `'+'` is **not** used as a unary operation (i.e., `\"+1 \"` and `\"+(2 + 3) \"` is invalid).\n*   `'-'` could be used as a unary operation (i.e., `\"-1 \"` and `\"-(2 + 3) \"` is valid).\n*   There will be no two consecutive operators in the input.\n*   Every number and running calculation will fit in a signed 32-bit integer.",
          "output": "def calculate(s: str) -> int:\n    result = 0\n    sign = 1\n    num = 0\n    st = []\n    for c in s:\n        if c.isdigit():\n            num = num * 10 + int(c)\n        else:\n            result += sign * num\n            num = 0\n            if c == '+':\n                sign = 1\n            elif c == '-':\n                sign = -1\n            elif c == '(':\n                st.append(result)\n                st.append(sign)\n                result = 0\n                sign = 1\n            elif c == ')':\n                prev_sign = st.pop()\n                prev_result = st.pop()\n                result = prev_result + prev_sign * result\n    result += sign * num\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).\n\nImplement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element on the top of the stack and returns it.\n*   `int top()` Returns the element on the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:**\n\n*   You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyStack \",  \"push \",  \"push \",  \"top \",  \"pop \",  \"empty \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, 2, 2, false\\]\n\n**Explanation**\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n**Constraints:**\n\n*   `1 <= x <= 9`\n*   At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.\n*   All the calls to `pop` and `top` are valid.\n\n**Follow-up:** Can you implement the stack using only one queue?",
          "output": "from collections import deque\n\nclass MyStack:\n\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n\n    def push(self, x: int) -> None:\n        self.q2.append(x)\n        while self.q1:\n            self.q2.append(self.q1.popleft())\n        self.q1, self.q2 = self.q2, self.q1\n\n    def pop(self) -> int:\n        return self.q1.popleft()\n\n    def top(self) -> int:\n        return self.q1[0]\n\n    def empty(self) -> bool:\n        return not self.q1\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, invert the tree, and return _its root_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,7,1,3,6,9\\]\n**Output:** \\[4,7,2,9,6,3,1\\]\n\n**Example 2:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** \\[2,3,1\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef invert_tree(root):\n    if root is None:\n        return None\n    root.left, root.right = invert_tree(root.right), invert_tree(root.left)\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` which represents an expression, _evaluate this expression and return its value_.\n\nThe integer division should truncate toward zero.\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n**Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"3+2\\*2\"\n**Output:** 7\n\n**Example 2:**\n\n**Input:** s = \" 3/2 \"\n**Output:** 1\n\n**Example 3:**\n\n**Input:** s = \" 3+5 / 2 \"\n**Output:** 5\n\n**Constraints:**\n\n*   `1 <= s.length <= 3 * 105`\n*   `s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces.\n*   `s` represents **a valid expression**.\n*   All the integers in the expression are non-negative integers in the range `[0, 231 - 1]`.\n*   The answer is **guaranteed** to fit in a **32-bit integer**.",
          "output": "def calculate(s: str) -> int:\n    result, num, sign, stack = 0, 0, 1, []\n\n    for c in s:\n        if c.isdigit():\n            num = num * 10 + int(c)\n        elif c == '+':\n            result += sign * num\n            num = 0\n            sign = 1\n        elif c == '-':\n            result += sign * num\n            num = 0\n            sign = -1\n        elif c == '(':\n            stack.append(result)\n            stack.append(sign)\n            result = 0\n            sign = 1\n        elif c == ')':\n            result += sign * num\n            num = 0\n            result *= stack.pop()\n            result += stack.pop()\n    \n    if num:\n        result += sign * num\n        \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **sorted unique** integer array `nums`.\n\nA **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive).\n\nReturn _the **smallest sorted** list of ranges that **cover all the numbers in the array exactly**_. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.\n\nEach range `[a,b]` in the list should be output as:\n\n*   `\"a->b \"` if `a != b`\n*   `\"a \"` if `a == b`\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,2,4,5,7\\]\n**Output:** \\[ \"0->2 \", \"4->5 \", \"7 \"\\]\n**Explanation:** The ranges are:\n\\[0,2\\] -->  \"0->2 \"\n\\[4,5\\] -->  \"4->5 \"\n\\[7,7\\] -->  \"7 \"\n\n**Example 2:**\n\n**Input:** nums = \\[0,2,3,4,6,8,9\\]\n**Output:** \\[ \"0 \", \"2->4 \", \"6 \", \"8->9 \"\\]\n**Explanation:** The ranges are:\n\\[0,0\\] -->  \"0 \"\n\\[2,4\\] -->  \"2->4 \"\n\\[6,6\\] -->  \"6 \"\n\\[8,9\\] -->  \"8->9 \"\n\n**Constraints:**\n\n*   `0 <= nums.length <= 20`\n*   `-231 <= nums[i] <= 231 - 1`\n*   All the values of `nums` are **unique**.\n*   `nums` is sorted in ascending order.",
          "output": "from typing import List\n\ndef find_ranges(nums: List[int]) -> List[str]:\n    result = []\n    n = len(nums)\n    if n == 0: \n        return result\n\n    start = nums[0]\n    for i in range(1, n):\n        if nums[i] > nums[i-1] + 1:\n            if start == nums[i-1]:\n                result.append(str(start))\n            else:\n                result.append(str(start) + \"->\" + str(nums[i-1]))\n            start = nums[i]\n\n    if start == nums[n-1]:\n        result.append(str(start))\n    else:\n        result.append(str(start) + \"->\" + str(nums[n-1]))\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array of size `n`, find all elements that appear more than `\u230a n/3 \u230b` times.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,2,3\\]\n**Output:** \\[3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1\\]\n**Output:** \\[1\\]\n\n**Example 3:**\n\n**Input:** nums = \\[1,2\\]\n**Output:** \\[1,2\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `-109 <= nums[i] <= 109`\n\n**Follow up:** Could you solve the problem in linear time and in `O(1)` space?How many majority elements could it possibly have?\r\n\r\nDo you have a better hint? Suggest it!",
          "output": "def majorityElement(nums):\n    n = len(nums)\n    count = {}\n    result = []\n\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n        if count[num] > n / 3 and num not in result:\n            result.append(num)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**1-indexed**) of all the values of the nodes in the tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,1,4,null,2\\], k = 1\n**Output:** 1\n\n**Example 2:**\n\n**Input:** root = \\[5,3,6,2,4,null,null,1\\], k = 3\n**Output:** 3\n\n**Constraints:**\n\n*   The number of nodes in the tree is `n`.\n*   `1 <= k <= n <= 104`\n*   `0 <= Node.val <= 104`\n\n**Follow up:** If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?Try to utilize the property of a BST. Try in-order traversal. (Credits to @chan13) What if you could modify the BST node's structure? The optimal runtime complexity is O(height of BST).",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef kthSmallest(root, k):\n    stk = []\n    curr = root\n    \n    while True:\n        while curr:\n            stk.append(curr)\n            curr = curr.left\n        \n        curr = stk.pop()\n        \n        k -= 1\n        if k == 0:\n            return curr.val\n        \n        curr = curr.right\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _`true` if it is a power of two. Otherwise, return `false`_.\n\nAn integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** true\n**Explanation:** 20 = 1\n\n**Example 2:**\n\n**Input:** n = 16\n**Output:** true\n**Explanation:** 24 = 16\n\n**Example 3:**\n\n**Input:** n = 3\n**Output:** false\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`\n\n**Follow up:** Could you solve it without loops/recursion?",
          "output": "def is_power_of_two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n"
     },
     {
          "instruction": "Write python code for this problem: Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).\n\nImplement the `MyQueue` class:\n\n*   `void push(int x)` Pushes element x to the back of the queue.\n*   `int pop()` Removes the element from the front of the queue and returns it.\n*   `int peek()` Returns the element at the front of the queue.\n*   `boolean empty()` Returns `true` if the queue is empty, `false` otherwise.\n\n**Notes:**\n\n*   You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyQueue \",  \"push \",  \"push \",  \"peek \",  \"pop \",  \"empty \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, 1, 1, false\\]\n\n**Explanation**\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: \\[1\\]\nmyQueue.push(2); // queue is: \\[1, 2\\] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is \\[2\\]\nmyQueue.empty(); // return false\n\n**Constraints:**\n\n*   `1 <= x <= 9`\n*   At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.\n*   All the calls to `pop` and `peek` are valid.\n\n**Follow-up:** Can you implement the queue such that each operation is **[amortized](https://en.wikipedia.org/wiki/Amortized_analysis)** `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.",
          "output": "class MyQueue:\n\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n\n    def push(self, x: int) -> None:\n        self.stack1.append(x)\n\n    def pop(self) -> int:\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n\n    def peek(self) -> int:\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n\n    def empty(self) -> bool:\n        return not self.stack1 and not self.stack2\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, count _the total number of digit_ `1` _appearing in all non-negative integers less than or equal to_ `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 13\n**Output:** 6\n\n**Example 2:**\n\n**Input:** n = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `0 <= n <= 109`Beware of overflow.",
          "output": "def countDigitOne(n):\n    count = 0\n    i = 1\n    while i <= n:\n        divider = i * 10\n        count += (n // divider) * i + min(max(n % divider - i + 1, 0), i)\n        i *= 10\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list, return `true` _if it is a_ _palindrome_ _or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,2,1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** head = \\[1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 105]`.\n*   `0 <= Node.val <= 9`\n\n**Follow up:** Could you do it in `O(n)` time and `O(1)` space?",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef isPalindrome(head):\n    if not head or not head.next:\n        return True\n\n    fast, slow, prev = head, head, None\n    while fast and fast.next:\n        fast = fast.next.next\n        temp = slow.next\n        slow.next = prev\n        prev = slow\n        slow = temp\n\n    if fast:\n        slow = slow.next\n\n    while prev and prev.val == slow.val:\n        prev = prev.next\n        slow = slow.next\n\n    return prev == None\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\nAccording to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\"\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[6,2,8,0,4,7,9,null,null,3,5\\], p = 2, q = 8\n**Output:** 6\n**Explanation:** The LCA of nodes 2 and 8 is 6.\n\n**Example 2:**\n\n**Input:** root = \\[6,2,8,0,4,7,9,null,null,3,5\\], p = 2, q = 4\n**Output:** 2\n**Explanation:** The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\n**Example 3:**\n\n**Input:** root = \\[2,1\\], p = 2, q = 1\n**Output:** 2\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 105]`.\n*   `-109 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   `p != q`\n*   `p` and `q` will exist in the BST.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef lowest_common_ancestor(root, p, q):\n    if root is None or root == p or root == q:\n        return root\n\n    left = lowest_common_ancestor(root.left, p, q)\n    right = lowest_common_ancestor(root.right, p, q)\n\n    if left is not None and right is not None:\n        return root\n    else:\n        return left if left is not None else right\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\"\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 1\n**Output:** 3\n**Explanation:** The LCA of nodes 5 and 1 is 3.\n\n**Example 2:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 4\n**Output:** 5\n**Explanation:** The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n\n**Example 3:**\n\n**Input:** root = \\[1,2\\], p = 1, q = 2\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 105]`.\n*   `-109 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   `p != q`\n*   `p` and `q` will exist in the tree.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef lowestCommonAncestor(root, p, q):\n    if not root or root == p or root == q:\n        return root\n    left = lowestCommonAncestor(root.left, p, q)\n    right = lowestCommonAncestor(root.right, p, q)\n    return right if left is None else (left if right is None else root)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a singly-linked list `head` and we want to delete a node `node` in it.\n\nYou are given the node to be deleted `node`. You will **not be given access** to the first node of `head`.\n\nAll the values of the linked list are **unique**, and it is guaranteed that the given node `node` is not the last node in the linked list.\n\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\n*   The value of the given node should not exist in the linked list.\n*   The number of nodes in the linked list should decrease by one.\n*   All the values before `node` should be in the same order.\n*   All the values after `node` should be in the same order.\n\n**Custom testing:**\n\n*   For the input, you should provide the entire linked list `head` and the node to be given `node`. `node` should not be the last node of the list and should be an actual node in the list.\n*   We will build the linked list and pass the node to your function.\n*   The output will be the entire list after calling your function.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[4,5,1,9\\], node = 5\n**Output:** \\[4,1,9\\]\n**Explanation:** You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\n**Example 2:**\n\n**Input:** head = \\[4,5,1,9\\], node = 1\n**Output:** \\[4,5,9\\]\n**Explanation:** You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\n**Constraints:**\n\n*   The number of the nodes in the given list is in the range `[2, 1000]`.\n*   `-1000 <= Node.val <= 1000`\n*   The value of each node in the list is **unique**.\n*   The `node` to be deleted is **in the list** and is **not a tail** node.",
          "output": "def deleteNode(node):\n    next_node = node.next\n    node.val = next_node.val\n    node.next = next_node.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _an array_ `answer` _such that_ `answer[i]` _is equal to the product of all the elements of_ `nums` _except_ `nums[i]`.\n\nThe product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\nYou must write an algorithm that runs in `O(n)` time and without using the division operation.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** \\[24,12,8,6\\]\n\n**Example 2:**\n\n**Input:** nums = \\[-1,1,0,-3,3\\]\n**Output:** \\[0,0,9,0,0\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 105`\n*   `-30 <= nums[i] <= 30`\n*   The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\n**Follow up:** Can you solve the problem in `O(1)` extra space complexity? (The output array **does not** count as extra space for space complexity analysis.)",
          "output": "def productExceptSelf(nums):\n    n = len(nums)\n    answer = [1] * n\n    \n    left = 1\n    for i in range(n):\n        answer[i] *= left\n        left *= nums[i]\n    \n    right = 1\n    for i in range(n - 1, -1, -1):\n        answer[i] *= right\n        right *= nums[i]\n    \n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\nReturn _the max sliding window_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,-1,-3,5,3,6,7\\], k = 3\n**Output:** \\[3,3,5,5,6,7\\]\n**Explanation:** \nWindow position                Max\n---------------               -----\n\\[1  3  -1\\] -3  5  3  6  7       **3**\n 1 \\[3  -1  -3\\] 5  3  6  7       **3**\n 1  3 \\[-1  -3  5\\] 3  6  7      ** 5**\n 1  3  -1 \\[-3  5  3\\] 6  7       **5**\n 1  3  -1  -3 \\[5  3  6\\] 7       **6**\n 1  3  -1  -3  5 \\[3  6  7\\]      **7**\n\n**Example 2:**\n\n**Input:** nums = \\[1\\], k = 1\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`\n*   `1 <= k <= nums.length`How about using a data structure such as deque (double-ended queue)? The queue size need not be the same as the window\u2019s size. Remove redundant elements and the queue should store only elements that need to be considered.",
          "output": "from collections import deque\n\ndef maxSlidingWindow(nums, k):\n    dq = deque()\n    result = []\n\n    for i in range(len(nums)):\n        while dq and dq[0] < i - k + 1:\n            dq.popleft()\n\n        while dq and nums[dq[-1]] < nums[i]:\n            dq.pop()\n\n        dq.append(i)\n\n        if i >= k - 1:\n            result.append(nums[dq[0]])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Write an efficient algorithm that searches for a value `target` in an `m x n` integer matrix `matrix`. This matrix has the following properties:\n\n*   Integers in each row are sorted in ascending from left to right.\n*   Integers in each column are sorted in ascending from top to bottom.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,4,7,11,15\\],\\[2,5,8,12,19\\],\\[3,6,9,16,22\\],\\[10,13,14,17,24\\],\\[18,21,23,26,30\\]\\], target = 5\n**Output:** true\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,4,7,11,15\\],\\[2,5,8,12,19\\],\\[3,6,9,16,22\\],\\[10,13,14,17,24\\],\\[18,21,23,26,30\\]\\], target = 20\n**Output:** false\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= n, m <= 300`\n*   `-109 <= matrix[i][j] <= 109`\n*   All the integers in each row are **sorted** in ascending order.\n*   All the integers in each column are **sorted** in ascending order.\n*   `-109 <= target <= 109`",
          "output": "def searchMatrix(matrix, target):\n    row, col = len(matrix) - 1, 0\n    while row >= 0 and col < len(matrix[0]):\n        if matrix[row][col] > target:\n            row -= 1\n        elif matrix[row][col] < target:\n            col += 1\n        else:\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `expression` of numbers and operators, return _all possible results from computing all the different possible ways to group numbers and operators_. You may return the answer in **any order**.\n\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed `104`.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"2-1-1 \"\n**Output:** \\[0,2\\]\n**Explanation:**\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n\n**Example 2:**\n\n**Input:** expression =  \"2\\*3-4\\*5 \"\n**Output:** \\[-34,-14,-10,-10,10\\]\n**Explanation:**\n(2\\*(3-(4\\*5))) = -34 \n((2\\*3)-(4\\*5)) = -14 \n((2\\*(3-4))\\*5) = -10 \n(2\\*((3-4)\\*5)) = -10 \n(((2\\*3)-4)\\*5) = 10\n\n**Constraints:**\n\n*   `1 <= expression.length <= 20`\n*   `expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`.\n*   All the integer values in the input expression are in the range `[0, 99]`.",
          "output": "def diffWaysToCompute(input: str):\n    result = []\n    for i in range(len(input)):\n        c = input[i]\n        if c == '+' or c == '-' or c == '*':\n            left = diffWaysToCompute(input[:i])\n            right = diffWaysToCompute(input[i + 1:])\n            for l in left:\n                for r in right:\n                    if c == '+': result.append(l + r)\n                    elif c == '-': result.append(l - r)\n                    elif c == '*': result.append(l * r)\n    if not result:\n        result.append(int(input))\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, return `true` _if_ `t` _is an anagram of_ `s`_, and_ `false` _otherwise_.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"anagram\", t = \"nagaram\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"rat\", t = \"car\"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 5 * 104`\n*   `s` and `t` consist of lowercase English letters.\n\n**Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",
          "output": "def is_anagram(s, t):\n    if len(s) != len(t):\n        return False\n\n    counts = {}\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n\n    for c in t:\n        if c not in counts or counts[c] == 0:\n            return False\n        counts[c] -= 1\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return _the shortest distance between these two words in the list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** wordsDict = \\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\], word1 =  \"coding \", word2 =  \"practice \"\n**Output:** 3\n\n**Example 2:**\n\n**Input:** wordsDict = \\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\], word1 =  \"makes \", word2 =  \"coding \"\n**Output:** 1\n\n**Constraints:**\n\n*   `2 <= wordsDict.length <= 3 * 104`\n*   `1 <= wordsDict[i].length <= 10`\n*   `wordsDict[i]` consists of lowercase English letters.\n*   `word1` and `word2` are in `wordsDict`.\n*   `word1 != word2`",
          "output": "def shortestDistance(wordsDict, word1, word2):\n    idx1, idx2, minDistance = -1, -1, float('inf')\n    for i, word in enumerate(wordsDict):\n        if word == word1:\n            idx1 = i\n        if word == word2:\n            idx2 = i\n        if idx1 != -1 and idx2 != -1:\n            minDistance = min(minDistance, abs(idx1 - idx2))\n    return minDistance\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\n\nImplement the `WordDistance` class:\n\n*   `WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.\n*   `int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"WordDistance \",  \"shortest \",  \"shortest \"\\]\n\\[\\[\\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\]\\], \\[ \"coding \",  \"practice \"\\], \\[ \"makes \",  \"coding \"\\]\\]\n**Output**\n\\[null, 3, 1\\]\n\n**Explanation**\nWordDistance wordDistance = new WordDistance(\\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\]);\nwordDistance.shortest( \"coding \",  \"practice \"); // return 3\nwordDistance.shortest( \"makes \",  \"coding \");    // return 1\n\n**Constraints:**\n\n*   `1 <= wordsDict.length <= 3 * 104`\n*   `1 <= wordsDict[i].length <= 10`\n*   `wordsDict[i]` consists of lowercase English letters.\n*   `word1` and `word2` are in `wordsDict`.\n*   `word1 != word2`\n*   At most `5000` calls will be made to `shortest`.",
          "output": "class WordDistance:\n\n    def __init__(self, wordsDict):\n        self.word_indexes = {}\n        for i, word in enumerate(wordsDict):\n            if word not in self.word_indexes:\n                self.word_indexes[word] = []\n            self.word_indexes[word].append(i)\n\n    def shortest(self, word1, word2):\n        indexes1 = self.word_indexes[word1]\n        indexes2 = self.word_indexes[word2]\n        i, j, min_dist = 0, 0, float('inf')\n\n        while i < len(indexes1) and j < len(indexes2):\n            min_dist = min(min_dist, abs(indexes1[i] - indexes2[j]))\n            if indexes1[i] < indexes2[j]:\n                i += 1\n            else:\n                j += 1\n\n        return min_dist\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return _the shortest distance between the occurrence of these two words in the list_.\n\n**Note** that `word1` and `word2` may be the same. It is guaranteed that they represent **two individual words** in the list.\n\n",
          "input": "**Example 1:**\n\n**Input:** wordsDict = \\[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"\\], word1 = \"makes\", word2 = \"coding\"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** wordsDict = \\[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"\\], word1 = \"makes\", word2 = \"makes\"\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= wordsDict.length <= 105`\n*   `1 <= wordsDict[i].length <= 10`\n*   `wordsDict[i]` consists of lowercase English letters.\n*   `word1` and `word2` are in `wordsDict`.",
          "output": "def shortest_distance(words_dict, word1, word2):\n    index1, index2, min_distance = -1, -1, float('inf')\n    for i, word in enumerate(words_dict):\n        if word == word1:\n            index1 = i\n        if word == word2:\n            index2 = i\n        if index1 != -1 and(index2 != -1):\n            min_distance = min(min_distance, abs(index1 - index2))\n    return min_distance\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `num` which represents an integer, return `true` _if_ `num` _is a **strobogrammatic number**_.\n\nA **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"69 \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** num =  \"88 \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** num =  \"962 \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= num.length <= 50`\n*   `num` consists of only digits.\n*   `num` does not contain any leading zeros except for zero itself.",
          "output": "def isStrobogrammatic(num: str) -> bool:\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    left, right = 0, len(num) - 1\n    while left <= right:\n        if num[left] not in lookup or lookup[num[left]] != num[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return all the **strobogrammatic numbers** that are of length `n`. You may return the answer in **any order**.\n\nA **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** \\[\"11\",\"69\",\"88\",\"96\"\\]\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** \\[\"0\",\"1\",\"8\"\\]\n\n**Constraints:**\n\n*   `1 <= n <= 14`Try to use recursion and notice that it should recurse with n - 2 instead of n - 1.",
          "output": "def findStrobogrammatic(n):\n    def helper(n, m):\n        if n == 0:\n            return [\"\"]\n        if n == 1:\n            return [\"0\", \"1\", \"8\"]\n\n        list = helper(n - 2, m)\n        res = []\n\n        for s in list:\n            if n != m:\n                res.append(\"0\" + s + \"0\")\n\n            res.append(\"1\" + s + \"1\")\n            res.append(\"6\" + s + \"9\")\n            res.append(\"8\" + s + \"8\")\n            res.append(\"9\" + s + \"6\")\n\n        return res\n\n    return helper(n, n)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return _the number of **strobogrammatic numbers** in the range_ `[low, high]`.\n\nA **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).\n\n",
          "input": "**Example 1:**\n\n**Input:** low = \"50\", high = \"100\"\n**Output:** 3\n\n**Example 2:**\n\n**Input:** low = \"0\", high = \"0\"\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= low.length, high.length <= 15`\n*   `low` and `high` consist of only digits.\n*   `low <= high`\n*   `low` and `high` do not contain any leading zeros except for zero itself.",
          "output": "def strobogrammaticInRange(low, high):\n    count = 0\n    for len in range(len(low), len(high)+1):\n        count += 1 if low <= helper(len, len) <= high else 0\n    return count\n\ndef helper(m, n):\n    if m == 0:\n        return \"\"\n    if m == 1:\n        return \"0 1 8\"\n    if n == 0:\n        return \"11 69 88 96\"\n    res = \"\"\n    for a in helper(m-2, n).split():\n        if m != n:\n            res += a + \"0\" + a + \" \"\n        res += a + \"1\" + a + \" \"\n        res += a + \"6\" + a + \" \"\n        res += a + \"8\" + a + \" \"\n        res += a + \"9\" + a + \" \"\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: We can shift a string by shifting each of its letters to its successive letter.\n\n*   For example, `\"abc \"` can be shifted to be `\"bcd \"`.\n\nWe can keep shifting the string to form a sequence.\n\n*   For example, we can keep shifting `\"abc \"` to form the sequence: `\"abc \" -> \"bcd \" -> ... -> \"xyz \"`.\n\nGiven an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** strings = \\[\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"\\]\n**Output:** \\[\\[\"acef\"\\],\\[\"a\",\"z\"\\],\\[\"abc\",\"bcd\",\"xyz\"\\],\\[\"az\",\"ba\"\\]\\]\n\n**Example 2:**\n\n**Input:** strings = \\[\"a\"\\]\n**Output:** \\[\\[\"a\"\\]\\]\n\n**Constraints:**\n\n*   `1 <= strings.length <= 200`\n*   `1 <= strings[i].length <= 50`\n*   `strings[i]` consists of lowercase English letters.",
          "output": "from collections import defaultdict\n\ndef groupStrings(strings):\n    groups = defaultdict(list)\n\n    for s in strings:\n        key = tuple((ord(c) - ord(s[0])) % 26 for c in s)\n        groups[key].append(s)\n\n    return list(groups.values())\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the number of **uni-value**_ _subtrees_.\n\nA **uni-value subtree** means all nodes of the subtree have the same value.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,1,5,5,5,null,5\\]\n**Output:** 4\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** 0\n\n**Example 3:**\n\n**Input:** root = \\[5,5,5,5,5,null,5\\]\n**Output:** 6\n\n**Constraints:**\n\n*   The number of the node in the tree will be in the range `[0, 1000]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def countUnivalSubtrees(self, root: TreeNode) -> int:\n        count = 0\n\n        def helper(node):\n            nonlocal count\n            if node is None:\n                return True\n\n            left = helper(node.left)\n            right = helper(node.right)\n\n            if left and right:\n                if node.left and node.val != node.left.val:\n                    return False\n                if node.right and node.val != node.right.val:\n                    return False\n                count += 1\n                return True\n\n            return False\n\n        helper(root)\n        return count\n"
     },
     {
          "instruction": "Write python code for this problem: Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations.\n\nImplement the `Vector2D` class:\n\n*   `Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`.\n*   `next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.\n*   `hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Vector2D \",  \"next \",  \"next \",  \"next \",  \"hasNext \",  \"hasNext \",  \"next \",  \"hasNext \"\\]\n\\[\\[\\[\\[1, 2\\], \\[3\\], \\[4\\]\\]\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, 1, 2, 3, true, true, 4, false\\]\n\n**Explanation**\nVector2D vector2D = new Vector2D(\\[\\[1, 2\\], \\[3\\], \\[4\\]\\]);\nvector2D.next();    // return 1\nvector2D.next();    // return 2\nvector2D.next();    // return 3\nvector2D.hasNext(); // return True\nvector2D.hasNext(); // return True\nvector2D.next();    // return 4\nvector2D.hasNext(); // return False\n\n**Constraints:**\n\n*   `0 <= vec.length <= 200`\n*   `0 <= vec[i].length <= 500`\n*   `-500 <= vec[i][j] <= 500`\n*   At most `105` calls will be made to `next` and `hasNext`.\n\n**Follow up:** As an added challenge, try to code it using only [iterators in C++](http://www.cplusplus.com/reference/iterator/iterator/) or [iterators in Java](http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html).How many variables do you need to keep track? Two variables is all you need. Try with x and y. Beware of empty rows. It could be the first few rows. To write correct code, think about the invariant to maintain. What is it? The invariant is x and y must always point to a valid point in the 2d vector. Should you maintain your invariant ahead of time or right when you need it? Not sure? Think about how you would implement hasNext(). Which is more complex? Common logic in two different places should be refactored into a common method.",
          "output": "class Vector2D:\n    def __init__(self, vec):\n        self.vec = vec\n        self.row = 0\n        self.col = 0\n\n    def next(self):\n        val = self.vec[self.row][self.col]\n        self.col += 1\n        return val\n\n    def hasNext(self):\n        while self.row < len(self.vec):\n            if self.col < len(self.vec[self.row]):\n                return True\n            self.row += 1\n            self.col = 0\n        return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[0,30\\],\\[5,10\\],\\[15,20\\]\\]\n**Output:** false\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[7,10\\],\\[2,4\\]\\]\n**Output:** true\n\n**Constraints:**\n\n*   `0 <= intervals.length <= 104`\n*   `intervals[i].length == 2`\n*   `0 <= starti < endi <= 106`",
          "output": "def can_attend_meetings(intervals):\n    intervals.sort()\n\n    for i in range(1, len(intervals)):\n        if intervals[i][0] < intervals[i - 1][1]:\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of conference rooms required_.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[0,30\\],\\[5,10\\],\\[15,20\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[7,10\\],\\[2,4\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 104`\n*   `0 <= starti < endi <= 106`Think about how we would approach this problem in a very simplistic way. We will allocate rooms to meetings that occur earlier in the day v/s the ones that occur later on, right? If you've figured out that we have to sort the meetings by their start time, the next thing to think about is how do we do the allocation? There are two scenarios possible here for any meeting. Either there is no meeting room available and a new one has to be allocated, or a meeting room has freed up and this meeting can take place there. An important thing to note is that we don't really care which room gets freed up while allocating a room for the current meeting. As long as a room is free, our job is done. We already know the rooms we have allocated till now and we also know when are they due to get free because of the end times of the meetings going on in those rooms. We can simply check the room which is due to get vacated the earliest amongst all the allocated rooms. Following up on the previous hint, we can make use of a min-heap to store the end times of the meetings in various rooms. So, every time we want to check if any room is free or not, simply check the topmost element of the min heap as that would be the room that would get free the earliest out of all the other rooms currently occupied.\r\n\r\nIf the room we extracted from the top of the min heap isn't free, then no other room is. So, we can save time here and simply allocate a new room.",
          "output": "import heapq\n\ndef minMeetingRooms(intervals):\n    if not intervals:\n        return 0\n\n    intervals.sort(key=lambda x: x[0])\n\n    min_heap = [intervals[0][1]]\n    for start, end in intervals[1:]:\n        if start >= min_heap[0]:\n            heapq.heappop(min_heap)\n        heapq.heappush(min_heap, end)\n\n    return len(min_heap)\n"
     },
     {
          "instruction": "Write python code for this problem: Numbers can be regarded as the product of their factors.\n\n*   For example, `8 = 2 x 2 x 2 = 2 x 4`.\n\nGiven an integer `n`, return _all possible combinations of its factors_. You may return the answer in **any order**.\n\n**Note** that the factors should be in the range `[2, n - 1]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** \\[\\]\n\n**Example 2:**\n\n**Input:** n = 12\n**Output:** \\[\\[2,6\\],\\[3,4\\],\\[2,2,3\\]\\]\n\n**Example 3:**\n\n**Input:** n = 37\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= n <= 107`",
          "output": "def getFactors(n):\n    def helper(n, start, path, result):\n        if n == 1:\n            if len(path) > 1:\n                result.append(path[:])\n            return\n\n        for i in range(start, n + 1):\n            if n % i == 0:\n                path.append(i)\n                helper(n // i, i, path, result)\n                path.pop()\n\n    result = []\n    helper(n, 2, [], result)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of **unique** integers `preorder`, return `true` _if it is the correct preorder traversal sequence of a binary search tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** preorder = \\[5,2,1,3,6\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** preorder = \\[5,2,6,1,3\\]\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= preorder.length <= 104`\n*   `1 <= preorder[i] <= 104`\n*   All the elements of `preorder` are **unique**.\n\n**Follow up:** Could you do it using only constant space complexity?",
          "output": "def isValidPreorder(preorder: List[int]) -> bool:\n    stack = []\n    lower_bound = float('-inf')\n    for num in preorder:\n        if num < lower_bound:\n            return False\n        while stack and num > stack[-1]:\n            lower_bound = stack.pop()\n        stack.append(num)\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\n\nThe cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`.\n\n*   For example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on...\n\nReturn _the minimum cost to paint all houses_.\n\n",
          "input": "**Example 1:**\n\n**Input:** costs = \\[\\[17,2,17\\],\\[16,16,5\\],\\[14,3,19\\]\\]\n**Output:** 10\n**Explanation:** Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.\nMinimum cost: 2 + 5 + 3 = 10.\n\n**Example 2:**\n\n**Input:** costs = \\[\\[7,6,2\\]\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `costs.length == n`\n*   `costs[i].length == 3`\n*   `1 <= n <= 100`\n*   `1 <= costs[i][j] <= 20`",
          "output": "def minCost(costs: List[List[int]]) -> int:\n    if not costs:\n        return 0\n    for i in range(1, len(costs)):\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])\n    return min(costs[-1][0], costs[-1][1], costs[-1][2])\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _all root-to-leaf paths in **any order**_.\n\nA **leaf** is a node with no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,null,5\\]\n**Output:** \\[ \"1->2->5 \", \"1->3 \"\\]\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[ \"1 \"\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `-100 <= Node.val <= 100`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef binary_tree_paths(root: TreeNode):\n    if not root:\n        return []\n    if not root.left and not root.right:\n        return [str(root.val)]\n    paths = []\n    for path in binary_tree_paths(root.left):\n        paths.append(str(root.val) + \"->\" + path)\n    for path in binary_tree_paths(root.right):\n        paths.append(str(root.val) + \"->\" + path)\n    return paths\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 38\n**Output:** 2\n**Explanation:** The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.\n\n**Example 2:**\n\n**Input:** num = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `0 <= num <= 231 - 1`\n\n**Follow up:** Could you do it without any loop/recursion in `O(1)` runtime?A naive implementation of the above process is trivial. Could you come up with other methods? What are all the possible results? How do they occur, periodically or randomly? You may find this Wikipedia article useful.",
          "output": "def addDigits(num: int) -> int:\n    return 1 + (num - 1) % 9\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-2,0,1,3\\], target = 2\n**Output:** 2\n**Explanation:** Because there are two triplets which sums are less than 2:\n\\[-2,0,1\\]\n\\[-2,0,3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[\\], target = 0\n**Output:** 0\n\n**Example 3:**\n\n**Input:** nums = \\[0\\], target = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `0 <= n <= 3500`\n*   `-100 <= nums[i] <= 100`\n*   `-100 <= target <= 100`",
          "output": "def threeSumSmaller(nums, target):\n    count = 0\n    nums.sort()\n    for i in range(len(nums)):\n        j, k = i + 1, len(nums) - 1\n        while j < k:\n            if nums[i] + nums[j] + nums[k] < target:\n                count += k - j\n                j += 1\n            else:\n                k -= 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**.\n\nYou must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,1,3,2,5\\]\n**Output:** \\[3,5\\]\n**Explanation: ** \\[5, 3\\] is also a valid answer.\n\n**Example 2:**\n\n**Input:** nums = \\[-1,0\\]\n**Output:** \\[-1,0\\]\n\n**Example 3:**\n\n**Input:** nums = \\[0,1\\]\n**Output:** \\[1,0\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 3 * 104`\n*   `-231 <= nums[i] <= 231 - 1`\n*   Each integer in `nums` will appear twice, only two integers will appear once.",
          "output": "def singleNumber(nums):\n    xor_all = 0\n    for num in nums:\n        xor_all ^= num\n\n    bit = xor_all & -xor_all\n    n1 = 0\n    n2 = 0\n    for num in nums:\n        if num & bit:\n            n1 ^= num\n        else:\n            n2 ^= num\n\n    return n1, n2\n"
     },
     {
          "instruction": "Write python code for this problem: You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.\n\nReturn `true` _if the edges of the given graph make up a valid tree, and_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, edges = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[1,4\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** n = 5, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[1,3\\],\\[1,4\\]\\]\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= n <= 2000`\n*   `0 <= edges.length <= 5000`\n*   `edges[i].length == 2`\n*   `0 <= ai, bi < n`\n*   `ai != bi`\n*   There are no self-loops or repeated edges.Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], what should your return? Is this case a valid tree? According to the definition of tree on Wikipedia: \u201ca tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\u201d",
          "output": "from typing import List\n\ndef isTree(n: int, edges: List[List[int]]) -> bool:\n    neighbors = [[] for _ in range(n)]\n    for edge in edges:\n        neighbors[edge[0]].append(edge[1])\n        neighbors[edge[1]].append(edge[0])\n    visited = [False] * n\n    if hasCycle(neighbors, visited, -1, 0): return False\n    return all(visited)\n\ndef hasCycle(neighbors: List[List[int]], visited: List[bool], parent: int, node: int) -> bool:\n    visited[node] = True\n    for neighbor in neighbors[node]:\n        if (neighbor != parent and visited[neighbor]) or (not visited[neighbor] and hasCycle(neighbors, visited, node, neighbor)): return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.\n\nGiven an integer `n`, return `true` _if_ `n` _is an **ugly number**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6\n**Output:** true\n**Explanation:** 6 = 2 \\* 3\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** true\n**Explanation:** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\n**Example 3:**\n\n**Input:** n = 14\n**Output:** false\n**Explanation:** 14 is not ugly since it includes the prime factor 7.\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`",
          "output": "def is_ugly(n: int) -> bool:\n    if n <= 0:\n        return False\n    for factor in [2, 3, 5]:\n        while n % factor == 0:\n            n //= factor\n    return n == 1\n"
     },
     {
          "instruction": "Write python code for this problem: An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.\n\nGiven an integer `n`, return _the_ `nth` _**ugly number**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10\n**Output:** 12\n**Explanation:** \\[1, 2, 3, 4, 5, 6, 8, 9, 10, 12\\] is the sequence of the first 10 ugly numbers.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n**Explanation:** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\n**Constraints:**\n\n*   `1 <= n <= 1690`The naive approach is to call isUgly for every number until you reach the nth one. Most numbers are not ugly. Try to focus your effort on generating only the ugly ones. An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly number. The key is how to maintain the order of the ugly numbers. Try a similar approach of merging from three sorted lists: L1, L2, and L3. Assume you have Uk, the kth ugly number. Then Uk+1 must be Min(L1 * 2, L2 * 3, L3 * 5).",
          "output": "def nthUglyNumber(n: int) -> int:\n    ugly_numbers = [0] * n\n    ugly_numbers[0] = 1\n    i2, i3, i5 = 0, 0, 0\n\n    for i in range(1, n):\n        ugly_numbers[i] = min(ugly_numbers[i2] * 2, ugly_numbers[i3] * 3, ugly_numbers[i5] * 5)\n        if ugly_numbers[i] == ugly_numbers[i2] * 2: i2 += 1\n        if ugly_numbers[i] == ugly_numbers[i3] * 3: i3 += 1\n        if ugly_numbers[i] == ugly_numbers[i5] * 5: i5 += 1\n\n    return ugly_numbers[n - 1]\n\n"
     },
     {
          "instruction": "Write python code for this problem: There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\n\nThe cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.\n\n*   For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...\n\nReturn _the minimum cost to paint all houses_.\n\n",
          "input": "**Example 1:**\n\n**Input:** costs = \\[\\[1,5,3\\],\\[2,9,4\\]\\]\n**Output:** 5\n**Explanation:**\nPaint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \nOr paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.\n\n**Example 2:**\n\n**Input:** costs = \\[\\[1,3\\],\\[2,4\\]\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `costs.length == n`\n*   `costs[i].length == k`\n*   `1 <= n <= 100`\n*   `2 <= k <= 20`\n*   `1 <= costs[i][j] <= 20`\n\n**Follow up:** Could you solve it in `O(nk)` runtime?",
          "output": "def min_cost(costs: List[List[int]]) -> int:\n    if not costs:\n        return 0\n\n    n, k = len(costs), len(costs[0])\n\n    for i in range(1, n):\n        for j in range(k):\n            min_cost = float(\"inf\")\n            for l in range(k):\n                if l == j:\n                    continue\n                min_cost = min(min_cost, costs[i - 1][l])\n            costs[i][j] += min_cost\n\n    return min(costs[n - 1])\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return `true` _if a permutation of the string could form a_ _**palindrome**_ _and_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"code \"\n**Output:** false\n\n**Example 2:**\n\n**Input:** s =  \"aab \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** s =  \"carerac \"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 5000`\n*   `s` consists of only lowercase English letters.Consider the palindromes of odd vs even length. What difference do you notice? Count the frequency of each character. If each character occurs even number of times, then it must be a palindrome. How about character which occurs odd number of times?",
          "output": "def canPermutePalindrome(s: str) -> bool:\n    count = {}\n    for c in s:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    odd_count = 0\n    for value in count.values():\n        if value % 2:\n            odd_count += 1\n    return odd_count <= 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string s, return _all the palindromic permutations (without duplicates) of it_.\n\nYou may return the answer in **any order**. If `s` has no palindromic permutation, return an empty list.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"aabb\"\n**Output:** \\[\"abba\",\"baab\"\\]\n\n**Example 2:**\n\n**Input:** s = \"abc\"\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 16`\n*   `s` consists of only lowercase English letters.If a palindromic permutation exists, we just need to generate the first half of the string. To generate all distinct permutations of a (half of) string, use a similar approach from: Permutations II or Next Permutation.",
          "output": "from collections import Counter\nfrom itertools import permutations\n\ndef generatePalindromes(s):\n    result = []\n    char_count = Counter(s)\n\n    mid_char = \"\"\n    half_str = []\n    num_ocurrences = 0\n\n    for char, count in char_count.items():\n        if count % 2 == 1:\n            num_ocurrences += 1\n            mid_char = char\n        half_str.extend([char] * (count // 2))\n\n        if num_ocurrences > 1:\n            return result\n\n    for perm in set(permutations(half_str)):\n        palindrome = \"\".join(perm) + mid_char + \"\".join(reversed(perm))\n        result.append(palindrome)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return _the only number in the range that is missing from the array._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,0,1\\]\n**Output:** 2\n**Explanation:** n = 3 since there are 3 numbers, so all numbers are in the range \\[0,3\\]. 2 is the missing number in the range since it does not appear in nums.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1\\]\n**Output:** 2\n**Explanation:** n = 2 since there are 2 numbers, so all numbers are in the range \\[0,2\\]. 2 is the missing number in the range since it does not appear in nums.\n\n**Example 3:**\n\n**Input:** nums = \\[9,6,4,2,3,5,7,0,1\\]\n**Output:** 8\n**Explanation:** n = 9 since there are 9 numbers, so all numbers are in the range \\[0,9\\]. 8 is the missing number in the range since it does not appear in nums.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 104`\n*   `0 <= nums[i] <= n`\n*   All the numbers of `nums` are **unique**.\n\n**Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?",
          "output": "def missingNumber(nums):\n    n = len(nums)\n    expected_sum = (n * (n + 1)) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n"
     },
     {
          "instruction": "Write python code for this problem: There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.\n\nYou are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are **sorted lexicographically** by the rules of this new language.\n\nReturn _a string of the unique letters in the new alien language sorted in **lexicographically increasing order** by the new language's rules._ If there is no solution, return `\" \"`_._ If there are multiple solutions, return _**any of them**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"wrt \", \"wrf \", \"er \", \"ett \", \"rftt \"\\]\n**Output:**  \"wertf \"\n\n**Example 2:**\n\n**Input:** words = \\[ \"z \", \"x \"\\]\n**Output:**  \"zx \"\n\n**Example 3:**\n\n**Input:** words = \\[ \"z \", \"x \", \"z \"\\]\n**Output:**  \" \"\n**Explanation:** The order is invalid, so return ` \" \"`.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists of only lowercase English letters.",
          "output": "from collections import deque, defaultdict, Counter\n\ndef alienOrder(words):\n    graph = defaultdict(set)\n    in_degree = Counter({c: 0 for word in words for c in word})\n    \n    for word1, word2 in zip(words, words[1:]):\n        found = False\n        for c1, c2 in zip(word1, word2):\n            if c1 != c2:\n                if c2 not in graph[c1]:\n                    graph[c1].add(c2)\n                    in_degree[c2] += 1\n                found = True\n                break\n        if not found and len(word1) > len(word2):\n            return \"\"\n    \n    q = deque([c for c in in_degree if in_degree[c] == 0])\n    result = []\n    while q:\n        c = q.popleft()\n        result.append(c)\n        \n        for neigh in graph[c]:\n            in_degree[neigh] -= 1\n            if in_degree[neigh] == 0:\n                q.append(neigh)\n                 \n    if len(result) < len(in_degree):\n        return \"\"\n    \n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree and a `target` value, return _the value in the BST that is closest to the_ `target`. If there are multiple answers, print the smallest.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,5,1,3\\], target = 3.714286\n**Output:** 4\n\n**Example 2:**\n\n**Input:** root = \\[1\\], target = 4.428571\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `0 <= Node.val <= 109`\n*   `-109 <= target <= 109`",
          "output": "class Solution:\n    def closestValue(self, root: TreeNode, target: float) -> int:\n        closest = root.val\n        while root:\n            if abs(target - closest) > abs(target - root.val):\n                closest = root.val\n            root = root.left if target < root.val else root.right\n        return closest\n"
     },
     {
          "instruction": "Write python code for this problem: Design an algorithm to encode **a list of strings** to **a string**. The encoded string is then sent over the network and is decoded back to the original list of strings.\n\nMachine 1 (sender) has the function:\n\nstring encode(vector strs) {\n  // ... your code\n  return encoded\\_string;\n}\n\nMachine 2 (receiver) has the function:\n\nvector decode(string s) {\n  //... your code\n  return strs;\n}\n\nSo Machine 1 does:\n\nstring encoded\\_string = encode(strs);\n\nand Machine 2 does:\n\nvector strs2 = decode(encoded\\_string);\n\n`strs2` in Machine 2 should be the same as `strs` in Machine 1.\n\nImplement the `encode` and `decode` methods.\n\nYou are not allowed to solve the problem using any serialize methods (such as `eval`).\n\n",
          "input": "**Example 1:**\n\n**Input:** dummy\\_input = \\[ \"Hello \", \"World \"\\]\n**Output:** \\[ \"Hello \", \"World \"\\]\n**Explanation:**\nMachine 1:\nCodec encoder = new Codec();\nString msg = encoder.encode(strs);\nMachine 1 ---msg---> Machine 2\n\nMachine 2:\nCodec decoder = new Codec();\nString\\[\\] strs = decoder.decode(msg);\n\n**Example 2:**\n\n**Input:** dummy\\_input = \\[ \" \"\\]\n**Output:** \\[ \" \"\\]\n\n**Constraints:**\n\n*   `1 <= strs.length <= 200`\n*   `0 <= strs[i].length <= 200`\n*   `strs[i]` contains any possible characters out of `256` valid ASCII characters.\n\n**Follow up:** Could you write a generalized algorithm to work on any possible set of characters?",
          "output": "def encode(strs):\n    encoded_string = \"\"\n    for s in strs:\n        encoded_string += str(len(s)) + \"#\" + s\n    return encoded_string\n\ndef decode(s):\n    strs = []\n    i = 0\n    while i < len(s):\n        delimiter_pos = s.find('#', i)\n        length = int(s[i:delimiter_pos])\n        strs.append(s[delimiter_pos + 1:delimiter_pos + 1 + length])\n        i = delimiter_pos + 1 + length\n    return strs\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree, a `target` value, and an integer `k`, return _the_ `k` _values in the BST that are closest to the_ `target`. You may return the answer in **any order**.\n\nYou are **guaranteed** to have only one unique set of `k` values in the BST that are closest to the `target`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,5,1,3\\], target = 3.714286, k = 2\n**Output:** \\[4,3\\]\n\n**Example 2:**\n\n**Input:** root = \\[1\\], target = 0.000000, k = 1\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is `n`.\n*   `1 <= k <= n <= 104`.\n*   `0 <= Node.val <= 109`\n*   `-109 <= target <= 109`\n\n**Follow up:** Assume that the BST is balanced. Could you solve it in less than `O(n)` runtime (where `n = total nodes`)?Consider implement these two helper functions:\r\ngetPredecessor(N), which returns the next smaller node to N.\ngetSuccessor(N), which returns the next larger node to N. Try to assume that each node has a parent pointer, it makes the problem much easier. Without parent pointer we just need to keep track of the path from the root to the current node using a stack. You would need two stacks to track the path in finding predecessor and successor node separately.",
          "output": "from heapq import heappush, heappop\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef closestKValues(root, target, k):\n    values = []\n    max_heap = []\n\n    def inorder_traverse(node):\n        if not node:\n            return\n        inorder_traverse(node.left)\n        heappush(max_heap, (-abs(node.val - target), node.val))\n        if len(max_heap) > k:\n            heappop(max_heap)\n        inorder_traverse(node.right)\n\n    inorder_traverse(root)\n    while max_heap:\n        _, val = heappop(max_heap)\n        values.append(val)\n    return values\n"
     },
     {
          "instruction": "Write python code for this problem: Convert a non-negative integer `num` to its English words representation.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 123\n**Output:**  \"One Hundred Twenty Three \"\n\n**Example 2:**\n\n**Input:** num = 12345\n**Output:**  \"Twelve Thousand Three Hundred Forty Five \"\n\n**Example 3:**\n\n**Input:** num = 1234567\n**Output:**  \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven \"\n\n**Constraints:**\n\n*   `0 <= num <= 231 - 1`Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000. Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words. There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)",
          "output": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return \"Zero\"\n        LESS_THAN_20 = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        TENS = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        THOUSANDS = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n\n        def helper(num):\n            if num == 0:\n                return \"\"\n            elif num < 20:\n                return LESS_THAN_20[num] + \" \"\n            elif num < 100:\n                return TENS[num // 10] + \" \" + helper(num % 10)\n            else:\n                return LESS_THAN_20[num // 100] + \" Hundred \" + helper(num % 100)\n\n        result = \"\"\n        i = 0\n        while num > 0:\n            if num % 1000 != 0:\n                result = helper(num % 1000) + THOUSANDS[i] + \" \" + result\n            num //= 1000\n            i += 1\n        return result.strip()\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return _the researcher's h-index_.\n\nAccording to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.\n\n",
          "input": "**Example 1:**\n\n**Input:** citations = \\[3,0,6,1,5\\]\n**Output:** 3\n**Explanation:** \\[3,0,6,1,5\\] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n\n**Example 2:**\n\n**Input:** citations = \\[1,3,1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `n == citations.length`\n*   `1 <= n <= 5000`\n*   `0 <= citations[i] <= 1000`An easy approach is to sort the array first. What are the possible values of h-index? A faster approach is to use extra space.",
          "output": "def hIndex(citations: List[int]) -> int:\n    citations.sort(reverse=True)\n    h = 0\n    for i, citation in enumerate(citations):\n        if citation >= i + 1:\n            h = i + 1\n        else:\n            break\n    return h\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in **ascending order**, return _the researcher's h-index_.\n\nAccording to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.\n\nYou must write an algorithm that runs in logarithmic time.\n\n",
          "input": "**Example 1:**\n\n**Input:** citations = \\[0,1,3,5,6\\]\n**Output:** 3\n**Explanation:** \\[0,1,3,5,6\\] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n\n**Example 2:**\n\n**Input:** citations = \\[1,2,100\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `n == citations.length`\n*   `1 <= n <= 105`\n*   `0 <= citations[i] <= 1000`\n*   `citations` is sorted in **ascending order**.Expected runtime complexity is in O(log n) and the input is sorted.",
          "output": "def hIndex(citations: List[int]) -> int:\n    n = len(citations)\n    left, right = 0, n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if citations[mid] == n - mid:\n            return n - mid\n        elif citations[mid] < n - mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return n - left\n"
     },
     {
          "instruction": "Write python code for this problem: You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules:\n\n*   Every post must be painted **exactly one** color.\n*   There **cannot** be three or more **consecutive** posts with the same color.\n\nGiven the two integers `n` and `k`, return _the **number of ways** you can paint the fence_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 2\n**Output:** 6\n**Explanation:** All the possibilities are shown.\nNote that painting all the posts red or all the posts green is invalid because there cannot be three posts in a row with the same color.\n\n**Example 2:**\n\n**Input:** n = 1, k = 1\n**Output:** 1\n\n**Example 3:**\n\n**Input:** n = 7, k = 2\n**Output:** 42\n\n**Constraints:**\n\n*   `1 <= n <= 50`\n*   `1 <= k <= 105`\n*   The testcases are generated such that the answer is in the range `[0, 231 - 1]` for the given `n` and `k`.",
          "output": "def numWays(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    different = k * (k - 1)\n    for i in range(2, n):\n        temp = different\n        different = (same + different) * (k - 1)\n        same = temp\n    return same + different\n"
     },
     {
          "instruction": "Write python code for this problem: Suppose you are at a party with `n` people labeled from `0` to `n - 1` and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know the celebrity, but the celebrity does not know any of them.\n\nNow you want to find out who the celebrity is or verify that there is not one. You are only allowed to ask questions like: \"Hi, A. Do you know B? \" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).\n\nYou are given a helper function `bool knows(a, b)` that tells you whether `a` knows `b`. Implement a function `int findCelebrity(n)`. There will be exactly one celebrity if they are at the party.\n\nReturn _the celebrity's label if there is a celebrity at the party_. If there is no celebrity, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[1,1,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]\n**Output:** 1\n**Explanation:** There are three persons labeled with 0, 1 and 2. graph\\[i\\]\\[j\\] = 1 means person i knows person j, otherwise graph\\[i\\]\\[j\\] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.\n\n**Example 2:**\n\n**Input:** graph = \\[\\[1,0,1\\],\\[1,1,0\\],\\[0,1,1\\]\\]\n**Output:** -1\n**Explanation:** There is no celebrity.\n\n**Constraints:**\n\n*   `n == graph.length == graph[i].length`\n*   `2 <= n <= 100`\n*   `graph[i][j]` is `0` or `1`.\n*   `graph[i][i] == 1`\n\n**Follow up:** If the maximum number of allowed calls to the API `knows` is `3 * n`, could you find a solution without exceeding the maximum number of calls?The best hint for this problem can be provided by the following figure: Well, if you understood the gist of the above idea, you can extend it to find a candidate that can possibly be a celebrity. Why do we say a \"candidate\"? That is for you to think. This is clearly a greedy approach to find the answer. However, there is some information that would still remain to be verified without which we can't obtain an answer with certainty. To get that stake in the ground, we would need some more calls to the knows API.",
          "output": "def knows(a: int, b:int) -> bool:\n    pass\n\ndef findCelebrity(n: int) -> int:\n    candidate = 0\n    for i in range(1, n):\n        if knows(candidate, i):\n            candidate = i\n    \n    for i in range(n):\n        if i != candidate and (knows(candidate, i) or not knows(i, candidate)):\n            return -1\n    return candidate\n"
     },
     {
          "instruction": "Write python code for this problem: You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\n\nYou are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, bad = 4\n**Output:** 4\n**Explanation:**\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\n\n**Example 2:**\n\n**Input:** n = 1, bad = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= bad <= n <= 231 - 1`",
          "output": "def first_bad_version(n):\n    left, right = 1, n\n    while left < right:\n        mid = left + (right - left) // 2\n        if is_bad_version(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the least number of perfect square numbers that sum to_ `n`.\n\nA **perfect square** is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 12\n**Output:** 3\n**Explanation:** 12 = 4 + 4 + 4.\n\n**Example 2:**\n\n**Input:** n = 13\n**Output:** 2\n**Explanation:** 13 = 4 + 9.\n\n**Constraints:**\n\n*   `1 <= n <= 104`",
          "output": "def numSquares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n            \n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.\n\nYou may assume the input array always has a valid answer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,5,2,1,6,4\\]\n**Output:** \\[3,5,1,6,2,4\\]\n**Explanation:** \\[1,6,2,5,3,4\\] is also accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[6,6,5,6,3,8\\]\n**Output:** \\[6,6,5,6,3,8\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `0 <= nums[i] <= 104`\n*   It is guaranteed that there will be an answer for the given input `nums`.\n\n**Follow up:** Could you solve the problem in `O(n)` time complexity?",
          "output": "def wiggleSort(nums):\n    for i in range(1, len(nums)):\n        if (i % 2 == 0 and nums[i] > nums[i-1]) or (i % 2 == 1 and nums[i] < nums[i-1]):\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately.\n\nImplement the `ZigzagIterator` class:\n\n*   `ZigzagIterator(List v1, List v2)` initializes the object with the two vectors `v1` and `v2`.\n*   `boolean hasNext()` returns `true` if the iterator still has elements, and `false` otherwise.\n*   `int next()` returns the current element of the iterator and moves the iterator to the next element.\n\n",
          "input": "**Example 1:**\n\n**Input:** v1 = \\[1,2\\], v2 = \\[3,4,5,6\\]\n**Output:** \\[1,3,2,4,5,6\\]\n**Explanation:** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: \\[1,3,2,4,5,6\\].\n\n**Example 2:**\n\n**Input:** v1 = \\[1\\], v2 = \\[\\]\n**Output:** \\[1\\]\n\n**Example 3:**\n\n**Input:** v1 = \\[\\], v2 = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   `0 <= v1.length, v2.length <= 1000`\n*   `1 <= v1.length + v2.length <= 2000`\n*   `-231 <= v1[i], v2[i] <= 231 - 1`\n\n**Follow up:** What if you are given `k` vectors? How well can your code be extended to such cases?\n\n**Clarification for the follow-up question:**\n\nThe \"Zigzag \" order is not clearly defined and is ambiguous for `k > 2` cases. If \"Zigzag \" does not look right to you, replace \"Zigzag \" with \"Cyclic \".\n\n**Follow-up Example:**\n\n**Input:** v1 = \\[1,2,3\\], v2 = \\[4,5,6,7\\], v3 = \\[8,9\\]\n**Output:** \\[1,4,8,2,5,9,3,6,7\\]",
          "output": "class ZigzagIterator:\n\n    def __init__(self, v1: List[int], v2: List[int]):\n        self.v1, self.v2 = v1, v2\n        self.index1, self.index2 = 0, 0\n\n    def next(self) -> int:\n        if self.index1 < len(self.v1) and (self.index1 <= self.index2 or self.index2 == len(self.v2)):\n            result = self.v1[self.index1]\n            self.index1 += 1\n            return result\n        if self.index2 < len(self.v2) and (self.index2 < self.index1 or self.index1 == len(self.v1)):\n            result = self.v2[self.index2]\n            self.index2 += 1\n            return result\n\n    def hasNext(self) -> bool:\n        return self.index1 < len(self.v1) or self.index2 < len(self.v2)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `num` that contains only digits and an integer `target`, return _**all possibilities** to insert the binary operators_ `'+'`_,_ `'-'`_, and/or_ `'*'` _between the digits of_ `num` _so that the resultant expression evaluates to the_ `target` _value_.\n\nNote that operands in the returned expressions **should not** contain leading zeros.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"123 \", target = 6\n**Output:** \\[ \"1\\*2\\*3 \", \"1+2+3 \"\\]\n**Explanation:** Both  \"1\\*2\\*3 \" and  \"1+2+3 \" evaluate to 6.\n\n**Example 2:**\n\n**Input:** num =  \"232 \", target = 8\n**Output:** \\[ \"2\\*3+2 \", \"2+3\\*2 \"\\]\n**Explanation:** Both  \"2\\*3+2 \" and  \"2+3\\*2 \" evaluate to 8.\n\n**Example 3:**\n\n**Input:** num =  \"3456237490 \", target = 9191\n**Output:** \\[\\]\n**Explanation:** There are no expressions that can be created from  \"3456237490 \" to evaluate to 9191.\n\n**Constraints:**\n\n*   `1 <= num.length <= 10`\n*   `num` consists of only digits.\n*   `-231 <= target <= 231 - 1`Note that a number can contain multiple digits. Since the question asks us to find all of the valid expressions, we need a way to iterate over all of them. (Hint: Recursion!) We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion? Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n 1 + 2 = 3  \r\n1 + 2 - 4 --> 3 - 4 --> -1 \r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) \r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!) We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator.",
          "output": "from typing import List\n\ndef addOperators(num: str, target: int) -> List[str]:\n    def helper(num, target, pos, currVal, prevVal, currExpr):\n        if pos == len(num):\n            if currVal == target:\n                res.append(currExpr)\n            return\n\n        for i in range(pos, len(num)):\n            if i != pos and num[pos] == '0':\n                break\n\n            val = int(num[pos:i + 1])\n            if pos == 0:\n                helper(num, target, i + 1, val, val, currExpr + num[pos:i + 1])\n            else:\n                helper(num, target, i + 1, currVal + val, val, currExpr + \"+\" + num[pos:i + 1])\n                helper(num, target, i + 1, currVal - val, -val, currExpr + \"-\" + num[pos:i + 1])\n                helper(num, target, i + 1, currVal - prevVal + prevVal * val, prevVal * val, currExpr + \"*\" + num[pos:i + 1])\n\n    res = []\n    helper(num, target, 0, 0, 0, \"\")\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.\n\n**Note** that you must do this in-place without making a copy of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,0,3,12\\]\n**Output:** \\[1,3,12,0,0\\]\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-231 <= nums[i] <= 231 - 1`\n\n**Follow up:** Could you minimize the total number of operations done?In-place means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually. A two-pointer approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array.",
          "output": "def moveZeroes(nums):\n    index = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[index] = nums[i]\n            index += 1\n    for i in range(index, len(nums)):\n        nums[i] = 0\n"
     },
     {
          "instruction": "Write python code for this problem: Design an iterator that supports the `peek` operation on an existing iterator in addition to the `hasNext` and the `next` operations.\n\nImplement the `PeekingIterator` class:\n\n*   `PeekingIterator(Iterator nums)` Initializes the object with the given integer iterator `iterator`.\n*   `int next()` Returns the next element in the array and moves the pointer to the next element.\n*   `boolean hasNext()` Returns `true` if there are still elements in the array.\n*   `int peek()` Returns the next element in the array **without** moving the pointer.\n\n**Note:** Each language may have a different implementation of the constructor and `Iterator`, but they all support the `int next()` and `boolean hasNext()` functions.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"PeekingIterator \",  \"next \",  \"peek \",  \"next \",  \"next \",  \"hasNext \"\\]\n\\[\\[\\[1, 2, 3\\]\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, 1, 2, 2, 3, false\\]\n\n**Explanation**\nPeekingIterator peekingIterator = new PeekingIterator(\\[1, 2, 3\\]); // \\[**1**,2,3\\]\npeekingIterator.next();    // return 1, the pointer moves to the next element \\[1,**2**,3\\].\npeekingIterator.peek();    // return 2, the pointer does not move \\[1,**2**,3\\].\npeekingIterator.next();    // return 2, the pointer moves to the next element \\[1,2,**3**\\]\npeekingIterator.next();    // return 3, the pointer moves to the next element \\[1,2,3\\]\npeekingIterator.hasNext(); // return False\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`\n*   All the calls to `next` and `peek` are valid.\n*   At most `1000` calls will be made to `next`, `hasNext`, and `peek`.\n\n**Follow up:** How would you extend your design to be generic and work with all types, not just integer?Think of \"looking ahead\". You want to cache the next element. Is one variable sufficient? Why or why not? Test your design with call order of peek() before next() vs next() before peek(). For a clean implementation, check out Google's guava library source code.",
          "output": "class PeekingIterator:\n    def __init__(self, iterator):\n        self.iterator = iterator\n        self.next_val = next(self.iterator, None)\n\n    def peek(self):\n        return self.next_val\n\n    def next(self):\n        current_val = self.next_val\n        self.next_val = next(self.iterator, None)\n        return current_val\n\n    def hasNext(self):\n        return self.next_val is not None\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree and a node `p` in it, return _the in-order successor of that node in the BST_. If the given node has no in-order successor in the tree, return `null`.\n\nThe successor of a node `p` is the node with the smallest key greater than `p.val`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[2,1,3\\], p = 1\n**Output:** 2\n**Explanation:** 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type.\n\n**Example 2:**\n\n**Input:** root = \\[5,3,6,2,4,null,null,1\\], p = 6\n**Output:** null\n**Explanation:** There is no in-order successor of the current node, so the answer is `null`.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-105 <= Node.val <= 105`\n*   All Nodes will have unique values.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorder_successor(root: TreeNode, p: TreeNode) -> TreeNode:\n    successor = None\n    while root:\n        if root.val > p.val:\n            successor = root\n            root = root.left\n        else:\n            root = root.right\n    return successor\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` grid `rooms` initialized with these three possible values.\n\n*   `-1` A wall or an obstacle.\n*   `0` A gate.\n*   `INF` Infinity means an empty room. We use the value `231 - 1 = 2147483647` to represent `INF` as you may assume that the distance to a gate is less than `2147483647`.\n\nFill each empty room with the distance to _its nearest gate_. If it is impossible to reach a gate, it should be filled with `INF`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rooms = \\[\\[2147483647,-1,0,2147483647\\],\\[2147483647,2147483647,2147483647,-1\\],\\[2147483647,-1,2147483647,-1\\],\\[0,-1,2147483647,2147483647\\]\\]\n**Output:** \\[\\[3,-1,0,1\\],\\[2,2,1,-1\\],\\[1,-1,2,-1\\],\\[0,-1,3,4\\]\\]\n\n**Example 2:**\n\n**Input:** rooms = \\[\\[-1\\]\\]\n**Output:** \\[\\[-1\\]\\]\n\n**Constraints:**\n\n*   `m == rooms.length`\n*   `n == rooms[i].length`\n*   `1 <= m, n <= 250`\n*   `rooms[i][j]` is `-1`, `0`, or `231 - 1`.",
          "output": "from collections import deque\n\ndef wallsAndGates(rooms):\n    m, n = len(rooms), len(rooms[0])\n    q = deque()\n    INF = 2147483647\n\n    for i in range(m):\n        for j in range(n):\n            if rooms[i][j] == 0:\n                q.append((i, j))\n\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    while q:\n        i, j = q.popleft()\n\n        for d in directions:\n            ni, nj = i + d[0], j + d[1]\n\n            if 0 <= ni < m and 0 <= nj < n and rooms[ni][nj] == INF:\n                rooms[ni][nj] = rooms[i][j] + 1\n                q.append((ni, nj))\n\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.\n\nThere is only **one repeated number** in `nums`, return _this repeated number_.\n\nYou must solve the problem **without** modifying the array `nums` and uses only constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,4,2,2\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** nums = \\[3,1,3,4,2\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `nums.length == n + 1`\n*   `1 <= nums[i] <= n`\n*   All the integers in `nums` appear only **once** except for **precisely one integer** which appears **two or more** times.\n\n**Follow up:**\n\n*   How can we prove that at least one duplicate number must exist in `nums`?\n*   Can you solve the problem in linear runtime complexity?",
          "output": "def findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[0]\n\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n\n    slow = nums[0]\n\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n\n    return slow\n"
     },
     {
          "instruction": "Write python code for this problem: The **abbreviation** of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an **abbreviation** of itself.\n\nFor example:\n\n*   `dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`.\n*   `internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`.\n*   `it --> it` because any word with only two characters is an **abbreviation** of itself.\n\nImplement the `ValidWordAbbr` class:\n\n*   `ValidWordAbbr(String[] dictionary)` Initializes the object with a `dictionary` of words.\n*   `boolean isUnique(string word)` Returns `true` if **either** of the following conditions are met (otherwise returns `false`):\n    *   There is no word in `dictionary` whose **abbreviation** is equal to `word`'s **abbreviation**.\n    *   For any word in `dictionary` whose **abbreviation** is equal to `word`'s **abbreviation**, that word and `word` are **the same**.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"ValidWordAbbr \",  \"isUnique \",  \"isUnique \",  \"isUnique \",  \"isUnique \",  \"isUnique \"\\]\n\\[\\[\\[ \"deer \",  \"door \",  \"cake \",  \"card \"\\]\\], \\[ \"dear \"\\], \\[ \"cart \"\\], \\[ \"cane \"\\], \\[ \"make \"\\], \\[ \"cake \"\\]\\]\n**Output**\n\\[null, false, true, false, true, true\\]\n\n**Explanation**\nValidWordAbbr validWordAbbr = new ValidWordAbbr(\\[ \"deer \",  \"door \",  \"cake \",  \"card \"\\]);\nvalidWordAbbr.isUnique( \"dear \"); // return false, dictionary word  \"deer \" and word  \"dear \" have the same abbreviation  \"d2r \" but are not the same.\nvalidWordAbbr.isUnique( \"cart \"); // return true, no words in the dictionary have the abbreviation  \"c2t \".\nvalidWordAbbr.isUnique( \"cane \"); // return false, dictionary word  \"cake \" and word  \"cane \" have the same abbreviation   \"c2e \" but are not the same.\nvalidWordAbbr.isUnique( \"make \"); // return true, no words in the dictionary have the abbreviation  \"m2e \".\nvalidWordAbbr.isUnique( \"cake \"); // return true, because  \"cake \" is already in the dictionary and no other word in the dictionary has  \"c2e \" abbreviation.\n\n**Constraints:**\n\n*   `1 <= dictionary.length <= 3 * 104`\n*   `1 <= dictionary[i].length <= 20`\n*   `dictionary[i]` consists of lowercase English letters.\n*   `1 <= word.length <= 20`\n*   `word` consists of lowercase English letters.\n*   At most `5000` calls will be made to `isUnique`.",
          "output": "class ValidWordAbbr:\n\n    def __init__(self, dictionary):\n        self.word_map = {}\n        for word in dictionary:\n            abbr = self.get_abbreviation(word)\n            if abbr not in self.word_map:\n                self.word_map[abbr] = {word}\n            else:\n                self.word_map[abbr].add(word)\n\n    def isUnique(self, word):\n        abbr = self.get_abbreviation(word)\n        abbr_group = self.word_map.get(abbr, set())\n        return len(abbr_group) == 0 or (len(abbr_group) == 1 and word in abbr_group)\n\n    def get_abbreviation(self, word):\n        n = len(word)\n        return word if n <= 2 else word[0] + str(n - 2) + word[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: According to [Wikipedia's article](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life): \"The **Game of Life**, also known simply as **Life**, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. \"\n\nThe board is made up of an `m x n` grid of cells, where each cell has an initial state: **live** (represented by a `1`) or **dead** (represented by a `0`). Each cell interacts with its [eight neighbors](https://en.wikipedia.org/wiki/Moore_neighborhood) (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n\n1.  Any live cell with fewer than two live neighbors dies as if caused by under-population.\n2.  Any live cell with two or three live neighbors lives on to the next generation.\n3.  Any live cell with more than three live neighbors dies, as if by over-population.\n4.  Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return _the next state_.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[0,1,0\\],\\[0,0,1\\],\\[1,1,1\\],\\[0,0,0\\]\\]\n**Output:** \\[\\[0,0,0\\],\\[1,0,1\\],\\[0,1,1\\],\\[0,1,0\\]\\]\n\n**Example 2:**\n\n**Input:** board = \\[\\[1,1\\],\\[1,0\\]\\]\n**Output:** \\[\\[1,1\\],\\[1,1\\]\\]\n\n**Constraints:**\n\n*   `m == board.length`\n*   `n == board[i].length`\n*   `1 <= m, n <= 25`\n*   `board[i][j]` is `0` or `1`.\n\n**Follow up:**\n\n*   Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\n*   In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?",
          "output": "def gameOfLife(board):\n    m, n = len(board), len(board[0])\n    result = [[0] * n for _ in range(m)]\n    dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\n    \n    for i in range(m):\n        for j in range(n):\n            liveNeighbors = 0\n            \n            for dir in dirs:\n                newRow = i + dir[0]\n                newCol = j + dir[1]\n                \n                if newRow >= 0 and newRow < m and newCol >= 0 and newCol < n and board[newRow][newCol] == 1:\n                    liveNeighbors += 1\n            \n            if board[i][j] == 1 and (liveNeighbors == 2 or liveNeighbors == 3):\n                result[i][j] = 1\n            elif board[i][j] == 0 and liveNeighbors == 3:\n                result[i][j] = 1\n                \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `pattern` and a string `s`, find if `s` follows the same pattern.\n\nHere **follow** means a full match, such that there is a bijection between a letter in `pattern` and a **non-empty** word in `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** pattern =  \"abba \", s =  \"dog cat cat dog \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** pattern =  \"abba \", s =  \"dog cat cat fish \"\n**Output:** false\n\n**Example 3:**\n\n**Input:** pattern =  \"aaaa \", s =  \"dog cat cat dog \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= pattern.length <= 300`\n*   `pattern` contains only lower-case English letters.\n*   `1 <= s.length <= 3000`\n*   `s` contains only lowercase English letters and spaces `' '`.\n*   `s` **does not contain** any leading or trailing spaces.\n*   All the words in `s` are separated by a **single space**.",
          "output": "def word_pattern(pattern, s):\n    words = s.split()\n    if len(pattern) != len(words):\n        return False\n\n    char_map, word_map = {}, {}\n    for c, word in zip(pattern, words):\n        if c not in char_map and word not in word_map:\n            char_map[c] = word\n            word_map[word] = c\n        else:\n            if char_map.get(c) != word or word_map.get(word) != c:\n                return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `pattern` and a string `s`, return `true` _if_ `s` _**matches** the_ `pattern`_._\n\nA string `s` **matches** a `pattern` if there is some **bijective mapping** of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A **bijective mapping** means that no two characters map to the same string, and no character maps to two different strings.\n\n",
          "input": "**Example 1:**\n\n**Input:** pattern =  \"abab \", s =  \"redblueredblue \"\n**Output:** true\n**Explanation:** One possible mapping is as follows:\n'a' ->  \"red \"\n'b' ->  \"blue \"\n\n**Example 2:**\n\n**Input:** pattern =  \"aaaa \", s =  \"asdasdasdasd \"\n**Output:** true\n**Explanation:** One possible mapping is as follows:\n'a' ->  \"asd \"\n\n**Example 3:**\n\n**Input:** pattern =  \"aabb \", s =  \"xyzabcxzyabc \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= pattern.length, s.length <= 20`\n*   `pattern` and `s` consist of only lowercase English letters.",
          "output": "def wordPatternMatch(pattern: str, s: str) -> bool:\n    def backtrack(p_index, s_index, pattern_map, words):\n        if p_index == len(pattern) and s_index == len(s):\n            return True\n        if p_index == len(pattern) or s_index == len(s):\n            return False\n\n        p = pattern[p_index]\n        if p in pattern_map:\n            word = pattern_map[p]\n            if not s.startswith(word, s_index):\n                return False\n            return backtrack(p_index + 1, s_index + len(word), pattern_map, words)\n        else:\n            for length in range(1, len(s) - s_index + 1):\n                word = s[s_index : s_index + length]\n                if word in words:\n                    continue\n                pattern_map[p] = word\n                words.add(word)\n                if backtrack(p_index + 1, s_index + length, pattern_map, words):\n                    return True\n                pattern_map.pop(p)\n                words.remove(word)\n        return False\n\n    return backtrack(0, 0, {}, set())\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing the following Nim Game with your friend:\n\n*   Initially, there is a heap of stones on the table.\n*   You and your friend will alternate taking turns, and **you go first**.\n*   On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n*   The one who removes the last stone is the winner.\n\nGiven `n`, the number of stones in the heap, return `true` _if you can win the game assuming both you and your friend play optimally, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:** false\n**Explanation:** These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** true\n\n**Example 3:**\n\n**Input:** n = 2\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?",
          "output": "def canWinNim(n):\n    return n % 4 != 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a Flip Game with your friend.\n\nYou are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++ \"` into `\"-- \"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.\n\nReturn all possible states of the string `currentState` after **one valid move**. You may return the answer in **any order**. If there is no valid move, return an empty list `[]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** currentState =  \"++++ \"\n**Output:** \\[ \"--++ \", \"+--+ \", \"++-- \"\\]\n\n**Example 2:**\n\n**Input:** currentState =  \"+ \"\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= currentState.length <= 500`\n*   `currentState[i]` is either `'+'` or `'-'`.",
          "output": "def generate_possible_next_moves(current_state):\n    result = []\n    for i in range(1, len(current_state)):\n        if current_state[i] == '+' and current_state[i - 1] == '+':\n            result.append(current_state[:i - 1] + '--' + current_state[i + 1:])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a Flip Game with your friend.\n\nYou are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++ \"` into `\"-- \"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.\n\nReturn `true` _if the starting player can **guarantee a win**_, and `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** currentState =  \"++++ \"\n**Output:** true\n**Explanation:** The starting player can guarantee a win by flipping the middle  \"++ \" to become  \"+--+ \".\n\n**Example 2:**\n\n**Input:** currentState =  \"+ \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= currentState.length <= 60`\n*   `currentState[i]` is either `'+'` or `'-'`.\n\n**Follow up:** Derive your algorithm's runtime complexity.",
          "output": "def canWin(currentState: str) -> bool:\n    for i in range(len(currentState) - 1):\n        if currentState[i] == '+' and currentState[i + 1] == '+':\n            temp = currentState[:i] + \"--\" + currentState[i + 2:]\n            if not canWin(temp):\n                return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\n*   For example, for `arr = [2,3,4]`, the median is `3`.\n*   For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.\n\nImplement the MedianFinder class:\n\n*   `MedianFinder()` initializes the `MedianFinder` object.\n*   `void addNum(int num)` adds the integer `num` from the data stream to the data structure.\n*   `double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MedianFinder \",  \"addNum \",  \"addNum \",  \"findMedian \",  \"addNum \",  \"findMedian \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[\\], \\[3\\], \\[\\]\\]\n**Output**\n\\[null, null, null, 1.5, null, 2.0\\]\n\n**Explanation**\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = \\[1\\]\nmedianFinder.addNum(2);    // arr = \\[1, 2\\]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr\\[1, 2, 3\\]\nmedianFinder.findMedian(); // return 2.0\n\n**Constraints:**\n\n*   `-105 <= num <= 105`\n*   There will be at least one element in the data structure before calling `findMedian`.\n*   At most `5 * 104` calls will be made to `addNum` and `findMedian`.\n\n**Follow up:**\n\n*   If all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?\n*   If `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?",
          "output": "import heapq\n\nclass MedianFinder:\n    def __init__(self):\n        self.left = []  # max heap\n        self.right = []  # min heap\n\n    def addNum(self, num: int) -> None:\n        if not self.left or num <= -self.left[0]:\n            heapq.heappush(self.left, -num)\n        else:\n            heapq.heappush(self.right, num)\n        \n        if len(self.left) < len(self.right):\n            heapq.heappush(self.left, -heapq.heappop(self.right))\n        elif len(self.left) > len(self.right) + 1:\n            heapq.heappush(self.right, -heapq.heappop(self.left))\n\n    def findMedian(self) -> float:\n        if len(self.left) == len(self.right):\n            return (-self.left[0] + self.right[0]) / 2\n        else:\n            return -self.left[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` binary grid `grid` where each `1` marks the home of one friend, return _the minimal **total travel distance**_.\n\nThe **total travel distance** is the sum of the distances between the houses of the friends and the meeting point.\n\nThe distance is calculated using [Manhattan Distance](http://en.wikipedia.org/wiki/Taxicab_geometry), where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0,0,0,1\\],\\[0,0,0,0,0\\],\\[0,0,1,0,0\\]\\]\n**Output:** 6\n**Explanation:** Given three friends living at (0,0), (0,4), and (2,2).\nThe point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.\nSo return 6.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 200`\n*   `grid[i][j]` is either `0` or `1`.\n*   There will be **at least two** friends in the `grid`.Try to solve it in one dimension first. How can this solution apply to the two dimension case?",
          "output": "def minTotalDistance(grid):\n    m, n = len(grid), len(grid[0])\n    rows, cols = [], []\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                rows.append(i)\n                cols.append(j)\n\n    cols.sort()\n    row_median, col_median = rows[len(rows) // 2], cols[len(cols) // 2]\n    distance = sum(abs(i - row_median) for i in rows) + sum(abs(j - col_median) for j in cols)\n    return distance\n"
     },
     {
          "instruction": "Write python code for this problem: Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\n**Clarification:** The input/output format is the same as [how LeetCode serializes a binary tree](https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-). You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,null,null,4,5\\]\n**Output:** \\[1,2,3,null,null,4,5\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef serialize(root):\n    if not root: return \"null,\"\n    return str(root.val) + \",\" + serialize(root.left) + serialize(root.right)\n\ndef deserialize(data):\n    def deserialize_helper(values):\n        val = values.pop(0)\n        if val == 'null': return None\n        root = TreeNode(int(val))\n        root.left = deserialize_helper(values)\n        root.right = deserialize_helper(values)\n        return root\n\n    values = data.split(\",\")\n    return deserialize_helper(values[:-1])  # Excluding the last empty element\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the length of the longest **consecutive sequence path**_.\n\nA **consecutive sequence path** is a path where the values **increase by one** along the path.\n\nNote that the path can start **at any node** in the tree, and you cannot go from a node to its parent in the path.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,null,null,5\\]\n**Output:** 3\n**Explanation:** Longest consecutive sequence path is 3-4-5, so return 3.\n\n**Example 2:**\n\n**Input:** root = \\[2,null,3,2,null,1\\]\n**Output:** 2\n**Explanation:** Longest consecutive sequence path is 2-3, not 3-2-1, so return 2.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 3 * 104]`.\n*   `-3 * 104 <= Node.val <= 3 * 104`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef longest_consecutive_sequence(root, longest_path):\n    if root is None:\n        return 0\n    left = longest_consecutive_sequence(root.left, longest_path)\n    right = longest_consecutive_sequence(root.right, longest_path)\n    curr_path = 1\n    if root.left and root.left.val == root.val + 1:\n        curr_path = max(curr_path, left + 1)\n    if root.right and root.right.val == root.val + 1:\n        curr_path = max(curr_path, right + 1)\n    longest_path[0] = max(longest_path[0], curr_path)\n    return curr_path\n\ndef longest_consecutive(root):\n    longest_path = [0]\n    longest_consecutive_sequence(root, longest_path)\n    return longest_path[0]\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing the **[Bulls and Cows](https://en.wikipedia.org/wiki/Bulls_and_Cows)** game with your friend.\n\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n\n*   The number of \"bulls \", which are digits in the guess that are in the correct position.\n*   The number of \"cows \", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number `secret` and your friend's guess `guess`, return _the hint for your friend's guess_.\n\nThe hint should be formatted as `\"xAyB \"`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** secret =  \"1807 \", guess =  \"7810 \"\n**Output:**  \"1A3B \"\n**Explanation:** Bulls are connected with a '|' and cows are underlined:\n \"1807 \"\n  |\n \"7810 \"\n\n**Example 2:**\n\n**Input:** secret =  \"1123 \", guess =  \"0111 \"\n**Output:**  \"1A1B \"\n**Explanation:** Bulls are connected with a '|' and cows are underlined:\n \"1123 \"         \"1123 \"\n  |      or     |\n \"0111 \"         \"0111 \"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n\n**Constraints:**\n\n*   `1 <= secret.length, guess.length <= 1000`\n*   `secret.length == guess.length`\n*   `secret` and `guess` consist of digits only.",
          "output": "def get_hint(secret: str, guess: str) -> str:\n    bulls = cows = 0\n    secret_count = [0] * 10\n    guess_count = [0] * 10\n\n    for i in range(len(secret)):\n        if secret[i] == guess[i]:\n            bulls += 1\n        else:\n            secret_count[int(secret[i])] += 1\n            guess_count[int(guess[i])] += 1\n   \n    for i in range(10):\n        cows += min(secret_count[i], guess_count[i])\n    \n    return f\"{bulls}A{cows}B\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the length of the longest **strictly increasing**_ _**subsequence**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[10,9,2,5,3,7,101,18\\]\n**Output:** 4\n**Explanation:** The longest increasing subsequence is \\[2,3,7,101\\], therefore the length is 4.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,0,3,2,3\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** nums = \\[7,7,7,7,7,7,7\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2500`\n*   `-104 <= nums[i] <= 104`\n\n**Follow up:** Can you come up with an algorithm that runs in `O(n log(n))` time complexity?",
          "output": "def lengthOfLIS(nums):\n    dp = [1] * len(nums)\n    max_length = 1\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n\nReturn _a list of **unique strings** that are valid with the minimum number of removals_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"()())() \"\n**Output:** \\[ \"(())() \", \"()()() \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"(a)())() \"\n**Output:** \\[ \"(a())() \", \"(a)()() \"\\]\n\n**Example 3:**\n\n**Input:** s =  \")( \"\n**Output:** \\[ \" \"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 25`\n*   `s` consists of lowercase English letters and parentheses `'('` and `')'`.\n*   There will be at most `20` parentheses in `s`.Since we don't know which of the brackets can possibly be removed, we try out all the options! We can use recursion to try out all possibilities for the given expression. For each of the brackets, we have 2 options:\r\n\r\n\n We keep the bracket and add it to the expression that we are building on the fly during recursion.\n OR, we can discard the bracket and move on. The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed. \r\n\r\nCan we somehow find the number of misplaced parentheses and use it in our solution? For every left parenthesis, we should have a corresponding right parenthesis. We can make use of two counters which keep track of misplaced left and right parenthesis and in one iteration we can find out these two values. \r\n\r\n\r\n0 1 2 3 4 5 6 7\r\n( ) ) ) ( ( ( )  \r\ni = 0, left = 1, right = 0\r\ni = 1, left = 0, right = 0\r\ni = 2, left = 0, right = 1\r\ni = 3, left = 0, right = 2\r\ni = 4, left = 1, right = 2\r\ni = 5, left = 2, right = 2\r\ni = 6, left = 3, right = 2\r\ni = 7, left = 2, right = 2\r\n\r\n\r\nWe have 2 misplaced left and 2 misplaced right parentheses. We found out that the exact number of left and right parenthesis that has to be removed to get a valid expression. So, e.g. in a 1000 parentheses string, if there are 2 misplaced left and 2 misplaced right parentheses, after we are done discarding 2 left and 2 right parentheses, we will have only one option per remaining character in the expression i.e. to consider them. We can't discard them.",
          "output": "from collections import deque\n\nclass Solution:\n    def removeInvalidParentheses(self, s: str):\n        visited = set()\n        queue = deque([s])\n        result = []\n        found = False\n\n        while queue:\n            cur = queue.popleft()\n\n            if self.is_valid(cur):\n                found = True\n                result.append(cur)\n\n            if found: continue\n\n            for i in range(len(cur)):\n                if cur[i] == '(' or cur[i] == ')':\n                    next_str = cur[:i] + cur[i+1:]\n                    if next_str not in visited:\n                        visited.add(next_str)\n                        queue.append(next_str)\n\n        return result\n\n    def is_valid(self, s: str) -> bool:\n        count = 0\n        for c in s:\n            if c == '(': count += 1\n            if c == ')':\n                count -= 1\n                if count < 0: return False\n        return count == 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `image` where `0` represents a white pixel and `1` represents a black pixel.\n\nThe black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.\n\nGiven two integers `x` and `y` that represents the location of one of the black pixels, return _the area of the smallest (axis-aligned) rectangle that encloses all black pixels_.\n\nYou must write an algorithm with less than `O(mn)` runtime complexity\n\n",
          "input": "**Example 1:**\n\n**Input:** image = \\[\\[ \"0 \", \"0 \", \"1 \", \"0 \"\\],\\[ \"0 \", \"1 \", \"1 \", \"0 \"\\],\\[ \"0 \", \"1 \", \"0 \", \"0 \"\\]\\], x = 0, y = 2\n**Output:** 6\n\n**Example 2:**\n\n**Input:** image = \\[\\[ \"1 \"\\]\\], x = 0, y = 0\n**Output:** 1\n\n**Constraints:**\n\n*   `m == image.length`\n*   `n == image[i].length`\n*   `1 <= m, n <= 100`\n*   `image[i][j]` is either `'0'` or `'1'`.\n*   `0 <= x < m`\n*   `0 <= y < n`\n*   `image[x][y] == '1'.`\n*   The black pixels in the `image` only form **one component**.",
          "output": "def minArea(image, x, y):\n    top, bottom, left, right = x, x, y, y\n    for i, row in enumerate(image):\n        for j, cell in enumerate(row):\n            if cell == '1':\n                top, bottom = min(top, i), max(bottom, i)\n                left, right = min(left, j), max(right, j)\n    return (bottom - top + 1) * (right - left + 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, handle multiple queries of the following type:\n\n1.  Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\nImplement the `NumArray` class:\n\n*   `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n*   `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"NumArray \",  \"sumRange \",  \"sumRange \",  \"sumRange \"\\]\n\\[\\[\\[-2, 0, 3, -5, 2, -1\\]\\], \\[0, 2\\], \\[2, 5\\], \\[0, 5\\]\\]\n**Output**\n\\[null, 1, -1, -3\\]\n\n**Explanation**\nNumArray numArray = new NumArray(\\[-2, 0, 3, -5, 2, -1\\]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-105 <= nums[i] <= 105`\n*   `0 <= left <= right < nums.length`\n*   At most `104` calls will be made to `sumRange`.",
          "output": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.pSum = [0] * (len(nums) + 1)\n        for i, num in enumerate(nums):\n            self.pSum[i + 1] = self.pSum[i] + num\n\n    def sumRange(self, left: int, right: int) -> int:\n        return self.pSum[right + 1] - self.pSum[left]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D matrix `matrix`, handle multiple queries of the following type:\n\n*   Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\nImplement the `NumMatrix` class:\n\n*   `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`.\n*   `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\nYou must design an algorithm where `sumRegion` works on `O(1)` time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"NumMatrix \",  \"sumRegion \",  \"sumRegion \",  \"sumRegion \"\\]\n\\[\\[\\[\\[3, 0, 1, 4, 2\\], \\[5, 6, 3, 2, 1\\], \\[1, 2, 0, 1, 5\\], \\[4, 1, 0, 1, 7\\], \\[1, 0, 3, 0, 5\\]\\]\\], \\[2, 1, 4, 3\\], \\[1, 1, 2, 2\\], \\[1, 2, 2, 4\\]\\]\n**Output**\n\\[null, 8, 11, 12\\]\n\n**Explanation**\nNumMatrix numMatrix = new NumMatrix(\\[\\[3, 0, 1, 4, 2\\], \\[5, 6, 3, 2, 1\\], \\[1, 2, 0, 1, 5\\], \\[4, 1, 0, 1, 7\\], \\[1, 0, 3, 0, 5\\]\\]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 200`\n*   `-104 <= matrix[i][j] <= 104`\n*   `0 <= row1 <= row2 < m`\n*   `0 <= col1 <= col2 < n`\n*   At most `104` calls will be made to `sumRegion`.",
          "output": "class NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n        m, n = len(matrix), len(matrix[0])\n        self.dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                self.dp[i][j] = self.dp[i - 1][j] + self.dp[i][j - 1] - self.dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        return self.dp[row2 + 1][col2 + 1] - self.dp[row1][col2 + 1] - self.dp[row2 + 1][col1] + self.dp[row1][col1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an empty 2D binary grid `grid` of size `m x n`. The grid represents a map where `0`'s represent water and `1`'s represent land. Initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s).\n\nWe may perform an add land operation which turns the water at position into a land. You are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation.\n\nReturn _an array of integers_ `answer` _where_ `answer[i]` _is the number of islands after turning the cell_ `(ri, ci)` _into a land_.\n\nAn **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 3, n = 3, positions = \\[\\[0,0\\],\\[0,1\\],\\[1,2\\],\\[2,1\\]\\]\n**Output:** \\[1,1,2,3\\]\n**Explanation:**\nInitially, the 2d grid is filled with water.\n- Operation #1: addLand(0, 0) turns the water at grid\\[0\\]\\[0\\] into a land. We have 1 island.\n- Operation #2: addLand(0, 1) turns the water at grid\\[0\\]\\[1\\] into a land. We still have 1 island.\n- Operation #3: addLand(1, 2) turns the water at grid\\[1\\]\\[2\\] into a land. We have 2 islands.\n- Operation #4: addLand(2, 1) turns the water at grid\\[2\\]\\[1\\] into a land. We have 3 islands.\n\n**Example 2:**\n\n**Input:** m = 1, n = 1, positions = \\[\\[0,0\\]\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   `1 <= m, n, positions.length <= 104`\n*   `1 <= m * n <= 104`\n*   `positions[i].length == 2`\n*   `0 <= ri < m`\n*   `0 <= ci < n`\n\n**Follow up:** Could you solve it in time complexity `O(k log(mn))`, where `k == positions.length`?",
          "output": "def numIslands2(m: int, n: int, positions: List[List[int]]) -> List[int]:\n    def index(x: int, y: int) -> int:\n        return x * n + y\n    \n    def find(x: int) -> int:\n        if roots[x] != x:\n            roots[x] = find(roots[x])\n        return roots[x]\n\n    roots = [-1] * (m * n)\n    dirs = [[0, 1], [1, 0], [-1, 0], [0, -1]]\n    islandCount = 0\n    result = []\n\n    for i, j in positions:\n        idx = index(i, j)\n        if roots[idx] != -1:\n            result.append(islandCount)\n            continue\n        islandCount += 1\n        roots[idx] = idx\n        for dx, dy in dirs:\n            ni, nj = i + dx, j + dy\n            neighbor = index(ni, nj)\n            if 0 <= ni < m and 0 <= nj < n and roots[neighbor] != -1:\n                root_neighbor = find(neighbor)\n                if idx != root_neighbor:\n                    roots[root_neighbor] = idx\n                    islandCount -= 1\n        result.append(islandCount)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: An **additive number** is a string whose digits can form an **additive sequence**.\n\nA valid **additive sequence** should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n\nGiven a string containing only digits, return `true` if it is an **additive number** or `false` otherwise.\n\n**Note:** Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.\n\n",
          "input": "**Example 1:**\n\n**Input:**  \"112358 \"\n**Output:** true\n**Explanation:** \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n\n**Example 2:**\n\n**Input:**  \"199100199 \"\n**Output:** true\n**Explanation:** \nThe additive sequence is: 1, 99, 100, 199. \n1 + 99 = 100, 99 + 100 = 199\n\n**Constraints:**\n\n*   `1 <= num.length <= 35`\n*   `num` consists only of digits.\n\n**Follow up:** How would you handle overflow for very large input integers?",
          "output": "def isAdditiveNumber(num):\n    for i in range(1, len(num) // 2 + 1):\n        for j in range(1, (len(num) - i) // 2 + 1):\n            if check(num[:i], num[i:i+j], num[i+j:]):\n                return True\n    return False\n\ndef check(num1, num2, remaining):\n    if (len(num1) > 1 and num1[0] == '0') or (len(num2) > 1 and num2[0] == '0'):\n        return False\n    _sum = add(num1, num2)\n    if remaining == _sum:\n        return True\n    if not remaining.startswith(_sum):\n        return False\n    return check(num2, _sum, remaining[len(_sum):])\n\ndef add(num1, num2):\n    carry, result = 0, []\n    i, j = len(num1) - 1, len(num2) - 1\n    while i >= 0 or j >= 0 or carry > 0:\n        n1 = int(num1[i]) if i >= 0 else 0\n        n2 = int(num2[j]) if j >= 0 else 0\n        _sum = n1 + n2 + carry\n        carry = _sum // 10\n        result.append(str(_sum % 10))\n        i, j = i - 1, j - 1\n    return ''.join(result[::-1])\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, handle multiple queries of the following types:\n\n1.  **Update** the value of an element in `nums`.\n2.  Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\nImplement the `NumArray` class:\n\n*   `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n*   `void update(int index, int val)` **Updates** the value of `nums[index]` to be `val`.\n*   `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"NumArray \",  \"sumRange \",  \"update \",  \"sumRange \"\\]\n\\[\\[\\[1, 3, 5\\]\\], \\[0, 2\\], \\[1, 2\\], \\[0, 2\\]\\]\n**Output**\n\\[null, 9, null, 8\\]\n\n**Explanation**\nNumArray numArray = new NumArray(\\[1, 3, 5\\]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = \\[1, 2, 5\\]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-100 <= nums[i] <= 100`\n*   `0 <= index < nums.length`\n*   `-100 <= val <= 100`\n*   `0 <= left <= right < nums.length`\n*   At most `3 * 104` calls will be made to `update` and `sumRange`.",
          "output": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.prefix_sum = [0] * (len(nums) + 1)\n        for i in range(len(nums)):\n            self.prefix_sum[i + 1] = self.prefix_sum[i] + nums[i]\n\n    def sumRange(self, left: int, right: int) -> int:\n        return self.prefix_sum[right + 1] - self.prefix_sum[left]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D matrix `matrix`, handle multiple queries of the following types:\n\n1.  **Update** the value of a cell in `matrix`.\n2.  Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\nImplement the NumMatrix class:\n\n*   `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`.\n*   `void update(int row, int col, int val)` **Updates** the value of `matrix[row][col]` to be `val`.\n*   `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"NumMatrix \",  \"sumRegion \",  \"update \",  \"sumRegion \"\\]\n\\[\\[\\[\\[3, 0, 1, 4, 2\\], \\[5, 6, 3, 2, 1\\], \\[1, 2, 0, 1, 5\\], \\[4, 1, 0, 1, 7\\], \\[1, 0, 3, 0, 5\\]\\]\\], \\[2, 1, 4, 3\\], \\[3, 2, 2\\], \\[2, 1, 4, 3\\]\\]\n**Output**\n\\[null, 8, null, 10\\]\n\n**Explanation**\nNumMatrix numMatrix = new NumMatrix(\\[\\[3, 0, 1, 4, 2\\], \\[5, 6, 3, 2, 1\\], \\[1, 2, 0, 1, 5\\], \\[4, 1, 0, 1, 7\\], \\[1, 0, 3, 0, 5\\]\\]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e. sum of the left red rectangle)\nnumMatrix.update(3, 2, 2);       // matrix changes from left image to right image\nnumMatrix.sumRegion(2, 1, 4, 3); // return 10 (i.e. sum of the right red rectangle)\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 200`\n*   `-1000 <= matrix[i][j] <= 1000`\n*   `0 <= row < m`\n*   `0 <= col < n`\n*   `-1000 <= val <= 1000`\n*   `0 <= row1 <= row2 < m`\n*   `0 <= col1 <= col2 < n`\n*   At most `5000` calls will be made to `sumRegion` and `update`.",
          "output": "class NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n        self.dp = [[0] * (len(matrix[0]) + 1) for _ in range(len(matrix) + 1)]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                self.dp[i + 1][j + 1] = self.dp[i + 1][j] + self.dp[i][j + 1] - self.dp[i][j] + matrix[i][j]\n                \n    def update(self, row: int, col: int, val: int) -> None:\n        oldValue = self.dp[row + 1][col + 1] - self.dp[row + 1][col] - self.dp[row][col + 1] + self.dp[row][col]\n        delta = val - oldValue\n        for i in range(row + 1, len(self.dp)):\n            for j in range(col + 1, len(self.dp[0])):\n                self.dp[i][j] += delta\n\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        return self.dp[row2 + 1][col2 + 1] - self.dp[row2 + 1][col1] - self.dp[row1][col2 + 1] + self.dp[row1][col1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n\n*   After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[1,2,3,0,2\\]\n**Output:** 3\n**Explanation:** transactions = \\[buy, sell, cooldown, buy, sell\\]\n\n**Example 2:**\n\n**Input:** prices = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= prices.length <= 5000`\n*   `0 <= prices[i] <= 1000`",
          "output": "def maxProfit(prices):\n    profit = 0\n    for i in range(1, len(prices)):\n        profit += max(prices[i] - prices[i - 1], 0)\n    return profit\n"
     },
     {
          "instruction": "Write python code for this problem: A tree is an undirected graph in which any two vertices are connected by _exactly_ one path. In other words, any connected graph without simple cycles is a tree.\n\nGiven a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`) are called **minimum height trees** (MHTs).\n\nReturn _a list of all **MHTs'** root labels_. You can return the answer in **any order**.\n\nThe **height** of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, edges = \\[\\[1,0\\],\\[1,2\\],\\[1,3\\]\\]\n**Output:** \\[1\\]\n**Explanation:** As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n\n**Example 2:**\n\n**Input:** n = 6, edges = \\[\\[3,0\\],\\[3,1\\],\\[3,2\\],\\[3,4\\],\\[5,4\\]\\]\n**Output:** \\[3,4\\]\n\n**Constraints:**\n\n*   `1 <= n <= 2 * 104`\n*   `edges.length == n - 1`\n*   `0 <= ai, bi < n`\n*   `ai != bi`\n*   All the pairs `(ai, bi)` are distinct.\n*   The given input is **guaranteed** to be a tree and there will be **no repeated** edges.How many MHTs can a graph have at most?",
          "output": "from collections import deque\nfrom typing import List\n\ndef find_min_height_trees(n: int, edges: List[List[int]]) -> List[int]:\n    if n == 1:\n        return [0]\n\n    adj_list = [set() for _ in range(n)]\n    for a, b in edges:\n        adj_list[a].add(b)\n        adj_list[b].add(a)\n\n    leaves = deque(i for i in range(n) if len(adj_list[i]) == 1)\n\n    while n > 2:\n        leaves_size = len(leaves)\n        n -= leaves_size\n        for _ in range(leaves_size):\n            leaf = leaves.popleft()\n            for neighbor in adj_list[leaf]:\n                adj_list[neighbor].remove(leaf)\n                if len(adj_list[neighbor]) == 1:\n                    leaves.append(neighbor)\n\n    return list(leaves)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat1 = \\[\\[1,0,0\\],\\[-1,0,3\\]\\], mat2 = \\[\\[7,0,0\\],\\[0,0,0\\],\\[0,0,1\\]\\]\n**Output:** \\[\\[7,0,0\\],\\[-7,0,3\\]\\]\n\n**Example 2:**\n\n**Input:** mat1 = \\[\\[0\\]\\], mat2 = \\[\\[0\\]\\]\n**Output:** \\[\\[0\\]\\]\n\n**Constraints:**\n\n*   `m == mat1.length`\n*   `k == mat1[i].length == mat2.length`\n*   `n == mat2[i].length`\n*   `1 <= m, n, k <= 100`\n*   `-100 <= mat1[i][j], mat2[i][j] <= 100`",
          "output": "def multiply(mat1, mat2):\n    m, k, n = len(mat1), len(mat1[0]), len(mat2[0])\n    result = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(k):\n            if mat1[i][j] != 0:\n                for l in range(n):\n                    result[i][l] += mat1[i][j] * mat2[j][l]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.\n\nIf you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.\n\nReturn _the maximum coins you can collect by bursting the balloons wisely_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,5,8\\]\n**Output:** 167\n**Explanation:**\nnums = \\[3,1,5,8\\] --> \\[3,5,8\\] --> \\[3,8\\] --> \\[8\\] --> \\[\\]\ncoins =  3\\*1\\*5    +   3\\*5\\*8   +  1\\*3\\*8  + 1\\*8\\*1 = 167\n\n**Example 2:**\n\n**Input:** nums = \\[1,5\\]\n**Output:** 10\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 300`\n*   `0 <= nums[i] <= 100`",
          "output": "def maxCoins(nums):\n    nums = [1] + nums + [1]\n    n = len(nums)\n    dp = [[0] * n for _ in range(n)]\n\n    for length in range(1, n - 1):\n        for left in range(1, n - length):\n            right = left + length - 1\n            for i in range(left, right + 1):\n                dp[left][right] = max(dp[left][right], nums[left - 1] * nums[i] * nums[right + 1] + dp[left][i - 1] + dp[i + 1][right])\n\n    return dp[1][n - 2]\n"
     },
     {
          "instruction": "Write python code for this problem: A **super ugly number** is a positive integer whose prime factors are in the array `primes`.\n\nGiven an integer `n` and an array of integers `primes`, return _the_ `nth` _**super ugly number**_.\n\nThe `nth` **super ugly number** is **guaranteed** to fit in a **32-bit** signed integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 12, primes = \\[2,7,13,19\\]\n**Output:** 32\n**Explanation:** \\[1,2,4,7,8,13,14,16,19,26,28,32\\] is the sequence of the first 12 super ugly numbers given primes = \\[2,7,13,19\\].\n\n**Example 2:**\n\n**Input:** n = 1, primes = \\[2,3,5\\]\n**Output:** 1\n**Explanation:** 1 has no prime factors, therefore all of its prime factors are in the array primes = \\[2,3,5\\].\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `1 <= primes.length <= 100`\n*   `2 <= primes[i] <= 1000`\n*   `primes[i]` is **guaranteed** to be a prime number.\n*   All the values of `primes` are **unique** and sorted in **ascending order**.",
          "output": "def nthSuperUglyNumber(n, primes):\n    ugly = [0] * n\n    ugly[0] = 1\n    indices = [0] * len(primes)\n\n    for i in range(1, n):\n        min_val = float(\"inf\")\n\n        for j in range(len(primes)):\n            min_val = min(min_val, ugly[indices[j]] * primes[j])\n\n        ugly[i] = min_val\n\n        for j in range(len(primes)):\n            if ugly[i] == ugly[indices[j]] * primes[j]:\n                indices[j] += 1\n\n    return ugly[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _**the vertical order traversal** of its nodes' values_. (i.e., from top to bottom, column by column).\n\nIf two nodes are in the same row and column, the order should be from **left to right**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** \\[\\[9\\],\\[3,15\\],\\[20\\],\\[7\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[3,9,8,4,0,1,7\\]\n**Output:** \\[\\[4\\],\\[9\\],\\[3,0,1\\],\\[8\\],\\[7\\]\\]\n\n**Example 3:**\n\n**Input:** root = \\[3,9,8,4,0,1,7,null,null,null,2,5\\]\n**Output:** \\[\\[4\\],\\[9,5\\],\\[3,0,1\\],\\[8,2\\],\\[7\\]\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`",
          "output": "from collections import defaultdict, deque\nfrom typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef verticalOrder(root: Optional[TreeNode]) -> List[List[int]]:\n    if not root: return []\n\n    column_table = defaultdict(list)\n    q = deque([(root, 0)])\n\n    while q:\n        cur_node, column = q.popleft()\n\n        if cur_node:\n            column_table[column].append(cur_node.val)\n            q.append((cur_node.left, column - 1))\n            q.append((cur_node.right, column + 1))\n\n    return [column_table[key] for key in sorted(column_table)]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _an integer array_ `counts` _where_ `counts[i]` _is the number of smaller elements to the right of_ `nums[i]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,2,6,1\\]\n**Output:** \\[2,1,1,0\\]\n**Explanation:**\nTo the right of 5 there are **2** smaller elements (2 and 1).\nTo the right of 2 there is only **1** smaller element (1).\nTo the right of 6 there is **1** smaller element (1).\nTo the right of 1 there is **0** smaller element.\n\n**Example 2:**\n\n**Input:** nums = \\[-1\\]\n**Output:** \\[0\\]\n\n**Example 3:**\n\n**Input:** nums = \\[-1,-1\\]\n**Output:** \\[0,0\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`",
          "output": "def countSmaller(nums):\n    def merge_sort(indices):\n        if len(indices) <= 1:\n            return indices\n        mid = len(indices) // 2\n        left = merge_sort(indices[:mid])\n        right = merge_sort(indices[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        merged, count = [], 0\n        while left and right:\n            if nums[left[0]] <= nums[right[0]]:\n                counts[left[0]] += count\n                merged.append(left.pop(0))\n            else:\n                count += len(left)\n                merged.append(right.pop(0))\n        for i in left:\n            counts[i] += count\n        return merged + left + right\n\n    counts = [0] * len(nums)\n    merge_sort(list(range(len(nums))))\n    return counts\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is **the smallest in lexicographical order** among all possible results.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"bcabc \"\n**Output:**  \"abc \"\n\n**Example 2:**\n\n**Input:** s =  \"cbacdcbc \"\n**Output:**  \"acdb \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of lowercase English letters.\n\n**Note:** This question is the same as 1081: [https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/](https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/)Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i.",
          "output": "def removeDuplicateLetters(s):\n    count = [0] * 256\n    visited = [False] * 256\n    st = []\n\n    for ch in s:\n        count[ord(ch)] += 1\n\n    for ch in s:\n        count[ord(ch)] -= 1\n        if visited[ord(ch)]:\n            continue\n        while st and ch < st[-1] and count[ord(st[-1])] > 0:\n            visited[ord(st.pop())] = False\n        st.append(ch)\n        visited[ord(ch)] = True\n\n    return \"\".join(st)   \n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` grid `grid` of values `0`, `1`, or `2`, where:\n\n*   each `0` marks **an empty land** that you can pass by freely,\n*   each `1` marks **a building** that you cannot pass through, and\n*   each `2` marks **an obstacle** that you cannot pass through.\n\nYou want to build a house on an empty land that reaches all buildings in the **shortest total travel** distance. You can only move up, down, left, and right.\n\nReturn _the **shortest travel distance** for such a house_. If it is not possible to build such a house according to the above rules, return `-1`.\n\nThe **total travel distance** is the sum of the distances between the houses of the friends and the meeting point.\n\nThe distance is calculated using [Manhattan Distance](http://en.wikipedia.org/wiki/Taxicab_geometry), where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0,2,0,1\\],\\[0,0,0,0,0\\],\\[0,0,1,0,0\\]\\]\n**Output:** 7\n**Explanation:** Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).\nThe point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.\nSo return 7.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0\\]\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1\\]\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `grid[i][j]` is either `0`, `1`, or `2`.\n*   There will be **at least one** building in the `grid`.",
          "output": "from collections import deque\n\ndef shortestDistance(grid: list[list[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n\n    total_count = [[0] * n for _ in range(m)]\n    dist_sum = [[0] * n for _ in range(m)]\n    house_count = 0\n\n    dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                house_count += 1\n                q = deque([(i, j)])\n                visited = [[False] * n for _ in range(m)]\n                level = 1\n                while q:\n                    for _ in range(len(q)):\n                        x, y = q.popleft()\n                        for dx, dy in dirs:\n                            x_new, y_new = x + dx, y + dy\n                            if 0 <= x_new < m and 0 <= y_new < n and not visited[x_new][y_new] and grid[x_new][y_new] == 0:\n                                visited[x_new][y_new] = True\n                                q.append((x_new, y_new))\n                                dist_sum[x_new][y_new] += level\n                                total_count[x_new][y_new] += 1\n                    level += 1\n\n    min_dist = float(\"inf\")\n    for i in range(m):\n        for j in range(n):\n            if total_count[i][j] == house_count:\n                min_dist = min(min_dist, dist_sum[i][j])\n\n    return -1 if min_dist == float(\"inf\") else min_dist\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string array `words`, return _the maximum value of_ `length(word[i]) * length(word[j])` _where the two words do not share common letters_. If no such two words exist, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"abcw \", \"baz \", \"foo \", \"bar \", \"xtfn \", \"abcdef \"\\]\n**Output:** 16\n**Explanation:** The two words can be  \"abcw \",  \"xtfn \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \", \"ab \", \"abc \", \"d \", \"cd \", \"bcd \", \"abcd \"\\]\n**Output:** 4\n**Explanation:** The two words can be  \"ab \",  \"cd \".\n\n**Example 3:**\n\n**Input:** words = \\[ \"a \", \"aa \", \"aaa \", \"aaaa \"\\]\n**Output:** 0\n**Explanation:** No such pair of words.\n\n**Constraints:**\n\n*   `2 <= words.length <= 1000`\n*   `1 <= words[i].length <= 1000`\n*   `words[i]` consists only of lowercase English letters.",
          "output": "def maxProduct(words):\n    n = len(words)\n    mask = [0] * n\n    for i, word in enumerate(words):\n        for c in word:\n            mask[i] |= (1 << (ord(c) - ord('a')))\n    \n    max_product = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (mask[i] & mask[j]) == 0:\n                max_product = max(max_product, len(words[i]) * len(words[j]))\n    \n    return max_product\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\n\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb.\n\nReturn _the number of bulbs that are on after `n` rounds_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 1\n**Explanation:** At first, the three bulbs are \\[off, off, off\\].\nAfter the first round, the three bulbs are \\[on, on, on\\].\nAfter the second round, the three bulbs are \\[on, off, on\\].\nAfter the third round, the three bulbs are \\[on, off, off\\]. \nSo you should return 1 because there is only one bulb is on.\n\n**Example 2:**\n\n**Input:** n = 0\n**Output:** 0\n\n**Example 3:**\n\n**Input:** n = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `0 <= n <= 109`",
          "output": "def bulbSwitch(n):\n    return int(n**0.5)\n"
     },
     {
          "instruction": "Write python code for this problem: A word's **generalized abbreviation** can be constructed by taking any number of **non-overlapping** and **non-adjacent** substrings and replacing them with their respective lengths.\n\n*   For example, `\"abcde \"` can be abbreviated into:\n    *   `\"a3e \"` ( `\"bcd \"` turned into `\"3 \"`)\n    *   `\"1bcd1 \"` ( `\"a \"` and `\"e \"` both turned into `\"1 \"`)\n    *   `\"5 \"` ( `\"abcde \"` turned into `\"5 \"`)\n    *   `\"abcde \"` (no substrings replaced)\n*   However, these abbreviations are **invalid**:\n    *   `\"23 \"` ( `\"ab \"` turned into `\"2 \"` and `\"cde \"` turned into `\"3 \"`) is invalid as the substrings chosen are adjacent.\n    *   `\"22de \"` ( `\"ab \"` turned into `\"2 \"` and `\"bc \"` turned into `\"2 \"`) is invalid as the substring chosen overlap.\n\nGiven a string `word`, return _a list of all the possible **generalized abbreviations** of_ `word`. Return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** word = \"word\"\n**Output:** \\[\"4\",\"3d\",\"2r1\",\"2rd\",\"1o2\",\"1o1d\",\"1or1\",\"1ord\",\"w3\",\"w2d\",\"w1r1\",\"w1rd\",\"wo2\",\"wo1d\",\"wor1\",\"word\"\\]\n\n**Example 2:**\n\n**Input:** word = \"a\"\n**Output:** \\[\"1\",\"a\"\\]\n\n**Constraints:**\n\n*   `1 <= word.length <= 15`\n*   `word` consists of only lowercase English letters.",
          "output": "def generateAbbreviations(word):\n    if not word:\n        return [\"\"]\n    res = []\n    for i in range(len(word) + 1):\n        for item in generateAbbreviations(word[i+1:]):\n            if i == 0 or not item or not item[0].isdigit():\n                res.append(word[:i+1] + item)\n            if item and item[0].isdigit():\n                res.append(word[:i] + '1' + item)\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`.\n\nCreate the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n\nReturn an array of the `k` digits representing the answer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[3,4,6,5\\], nums2 = \\[9,1,2,5,8,3\\], k = 5\n**Output:** \\[9,8,6,5,3\\]\n\n**Example 2:**\n\n**Input:** nums1 = \\[6,7\\], nums2 = \\[6,0,4\\], k = 5\n**Output:** \\[6,7,6,0,4\\]\n\n**Example 3:**\n\n**Input:** nums1 = \\[3,9\\], nums2 = \\[8,9\\], k = 3\n**Output:** \\[9,8,9\\]\n\n**Constraints:**\n\n*   `m == nums1.length`\n*   `n == nums2.length`\n*   `1 <= m, n <= 500`\n*   `0 <= nums1[i], nums2[i] <= 9`\n*   `1 <= k <= m + n`",
          "output": "cript\r\nfunction maxNumber(nums1, nums2, k) {\r\n    function maxArray(nums, k) {\r\n        let ans = [];\r\n        for (let i = 0; i < nums.length; i++) {\r\n            while (nums.length - i > k - ans.length && ans.length && ans[ans.length - 1] < nums[i])\r\n                ans.pop();\r\n            if (ans.length < k) ans.push(nums[i]);\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    function merge(nums1, nums2) {\r\n        let ans = [], i = 0, j = 0;\r\n        while (i < nums1.length || j < nums2.length)\r\n            ans.push((nums1.slice(i).join('') >= nums2.slice(j).join('') ? nums1[i++] : nums2[j++]));\r\n        return ans;\r\n    }\r\n\r\n    let result = [];\r\n    for (let i = Math.max(0, k - nums2.length); i <= k && i <= nums1.length; i++) {\r\n        const candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i));\r\n        if (candidate.join('') > result.join('')) result = candidate;\r\n    }\r\n    return result;\r\n}\r\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\nReturn _the fewest number of coins that you need to make up that amount_. If that amount of money cannot be made up by any combination of the coins, return `-1`.\n\nYou may assume that you have an infinite number of each kind of coin.\n\n",
          "input": "**Example 1:**\n\n**Input:** coins = \\[1,2,5\\], amount = 11\n**Output:** 3\n**Explanation:** 11 = 5 + 5 + 1\n\n**Example 2:**\n\n**Input:** coins = \\[2\\], amount = 3\n**Output:** -1\n\n**Example 3:**\n\n**Input:** coins = \\[1\\], amount = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= coins.length <= 12`\n*   `1 <= coins[i] <= 231 - 1`\n*   `0 <= amount <= 104`",
          "output": "def coinChange(coins, amount):\n    dp = [amount + 1] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n\n    return dp[amount] if dp[amount] <= amount else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph.\n\nReturn _the number of connected components in the graph_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, edges = \\[\\[0,1\\],\\[1,2\\],\\[3,4\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** n = 5, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 2000`\n*   `1 <= edges.length <= 5000`\n*   `edges[i].length == 2`\n*   `0 <= ai <= bi < n`\n*   `ai != bi`\n*   There are no repeated edges.",
          "output": "def countComponents(n, edges):\n    adj_list = [[] for _ in range(n)]\n    for edge in edges:\n        adj_list[edge[0]].append(edge[1])\n        adj_list[edge[1]].append(edge[0])\n\n    visited = [False] * n\n    connected_components = 0\n\n    def dfs(node):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n            connected_components += 1\n\n    return connected_components\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.\n\nYou may assume the input array always has a valid answer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,5,1,1,6,4\\]\n**Output:** \\[1,6,1,5,1,4\\]\n**Explanation:** \\[1,4,1,5,1,6\\] is also accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,2,2,3,1\\]\n**Output:** \\[2,3,1,3,1,2\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `0 <= nums[i] <= 5000`\n*   It is guaranteed that there will be an answer for the given input `nums`.\n\n**Follow Up:** Can you do it in `O(n)` time and/or **in-place** with `O(1)` extra space?",
          "output": "def wiggleSort(nums):\n    nums.sort()\n    for i in range(1, len(nums) - 1, 2):\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return _the maximum length of a_ _subarray_ _that sums to_ `k`. If there is not one, return `0` instead.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,-1,5,-2,3\\], k = 3\n**Output:** 4\n**Explanation:** The subarray \\[1, -1, 5, -2\\] sums to 3 and is the longest.\n\n**Example 2:**\n\n**Input:** nums = \\[-2,-1,2,1\\], k = 1\n**Output:** 2\n**Explanation:** The subarray \\[-1, 2\\] sums to 1 and is the longest.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 105`\n*   `-104 <= nums[i] <= 104`\n*   `-109 <= k <= 109`Compute the prefix sum array where psum[i] is the sum of all the elements from 0 to i. At each index i, the sum of the prefix is psum[i], so we are searching for the index x where psum[x] = psum[i] - k.\r\nThe subarray [x + 1, i] will be of sum k. Use a hashmap to get the index x efficiently or to determine that it does not exist.",
          "output": "def maxSubArrayLen(nums: List[int], k: int) -> int:\n    sum_index = {}\n    maxLength = sum = 0\n    for i, num in enumerate(nums):\n        sum += num\n        if sum == k:\n            maxLength = i + 1\n        if sum - k in sum_index:\n            maxLength = max(maxLength, i - sum_index[sum - k])\n        if sum not in sum_index:\n            sum_index[sum] = i\n    return maxLength\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _`true` if it is a power of three. Otherwise, return `false`_.\n\nAn integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 27\n**Output:** true\n**Explanation:** 27 = 33\n\n**Example 2:**\n\n**Input:** n = 0\n**Output:** false\n**Explanation:** There is no x where 3x = 0.\n\n**Example 3:**\n\n**Input:** n = -1\n**Output:** false\n**Explanation:** There is no x where 3x = (-1).\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`\n\n**Follow up:** Could you solve it without loops/recursion?",
          "output": "def is_power_of_three(n: int) -> bool:\n    if n < 1:\n        return False\n    \n    while n % 3 == 0:\n        n //= 3\n    \n    return n == 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and two integers `lower` and `upper`, return _the number of range sums that lie in_ `[lower, upper]` _inclusive_.\n\nRange sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-2,5,-1\\], lower = -2, upper = 2\n**Output:** 3\n**Explanation:** The three ranges are: \\[0,0\\], \\[2,2\\], and \\[0,2\\] and their respective sums are: -2, -1, 2.\n\n**Example 2:**\n\n**Input:** nums = \\[0\\], lower = 0, upper = 0\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-231 <= nums[i] <= 231 - 1`\n*   `-105 <= lower <= upper <= 105`\n*   The answer is **guaranteed** to fit in a **32-bit** integer.",
          "output": "def countRangeSum(nums, lower, upper):\n    sums = [0] * (len(nums) + 1)\n    for i in range(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n\n    def mergeSort(start, end):\n        if start == end:\n            return 0\n        mid = start + (end - start) // 2\n        count = mergeSort(start, mid) + mergeSort(mid + 1, end)\n\n        j, k = mid + 1, mid + 1\n        for i in range(start, mid + 1):\n            while j <= end and sums[j] - sums[i] < lower: j += 1\n            while k <= end and sums[k] - sums[i] <= upper: k += 1\n            count += k - j\n\n        sums[start:end + 1] = sorted(sums[start:end + 1])\n        return count\n\n    return mergeSort(0, len(nums))\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return _the reordered list_.\n\nThe **first** node is considered **odd**, and the **second** node is **even**, and so on.\n\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\n\nYou must solve the problem in `O(1)` extra space complexity and `O(n)` time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\]\n**Output:** \\[1,3,5,2,4\\]\n\n**Example 2:**\n\n**Input:** head = \\[2,1,3,5,6,4,7\\]\n**Output:** \\[2,3,6,7,1,5,4\\]\n\n**Constraints:**\n\n*   The number of nodes in the linked list is in the range `[0, 104]`.\n*   `-106 <= Node.val <= 106`",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef odd_even_list(head: ListNode) -> ListNode:\n    if not head:\n        return None\n    odd, even, even_head = head, head.next, head.next\n    while even and even.next:\n        odd.next = even.next\n        odd = odd.next\n        even.next = odd.next\n        even = even.next\n    odd.next = even_head\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` integers `matrix`, return _the length of the longest increasing path in_ `matrix`.\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You **may not** move **diagonally** or move **outside the boundary** (i.e., wrap-around is not allowed).\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[9,9,4\\],\\[6,6,8\\],\\[2,1,1\\]\\]\n**Output:** 4\n**Explanation:** The longest increasing path is `[1, 2, 6, 9]`.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[3,4,5\\],\\[3,2,6\\],\\[2,2,1\\]\\]\n**Output:** 4\n**Explanation:** The longest increasing path is `[3, 4, 5, 6]`. Moving diagonally is not allowed.\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[1\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 200`\n*   `0 <= matrix[i][j] <= 231 - 1`",
          "output": "dx = (0, 0, 1, -1)\ndy = (1, -1, 0, 0)\n\ndef dfs(matrix, memo, i, j):\n    if memo[i][j] != 0:\n        return memo[i][j]\n    \n    max_len = 0\n    for k in range(4):\n        ni, nj = i + dx[k], j + dy[k]\n        if (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and matrix[ni][nj] > matrix[i][j]):\n            max_len = max(max_len, dfs(matrix, memo, ni, nj))\n    \n    memo[i][j] = max_len + 1\n    return memo[i][j]\n\ndef longest_increasing_path(matrix):\n    m, n = len(matrix), len(matrix[0])\n    \n    memo = [[0] * n for _ in range(m)]\n    \n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            ans = max(ans, dfs(matrix, memo, i, j))\n    \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array.\n\nReturn _the minimum number of patches required_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3\\], n = 6\n**Output:** 1\nExplanation:\nCombinations of nums are \\[1\\], \\[3\\], \\[1,3\\], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: \\[1\\], \\[2\\], \\[3\\], \\[1,3\\], \\[2,3\\], \\[1,2,3\\].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range \\[1, 6\\].\nSo we only need 1 patch.\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,10\\], n = 20\n**Output:** 2\nExplanation: The two patches can be \\[2, 4\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,2\\], n = 5\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 104`\n*   `nums` is sorted in **ascending order**.\n*   `1 <= n <= 231 - 1`",
          "output": "def minPatches(nums, n):\n    max_sum = 0\n    patches = 0\n    i = 0\n\n    while max_sum < n:\n        if i < len(nums) and nums[i] <= max_sum + 1:\n            max_sum += nums[i]\n            i += 1\n        else:\n            max_sum += max_sum + 1\n            patches += 1\n\n    return patches\n"
     },
     {
          "instruction": "Write python code for this problem: One way to serialize a binary tree is to use **preorder traversal**. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`.\n\nFor example, the above binary tree can be serialized to the string `\"9,3,4,#,#,1,#,#,2,#,6,#,# \"`, where `'#'` represents a null node.\n\nGiven a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.\n\nIt is **guaranteed** that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer.\n\nYou may assume that the input format is always valid.\n\n*   For example, it could never contain two consecutive commas, such as `\"1,,3 \"`.\n\n**Note:** You are not allowed to reconstruct the tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** preorder = \"1,#\"\n**Output:** false\n\n**Example 3:**\n\n**Input:** preorder = \"9,#,#,1\"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= preorder.length <= 104`\n*   `preorder` consist of integers in the range `[0, 100]` and `'#'` separated by commas `','`.",
          "output": "def is_valid_serialization(preorder: str) -> bool:\n    nodes = preorder.split(',')\n    node_count = 1\n\n    for node in nodes:\n        node_count -= 1\n        if node_count < 0:\n            return False\n        if node != '#':\n            node_count += 2\n\n    return node_count == 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n\nAll of the tickets belong to a man who departs from `\"JFK \"`, thus, the itinerary must begin with `\"JFK \"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\n*   For example, the itinerary `[ \"JFK \", \"LGA \"]` has a smaller lexical order than `[ \"JFK \", \"LGB \"]`.\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n\n",
          "input": "**Example 1:**\n\n**Input:** tickets = \\[\\[ \"MUC \", \"LHR \"\\],\\[ \"JFK \", \"MUC \"\\],\\[ \"SFO \", \"SJC \"\\],\\[ \"LHR \", \"SFO \"\\]\\]\n**Output:** \\[ \"JFK \", \"MUC \", \"LHR \", \"SFO \", \"SJC \"\\]\n\n**Example 2:**\n\n**Input:** tickets = \\[\\[ \"JFK \", \"SFO \"\\],\\[ \"JFK \", \"ATL \"\\],\\[ \"SFO \", \"ATL \"\\],\\[ \"ATL \", \"JFK \"\\],\\[ \"ATL \", \"SFO \"\\]\\]\n**Output:** \\[ \"JFK \", \"ATL \", \"JFK \", \"SFO \", \"ATL \", \"SFO \"\\]\n**Explanation:** Another possible reconstruction is \\[ \"JFK \", \"SFO \", \"ATL \", \"JFK \", \"ATL \", \"SFO \"\\] but it is larger in lexical order.\n\n**Constraints:**\n\n*   `1 <= tickets.length <= 300`\n*   `tickets[i].length == 2`\n*   `fromi.length == 3`\n*   `toi.length == 3`\n*   `fromi` and `toi` consist of uppercase English letters.\n*   `fromi != toi`",
          "output": "from collections import defaultdict\n\ndef findItinerary(tickets):\n    flights = defaultdict(list)\n    itinerary = []\n\n    for ticket in tickets:\n        flights[ticket[0]].append(ticket[1])\n        flights[ticket[0]].sort(reverse=True)\n\n    def dfs(airport):\n        while flights[airport]:\n            dfs(flights[airport].pop())\n        itinerary.append(airport)\n\n    dfs(\"JFK\")\n    \n    return itinerary[::-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.\n\nA **Binary Search Tree (BST)** is a tree in which all the nodes follow the below-mentioned properties:\n\n*   The left subtree values are less than the value of their parent (root) node's value.\n*   The right subtree values are greater than the value of their parent (root) node's value.\n\n**Note:** A subtree must include all of its descendants.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[10,5,15,1,8,null,7\\]\n**Output:** 3\n**Explanation:** The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3.\n\n**Example 2:**\n\n**Input:** root = \\[4,2,7,2,3,5,null,2,null,null,null,null,null,1\\]\n**Output:** 2\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-104 <= Node.val <= 104`\n\n**Follow up:** Can you figure out ways to solve it with `O(n)` time complexity?You can recursively use algorithm similar to 98. Validate Binary Search Tree at each node of the tree, which will result in O(nlogn) time complexity.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef largestBSTSubtree(root: TreeNode) -> int:\n    def largestBSTUtil(root):\n        if not root:\n            return True, 0, float('inf'), float('-inf')\n        \n        left = largestBSTUtil(root.left)\n        right = largestBSTUtil(root.right)\n        \n        if left[0] and root.val > left[3] and right[0] and root.val < right[2]:\n            largestBST[0] = max(largestBST[0], left[1] + 1 + right[1])\n            return True, left[1] + 1 + right[1], min(root.val, left[2]), max(root.val, right[3])\n        \n        return False, -1, float('inf'), float('-inf')\n    \n    largestBST = [0]\n    largestBSTUtil(root)\n    \n    return largestBST[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return `true` _if there exists a triple of indices_ `(i, j, k)` _such that_ `i < j < k` _and_ `nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5\\]\n**Output:** true\n**Explanation:** Any triplet where i < j < k is valid.\n\n**Example 2:**\n\n**Input:** nums = \\[5,4,3,2,1\\]\n**Output:** false\n**Explanation:** No triplet exists.\n\n**Example 3:**\n\n**Input:** nums = \\[2,1,5,0,4,6\\]\n**Output:** true\n**Explanation:** The triplet (3, 4, 5) is valid because nums\\[3\\] == 0 < nums\\[4\\] == 4 < nums\\[5\\] == 6.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 105`\n*   `-231 <= nums[i] <= 231 - 1`\n\n**Follow up:** Could you implement a solution that runs in `O(n)` time complexity and `O(1)` space complexity?",
          "output": "def findTriplets(nums: List[int]) -> bool:\n    first = float('inf')\n    second = float('inf')\n\n    for num in nums:\n        if num <= first:\n            first = num\n        elif num <= second:\n            second = num\n        else:\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `distance`.\n\nYou start at the point `(0, 0)` on an **X-Y plane,** and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n\nReturn `true` _if your path crosses itself or_ `false` _if it does not_.\n\n",
          "input": "**Example 1:**\n\n**Input:** distance = \\[2,1,1,2\\]\n**Output:** true\n**Explanation:** The path crosses itself at the point (0, 1).\n\n**Example 2:**\n\n**Input:** distance = \\[1,2,3,4\\]\n**Output:** false\n**Explanation:** The path does not cross itself at any point.\n\n**Example 3:**\n\n**Input:** distance = \\[1,1,1,2,1\\]\n**Output:** true\n**Explanation:** The path crosses itself at the point (0, 0).\n\n**Constraints:**\n\n*   `1 <= distance.length <= 105`\n*   `1 <= distance[i] <= 105`",
          "output": "def is_path_crossing(distance):\n    visited = set([(0, 0)])\n    x, y = 0, 0\n    directions = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n    \n    for i, d in enumerate(distance):\n        dx, dy = directions[i % 4]\n        for _ in range(d):\n            x += dx\n            y += dy\n            if (x, y) in visited:\n                return True\n            visited.add((x, y))\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of **unique** strings `words`.\n\nA **palindrome pair** is a pair of integers `(i, j)` such that:\n\n*   `0 <= i, j < words.length`,\n*   `i != j`, and\n*   `words[i] + words[j]` (the concatenation of the two strings) is a palindrome.\n\nReturn _an array of all the **palindrome pairs** of_ `words`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"abcd \", \"dcba \", \"lls \", \"s \", \"sssll \"\\]\n**Output:** \\[\\[0,1\\],\\[1,0\\],\\[3,2\\],\\[2,4\\]\\]\n**Explanation:** The palindromes are \\[ \"abcddcba \", \"dcbaabcd \", \"slls \", \"llssssll \"\\]\n\n**Example 2:**\n\n**Input:** words = \\[ \"bat \", \"tab \", \"cat \"\\]\n**Output:** \\[\\[0,1\\],\\[1,0\\]\\]\n**Explanation:** The palindromes are \\[ \"battab \", \"tabbat \"\\]\n\n**Example 3:**\n\n**Input:** words = \\[ \"a \", \" \"\\]\n**Output:** \\[\\[0,1\\],\\[1,0\\]\\]\n**Explanation:** The palindromes are \\[ \"a \", \"a \"\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 5000`\n*   `0 <= words[i].length <= 300`\n*   `words[i]` consists of lowercase English letters.",
          "output": "def palindrome_pairs(words):\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    result = []\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i == j:\n                continue\n            concat = words[i] + words[j]\n            if is_palindrome(concat):\n                result.append([i, j])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`.\n\nBesides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if **two directly-linked houses were broken into on the same night**.\n\nGiven the `root` of the binary tree, return _the maximum amount of money the thief can rob **without alerting the police**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,2,3,null,3,null,1\\]\n**Output:** 7\n**Explanation:** Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n\n**Example 2:**\n\n**Input:** root = \\[3,4,5,1,3,null,1\\]\n**Output:** 9\n**Explanation:** Maximum amount of money the thief can rob = 4 + 5 = 9.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `0 <= Node.val <= 104`",
          "output": "def rob(self, root: TreeNode) -> int:\n    def rob_helper(node):\n        if not node:\n            return 0, 0\n\n        left_with_node, left_without_node = rob_helper(node.left)\n        right_with_node, right_without_node = rob_helper(node.right)\n\n        with_node = node.val + left_without_node + right_without_node\n        without_node = max(left_with_node, left_without_node) + max(right_with_node, right_without_node)\n        return with_node, without_node\n\n    return max(rob_helper(root))\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _an array_ `ans` _of length_ `n + 1` _such that for each_ `i` (`0 <= i <= n`)_,_ `ans[i]` _is the **number of**_ `1`_**'s** in the binary representation of_ `i`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** \\[0,1,1\\]\n**Explanation:**\n0 --> 0\n1 --> 1\n2 --> 10\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** \\[0,1,1,2,1,2\\]\n**Explanation:**\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n**Constraints:**\n\n*   `0 <= n <= 105`\n\n**Follow up:**\n\n*   It is very easy to come up with a solution with a runtime of `O(n log n)`. Can you do it in linear time `O(n)` and possibly in a single pass?\n*   Can you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?You should make use of what you have produced already. Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous. Or does the odd/even status of the number help you in calculating the number of 1s?",
          "output": "def countBits(n):\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        ans[i] = ans[i & (i - 1)] + 1\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe **depth** of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its **depth**.\n\nReturn _the sum of each integer in_ `nestedList` _multiplied by its **depth**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nestedList = \\[\\[1,1\\],2,\\[1,1\\]\\]\n**Output:** 10\n**Explanation:** Four 1's at depth 2, one 2 at depth 1. 1\\*2 + 1\\*2 + 2\\*1 + 1\\*2 + 1\\*2 = 10.\n\n**Example 2:**\n\n**Input:** nestedList = \\[1,\\[4,\\[6\\]\\]\\]\n**Output:** 27\n**Explanation:** One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1\\*1 + 4\\*2 + 6\\*3 = 27.\n\n**Example 3:**\n\n**Input:** nestedList = \\[0\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nestedList.length <= 50`\n*   The values of the integers in the nested list is in the range `[-100, 100]`.\n*   The maximum **depth** of any integer is less than or equal to `50`.",
          "output": "from typing import List, Union\n\ndef depth_sum(nested_list: List[Union[int, List]]) -> int:\n    def depth_sum_helper(nested_list: List[Union[int, List]], depth: int) -> int:\n        return sum(element * depth if isinstance(element, int) else depth_sum_helper(element, depth + 1) for element in nested_list)\n\n    return depth_sum_helper(nested_list, 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, return _the length of the longest_ _substring_ _of_ `s` _that contains at most_ `k` _**distinct** characters_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"eceba \", k = 2\n**Output:** 3\n**Explanation:** The substring is  \"ece \" with length 3.\n\n**Example 2:**\n\n**Input:** s =  \"aa \", k = 1\n**Output:** 2\n**Explanation:** The substring is  \"aa \" with length 2.\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `0 <= k <= 50`",
          "output": "def length_of_longest_substring_k_distinct(s: str, k: int) -> int:\n    char_count = {}\n    left = 0\n    max_length = 0\n\n    for right, char in enumerate(s):\n        char_count[char] = char_count.get(char, 0) + 1\n\n        while len(char_count) > k:\n            char_count[s[left]] -= 1\n            if char_count[s[left]] == 0:\n                del char_count[s[left]]\n            left += 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n\nImplement the `NestedIterator` class:\n\n*   `NestedIterator(List nestedList)` Initializes the iterator with the nested list `nestedList`.\n*   `int next()` Returns the next integer in the nested list.\n*   `boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.\n\nYour code will be tested with the following pseudocode:\n\ninitialize iterator with nestedList\nres = \\[\\]\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n\nIf `res` matches the expected flattened list, then your code will be judged as correct.\n\n",
          "input": "**Example 1:**\n\n**Input:** nestedList = \\[\\[1,1\\],2,\\[1,1\\]\\]\n**Output:** \\[1,1,2,1,1\\]\n**Explanation:** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: \\[1,1,2,1,1\\].\n\n**Example 2:**\n\n**Input:** nestedList = \\[1,\\[4,\\[6\\]\\]\\]\n**Output:** \\[1,4,6\\]\n**Explanation:** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: \\[1,4,6\\].\n\n**Constraints:**\n\n*   `1 <= nestedList.length <= 500`\n*   The values of the integers in the nested list is in the range `[-106, 106]`.",
          "output": "class NestedIterator:\n    def __init__(self, nestedList):\n        def flatten(nestedList, flatList):\n            for item in nestedList:\n                if isinstance(item, int):\n                    flatList.append(item)\n                else:\n                    flatten(item, flatList)\n        self.flatList = []\n        flatten(nestedList, self.flatList)\n        self.index = 0\n\n    def next(self):\n        result = self.flatList[self.index]\n        self.index += 1\n        return result\n\n    def hasNext(self):\n        return self.index < len(self.flatList)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _`true` if it is a power of four. Otherwise, return `false`_.\n\nAn integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 16\n**Output:** true\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** false\n\n**Example 3:**\n\n**Input:** n = 1\n**Output:** true\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`\n\n**Follow up:** Could you solve it without loops/recursion?",
          "output": "def isPowerOfFour(n: int) -> bool:\n    if n <= 0:\n        return False\n    while n % 4 == 0:\n        n //= 4\n    return n == 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, break it into the sum of `k` **positive integers**, where `k >= 2`, and maximize the product of those integers.\n\nReturn _the maximum product you can get_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** 2 = 1 + 1, 1 \\* 1 = 1.\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 36\n**Explanation:** 10 = 3 + 3 + 4, 3 \\* 3 \\* 4 = 36.\n\n**Constraints:**\n\n*   `2 <= n <= 58`There is a simple O(n) solution to this problem. You may check the breaking results of n ranging from 7 to 10 to discover the regularities.",
          "output": "def integer_break(n):\n    if n <= 3:\n        return n - 1\n    product = 1\n    while n > 4:\n        product *= 3\n        n -= 3\n    return product * n\n"
     },
     {
          "instruction": "Write python code for this problem: Write a function that reverses a string. The input string is given as an array of characters `s`.\n\nYou must do this by modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm) with `O(1)` extra memory.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \\[\"h\",\"e\",\"l\",\"l\",\"o\"\\]\n**Output:** \\[\"o\",\"l\",\"l\",\"e\",\"h\"\\]\n\n**Example 2:**\n\n**Input:** s = \\[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"\\]\n**Output:** \\[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is a [printable ascii character](https://en.wikipedia.org/wiki/ASCII#Printable_characters).The entire logic for reversing a string is based on using the opposite directional two-pointer approach!",
          "output": "def reverseString(s: List[str]) -> None:\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left, right = left + 1, right - 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, reverse only all the vowels in the string and return it.\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both lower and upper cases, more than once.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"hello\"\n**Output:** \"holle\"\n\n**Example 2:**\n\n**Input:** s = \"leetcode\"\n**Output:** \"leotcede\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 3 * 105`\n*   `s` consist of **printable ASCII** characters.",
          "output": "def reverseVowels(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.\n\nImplement the `MovingAverage` class:\n\n*   `MovingAverage(int size)` Initializes the object with the size of the window `size`.\n*   `double next(int val)` Returns the moving average of the last `size` values of the stream.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MovingAverage \",  \"next \",  \"next \",  \"next \",  \"next \"\\]\n\\[\\[3\\], \\[1\\], \\[10\\], \\[3\\], \\[5\\]\\]\n**Output**\n\\[null, 1.0, 5.5, 4.66667, 6.0\\]\n\n**Explanation**\nMovingAverage movingAverage = new MovingAverage(3);\nmovingAverage.next(1); // return 1.0 = 1 / 1\nmovingAverage.next(10); // return 5.5 = (1 + 10) / 2\nmovingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3\nmovingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3\n\n**Constraints:**\n\n*   `1 <= size <= 1000`\n*   `-105 <= val <= 105`\n*   At most `104` calls will be made to `next`.",
          "output": "from collections import deque\n\nclass MovingAverage:\n    def __init__(self, size: int):\n        self.queue = deque()\n        self.maxSize = size\n        self.sum = 0.0\n\n    def next(self, val: int) -> float:\n        if len(self.queue) == self.maxSize:\n            self.sum -= self.queue.popleft()\n        self.queue.append(val)\n        self.sum += val\n        return self.sum / len(self.queue)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return _the_ `k` _most frequent elements_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1,2,2,3\\], k = 2\n**Output:** \\[1,2\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1\\], k = 1\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`\n*   `k` is in the range `[1, the number of unique elements in the array]`.\n*   It is **guaranteed** that the answer is **unique**.\n\n**Follow up:** Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size.",
          "output": "from heapq import heappush, heappop\nfrom collections import Counter\n\ndef k_most_frequent(nums, k):\n    frequency = Counter(nums)\n    min_heap = []\n\n    for num, freq in frequency.items():\n        heappush(min_heap, (freq, num))\n        if len(min_heap) > k:\n            heappop(min_heap)\n\n    return [heappop(min_heap)[1] for _ in range(k)]\n"
     },
     {
          "instruction": "Write python code for this problem: Assume the following rules are for the tic-tac-toe game on an `n x n` board between two players:\n\n1.  A move is guaranteed to be valid and is placed on an empty block.\n2.  Once a winning condition is reached, no more moves are allowed.\n3.  A player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game.\n\nImplement the `TicTacToe` class:\n\n*   `TicTacToe(int n)` Initializes the object the size of the board `n`.\n*   `int move(int row, int col, int player)` Indicates that the player with id `player` plays at the cell `(row, col)` of the board. The move is guaranteed to be a valid move, and the two players alternate in making moves. Return\n    *   `0` if there is **no winner** after the move,\n    *   `1` if **player 1** is the winner after the move, or\n    *   `2` if **player 2** is the winner after the move.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"TicTacToe \",  \"move \",  \"move \",  \"move \",  \"move \",  \"move \",  \"move \",  \"move \"\\]\n\\[\\[3\\], \\[0, 0, 1\\], \\[0, 2, 2\\], \\[2, 2, 1\\], \\[1, 1, 2\\], \\[2, 0, 1\\], \\[1, 0, 2\\], \\[2, 1, 1\\]\\]\n**Output**\n\\[null, 0, 0, 0, 0, 0, 0, 1\\]\n\n**Explanation**\nTicTacToe ticTacToe = new TicTacToe(3);\nAssume that player 1 is  \"X \" and player 2 is  \"O \" in the board.\nticTacToe.move(0, 0, 1); // return 0 (no one wins)\n|X| | |\n| | | |    // Player 1 makes a move at (0, 0).\n| | | |\n\nticTacToe.move(0, 2, 2); // return 0 (no one wins)\n|X| |O|\n| | | |    // Player 2 makes a move at (0, 2).\n| | | |\n\nticTacToe.move(2, 2, 1); // return 0 (no one wins)\n|X| |O|\n| | | |    // Player 1 makes a move at (2, 2).\n| | |X|\n\nticTacToe.move(1, 1, 2); // return 0 (no one wins)\n|X| |O|\n| |O| |    // Player 2 makes a move at (1, 1).\n| | |X|\n\nticTacToe.move(2, 0, 1); // return 0 (no one wins)\n|X| |O|\n| |O| |    // Player 1 makes a move at (2, 0).\n|X| |X|\n\nticTacToe.move(1, 0, 2); // return 0 (no one wins)\n|X| |O|\n|O|O| |    // Player 2 makes a move at (1, 0).\n|X| |X|\n\nticTacToe.move(2, 1, 1); // return 1 (player 1 wins)\n|X| |O|\n|O|O| |    // Player 1 makes a move at (2, 1).\n|X|X|X|\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   player is `1` or `2`.\n*   `0 <= row, col < n`\n*   `(row, col)` are **unique** for each different call to `move`.\n*   At most `n2` calls will be made to `move`.\n\n**Follow-up:** Could you do better than `O(n2)` per `move()` operation?Could you trade extra space such that move() operation can be done in O(1)? You need two arrays: int rows[n], int cols[n], plus two variables: diagonal, anti_diagonal.",
          "output": "class TicTacToe:\n    def __init__(self, n: int):\n        self.rows, self.cols = [0] * n, [0] * n\n        self.diagonal = self.anti_diagonal = self.n = n\n\n    def move(self, row: int, col: int, player: int) -> int:\n        to_add = 1 if player == 1 else -1\n\n        self.rows[row] += to_add\n        self.cols[col] += to_add\n\n        if row == col:\n            self.diagonal += to_add\n        if row + col == self.n - 1:\n            self.anti_diagonal += to_add\n\n        if (abs(self.rows[row]) == self.n or abs(self.cols[col]) == self.n\n                or abs(self.diagonal) == self.n or abs(self.anti_diagonal) == self.n):\n            return player\n\n        return 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must be **unique** and you may return the result in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2,2,1\\], nums2 = \\[2,2\\]\n**Output:** \\[2\\]\n\n**Example 2:**\n\n**Input:** nums1 = \\[4,9,5\\], nums2 = \\[9,4,9,8,4\\]\n**Output:** \\[9,4\\]\n**Explanation:** \\[4,9\\] is also accepted.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `0 <= nums1[i], nums2[i] <= 1000`",
          "output": "def intersection(nums1, nums2):\n    set1 = set(nums1)\n    result = set1.intersection(nums2)\n    return list(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2,2,1\\], nums2 = \\[2,2\\]\n**Output:** \\[2,2\\]\n\n**Example 2:**\n\n**Input:** nums1 = \\[4,9,5\\], nums2 = \\[9,4,9,8,4\\]\n**Output:** \\[4,9\\]\n**Explanation:** \\[9,4\\] is also accepted.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `0 <= nums1[i], nums2[i] <= 1000`\n\n**Follow up:**\n\n*   What if the given array is already sorted? How would you optimize your algorithm?\n*   What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?\n*   What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?",
          "output": "def intersect(nums1, nums2):\n    count_map = {}\n    result = []\n    \n    for num in nums1:\n        count_map[num] = count_map.get(num, 0) + 1\n    \n    for num in nums2:\n        if count_map.get(num, 0) > 0:\n            result.append(num)\n            count_map[num] -= 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an \"unlock pattern \" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a **valid** unlock pattern if both of the following are true:\n\n*   All the dots in the sequence are **distinct**.\n*   If the line segment connecting two consecutive dots in the sequence passes through the **center** of any other dot, the other dot **must have previously appeared** in the sequence. No jumps through the center non-selected dots are allowed.\n    *   For example, connecting dots `2` and `9` without dots `5` or `6` appearing beforehand is valid because the line from dot `2` to dot `9` does not pass through the center of either dot `5` or `6`.\n    *   However, connecting dots `1` and `3` without dot `2` appearing beforehand is invalid because the line from dot `1` to dot `3` passes through the center of dot `2`.\n\nHere are some example valid and invalid unlock patterns:\n\n*   The 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence.\n*   The 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence.\n*   The 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence.\n*   The 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence.\n\nGiven two integers `m` and `n`, return _the **number of unique and valid unlock patterns** of the Android grid lock screen that consist of **at least**_ `m` _keys and **at most**_ `n` _keys._\n\nTwo unlock patterns are considered **unique** if there is a dot in one sequence that is not in the other, or the order of the dots is different.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 1, n = 1\n**Output:** 9\n\n**Example 2:**\n\n**Input:** m = 1, n = 2\n**Output:** 65\n\n**Constraints:**\n\n*   `1 <= m, n <= 9`",
          "output": "def numberOfPatterns(m: int, n: int) -> int:\n    def dfs(curr, remaining):\n        if remaining < 0:\n            return 0\n        if remaining == 0:\n            return 1\n\n        visited[curr] = True\n        cnt = 0\n        for next in range(1, 10):\n            if not visited[next] and (jumps[curr][next] == 0 or visited[jumps[curr][next]]):\n                cnt += dfs(next, remaining - 1)\n        visited[curr] = False\n\n        return cnt\n\n    jumps = [[0] * 10 for _ in range(10)]\n    jumps[1][3] = jumps[3][1] = 2\n    jumps[1][7] = jumps[7][1] = 4\n    jumps[3][9] = jumps[9][3] = 6\n    jumps[7][9] = jumps[9][7] = 8\n    jumps[1][9] = jumps[9][1] = jumps[2][8] = jumps[8][2] = jumps[3][7] = jumps[7][3] = jumps[4][6] = jumps[6][4] = 5\n\n    visited = [False] * 10\n\n    cnt = 0\n    for i in range(m, n + 1):\n        cnt += dfs(1, i - 1) * 4  # 1, 3, 7, 9\n        cnt += dfs(2, i - 1) * 4  # 2, 4, 6, 8\n        cnt += dfs(5, i - 1)      # 5\n\n    return cnt\n"
     },
     {
          "instruction": "Write python code for this problem: Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals.\n\nImplement the `SummaryRanges` class:\n\n*   `SummaryRanges()` Initializes the object with an empty stream.\n*   `void addNum(int value)` Adds the integer `value` to the stream.\n*   `int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`. The answer should be sorted by `starti`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"SummaryRanges \",  \"addNum \",  \"getIntervals \",  \"addNum \",  \"getIntervals \",  \"addNum \",  \"getIntervals \",  \"addNum \",  \"getIntervals \",  \"addNum \",  \"getIntervals \"\\]\n\\[\\[\\], \\[1\\], \\[\\], \\[3\\], \\[\\], \\[7\\], \\[\\], \\[2\\], \\[\\], \\[6\\], \\[\\]\\]\n**Output**\n\\[null, null, \\[\\[1, 1\\]\\], null, \\[\\[1, 1\\], \\[3, 3\\]\\], null, \\[\\[1, 1\\], \\[3, 3\\], \\[7, 7\\]\\], null, \\[\\[1, 3\\], \\[7, 7\\]\\], null, \\[\\[1, 3\\], \\[6, 7\\]\\]\\]\n\n**Explanation**\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = \\[1\\]\nsummaryRanges.getIntervals(); // return \\[\\[1, 1\\]\\]\nsummaryRanges.addNum(3);      // arr = \\[1, 3\\]\nsummaryRanges.getIntervals(); // return \\[\\[1, 1\\], \\[3, 3\\]\\]\nsummaryRanges.addNum(7);      // arr = \\[1, 3, 7\\]\nsummaryRanges.getIntervals(); // return \\[\\[1, 1\\], \\[3, 3\\], \\[7, 7\\]\\]\nsummaryRanges.addNum(2);      // arr = \\[1, 2, 3, 7\\]\nsummaryRanges.getIntervals(); // return \\[\\[1, 3\\], \\[7, 7\\]\\]\nsummaryRanges.addNum(6);      // arr = \\[1, 2, 3, 6, 7\\]\nsummaryRanges.getIntervals(); // return \\[\\[1, 3\\], \\[6, 7\\]\\]\n\n**Constraints:**\n\n*   `0 <= value <= 104`\n*   At most `3 * 104` calls will be made to `addNum` and `getIntervals`.\n*   At most `102` calls will be made to `getIntervals`.\n\n**Follow up:** What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?",
          "output": "from collections import OrderedDict\n\nclass SummaryRanges:\n\n    def __init__(self):\n        self.intervals = OrderedDict()\n\n    def addNum(self, val: int) -> None:\n        if not self.intervals or next(iter(self.intervals)) > val + 1:\n            self.intervals[val] = val\n        else:\n            keys = list(self.intervals.keys())\n            idx = bisect_left(keys, val)\n            if idx > 0 and keys[idx - 1] <= val <= self.intervals[keys[idx - 1]]:\n                pass\n            elif idx < len(keys) and val + 1 == keys[idx]:\n                self.intervals[val] = self.intervals[keys[idx]]\n                del self.intervals[keys[idx]]\n            else:\n                self.intervals[val] = val\n\n    def getIntervals(self):\n        return list(self.intervals.items())\n"
     },
     {
          "instruction": "Write python code for this problem: Design a [Snake game](https://en.wikipedia.org/wiki/Snake_(video_game)) that is played on a device with screen size `height x width`. [Play the game online](http://patorjk.com/games/snake/) if you are not familiar with the game.\n\nThe snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit.\n\nYou are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`.\n\nEach piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.\n\nWhen a piece of food appears on the screen, it is **guaranteed** that it will not appear on a block occupied by the snake.\n\nThe game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies **after** moving (i.e. a snake of length 4 cannot run into itself).\n\nImplement the `SnakeGame` class:\n\n*   `SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`.\n*   `int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"SnakeGame \",  \"move \",  \"move \",  \"move \",  \"move \",  \"move \",  \"move \"\\]\n\\[\\[3, 2, \\[\\[1, 2\\], \\[0, 1\\]\\]\\], \\[ \"R \"\\], \\[ \"D \"\\], \\[ \"R \"\\], \\[ \"U \"\\], \\[ \"L \"\\], \\[ \"U \"\\]\\]\n**Output**\n\\[null, 0, 0, 1, 1, 2, -1\\]\n\n**Explanation**\nSnakeGame snakeGame = new SnakeGame(3, 2, \\[\\[1, 2\\], \\[0, 1\\]\\]);\nsnakeGame.move( \"R \"); // return 0\nsnakeGame.move( \"D \"); // return 0\nsnakeGame.move( \"R \"); // return 1, snake eats the first piece of food. The second piece of food appears at (0, 1).\nsnakeGame.move( \"U \"); // return 1\nsnakeGame.move( \"L \"); // return 2, snake eats the second food. No more food appears.\nsnakeGame.move( \"U \"); // return -1, game over because snake collides with border\n\n**Constraints:**\n\n*   `1 <= width, height <= 104`\n*   `1 <= food.length <= 50`\n*   `food[i].length == 2`\n*   `0 <= ri < height`\n*   `0 <= ci < width`\n*   `direction.length == 1`\n*   `direction` is `'U'`, `'D'`, `'L'`, or `'R'`.\n*   At most `104` calls will be made to `move`.",
          "output": "from collections import deque\n\nclass SnakeGame:\n    def __init__(self, width: int, height: int, food: List[List[int]]):\n        self.width = width\n        self.height = height\n        self.food = food\n        self.pos = 0\n        self.score = 0\n        self.snake = deque([(0, 0)])\n        self.occupied = {(0, 0)}\n        self.dx = {'U': -1, 'D': 1, 'L': 0, 'R': 0}\n        self.dy = {'U': 0, 'D': 0, 'L': -1, 'R': 1}\n\n    def move(self, direction: str) -> int:\n        new_x = self.snake[-1][0] + self.dx[direction]\n        new_y = self.snake[-1][1] + self.dy[direction]\n\n        if new_x < 0 or new_x >= self.height or new_y < 0 or new_y >= self.width:\n            return -1\n\n        new_head = (new_x, new_y)\n        tail = self.snake.popleft()\n\n        if self.pos < len(self.food) and self.food[self.pos] == list(new_head):\n            self.score += 1\n            self.pos += 1\n        else:\n            self.occupied.remove(tail)\n\n        if new_head in self.occupied:\n            return -1\n\n        self.snake.append(new_head)\n        self.occupied.add(new_head)\n        return self.score\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope.\n\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n\nReturn _the maximum number of envelopes you can Russian doll (i.e., put one inside the other)_.\n\n**Note:** You cannot rotate an envelope.\n\n",
          "input": "**Example 1:**\n\n**Input:** envelopes = \\[\\[5,4\\],\\[6,4\\],\\[6,7\\],\\[2,3\\]\\]\n**Output:** 3\n**Explanation:** The maximum number of envelopes you can Russian doll is `3` (\\[2,3\\] => \\[5,4\\] => \\[6,7\\]).\n\n**Example 2:**\n\n**Input:** envelopes = \\[\\[1,1\\],\\[1,1\\],\\[1,1\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= envelopes.length <= 105`\n*   `envelopes[i].length == 2`\n*   `1 <= wi, hi <= 105`",
          "output": "from bisect import bisect_left\n\ndef max_envelopes(envelopes):\n    envelopes.sort(key=lambda x: (x[0], -x[1]))\n    dp = []\n    \n    for _, h in envelopes:\n        idx = bisect_left(dp, h)\n        if idx == len(dp):\n            dp.append(h)\n        else:\n            dp[idx] = h\n\n    return len(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed.\n\nImplement the `Twitter` class:\n\n*   `Twitter()` Initializes your twitter object.\n*   `void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.\n*   `List getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be **ordered from most recent to least recent**.\n*   `void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.\n*   `void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Twitter \",  \"postTweet \",  \"getNewsFeed \",  \"follow \",  \"postTweet \",  \"getNewsFeed \",  \"unfollow \",  \"getNewsFeed \"\\]\n\\[\\[\\], \\[1, 5\\], \\[1\\], \\[1, 2\\], \\[2, 6\\], \\[1\\], \\[1, 2\\], \\[1\\]\\]\n**Output**\n\\[null, null, \\[5\\], null, null, \\[6, 5\\], null, \\[5\\]\\]\n\n**Explanation**\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> \\[5\\]. return \\[5\\]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> \\[6, 5\\]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> \\[5\\], since user 1 is no longer following user 2.\n\n**Constraints:**\n\n*   `1 <= userId, followerId, followeeId <= 500`\n*   `0 <= tweetId <= 104`\n*   All the tweets have **unique** IDs.\n*   At most `3 * 104` calls will be made to `postTweet`, `getNewsFeed`, `follow`, and `unfollow`.",
          "output": "from collections import defaultdict\nfrom typing import List\n\nclass Twitter:\n\n    class Tweet:\n        def __init__(self, time, tweetId):\n            self.time = time\n            self.tweetId = tweetId\n\n    def __init__(self):\n        self.tweets = defaultdict(list)\n        self.following = defaultdict(set)\n        self.timeStamp = 0\n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        self.tweets[userId].append(self.Tweet(self.timeStamp, tweetId))\n        self.timeStamp += 1\n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        feed = self.tweets[userId][:]\n        for user in self.following[userId]:\n            feed.extend(self.tweets[user])\n\n        feed.sort(key=lambda x: x.time, reverse=True)\n        return [t.tweetId for t in feed[:10]]\n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        if followerId != followeeId:\n            self.following[followerId].add(followeeId)\n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        self.following[followerId].discard(followeeId)\n"
     },
     {
          "instruction": "Write python code for this problem: Given `n` points on a 2D plane, find if there is such a line parallel to the y-axis that reflects the given points symmetrically.\n\nIn other words, answer whether or not if there exists a line that after reflecting all points over the given line, the original points' set is the same as the reflected ones.\n\n**Note** that there can be repeated points.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[-1,1\\]\\]\n**Output:** true\n**Explanation:** We can choose the line x = 0.\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,1\\],\\[-1,-1\\]\\]\n**Output:** false\n**Explanation:** We can't choose a line.\n\n**Constraints:**\n\n*   `n == points.length`\n*   `1 <= n <= 104`\n*   `-108 <= points[i][j] <= 108`\n\n**Follow up:** Could you do better than `O(n2)`?Find the smallest and largest x-value for all points. If there is a line then it should be at y = (minX + maxX) / 2. For each point, make sure that it has a reflected point in the opposite side.",
          "output": "def isReflected(points):\n    min_x = min(point[0] for point in points)\n    max_x = max(point[0] for point in points)\n    point_set = {(point[0], point[1]) for point in points}\n    \n    sum_x = min_x + max_x\n    for point in points:\n        if (sum_x - point[0], point[1]) not in point_set:\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 91\n**Explanation:** The answer should be the total numbers in the range of 0 <= x < 100, excluding 11,22,33,44,55,66,77,88,99\n\n**Example 2:**\n\n**Input:** n = 0\n**Output:** 1\n\n**Constraints:**\n\n*   `0 <= n <= 8`A direct way is to use the backtracking approach. Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10n. This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics. Let f(k) = count of numbers with unique digits with length equals k. f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0].",
          "output": "def countNumbersWithUniqueDigits(n):\n    if n == 0:\n        return 1\n    \n    total = 10\n    unique_digits = 9\n    current_available_digits = 9\n    \n    while n > 1 and current_available_digits > 0:\n        unique_digits *= current_available_digits\n        total += unique_digits\n        current_available_digits -= 1\n        n -= 1\n        \n    return total\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, rearrange `s` such that the same characters are **at least** distance `k` from each other. If it is not possible to rearrange the string, return an empty string `\" \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aabbcc \", k = 3\n**Output:**  \"abcabc \"\n**Explanation:** The same letters are at least a distance of 3 from each other.\n\n**Example 2:**\n\n**Input:** s =  \"aaabc \", k = 3\n**Output:**  \" \"\n**Explanation:** It is not possible to rearrange the string.\n\n**Example 3:**\n\n**Input:** s =  \"aaadbbcc \", k = 2\n**Output:**  \"abacabcd \"\n**Explanation:** The same letters are at least a distance of 2 from each other.\n\n**Constraints:**\n\n*   `1 <= s.length <= 3 * 105`\n*   `s` consists of only lowercase English letters.\n*   `0 <= k <= s.length`",
          "output": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s, k):\n    if k == 0:\n        return s\n\n    counter = Counter(s)\n    max_heap = [(-count, char) for char, count in counter.items()]\n    heapq.heapify(max_heap)\n\n    result = []\n    while max_heap:\n        temp = []\n\n        for _ in range(k):\n            if not max_heap:\n                break\n\n            count, char = heapq.heappop(max_heap)\n            result.append(char)\n\n            if count + 1 < 0:\n                temp.append((count + 1, char))\n\n        for item in temp:\n            heapq.heappush(max_heap, item)\n\n        if not max_heap:\n            break\n\n        if len(result) < len(s):\n            result.extend([' '] * (k - len(temp)))\n\n    if len(result) < len(s):\n        return \"\"\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Design a logger system that receives a stream of messages along with their timestamps. Each **unique** message should only be printed **at most every 10 seconds** (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`).\n\nAll messages will come in chronological order. Several messages may arrive at the same timestamp.\n\nImplement the `Logger` class:\n\n*   `Logger()` Initializes the `logger` object.\n*   `bool shouldPrintMessage(int timestamp, string message)` Returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Logger \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \"\\]\n\\[\\[\\], \\[1,  \"foo \"\\], \\[2,  \"bar \"\\], \\[3,  \"foo \"\\], \\[8,  \"bar \"\\], \\[10,  \"foo \"\\], \\[11,  \"foo \"\\]\\]\n**Output**\n\\[null, true, true, false, false, false, true\\]\n\n**Explanation**\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1,  \"foo \");  // return true, next allowed timestamp for  \"foo \" is 1 + 10 = 11\nlogger.shouldPrintMessage(2,  \"bar \");  // return true, next allowed timestamp for  \"bar \" is 2 + 10 = 12\nlogger.shouldPrintMessage(3,  \"foo \");  // 3 < 11, return false\nlogger.shouldPrintMessage(8,  \"bar \");  // 8 < 12, return false\nlogger.shouldPrintMessage(10,  \"foo \"); // 10 < 11, return false\nlogger.shouldPrintMessage(11,  \"foo \"); // 11 >= 11, return true, next allowed timestamp for  \"foo \" is 11 + 10 = 21\n\n**Constraints:**\n\n*   `0 <= timestamp <= 109`\n*   Every `timestamp` will be passed in non-decreasing order (chronological order).\n*   `1 <= message.length <= 30`\n*   At most `104` calls will be made to `shouldPrintMessage`.",
          "output": "class Logger:\n    def __init__(self):\n        self.message_timestamps = {}\n\n    def shouldPrintMessage(self, timestamp: int, message: str) -> bool:\n        if message not in self.message_timestamps or timestamp - self.message_timestamps[message] >= 10:\n            self.message_timestamps[message] = timestamp\n            return True\n        return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **sorted** integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return _the array in a sorted order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-4,-2,2,4\\], a = 1, b = 3, c = 5\n**Output:** \\[3,9,15,33\\]\n\n**Example 2:**\n\n**Input:** nums = \\[-4,-2,2,4\\], a = -1, b = 3, c = 5\n**Output:** \\[-23,-5,1,7\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 200`\n*   `-100 <= nums[i], a, b, c <= 100`\n*   `nums` is sorted in **ascending** order.\n\n**Follow up:** Could you solve it in `O(n)` time?x^2 + x  will form a parabola. Parameter A in:  A * x^2 + B * x + C dictates the shape of the parabola.\r\nPositive A means the parabola remains concave (high-low-high), but negative A inverts the parabola to be convex (low-high-low).",
          "output": "def sort_transformed_array(nums, a, b, c):\n    result = [0] * len(nums)\n    i, j = 0, len(nums) - 1\n    index = len(nums) - 1 if a >= 0 else 0\n    \n    while i <= j:\n        left = nums[i] * nums[i] * a + nums[i] * b + c\n        right = nums[j] * nums[j] * a + nums[j] * b + c\n        \n        if a >= 0:\n            if left >= right:\n                result[index] = left\n                index -= 1\n                i += 1\n            else:\n                result[index] = right\n                index -= 1\n                j -= 1\n        else:\n            if left <= right:\n                result[index] = left\n                index += 1\n                i += 1\n            else:\n                result[index] = right\n                index += 1\n                j -= 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return _the maximum enemies you can kill using one bomb_. You can only place the bomb in an empty cell.\n\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[ \"0 \", \"E \", \"0 \", \"0 \"\\],\\[ \"E \", \"0 \", \"W \", \"E \"\\],\\[ \"0 \", \"E \", \"0 \", \"0 \"\\]\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** grid = \\[\\[ \"W \", \"W \", \"W \"\\],\\[ \"0 \", \"0 \", \"0 \"\\],\\[ \"E \", \"E \", \"E \"\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 500`\n*   `grid[i][j]` is either `'W'`, `'E'`, or `'0'`.",
          "output": "def maxKilledEnemies(grid):\n    if not grid: return 0\n    m, n, result, rowhits = len(grid), len(grid[0]), 0, 0\n    colhits = [0] * n\n    for i in range(m):\n        for j in range(n):\n            if j == 0 or grid[i][j - 1] == 'W':\n                rowhits = 0\n                k = j\n                while k < n and grid[i][k] != 'W':\n                    rowhits += grid[i][k] == 'E'\n                    k += 1\n            if i == 0 or grid[i - 1][j] == 'W':\n                colhits[j] = 0\n                k = i\n                while k < m and grid[k][j] != 'W':\n                    colhits[j] += grid[k][j] == 'E'\n                    k += 1\n            if grid[i][j] == '0':\n                result = max(result, rowhits + colhits[j])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds).\n\nYour system should accept a `timestamp` parameter (**in seconds** granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). Several hits may arrive roughly at the same time.\n\nImplement the `HitCounter` class:\n\n*   `HitCounter()` Initializes the object of the hit counter system.\n*   `void hit(int timestamp)` Records a hit that happened at `timestamp` (**in seconds**). Several hits may happen at the same `timestamp`.\n*   `int getHits(int timestamp)` Returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"HitCounter \",  \"hit \",  \"hit \",  \"hit \",  \"getHits \",  \"hit \",  \"getHits \",  \"getHits \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[3\\], \\[4\\], \\[300\\], \\[300\\], \\[301\\]\\]\n**Output**\n\\[null, null, null, null, 3, null, 4, 3\\]\n\n**Explanation**\nHitCounter hitCounter = new HitCounter();\nhitCounter.hit(1);       // hit at timestamp 1.\nhitCounter.hit(2);       // hit at timestamp 2.\nhitCounter.hit(3);       // hit at timestamp 3.\nhitCounter.getHits(4);   // get hits at timestamp 4, return 3.\nhitCounter.hit(300);     // hit at timestamp 300.\nhitCounter.getHits(300); // get hits at timestamp 300, return 4.\nhitCounter.getHits(301); // get hits at timestamp 301, return 3.\n\n**Constraints:**\n\n*   `1 <= timestamp <= 2 * 109`\n*   All the calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing).\n*   At most `300` calls will be made to `hit` and `getHits`.\n\n**Follow up:** What if the number of hits per second could be huge? Does your design scale?",
          "output": "from collections import deque\n\nclass HitCounter:\n\n    def __init__(self):\n        self.queue = deque()\n\n    def hit(self, timestamp: int) -> None:\n        self.queue.append(timestamp)\n\n    def getHits(self, timestamp: int) -> int:\n        while self.queue and self.queue[0] <= timestamp - 300:\n            self.queue.popleft()\n        return len(self.queue)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` matrix `matrix` and an integer `k`, return _the max sum of a rectangle in the matrix such that its sum is no larger than_ `k`.\n\nIt is **guaranteed** that there will be a rectangle with a sum no larger than `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,0,1\\],\\[0,-2,3\\]\\], k = 2\n**Output:** 2\n**Explanation:** Because the sum of the blue rectangle \\[\\[0, 1\\], \\[-2, 3\\]\\] is 2, and 2 is the max number no larger than k (k = 2).\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[2,2,-1\\]\\], k = 3\n**Output:** 3\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 100`\n*   `-100 <= matrix[i][j] <= 100`\n*   `-105 <= k <= 105`\n\n**Follow up:** What if the number of rows is much larger than the number of columns?",
          "output": "from sortedcontainers import SortedList\n\ndef maxSumSubmatrix(matrix, k):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    max_sum = float('-inf')\n\n    for l in range(cols):\n        sums = [0] * rows\n        for r in range(l, cols):\n            for i in range(rows):\n                sums[i] += matrix[i][r]\n\n            sorted_sums = SortedList()\n            sorted_sums.add(0)\n            curr_sum = 0\n            for sum in sums:\n                curr_sum += sum\n                it = sorted_sums.bisect_left(curr_sum - k)\n                if it != len(sorted_sums):\n                    max_sum = max(max_sum, curr_sum - sorted_sums[it])\n                sorted_sums.add(curr_sum)\n\n    return max_sum\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe **depth** of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its **depth**. Let `maxDepth` be the **maximum depth** of any integer.\n\nThe **weight** of an integer is `maxDepth - (the depth of the integer) + 1`.\n\nReturn _the sum of each integer in_ `nestedList` _multiplied by its **weight**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nestedList = \\[\\[1,1\\],2,\\[1,1\\]\\]\n**Output:** 8\n**Explanation:** Four 1's with a weight of 1, one 2 with a weight of 2.\n1\\*1 + 1\\*1 + 2\\*2 + 1\\*1 + 1\\*1 = 8\n\n**Example 2:**\n\n**Input:** nestedList = \\[1,\\[4,\\[6\\]\\]\\]\n**Output:** 17\n**Explanation:** One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1.\n1\\*3 + 4\\*2 + 6\\*1 = 17\n\n**Constraints:**\n\n*   `1 <= nestedList.length <= 50`\n*   The values of the integers in the nested list is in the range `[-100, 100]`.\n*   The maximum **depth** of any integer is less than or equal to `50`.",
          "output": "from typing import List, Union\n\nNestedInteger = Union[int, List[Union[int, \"NestedInteger\"]]]\n\ndef depthSumInverse(nestedList: List[NestedInteger]) -> int:\n    max_depth = max_depth_helper(nestedList)\n    return sum_helper(nestedList, max_depth)\n\ndef max_depth_helper(nested_list: List[NestedInteger]) -> int:\n    depth = 1\n    for nested in nested_list:\n        if isinstance(nested, list):\n            depth = max(depth, 1 + max_depth_helper(nested))\n    return depth\n\ndef sum_helper(nested_list: List[NestedInteger], depth: int) -> int:\n    sum = 0\n    for nested in nested_list:\n        if isinstance(nested, int):\n            sum += depth * nested\n        else:\n            sum += sum_helper(nested, depth - 1)\n    return sum\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.\n\nIf `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained **within one or both buckets** by the end.\n\nOperations allowed:\n\n*   Fill any of the jugs with water.\n*   Empty any of the jugs.\n*   Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.\n\n",
          "input": "**Example 1:**\n\n**Input:** jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n**Output:** true\n**Explanation:** The famous [Die Hard](https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01) example \n\n**Example 2:**\n\n**Input:** jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n**Output:** false\n\n**Example 3:**\n\n**Input:** jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`",
          "output": "def canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity):\n    if targetCapacity > jug1Capacity + jug2Capacity:\n        return False\n    if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity or jug1Capacity + jug2Capacity == targetCapacity:\n        return True\n    return targetCapacity % gcd(jug1Capacity, jug2Capacity) == 0\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, collect a tree's nodes as if you were doing this:\n\n*   Collect all the leaf nodes.\n*   Remove all the leaf nodes.\n*   Repeat until the tree is empty.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5\\]\n**Output:** \\[\\[4,5,3\\],\\[2\\],\\[1\\]\\]\nExplanation:\n\\[\\[3,5,4\\],\\[2\\],\\[1\\]\\] and \\[\\[3,4,5\\],\\[2\\],\\[1\\]\\] are also considered correct answers since per each level it does not matter the order on which elements are returned.\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[\\[1\\]\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `-100 <= Node.val <= 100`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_leaves(node, result, level):\n    if not node:\n        return -1\n    left_level = find_leaves(node.left, result, level + 1)\n    right_level = find_leaves(node.right, result, level + 1)\n    level = max(left_level, right_level) + 1\n    if len(result) <= level:\n        result.append([])\n    result[level].append(node.val)\n    return level\n\ndef findLeaves(root):\n    result = []\n    find_leaves(root, result, 0)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer num, return `true` _if_ `num` _is a perfect square or_ `false` _otherwise_.\n\nA **perfect square** is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n\nYou must not use any built-in library function, such as `sqrt`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 16\n**Output:** true\n**Explanation:** We return true because 4 \\* 4 = 16 and 4 is an integer.\n\n**Example 2:**\n\n**Input:** num = 14\n**Output:** false\n**Explanation:** We return false because 3.742 \\* 3.742 = 14 and 3.742 is not an integer.\n\n**Constraints:**\n\n*   `1 <= num <= 231 - 1`",
          "output": "def is_perfect_square(num: int) -> bool:\n    if num < 2:\n        return True\n    left, right = 2, num // 2\n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n        if square == num:\n            return True\n        if square > num:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given a set of **distinct** positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:\n\n*   `answer[i] % answer[j] == 0`, or\n*   `answer[j] % answer[i] == 0`\n\nIf there are multiple solutions, return any of them.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** \\[1,2\\]\n**Explanation:** \\[1,3\\] is also accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,4,8\\]\n**Output:** \\[1,2,4,8\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 2 * 109`\n*   All the integers in `nums` are **unique**.",
          "output": "def largestDivisibleSubset(nums):\n    nums.sort()\n    n = len(nums)\n    count = [1] * n\n    prev = [-1] * n\n\n    max_idx = 0\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0 and count[i] < count[j] + 1:\n                count[i] = count[j] + 1\n                prev[i] = j\n        if count[max_idx] < count[i]:\n            max_idx = i\n\n    res = []\n    i = max_idx\n    while i >= 0:\n        res.append(nums[i])\n        i = prev[i]\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given a non-negative integer represented as a linked list of digits, _plus one to the integer_.\n\nThe digits are stored such that the most significant digit is at the `head` of the list.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3\\]\n**Output:** \\[1,2,4\\]\n\n**Example 2:**\n\n**Input:** head = \\[0\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the linked list is in the range `[1, 100]`.\n*   `0 <= Node.val <= 9`\n*   The number represented by the linked list does not contain leading zeros except for the zero itself.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef plusOne(head: ListNode) -> ListNode:\n    def plusOneDfs(node):\n        if not node:\n            return 1\n        carry = plusOneDfs(node.next)\n        if carry + node.val == 10:\n            node.val = 0\n            return 1\n        else:\n            node.val += carry\n            return 0\n\n    if not head:\n        return head\n    carry = plusOneDfs(head)\n    if carry == 1:\n        new_head = ListNode(1)\n        new_head.next = head\n        return new_head\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`.\n\nYou have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`.\n\nReturn `arr` _after applying all the_ `updates`.\n\n",
          "input": "**Example 1:**\n\n**Input:** length = 5, updates = \\[\\[1,3,2\\],\\[2,4,3\\],\\[0,2,-2\\]\\]\n**Output:** \\[-2,0,3,5,3\\]\n\n**Example 2:**\n\n**Input:** length = 10, updates = \\[\\[2,4,6\\],\\[5,6,8\\],\\[1,9,-4\\]\\]\n**Output:** \\[0,-4,2,2,2,4,4,-4,-4,-4\\]\n\n**Constraints:**\n\n*   `1 <= length <= 105`\n*   `0 <= updates.length <= 104`\n*   `0 <= startIdxi <= endIdxi < length`\n*   `-1000 <= inci <= 1000`Thinking of using advanced data structures? You are thinking it too complicated. For each update operation, do you really need to update all elements between i and j? Update only the first and end element is sufficient. The optimal time complexity is O(k + n) and uses O(1) extra space.",
          "output": "def get_updated_array(length, updates):\n    arr = [0] * length\n\n    for start, end, inc in updates:\n        arr[start] += inc\n        if end + 1 < length:\n            arr[end + 1] -= inc\n\n    for i in range(1, length):\n        arr[i] += arr[i - 1]\n\n    return arr\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `a` and `b`, return _the sum of the two integers without using the operators_ `+` _and_ `-`.\n\n",
          "input": "**Example 1:**\n\n**Input:** a = 1, b = 2\n**Output:** 3\n\n**Example 2:**\n\n**Input:** a = 2, b = 3\n**Output:** 5\n\n**Constraints:**\n\n*   `-1000 <= a, b <= 1000`",
          "output": "def add(a, b):\n    MAX = 0x7FFFFFFF\n    MASK = 0xFFFFFFFF\n    while b:\n        a, b = (a ^ b) & MASK, ((a & b) << 1) & MASK\n    return a if a <= MAX else ~(a ^ MASK)\n"
     },
     {
          "instruction": "Write python code for this problem: Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** a = 2, b = \\[3\\]\n**Output:** 8\n\n**Example 2:**\n\n**Input:** a = 2, b = \\[1,0\\]\n**Output:** 1024\n\n**Example 3:**\n\n**Input:** a = 1, b = \\[4,3,3,8,5,2\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= a <= 231 - 1`\n*   `1 <= b.length <= 2000`\n*   `0 <= b[i] <= 9`\n*   `b` does not contain leading zeros.",
          "output": "def powmod(a, b):\n    if b == 0:\n        return 1\n    res = powmod(a, b // 2)\n    return res * res % 1337 * a % 1337 if b % 2 else res * res % 1337\n\ndef superPow(a, b):\n    n = 0\n    for bi in b:\n        n = (n * 10 + bi) % 1140\n    return powmod(a % 1337, n + 1140)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2` sorted in **ascending order** and an integer `k`.\n\nDefine a pair `(u, v)` which consists of one element from the first array and one element from the second array.\n\nReturn _the_ `k` _pairs_ `(u1, v1), (u2, v2), ..., (uk, vk)` _with the smallest sums_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,7,11\\], nums2 = \\[2,4,6\\], k = 3\n**Output:** \\[\\[1,2\\],\\[1,4\\],\\[1,6\\]\\]\n**Explanation:** The first 3 pairs are returned from the sequence: \\[1,2\\],\\[1,4\\],\\[1,6\\],\\[7,2\\],\\[7,4\\],\\[11,2\\],\\[7,6\\],\\[11,4\\],\\[11,6\\]\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,1,2\\], nums2 = \\[1,2,3\\], k = 2\n**Output:** \\[\\[1,1\\],\\[1,1\\]\\]\n**Explanation:** The first 2 pairs are returned from the sequence: \\[1,1\\],\\[1,1\\],\\[1,2\\],\\[2,1\\],\\[1,2\\],\\[2,2\\],\\[1,3\\],\\[1,3\\],\\[2,3\\]\n\n**Example 3:**\n\n**Input:** nums1 = \\[1,2\\], nums2 = \\[3\\], k = 3\n**Output:** \\[\\[1,3\\],\\[2,3\\]\\]\n**Explanation:** All possible pairs are returned from the sequence: \\[1,3\\],\\[2,3\\]\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 105`\n*   `-109 <= nums1[i], nums2[i] <= 109`\n*   `nums1` and `nums2` both are sorted in **ascending order**.\n*   `1 <= k <= 104`",
          "output": "import heapq\n\ndef kSmallestPairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(heap)\n    result = []\n\n    while k > 0 and heap:\n        s, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: We are playing the Guess Game. The game is as follows:\n\nI pick a number from `1` to `n`. You have to guess which number I picked.\n\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n\nYou call a pre-defined API `int guess(int num)`, which returns three possible results:\n\n*   `-1`: Your guess is higher than the number I picked (i.e. `num > pick`).\n*   `1`: Your guess is lower than the number I picked (i.e. `num < pick`).\n*   `0`: your guess is equal to the number I picked (i.e. `num == pick`).\n\nReturn _the number that I picked_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10, pick = 6\n**Output:** 6\n\n**Example 2:**\n\n**Input:** n = 1, pick = 1\n**Output:** 1\n\n**Example 3:**\n\n**Input:** n = 2, pick = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`\n*   `1 <= pick <= n`",
          "output": "def guessNumber(n):\n    low, high = 1, n\n    while low <= high:\n        mid = low + (high - low) // 2\n        result = guess(mid)\n        if result == 0:\n            return mid\n        elif result < 0:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: We are playing the Guessing Game. The game will work as follows:\n\n1.  I pick a number between `1` and `n`.\n2.  You guess a number.\n3.  If you guess the right number, **you win the game**.\n4.  If you guess the wrong number, then I will tell you whether the number I picked is **higher or lower**, and you will continue guessing.\n5.  Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, **you lose the game**.\n\nGiven a particular `n`, return _the minimum amount of money you need to **guarantee a win regardless of what number I pick**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10\n**Output:** 16\n**Explanation:** The winning strategy is as follows:\n- The range is \\[1,10\\]. Guess 7.\n    - If this is my number, your total is $0. Otherwise, you pay $7.\n    - If my number is higher, the range is \\[8,10\\]. Guess 9.\n        - If this is my number, your total is $7. Otherwise, you pay $9.\n        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n    - If my number is lower, the range is \\[1,6\\]. Guess 3.\n        - If this is my number, your total is $7. Otherwise, you pay $3.\n        - If my number is higher, the range is \\[4,6\\]. Guess 5.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n        - If my number is lower, the range is \\[1,2\\]. Guess 1.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 0\n**Explanation:** There is only one possible number, so you can guess 1 and not have to pay anything.\n\n**Example 3:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** There are two possible numbers, 1 and 2.\n- Guess 1.\n    - If this is my number, your total is $0. Otherwise, you pay $1.\n    - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.\n\n**Constraints:**\n\n*   `1 <= n <= 200`The best strategy to play the game is to minimize the maximum loss you could possibly face. Another strategy is to minimize the expected loss. Here, we are interested in the first scenario. Take a small example (n = 3). What do you end up paying in the worst case? Check out this article if you're still stuck. The purely recursive implementation of minimax would be worthless for even a small n. You MUST use dynamic programming. As a follow-up, how would you modify your code to solve the problem of minimizing the expected loss, instead of the worst-case loss?",
          "output": "def getMoneyAmount(n: int) -> int:\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, 0, -1):\n        for j in range(i + 1, n + 1):\n            min_cost = float(\"inf\")\n            for k in range(i, j):\n                cost = k + max(dp[i][k - 1], dp[k + 1][j])\n                min_cost = min(min_cost, cost)\n            dp[i][j] = min_cost\n    return dp[1][n]\n"
     },
     {
          "instruction": "Write python code for this problem: A **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\n*   For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.\n*   In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\nA **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n\nGiven an integer array `nums`, return _the length of the longest **wiggle subsequence** of_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,7,4,9,2,5\\]\n**Output:** 6\n**Explanation:** The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n\n**Example 2:**\n\n**Input:** nums = \\[1,17,5,10,13,15,10,5,16,8\\]\n**Output:** 7\n**Explanation:** There are several subsequences that achieve this length.\nOne is \\[1, 17, 10, 13, 10, 16, 8\\] with differences (16, -7, 3, -3, 6, -8).\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5,6,7,8,9\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] <= 1000`\n\n**Follow up:** Could you solve this in `O(n)` time?",
          "output": "def wiggleMaxLength(nums):\n    if len(nums) < 2:\n        return len(nums)\n\n    up, down = 1, 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            up = down + 1\n        elif nums[i] < nums[i - 1]:\n            down = up + 1\n    return max(up, down)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of **distinct** integers `nums` and a target integer `target`, return _the number of possible combinations that add up to_ `target`.\n\nThe test cases are generated so that the answer can fit in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\], target = 4\n**Output:** 7\n**Explanation:**\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n\n**Example 2:**\n\n**Input:** nums = \\[9\\], target = 3\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 200`\n*   `1 <= nums[i] <= 1000`\n*   All the elements of `nums` are **unique**.\n*   `1 <= target <= 1000`\n\n**Follow up:** What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?",
          "output": "def combination_sum(nums, target):\n    dp = [0] * (target + 1)\n    dp[0] = 1\n\n    for num in nums:\n        for i in range(num, target + 1):\n            dp[i] += dp[i - num]\n\n    return dp[target]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `n x n` `matrix` where each of the rows and columns is sorted in ascending order, return _the_ `kth` _smallest element in the matrix_.\n\nNote that it is the `kth` smallest element **in the sorted order**, not the `kth` **distinct** element.\n\nYou must find a solution with a memory complexity better than `O(n2)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,5,9\\],\\[10,11,13\\],\\[12,13,15\\]\\], k = 8\n**Output:** 13\n**Explanation:** The elements in the matrix are \\[1,5,9,10,11,12,13,**13**,15\\], and the 8th smallest number is 13\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[-5\\]\\], k = 1\n**Output:** -5\n\n**Constraints:**\n\n*   `n == matrix.length == matrix[i].length`\n*   `1 <= n <= 300`\n*   `-109 <= matrix[i][j] <= 109`\n*   All the rows and columns of `matrix` are **guaranteed** to be sorted in **non-decreasing order**.\n*   `1 <= k <= n2`\n\n**Follow up:**\n\n*   Could you solve the problem with a constant memory (i.e., `O(1)` memory complexity)?\n*   Could you solve the problem in `O(n)` time complexity? The solution may be too advanced for an interview but you may find reading [this paper](http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf) fun.",
          "output": "import heapq\n\ndef kthSmallest(matrix, k):\n    n = len(matrix)\n    min_heap = []\n\n    for i in range(n):\n        heapq.heappush(min_heap, (matrix[i][0], i, 0))\n\n    while k > 1:\n        val, row, col = heapq.heappop(min_heap)\n\n        if col + 1 < n:\n            heapq.heappush(min_heap, (matrix[row][col + 1], row, col + 1))\n\n        k -= 1\n\n    return min_heap[0][0]\n"
     },
     {
          "instruction": "Write python code for this problem: Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.\n\nImplement the `PhoneDirectory` class:\n\n*   `PhoneDirectory(int maxNumbers)` Initializes the phone directory with the number of available slots `maxNumbers`.\n*   `int get()` Provides a number that is not assigned to anyone. Returns `-1` if no number is available.\n*   `bool check(int number)` Returns `true` if the slot `number` is available and `false` otherwise.\n*   `void release(int number)` Recycles or releases the slot `number`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"PhoneDirectory \",  \"get \",  \"get \",  \"check \",  \"get \",  \"check \",  \"release \",  \"check \"\\]\n\\[\\[3\\], \\[\\], \\[\\], \\[2\\], \\[\\], \\[2\\], \\[2\\], \\[2\\]\\]\n**Output**\n\\[null, 0, 1, true, 2, false, null, true\\]\n\n**Explanation**\nPhoneDirectory phoneDirectory = new PhoneDirectory(3);\nphoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.\nphoneDirectory.get();      // Assume it returns 1.\nphoneDirectory.check(2);   // The number 2 is available, so return true.\nphoneDirectory.get();      // It returns 2, the only number that is left.\nphoneDirectory.check(2);   // The number 2 is no longer available, so return false.\nphoneDirectory.release(2); // Release number 2 back to the pool.\nphoneDirectory.check(2);   // Number 2 is available again, return true.\n\n**Constraints:**\n\n*   `1 <= maxNumbers <= 104`\n*   `0 <= number < maxNumbers`\n*   At most `2 * 104` calls will be made to `get`, `check`, and `release`.",
          "output": "from collections import deque\n\nclass PhoneDirectory:\n    def __init__(self, maxNumbers: int):\n        self.available = [True] * maxNumbers\n        self.released = deque()\n    \n    def get(self) -> int:\n        if self.released:\n            number = self.released.popleft()\n            self.available[number] = False\n            return number\n        for i in range(len(self.available)):\n            if self.available[i]:\n                self.available[i] = False\n                return i\n        return -1\n    \n    def check(self, number: int) -> bool:\n        return self.available[number]\n    \n    def release(self, number: int) -> None:\n        if not self.available[number]:\n            self.available[number] = True\n            self.released.append(number)\n"
     },
     {
          "instruction": "Write python code for this problem: Implement the `RandomizedSet` class:\n\n*   `RandomizedSet()` Initializes the `RandomizedSet` object.\n*   `bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.\n*   `bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.\n*   `int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the **same probability** of being returned.\n\nYou must implement the functions of the class such that each function works in **average** `O(1)` time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"RandomizedSet \",  \"insert \",  \"remove \",  \"insert \",  \"getRandom \",  \"remove \",  \"insert \",  \"getRandom \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[2\\], \\[\\], \\[1\\], \\[2\\], \\[\\]\\]\n**Output**\n\\[null, true, false, true, 2, true, false, 2\\]\n\n**Explanation**\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains \\[1,2\\].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains \\[2\\].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n\n**Constraints:**\n\n*   `-231 <= val <= 231 - 1`\n*   At most `2 *` `105` calls will be made to `insert`, `remove`, and `getRandom`.\n*   There will be **at least one** element in the data structure when `getRandom` is called.",
          "output": "import random\n\nclass RandomizedSet:\n    def __init__(self):\n        self.index_map = {}\n        self.nums = []\n\n    def insert(self, val: int) -> bool:\n        if val in self.index_map:\n            return False\n\n        self.index_map[val] = len(self.nums)\n        self.nums.append(val)\n        return True\n\n    def remove(self, val: int) -> bool:\n        if val not in self.index_map:\n            return False\n\n        last = self.nums[-1]\n        self.index_map[last] = self.index_map[val]\n        self.nums[self.index_map[val]] = last\n\n        self.nums.pop()\n        del self.index_map[val]\n        return True\n\n    def getRandom(self) -> int:\n        return self.nums[random.randint(0, len(self.nums) - 1)]\n"
     },
     {
          "instruction": "Write python code for this problem: `RandomizedCollection` is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n\nImplement the `RandomizedCollection` class:\n\n*   `RandomizedCollection()` Initializes the empty `RandomizedCollection` object.\n*   `bool insert(int val)` Inserts an item `val` into the multiset, even if the item is already present. Returns `true` if the item is not present, `false` otherwise.\n*   `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item is present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.\n*   `int getRandom()` Returns a random element from the current multiset of elements. The probability of each element being returned is **linearly related** to the number of the same values the multiset contains.\n\nYou must implement the functions of the class such that each function works on **average** `O(1)` time complexity.\n\n**Note:** The test cases are generated such that `getRandom` will only be called if there is **at least one** item in the `RandomizedCollection`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"RandomizedCollection \",  \"insert \",  \"insert \",  \"insert \",  \"getRandom \",  \"remove \",  \"getRandom \"\\]\n\\[\\[\\], \\[1\\], \\[1\\], \\[2\\], \\[\\], \\[1\\], \\[\\]\\]\n**Output**\n\\[null, true, false, true, 2, true, 1\\]\n\n**Explanation**\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains \\[1,1\\].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains \\[1,1,2\\].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains \\[1,2\\].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n\n**Constraints:**\n\n*   `-231 <= val <= 231 - 1`\n*   At most `2 * 105` calls **in total** will be made to `insert`, `remove`, and `getRandom`.\n*   There will be **at least one** element in the data structure when `getRandom` is called.",
          "output": "import random\nfrom collections import defaultdict\n\nclass RandomizedCollection:\n    def __init__(self):\n        self.indices = defaultdict(set)\n        self.nums = []\n\n    def insert(self, val):\n        self.nums.append(val)\n        self.indices[val].add(len(self.nums) - 1)\n        return len(self.indices[val]) == 1\n\n    def remove(self, val):\n        if not self.indices[val]:\n            return False\n\n        idx = self.indices[val].pop()\n        if idx < len(self.nums) - 1:\n            last = self.nums[-1]\n            self.nums[idx] = last\n            self.indices[last].remove(len(self.nums) - 1)\n            self.indices[last].add(idx)\n        self.nums.pop()\n        return True\n\n    def getRandom(self):\n        return self.nums[random.randint(0, len(self.nums) - 1)]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a singly linked list, return a random node's value from the linked list. Each node must have the **same probability** of being chosen.\n\nImplement the `Solution` class:\n\n*   `Solution(ListNode head)` Initializes the object with the head of the singly-linked list `head`.\n*   `int getRandom()` Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \",  \"getRandom \",  \"getRandom \",  \"getRandom \",  \"getRandom \",  \"getRandom \"\\]\n\\[\\[\\[1, 2, 3\\]\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, 1, 3, 2, 2, 3\\]\n\n**Explanation**\nSolution solution = new Solution(\\[1, 2, 3\\]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n\n**Constraints:**\n\n*   The number of nodes in the linked list will be in the range `[1, 104]`.\n*   `-104 <= Node.val <= 104`\n*   At most `104` calls will be made to `getRandom`.\n\n**Follow up:**\n\n*   What if the linked list is extremely large and its length is unknown to you?\n*   Could you solve this efficiently without using extra space?",
          "output": "import random\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def __init__(self, head: ListNode):\n        self.head = head\n\n    def getRandom(self) -> int:\n        current, result = self.head, 0\n        for i, node in enumerate(self.iterate_nodes(current)):\n            if random.randint(0, i) == 0:\n                result = node.val\n        return result\n\n    def iterate_nodes(self, current):\n        while current:\n            yield current\n            current = current.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `ransomNote` and `magazine`, return `true` _if_ `ransomNote` _can be constructed by using the letters from_ `magazine` _and_ `false` _otherwise_.\n\nEach letter in `magazine` can only be used once in `ransomNote`.\n\n",
          "input": "**Example 1:**\n\n**Input:** ransomNote = \"a\", magazine = \"b\"\n**Output:** false\n\n**Example 2:**\n\n**Input:** ransomNote = \"aa\", magazine = \"ab\"\n**Output:** false\n\n**Example 3:**\n\n**Input:** ransomNote = \"aa\", magazine = \"aab\"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= ransomNote.length, magazine.length <= 105`\n*   `ransomNote` and `magazine` consist of lowercase English letters.",
          "output": "def can_construct(ransom_note, magazine):\n    letter_count = {}\n    \n    for c in magazine:\n        letter_count[c] = letter_count.get(c, 0) + 1\n        \n    for c in ransom_note:\n        if c not in letter_count or letter_count[c] == 0:\n            return False\n        letter_count[c] -= 1\n        \n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, design an algorithm to randomly shuffle the array. All permutations of the array should be **equally likely** as a result of the shuffling.\n\nImplement the `Solution` class:\n\n*   `Solution(int[] nums)` Initializes the object with the integer array `nums`.\n*   `int[] reset()` Resets the array to its original configuration and returns it.\n*   `int[] shuffle()` Returns a random shuffling of the array.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \",  \"shuffle \",  \"reset \",  \"shuffle \"\\]\n\\[\\[\\[1, 2, 3\\]\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, \\[3, 1, 2\\], \\[1, 2, 3\\], \\[1, 3, 2\\]\\]\n\n**Explanation**\nSolution solution = new Solution(\\[1, 2, 3\\]);\nsolution.shuffle();    // Shuffle the array \\[1,2,3\\] and return its result.\n                       // Any permutation of \\[1,2,3\\] must be equally likely to be returned.\n                       // Example: return \\[3, 1, 2\\]\nsolution.reset();      // Resets the array back to its original configuration \\[1,2,3\\]. Return \\[1, 2, 3\\]\nsolution.shuffle();    // Returns the random shuffling of array \\[1,2,3\\]. Example: return \\[1, 3, 2\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 50`\n*   `-106 <= nums[i] <= 106`\n*   All the elements of `nums` are **unique**.\n*   At most `104` calls **in total** will be made to `reset` and `shuffle`.The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)",
          "output": "import random\n\nclass Solution:\n    def __init__(self, nums):\n        self.original = nums\n\n    def reset(self):\n        return self.original\n\n    def shuffle(self):\n        shuffled = self.original[:]\n        for i in range(len(shuffled) - 1, 0, -1):\n            j = random.randint(0, i)\n            shuffled[i], shuffled[j] = shuffled[j], shuffled[i]\n        return shuffled\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return _the deserialized_ `NestedInteger`.\n\nEach element is either an integer or a list whose elements may also be integers or other lists.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"324 \"\n**Output:** 324\n**Explanation:** You should return a NestedInteger object which contains a single integer 324.\n\n**Example 2:**\n\n**Input:** s =  \"\\[123,\\[456,\\[789\\]\\]\\] \"\n**Output:** \\[123,\\[456,\\[789\\]\\]\\]\n**Explanation:** Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `s` consists of digits, square brackets `\"[] \"`, negative sign `'-'`, and commas `','`.\n*   `s` is the serialization of valid `NestedInteger`.\n*   All the values in the input are in the range `[-106, 106]`.",
          "output": "class NestedInteger:\n    def __init__(self, value=None):\n        pass\n\n    def add(self, ni):\n        pass\n\ndef deserialize(s: str) -> NestedInteger:\n    if s[0] != '[':\n        return NestedInteger(int(s))\n\n    stack = []\n    curr, start = None, 0\n\n    for i, c in enumerate(s):\n        if c == '[':\n            if curr:\n                stack.append(curr)\n            curr = NestedInteger()\n            start = i + 1\n        elif c == ',' or c == ']':\n            if i > start:\n                curr.add(NestedInteger(int(s[start:i])))\n            start = i + 1\n\n            if c == ']' and stack:\n                popped = stack.pop()\n                popped.add(curr)\n                curr = popped\n\n    return curr\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.\n\nYou must write an algorithm that runs in `O(n)` time and uses `O(1)` extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 13\n**Output:** \\[1,10,11,12,13,2,3,4,5,6,7,8,9\\]\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** \\[1,2\\]\n\n**Constraints:**\n\n*   `1 <= n <= 5 * 104`",
          "output": "def lexicographical_order_helper(current, n, result):\n    if current > n:\n        return\n\n    result.append(current)\n    for i in range(10):\n        lexicographical_order_helper(current * 10 + i, n, result)\n\ndef lexical_order(n):\n    result = []\n    for i in range(1, 10):\n        lexicographical_order_helper(i, n, result)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, _find the first non-repeating character in it and return its index_. If it does not exist, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"leetcode\"\n**Output:** 0\n\n**Example 2:**\n\n**Input:** s = \"loveleetcode\"\n**Output:** 2\n\n**Example 3:**\n\n**Input:** s = \"aabb\"\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of only lowercase English letters.",
          "output": "def firstUniqChar(s):\n    char_count = {}\n    for c in s:\n        char_count[c] = char_count.get(c, 0) + 1\n    for i in range(len(s)):\n        if char_count[s[i]] == 1:\n            return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n\nHere, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`.\n\nIn text form, it looks like this (with \u27f6 representing the tab character):\n\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n\nIf we were to write this representation in code, it will look like this: `\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext \"`. Note that the `'\\n'` and `'\\t'` are the new-line and tab characters.\n\nEvery file and directory has a unique **absolute path** in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the **absolute path** to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext \"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces.\n\nGiven a string `input` representing the file system in the explained format, return _the length of the **longest absolute path** to a **file** in the abstracted file system_. If there is no file in the system, return `0`.\n\n**Note** that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n\n",
          "input": "**Example 1:**\n\n**Input:** input =  \"dir\\\\n\\\\tsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tfile.ext \"\n**Output:** 20\n**Explanation:** We have only one file, and the absolute path is  \"dir/subdir2/file.ext \" of length 20.\n\n**Example 2:**\n\n**Input:** input =  \"dir\\\\n\\\\tsubdir1\\\\n\\\\t\\\\tfile1.ext\\\\n\\\\t\\\\tsubsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tsubsubdir2\\\\n\\\\t\\\\t\\\\tfile2.ext \"\n**Output:** 32\n**Explanation:** We have two files:\n \"dir/subdir1/file1.ext \" of length 21\n \"dir/subdir2/subsubdir2/file2.ext \" of length 32.\nWe return 32 since it is the longest absolute path to a file.\n\n**Example 3:**\n\n**Input:** input =  \"a \"\n**Output:** 0\n**Explanation:** We do not have any files, just a single directory named  \"a \".\n\n**Constraints:**\n\n*   `1 <= input.length <= 104`\n*   `input` may contain lowercase or uppercase English letters, a new line character `'\\n'`, a tab character `'\\t'`, a dot `'.'`, a space `' '`, and digits.\n*   All file and directory names have **positive** length.",
          "output": "def length_longest_path(input: str) -> int:\n    dir_length_stack = []\n    max_file_length = 0\n    lines = input.split('\\n')\n\n    for line in lines:\n        level = line.count('\\t')\n        line = line.lstrip('\\t')\n\n        while len(dir_length_stack) > level:\n            dir_length_stack.pop()\n\n        if dir_length_stack:\n            length = dir_length_stack[-1] + len(line) + 1\n        else:\n            length = len(line)\n        dir_length_stack.append(length)\n\n        if '.' in line:\n            max_file_length = max(max_file_length, length)\n            \n    return max_file_length\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `s` and `t`.\n\nString `t` is generated by random shuffling string `s` and then add one more letter at a random position.\n\nReturn the letter that was added to `t`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcd \", t =  \"abcde \"\n**Output:**  \"e \"\n**Explanation:** 'e' is the letter that was added.\n\n**Example 2:**\n\n**Input:** s =  \" \", t =  \"y \"\n**Output:**  \"y \"\n\n**Constraints:**\n\n*   `0 <= s.length <= 1000`\n*   `t.length == s.length + 1`\n*   `s` and `t` consist of lowercase English letters.",
          "output": "def findTheDifference(s: str, t: str) -> str:\n    return chr(sum(ord(c) for c in t) - sum(ord(c) for c in s))\n"
     },
     {
          "instruction": "Write python code for this problem: You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`:\n\n*   Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n*   Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n*   Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n\nGiven the integer `n`, return _the last number that remains in_ `arr`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 9\n**Output:** 6\n**Explanation:**\narr = \\[1, 2, 3, 4, 5, 6, 7, 8, 9\\]\narr = \\[2, 4, 6, 8\\]\narr = \\[2, 6\\]\narr = \\[6\\]\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 109`",
          "output": "def last_remaining(n: int) -> int:\n    direction = True\n    head = 1\n    remaining = n\n    step = 1\n\n    while remaining > 1:\n        if direction or remaining % 2 == 1:\n            head += step\n        remaining //= 2\n        step *= 2\n        direction = not direction\n\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`.\n\nReturn `true` _if all the rectangles together form an exact cover of a rectangular region_.\n\n",
          "input": "**Example 1:**\n\n**Input:** rectangles = \\[\\[1,1,3,3\\],\\[3,1,4,2\\],\\[3,2,4,4\\],\\[1,3,2,4\\],\\[2,3,3,4\\]\\]\n**Output:** true\n**Explanation:** All 5 rectangles together form an exact cover of a rectangular region.\n\n**Example 2:**\n\n**Input:** rectangles = \\[\\[1,1,2,3\\],\\[1,3,2,4\\],\\[3,1,4,2\\],\\[3,2,4,4\\]\\]\n**Output:** false\n**Explanation:** Because there is a gap between the two rectangular regions.\n\n**Example 3:**\n\n**Input:** rectangles = \\[\\[1,1,3,3\\],\\[3,1,4,2\\],\\[1,3,2,4\\],\\[2,2,4,4\\]\\]\n**Output:** false\n**Explanation:** Because two of the rectangles overlap with each other.\n\n**Constraints:**\n\n*   `1 <= rectangles.length <= 2 * 104`\n*   `rectangles[i].length == 4`\n*   `-105 <= xi, yi, ai, bi <= 105`",
          "output": "def isRectangleCover(rectangles):\n    area = 0\n    points = set()\n    lx, ly, rx, ry = float('inf'), float('inf'), float('-inf'), float('-inf')\n\n    for rect in rectangles:\n        lx, ly = min(lx, rect[0]), min(ly, rect[1])\n        rx, ry = max(rx, rect[2]), max(ry, rect[3])\n\n        area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n\n        p1, p2, p3, p4 = (rect[0], rect[1]), (rect[0], rect[3]), (rect[2], rect[1]), (rect[2], rect[3])\n\n        points ^= {p1, p2, p3, p4}\n\n    return len(points) == 4 and area == (rx - lx) * (ry - ly) and (lx, ly) in points and \\\n           (lx, ry) in points and (rx, ly) in points and (rx, ry) in points\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, return `true` _if_ `s` _is a **subsequence** of_ `t`_, or_ `false` _otherwise_.\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not).\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"abc\", t = \"ahbgdc\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"axc\", t = \"ahbgdc\"\n**Output:** false\n\n**Constraints:**\n\n*   `0 <= s.length <= 100`\n*   `0 <= t.length <= 104`\n*   `s` and `t` consist only of lowercase English letters.\n\n**Follow up:** Suppose there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. In this scenario, how would you change your code?",
          "output": "def is_subsequence(s, t):\n    si, ti = 0, 0\n\n    while si < len(s) and ti < len(t):\n        if s[si] == t[ti]:\n            si += 1\n        ti += 1\n\n    return si == len(s)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `data` representing the data, return whether it is a valid **UTF-8** encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n\nA character in **UTF8** can be from **1 to 4 bytes** long, subjected to the following rules:\n\n1.  For a **1-byte** character, the first bit is a `0`, followed by its Unicode code.\n2.  For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.\n\nThis is how the UTF-8 encoding would work:\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n`x` denotes a bit in the binary form of a byte that may be either `0` or `1`.\n\n**Note:** The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data.\n\n",
          "input": "**Example 1:**\n\n**Input:** data = \\[197,130,1\\]\n**Output:** true\n**Explanation:** data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n\n**Example 2:**\n\n**Input:** data = \\[235,140,4\\]\n**Output:** false\n**Explanation:** data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n\n**Constraints:**\n\n*   `1 <= data.length <= 2 * 104`\n*   `0 <= data[i] <= 255`All you have to do is follow the rules. For a given integer, obtain its binary representation in the string form and work with the rules given in the problem. An integer can either represent the start of a UTF-8 character, or a part of an existing UTF-8 character. There are two separate rules for these two scenarios in the problem. If an integer is a part of an existing UTF-8 character, simply check the 2 most significant bits of in the binary representation string. They should be 10. If the integer represents the start of a UTF-8 character, then the first few bits would be 1 followed by a 0. The number of initial bits (most significant) bits determines the length of the UTF-8 character. \r\n\r\n\nNote: The array can contain multiple valid UTF-8 characters. String manipulation will work fine here. But, it is too slow. Can we instead use bit manipulation to do the validations instead of string manipulations? We can use bit masking to check how many initial bits are set for a given number. We only need to work with the 8 least significant bits as mentioned in the problem.\n\r\nmask = 1 << 7\r\nwhile mask & num:\r\n    n_bytes += 1\r\n    mask = mask >> 1\r\n\r\n\r\nCan you use bit-masking to perform the second validation as well i.e. checking if the most significant bit is 1 and the second most significant bit a 0? To check if the most significant bit is a 1 and the second most significant bit is a 0, we can make use of the following two masks.\r\n\r\n\r\nmask1 = 1 << 7\r\nmask2 = 1 << 6\r\n\r\nif not (num & mask1 and not (num & mask2)):\r\n    return False",
          "output": "def validUtf8(data):\n    count = 0\n    for byte in data:\n        if count == 0:\n            if byte >> 5 == 0b110:\n                count = 1\n            elif byte >> 4 == 0b1110:\n                count = 2\n            elif byte >> 3 == 0b11110:\n                count = 3\n            elif byte >> 7:\n                return False\n        else:\n            if byte >> 6 != 0b10:\n                return False\n            count -= 1\n    return count == 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given an encoded string, return its decoded string.\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer.\n\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there will not be input like `3a` or `2[4]`.\n\nThe test cases are generated so that the length of the output will never exceed `105`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"3\\[a\\]2\\[bc\\] \"\n**Output:**  \"aaabcbc \"\n\n**Example 2:**\n\n**Input:** s =  \"3\\[a2\\[c\\]\\] \"\n**Output:**  \"accaccacc \"\n\n**Example 3:**\n\n**Input:** s =  \"2\\[abc\\]3\\[cd\\]ef \"\n**Output:**  \"abcabccdcdcdef \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 30`\n*   `s` consists of lowercase English letters, digits, and square brackets `'[]'`.\n*   `s` is guaranteed to be **a valid** input.\n*   All the integers in `s` are in the range `[1, 300]`.",
          "output": "def decodeString(s):\n    counts = []\n    results = []\n    current = \"\"\n    ptr = 0\n\n    while ptr < len(s):\n        if s[ptr].isdigit():\n            count = 0\n            while s[ptr].isdigit():\n                count = count * 10 + int(s[ptr])\n                ptr += 1\n            counts.append(count)\n        elif s[ptr] == '[':\n            results.append(current)\n            current = \"\"\n            ptr += 1\n        elif s[ptr] == ']':\n            prev = results.pop()\n            count = counts.pop()\n            current = prev + current * count\n            ptr += 1\n        else:\n            current += s[ptr]\n            ptr += 1\n\n    return current\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, return _the length of the longest substring of_ `s` _such that the frequency of each character in this substring is greater than or equal to_ `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaabb \", k = 3\n**Output:** 3\n**Explanation:** The longest substring is  \"aaa \", as 'a' is repeated 3 times.\n\n**Example 2:**\n\n**Input:** s =  \"ababbc \", k = 2\n**Output:** 5\n**Explanation:** The longest substring is  \"ababb \", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of only lowercase English letters.\n*   `1 <= k <= 105`",
          "output": "def longestSubstring(s: str, k: int) -> int:\n    if not s or k <= 0:\n        return 0\n\n    char_count = {}\n    for ch in s:\n        char_count[ch] = char_count.get(ch, 0) + 1\n\n    for char, count in char_count.items():\n        if count < k:\n            return max(longestSubstring(sub_s, k) for sub_s in s.split(char))\n    return len(s)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of length `n`.\n\nAssume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the **rotation function** `F` on `nums` as follow:\n\n*   `F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`\n\nReturn _the maximum value of_ `F(0), F(1), ..., F(n-1)`.\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,3,2,6\\]\n**Output:** 26\n**Explanation:**\nF(0) = (0 \\* 4) + (1 \\* 3) + (2 \\* 2) + (3 \\* 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 \\* 6) + (1 \\* 4) + (2 \\* 3) + (3 \\* 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 \\* 2) + (1 \\* 6) + (2 \\* 4) + (3 \\* 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 \\* 3) + (1 \\* 2) + (2 \\* 6) + (3 \\* 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n\n**Example 2:**\n\n**Input:** nums = \\[100\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `-100 <= nums[i] <= 100`",
          "output": "def maxRotateFunction(nums):\n    n = len(nums)\n    total_sum = sum(nums)\n    f = sum(i * num for i, num in enumerate(nums))\n\n    max_f = f\n    for i in range(1, n):\n        f += total_sum - n * nums[-i]\n        max_f = max(max_f, f)\n\n    return max_f\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer `n`, you can apply one of the following operations:\n\n1.  If `n` is even, replace `n` with `n / 2`.\n2.  If `n` is odd, replace `n` with either `n + 1` or `n - 1`.\n\nReturn _the minimum number of operations needed for_ `n` _to become_ `1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 8\n**Output:** 3\n**Explanation:** 8 -> 4 -> 2 -> 1\n\n**Example 2:**\n\n**Input:** n = 7\n**Output:** 4\n**Explanation:** 7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`",
          "output": "def min_operations(n):\n    steps = 0\n    while n > 1:\n        n = n // 2 if n % 2 == 0 else n - 1\n        steps += 1\n    return steps\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` with possible **duplicates**, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.\n\nImplement the `Solution` class:\n\n*   `Solution(int[] nums)` Initializes the object with the array `nums`.\n*   `int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \",  \"pick \",  \"pick \",  \"pick \"\\]\n\\[\\[\\[1, 2, 3, 3, 3\\]\\], \\[3\\], \\[1\\], \\[3\\]\\]\n**Output**\n\\[null, 4, 0, 2\\]\n\n**Explanation**\nSolution solution = new Solution(\\[1, 2, 3, 3, 3\\]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums\\[0\\] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `-231 <= nums[i] <= 231 - 1`\n*   `target` is an integer from `nums`.\n*   At most `104` calls will be made to `pick`.",
          "output": "import random\n\nclass Solution:\n\n    def __init__(self, nums):\n        self.nums = nums\n\n    def pick(self, target):\n        count, res = 0, 0\n        for i, num in enumerate(self.nums):\n            if num == target:\n                count += 1\n                if random.randint(0, count - 1) == 0:\n                    res = i\n        return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.\n\nYou are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.\n\nReturn _the answers to all queries_. If a single answer cannot be determined, return `-1.0`.\n\n**Note:** The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\n\n",
          "input": "**Example 1:**\n\n**Input:** equations = \\[\\[ \"a \", \"b \"\\],\\[ \"b \", \"c \"\\]\\], values = \\[2.0,3.0\\], queries = \\[\\[ \"a \", \"c \"\\],\\[ \"b \", \"a \"\\],\\[ \"a \", \"e \"\\],\\[ \"a \", \"a \"\\],\\[ \"x \", \"x \"\\]\\]\n**Output:** \\[6.00000,0.50000,-1.00000,1.00000,-1.00000\\]\n**Explanation:** \nGiven: _a / b = 2.0_, _b / c = 3.0_\nqueries are: _a / c = ?_, _b / a = ?_, _a / e = ?_, _a / a = ?_, _x / x = ?_\nreturn: \\[6.0, 0.5, -1.0, 1.0, -1.0 \\]\n\n**Example 2:**\n\n**Input:** equations = \\[\\[ \"a \", \"b \"\\],\\[ \"b \", \"c \"\\],\\[ \"bc \", \"cd \"\\]\\], values = \\[1.5,2.5,5.0\\], queries = \\[\\[ \"a \", \"c \"\\],\\[ \"c \", \"b \"\\],\\[ \"bc \", \"cd \"\\],\\[ \"cd \", \"bc \"\\]\\]\n**Output:** \\[3.75000,0.40000,5.00000,0.20000\\]\n\n**Example 3:**\n\n**Input:** equations = \\[\\[ \"a \", \"b \"\\]\\], values = \\[0.5\\], queries = \\[\\[ \"a \", \"b \"\\],\\[ \"b \", \"a \"\\],\\[ \"a \", \"c \"\\],\\[ \"x \", \"y \"\\]\\]\n**Output:** \\[0.50000,2.00000,-1.00000,-1.00000\\]\n\n**Constraints:**\n\n*   `1 <= equations.length <= 20`\n*   `equations[i].length == 2`\n*   `1 <= Ai.length, Bi.length <= 5`\n*   `values.length == equations.length`\n*   `0.0 < values[i] <= 20.0`\n*   `1 <= queries.length <= 20`\n*   `queries[i].length == 2`\n*   `1 <= Cj.length, Dj.length <= 5`\n*   `Ai, Bi, Cj, Dj` consist of lower case English letters and digits.Do you recognize this as a graph problem?",
          "output": "from collections import defaultdict\n\ndef dfs(s1, s2, graph):\n    if s1 not in graph or s2 not in graph:\n        return -1.0\n    if s1 == s2:\n        return 1.0\n    \n    for neighbor, weight in graph[s1]:\n        if neighbor not in visited:\n            visited.add(neighbor)\n            temp = dfs(neighbor, s2, graph)\n            if temp > 0:\n                return weight * temp\n    return -1.0\n\ndef calcEquation(equations, values, queries):\n    graph = defaultdict(list)\n    for (s1, s2), value in zip(equations, values):\n        graph[s1].append((s2, value))\n        graph[s2].append((s1, 1 / value))\n    \n    ans = []\n    for s1, s2 in queries:\n        visited = set()\n        ans.append(dfs(s1, s2, graph))\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 3\n\n**Example 2:**\n\n**Input:** n = 11\n**Output:** 0\n**Explanation:** The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`",
          "output": "def findNthDigit(n):\n    size = 1\n    length = 9\n    start = 1\n\n    while n > length * size:\n        n -= length * size\n        size += 1\n        length *= 10\n        start *= 10\n\n    start += (n - 1) // size\n    s = str(start)\n    return int(s[(n - 1) % size])\n"
     },
     {
          "instruction": "Write python code for this problem: A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n\n*   For example, the below binary watch reads `\"4:51 \"`.\n\nGiven an integer `turnedOn` which represents the number of LEDs that are currently on (ignoring the PM), return _all possible times the watch could represent_. You may return the answer in **any order**.\n\nThe hour must not contain a leading zero.\n\n*   For example, `\"01:00 \"` is not valid. It should be `\"1:00 \"`.\n\nThe minute must be consist of two digits and may contain a leading zero.\n\n*   For example, `\"10:2 \"` is not valid. It should be `\"10:02 \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** turnedOn = 1\n**Output:** \\[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"\\]\n\n**Example 2:**\n\n**Input:** turnedOn = 9\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `0 <= turnedOn <= 10`Simplify by seeking for solutions that involve comparing bit counts. Consider calculating all possible times for comparison purposes.",
          "output": "def readBinaryWatch(turnedOn: int):\n    def count_bits(n):\n        return bin(n).count('1')\n\n    times = []\n    for h in range(12):\n        for m in range(60):\n            if count_bits(h) + count_bits(m) == turnedOn:\n                times.append(f\"{h}:{m:02d}\")\n    return times\n"
     },
     {
          "instruction": "Write python code for this problem: Given string num representing a non-negative integer `num`, and an integer `k`, return _the smallest possible integer after removing_ `k` _digits from_ `num`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"1432219 \", k = 3\n**Output:**  \"1219 \"\n**Explanation:** Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\n**Example 2:**\n\n**Input:** num =  \"10200 \", k = 1\n**Output:**  \"200 \"\n**Explanation:** Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n\n**Example 3:**\n\n**Input:** num =  \"10 \", k = 2\n**Output:**  \"0 \"\n**Explanation:** Remove all the digits from the number and it is left with nothing which is 0.\n\n**Constraints:**\n\n*   `1 <= k <= num.length <= 105`\n*   `num` consists of only digits.\n*   `num` does not have any leading zeros except for the zero itself.",
          "output": "def remove_k_digits(num, k):\n    stack = []\n    for c in num:\n        while k > 0 and stack and stack[-1] > c:\n            stack.pop()\n            k -= 1\n        stack.append(c)\n    while k > 0:\n        stack.pop()\n        k -= 1\n    return ''.join(stack).lstrip('0') or '0'\n"
     },
     {
          "instruction": "Write python code for this problem: A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n\nGiven a list of `stones`' positions (in units) in sorted **ascending order**, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit.\n\nIf the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction.\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[0,1,3,5,6,8,12,17\\]\n**Output:** true\n**Explanation:** The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n\n**Example 2:**\n\n**Input:** stones = \\[0,1,2,3,4,8,9,11\\]\n**Output:** false\n**Explanation:** There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n\n**Constraints:**\n\n*   `2 <= stones.length <= 2000`\n*   `0 <= stones[i] <= 231 - 1`\n*   `stones[0] == 0`\n*   `stones` is sorted in a strictly increasing order.",
          "output": "def can_cross(stones):\n    dp = {stone: set() for stone in stones}\n    dp[0].add(0)\n\n    for stone in stones:\n        for k in dp[stone]:\n            for jump in (k - 1, k, k + 1):\n                if jump > 0 and stone + jump in dp:\n                    dp[stone + jump].add(jump)\n\n    return bool(dp[stones[-1]])\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the sum of all left leaves._\n\nA **leaf** is a node with no children. A **left leaf** is a leaf that is the left child of another node.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** 24\n**Explanation:** There are two left leaves in the binary tree, with values 9 and 15 respectively.\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sum_of_left_leaves(root):\n    if not root:\n        return 0\n    left_sum = 0\n    if root.left and not root.left.left and not root.left.right:\n        left_sum += root.left.val\n    return left_sum + sum_of_left_leaves(root.left) + sum_of_left_leaves(root.right)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `num`, return _a string representing its hexadecimal representation_. For negative integers, [two's complement](https://en.wikipedia.org/wiki/Two%27s_complement) method is used.\n\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n\n**Note:** You are not allowed to use any built-in library method to directly solve this problem.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 26\n**Output:** \"1a\"\n\n**Example 2:**\n\n**Input:** num = -1\n**Output:** \"ffffffff\"\n\n**Constraints:**\n\n*   `-231 <= num <= 231 - 1`",
          "output": "def to_hex(num: int) -> str:\n    if num == 0:\n        return '0'\n    hex_str = ''\n    hex_digits = '0123456789abcdef'\n    n = num & 0xffffffff\n    while n:\n        hex_str = hex_digits[n & 0xf] + hex_str\n        n >>= 4\n    return hex_str\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`.\n\nReconstruct and return _the queue that is represented by the input array_ `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).\n\n",
          "input": "**Example 1:**\n\n**Input:** people = \\[\\[7,0\\],\\[4,4\\],\\[7,1\\],\\[5,0\\],\\[6,1\\],\\[5,2\\]\\]\n**Output:** \\[\\[5,0\\],\\[7,0\\],\\[5,2\\],\\[6,1\\],\\[4,4\\],\\[7,1\\]\\]\n**Explanation:**\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence \\[\\[5,0\\],\\[7,0\\],\\[5,2\\],\\[6,1\\],\\[4,4\\],\\[7,1\\]\\] is the reconstructed queue.\n\n**Example 2:**\n\n**Input:** people = \\[\\[6,0\\],\\[5,0\\],\\[4,0\\],\\[3,2\\],\\[2,2\\],\\[1,4\\]\\]\n**Output:** \\[\\[4,0\\],\\[5,0\\],\\[2,2\\],\\[3,2\\],\\[1,4\\],\\[6,0\\]\\]\n\n**Constraints:**\n\n*   `1 <= people.length <= 2000`\n*   `0 <= hi <= 106`\n*   `0 <= ki < people.length`\n*   It is guaranteed that the queue can be reconstructed.What can you say about the position of the shortest person? \r\nIf the position of the shortest person is i, how many people would be in front of the shortest person? Once you fix the position of the shortest person, what can you say about the position of the second shortest person?",
          "output": "from typing import List\n\ndef reconstructQueue(people: List[List[int]]) -> List[List[int]]:\n    people.sort(key=lambda x: (-x[0], x[1]))\n\n    result = []\n    for p in people:\n        result.insert(p[1], p)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return _the volume of water it can trap after raining_.\n\n",
          "input": "**Example 1:**\n\n**Input:** heightMap = \\[\\[1,4,3,1,3,2\\],\\[3,2,1,3,2,4\\],\\[2,3,3,2,3,1\\]\\]\n**Output:** 4\n**Explanation:** After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n\n**Example 2:**\n\n**Input:** heightMap = \\[\\[3,3,3,3,3\\],\\[3,2,2,2,3\\],\\[3,2,1,2,3\\],\\[3,2,2,2,3\\],\\[3,3,3,3,3\\]\\]\n**Output:** 10\n\n**Constraints:**\n\n*   `m == heightMap.length`\n*   `n == heightMap[i].length`\n*   `1 <= m, n <= 200`\n*   `0 <= heightMap[i][j] <= 2 * 104`",
          "output": "import heapq\n\ndef trapRainWater(heightMap):\n    m, n = len(heightMap), len(heightMap[0])\n    pq = []\n    visited = [[False] * n for _ in range(m)]\n\n    for i in range(m):\n        heapq.heappush(pq, (heightMap[i][0], i, 0))\n        heapq.heappush(pq, (heightMap[i][n - 1], i, n - 1))\n        visited[i][0] = visited[i][n - 1] = True\n\n    for i in range(1, n - 1):\n        heapq.heappush(pq, (heightMap[0][i], 0, i))\n        heapq.heappush(pq, (heightMap[m - 1][i], m - 1, i))\n        visited[0][i] = visited[m - 1][i] = True\n\n    water, maxHeight = 0, 0\n    dirs = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n    while pq:\n        h, r, c = heapq.heappop(pq)\n        maxHeight = max(maxHeight, h)\n        for dx, dy in dirs:\n            x, y = r + dx, c + dy\n            if x < 0 or x >= m or y < 0 or y >= n or visited[x][y]:\n                continue\n            if heightMap[x][y] < maxHeight:\n                water += maxHeight - heightMap[x][y]\n            heapq.heappush(pq, (heightMap[x][y], x, y))\n            visited[x][y] = True\n\n    return water\n"
     },
     {
          "instruction": "Write python code for this problem: A string can be **abbreviated** by replacing any number of **non-adjacent**, **non-empty** substrings with their lengths. The lengths **should not** have leading zeros.\n\nFor example, a string such as `\"substitution \"` could be abbreviated as (but not limited to):\n\n*   `\"s10n \"` ( `\"s ubstitutio n \"`)\n*   `\"sub4u4 \"` ( `\"sub stit u tion \"`)\n*   `\"12 \"` ( `\"substitution \"`)\n*   `\"su3i1u2on \"` ( `\"su bst i t u ti on \"`)\n*   `\"substitution \"` (no substrings replaced)\n\nThe following are **not valid** abbreviations:\n\n*   `\"s55n \"` ( `\"s ubsti tutio n \"`, the replaced substrings are adjacent)\n*   `\"s010n \"` (has leading zeros)\n*   `\"s0ubstitution \"` (replaces an empty substring)\n\nGiven a string `word` and an abbreviation `abbr`, return _whether the string **matches** the given abbreviation_.\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"internationalization \", abbr =  \"i12iz4n \"\n**Output:** true\n**Explanation:** The word  \"internationalization \" can be abbreviated as  \"i12iz4n \" ( \"i nternational iz atio n \").\n\n**Example 2:**\n\n**Input:** word =  \"apple \", abbr =  \"a2e \"\n**Output:** false\n**Explanation:** The word  \"apple \" cannot be abbreviated as  \"a2e \".\n\n**Constraints:**\n\n*   `1 <= word.length <= 20`\n*   `word` consists of only lowercase English letters.\n*   `1 <= abbr.length <= 10`\n*   `abbr` consists of lowercase English letters and digits.\n*   All the integers in `abbr` will fit in a 32-bit integer.",
          "output": "def validWordAbbreviation(word, abbr):\n    i, j = 0, 0\n    while i < len(word) and j < len(abbr):\n        if abbr[j].isdigit():\n            if abbr[j] == '0': return False  # leading zero\n            num = 0\n            while j < len(abbr) and abbr[j].isdigit():\n                num = num * 10 + int(abbr[j])\n                j += 1\n            i += num\n        else:\n            if word[i] != abbr[j]: return False\n            i, j = i + 1, j + 1\n    return i == len(word) and j == len(abbr)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` which consists of lowercase or uppercase letters, return _the length of the **longest palindrome**_ that can be built with those letters.\n\nLetters are **case sensitive**, for example, `\"Aa \"` is not considered a palindrome here.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abccccdd \"\n**Output:** 7\n**Explanation:** One longest palindrome that can be built is  \"dccaccd \", whose length is 7.\n\n**Example 2:**\n\n**Input:** s =  \"a \"\n**Output:** 1\n**Explanation:** The longest palindrome that can be built is  \"a \", whose length is 1.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2000`\n*   `s` consists of lowercase **and/or** uppercase English letters only.",
          "output": "def longestPalindrome(s: str) -> int:\n    charCount = [0] * 128\n    result = 0\n    for c in s:\n        charCount[ord(c)] += 1\n    for count in charCount:\n        result += count // 2 * 2\n        if result % 2 == 0 and count % 2 == 1:\n            result += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, split `nums` into `k` non-empty subarrays such that the largest sum of any subarray is **minimized**.\n\nReturn _the minimized largest sum of the split_.\n\nA **subarray** is a contiguous part of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[7,2,5,10,8\\], k = 2\n**Output:** 18\n**Explanation:** There are four ways to split nums into two subarrays.\nThe best way is to split it into \\[7,2,5\\] and \\[10,8\\], where the largest sum among the two subarrays is only 18.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,5\\], k = 2\n**Output:** 9\n**Explanation:** There are four ways to split nums into two subarrays.\nThe best way is to split it into \\[1,2,3\\] and \\[4,5\\], where the largest sum among the two subarrays is only 9.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] <= 106`\n*   `1 <= k <= min(50, nums.length)`",
          "output": "def splitArray(nums, m):\n    left, right = max(nums), sum(nums)\n\n    while left < right:\n        mid = (left + right) // 2\n        count, cur_sum = 1, 0\n        for num in nums:\n            cur_sum += num\n            if cur_sum > mid:\n                cur_sum = num\n                count += 1\n\n        if count > m:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: A string can be **abbreviated** by replacing any number of **non-adjacent** substrings with their lengths. For example, a string such as `\"substitution \"` could be abbreviated as (but not limited to):\n\n*   `\"s10n \"` ( `\"s ubstitutio n \"`)\n*   `\"sub4u4 \"` ( `\"sub stit u tion \"`)\n*   `\"12 \"` ( `\"substitution \"`)\n*   `\"su3i1u2on \"` ( `\"su bst i t u ti on \"`)\n*   `\"substitution \"` (no substrings replaced)\n\nNote that `\"s55n \"` ( `\"s ubsti tutio n \"`) is not a valid abbreviation of `\"substitution \"` because the replaced substrings are adjacent.\n\nThe **length** of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. For example, the abbreviation `\"s10n \"` has a length of `3` (`2` letters + `1` substring) and `\"su3i1u2on \"` has a length of `9` (`6` letters + `3` substrings).\n\nGiven a target string `target` and an array of strings `dictionary`, return _an **abbreviation** of_ `target` _with the **shortest possible length** such that it is **not an abbreviation** of **any** string in_ `dictionary`_. If there are multiple shortest abbreviations, return any of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** target =  \"apple \", dictionary = \\[ \"blade \"\\]\n**Output:**  \"a4 \"\n**Explanation:** The shortest abbreviation of  \"apple \" is  \"5 \", but this is also an abbreviation of  \"blade \".\nThe next shortest abbreviations are  \"a4 \" and  \"4e \".  \"4e \" is an abbreviation of blade while  \"a4 \" is not.\nHence, return  \"a4 \".\n\n**Example 2:**\n\n**Input:** target =  \"apple \", dictionary = \\[ \"blade \", \"plain \", \"amber \"\\]\n**Output:**  \"1p3 \"\n**Explanation:**  \"5 \" is an abbreviation of both  \"apple \" but also every word in the dictionary.\n \"a4 \" is an abbreviation of  \"apple \" but also  \"amber \".\n \"4e \" is an abbreviation of  \"apple \" but also  \"blade \".\n \"1p3 \",  \"2p2 \", and  \"3l1 \" are the next shortest abbreviations of  \"apple \".\nSince none of them are abbreviations of words in the dictionary, returning any of them is correct.\n\n**Constraints:**\n\n*   `m == target.length`\n*   `n == dictionary.length`\n*   `1 <= m <= 21`\n*   `0 <= n <= 1000`\n*   `1 <= dictionary[i].length <= 100`\n*   `log2(n) + m <= 21` if `n > 0`\n*   `target` and `dictionary[i]` consist of lowercase English letters.\n*   `dictionary` does not contain `target`.",
          "output": "def abbreviate(s, k, i):\n    if i == len(s):\n        return str(k) if k > 0 else \"\"\n    if k == 0:\n        return s[i:] + (abbreviate(s, 1, i + 1) if i + 1 < len(s) else \"\")\n    return str(k) + s[i] + (abbreviate(s, 1, i + 1) if i + 1 < len(s) else \"\")\n\ndef is_abbreviation(target, word):\n    i, j = 0, 0\n    while i < len(target) and j < len(word):\n        if target[i] == word[j]:\n            i, j = i + 1, j + 1\n        elif target[i].isdigit():\n            k = 0\n            while i < len(target) and target[i].isdigit():\n                k = k * 10 + int(target[i])\n                i += 1\n            j += k\n        else:\n            return False\n    return i == len(target) and j == len(word)\n\ndef min_abbreviation(target, dictionary):\n    ans = target\n    for k in range(0, len(target) + 1):\n        for i in range(0, len(target) - k + 1):\n            current = abbreviate(target, k, i)\n            if len(current) < len(ans):\n                valid = True\n                for word in dictionary:\n                    if is_abbreviation(current, word):\n                        valid = False\n                        break\n                if valid:\n                    ans = current\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _a string array_ `answer` _(**1-indexed**) where_:\n\n*   `answer[i] == \"FizzBuzz \"` if `i` is divisible by `3` and `5`.\n*   `answer[i] == \"Fizz \"` if `i` is divisible by `3`.\n*   `answer[i] == \"Buzz \"` if `i` is divisible by `5`.\n*   `answer[i] == i` (as a string) if none of the above conditions are true.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** \\[\"1\",\"2\",\"Fizz\"\\]\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** \\[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"\\]\n\n**Example 3:**\n\n**Input:** n = 15\n**Output:** \\[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"\\]\n\n**Constraints:**\n\n*   `1 <= n <= 104`",
          "output": "def fizzBuzz(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 15 == 0:\n            result.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            result.append(\"Fizz\")\n        elif i % 5 == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: An integer array is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n*   For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.\n\nGiven an integer array `nums`, return _the number of arithmetic **subarrays** of_ `nums`.\n\nA **subarray** is a contiguous subsequence of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 3\n**Explanation:** We have 3 arithmetic slices in nums: \\[1, 2, 3\\], \\[2, 3, 4\\] and \\[1,2,3,4\\] itself.\n\n**Example 2:**\n\n**Input:** nums = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `-1000 <= nums[i] <= 1000`",
          "output": "def numberOfArithmeticSlices(nums):\n    n = len(nums)\n    count, cur = 0, 0\n    for i in range(2, n):\n        if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n            cur += 1\n            count += cur\n        else:\n            cur = 0\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,2,1\\]\n**Output:** 1\n**Explanation:**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2\\]\n**Output:** 2\n**Explanation:**\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n\n**Example 3:**\n\n**Input:** nums = \\[2,2,3,1\\]\n**Output:** 1\n**Explanation:**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-231 <= nums[i] <= 231 - 1`\n\n**Follow up:** Can you find an `O(n)` solution?",
          "output": "def third_max(nums):\n    top3 = set()\n    for num in nums:\n        top3.add(num)\n        if len(top3) > 3:\n            top3.remove(min(top3))\n    return min(top3) if len(top3) == 3 else max(top3)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two non-negative integers, `num1` and `num2` represented as string, return _the sum of_ `num1` _and_ `num2` _as a string_.\n\nYou must solve the problem without using any built-in library for handling large integers (such as `BigInteger`). You must also not convert the inputs to integers directly.\n\n",
          "input": "**Example 1:**\n\n**Input:** num1 =  \"11 \", num2 =  \"123 \"\n**Output:**  \"134 \"\n\n**Example 2:**\n\n**Input:** num1 =  \"456 \", num2 =  \"77 \"\n**Output:**  \"533 \"\n\n**Example 3:**\n\n**Input:** num1 =  \"0 \", num2 =  \"0 \"\n**Output:**  \"0 \"\n\n**Constraints:**\n\n*   `1 <= num1.length, num2.length <= 104`\n*   `num1` and `num2` consist of only digits.\n*   `num1` and `num2` don't have any leading zeros except for the zero itself.",
          "output": "def addStrings(num1: str, num2: str) -> str:\n    i, j, carry, result = len(num1) - 1, len(num2) - 1, 0, []\n\n    while i >= 0 or j >= 0 or carry:\n        sum = carry\n\n        if i >= 0:\n            sum += int(num1[i])\n            i -= 1\n        if j >= 0:\n            sum += int(num2[j])\n            j -= 1\n\n        carry = sum // 10\n        result.append(str(sum % 10))\n\n    return ''.join(result[::-1])\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return `true` _if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,5,11,5\\]\n**Output:** true\n**Explanation:** The array can be partitioned as \\[1, 5, 5\\] and \\[11\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,5\\]\n**Output:** false\n**Explanation:** The array cannot be partitioned into equal sum subsets.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 200`\n*   `1 <= nums[i] <= 100`",
          "output": "def canPartition(nums):\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    \n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    \n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    \n    return dp[target]\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `m x n` rectangular island that borders both the **Pacific Ocean** and **Atlantic Ocean**. The **Pacific Ocean** touches the island's left and top edges, and the **Atlantic Ocean** touches the island's right and bottom edges.\n\nThe island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the **height above sea level** of the cell at coordinate `(r, c)`.\n\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is **less than or equal to** the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n\nReturn _a **2D list** of grid coordinates_ `result` _where_ `result[i] = [ri, ci]` _denotes that rain water can flow from cell_ `(ri, ci)` _to **both** the Pacific and Atlantic oceans_.\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[\\[1,2,2,3,5\\],\\[3,2,3,4,4\\],\\[2,4,5,3,1\\],\\[6,7,1,4,5\\],\\[5,1,1,2,4\\]\\]\n**Output:** \\[\\[0,4\\],\\[1,3\\],\\[1,4\\],\\[2,2\\],\\[3,0\\],\\[3,1\\],\\[4,0\\]\\]\n**Explanation:** The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n\\[0,4\\]: \\[0,4\\] -> Pacific Ocean \n       \\[0,4\\] -> Atlantic Ocean\n\\[1,3\\]: \\[1,3\\] -> \\[0,3\\] -> Pacific Ocean \n       \\[1,3\\] -> \\[1,4\\] -> Atlantic Ocean\n\\[1,4\\]: \\[1,4\\] -> \\[1,3\\] -> \\[0,3\\] -> Pacific Ocean \n       \\[1,4\\] -> Atlantic Ocean\n\\[2,2\\]: \\[2,2\\] -> \\[1,2\\] -> \\[0,2\\] -> Pacific Ocean \n       \\[2,2\\] -> \\[2,3\\] -> \\[2,4\\] -> Atlantic Ocean\n\\[3,0\\]: \\[3,0\\] -> Pacific Ocean \n       \\[3,0\\] -> \\[4,0\\] -> Atlantic Ocean\n\\[3,1\\]: \\[3,1\\] -> \\[3,0\\] -> Pacific Ocean \n       \\[3,1\\] -> \\[4,1\\] -> Atlantic Ocean\n\\[4,0\\]: \\[4,0\\] -> Pacific Ocean \n       \\[4,0\\] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n\n**Example 2:**\n\n**Input:** heights = \\[\\[1\\]\\]\n**Output:** \\[\\[0,0\\]\\]\n**Explanation:** The water can flow from the only cell to the Pacific and Atlantic oceans.\n\n**Constraints:**\n\n*   `m == heights.length`\n*   `n == heights[r].length`\n*   `1 <= m, n <= 200`\n*   `0 <= heights[r][c] <= 105`",
          "output": "def pacificAtlantic(heights):\n    def dfs(r, c, prev_height, visited):\n        if not (0 <= r < len(heights)) or not (0 <= c < len(heights[0])):\n            return\n        if heights[r][c] >= prev_height and not visited[r][c]:\n            visited[r][c] = True\n            dfs(r - 1, c, heights[r][c], visited)\n            dfs(r + 1, c, heights[r][c], visited)\n            dfs(r, c - 1, heights[r][c], visited)\n            dfs(r, c + 1, heights[r][c], visited)\n\n    m, n = len(heights), len(heights[0])\n    pacific = [[False] * n for _ in range(m)]\n    atlantic = [[False] * n for _ in range(m)]\n\n    for r in range(m):\n        dfs(r, 0, -1, pacific)\n        dfs(r, n - 1, -1, atlantic)\n    for c in range(n):\n        dfs(0, c, -1, pacific)\n        dfs(m - 1, c, -1, atlantic)\n\n    result = []\n    for r in range(m):\n        for c in range(n):\n            if pacific[r][c] and atlantic[r][c]:\n                result.append([r, c])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `rows x cols` screen and a `sentence` represented as a list of strings, return _the number of times the given sentence can be fitted on the screen_.\n\nThe order of words in the sentence must remain unchanged, and a word cannot be split into two lines. A single space must separate two consecutive words in a line.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence = \\[ \"hello \", \"world \"\\], rows = 2, cols = 8\n**Output:** 1\n**Explanation:**\nhello---\nworld---\nThe character '-' signifies an empty space on the screen.\n\n**Example 2:**\n\n**Input:** sentence = \\[ \"a \",  \"bcd \",  \"e \"\\], rows = 3, cols = 6\n**Output:** 2\n**Explanation:**\na-bcd- \ne-a---\nbcd-e-\nThe character '-' signifies an empty space on the screen.\n\n**Example 3:**\n\n**Input:** sentence = \\[ \"i \", \"had \", \"apple \", \"pie \"\\], rows = 4, cols = 5\n**Output:** 1\n**Explanation:**\ni-had\napple\npie-i\nhad--\nThe character '-' signifies an empty space on the screen.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 100`\n*   `1 <= sentence[i].length <= 10`\n*   `sentence[i]` consists of lowercase English letters.\n*   `1 <= rows, cols <= 2 * 104`",
          "output": "def words_typing(sentence, rows, cols):\n    total_chars = sum(len(word) + 1 for word in sentence)\n\n    result = 0\n    index = 0\n    for _ in range(rows):\n        remaining_cols = cols\n        while True:\n            word_len = len(sentence[index])\n            if remaining_cols >= word_len:\n                remaining_cols -= word_len + 1\n                index = (index + 1) % len(sentence)\n                if index == 0:\n                    result += 1\n            else:\n                break\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` matrix `board` where each cell is a battleship `'X'` or empty `'.'`, return _the number of the **battleships** on_ `board`.\n\n**Battleships** can only be placed horizontally or vertically on `board`. In other words, they can only be made of the shape `1 x k` (`1` row, `k` columns) or `k x 1` (`k` rows, `1` column), where `k` can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \"X \", \". \", \". \", \"X \"\\],\\[ \". \", \". \", \". \", \"X \"\\],\\[ \". \", \". \", \". \", \"X \"\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \". \"\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `m == board.length`\n*   `n == board[i].length`\n*   `1 <= m, n <= 200`\n*   `board[i][j]` is either `'.'` or `'X'`.\n\n**Follow up:** Could you do it in one-pass, using only `O(1)` extra memory and without modifying the values `board`?",
          "output": "def countBattleships(board):\n    count = 0\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if (board[i][j] == 'X' and\n                (i == 0 or board[i - 1][j] == '.') and\n                (j == 0 or board[i][j - 1] == '.')):\n                count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: A password is considered strong if the below conditions are all met:\n\n*   It has at least `6` characters and at most `20` characters.\n*   It contains at least **one lowercase** letter, at least **one uppercase** letter, and at least **one digit**.\n*   It does not contain three repeating characters in a row (i.e., `\"B**aaa**bb0 \"` is weak, but `\"B**aa**b**a**0 \"` is strong).\n\nGiven a string `password`, return _the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`._\n\nIn one step, you can:\n\n*   Insert one character to `password`,\n*   Delete one character from `password`, or\n*   Replace one character of `password` with another character.\n\n",
          "input": "**Example 1:**\n\n**Input:** password = \"a\"\n**Output:** 5\n\n**Example 2:**\n\n**Input:** password = \"aA1\"\n**Output:** 3\n\n**Example 3:**\n\n**Input:** password = \"1337C0d3\"\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= password.length <= 50`\n*   `password` consists of letters, digits, dot `'.'` or exclamation mark `'!'`.",
          "output": "def strong_password(password):\n    missing_lower = 1\n    missing_upper = 1\n    missing_digit = 1\n    total = len(password)\n    \n    for c in password:\n        if c.islower(): missing_lower = 0\n        if c.isupper(): missing_upper = 0\n        if c.isdigit(): missing_digit = 0\n    \n    missing = missing_lower + missing_upper + missing_digit\n    if total < 6: return max(missing, 6 - total)\n    if total > 20: return missing + total - 20\n\n    return missing\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the maximum result of_ `nums[i] XOR nums[j]`, where `0 <= i <= j < n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,10,5,25,2,8\\]\n**Output:** 28\n**Explanation:** The maximum result is 5 XOR 25 = 28.\n\n**Example 2:**\n\n**Input:** nums = \\[14,70,53,83,49,91,36,80,92,51,66,70\\]\n**Output:** 127\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 105`\n*   `0 <= nums[i] <= 231 - 1`",
          "output": "def findMaximumXOR(nums):\n    max_xor = 0\n    mask = 0\n\n    for i in range(31, -1, -1):\n        mask |= (1 << i)\n        prefixes = {num & mask for num in nums}\n\n        possible_max = max_xor | (1 << i)\n\n        for prefix in prefixes:\n            if prefix ^ possible_max in prefixes:\n                max_xor = possible_max\n                break\n\n    return max_xor\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words`, return `true` _if it forms a valid **word square**_.\n\nA sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"abcd \", \"bnrt \", \"crmy \", \"dtye \"\\]\n**Output:** true\n**Explanation:**\nThe 1st row and 1st column both read  \"abcd \".\nThe 2nd row and 2nd column both read  \"bnrt \".\nThe 3rd row and 3rd column both read  \"crmy \".\nThe 4th row and 4th column both read  \"dtye \".\nTherefore, it is a valid word square.\n\n**Example 2:**\n\n**Input:** words = \\[ \"abcd \", \"bnrt \", \"crm \", \"dt \"\\]\n**Output:** true\n**Explanation:**\nThe 1st row and 1st column both read  \"abcd \".\nThe 2nd row and 2nd column both read  \"bnrt \".\nThe 3rd row and 3rd column both read  \"crm \".\nThe 4th row and 4th column both read  \"dt \".\nTherefore, it is a valid word square.\n\n**Example 3:**\n\n**Input:** words = \\[ \"ball \", \"area \", \"read \", \"lady \"\\]\n**Output:** false\n**Explanation:**\nThe 3rd row reads  \"read \" while the 3rd column reads  \"lead \".\nTherefore, it is NOT a valid word square.\n\n**Constraints:**\n\n*   `1 <= words.length <= 500`\n*   `1 <= words[i].length <= 500`\n*   `words[i]` consists of only lowercase English letters.",
          "output": "def valid_word_square(words):\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            if j >= len(words) or i >= len(words[j]) or words[i][j] != words[j][i]:\n                return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` containing an out-of-order English representation of digits `0-9`, return _the digits in **ascending** order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"owoztneoer\"\n**Output:** \"012\"\n\n**Example 2:**\n\n**Input:** s = \"fviefuro\"\n**Output:** \"45\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is one of the characters `[ \"e \", \"g \", \"f \", \"i \", \"h \", \"o \", \"n \", \"s \", \"r \", \"u \", \"t \", \"w \", \"v \", \"x \", \"z \"]`.\n*   `s` is **guaranteed** to be valid.",
          "output": "def find_digits_in_ascending_order(s):\n    count = [0] * 10\n    for c in s:\n        if c == 'z': count[0] += 1\n        if c == 'w': count[2] += 1\n        if c == 'u': count[4] += 1\n        if c == 'x': count[6] += 1\n        if c == 'g': count[8] += 1\n        if c == 'o': count[1] += 1\n        if c == 'h': count[3] += 1\n        if c == 'f': count[5] += 1\n        if c == 's': count[7] += 1\n        if c == 'i': count[9] += 1\n    count[1] -= count[0] + count[2] + count[4]\n    count[3] -= count[8]\n    count[5] -= count[4]\n    count[7] -= count[6]\n    count[9] -= count[5] + count[6] + count[8]\n    \n    res = []\n    for i in range(10):\n        res.extend([str(i)] * count[i])\n    return ''.join(res)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\nReturn _the length of the longest substring containing the same letter you can get after performing the above operations_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ABAB \", k = 2\n**Output:** 4\n**Explanation:** Replace the two 'A's with two 'B's or vice versa.\n\n**Example 2:**\n\n**Input:** s =  \"AABABBA \", k = 1\n**Output:** 4\n**Explanation:** Replace the one 'A' in the middle with 'B' and form  \"AABBBBA \".\nThe substring  \"BBBB \" has the longest repeating letters, which is 4.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of only uppercase English letters.\n*   `0 <= k <= s.length`",
          "output": "def characterReplacement(s:str, k:int) -> int:\n    n = len(s)\n    left = 0\n    right = 0\n    maxFreq = 0\n    result = 0\n    freq = [0] * 26\n\n    for right in range(n):\n        freq[ord(s[right]) - ord('A')] += 1\n        maxFreq = max(maxFreq, freq[ord(s[right]) - ord('A')])\n\n        if right - left + 1 - maxFreq > k:\n            freq[ord(s[left]) - ord('A')] -= 1\n            left += 1\n\n        result = max(result, right - left + 1)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of **unique** strings `words`, return _all the_ **[word squares](https://en.wikipedia.org/wiki/Word_square)** _you can build from_ `words`. The same word from `words` can be used **multiple times**. You can return the answer in **any order**.\n\nA sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.\n\n*   For example, the word sequence `[ \"ball \", \"area \", \"lead \", \"lady \"]` forms a word square because each word reads the same both horizontally and vertically.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"area \", \"lead \", \"wall \", \"lady \", \"ball \"\\]\n**Output:** \\[\\[ \"ball \", \"area \", \"lead \", \"lady \"\\],\\[ \"wall \", \"area \", \"lead \", \"lady \"\\]\\]\n**Explanation:**\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n\n**Example 2:**\n\n**Input:** words = \\[ \"abat \", \"baba \", \"atan \", \"atal \"\\]\n**Output:** \\[\\[ \"baba \", \"abat \", \"baba \", \"atal \"\\],\\[ \"baba \", \"abat \", \"baba \", \"atan \"\\]\\]\n**Explanation:**\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 4`\n*   All `words[i]` have the same length.\n*   `words[i]` consists of only lowercase English letters.\n*   All `words[i]` are **unique**.",
          "output": "from collections import defaultdict\n\ndef wordSquares(words):\n    def build(row, squares, word_lens):\n        if row == word_lens:\n            res.append(list(squares))\n            return\n        prefix = ''.join(squares[i][row] for i in range(row))\n        for w in prefixes[prefix]:\n            squares[row] = w\n            build(row+1, squares, word_lens)\n\n    if not words: return []\n    res = []\n    word_lens = len(words[0])\n    \n    prefixes = defaultdict(list)\n    for word in words:\n        for i in range(word_lens+1):\n            prefixes[word[:i]].append(word)\n            \n    for word in words:\n        build(1, [word] + [None]*(word_lens-1), word_lens)\n        \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n\nImplement the `AllOne` class:\n\n*   `AllOne()` Initializes the object of the data structure.\n*   `inc(String key)` Increments the count of the string `key` by `1`. If `key` does not exist in the data structure, insert it with count `1`.\n*   `dec(String key)` Decrements the count of the string `key` by `1`. If the count of `key` is `0` after the decrement, remove it from the data structure. It is guaranteed that `key` exists in the data structure before the decrement.\n*   `getMaxKey()` Returns one of the keys with the maximal count. If no element exists, return an empty string `\" \"`.\n*   `getMinKey()` Returns one of the keys with the minimum count. If no element exists, return an empty string `\" \"`.\n\n**Note** that each function must run in `O(1)` average time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"AllOne \",  \"inc \",  \"inc \",  \"getMaxKey \",  \"getMinKey \",  \"inc \",  \"getMaxKey \",  \"getMinKey \"\\]\n\\[\\[\\], \\[ \"hello \"\\], \\[ \"hello \"\\], \\[\\], \\[\\], \\[ \"leet \"\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null,  \"hello \",  \"hello \", null,  \"hello \",  \"leet \"\\]\n\n**Explanation**\nAllOne allOne = new AllOne();\nallOne.inc( \"hello \");\nallOne.inc( \"hello \");\nallOne.getMaxKey(); // return  \"hello \"\nallOne.getMinKey(); // return  \"hello \"\nallOne.inc( \"leet \");\nallOne.getMaxKey(); // return  \"hello \"\nallOne.getMinKey(); // return  \"leet \"\n\n**Constraints:**\n\n*   `1 <= key.length <= 10`\n*   `key` consists of lowercase English letters.\n*   It is guaranteed that for each call to `dec`, `key` is existing in the data structure.\n*   At most `5 * 104` calls will be made to `inc`, `dec`, `getMaxKey`, and `getMinKey`.",
          "output": "class AllOne:\n    def __init__(self):\n        self.data = dict()\n\n    def inc(self, key: str) -> None:\n        self.data[key] = self.data.get(key, 0) + 1\n\n    def dec(self, key: str) -> None:\n        self.data[key] = self.data.get(key, 0) - 1\n        if self.data[key] == 0:\n            del self.data[key]\n\n    def getMaxKey(self) -> str:\n        if not self.data:\n            return \"\"\n        return max(self.data, key=lambda x: self.data[x])\n\n    def getMinKey(self) -> str:\n        if not self.data:\n            return \"\"\n        return min(self.data, key=lambda x: self.data[x])\n"
     },
     {
          "instruction": "Write python code for this problem: A gene string can be represented by an 8-character long string, with choices from `'A'`, `'C'`, `'G'`, and `'T'`.\n\nSuppose we need to investigate a mutation from a gene string `startGene` to a gene string `endGene` where one mutation is defined as one single character changed in the gene string.\n\n*   For example, `\"AACCGGTT \" --> \"AACCGGTA \"` is one mutation.\n\nThere is also a gene bank `bank` that records all the valid gene mutations. A gene must be in `bank` to make it a valid gene string.\n\nGiven the two gene strings `startGene` and `endGene` and the gene bank `bank`, return _the minimum number of mutations needed to mutate from_ `startGene` _to_ `endGene`. If there is no such a mutation, return `-1`.\n\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\n\n",
          "input": "**Example 1:**\n\n**Input:** startGene =  \"AACCGGTT \", endGene =  \"AACCGGTA \", bank = \\[ \"AACCGGTA \"\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** startGene =  \"AACCGGTT \", endGene =  \"AAACGGTA \", bank = \\[ \"AACCGGTA \", \"AACCGCTA \", \"AAACGGTA \"\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `0 <= bank.length <= 10`\n*   `startGene.length == endGene.length == bank[i].length == 8`\n*   `startGene`, `endGene`, and `bank[i]` consist of only the characters `['A', 'C', 'G', 'T']`.",
          "output": "from collections import deque\n\ndef minMutation(start, end, bank):\n    q = deque([start])\n    visited = set([start])\n    depth = 0\n\n    while q:\n        levelSize = len(q)\n        for _ in range(levelSize):\n            current = q.popleft()\n            if current == end:\n                return depth\n\n            for gene in bank:\n                if gene not in visited:\n                    diff = sum(1 for j in range(8) if current[j] != gene[j])\n                    if diff == 1:\n                        q.append(gene)\n                        visited.add(gene)\n        depth += 1\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the number of segments in the string_.\n\nA **segment** is defined to be a contiguous sequence of **non-space characters**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"Hello, my name is John \"\n**Output:** 5\n**Explanation:** The five segments are \\[ \"Hello, \",  \"my \",  \"name \",  \"is \",  \"John \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"Hello \"\n**Output:** 1\n\n**Constraints:**\n\n*   `0 <= s.length <= 300`\n*   `s` consists of lowercase and uppercase English letters, digits, or one of the following characters `\"!@#$%^&*()_+-=',.: \"`.\n*   The only space character in `s` is `' '`.",
          "output": "def count_segments(s: str) -> int:\n    return len(s.split())\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping_.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[1,3\\]\\]\n**Output:** 1\n**Explanation:** \\[1,3\\] can be removed and the rest of the intervals are non-overlapping.\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[1,2\\],\\[1,2\\],\\[1,2\\]\\]\n**Output:** 2\n**Explanation:** You need to remove two \\[1,2\\] to make the rest of the intervals non-overlapping.\n\n**Example 3:**\n\n**Input:** intervals = \\[\\[1,2\\],\\[2,3\\]\\]\n**Output:** 0\n**Explanation:** You don't need to remove any of the intervals since they're already non-overlapping.\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 105`\n*   `intervals[i].length == 2`\n*   `-5 * 104 <= starti < endi <= 5 * 104`",
          "output": "def eraseOverlapIntervals(intervals):\n    if not intervals:\n        return 0\n    \n    intervals.sort(key=lambda x: x[1])\n    \n    count = 0\n    prev_end = intervals[0][1]\n    \n    for i in range(1, len(intervals)):\n        if intervals[i][0] < prev_end:\n            count += 1\n        else:\n            prev_end = intervals[i][1]\n    \n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is **unique**.\n\nThe **right interval** for an interval `i` is an interval `j` such that `startj >= endi` and `startj` is **minimized**. Note that `i` may equal `j`.\n\nReturn _an array of **right interval** indices for each interval `i`_. If no **right interval** exists for interval `i`, then put `-1` at index `i`.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[1,2\\]\\]\n**Output:** \\[-1\\]\n**Explanation:** There is only one interval in the collection, so it outputs -1.\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[3,4\\],\\[2,3\\],\\[1,2\\]\\]\n**Output:** \\[-1,0,1\\]\n**Explanation:** There is no right interval for \\[3,4\\].\nThe right interval for \\[2,3\\] is \\[3,4\\] since start0 = 3 is the smallest start that is >= end1 = 3.\nThe right interval for \\[1,2\\] is \\[2,3\\] since start1 = 2 is the smallest start that is >= end2 = 2.\n\n**Example 3:**\n\n**Input:** intervals = \\[\\[1,4\\],\\[2,3\\],\\[3,4\\]\\]\n**Output:** \\[-1,2,-1\\]\n**Explanation:** There is no right interval for \\[1,4\\] and \\[3,4\\].\nThe right interval for \\[2,3\\] is \\[3,4\\] since start2 = 3 is the smallest start that is >= end1 = 3.\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 2 * 104`\n*   `intervals[i].length == 2`\n*   `-106 <= starti <= endi <= 106`\n*   The start point of each interval is **unique**.",
          "output": "def findRightInterval(intervals):\n    starts = {interval[0]: index for index, interval in enumerate(intervals)}\n    res = []\n\n    for interval in intervals:\n        right = min(filter(lambda x: x >= interval[1], starts.keys()), default=-1)\n        res.append(starts[right] if right != -1 else -1)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and an integer `targetSum`, return _the number of paths where the sum of the values along the path equals_ `targetSum`.\n\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[10,5,-3,3,2,null,11,3,-2,null,1\\], targetSum = 8\n**Output:** 3\n**Explanation:** The paths that sum to 8 are shown.\n\n**Example 2:**\n\n**Input:** root = \\[5,4,8,11,null,13,4,7,2,null,null,5,1\\], targetSum = 22\n**Output:** 3\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 1000]`.\n*   `-109 <= Node.val <= 109`\n*   `-1000 <= targetSum <= 1000`",
          "output": "def path_sum_helper(node, target_sum, current_sum):\n    if node is None:\n        return 0\n\n    current_sum += node.val\n    total_paths = 1 if current_sum == target_sum else 0\n    total_paths += path_sum_helper(node.left, target_sum, current_sum)\n    total_paths += path_sum_helper(node.right, target_sum, current_sum)\n    return total_paths\n\ndef path_sum(root, target_sum):\n    if root is None:\n        return 0\n\n    return path_sum_helper(root, target_sum, 0) + path_sum(root.left, target_sum) + path_sum(root.right, target_sum)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `p`, return _an array of all the start indices of_ `p`_'s anagrams in_ `s`. You may return the answer in **any order**.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"cbaebabacd \", p =  \"abc \"\n**Output:** \\[0,6\\]\n**Explanation:**\nThe substring with start index = 0 is  \"cba \", which is an anagram of  \"abc \".\nThe substring with start index = 6 is  \"bac \", which is an anagram of  \"abc \".\n\n**Example 2:**\n\n**Input:** s =  \"abab \", p =  \"ab \"\n**Output:** \\[0,1,2\\]\n**Explanation:**\nThe substring with start index = 0 is  \"ab \", which is an anagram of  \"ab \".\nThe substring with start index = 1 is  \"ba \", which is an anagram of  \"ab \".\nThe substring with start index = 2 is  \"ab \", which is an anagram of  \"ab \".\n\n**Constraints:**\n\n*   `1 <= s.length, p.length <= 3 * 104`\n*   `s` and `p` consist of lowercase English letters.",
          "output": "def find_anagrams(s, p):\n    if len(s) < len(p):\n        return []\n\n    s_count = [0] * 26\n    p_count = [0] * 26\n    for c in p:\n        p_count[ord(c) - ord('a')] += 1\n\n    result = []\n    for i in range(len(s)):\n        s_count[ord(s[i]) - ord('a')] += 1\n        if i >= len(p):\n            s_count[ord(s[i - len(p)]) - ord('a')] -= 1\n        if s_count == p_count:\n            result.append(i - len(p) + 1)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `expression` representing arbitrarily nested ternary expressions, evaluate the expression, and return _the result of it_.\n\nYou can always assume that the given expression is valid and only contains digits, `'?'`, `':'`, `'T'`, and `'F'` where `'T'` is true and `'F'` is false. All the numbers in the expression are **one-digit** numbers (i.e., in the range `[0, 9]`).\n\nThe conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, `'T'` or `'F'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"T?2:3 \"\n**Output:**  \"2 \"\n**Explanation:** If true, then result is 2; otherwise result is 3.\n\n**Example 2:**\n\n**Input:** expression =  \"F?1:T?4:5 \"\n**Output:**  \"4 \"\n**Explanation:** The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n \"(F ? 1 : (T ? 4 : 5)) \" -->  \"(F ? 1 : 4) \" -->  \"4 \"\nor  \"(F ? 1 : (T ? 4 : 5)) \" -->  \"(T ? 4 : 5) \" -->  \"4 \"\n\n**Example 3:**\n\n**Input:** expression =  \"T?T?F:5:3 \"\n**Output:**  \"F \"\n**Explanation:** The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n \"(T ? (T ? F : 5) : 3) \" -->  \"(T ? F : 3) \" -->  \"F \"\n \"(T ? (T ? F : 5) : 3) \" -->  \"(T ? F : 5) \" -->  \"F \"\n\n**Constraints:**\n\n*   `5 <= expression.length <= 104`\n*   `expression` consists of digits, `'T'`, `'F'`, `'?'`, and `':'`.\n*   It is **guaranteed** that `expression` is a valid ternary expression and that each number is a **one-digit number**.",
          "output": "def parseTernary(expression: str) -> str:\n    stack = []\n    for c in reversed(expression):\n        if stack and stack[-1] == '?':\n            stack.pop()  # Pop '?'\n            first = stack.pop()\n            stack.pop()  # Pop ':'\n            second = stack.pop()\n            stack.append(first if c == 'T' else second)\n        else:\n            stack.append(c)\n    return stack[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `n` and `k`, return _the_ `kth` _lexicographically smallest integer in the range_ `[1, n]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 13, k = 2\n**Output:** 10\n**Explanation:** The lexicographical order is \\[1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9\\], so the second smallest number is 10.\n\n**Example 2:**\n\n**Input:** n = 1, k = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= k <= n <= 109`",
          "output": "def find_kth_number(n, k):\n    nums = [i for i in range(1, n + 1)]\n    nums.sort(key=lambda x: str(x))\n    return nums[k - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` coins and you want to build a staircase with these coins. The staircase consists of `k` rows where the `ith` row has exactly `i` coins. The last row of the staircase **may be** incomplete.\n\nGiven the integer `n`, return _the number of **complete rows** of the staircase you will build_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** Because the 3rd row is incomplete, we return 2.\n\n**Example 2:**\n\n**Input:** n = 8\n**Output:** 3\n**Explanation:** Because the 4th row is incomplete, we return 3.\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`",
          "output": "def arrange_coins(n: int) -> int:\n    k = 0\n    while n > k:\n        k += 1\n        n -= k\n    return k\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of length `n` where all the integers of `nums` are in the range `[1, n]` and each integer appears **once** or **twice**, return _an array of all the integers that appears **twice**_.\n\nYou must write an algorithm that runs in `O(n)` time and uses only constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,3,2,7,8,2,3,1\\]\n**Output:** \\[2,3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,2\\]\n**Output:** \\[1\\]\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `1 <= nums[i] <= n`\n*   Each element in `nums` appears **once** or **twice**.",
          "output": "def find_duplicates(nums):\n    duplicates = []\n    for i in range(len(nums)):\n        index = abs(nums[i]) - 1\n        if nums[index] < 0:\n            duplicates.append(abs(nums[i]))\n        else:\n            nums[index] *= -1\n    return duplicates\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of characters `chars`, compress it using the following algorithm:\n\nBegin with an empty string `s`. For each group of **consecutive repeating characters** in `chars`:\n\n*   If the group's length is `1`, append the character to `s`.\n*   Otherwise, append the character followed by the group's length.\n\nThe compressed string `s` **should not be returned separately**, but instead, be stored **in the input character array `chars`**. Note that group lengths that are `10` or longer will be split into multiple characters in `chars`.\n\nAfter you are done **modifying the input array,** return _the new length of the array_.\n\nYou must write an algorithm that uses only constant extra space.\n\n",
          "input": "**Example 1:**\n\n**Input:** chars = \\[ \"a \", \"a \", \"b \", \"b \", \"c \", \"c \", \"c \"\\]\n**Output:** Return 6, and the first 6 characters of the input array should be: \\[ \"a \", \"2 \", \"b \", \"2 \", \"c \", \"3 \"\\]\n**Explanation:** The groups are  \"aa \",  \"bb \", and  \"ccc \". This compresses to  \"a2b2c3 \".\n\n**Example 2:**\n\n**Input:** chars = \\[ \"a \"\\]\n**Output:** Return 1, and the first character of the input array should be: \\[ \"a \"\\]\n**Explanation:** The only group is  \"a \", which remains uncompressed since it's a single character.\n\n**Example 3:**\n\n**Input:** chars = \\[ \"a \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \", \"b \"\\]\n**Output:** Return 4, and the first 4 characters of the input array should be: \\[ \"a \", \"b \", \"1 \", \"2 \"\\].\n**Explanation:** The groups are  \"a \" and  \"bbbbbbbbbbbb \". This compresses to  \"ab12 \".\n\n**Constraints:**\n\n*   `1 <= chars.length <= 2000`\n*   `chars[i]` is a lowercase English letter, uppercase English letter, digit, or symbol.How do you know if you are at the end of a consecutive group of characters?",
          "output": "def compress(chars):\n    index, i = 0, 0\n    \n    while i < len(chars):\n        count = 1\n        while i + count < len(chars) and chars[i] == chars[i + count]:\n            count += 1\n            \n        chars[index] = chars[i]\n        index += 1\n        \n        if count > 1:\n            count_str = str(count)\n            for c in count_str:\n                chars[index] = c\n                index += 1\n                \n        i += count\n        \n    return index\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of length `n` where `nums` is a permutation of the integers in the range `[1, n]`. You are also given a 2D integer array `sequences` where `sequences[i]` is a subsequence of `nums`.\n\nCheck if `nums` is the shortest possible and the only **supersequence**. The shortest **supersequence** is a sequence **with the shortest length** and has all `sequences[i]` as subsequences. There could be multiple valid **supersequences** for the given array `sequences`.\n\n*   For example, for `sequences = [[1,2],[1,3]]`, there are two shortest **supersequences**, `[1,2,3]` and `[1,3,2]`.\n*   While for `sequences = [[1,2],[1,3],[1,2,3]]`, the only shortest **supersequence** possible is `[1,2,3]`. `[1,2,3,4]` is a possible supersequence but not the shortest.\n\nReturn `true` _if_ `nums` _is the only shortest **supersequence** for_ `sequences`_, or_ `false` _otherwise_.\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\], sequences = \\[\\[1,2\\],\\[1,3\\]\\]\n**Output:** false\n**Explanation:** There are two possible supersequences: \\[1,2,3\\] and \\[1,3,2\\].\nThe sequence \\[1,2\\] is a subsequence of both: \\[**1**,**2**,3\\] and \\[**1**,3,**2**\\].\nThe sequence \\[1,3\\] is a subsequence of both: \\[**1**,2,**3**\\] and \\[**1**,**3**,2\\].\nSince nums is not the only shortest supersequence, we return false.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3\\], sequences = \\[\\[1,2\\]\\]\n**Output:** false\n**Explanation:** The shortest possible supersequence is \\[1,2\\].\nThe sequence \\[1,2\\] is a subsequence of it: \\[**1**,**2**\\].\nSince nums is not the shortest supersequence, we return false.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\], sequences = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]\n**Output:** true\n**Explanation:** The shortest possible supersequence is \\[1,2,3\\].\nThe sequence \\[1,2\\] is a subsequence of it: \\[**1**,**2**,3\\].\nThe sequence \\[1,3\\] is a subsequence of it: \\[**1**,2,**3**\\].\nThe sequence \\[2,3\\] is a subsequence of it: \\[1,**2**,**3**\\].\nSince nums is the only shortest supersequence, we return true.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 104`\n*   `nums` is a permutation of all the integers in the range `[1, n]`.\n*   `1 <= sequences.length <= 104`\n*   `1 <= sequences[i].length <= 104`\n*   `1 <= sum(sequences[i].length) <= 105`\n*   `1 <= sequences[i][j] <= n`\n*   All the arrays of `sequences` are **unique**.\n*   `sequences[i]` is a subsequence of `nums`.",
          "output": "def is_shortest_and_unique_supersequence(nums, sequences):\n    pos = {val: idx for idx, val in enumerate(nums)}\n\n    for seq in sequences:\n        if pos[seq[0]] > pos[seq[-1]]:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **non-empty** linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n",
          "input": "**Example 1:**\n\n**Input:** l1 = \\[7,2,4,3\\], l2 = \\[5,6,4\\]\n**Output:** \\[7,8,0,7\\]\n\n**Example 2:**\n\n**Input:** l1 = \\[2,4,3\\], l2 = \\[5,6,4\\]\n**Output:** \\[8,0,7\\]\n\n**Example 3:**\n\n**Input:** l1 = \\[0\\], l2 = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   The number of nodes in each linked list is in the range `[1, 100]`.\n*   `0 <= Node.val <= 9`\n*   It is guaranteed that the list represents a number that does not have leading zeros.\n\n**Follow up:** Could you solve it without reversing the input lists?",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef addTwoNumbers(l1, l2):\n    result = ListNode(0)\n    current = result\n    carry = 0\n    while l1 or l2 or carry:\n        sum = (l1.val if l1 else 0) + (l2.val if l2 else 0) + carry\n        carry = sum // 10\n        current.next = ListNode(sum % 10)\n        current = current.next\n        if l1: l1 = l1.next\n        if l2: l2 = l2.next\n    return result.next\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the number of all the **arithmetic subsequences** of_ `nums`.\n\nA sequence of numbers is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n*   For example, `[1, 3, 5, 7, 9]`, `[7, 7, 7, 7]`, and `[3, -1, -5, -9]` are arithmetic sequences.\n*   For example, `[1, 1, 2, 5, 7]` is not an arithmetic sequence.\n\nA **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n*   For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`.\n\nThe test cases are generated so that the answer fits in **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,4,6,8,10\\]\n**Output:** 7\n**Explanation:** All arithmetic subsequence slices are:\n\\[2,4,6\\]\n\\[4,6,8\\]\n\\[6,8,10\\]\n\\[2,4,6,8\\]\n\\[4,6,8,10\\]\n\\[2,4,6,8,10\\]\n\\[2,6,10\\]\n\n**Example 2:**\n\n**Input:** nums = \\[7,7,7,7,7\\]\n**Output:** 16\n**Explanation:** Any subsequence of this array is arithmetic.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-231 <= nums[i] <= 231 - 1`",
          "output": "def numberOfArithmeticSlices(nums):\n    res = 0\n    n = len(nums)\n    dp = [dict() for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i):\n            diff = nums[i] - nums[j]\n            if diff <= -2**31 or diff > 2**31:\n                continue\n\n            dp[i][diff] = dp[i].get(diff, 0) + 1\n\n            if diff in dp[j]:\n                res += dp[j][diff]\n                dp[i][diff] += dp[j][diff]\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `n` `points` in the plane that are all **distinct**, where `points[i] = [xi, yi]`. A **boomerang** is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` **(the order of the tuple matters)**.\n\nReturn _the number of boomerangs_.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[0,0\\],\\[1,0\\],\\[2,0\\]\\]\n**Output:** 2\n**Explanation:** The two boomerangs are \\[\\[1,0\\],\\[0,0\\],\\[2,0\\]\\] and \\[\\[1,0\\],\\[2,0\\],\\[0,0\\]\\].\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** points = \\[\\[1,1\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == points.length`\n*   `1 <= n <= 500`\n*   `points[i].length == 2`\n*   `-104 <= xi, yi <= 104`\n*   All the points are **unique**.",
          "output": "def numberOfBoomerangs(points):\n    count = 0\n\n    for i in points:\n        group_count = {}\n        for j in points:\n            dx, dy = i[0] - j[0], i[1] - j[1]\n            dist = dx * dx + dy * dy\n            group_count[dist] = group_count.get(dist, 0) + 1\n\n        for g in group_count.values():\n            count += g * (g - 1)\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return _an array of all the integers in the range_ `[1, n]` _that do not appear in_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,3,2,7,8,2,3,1\\]\n**Output:** \\[5,6\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,1\\]\n**Output:** \\[2\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `1 <= nums[i] <= n`\n\n**Follow up:** Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space.This is a really easy problem if you decide to use additional memory. For those trying to write an initial solution using additional memory, think counters! However, the trick really is to not use any additional space than what is already available to use. Sometimes, multiple passes over the input array help find the solution. However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution. The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. Can we use this information and modify the array in-place somehow to find what we need?",
          "output": "def find_disappeared_numbers(nums):\n    result = []\n    \n    for num in nums:\n        index = abs(num) - 1\n        nums[index] = -abs(nums[index])\n\n    for i, num in enumerate(nums):\n        if num > 0:\n            result.append(i + 1)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a **binary search tree**. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n\n**The encoded string should be as compact as possible.**\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** \\[2,1,3\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `0 <= Node.val <= 104`\n*   The input tree is **guaranteed** to be a binary search tree.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef serialize(root):\n    if not root:\n        return \"#\"\n    return str(root.val) + \",\" + serialize(root.left) + \",\" + serialize(root.right)\n\ndef deserialize(data):\n    def deserialize_helper(values):\n        val = next(values)\n        if val == \"#\":\n            return None\n        node = TreeNode(int(val))\n        node.left = deserialize_helper(values)\n        node.right = deserialize_helper(values)\n        return node\n\n    values = iter(data.split(\",\"))\n    return deserialize_helper(values)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return _the **root node reference** (possibly updated) of the BST_.\n\nBasically, the deletion can be divided into two stages:\n\n1.  Search for a node to remove.\n2.  If the node is found, delete the node.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,3,6,2,4,null,7\\], key = 3\n**Output:** \\[5,4,6,2,null,null,7\\]\n**Explanation:** Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is \\[5,4,6,2,null,null,7\\], shown in the above BST.\nPlease notice that another valid answer is \\[5,2,6,null,4,null,7\\] and it's also accepted.\n \n\n**Example 2:**\n\n**Input:** root = \\[5,3,6,2,4,null,7\\], key = 0\n**Output:** \\[5,3,6,2,4,null,7\\]\n**Explanation:** The tree does not contain a node with value = 0.\n\n**Example 3:**\n\n**Input:** root = \\[\\], key = 0\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-105 <= Node.val <= 105`\n*   Each node has a **unique** value.\n*   `root` is a valid binary search tree.\n*   `-105 <= key <= 105`\n\n**Follow up:** Could you solve it with time complexity `O(height of tree)`?",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef deleteNode(root, key):\n    if root is None:\n        return None\n\n    if key < root.val:\n        root.left = deleteNode(root.left, key)\n    elif key > root.val:\n        root.right = deleteNode(root.right, key)\n    else:\n        if root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        else:\n            temp = root.right\n            while temp.left is not None:\n                temp = temp.left\n            root.val = temp.val\n            root.right = deleteNode(root.right, temp.val)\n\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, sort it in **decreasing order** based on the **frequency** of the characters. The **frequency** of a character is the number of times it appears in the string.\n\nReturn _the sorted string_. If there are multiple answers, return _any of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"tree \"\n**Output:**  \"eert \"\n**Explanation:** 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore  \"eetr \" is also a valid answer.\n\n**Example 2:**\n\n**Input:** s =  \"cccaaa \"\n**Output:**  \"aaaccc \"\n**Explanation:** Both 'c' and 'a' appear three times, so both  \"cccaaa \" and  \"aaaccc \" are valid answers.\nNote that  \"cacaca \" is incorrect, as the same characters must be together.\n\n**Example 3:**\n\n**Input:** s =  \"Aabb \"\n**Output:**  \"bbAa \"\n**Explanation:**  \"bbaA \" is also a valid answer, but  \"Aabb \" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 105`\n*   `s` consists of uppercase and lowercase English letters and digits.",
          "output": "from collections import Counter\n\ndef sort_by_frequency(s):\n    freq = Counter(s)\n    chars = list(s)\n    chars.sort(key=lambda c: freq[c], reverse=True)\n    return ''.join(chars)\n"
     },
     {
          "instruction": "Write python code for this problem: There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons.\n\nArrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n\nGiven the array `points`, return _the **minimum** number of arrows that must be shot to burst all balloons_.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[10,16\\],\\[2,8\\],\\[1,6\\],\\[7,12\\]\\]\n**Output:** 2\n**Explanation:** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons \\[2,8\\] and \\[1,6\\].\n- Shoot an arrow at x = 11, bursting the balloons \\[10,16\\] and \\[7,12\\].\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,2\\],\\[3,4\\],\\[5,6\\],\\[7,8\\]\\]\n**Output:** 4\n**Explanation:** One arrow needs to be shot for each balloon for a total of 4 arrows.\n\n**Example 3:**\n\n**Input:** points = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\]\\]\n**Output:** 2\n**Explanation:** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons \\[1,2\\] and \\[2,3\\].\n- Shoot an arrow at x = 4, bursting the balloons \\[3,4\\] and \\[4,5\\].\n\n**Constraints:**\n\n*   `1 <= points.length <= 105`\n*   `points[i].length == 2`\n*   `-231 <= xstart < xend <= 231 - 1`",
          "output": "def findMinArrowShots(points):\n    if not points:\n        return 0\n    points.sort(key=lambda x: x[1])\n\n    arrows = 1\n    end = points[0][1]\n\n    for i in range(1, len(points)):\n        if points[i][0] > end:\n            arrows += 1\n            end = points[i][1]\n\n    return arrows\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_.\n\nIn one move, you can increment `n - 1` elements of the array by `1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 3\n**Explanation:** Only three moves are needed (remember each move increments two elements):\n\\[1,2,3\\]  =>  \\[2,3,3\\]  =>  \\[3,4,3\\]  =>  \\[4,4,4\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`\n*   The answer is guaranteed to fit in a **32-bit** integer.",
          "output": "def min_moves(nums):\n    min_element = min(nums)\n    moves = sum(num - min_element for num in nums)\n    return moves\n"
     },
     {
          "instruction": "Write python code for this problem: Given four integer arrays `nums1`, `nums2`, `nums3`, and `nums4` all of length `n`, return the number of tuples `(i, j, k, l)` such that:\n\n*   `0 <= i, j, k, l < n`\n*   `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2\\], nums2 = \\[-2,-1\\], nums3 = \\[-1,2\\], nums4 = \\[0,2\\]\n**Output:** 2\n**Explanation:**\nThe two tuples are:\n1. (0, 0, 0, 1) -> nums1\\[0\\] + nums2\\[0\\] + nums3\\[0\\] + nums4\\[1\\] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1\\[1\\] + nums2\\[1\\] + nums3\\[0\\] + nums4\\[0\\] = 2 + (-1) + (-1) + 0 = 0\n\n**Example 2:**\n\n**Input:** nums1 = \\[0\\], nums2 = \\[0\\], nums3 = \\[0\\], nums4 = \\[0\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `n == nums1.length`\n*   `n == nums2.length`\n*   `n == nums3.length`\n*   `n == nums4.length`\n*   `1 <= n <= 200`\n*   `-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228`",
          "output": "def fourSumCount(nums1, nums2, nums3, nums4):\n    hashMap = {}\n    count = 0\n\n    for i in nums1:\n        for j in nums2:\n            hashMap[i + j] = hashMap.get(i + j, 0) + 1\n\n    for k in nums3:\n        for l in nums4:\n            count += hashMap.get(-(k + l), 0)\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n\nEach child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n",
          "input": "**Example 1:**\n\n**Input:** g = \\[1,2,3\\], s = \\[1,1\\]\n**Output:** 1\n**Explanation:** You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\n**Example 2:**\n\n**Input:** g = \\[1,2\\], s = \\[1,2,3\\]\n**Output:** 2\n**Explanation:** You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n\n**Constraints:**\n\n*   `1 <= g.length <= 3 * 104`\n*   `0 <= s.length <= 3 * 104`\n*   `1 <= g[i], s[j] <= 231 - 1`",
          "output": "def find_content_children(g, s):\n    g.sort()\n    s.sort()\n    i = j = 0\n\n    while i < len(g) and j < len(s):\n        if s[j] >= g[i]:\n            i += 1\n\n        j += 1\n\n    return i\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.\n\nReturn `true` _if there is a **132 pattern** in_ `nums`_, otherwise, return_ `false`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** false\n**Explanation:** There is no 132 pattern in the sequence.\n\n**Example 2:**\n\n**Input:** nums = \\[3,1,4,2\\]\n**Output:** true\n**Explanation:** There is a 132 pattern in the sequence: \\[1, 4, 2\\].\n\n**Example 3:**\n\n**Input:** nums = \\[-1,3,2,0\\]\n**Output:** true\n**Explanation:** There are three 132 patterns in the sequence: \\[-1, 3, 2\\], \\[-1, 3, 0\\] and \\[-1, 2, 0\\].\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 2 * 105`\n*   `-109 <= nums[i] <= 109`",
          "output": "def find132pattern(nums):\n    third, stack = float('-inf'), []\n    for num in reversed(nums):\n        if num < third:\n            return True\n        while stack and stack[-1] < num:\n            third = stack.pop()\n        stack.append(num)\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a game involving a **circular** array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`:\n\n*   If `nums[i]` is positive, move `nums[i]` steps **forward**, and\n*   If `nums[i]` is negative, move `nums[i]` steps **backward**.\n\nSince the array is **circular**, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n\nA **cycle** in the array consists of a sequence of indices `seq` of length `k` where:\n\n*   Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`\n*   Every `nums[seq[j]]` is either **all positive** or **all negative**.\n*   `k > 1`\n\nReturn `true` _if there is a **cycle** in_ `nums`_, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,-1,1,2,2\\]\n**Output:** true\n**Explanation:** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).\n\n**Example 2:**\n\n**Input:** nums = \\[-1,-2,-3,-4,-5,6\\]\n**Output:** false\n**Explanation:** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nThe only cycle is of size 1, so we return false.\n\n**Example 3:**\n\n**Input:** nums = \\[1,-1,5,1,4\\]\n**Output:** true\n**Explanation:** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so **it is not a cycle**.\nWe can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `-1000 <= nums[i] <= 1000`\n*   `nums[i] != 0`\n\n**Follow up:** Could you solve it in `O(n)` time complexity and `O(1)` extra space complexity?",
          "output": "def circularArrayLoop(nums: List[int]) -> bool:\n    N = len(nums)\n    for i in range(N):\n        slow, fast = i, i\n        while True:\n            slow = getNextIndex(slow, nums)\n            fast = getNextIndex(getNextIndex(fast, nums), nums)\n            if slow != fast and nums[slow] * nums[fast] > 0:\n                break\n            if slow == fast:\n                break\n        else:\n            continue\n        cycle = False\n        start = slow\n        while start != slow:\n            cycle |= getNextIndex(start, nums) == start\n            start = getNextIndex(start, nums)\n        if not cycle:\n            return True\n    return False\n\ndef getNextIndex(idx: int, nums: List[int]) -> int:\n    N = len(nums)\n    return (idx + nums[idx]) % N\n"
     },
     {
          "instruction": "Write python code for this problem: There are `buckets` buckets of liquid, where **exactly one** of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous.\n\nYou can feed the pigs according to these steps:\n\n1.  Choose some live pigs to feed.\n2.  For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n3.  Wait for `minutesToDie` minutes. You may **not** feed any other pigs during this time.\n4.  After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n5.  Repeat this process until you run out of time.\n\nGiven `buckets`, `minutesToDie`, and `minutesToTest`, return _the **minimum** number of pigs needed to figure out which bucket is poisonous within the allotted time_.\n\n",
          "input": "**Example 1:**\n\n**Input:** buckets = 4, minutesToDie = 15, minutesToTest = 15\n**Output:** 2\n**Explanation:** We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.\n\n**Example 2:**\n\n**Input:** buckets = 4, minutesToDie = 15, minutesToTest = 30\n**Output:** 2\n**Explanation:** We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n\n**Constraints:**\n\n*   `1 <= buckets <= 1000`\n*   `1 <= minutesToDie <= minutesToTest <= 100`What if you only have one shot? Eg. 4 buckets, 15 mins to die, and 15 mins to test. How many states can we generate with x pigs and T tests? Find minimum x such that (T+1)^x >= N",
          "output": "def poor_pigs(buckets, minutes_to_die, minutes_to_test):\n    pigs = 0\n    while (minutes_to_test // minutes_to_die + 1) ** pigs < buckets:\n        pigs += 1\n    return pigs\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abab \"\n**Output:** true\n**Explanation:** It is the substring  \"ab \" twice.\n\n**Example 2:**\n\n**Input:** s =  \"aba \"\n**Output:** false\n\n**Example 3:**\n\n**Input:** s =  \"abcabcabcabc \"\n**Output:** true\n**Explanation:** It is the substring  \"abc \" four times or the substring  \"abcabc \" twice.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of lowercase English letters.",
          "output": "def can_construct(s):\n    n = len(s)\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            substr = s[:i]\n            flag = True\n            for j in range(i, n, i):\n                if s[j:j+i] != substr:\n                    flag = False\n                    break\n\n            if flag:\n                return True\n\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Design and implement a data structure for a [Least Frequently Used (LFU)](https://en.wikipedia.org/wiki/Least_frequently_used) cache.\n\nImplement the `LFUCache` class:\n\n*   `LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure.\n*   `int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`.\n*   `void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the **least frequently used** key before inserting a new item. For this problem, when there is a **tie** (i.e., two or more keys with the same frequency), the **least recently used** `key` would be invalidated.\n\nTo determine the least frequently used key, a **use counter** is maintained for each key in the cache. The key with the smallest **use counter** is the least frequently used key.\n\nWhen a key is first inserted into the cache, its **use counter** is set to `1` (due to the `put` operation). The **use counter** for a key in the cache is incremented either a `get` or `put` operation is called on it.\n\nThe functions `get` and `put` must each run in `O(1)` average time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"LFUCache \",  \"put \",  \"put \",  \"get \",  \"put \",  \"get \",  \"get \",  \"put \",  \"get \",  \"get \",  \"get \"\\]\n\\[\\[2\\], \\[1, 1\\], \\[2, 2\\], \\[1\\], \\[3, 3\\], \\[2\\], \\[3\\], \\[4, 4\\], \\[1\\], \\[3\\], \\[4\\]\\]\n**Output**\n\\[null, null, null, 1, null, -1, 3, null, -1, 3, 4\\]\n\n**Explanation**\n// cnt(x) = the use counter for key x\n// cache=\\[\\] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=\\[1,\\_\\], cnt(1)=1\nlfu.put(2, 2);   // cache=\\[2,1\\], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=\\[1,2\\], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                 // cache=\\[3,1\\], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=\\[3,1\\], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=\\[4,3\\], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=\\[3,4\\], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=\\[4,3\\], cnt(4)=2, cnt(3)=3\n\n**Constraints:**\n\n*   `1 <= capacity <= 104`\n*   `0 <= key <= 105`\n*   `0 <= value <= 109`\n*   At most `2 * 105` calls will be made to `get` and `put`.",
          "output": "class LFUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.min_freq = 0\n        self.key_value = {}\n        self.key_freq = {}\n        self.freq_list = {1: []}\n\n    def get(self, key: int) -> int:\n        if key not in self.key_value:\n            return -1\n        count = self.key_freq[key]\n        self.key_freq[key] += 1\n        self.freq_list[count].remove(key)\n\n        if count == self.min_freq and not self.freq_list[count]:\n            self.min_freq += 1\n\n        if count + 1 not in self.freq_list:\n            self.freq_list[count + 1] = []\n        self.freq_list[count + 1].append(key)\n\n        return self.key_value[key]\n\n    def put(self, key: int, value: int) -> None:\n        if self.capacity <= 0:\n            return\n        if key in self.key_value:\n            self.key_value[key] = value\n            self.get(key)\n            return\n        \n        if len(self.key_value) >= self.capacity:\n            evict = self.freq_list[self.min_freq][0]\n            self.freq_list[self.min_freq].pop(0)\n            del self.key_value[evict]\n\n        self.key_value[key] = value\n        self.key_freq[key] = 1\n        self.min_freq = 1\n        self.freq_list[1].append(key)\n"
     },
     {
          "instruction": "Write python code for this problem: The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\nGiven two integers `x` and `y`, return _the **Hamming distance** between them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 1, y = 4\n**Output:** 2\n**Explanation:**\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different.\n\n**Example 2:**\n\n**Input:** x = 3, y = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `0 <= x, y <= 231 - 1`",
          "output": "def hammingDistance(x: int, y: int) -> int:\n    xorResult = x ^ y\n    dist = 0\n    while xorResult:\n        dist += xorResult & 1\n        xorResult >>= 1\n    return dist\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_.\n\nIn one move, you can increment or decrement an element of the array by `1`.\n\nTest cases are designed so that the answer will fit in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 2\n**Explanation:**\nOnly two moves are needed (remember each move increments or decrements one element):\n\\[1,2,3\\]  =>  \\[2,2,3\\]  =>  \\[2,2,2\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,10,2,9\\]\n**Output:** 16\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`",
          "output": "def min_moves2(nums):\n    nums.sort()\n    mid = nums[len(nums) // 2]\n    moves = 0\n    for num in nums:\n        moves += abs(num - mid)\n    return moves\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.\n\nGrid cells are connected **horizontally/vertically** (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n\nThe island doesn't have \"lakes \", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1,0,0\\],\\[1,1,1,0\\],\\[0,1,0,0\\],\\[1,1,0,0\\]\\]\n**Output:** 16\n**Explanation:** The perimeter is the 16 yellow stripes in the image above.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1\\]\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,0\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `row == grid.length`\n*   `col == grid[i].length`\n*   `1 <= row, col <= 100`\n*   `grid[i][j]` is `0` or `1`.\n*   There is exactly one island in `grid`.",
          "output": "def islandPerimeter(grid):\n    perimeter = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[row])):\n            if grid[row][col] == 1:\n                perimeter += 4\n                if row > 0 and grid[row - 1][col] == 1:\n                    perimeter -= 2\n                if col > 0 and grid[row][col - 1] == 1:\n                    perimeter -= 2\n    return perimeter\n"
     },
     {
          "instruction": "Write python code for this problem: In the \"100 game \" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to **reach or exceed** 100 wins.\n\nWhat if we change the game so that players **cannot** re-use integers?\n\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n\nGiven two integers `maxChoosableInteger` and `desiredTotal`, return `true` if the first player to move can force a win, otherwise, return `false`. Assume both players play **optimally**.\n\n",
          "input": "**Example 1:**\n\n**Input:** maxChoosableInteger = 10, desiredTotal = 11\n**Output:** false\n**Explanation:**\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n\n**Example 2:**\n\n**Input:** maxChoosableInteger = 10, desiredTotal = 0\n**Output:** true\n\n**Example 3:**\n\n**Input:** maxChoosableInteger = 10, desiredTotal = 1\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= maxChoosableInteger <= 20`\n*   `0 <= desiredTotal <= 300`",
          "output": "def canIWin(maxChoosableInteger, desiredTotal):\n    if maxChoosableInteger >= desiredTotal: return True\n    if (maxChoosableInteger * (maxChoosableInteger + 1)) // 2 < desiredTotal: return False\n\n    memo = {}\n        \n    def canWin(state):\n        if state in memo:\n            return memo[state]\n        for i in range(1, maxChoosableInteger + 1):\n            bitCheck = 1 << i\n            if (state & bitCheck) == 0:\n                if not canWin(state | bitCheck):\n                    memo[state] = True\n                    return True\n    \n        memo[state] = False\n        return False\n\n    return canWin(0)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of transactions `transactions` where `transactions[i] = [fromi, toi, amounti]` indicates that the person with `ID = fromi` gave `amounti $` to the person with `ID = toi`.\n\nReturn _the minimum number of transactions required to settle the debt_.\n\n",
          "input": "**Example 1:**\n\n**Input:** transactions = \\[\\[0,1,10\\],\\[2,0,5\\]\\]\n**Output:** 2\n**Explanation:**\nPerson #0 gave person #1 $10.\nPerson #2 gave person #0 $5.\nTwo transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.\n\n**Example 2:**\n\n**Input:** transactions = \\[\\[0,1,10\\],\\[1,0,1\\],\\[1,2,5\\],\\[2,0,5\\]\\]\n**Output:** 1\n**Explanation:**\nPerson #0 gave person #1 $10.\nPerson #1 gave person #0 $1.\nPerson #1 gave person #2 $5.\nPerson #2 gave person #0 $5.\nTherefore, person #1 only need to give person #0 $4, and all debt is settled.\n\n**Constraints:**\n\n*   `1 <= transactions.length <= 8`\n*   `transactions[i].length == 3`\n*   `0 <= fromi, toi < 12`\n*   `fromi != toi`\n*   `1 <= amounti <= 100`",
          "output": "from collections import defaultdict\n\ndef minTransfers(transactions):\n    balances = defaultdict(int)\n    for transaction in transactions:\n        balances[transaction[0]] -= transaction[2]\n        balances[transaction[1]] += transaction[2]\n\n    debts = [balance for balance in balances.values() if balance != 0]\n    return dfs(debts, 0)\n\ndef dfs(debts, start):\n    while start < len(debts) and debts[start] == 0:\n        start += 1\n    if start == len(debts):\n        return 0\n    result = float('inf')\n    for i in range(start + 1, len(debts)):\n        if (debts[start] > 0) != (debts[i] > 0):\n            debts[i] += debts[start]\n            result = min(result, 1 + dfs(debts, start + 1))\n            debts[i] -= debts[start]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: We define `str = [s, n]` as the string `str` which consists of the string `s` concatenated `n` times.\n\n*   For example, `str == [ \"abc \", 3] == \"abcabcabc \"`.\n\nWe define that string `s1` can be obtained from string `s2` if we can remove some characters from `s2` such that it becomes `s1`.\n\n*   For example, `s1 = \"abc \"` can be obtained from `s2 = \"ab**dbe**c \"` based on our definition by removing the bolded underlined characters.\n\nYou are given two strings `s1` and `s2` and two integers `n1` and `n2`. You have the two strings `str1 = [s1, n1]` and `str2 = [s2, n2]`.\n\nReturn _the maximum integer_ `m` _such that_ `str = [str2, m]` _can be obtained from_ `str1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n**Output:** 2\n\n**Example 2:**\n\n**Input:** s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 100`\n*   `s1` and `s2` consist of lowercase English letters.\n*   `1 <= n1, n2 <= 106`",
          "output": "def getMaxRepetitions(s1: str, n1: int, s2: str, n2: int) -> int:\n    count1, count2, i, j = 0, 0, 0, 0\n    while count1 < n1:\n        if s1[i] == s2[j]:\n            j += 1\n            if j == len(s2):\n                j = 0\n                count2 += 1\n        i += 1\n        if i == len(s1):\n            i = 0\n            count1 += 1\n    return count2 // n2\n"
     },
     {
          "instruction": "Write python code for this problem: We define the string `base` to be the infinite wraparound string of `\"abcdefghijklmnopqrstuvwxyz \"`, so `base` will look like this:\n\n*   `\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd.... \"`.\n\nGiven a string `s`, return _the number of **unique non-empty substrings** of_ `s` _are present in_ `base`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"a \"\n**Output:** 1\n**Explanation:** Only the substring  \"a \" of s is in base.\n\n**Example 2:**\n\n**Input:** s =  \"cac \"\n**Output:** 2\n**Explanation:** There are two substrings ( \"a \",  \"c \") of s in base.\n\n**Example 3:**\n\n**Input:** s =  \"zab \"\n**Output:** 6\n**Explanation:** There are six substrings ( \"z \",  \"a \",  \"b \",  \"za \",  \"ab \", and  \"zab \") of s in base.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.One possible solution might be to consider allocating an array size of 26 for each character in the alphabet. (Credits to @r2ysxu)",
          "output": "def findSubstringInWraproundString(p: str) -> int:\n    cnt = [0] * 26\n    length = 0\n\n    for i in range(len(p)):\n        if i > 0 and (p[i] == chr(ord(p[i - 1]) + 1) or ord(p[i - 1]) - ord(p[i]) == 25):\n            length += 1\n        else:\n            length = 1\n        cnt[ord(p[i]) - ord('a')] = max(cnt[ord(p[i]) - ord('a')], length)\n\n    return sum(cnt)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `queryIP`, return `\"IPv4 \"` if IP is a valid IPv4 address, `\"IPv6 \"` if IP is a valid IPv6 address or `\"Neither \"` if IP is not a correct IP of any type.\n\n**A valid IPv4** address is an IP in the form `\"x1.x2.x3.x4 \"` where `0 <= xi <= 255` and `xi` **cannot contain** leading zeros. For example, `\"192.168.1.1 \"` and `\"192.168.1.0 \"` are valid IPv4 addresses while `\"192.168.01.1 \"`, `\"192.168.1.00 \"`, and `\"192.168@1.1 \"` are invalid IPv4 addresses.\n\n**A valid IPv6** address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8 \"` where:\n\n*   `1 <= xi.length <= 4`\n*   `xi` is a **hexadecimal string** which may contain digits, lowercase English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).\n*   Leading zeros are allowed in `xi`.\n\nFor example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334 \"` and \"`2001:db8:85a3:0:0:8A2E:0370:7334 \"` are valid IPv6 addresses, while \"`2001:0db8:85a3::8A2E:037j:7334 \"` and \"`02001:0db8:85a3:0000:0000:8a2e:0370:7334 \"` are invalid IPv6 addresses.\n\n",
          "input": "**Example 1:**\n\n**Input:** queryIP =  \"172.16.254.1 \"\n**Output:**  \"IPv4 \"\n**Explanation:** This is a valid IPv4 address, return  \"IPv4 \".\n\n**Example 2:**\n\n**Input:** queryIP =  \"2001:0db8:85a3:0:0:8A2E:0370:7334 \"\n**Output:**  \"IPv6 \"\n**Explanation:** This is a valid IPv6 address, return  \"IPv6 \".\n\n**Example 3:**\n\n**Input:** queryIP =  \"256.256.256.256 \"\n**Output:**  \"Neither \"\n**Explanation:** This is neither a IPv4 address nor a IPv6 address.\n\n**Constraints:**\n\n*   `queryIP` consists only of English letters, digits and the characters `'.'` and `':'`.",
          "output": "def validateIP(queryIP):\n    ipv4_parts = queryIP.split('.')\n    ipv6_parts = queryIP.split(':')\n\n    if len(ipv4_parts) == 4:\n        if is_valid_ipv4(ipv4_parts):\n            return \"IPv4\"\n    elif len(ipv6_parts) == 8:\n        if is_valid_ipv6(ipv6_parts):\n            return \"IPv6\"\n\n    return \"Neither\"\n\ndef is_valid_ipv4(parts):\n    for part in parts:\n        if not part or len(part) > 3 or (len(part) > 1 and part[0] == '0'):\n            return False\n\n        if not part.isdigit() or int(part) < 0 or int(part) > 255:\n            return False\n\n    return True\n\ndef is_valid_ipv6(parts):\n    for part in parts:\n        if not part or len(part) > 4:\n            return False\n\n        for ch in part:\n            if not ch.isdigit() and not (ch.lower() >= 'a' and ch.lower() <= 'f'):\n                return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`. The points form a polygon when joined sequentially.\n\nReturn `true` if this polygon is [convex](http://en.wikipedia.org/wiki/Convex_polygon) and `false` otherwise.\n\nYou may assume the polygon formed by given points is always a [simple polygon](http://en.wikipedia.org/wiki/Simple_polygon). In other words, we ensure that exactly two edges intersect at each vertex and that edges otherwise don't intersect each other.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[0,0\\],\\[0,5\\],\\[5,5\\],\\[5,0\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** points = \\[\\[0,0\\],\\[0,10\\],\\[10,10\\],\\[10,0\\],\\[5,5\\]\\]\n**Output:** false\n\n**Constraints:**\n\n*   `3 <= points.length <= 104`\n*   `points[i].length == 2`\n*   `-104 <= xi, yi <= 104`\n*   All the given points are **unique**.",
          "output": "def isConvex(points):\n    n = len(points)\n    pre = cur = 0\n\n    for i in range(n):\n        x1 = points[(i + 1) % n][0] - points[i][0]\n        y1 = points[(i + 1) % n][1] - points[i][1]\n        x2 = points[(i + 2) % n][0] - points[(i + 1) % n][0]\n        y2 = points[(i + 2) % n][1] - points[(i + 1) % n][1]\n        cur = x1 * y2 - x2 * y1\n\n        if cur == 0:\n            continue\n        if cur * pre < 0:\n            return False\n        pre = cur\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, encode the string such that its encoded length is the shortest.\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. `k` should be a positive integer.\n\nIf an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return **any of them**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaa \"\n**Output:**  \"aaa \"\n**Explanation:** There is no way to encode it such that it is shorter than the input string, so we do not encode it.\n\n**Example 2:**\n\n**Input:** s =  \"aaaaa \"\n**Output:**  \"5\\[a\\] \"\n**Explanation:**  \"5\\[a\\] \" is shorter than  \"aaaaa \" by 1 character.\n\n**Example 3:**\n\n**Input:** s =  \"aaaaaaaaaa \"\n**Output:**  \"10\\[a\\] \"\n**Explanation:**  \"a9\\[a\\] \" or  \"9\\[a\\]a \" are also valid solutions, both of them have the same length = 5, which is the same as  \"10\\[a\\] \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 150`\n*   `s` consists of only lowercase English letters.",
          "output": "def encode(s: str) -> str:\n    n = len(s)\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            reps = n // i\n            sub = s[:i]\n            composed = sub * reps\n            if s == composed:\n                return f\"{reps}[{sub}]\"\n    return s\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words` (**without duplicates**), return _all the **concatenated words** in the given list of_ `words`.\n\nA **concatenated word** is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"cat \", \"cats \", \"catsdogcats \", \"dog \", \"dogcatsdog \", \"hippopotamuses \", \"rat \", \"ratcatdogcat \"\\]\n**Output:** \\[ \"catsdogcats \", \"dogcatsdog \", \"ratcatdogcat \"\\]\n**Explanation:**  \"catsdogcats \" can be concatenated by  \"cats \",  \"dog \" and  \"cats \"; \n \"dogcatsdog \" can be concatenated by  \"dog \",  \"cats \" and  \"dog \"; \n \"ratcatdogcat \" can be concatenated by  \"rat \",  \"cat \",  \"dog \" and  \"cat \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"cat \", \"dog \", \"catdog \"\\]\n**Output:** \\[ \"catdog \"\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 104`\n*   `1 <= words[i].length <= 30`\n*   `words[i]` consists of only lowercase English letters.\n*   All the strings of `words` are **unique**.\n*   `1 <= sum(words[i].length) <= 105`",
          "output": "def is_concatenated(word, word_dict):\n    n = len(word)\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] and word[j:i] in word_dict:\n                dp[i] = True\n                break\n\n    return dp[n]\n\n\ndef find_all_concatenated_words(words):\n    word_dict = set(words)\n    result = []\n\n    for word in words:\n        if is_concatenated(word, word_dict):\n            result.append(word)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `matchsticks` where `matchsticks[i]` is the length of the `ith` matchstick. You want to use **all the matchsticks** to make one square. You **should not break** any stick, but you can link them up, and each matchstick must be used **exactly one time**.\n\nReturn `true` if you can make this square and `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** matchsticks = \\[1,1,2,2,2\\]\n**Output:** true\n**Explanation:** You can form a square with length 2, one side of the square came two sticks with length 1.\n\n**Example 2:**\n\n**Input:** matchsticks = \\[3,3,3,3,4\\]\n**Output:** false\n**Explanation:** You cannot find a way to form a square with all the matchsticks.\n\n**Constraints:**\n\n*   `1 <= matchsticks.length <= 15`\n*   `1 <= matchsticks[i] <= 108`Treat the matchsticks as an array. Can we split the array into 4 equal halves? Every matchstick can belong to either of the 4 sides. We don't know which one. Maybe try out all options! For every matchstick, we have to try out each of the 4 options i.e. which side it can belong to. We can make use of recursion for this. We don't really need to keep track of which matchsticks belong to a particular side during recursion. We just need to keep track of the length of each of the 4 sides. When all matchsticks have been used we simply need to see the length of all 4 sides. If they're equal, we have a square on our hands!",
          "output": "from itertools import chain\n\ndef makesquare(matchsticks):\n    if len(matchsticks) < 4:\n        return False\n    total = sum(matchsticks)\n    if total % 4:\n        return False\n    target = total // 4\n    matchsticks.sort(reverse=True)\n    sums = [0]*4\n    return dfs(matchsticks, sums, target, 0)\n\ndef dfs(matchsticks, sums, target, index):\n    if index == len(matchsticks):\n        return sums[0] == target and sums[1] == target and sums[2] == target\n    for i in range(4):\n        if sums[i] + matchsticks[index] <= target:\n            sums[i] += matchsticks[index]\n            if dfs(matchsticks, sums, target, index + 1):\n                return True\n            sums[i] -= matchsticks[index]\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of binary strings `strs` and two integers `m` and `n`.\n\nReturn _the size of the largest subset of `strs` such that there are **at most**_ `m` `0`_'s and_ `n` `1`_'s in the subset_.\n\nA set `x` is a **subset** of a set `y` if all elements of `x` are also elements of `y`.\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[ \"10 \", \"0001 \", \"111001 \", \"1 \", \"0 \"\\], m = 5, n = 3\n**Output:** 4\n**Explanation:** The largest subset with at most 5 0's and 3 1's is { \"10 \",  \"0001 \",  \"1 \",  \"0 \"}, so the answer is 4.\nOther valid but smaller subsets include { \"0001 \",  \"1 \"} and { \"10 \",  \"1 \",  \"0 \"}.\n{ \"111001 \"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n\n**Example 2:**\n\n**Input:** strs = \\[ \"10 \", \"0 \", \"1 \"\\], m = 1, n = 1\n**Output:** 2\n**Explanation:** The largest subset is { \"0 \",  \"1 \"}, so the answer is 2.\n\n**Constraints:**\n\n*   `1 <= strs.length <= 600`\n*   `1 <= strs[i].length <= 100`\n*   `strs[i]` consists only of digits `'0'` and `'1'`.\n*   `1 <= m, n <= 100`",
          "output": "def findMaxForm(strs, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for s in strs:\n        ones = s.count('1')\n        zeros = len(s) - ones\n        \n        for i in range(m, zeros - 1, -1):\n            for j in range(n, ones - 1, -1):\n                dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1)\n    \n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\n\nGiven the positions of `houses` and `heaters` on a horizontal line, return _the minimum radius standard of heaters so that those heaters could cover all houses._\n\n**Notice** that all the `heaters` follow your radius standard, and the warm radius will the same.\n\n",
          "input": "**Example 1:**\n\n**Input:** houses = \\[1,2,3\\], heaters = \\[2\\]\n**Output:** 1\n**Explanation:** The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n\n**Example 2:**\n\n**Input:** houses = \\[1,2,3,4\\], heaters = \\[1,4\\]\n**Output:** 1\n**Explanation:** The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n\n**Example 3:**\n\n**Input:** houses = \\[1,5\\], heaters = \\[2\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= houses.length, heaters.length <= 3 * 104`\n*   `1 <= houses[i], heaters[i] <= 109`",
          "output": "def findRadius(houses, heaters):\n    houses.sort()\n    heaters.sort()\n    result, i = 0, 0\n\n    for house in houses:\n        while i < len(heaters) - 1 and abs(heaters[i + 1] - house) <= abs(heaters[i] - house):\n            i += 1\n        result = max(result, abs(heaters[i] - house))\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.\n\n*   For example, The integer `5` is `\"101 \"` in binary and its **complement** is `\"010 \"` which is the integer `2`.\n\nGiven an integer `num`, return _its complement_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 5\n**Output:** 2\n**Explanation:** The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n\n**Example 2:**\n\n**Input:** num = 1\n**Output:** 0\n**Explanation:** The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n\n**Constraints:**\n\n*   `1 <= num < 231`\n\n**Note:** This question is the same as 1009: [https://leetcode.com/problems/complement-of-base-10-integer/](https://leetcode.com/problems/complement-of-base-10-integer/)",
          "output": "def find_complement(num: int) -> int:\n    bit_length = 0\n    mask = num\n    while mask > 0:\n        mask >>= 1\n        bit_length += 1\n    all_ones = (1 << bit_length) - 1\n\n    return num ^ all_ones\n"
     },
     {
          "instruction": "Write python code for this problem: The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\nGiven an integer array `nums`, return _the sum of **Hamming distances** between all the pairs of the integers in_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,14,2\\]\n**Output:** 6\n**Explanation:** In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n\n**Example 2:**\n\n**Input:** nums = \\[4,14,4\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `0 <= nums[i] <= 109`\n*   The answer for the given input will fit in a **32-bit** integer.",
          "output": "def total_hamming_distance(nums):\n    total_distance = 0\n    n = len(nums)\n\n    for i in range(32):\n        bit_count = sum(((num >> i) & 1) for num in nums)\n        total_distance += bit_count * (n - bit_count)\n\n    return total_distance\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer n, return _the **largest palindromic integer** that can be represented as the product of two `n`\\-digits integers_. Since the answer can be very large, return it **modulo** `1337`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 9\n\n**Constraints:**\n\n*   `1 <= n <= 8`",
          "output": "def largestPalindrome(n):\n    if n == 1: \n        return 9\n    upper_limit = 10**n - 1\n    lower_limit = upper_limit // 10\n    for i in range(upper_limit, lower_limit, -1):\n        temp = i\n        reverse = 0\n        while temp != 0:\n            reverse = reverse * 10 + temp % 10\n            temp //= 10\n        palindrome = i * (10**n) + reverse\n        for j in range(upper_limit, lower_limit, -1):\n            product = palindrome // j\n            if palindrome % j == 0 and product <= upper_limit:\n                return palindrome % 1337\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n\n*   For examples, if `arr = [2,3,4]`, the median is `3`.\n*   For examples, if `arr = [1,2,3,4]`, the median is `(2 + 3) / 2 = 2.5`.\n\nYou are given an integer array `nums` and an integer `k`. There is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\nReturn _the median array for each window in the original array_. Answers within `10-5` of the actual value will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,-1,-3,5,3,6,7\\], k = 3\n**Output:** \\[1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000\\]\n**Explanation:** \nWindow position                Median\n---------------                -----\n\\[**1  3  -1**\\] -3  5  3  6  7        1\n 1 \\[**3  -1  -3**\\] 5  3  6  7       -1\n 1  3 \\[**\\-1  -3  5**\\] 3  6  7       -1\n 1  3  -1 \\[**\\-3  5  3**\\] 6  7        3\n 1  3  -1  -3 \\[**5  3  6**\\] 7        5\n 1  3  -1  -3  5 \\[**3  6  7**\\]       6\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,2,3,1,4,2\\], k = 3\n**Output:** \\[2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000\\]\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `-231 <= nums[i] <= 231 - 1`The simplest of solutions comes from the basic idea of finding the median given a set of numbers. We know that by definition, a median is the center element (or an average of the two center elements). Given an unsorted list of numbers, how do we find the median element? If you know the answer to this question, can we extend this idea to every sliding window that we come across in the array? Is there a better way to do what we are doing in the above hint? Don't you think there is duplication of calculation being done there? Is there some sort of optimization that we can do to achieve the same result? This approach is merely a modification of the basic approach except that it simply reduces duplication of calculations once done. The third line of thought is also based on this same idea but achieving the result in a different way. We obviously need the window to be sorted for us to be able to find the median. Is there a data-structure out there that we can use (in one or more quantities) to obtain the median element extremely fast, say O(1) time while having the ability to perform the other operations fairly efficiently as well?",
          "output": "from sortedcontainers import SortedList\n\ndef medianSlidingWindow(nums, k):\n    window = SortedList(nums[:k])\n    medians = []\n    \n    for i in range(k, len(nums) + 1):\n        medians.append((window[k // 2 - 1] + window[k // 2]) / 2 if k % 2 == 0 else float(window[k // 2]))\n        \n        if i < len(nums):\n            window.remove(nums[i - k])\n            window.add(nums[i])\n\n    return medians\n"
     },
     {
          "instruction": "Write python code for this problem: A magical string `s` consists of only `'1'` and `'2'` and obeys the following rules:\n\n*   The string s is magical because concatenating the number of contiguous occurrences of characters `'1'` and `'2'` generates the string `s` itself.\n\nThe first few elements of `s` is `s = \"1221121221221121122...... \"`. If we group the consecutive `1`'s and `2`'s in `s`, it will be `\"1 22 11 2 1 22 1 22 11 2 11 22 ...... \"` and the occurrences of `1`'s or `2`'s in each group are `\"1 2 2 1 1 2 1 2 2 1 2 2 ...... \"`. You can see that the occurrence sequence is `s` itself.\n\nGiven an integer `n`, return the number of `1`'s in the first `n` number in the magical string `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6\n**Output:** 3\n**Explanation:** The first 6 elements of magical string s is  \"122112 \" and it contains three 1's, so return 3.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 105`",
          "output": "def magical_string(n: int) -> int:\n    if n == 0:\n        return 0\n    if n <= 3:\n        return 1\n\n    magic = [1, 2, 2]\n    count_ones = 1\n    index = 2\n    value = 1\n\n    while len(magic) < n:\n        for _ in range(magic[index]):\n            magic.append(value)\n            if value == 1 and len(magic) <= n:\n                count_ones += 1\n        value = 3 - value\n        index += 1\n\n    return count_ones\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a license key represented as a string `s` that consists of only alphanumeric characters and dashes. The string is separated into `n + 1` groups by `n` dashes. You are also given an integer `k`.\n\nWe want to reformat the string `s` such that each group contains exactly `k` characters, except for the first group, which could be shorter than `k` but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n\nReturn _the reformatted license key_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"5F3Z-2e-9-w \", k = 4\n**Output:**  \"5F3Z-2E9W \"\n**Explanation:** The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.\n\n**Example 2:**\n\n**Input:** s =  \"2-5g-3-J \", k = 2\n**Output:**  \"2-5G-3J \"\n**Explanation:** The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of English letters, digits, and dashes `'-'`.\n*   `1 <= k <= 104`",
          "output": "def license_key_formatting(s: str, k: int) -> str:\n    result = []\n    count = 0\n    for c in reversed(s):\n        if c != '-':\n            if count == k:\n                result.append('-')\n                count = 0\n            result.append(c.upper())\n            count += 1\n    return ''.join(reversed(result))\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n` represented as a string, return _the smallest **good base** of_ `n`.\n\nWe call `k >= 2` a **good base** of `n`, if all digits of `n` base `k` are `1`'s.\n\n",
          "input": "**Example 1:**\n\n**Input:** n =  \"13 \"\n**Output:**  \"3 \"\n**Explanation:** 13 base 3 is 111.\n\n**Example 2:**\n\n**Input:** n =  \"4681 \"\n**Output:**  \"8 \"\n**Explanation:** 4681 base 8 is 11111.\n\n**Example 3:**\n\n**Input:** n =  \"1000000000000000000 \"\n**Output:**  \"999999999999999999 \"\n**Explanation:** 1000000000000000000 base 999999999999999999 is 11.\n\n**Constraints:**\n\n*   `n` is an integer in the range `[3, 1018]`.\n*   `n` does not contain any leading zeros.",
          "output": "def smallest_good_base(n: str) -> str:\n    num_n = int(n)\n\n    for m in range(int(num_n.bit_length()), 0, -1):\n        k = int(num_n ** (1.0 / m))\n        if sum(k**i for i in range(m+1)) == num_n:\n            return str(k)\n\n    return \"-1\"\n"
     },
     {
          "instruction": "Write python code for this problem: A permutation `perm` of `n` integers of all the integers in the range `[1, n]` can be represented as a string `s` of length `n - 1` where:\n\n*   `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n*   `s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\nGiven a string `s`, reconstruct the lexicographically smallest permutation `perm` and return it.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"I \"\n**Output:** \\[1,2\\]\n**Explanation:** \\[1,2\\] is the only legal permutation that can represented by s, where the number 1 and 2 construct an increasing relationship.\n\n**Example 2:**\n\n**Input:** s =  \"DI \"\n**Output:** \\[2,1,3\\]\n**Explanation:** Both \\[2,1,3\\] and \\[3,1,2\\] can be represented as  \"DI \", but since we want to find the smallest lexicographical permutation, you should return \\[2,1,3\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'I'` or `'D'`.",
          "output": "def findPermutation(s: str) -> list[int]:\n    perm = [0] * (len(s) + 1)\n    left = 1\n    i = 0\n    while i < len(s):\n        if s[i] == 'I':\n            perm[i] = left\n            left += 1\n            while i + 1 < len(s) and s[i + 1] == 'D':\n                i += 1\n        i += 1\n    perm[len(s)] = left\n    left += 1\n    for i in reversed(range(len(s))):\n        if s[i] == 'D':\n            perm[i] = left\n            left += 1\n    return perm\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,0,1,1,1\\]\n**Output:** 3\n**Explanation:** The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,1,1,0,1\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`.You need to think about two things as far as any window is concerned. One is the starting point for the window. How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window.\r\n\r\nHow do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows of consecutive ones. All that remains afterward is to find the longest such window and return the size.",
          "output": "def findMaxConsecutiveOnes(nums):\n    max_consecutive, current_consecutive = 0, 0\n    for num in nums:\n        current_consecutive = current_consecutive + 1 if num == 1 else 0\n        max_consecutive = max(max_consecutive, current_consecutive)\n    return max_consecutive\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. Two players are playing a game with this array: player 1 and player 2.\n\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of `0`. At each turn, the player takes one of the numbers from either end of the array (i.e., `nums[0]` or `nums[nums.length - 1]`) which reduces the size of the array by `1`. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n\nReturn `true` if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return `true`. You may assume that both players are playing optimally.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,5,2\\]\n**Output:** false\n**Explanation:** Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false.\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,233,7\\]\n**Output:** true\n**Explanation:** Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 20`\n*   `0 <= nums[i] <= 107`",
          "output": "def can_win(nums):\n    n = len(nums)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = nums[i]\n    for len in range(1, n):\n        for i in range(n - len):\n            j = i + len\n            dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1])\n    return dp[0][n - 1] >= 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array if you can flip at most one_ `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,0,1,1,0\\]\n**Output:** 4\n**Explanation:** \n- If we flip the first zero, nums becomes \\[1,1,1,1,0\\] and we have 4 consecutive ones.\n- If we flip the second zero, nums becomes \\[1,0,1,1,1\\] and we have 3 consecutive ones.\nThe max number of consecutive ones is 4.\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,1,1,0,1\\]\n**Output:** 4\n**Explanation:** \n- If we flip the first zero, nums becomes \\[1,1,1,1,0,1\\] and we have 4 consecutive ones.\n- If we flip the second zero, nums becomes \\[1,0,1,1,1,1\\] and we have 4 consecutive ones.\nThe max number of consecutive ones is 4.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`.\n\n**Follow up:** What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?",
          "output": "def findMaxConsecutiveOnes(nums: List[int]) -> int:\n    max_count, count_zeros, left = 0, 0, 0\n    for right in range(len(nums)):\n        if nums[right] == 0:\n            count_zeros += 1\n        while count_zeros > 1:\n            if nums[left] == 0:\n                count_zeros -= 1\n            left += 1\n        max_count = max(max_count, right - left + 1)\n    return max_count\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a variation of the game Zuma.\n\nIn this variation of Zuma, there is a **single row** of colored balls on a board, where each ball can be colored red `'R'`, yellow `'Y'`, blue `'B'`, green `'G'`, or white `'W'`. You also have several colored balls in your hand.\n\nYour goal is to **clear all** of the balls from the board. On each turn:\n\n*   Pick **any** ball from your hand and insert it in between two balls in the row or on either end of the row.\n*   If there is a group of **three or more consecutive balls** of the **same color**, remove the group of balls from the board.\n    *   If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n*   If there are no more balls on the board, then you win the game.\n*   Repeat this process until you either win or do not have any more balls in your hand.\n\nGiven a string `board`, representing the row of balls on the board, and a string `hand`, representing the balls in your hand, return _the **minimum** number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return_ `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** board =  \"WRRBBW \", hand =  \"RB \"\n**Output:** -1\n**Explanation:** It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert.\n\n**Example 2:**\n\n**Input:** board =  \"WWRRBBWW \", hand =  \"WRBRW \"\n**Output:** 2\n**Explanation:** To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n2 balls from your hand were needed to clear the board.\n\n**Example 3:**\n\n**Input:** board =  \"G \", hand =  \"GGGGG \"\n**Output:** 2\n**Explanation:** To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -> empty.\n2 balls from your hand were needed to clear the board.\n\n**Constraints:**\n\n*   `1 <= board.length <= 16`\n*   `1 <= hand.length <= 5`\n*   `board` and `hand` consist of the characters `'R'`, `'Y'`, `'B'`, `'G'`, and `'W'`.\n*   The initial row of balls on the board will **not** have any groups of three or more consecutive balls of the same color.",
          "output": "from collections import Counter\n\ndef find_min_step(board: str, hand: str) -> int:\n    def find_min_step_helper(board, memo, hand):\n        if not board:\n            return 0\n        if board in memo:\n            return memo[board]\n\n        result = float('inf')\n        i = 0\n        while i < len(board):\n            j = i\n            while j < len(board) and board[i] == board[j]:\n                j += 1            \n\n            color = board[i]\n            required = 3 - (j - i)\n            if hand[color] >= required:\n                hand[color] -= required\n                next_board = board[:i] + board[j:]\n                tmp = find_min_step_helper(next_board, memo, hand)\n                if tmp != -1:\n                    result = min(result, tmp + required)\n                hand[color] += required\n            i = j\n\n        memo[board] = -1 if result == float('inf') else result\n        return memo[board]\n\n    hand_count = Counter(hand)\n    memo = {}\n    return find_min_step_helper(board, memo, hand_count)\n"
     },
     {
          "instruction": "Write python code for this problem: Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel **right** and **down**. You are going to help Bob by providing **instructions** for him to reach `destination`.\n\nThe **instructions** are represented as a string, where each character is either:\n\n*   `'H'`, meaning move horizontally (go **right**), or\n*   `'V'`, meaning move vertically (go **down**).\n\nMultiple **instructions** will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `\"HHHVV \"` and `\"HVHVH \"` are valid **instructions**.\n\nHowever, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` **lexicographically smallest instructions** that will lead him to `destination`. `k` is **1-indexed**.\n\nGiven an integer array `destination` and an integer `k`, return _the_ `kth` _**lexicographically smallest instructions** that will take Bob to_ `destination`.\n\n",
          "input": "**Example 1:**\n\n**Input:** destination = \\[2,3\\], k = 1\n**Output:**  \"HHHVV \"\n**Explanation:** All the instructions that reach (2, 3) in lexicographic order are as follows:\n\\[ \"HHHVV \",  \"HHVHV \",  \"HHVVH \",  \"HVHHV \",  \"HVHVH \",  \"HVVHH \",  \"VHHHV \",  \"VHHVH \",  \"VHVHH \",  \"VVHHH \"\\].\n\n**Example 2:**\n\n**Input:** destination = \\[2,3\\], k = 2\n**Output:**  \"HHVHV \"\n\n**Example 3:**\n\n**Input:** destination = \\[2,3\\], k = 3\n**Output:**  \"HHVVH \"\n\n**Constraints:**\n\n*   `destination.length == 2`\n*   `1 <= row, column <= 15`\n*   `1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` denotes `a` choose `b`\u200b\u200b\u200b\u200b\u200b.There are nCr(row + column, row) possible instructions to reach (row, column). Try building the instructions one step at a time. How many instructions start with \"H\", and how does this compare with k?",
          "output": "from collections import defaultdict\n\ndef dfs(node, tree, labels, ans, count):\n    prev_count = count[labels[node]]\n    count[labels[node]] += 1\n    ans[node] = count[labels[node]] - prev_count\n\n    for child in tree[node]:\n        dfs(child, tree, labels, ans, count)\n\n    count[labels[node]] = prev_count\n\ndef countSubTrees(n, edges, labels):\n    tree = defaultdict(list)\n    for edge in edges:\n        tree[edge[1]].append(edge[0])\n\n    ans = [0] * n\n    count = defaultdict(int)\n    dfs(0, tree, labels, ans, count)\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\n\nGiven the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`.\n\nYou may assume that **the borders of the maze are all walls** (see examples).\n\n",
          "input": "**Example 1:**\n\n**Input:** maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[4,4\\]\n**Output:** true\n**Explanation:** One possible way is : left -> down -> left -> down -> right -> down -> right.\n\n**Example 2:**\n\n**Input:** maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[3,2\\]\n**Output:** false\n**Explanation:** There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.\n\n**Example 3:**\n\n**Input:** maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], start = \\[4,3\\], destination = \\[0,1\\]\n**Output:** false\n\n**Constraints:**\n\n*   `m == maze.length`\n*   `n == maze[i].length`\n*   `1 <= m, n <= 100`\n*   `maze[i][j]` is `0` or `1`.\n*   `start.length == 2`\n*   `destination.length == 2`\n*   `0 <= startrow, destinationrow <= m`\n*   `0 <= startcol, destinationcol <= n`\n*   Both the ball and the destination exist in an empty space, and they will not be in the same position initially.\n*   The maze contains **at least 2 empty spaces**.",
          "output": "def hasPath(maze, start, destination):\n    dirs = ((0, 1), (0, -1), (1, 0), (-1, 0))\n    q = [start]\n    while q:\n        x, y = q.pop(0)\n        if x == destination[0] and y == destination[1]:\n            return True\n        for dx, dy in dirs:\n            i, j = x, y\n            while 0 <= i + dx < len(maze) and 0 <= j + dy < len(maze[0]) and maze[i + dx][j + dy] == 0:\n                i += dx\n                j += dy\n            if maze[i][j] == 0:\n                maze[i][j] = 1\n                q.append((i, j))\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: A web developer needs to know how to design a web page's size. So, given a specific rectangular web page's area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n\n1.  The area of the rectangular web page you designed must equal to the given target area.\n2.  The width `W` should not be larger than the length `L`, which means `L >= W`.\n3.  The difference between length `L` and width `W` should be as small as possible.\n\nReturn _an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence._\n\n",
          "input": "**Example 1:**\n\n**Input:** area = 4\n**Output:** \\[2,2\\]\n**Explanation:** The target area is 4, and all the possible ways to construct it are \\[1,4\\], \\[2,2\\], \\[4,1\\]. \nBut according to requirement 2, \\[1,4\\] is illegal; according to requirement 3,  \\[4,1\\] is not optimal compared to \\[2,2\\]. So the length L is 2, and the width W is 2.\n\n**Example 2:**\n\n**Input:** area = 37\n**Output:** \\[37,1\\]\n\n**Example 3:**\n\n**Input:** area = 122122\n**Output:** \\[427,286\\]\n\n**Constraints:**\n\n*   `1 <= area <= 107`The W is always less than or equal to the square root of the area, so we start searching at sqrt(area) till we find the result.",
          "output": "def constructRectangle(area: int) -> List[int]:\n    width = int(area**0.5)\n    while area % width != 0:\n        width -= 1\n    length = area // width\n    return [length, width]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the number of **reverse pairs** in the array_.\n\nA **reverse pair** is a pair `(i, j)` where:\n\n*   `0 <= i < j < nums.length` and\n*   `nums[i] > 2 * nums[j]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,2,3,1\\]\n**Output:** 2\n**Explanation:** The reverse pairs are:\n(1, 4) --> nums\\[1\\] = 3, nums\\[4\\] = 1, 3 > 2 \\* 1\n(3, 4) --> nums\\[3\\] = 3, nums\\[4\\] = 1, 3 > 2 \\* 1\n\n**Example 2:**\n\n**Input:** nums = \\[2,4,3,5,1\\]\n**Output:** 3\n**Explanation:** The reverse pairs are:\n(1, 4) --> nums\\[1\\] = 4, nums\\[4\\] = 1, 4 > 2 \\* 1\n(2, 4) --> nums\\[2\\] = 3, nums\\[4\\] = 1, 3 > 2 \\* 1\n(3, 4) --> nums\\[3\\] = 5, nums\\[4\\] = 1, 5 > 2 \\* 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `-231 <= nums[i] <= 231 - 1`",
          "output": "def reversePairs(nums):\n    def mergeSort(l, r):\n        if l >= r:\n            return 0\n        \n        mid = (l + r) // 2\n        count = mergeSort(l, mid) + mergeSort(mid + 1, r)\n        j = mid + 1\n        for i in range(l, mid + 1):\n            while j <= r and nums[i] > 2 * nums[j]:\n                j += 1\n            count += j - (mid + 1)\n        \n        nums[l:r + 1] = sorted(nums[l:r + 1])\n        \n        return count\n    \n    return mergeSort(0, len(nums) - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `target`.\n\nYou want to build an **expression** out of nums by adding one of the symbols `'+'` and `'-'` before each integer in nums and then concatenate all the integers.\n\n*   For example, if `nums = [2, 1]`, you can add a `'+'` before `2` and a `'-'` before `1` and concatenate them to build the expression `\"+2-1 \"`.\n\nReturn the number of different **expressions** that you can build, which evaluates to `target`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1,1,1\\], target = 3\n**Output:** 5\n**Explanation:** There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n\n**Example 2:**\n\n**Input:** nums = \\[1\\], target = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 20`\n*   `0 <= nums[i] <= 1000`\n*   `0 <= sum(nums[i]) <= 1000`\n*   `-1000 <= target <= 1000`",
          "output": "def findTargetSumWays(nums, target):\n    total_sum = sum(nums)\n    if total_sum < target or (total_sum + target) % 2 != 0:\n        return 0\n    target_sum = (total_sum + target) // 2\n    dp = [0] * (target_sum + 1)\n    dp[0] = 1\n    for num in nums:\n        for j in range(target_sum, num - 1, -1):\n            dp[j] += dp[j - num]\n    return dp[target_sum]\n"
     },
     {
          "instruction": "Write python code for this problem: Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly `duration` seconds. More formally, an attack at second `t` will mean Ashe is poisoned during the **inclusive** time interval `[t, t + duration - 1]`. If Teemo attacks again **before** the poison effect ends, the timer for it is **reset**, and the poison effect will end `duration` seconds after the new attack.\n\nYou are given a **non-decreasing** integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`.\n\nReturn _the **total** number of seconds that Ashe is poisoned_.\n\n",
          "input": "**Example 1:**\n\n**Input:** timeSeries = \\[1,4\\], duration = 2\n**Output:** 4\n**Explanation:** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n\n**Example 2:**\n\n**Input:** timeSeries = \\[1,2\\], duration = 2\n**Output:** 3\n**Explanation:** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\n\n**Constraints:**\n\n*   `1 <= timeSeries.length <= 104`\n*   `0 <= timeSeries[i], duration <= 107`\n*   `timeSeries` is sorted in **non-decreasing** order.",
          "output": "def find_poisoned_duration(time_series, duration):\n    if not time_series:\n        return 0\n    total = 0\n    for i in range(1, len(time_series)):\n        total += min(time_series[i] - time_series[i - 1], duration)\n    return total + duration\n"
     },
     {
          "instruction": "Write python code for this problem: The **next greater element** of some element `x` in an array is the **first greater** element that is **to the right** of `x` in the same array.\n\nYou are given two **distinct 0-indexed** integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`.\n\nFor each `0 <= i < nums1.length`, find the index `j` such that `nums1[i] == nums2[j]` and determine the **next greater element** of `nums2[j]` in `nums2`. If there is no next greater element, then the answer for this query is `-1`.\n\nReturn _an array_ `ans` _of length_ `nums1.length` _such that_ `ans[i]` _is the **next greater element** as described above._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[4,1,2\\], nums2 = \\[1,3,4,2\\]\n**Output:** \\[-1,3,-1\\]\n**Explanation:** The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = \\[1,3,4,2\\]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = \\[1,3,4,2\\]. The next greater element is 3.\n- 2 is underlined in nums2 = \\[1,3,4,2\\]. There is no next greater element, so the answer is -1.\n\n**Example 2:**\n\n**Input:** nums1 = \\[2,4\\], nums2 = \\[1,2,3,4\\]\n**Output:** \\[3,-1\\]\n**Explanation:** The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = \\[1,2,3,4\\]. The next greater element is 3.\n- 4 is underlined in nums2 = \\[1,2,3,4\\]. There is no next greater element, so the answer is -1.\n\n**Constraints:**\n\n*   `1 <= nums1.length <= nums2.length <= 1000`\n*   `0 <= nums1[i], nums2[i] <= 104`\n*   All integers in `nums1` and `nums2` are **unique**.\n*   All the integers of `nums1` also appear in `nums2`.\n\n**Follow up:** Could you find an `O(nums1.length + nums2.length)` solution?",
          "output": "def next_greater_element(nums1, nums2):\n    next_greater = {}\n    stack = []\n\n    for num in nums2:\n        while stack and stack[-1] < num:\n            next_greater[stack.pop()] = num\n        stack.append(num)\n\n    return [next_greater.get(n, -1) for n in nums1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` matrix `mat`, return _an array of all the elements of the array in a diagonal order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** \\[1,2,4,7,5,3,6,8,9\\]\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** \\[1,2,3,4\\]\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 104`\n*   `1 <= m * n <= 104`\n*   `-105 <= mat[i][j] <= 105`",
          "output": "from typing import List\n\ndef findDiagonalOrder(mat: List[List[int]]) -> List[int]:\n    m, n = len(mat), len(mat[0])\n    result = [0] * (m * n)\n    row, col = 0, 0\n    for i in range(m * n):\n        result[i] = mat[row][col]\n        if (row + col) % 2 == 0:\n            if col == n - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row -= 1\n                col += 1\n        else:\n            if row == m - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                row += 1\n                col -= 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole.\n\nGiven the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return _a string_ `instructions` _of all the instructions that the ball should follow to drop in the hole with the **shortest distance** possible_. If there are multiple valid instructions, return the **lexicographically minimum** one. If the ball can't drop in the hole, return `\"impossible \"`.\n\nIf there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right).\n\nThe **distance** is the number of **empty spaces** traveled by the ball from the start position (excluded) to the destination (included).\n\nYou may assume that **the borders of the maze are all walls** (see examples).\n\n",
          "input": "**Example 1:**\n\n**Input:** maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], ball = \\[4,3\\], hole = \\[0,1\\]\n**Output:**  \"lul \"\n**Explanation:** There are two shortest ways for the ball to drop into the hole.\nThe first way is left -> up -> left, represented by  \"lul \".\nThe second way is up -> left, represented by 'ul'.\nBoth ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is  \"lul \".\n\n**Example 2:**\n\n**Input:** maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], ball = \\[4,3\\], hole = \\[3,0\\]\n**Output:**  \"impossible \"\n**Explanation:** The ball cannot reach the hole.\n\n**Example 3:**\n\n**Input:** maze = \\[\\[0,0,0,0,0,0,0\\],\\[0,0,1,0,0,1,0\\],\\[0,0,0,0,1,0,0\\],\\[0,0,0,0,0,0,1\\]\\], ball = \\[0,4\\], hole = \\[3,5\\]\n**Output:**  \"dldr \"\n\n**Constraints:**\n\n*   `m == maze.length`\n*   `n == maze[i].length`\n*   `1 <= m, n <= 100`\n*   `maze[i][j]` is `0` or `1`.\n*   `ball.length == 2`\n*   `hole.length == 2`\n*   `0 <= ballrow, holerow <= m`\n*   `0 <= ballcol, holecol <= n`\n*   Both the ball and the hole exist in an empty space, and they will not be in the same position initially.\n*   The maze contains **at least 2 empty spaces**.",
          "output": "from heapq import heappush, heappop\n\nclass Solution:\n    def findShortestWay(self, maze: List[List[int]], ball: List[int], hole: List[int]) -> str:\n        m, n = len(maze), len(maze[0])\n        dist = [[float(\"inf\")] * n for _ in range(m)]\n        dirs = [\"d\", \"l\", \"r\", \"u\"]\n        dirs_vector = [[1, 0], [0, -1], [0, 1], [-1, 0]]\n        dist[ball[0]][ball[1]] = 0\n        pq = [(0, \"\", ball[0], ball[1])]\n        \n        while pq:\n            cur_dist, cur_path, x, y = heappop(pq)\n            if [x, y] == hole:\n                return cur_path\n\n            for k, d in enumerate(dirs):\n                dist_move, r, c = 0, x + dirs_vector[k][0], y + dirs_vector[k][1]\n                while 0 <= r < m and 0 <= c < n and maze[r][c] == 0 and [r, c] != hole:\n                    r += dirs_vector[k][0]\n                    c += dirs_vector[k][1]\n                    dist_move += 1\n                r -= dirs_vector[k][0]\n                c -= dirs_vector[k][1]\n                dist_move -= 1\n                \n                if dist[x][y] + dist_move < dist[r][c]:\n                    dist[r][c] = dist[x][y] + dist_move\n                    heappush(pq, (cur_dist + dist_move, cur_path + d, r, c))\n        \n        return \"impossible\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words`, return _the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below_.\n\nIn the **American keyboard**:\n\n*   the first row consists of the characters `\"qwertyuiop \"`,\n*   the second row consists of the characters `\"asdfghjkl \"`, and\n*   the third row consists of the characters `\"zxcvbnm \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"Hello \", \"Alaska \", \"Dad \", \"Peace \"\\]\n**Output:** \\[ \"Alaska \", \"Dad \"\\]\n\n**Example 2:**\n\n**Input:** words = \\[ \"omk \"\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** words = \\[ \"adsdf \", \"sfd \"\\]\n**Output:** \\[ \"adsdf \", \"sfd \"\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 20`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists of English letters (both lowercase and uppercase).",
          "output": "def find_words(words):\n    rows = [\n        set(\"qwertyuiopQWERTYUIOP\"),\n        set(\"asdfghjklASDFGHJKL\"),\n        set(\"zxcvbnmZXCVBNM\")\n    ]\n    res = []\n\n    for word in words:\n        row = -1\n        for i in range(3):\n            if word[0] in rows[i]:\n                row = i\n                break\n\n        if all(c in rows[row] for c in word):\n            res.append(word)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree (BST) with duplicates, return _all the [mode(s)](https://en.wikipedia.org/wiki/Mode_(statistics)) (i.e., the most frequently occurred element) in it_.\n\nIf the tree has more than one mode, return them in **any order**.\n\nAssume a BST is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than or equal to** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than or equal to** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,2\\]\n**Output:** \\[2\\]\n\n**Example 2:**\n\n**Input:** root = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-105 <= Node.val <= 105`\n\n**Follow up:** Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",
          "output": "def findMode(root):\n    def InOrder(node):\n        if not node: return\n        yield from InOrder(node.left)\n        yield node.val\n        yield from InOrder(node.right)\n        \n    counts = collections.Counter(InOrder(root))\n    max_count = max(counts.values(), default=0)\n    return [k for k, v in counts.items() if v == max_count]\n"
     },
     {
          "instruction": "Write python code for this problem: Suppose LeetCode will start its **IPO** soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the **IPO**. Since it has limited resources, it can only finish at most `k` distinct projects before the **IPO**. Help LeetCode design the best way to maximize its total capital after finishing at most `k` distinct projects.\n\nYou are given `n` projects where the `ith` project has a pure profit `profits[i]` and a minimum capital of `capital[i]` is needed to start it.\n\nInitially, you have `w` capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\n\nPick a list of **at most** `k` distinct projects from given projects to **maximize your final capital**, and return _the final maximized capital_.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 2, w = 0, profits = \\[1,2,3\\], capital = \\[0,1,1\\]\n**Output:** 4\n**Explanation:** Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n\n**Example 2:**\n\n**Input:** k = 3, w = 0, profits = \\[1,2,3\\], capital = \\[0,1,2\\]\n**Output:** 6\n\n**Constraints:**\n\n*   `1 <= k <= 105`\n*   `0 <= w <= 109`\n*   `n == profits.length`\n*   `n == capital.length`\n*   `1 <= n <= 105`\n*   `0 <= profits[i] <= 104`\n*   `0 <= capital[i] <= 109`",
          "output": "import heapq\n\ndef findMaximizedCapital(k: int, w: int, profits, capital) -> int:\n    project_pool = list(zip(capital, profits))\n    project_pool.sort(reverse=True)\n    \n    profit_pool = []\n    \n    while k:\n        while project_pool and project_pool[-1][0] <= w:\n            heapq.heappush(profit_pool, -project_pool.pop()[1])\n        \n        if not profit_pool:\n            break\n        \n        w -= heapq.heappop(profit_pool)\n        k -= 1\n        \n    return w\n"
     },
     {
          "instruction": "Write python code for this problem: Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return _the **next greater number** for every element in_ `nums`.\n\nThe **next greater number** of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,1\\]\n**Output:** \\[2,-1,2\\]\nExplanation: The first 1's next greater number is 2; \nThe number 2 can't find next greater number. \nThe second 1's next greater number needs to search circularly, which is also 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,3\\]\n**Output:** \\[2,3,4,-1,4\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-109 <= nums[i] <= 109`",
          "output": "def nextGreaterElements(nums):\n    result = [-1] * len(nums)\n    stack = []\n\n    for i in range(len(nums) * 2):\n        index = i % len(nums)\n        while stack and nums[stack[-1]] < nums[index]:\n            result[stack.pop()] = nums[index]\n        if i < len(nums):\n            stack.append(index)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `num`, return _a string of its **base 7** representation_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 100\n**Output:** \"202\"\n\n**Example 2:**\n\n**Input:** num = -7\n**Output:** \"-10\"\n\n**Constraints:**\n\n*   `-107 <= num <= 107`",
          "output": "def convert_to_base7(num: int) -> str:\n    if num == 0:\n        return \"0\"\n    result = \"\"\n    negative = num < 0\n    if negative:\n        num *= -1\n    while num > 0:\n        result = str(num % 7) + result\n        num //= 7\n    return \"-\" + result if negative else result\n"
     },
     {
          "instruction": "Write python code for this problem: There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\n\nGiven the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return _the shortest **distance** for the ball to stop at the destination_. If the ball cannot stop at `destination`, return `-1`.\n\nThe **distance** is the number of **empty spaces** traveled by the ball from the start position (excluded) to the destination (included).\n\nYou may assume that **the borders of the maze are all walls** (see examples).\n\n",
          "input": "**Example 1:**\n\n**Input:** maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[4,4\\]\n**Output:** 12\n**Explanation:** One possible way is : left -> down -> left -> down -> right -> down -> right.\nThe length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.\n\n**Example 2:**\n\n**Input:** maze = \\[\\[0,0,1,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,1,0\\],\\[1,1,0,1,1\\],\\[0,0,0,0,0\\]\\], start = \\[0,4\\], destination = \\[3,2\\]\n**Output:** -1\n**Explanation:** There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.\n\n**Example 3:**\n\n**Input:** maze = \\[\\[0,0,0,0,0\\],\\[1,1,0,0,1\\],\\[0,0,0,0,0\\],\\[0,1,0,0,1\\],\\[0,1,0,0,0\\]\\], start = \\[4,3\\], destination = \\[0,1\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `m == maze.length`\n*   `n == maze[i].length`\n*   `1 <= m, n <= 100`\n*   `maze[i][j]` is `0` or `1`.\n*   `start.length == 2`\n*   `destination.length == 2`\n*   `0 <= startrow, destinationrow < m`\n*   `0 <= startcol, destinationcol < n`\n*   Both the ball and the destination exist in an empty space, and they will not be in the same position initially.\n*   The maze contains **at least 2 empty spaces**.",
          "output": "from queue import PriorityQueue\n\ndef shortestDistance(maze, start, destination):\n    m, n = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    dist = [[-1 for _ in range(n)] for _ in range(m)]\n\n    q = PriorityQueue()\n\n    dist[start[0]][start[1]] = 0\n    q.put((0, start[0], start[1]))\n\n    while not q.empty():\n        cur = q.get()\n        x, y = cur[1], cur[2]\n\n        for dir in directions:\n            newX, newY = x + dir[0], y + dir[1]\n            step = 0\n\n            while 0 <= newX < m and 0 <= newY < n and maze[newX][newY] == 0:\n                newX += dir[0]\n                newY += dir[1]\n                step += 1\n\n            newX -= dir[0]\n            newY -= dir[1]\n\n            if dist[newX][newY] == -1 or dist[x][y] + step < dist[newX][newY]:\n                dist[newX][newY] = dist[x][y] + step\n                q.put((dist[newX][newY], newX, newY))\n\n    return dist[destination[0]][destination[1]]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be **unique**.\n\nThe athletes are **placed** based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank:\n\n*   The `1st` place athlete's rank is `\"Gold Medal \"`.\n*   The `2nd` place athlete's rank is `\"Silver Medal \"`.\n*   The `3rd` place athlete's rank is `\"Bronze Medal \"`.\n*   For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `\"x \"`).\n\nReturn an array `answer` of size `n` where `answer[i]` is the **rank** of the `ith` athlete.\n\n",
          "input": "**Example 1:**\n\n**Input:** score = \\[5,4,3,2,1\\]\n**Output:** \\[ \"Gold Medal \", \"Silver Medal \", \"Bronze Medal \", \"4 \", \"5 \"\\]\n**Explanation:** The placements are \\[1st, 2nd, 3rd, 4th, 5th\\].\n\n**Example 2:**\n\n**Input:** score = \\[10,3,8,9,4\\]\n**Output:** \\[ \"Gold Medal \", \"5 \", \"Bronze Medal \", \"Silver Medal \", \"4 \"\\]\n**Explanation:** The placements are \\[1st, 5th, 3rd, 2nd, 4th\\].\n\n**Constraints:**\n\n*   `n == score.length`\n*   `1 <= n <= 104`\n*   `0 <= score[i] <= 106`\n*   All the values in `score` are **unique**.",
          "output": "def find_relative_ranks(score):\n    rank_sort = sorted(range(len(score)), key=lambda i: score[i], reverse=True)\n    result = [0] * len(score)\n    for i, rank in enumerate(rank_sort):\n        result[rank] = i + 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A [**perfect number**](https://en.wikipedia.org/wiki/Perfect_number) is a **positive integer** that is equal to the sum of its **positive divisors**, excluding the number itself. A **divisor** of an integer `x` is an integer that can divide `x` evenly.\n\nGiven an integer `n`, return `true` _if_ `n` _is a perfect number, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 28\n**Output:** true\n**Explanation:** 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n\n**Example 2:**\n\n**Input:** num = 7\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= num <= 108`",
          "output": "def checkPerfectNumber(num: int) -> bool:\n    if num <= 1:\n        return False\n    sum = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            sum += i\n            if i * i != num:\n                sum += num // i\n        i += 1\n    return sum == num\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return the most frequent **subtree sum**. If there is a tie, return all the values with the highest frequency in any order.\n\nThe **subtree sum** of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,2,-3\\]\n**Output:** \\[2,-3,4\\]\n\n**Example 2:**\n\n**Input:** root = \\[5,2,-5\\]\n**Output:** \\[2\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-105 <= Node.val <= 105`",
          "output": "from collections import defaultdict\n\ndef helper(node, counts):\n    if not node: return 0\n    val = node.val + helper(node.left, counts) + helper(node.right, counts)\n    counts[val] += 1\n    return val\n\ndef findFrequentTreeSum(root):\n    counts = defaultdict(int)\n    helper(root, counts)\n    max_count = max(counts.values(), default=0)\n    return [s for s, c in counts.items() if c == max_count]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `node` in a binary search tree, return _the in-order successor of that node in the BST_. If that node has no in-order successor, return `null`.\n\nThe successor of a `node` is the node with the smallest key greater than `node.val`.\n\nYou will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`:\n\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n\n",
          "input": "**Example 1:**\n\n**Input:** tree = \\[2,1,3\\], node = 1\n**Output:** 2\n**Explanation:** 1's in-order successor node is 2. Note that both the node and the return value is of Node type.\n\n**Example 2:**\n\n**Input:** tree = \\[5,3,6,2,4,null,null,1\\], node = 6\n**Output:** null\n**Explanation:** There is no in-order successor of the current node, so the answer is null.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-105 <= Node.val <= 105`\n*   All Nodes will have unique values.\n\n**Follow up:** Could you solve it without looking up any of the node's values?",
          "output": "class Node:\n    def __init__(self, val, left=None, right=None, parent=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.parent = parent\n\ndef inorder_successor(node: Node) -> Node:\n    if node.right:\n        node = node.right\n        while node.left:\n            node = node.left\n        return node\n\n    while node.parent and node == node.parent.right:\n        node = node.parent\n\n    return node.parent\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a binary array `nums` containing only the integers `0` and `1`. Return _the number of **subarrays** in nums that have **more**_ `1`'_s than_ `0`_'s. Since the answer may be very large, return it **modulo**_ `109 + 7`.\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,1,0,1\\]\n**Output:** 9\n**Explanation:**\nThe subarrays of size 1 that have more ones than zeros are: \\[1\\], \\[1\\], \\[1\\]\nThe subarrays of size 2 that have more ones than zeros are: \\[1,1\\]\nThe subarrays of size 3 that have more ones than zeros are: \\[0,1,1\\], \\[1,1,0\\], \\[1,0,1\\]\nThe subarrays of size 4 that have more ones than zeros are: \\[1,1,0,1\\]\nThe subarrays of size 5 that have more ones than zeros are: \\[0,1,1,0,1\\]\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** 0\n**Explanation:**\nNo subarrays have more ones than zeros.\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** 1\n**Explanation:**\nThe subarrays of size 1 that have more ones than zeros are: \\[1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 1`Change the zeros in nums to -1 and create a prefix sum array prefixSum using the new nums. If prefixSum[i] for any index i in the range 0 <= i < prefixSum.length is positive, that means that there are more ones than zeros in the prefix ending at index i. If prefixSum[j] > prefixSum[i] for two indexes i and j such that 0 <= i < j < prefixSum.length, that means that there are more ones than zeros in nums in the range [i + 1 : j] (inclusive)",
          "output": "def min_moves(n):\n    dp = [0, 1] + [0] * (n - 1)\n\n    for i in range(2, n + 1):\n        dp[i] = i\n        for x in range(1, i):\n            broken = x - 1\n            unbroken = i - x\n            dp[i] = min(dp[i], 1 + max(dp[broken], dp[unbroken]))\n\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is:\n\n*   At least one path exists from the `source` node to the `destination` node\n*   If a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`.\n*   The number of possible paths from `source` to `destination` is a finite number.\n\nReturn `true` if and only if all roads from `source` lead to `destination`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, edges = \\[\\[0,1\\],\\[0,2\\]\\], source = 0, destination = 2\n**Output:** false\n**Explanation:** It is possible to reach and get stuck on both node 1 and node 2.\n\n**Example 2:**\n\n**Input:** n = 4, edges = \\[\\[0,1\\],\\[0,3\\],\\[1,2\\],\\[2,1\\]\\], source = 0, destination = 3\n**Output:** false\n**Explanation:** We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.\n\n**Example 3:**\n\n**Input:** n = 4, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[2,3\\]\\], source = 0, destination = 3\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= n <= 104`\n*   `0 <= edges.length <= 104`\n*   `edges.length == 2`\n*   `0 <= ai, bi <= n - 1`\n*   `0 <= source <= n - 1`\n*   `0 <= destination <= n - 1`\n*   The given graph may have self-loops and parallel edges.What if we can reach to a cycle from the source node? Then the answer will be false, because we eventually get trapped in the cycle forever. What if the we can't reach to a cycle from the source node? Then we need to ensure that from all visited nodes from source the unique node with indegree = 0 is the destination node.",
          "output": "from collections import defaultdict\n\ndef leadsToDestination(n, edges, source, destination):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n\n    visited = [0] * n\n    return dfs(source, graph, visited, destination)\n\ndef dfs(node, graph, visited, destination):\n    if node not in graph:\n        return node == destination\n    if visited[node] != 0:\n        return visited[node] == 2\n\n    visited[node] = 1\n    for neighbor in graph[node]:\n        if not dfs(neighbor, graph, visited, destination):\n            return False\n\n    visited[node] = 2\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: A **subarray** of a **0-indexed** integer array is a contiguous **non-empty** sequence of elements within an array.\n\nThe **alternating subarray sum** of a subarray that ranges from index `i` to `j` (**inclusive**, `0 <= i <= j < nums.length`) is `nums[i] - nums[i+1] + nums[i+2] - ... +/- nums[j]`.\n\nGiven a **0-indexed** integer array `nums`, return _the **maximum alternating subarray sum** of any subarray of_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,-1,1,2\\]\n**Output:** 5\n**Explanation:**\nThe subarray \\[3,-1,1\\] has the largest alternating subarray sum.\nThe alternating subarray sum is 3 - (-1) + 1 = 5.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\]\n**Output:** 2\n**Explanation:**\nThe subarrays \\[2\\], \\[2,2,2\\], and \\[2,2,2,2,2\\] have the largest alternating subarray sum.\nThe alternating subarray sum of \\[2\\] is 2.\nThe alternating subarray sum of \\[2,2,2\\] is 2 - 2 + 2 = 2.\nThe alternating subarray sum of \\[2,2,2,2,2\\] is 2 - 2 + 2 - 2 + 2 = 2.\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** 1\n**Explanation:**\nThere is only one non-empty subarray, which is \\[1\\].\nThe alternating subarray sum is 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-105 <= nums[i] <= 105`How can Kadane's Algorithm help us? If you convert all the numbers at odd indices to the negative version of that number, the problem simplifies to finding the maximum subarray sum. However, this strategy needs you to start each subarray at an even index. Do the same except converting all the numbers at even indices to the negative version of that number.",
          "output": "def maxAlternatingSum(nums):\n    odd, even = 0, 0\n    for num in nums:\n        newOdd = max(even + num, odd)\n        even = max(odd - num, even)\n        odd = newOdd\n    return odd\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return the leftmost value in the last row of the tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,4,null,5,6,null,null,7\\]\n**Output:** 7\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-231 <= Node.val <= 231 - 1`",
          "output": "def findBottomLeftValue(self, root: TreeNode) -> int:\n    result = [0, 0] # [depth, value]\n    self.helper(root, 1, result)\n    return result[1]\n\ndef helper(self, node, depth, result):\n    if not node:\n        return\n    if depth > result[0]:\n        result[0] = depth\n        result[1] = node.val\n\n    self.helper(node.left, depth+1, result)\n    self.helper(node.right, depth+1, result)\n"
     },
     {
          "instruction": "Write python code for this problem: In the video game Fallout 4, the quest **\"Road to Freedom \"** requires players to reach a metal dial called the **\"Freedom Trail Ring \"** and use the dial to spell a specific keyword to open the door.\n\nGiven a string `ring` that represents the code engraved on the outer ring and another string `key` that represents the keyword that needs to be spelled, return _the minimum number of steps to spell all the characters in the keyword_.\n\nInitially, the first character of the ring is aligned at the `\"12:00 \"` direction. You should spell all the characters in `key` one by one by rotating `ring` clockwise or anticlockwise to make each character of the string key aligned at the `\"12:00 \"` direction and then by pressing the center button.\n\nAt the stage of rotating the ring to spell the key character `key[i]`:\n\n1.  You can rotate the ring clockwise or anticlockwise by one place, which counts as **one step**. The final purpose of the rotation is to align one of `ring`'s characters at the `\"12:00 \"` direction, where this character must equal `key[i]`.\n2.  If the character `key[i]` has been aligned at the `\"12:00 \"` direction, press the center button to spell, which also counts as **one step**. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\n\n",
          "input": "**Example 1:**\n\n**Input:** ring =  \"godding \", key =  \"gd \"\n**Output:** 4\n**Explanation:**\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring  \"godding \" anticlockwise by two steps to make it become  \"ddinggo \".\nAlso, we need 1 more step for spelling.\nSo the final output is 4.\n\n**Example 2:**\n\n**Input:** ring =  \"godding \", key =  \"godding \"\n**Output:** 13\n\n**Constraints:**\n\n*   `1 <= ring.length, key.length <= 100`\n*   `ring` and `key` consist of only lower case English letters.\n*   It is guaranteed that `key` could always be spelled by rotating `ring`.",
          "output": "def find_rotate_steps(ring: str, key: str) -> int:\n    n, m = len(ring), len(key)\n    dp = [[0] * n for _ in range(m + 1)]\n\n    for i in range(m - 1, -1, -1):\n        for j in range(n):\n            dp[i][j] = float('inf')\n            for k in range(n):\n                if ring[k] == key[i]:\n                    diff = abs(j - k)\n                    step = min(diff, n - diff)\n                    dp[i][j] = min(dp[i][j], step + dp[i + 1][k])\n\n    return dp[0][0] + m\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _an array of the largest value in each row_ of the tree **(0-indexed)**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,3,2,5,3,null,9\\]\n**Output:** \\[1,3,9\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3\\]\n**Output:** \\[1,3\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree will be in the range `[0, 104]`.\n*   `-231 <= Node.val <= 231 - 1`",
          "output": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef largestValues(root: TreeNode):\n    if not root:\n        return []\n    result = []\n    queue = deque([root])\n\n    while queue:\n        size = len(queue)\n        max_val = float('-inf')\n        for _ in range(size):\n            node = queue.popleft()\n            max_val = max(max_val, node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(max_val)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, find _the longest palindromic **subsequence**'s length in_ `s`.\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"bbbab \"\n**Output:** 4\n**Explanation:** One possible longest palindromic subsequence is  \"bbbb \".\n\n**Example 2:**\n\n**Input:** s =  \"cbbd \"\n**Output:** 2\n**Explanation:** One possible longest palindromic subsequence is  \"bb \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists only of lowercase English letters.",
          "output": "def longestPalindromeSubseq(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    return dp[0][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` super washing machines on a line. Initially, each washing machine has some dresses or is empty.\n\nFor each move, you could choose any `m` (`1 <= m <= n`) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\n\nGiven an integer array `machines` representing the number of dresses in each washing machine from left to right on the line, return _the minimum number of moves to make all the washing machines have the same number of dresses_. If it is not possible to do it, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** machines = \\[1,0,5\\]\n**Output:** 3\n**Explanation:**\n1st move:    1     0 <-- 5    =>    1     1     4\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n3rd move:    2     1 <-- 3    =>    2     2     2\n\n**Example 2:**\n\n**Input:** machines = \\[0,3,0\\]\n**Output:** 2\n**Explanation:**\n1st move:    0 <-- 3     0    =>    1     2     0\n2nd move:    1     2 --> 0    =>    1     1     1\n\n**Example 3:**\n\n**Input:** machines = \\[0,2,0\\]\n**Output:** -1\n**Explanation:**\nIt's impossible to make all three washing machines have the same number of dresses.\n\n**Constraints:**\n\n*   `n == machines.length`\n*   `1 <= n <= 104`\n*   `0 <= machines[i] <= 105`",
          "output": "def find_min_moves(machines):\n    n = len(machines)\n    total_dresses = sum(machines)\n    if total_dresses % n != 0:\n        return -1\n    average = total_dresses // n\n    moves = 0\n    imbalance = 0\n    \n    for i in range(n):\n        imbalance += machines[i] - average\n        moves = max(moves, abs(imbalance), machines[i] - average)\n        \n    return moves\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **0-indexed** binary arrays `nums1` and `nums2`. Find the **widest** pair of indices `(i, j)` such that `i <= j` and `nums1[i] + nums1[i+1] + ... + nums1[j] == nums2[i] + nums2[i+1] + ... + nums2[j]`.\n\nThe **widest** pair of indices is the pair with the **largest** **distance** between `i` and `j`. The **distance** between a pair of indices is defined as `j - i + 1`.\n\nReturn _the **distance** of the **widest** pair of indices. If no pair of indices meets the conditions, return_ `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,1,0,1\\], nums2 = \\[0,1,1,0\\]\n**Output:** 3\n**Explanation:**\nIf i = 1 and j = 3:\nnums1\\[1\\] + nums1\\[2\\] + nums1\\[3\\] = 1 + 0 + 1 = 2.\nnums2\\[1\\] + nums2\\[2\\] + nums2\\[3\\] = 1 + 1 + 0 = 2.\nThe distance between i and j is j - i + 1 = 3 - 1 + 1 = 3.\n\n**Example 2:**\n\n**Input:** nums1 = \\[0,1\\], nums2 = \\[1,1\\]\n**Output:** 1\n**Explanation:**\nIf i = 1 and j = 1:\nnums1\\[1\\] = 1.\nnums2\\[1\\] = 1.\nThe distance between i and j is j - i + 1 = 1 - 1 + 1 = 1.\n\n**Example 3:**\n\n**Input:** nums1 = \\[0\\], nums2 = \\[1\\]\n**Output:** 0\n**Explanation:**\nThere are no pairs of indices that meet the requirements.\n\n**Constraints:**\n\n*   `n == nums1.length == nums2.length`\n*   `1 <= n <= 105`\n*   `nums1[i]` is either `0` or `1`.\n*   `nums2[i]` is either `0` or `1`.Keep prefix sums of both arrays. Can the difference between the prefix sums at an index help us? What happens if the difference between the two prefix sums at an index a is x, and x again at a different index b? This means that the sum of nums1 from index a + 1 to index b is equal to the sum of nums2 from index a + 1 to index b.",
          "output": "def max_alive_year(logs):\n    years = [0] * 2051\n    \n    for log in logs:\n        years[log[0]] += 1\n        years[log[1]] -= 1\n    \n    max_population = 0\n    max_year = 0\n    population = 0\n    for i in range(1950, 2051):\n        population += years[i]\n        if population > max_population:\n            max_population = population\n            max_year = i\n\n    return max_year\n"
     },
     {
          "instruction": "Write python code for this problem: We define the usage of capitals in a word to be right when one of the following cases holds:\n\n*   All letters in this word are capitals, like `\"USA \"`.\n*   All letters in this word are not capitals, like `\"leetcode \"`.\n*   Only the first letter in this word is capital, like `\"Google \"`.\n\nGiven a string `word`, return `true` if the usage of capitals in it is right.\n\n",
          "input": "**Example 1:**\n\n**Input:** word = \"USA\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** word = \"FlaG\"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= word.length <= 100`\n*   `word` consists of lowercase and uppercase English letters.",
          "output": "def detectCapitalUse(word: str) -> bool:\n    numCapital = sum(1 for c in word if c.isupper())\n    return numCapital == 0 or numCapital == len(word) or (numCapital == 1 and word[0].isupper())\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `a` and `b`, return _the length of the **longest uncommon subsequence** between_ `a` _and_ `b`. If the longest uncommon subsequence does not exist, return `-1`.\n\nAn **uncommon subsequence** between two strings is a string that is a **subsequence of one but not the other**.\n\nA **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`.\n\n*   For example, `\"abc \"` is a subsequence of `\"aebdc \"` because you can delete the underlined characters in `\"aebdc \"` to get `\"abc \"`. Other subsequences of `\"aebdc \"` include `\"aebdc \"`, `\"aeb \"`, and `\" \"` (empty string).\n\n",
          "input": "**Example 1:**\n\n**Input:** a =  \"aba \", b =  \"cdc \"\n**Output:** 3\n**Explanation:** One longest uncommon subsequence is  \"aba \" because  \"aba \" is a subsequence of  \"aba \" but not  \"cdc \".\nNote that  \"cdc \" is also a longest uncommon subsequence.\n\n**Example 2:**\n\n**Input:** a =  \"aaa \", b =  \"bbb \"\n**Output:** 3\n**Explanation:** The longest uncommon subsequences are  \"aaa \" and  \"bbb \".\n\n**Example 3:**\n\n**Input:** a =  \"aaa \", b =  \"aaa \"\n**Output:** -1\n**Explanation:** Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n\n**Constraints:**\n\n*   `1 <= a.length, b.length <= 100`\n*   `a` and `b` consist of lower-case English letters.",
          "output": "def findLUSlength(a: str, b: str) -> int:\n    if a == b:\n        return -1\n    return max(len(a), len(b))\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `strs`, return _the length of the **longest uncommon subsequence** between them_. If the longest uncommon subsequence does not exist, return `-1`.\n\nAn **uncommon subsequence** between an array of strings is a string that is a **subsequence of one string but not the others**.\n\nA **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`.\n\n*   For example, `\"abc \"` is a subsequence of `\"aebdc \"` because you can delete the underlined characters in `\"aebdc \"` to get `\"abc \"`. Other subsequences of `\"aebdc \"` include `\"aebdc \"`, `\"aeb \"`, and `\" \"` (empty string).\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[\"aba\",\"cdc\",\"eae\"\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** strs = \\[\"aaa\",\"aaa\",\"aa\"\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `2 <= strs.length <= 50`\n*   `1 <= strs[i].length <= 10`\n*   `strs[i]` consists of lowercase English letters.",
          "output": "def find_lus_length(strs):\n    max_length = -1\n    for i in range(len(strs)):\n        is_uncommon = True\n        for j in range(len(strs)):\n            if i != j and strs[i] in strs[j]:\n                is_uncommon = False\n                break\n        if is_uncommon:\n            max_length = max(max_length, len(strs[i]))\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array nums and an integer k, return `true` _if_ `nums` _has a **good subarray** or_ `false` _otherwise_.\n\nA **good subarray** is a subarray where:\n\n*   its length is **at least two**, and\n*   the sum of the elements of the subarray is a multiple of `k`.\n\n**Note** that:\n\n*   A **subarray** is a contiguous part of the array.\n*   An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is **always** a multiple of `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[23,2,4,6,7\\], k = 6\n**Output:** true\n**Explanation:** \\[2, 4\\] is a continuous subarray of size 2 whose elements sum up to 6.\n\n**Example 2:**\n\n**Input:** nums = \\[23,2,6,4,7\\], k = 6\n**Output:** true\n**Explanation:** \\[23, 2, 6, 4, 7\\] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 \\* 6 and 7 is an integer.\n\n**Example 3:**\n\n**Input:** nums = \\[23,2,6,4,7\\], k = 13\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 109`\n*   `0 <= sum(nums[i]) <= 231 - 1`\n*   `1 <= k <= 231 - 1`",
          "output": "def checkSubarraySum(nums, k):\n    n, sum_ = len(nums), 0\n    mp = {0: -1}\n    for i, num in enumerate(nums):\n        sum_ += num\n        if k != 0:\n            sum_ %= k\n        if sum_ in mp:\n            if i - mp[sum_] > 1:\n                return True\n        else:\n            mp[sum_] = i\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and a string array `dictionary`, return _the longest string in the dictionary that can be formed by deleting some of the given string characters_. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abpcplea \", dictionary = \\[ \"ale \", \"apple \", \"monkey \", \"plea \"\\]\n**Output:**  \"apple \"\n\n**Example 2:**\n\n**Input:** s =  \"abpcplea \", dictionary = \\[ \"a \", \"b \", \"c \"\\]\n**Output:**  \"a \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `1 <= dictionary.length <= 1000`\n*   `1 <= dictionary[i].length <= 1000`\n*   `s` and `dictionary[i]` consist of lowercase English letters.",
          "output": "def findLongestWord(s, dictionary):\n    def is_subsequence(target, source):\n        iter_source = iter(source)\n        return all(char in iter_source for char in target)\n\n    dictionary = sorted(dictionary)\n    longest = ''\n    for word in dictionary:\n        if is_subsequence(word, s) and len(word) > len(longest):\n            longest = word\n    return longest\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary array `nums`, return _the maximum length of a contiguous subarray with an equal number of_ `0` _and_ `1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1\\]\n**Output:** 2\n**Explanation:** \\[0, 1\\] is the longest contiguous subarray with an equal number of 0 and 1.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,0\\]\n**Output:** 2\n**Explanation:** \\[0, 1\\] (or \\[1, 0\\]) is a longest contiguous subarray with equal number of 0 and 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`.",
          "output": "def findMaxLength(nums):\n    counts = {0: -1}\n    max_len = count = 0\n    for i, num in enumerate(nums):\n        count += 1 if num == 1 else -1\n        if count in counts:\n            max_len = max(max_len, i - counts[count])\n        else:\n            counts[count] = i\n    return max_len\n"
     },
     {
          "instruction": "Write python code for this problem: Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (**1-indexed**) is considered a **beautiful arrangement** if for every `i` (`1 <= i <= n`), **either** of the following is true:\n\n*   `perm[i]` is divisible by `i`.\n*   `i` is divisible by `perm[i]`.\n\nGiven an integer `n`, return _the **number** of the **beautiful arrangements** that you can construct_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 2\n**Explanation:** \nThe first beautiful arrangement is \\[1,2\\]:\n    - perm\\[1\\] = 1 is divisible by i = 1\n    - perm\\[2\\] = 2 is divisible by i = 2\nThe second beautiful arrangement is \\[2,1\\]:\n    - perm\\[1\\] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm\\[2\\] = 1\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 15`",
          "output": "def countArrangement(n: int) -> int:\n    def helper(idx: int, visited: List[bool], n: int) -> int:\n        if idx > n:\n            return 1\n\n        count = 0\n        for i in range(1, n+1):\n            if not visited[i] and (idx % i == 0 or i % idx == 0):\n                visited[i] = True\n                count += helper(idx+1, visited, n)\n                visited[i] = False\n\n        return count\n\n    visited = [False] * (n+1)\n    return helper(1, visited, n)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of **distinct** strings `words`, return _the minimal possible **abbreviations** for every word_.\n\nThe following are the rules for a string abbreviation:\n\n1.  The **initial** abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.\n2.  If more than one word shares the **same** abbreviation, then perform the following operation:\n    *   **Increase** the prefix (characters in the first part) of each of their abbreviations by `1`.\n        *   For example, say you start with the words `[ \"abcdef \", \"abndef \"]` both initially abbreviated as `\"a4f \"`. Then, a sequence of operations would be `[ \"a4f \", \"a4f \"]` -> `[ \"ab3f \", \"ab3f \"]` -> `[ \"abc2f \", \"abn2f \"]`.\n    *   This operation is repeated until every abbreviation is **unique**.\n3.  At the end, if an abbreviation did not make a word shorter, then keep it as the original word.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"\\]\n**Output:** \\[\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"\\]\n\n**Example 2:**\n\n**Input:** words = \\[\"aa\",\"aaa\"\\]\n**Output:** \\[\"aa\",\"aaa\"\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 400`\n*   `2 <= words[i].length <= 400`\n*   `words[i]` consists of lowercase English letters.\n*   All the strings of `words` are **unique**.",
          "output": "def wordsAbbreviation(words):\n    def abbrev(word, k):\n        return word[:k+1] + str(len(word) - k - 2) + word[-1] if k < len(word) - 2 else word\n\n    n = len(words)\n    abbr = [abbrev(word, 1) for word in words]\n    prefix_len = [1] * n\n\n    for i in range(n):\n        while abbr.count(abbr[i]) > 1:\n            groups = {}\n            for j in range(i + 1, n):\n                if abbr[i] == abbr[j]:\n                    if abbr[j] not in groups:\n                        groups[abbr[j]] = []\n                    groups[abbr[j]].append(j)\n            for group_members in groups.values():\n                for j in group_members:\n                    abbr[j] = abbrev(words[j], prefix_len[j] + 1)\n                    prefix_len[j] += 1\n            abbr[i] = abbrev(words[i], prefix_len[i] + 1)\n            prefix_len[i] += 1\n\n    return abbr\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `head` of a linked list, and an integer `k`.\n\nReturn _the head of the linked list after **swapping** the values of the_ `kth` _node from the beginning and the_ `kth` _node from the end (the list is **1-indexed**)._\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\], k = 2\n**Output:** \\[1,4,3,2,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[7,9,6,6,7,8,3,0,9,5\\], k = 5\n**Output:** \\[7,9,6,6,8,7,3,0,9,5\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is `n`.\n*   `1 <= k <= n <= 105`\n*   `0 <= Node.val <= 100`We can transform the linked list to an array this should ease things up After transforming the linked list to an array it becomes as easy as swapping two integers in an array then rebuilding the linked list",
          "output": "def min_operations_max_profit(customers, boarding_cost, running_cost):\n    rotations = waiting = on_board = profit = max_profit = max_rotations = 0\n    while customers or waiting > 0:\n        if customers:\n            waiting += customers.pop(0)\n            \n        on_board = min(waiting, 4)\n        waiting -= on_board\n        profit += on_board * boarding_cost - running_cost\n        rotations += 1\n        \n        if profit > max_profit:\n            max_profit = profit\n            max_rotations = rotations\n            \n    return max_rotations if max_profit > 0 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: Let's play the minesweeper game ([Wikipedia](https://en.wikipedia.org/wiki/Minesweeper_(video_game)), [online game](http://minesweeperonline.com))!\n\nYou are given an `m x n` char matrix `board` representing the game board where:\n\n*   `'M'` represents an unrevealed mine,\n*   `'E'` represents an unrevealed empty square,\n*   `'B'` represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\n*   digit (`'1'` to `'8'`) represents how many mines are adjacent to this revealed square, and\n*   `'X'` represents a revealed mine.\n\nYou are also given an integer array `click` where `click = [clickr, clickc]` represents the next click position among all the unrevealed squares (`'M'` or `'E'`).\n\nReturn _the board after revealing this position according to the following rules_:\n\n1.  If a mine `'M'` is revealed, then the game is over. You should change it to `'X'`.\n2.  If an empty square `'E'` with no adjacent mines is revealed, then change it to a revealed blank `'B'` and all of its adjacent unrevealed squares should be revealed recursively.\n3.  If an empty square `'E'` with at least one adjacent mine is revealed, then change it to a digit (`'1'` to `'8'`) representing the number of adjacent mines.\n4.  Return the board when no more squares will be revealed.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \"E \", \"E \", \"E \", \"E \", \"E \"\\],\\[ \"E \", \"E \", \"M \", \"E \", \"E \"\\],\\[ \"E \", \"E \", \"E \", \"E \", \"E \"\\],\\[ \"E \", \"E \", \"E \", \"E \", \"E \"\\]\\], click = \\[3,0\\]\n**Output:** \\[\\[ \"B \", \"1 \", \"E \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"M \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"1 \", \"1 \", \"B \"\\],\\[ \"B \", \"B \", \"B \", \"B \", \"B \"\\]\\]\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \"B \", \"1 \", \"E \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"M \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"1 \", \"1 \", \"B \"\\],\\[ \"B \", \"B \", \"B \", \"B \", \"B \"\\]\\], click = \\[1,2\\]\n**Output:** \\[\\[ \"B \", \"1 \", \"E \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"X \", \"1 \", \"B \"\\],\\[ \"B \", \"1 \", \"1 \", \"1 \", \"B \"\\],\\[ \"B \", \"B \", \"B \", \"B \", \"B \"\\]\\]\n\n**Constraints:**\n\n*   `m == board.length`\n*   `n == board[i].length`\n*   `1 <= m, n <= 50`\n*   `board[i][j]` is either `'M'`, `'E'`, `'B'`, or a digit from `'1'` to `'8'`.\n*   `click.length == 2`\n*   `0 <= clickr < m`\n*   `0 <= clickc < n`\n*   `board[clickr][clickc]` is either `'M'` or `'E'`.",
          "output": "from typing import List\n\ndef reveal(board: List[List[str]], row: int, col: int, directions: List[List[int]]) -> None:\n    if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]) or board[row][col] != 'E':\n        return\n\n    mines = 0\n    for dir in directions:\n        newRow, newCol = row + dir[0], col + dir[1]\n        if newRow >= 0 and newRow < len(board) and newCol >= 0 and newCol < len(board[0]) and board[newRow][newCol] == 'M':\n            mines += 1\n\n    if mines > 0:\n        board[row][col] = str(mines)\n    else:\n        board[row][col] = 'B'\n        for dir in directions:\n            reveal(board, row + dir[0], col + dir[1], directions)\n\ndef updateBoard(board: List[List[str]], click: List[int]) -> List[List[str]]:\n    row, col = click\n\n    if board[row][col] == 'M':\n        board[row][col] = 'X'\n    else:\n        directions = [[1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1]]\n        reveal(board, row, col, directions)\n\n    return board\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a Binary Search Tree (BST), return _the minimum absolute difference between the values of any two different nodes in the tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,6,1,3\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** root = \\[1,0,48,null,null,12,49\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 104]`.\n*   `0 <= Node.val <= 105`\n\n**Note:** This question is the same as 783: [https://leetcode.com/problems/minimum-distance-between-bst-nodes/](https://leetcode.com/problems/minimum-distance-between-bst-nodes/)",
          "output": "class TreeNode:\n    def __init__(self, x: int):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:\n        result = float('inf')\n        prev = None\n\n        def inorderTraversal(node):\n            nonlocal result, prev\n            if node is None:\n                return\n            inorderTraversal(node.left)\n            if prev is not None:\n                result = min(result, node.val - prev.val)\n            prev = node\n            inorderTraversal(node.right)\n\n        inorderTraversal(root)\n        return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels, return _the number of **black** lonely pixels_.\n\nA black lonely pixel is a character `'B'` that located at a specific position where the same row and same column don't have **any other** black pixels.\n\n",
          "input": "**Example 1:**\n\n**Input:** picture = \\[\\[ \"W \", \"W \", \"B \"\\],\\[ \"W \", \"B \", \"W \"\\],\\[ \"B \", \"W \", \"W \"\\]\\]\n**Output:** 3\n**Explanation:** All the three 'B's are black lonely pixels.\n\n**Example 2:**\n\n**Input:** picture = \\[\\[ \"B \", \"B \", \"B \"\\],\\[ \"B \", \"B \", \"W \"\\],\\[ \"B \", \"B \", \"B \"\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `m == picture.length`\n*   `n == picture[i].length`\n*   `1 <= m, n <= 500`\n*   `picture[i][j]` is `'W'` or `'B'`.",
          "output": "def findLonelyPixel(picture):\n    m, n = len(picture), len(picture[0])\n    row, col = [0] * m, [0] * n\n    \n    for i in range(m):\n        for j in range(n):\n            if picture[i][j] == 'B':\n                row[i] += 1\n                col[j] += 1\n                \n    lonely = 0\n    for i in range(m):\n        for j in range(n):\n            if picture[i][j] == 'B' and row[i] == 1 and col[j] == 1:\n                lonely += 1\n                \n    return lonely\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and an integer `k`, return _the number of **unique** k-diff pairs in the array_.\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n*   `0 <= i, j < nums.length`\n*   `i != j`\n*   `nums[i] - nums[j] == k`\n\n**Notice** that `|val|` denotes the absolute value of `val`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,4,1,5\\], k = 2\n**Output:** 2\n**Explanation:** There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of **unique** pairs.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,5\\], k = 1\n**Output:** 4\n**Explanation:** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,1,5,4\\], k = 0\n**Output:** 1\n**Explanation:** There is one 0-diff pair in the array, (1, 1).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-107 <= nums[i] <= 107`\n*   `0 <= k <= 107`",
          "output": "def find_pairs(nums, k):\n    if k < 0:\n        return 0\n    starters = set()\n    occurrences = {}\n    for num in nums:\n        if num + k in occurrences:\n            starters.add(num)\n        if num - k in occurrences:\n            starters.add(num - k)\n        occurrences[num] = occurrences.get(num, 0) + 1\n    return len(starters)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels and an integer target, return _the number of **black** lonely pixels_.\n\nA black lonely pixel is a character `'B'` that located at a specific position `(r, c)` where:\n\n*   Row `r` and column `c` both contain exactly `target` black pixels.\n*   For all rows that have a black pixel at column `c`, they should be exactly the same as row `r`.\n\n",
          "input": "**Example 1:**\n\n**Input:** picture = \\[\\[ \"W \", \"B \", \"W \", \"B \", \"B \", \"W \"\\],\\[ \"W \", \"B \", \"W \", \"B \", \"B \", \"W \"\\],\\[ \"W \", \"B \", \"W \", \"B \", \"B \", \"W \"\\],\\[ \"W \", \"W \", \"B \", \"W \", \"B \", \"W \"\\]\\], target = 3\n**Output:** 6\n**Explanation:** All the green 'B' are the black pixels we need (all 'B's at column 1 and 3).\nTake 'B' at row r = 0 and column c = 1 as an example:\n - Rule 1, row r = 0 and column c = 1 both have exactly target = 3 black pixels. \n - Rule 2, the rows have black pixel at column c = 1 are row 0, row 1 and row 2. They are exactly the same as row r = 0.\n\n**Example 2:**\n\n**Input:** picture = \\[\\[ \"W \", \"W \", \"B \"\\],\\[ \"W \", \"W \", \"B \"\\],\\[ \"W \", \"W \", \"B \"\\]\\], target = 1\n**Output:** 0\n\n**Constraints:**\n\n*   `m == picture.length`\n*   `n == picture[i].length`\n*   `1 <= m, n <= 200`\n*   `picture[i][j]` is `'W'` or `'B'`.\n*   `1 <= target <= min(m, n)`",
          "output": "def findBlackPixel(picture, target):\n    m, n = len(picture), len(picture[0])\n    rows = [0] * m\n    cols = [0] * n\n    rowCounts = {}\n    for i in range(m):\n        row = \"\"\n        for j in range(n):\n            if picture[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n            row += picture[i][j]\n        if rows[i] == target:\n            rowCounts[row] = rowCounts.get(row, 0) + 1\n    ans = 0\n    for row, count in rowCounts.items():\n        if count == target:\n            for j in range(n):\n                if row[j] == 'B' and cols[j] == target:\n                    ans += count\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: > Note: This is a companion problem to the [System Design](https://leetcode.com/discuss/interview-question/system-design/) problem: [Design TinyURL](https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/).\n\nTinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`. Design a class to encode a URL and decode a tiny URL.\n\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n\nImplement the `Solution` class:\n\n*   `Solution()` Initializes the object of the system.\n*   `String encode(String longUrl)` Returns a tiny URL for the given `longUrl`.\n*   `String decode(String shortUrl)` Returns the original long URL for the given `shortUrl`. It is guaranteed that the given `shortUrl` was encoded by the same object.\n\n",
          "input": "**Example 1:**\n\n**Input:** url =  \"https://leetcode.com/problems/design-tinyurl \"\n**Output:**  \"https://leetcode.com/problems/design-tinyurl \"\n\n**Explanation:**\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.\n\n**Constraints:**\n\n*   `1 <= url.length <= 104`\n*   `url` is guranteed to be a valid URL.",
          "output": "import random\nimport string\n\nclass Solution:\n    def __init__(self):\n        self.url_map = {}\n        self.alphabet = string.ascii_letters + string.digits\n\n    def encode(self, longUrl: str) -> str:\n        key = ''.join(random.choices(self.alphabet, k=6))\n\n        while key in self.url_map:\n            key = ''.join(random.choices(self.alphabet, k=6))\n\n        self.url_map[key] = longUrl\n        return \"http://tinyurl.com/\" + key\n\n    def decode(self, shortUrl: str) -> str:\n        return self.url_map[shortUrl[-6:]]\n"
     },
     {
          "instruction": "Write python code for this problem: You need to construct a binary tree from a string consisting of parenthesis and integers.\n\nThe whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.\n\nYou always start to construct the **left** child node of the parent first if it exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"4(2(3)(1))(6(5)) \"\n**Output:** \\[4,2,6,3,1,5\\]\n\n**Example 2:**\n\n**Input:** s =  \"4(2(3)(1))(6(5)(7)) \"\n**Output:** \\[4,2,6,3,1,5,7\\]\n\n**Example 3:**\n\n**Input:** s =  \"-4(2(3)(1))(6(5)(7)) \"\n**Output:** \\[-4,2,6,3,1,5,7\\]\n\n**Constraints:**\n\n*   `0 <= s.length <= 3 * 104`\n*   `s` consists of digits, `'('`, `')'`, and `'-'` only.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def str2tree(self, s: str) -> TreeNode:\n        def str2tree_helper(idx):\n            if idx[0] >= len(s):\n                return None\n\n            sign = 1\n            if s[idx[0]] == '-':\n                sign = -1\n                idx[0] += 1\n                \n            num = 0\n            while idx[0] < len(s) and s[idx[0]].isdigit():\n                num = num * 10 + int(s[idx[0]])\n                idx[0] += 1\n\n            node = TreeNode(sign * num)\n\n            if idx[0] < len(s) and s[idx[0]] == '(':\n                idx[0] += 1\n                node.left = str2tree_helper(idx)\n                idx[0] += 1\n            if idx[0] < len(s) and s[idx[0]] == '(':\n                idx[0] += 1\n                node.right = str2tree_helper(idx)\n                idx[0] += 1\n\n            return node\n\n        idx = [0]\n        return str2tree_helper(idx)\n"
     },
     {
          "instruction": "Write python code for this problem: A [complex number](https://en.wikipedia.org/wiki/Complex_number) can be represented as a string on the form `\"**real**+**imaginary**i \"` where:\n\n*   `real` is the real part and is an integer in the range `[-100, 100]`.\n*   `imaginary` is the imaginary part and is an integer in the range `[-100, 100]`.\n*   `i2 == -1`.\n\nGiven two complex numbers `num1` and `num2` as strings, return _a string of the complex number that represents their multiplications_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num1 =  \"1+1i \", num2 =  \"1+1i \"\n**Output:**  \"0+2i \"\n**Explanation:** (1 + i) \\* (1 + i) = 1 + i2 + 2 \\* i = 2i, and you need convert it to the form of 0+2i.\n\n**Example 2:**\n\n**Input:** num1 =  \"1+-1i \", num2 =  \"1+-1i \"\n**Output:**  \"0+-2i \"\n**Explanation:** (1 - i) \\* (1 - i) = 1 + i2 - 2 \\* i = -2i, and you need convert it to the form of 0+-2i.\n\n**Constraints:**\n\n*   `num1` and `num2` are valid complex numbers.",
          "output": "def complexNumberMultiply(num1: str, num2: str) -> str:\n    real1, imag1 = map(int, num1[:-1].split('+'))\n    real2, imag2 = map(int, num2[:-1].split('+'))\n\n    real = real1 * real2 - imag1 * imag2\n    imag = real1 * imag2 + real2 * imag1\n\n    return f\"{real}+{imag}i\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\nAs a reminder, a _binary search tree_ is a tree that satisfies these constraints:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8\\]\n**Output:** \\[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8\\]\n\n**Example 2:**\n\n**Input:** root = \\[0,null,1\\]\n**Output:** \\[1,null,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-104 <= Node.val <= 104`\n*   All the values in the tree are **unique**.\n*   `root` is guaranteed to be a valid binary search tree.\n\n**Note:** This question is the same as 1038: [https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/](https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/)",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def __init__(self):\n        self.sum = 0\n\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        if root:\n            self.convertBST(root.right)\n            self.sum += root.val\n            root.val = self.sum\n            self.convertBST(root.left)\n        \n        return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of 24-hour clock time points in **\"HH:MM \"** format, return _the minimum **minutes** difference between any two time-points in the list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** timePoints = \\[\"23:59\",\"00:00\"\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** timePoints = \\[\"00:00\",\"23:59\",\"00:00\"\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `2 <= timePoints.length <= 2 * 104`\n*   `timePoints[i]` is in the format **\"HH:MM \"**.",
          "output": "def findMinDifference(timePoints):\n    timePoints.sort()\n    min_difference = float('inf')\n\n    for i in range(len(timePoints)):\n        h1, m1 = map(int, timePoints[i].split(':'))\n        h2, m2 = map(int, timePoints[(i+1)%len(timePoints)].split(':'))\n        cur_difference = abs((h1 * 60 + m1) - (h2 * 60 + m2))\n        min_difference = min(min_difference, 1440 - cur_difference if cur_difference > 720 else cur_difference)\n\n    return min_difference\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\n\nReturn _the single element that appears only once_.\n\nYour solution must run in `O(log n)` time and `O(1)` space.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,2,3,3,4,4,8,8\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** nums = \\[3,3,7,7,10,11,11\\]\n**Output:** 10\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 105`",
          "output": "def singleNonDuplicate(nums):\n    low, high = 0, len(nums) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return nums[low]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.\n\nIf there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"abcdefg\", k = 2\n**Output:** \"bacdfeg\"\n\n**Example 2:**\n\n**Input:** s = \"abcd\", k = 2\n**Output:** \"bacd\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of only lowercase English letters.\n*   `1 <= k <= 104`",
          "output": "def reverseStr(s, k):\n    chars = list(s)\n    for i in range(0, len(chars), 2 * k):\n        chars[i:i + k] = reversed(chars[i:i + k])\n    return \"\".join(chars)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` binary matrix `mat`, return _the distance of the nearest_ `0` _for each cell_.\n\nThe distance between two adjacent cells is `1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[0,0,0\\],\\[0,1,0\\],\\[0,0,0\\]\\]\n**Output:** \\[\\[0,0,0\\],\\[0,1,0\\],\\[0,0,0\\]\\]\n\n**Example 2:**\n\n**Input:** mat = \\[\\[0,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]\n**Output:** \\[\\[0,0,0\\],\\[0,1,0\\],\\[1,2,1\\]\\]\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 104`\n*   `1 <= m * n <= 104`\n*   `mat[i][j]` is either `0` or `1`.\n*   There is at least one `0` in `mat`.",
          "output": "from collections import deque\n\ndef updateMatrix(mat):\n    m, n = len(mat), len(mat[0])\n    distance = [[0 if mat[i][j] == 0 else float('inf') for j in range(n)] for i in range(m)]\n    queue = deque([(i, j) for i in range(m) for j in range(n) if mat[i][j] == 0])\n\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    while queue:\n        x, y = queue.popleft()\n        for dx, dy in directions:\n            newX, newY = x + dx, y + dy\n            if 0 <= newX < m and 0 <= newY < n and distance[newX][newY] > distance[x][y] + 1:\n                distance[newX][newY] = distance[x][y] + 1\n                queue.append((newX, newY))\n\n    return distance\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the length of the **diameter** of the tree_.\n\nThe **diameter** of a binary tree is the **length** of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.\n\nThe **length** of a path between two nodes is represented by the number of edges between them.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5\\]\n**Output:** 3\n**Explanation:** 3 is the length of the path \\[4,2,1,3\\] or \\[5,2,1,3\\].\n\n**Example 2:**\n\n**Input:** root = \\[1,2\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-100 <= Node.val <= 100`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root):\n    def _diameter_of_binary_tree(node):\n        if not node:\n            return 0, 0\n        left_height, left_diameter = _diameter_of_binary_tree(node.left)\n        right_height, right_diameter = _diameter_of_binary_tree(node.right)\n        height = 1 + max(left_height, right_height)\n        diameter = max(left_height + right_height, max(left_diameter, right_diameter))\n        return height, diameter\n\n    return _diameter_of_binary_tree(root)[1]\n"
     },
     {
          "instruction": "Write python code for this problem: During the NBA playoffs, we always set the rather strong team to play with the rather weak team, like make the rank `1` team play with the rank `nth` team, which is a good strategy to make the contest more interesting.\n\nGiven `n` teams, return _their final contest matches in the form of a string_.\n\nThe `n` teams are labeled from `1` to `n`, which represents their initial rank (i.e., Rank `1` is the strongest team and Rank `n` is the weakest team).\n\nWe will use parentheses `'('`, and `')'` and commas `','` to represent the contest team pairing. We use the parentheses for pairing and the commas for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:**  \"((1,4),(2,3)) \"\n**Explanation:**\nIn the first round, we pair the team 1 and 4, the teams 2 and 3 together, as we need to make the strong team and weak team together.\nAnd we got (1, 4),(2, 3).\nIn the second round, the winners of (1, 4) and (2, 3) need to play again to generate the final winner, so you need to add the paratheses outside them.\nAnd we got the final answer ((1,4),(2,3)).\n\n**Example 2:**\n\n**Input:** n = 8\n**Output:**  \"(((1,8),(4,5)),((2,7),(3,6))) \"\n**Explanation:**\nFirst round: (1, 8),(2, 7),(3, 6),(4, 5)\nSecond round: ((1, 8),(4, 5)),((2, 7),(3, 6))\nThird round: (((1, 8),(4, 5)),((2, 7),(3, 6)))\nSince the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).\n\n**Constraints:**\n\n*   `n == 2x` where `x` in in the range `[1, 12]`.",
          "output": "def findContestMatch(n):\n    matches = [str(i) for i in range(1, n + 1)]\n\n    while n > 1:\n        for i in range(n // 2):\n            matches[i] = \"(\" + matches[i] + \",\" + matches[n - 1 - i] + \")\"\n        n //= 2\n\n    return matches[0]\n"
     },
     {
          "instruction": "Write python code for this problem: The **boundary** of a binary tree is the concatenation of the **root**, the **left boundary**, the **leaves** ordered from left-to-right, and the **reverse order** of the **right boundary**.\n\nThe **left boundary** is the set of nodes defined by the following:\n\n*   The root node's left child is in the left boundary. If the root does not have a left child, then the left boundary is **empty**.\n*   If a node in the left boundary and has a left child, then the left child is in the left boundary.\n*   If a node is in the left boundary, has **no** left child, but has a right child, then the right child is in the left boundary.\n*   The leftmost leaf is **not** in the left boundary.\n\nThe **right boundary** is similar to the **left boundary**, except it is the right side of the root's right subtree. Again, the leaf is **not** part of the **right boundary**, and the **right boundary** is empty if the root does not have a right child.\n\nThe **leaves** are nodes that do not have any children. For this problem, the root is **not** a leaf.\n\nGiven the `root` of a binary tree, return _the values of its **boundary**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,3,4\\]\n**Output:** \\[1,3,4,2\\]\n**Explanation:**\n- The left boundary is empty because the root does not have a left child.\n- The right boundary follows the path starting from the root's right child 2 -> 4.\n  4 is a leaf, so the right boundary is \\[2\\].\n- The leaves from left to right are \\[3,4\\].\nConcatenating everything results in \\[1\\] + \\[\\] + \\[3,4\\] + \\[2\\] = \\[1,3,4,2\\].\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,4,5,6,null,null,null,7,8,9,10\\]\n**Output:** \\[1,2,4,7,8,9,10,6,3\\]\n**Explanation:**\n- The left boundary follows the path starting from the root's left child 2 -> 4.\n  4 is a leaf, so the left boundary is \\[2\\].\n- The right boundary follows the path starting from the root's right child 3 -> 6 -> 10.\n  10 is a leaf, so the right boundary is \\[3,6\\], and in reverse order is \\[6,3\\].\n- The leaves from left to right are \\[4,7,8,9,10\\].\nConcatenating everything results in \\[1\\] + \\[2\\] + \\[4,7,8,9,10\\] + \\[6,3\\] = \\[1,2,4,7,8,9,10,6,3\\].\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "class Solution:\n    def leftBoundary(self, node, boundary):\n        if not node or not (node.left or node.right):\n            return\n        boundary.append(node.val)\n        if node.left:\n            self.leftBoundary(node.left, boundary)\n        else:\n            self.leftBoundary(node.right, boundary)\n\n    def rightBoundary(self, node, boundary):\n        if not node or not (node.left or node.right):\n            return\n        if node.right:\n            self.rightBoundary(node.right, boundary)\n        else:\n            self.rightBoundary(node.left, boundary)\n        boundary.append(node.val)\n\n    def leaves(self, node, boundary):\n        if not node:\n            return\n        if not (node.left or node.right):\n            boundary.append(node.val)\n        self.leaves(node.left, boundary)\n        self.leaves(node.right, boundary)\n\n    def boundaryOfBinaryTree(self, root):\n        res = []\n        if not root:\n            return res\n        res.append(root.val)\n        self.leftBoundary(root.left, res)\n        self.leaves(root, res)\n        self.rightBoundary(root.right, res)\n        return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given several `boxes` with different colors represented by different positive numbers.\n\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points.\n\nReturn _the maximum points you can get_.\n\n",
          "input": "**Example 1:**\n\n**Input:** boxes = \\[1,3,2,2,2,3,4,3,1\\]\n**Output:** 23\n**Explanation:**\n\\[1, 3, 2, 2, 2, 3, 4, 3, 1\\] \n----> \\[1, 3, 3, 4, 3, 1\\] (3\\*3=9 points) \n----> \\[1, 3, 3, 3, 1\\] (1\\*1=1 points) \n----> \\[1, 1\\] (3\\*3=9 points) \n----> \\[\\] (2\\*2=4 points)\n\n**Example 2:**\n\n**Input:** boxes = \\[1,1,1\\]\n**Output:** 9\n\n**Example 3:**\n\n**Input:** boxes = \\[1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= boxes.length <= 100`\n*   `1 <= boxes[i] <= 100`",
          "output": "def removeBoxes(boxes):\n    def dfs(l, r, k):\n        if l > r: return 0\n        if dp[l][r][k] != 0: return dp[l][r][k]\n\n        while r > l and boxes[r] == boxes[r - 1]:\n            r -= 1\n            k += 1\n            \n        dp[l][r][k] = (k + 1) * (k + 1) + dfs(l, r - 1, 0)\n\n        for i in range(l, r):\n            if boxes[i] == boxes[r]:\n                dp[l][r][k] = max(dp[l][r][k], dfs(l, i, k + 1) + dfs(i + 1, r - 1, 0))\n                \n        return dp[l][r][k]\n\n    dp = [[[0] * 100 for _ in xrange(100)] for _ in xrange(100)]\n    return dfs(0, len(boxes) - 1, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`.\n\nA **province** is a group of directly or indirectly connected cities and no other cities outside of the group.\n\nYou are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise.\n\nReturn _the total number of **provinces**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** isConnected = \\[\\[1,1,0\\],\\[1,1,0\\],\\[0,0,1\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** isConnected = \\[\\[1,0,0\\],\\[0,1,0\\],\\[0,0,1\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= n <= 200`\n*   `n == isConnected.length`\n*   `n == isConnected[i].length`\n*   `isConnected[i][j]` is `1` or `0`.\n*   `isConnected[i][i] == 1`\n*   `isConnected[i][j] == isConnected[j][i]`",
          "output": "def findCircleNum(isConnected):\n    def dfs(isConnected, visited, i):\n        visited[i] = True\n        for j in range(len(isConnected)):\n            if isConnected[i][j] == 1 and not visited[j]:\n                dfs(isConnected, visited, j)\n\n    provinces = 0\n    visited = [False] * len(isConnected)\n    for i in range(len(isConnected)):\n        if not visited[i]:\n            dfs(isConnected, visited, i)\n            provinces += 1\n    return provinces\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of length `n`, return `true` if there is a triplet `(i, j, k)` which satisfies the following conditions:\n\n*   `0 < i, i + 1 < j, j + 1 < k < n - 1`\n*   The sum of subarrays `(0, i - 1)`, `(i + 1, j - 1)`, `(j + 1, k - 1)` and `(k + 1, n - 1)` is equal.\n\nA subarray `(l, r)` represents a slice of the original array starting from the element indexed `l` to the element indexed `r`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,1,2,1,2,1\\]\n**Output:** true\n**Explanation:**\ni = 1, j = 3, k = 5. \nsum(0, i - 1) = sum(0, 0) = 1\nsum(i + 1, j - 1) = sum(2, 2) = 1\nsum(j + 1, k - 1) = sum(4, 4) = 1\nsum(k + 1, n - 1) = sum(6, 6) = 1\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,1,2,1,2,1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 2000`\n*   `-106 <= nums[i] <= 106`",
          "output": "def find_triplet_equal_sum(nums):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    for i in range(1, n - 2):\n        for j in range(i + 2, n - 1):\n            for k in range(j + 2, n):\n                s1 = prefix_sum[i]\n                s2 = prefix_sum[j] - prefix_sum[i + 1]\n                s3 = prefix_sum[k] - prefix_sum[j + 1]\n                s4 = prefix_sum[n] - prefix_sum[k + 1]\n                if s1 == s2 == s3 == s4:\n                    return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the length of the longest consecutive path in the tree_.\n\nA consecutive path is a path where the values of the consecutive nodes in the path differ by one. This path can be either increasing or decreasing.\n\n*   For example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid.\n\nOn the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3\\]\n**Output:** 2\n**Explanation:** The longest consecutive path is \\[1, 2\\] or \\[2, 1\\].\n\n**Example 2:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** 3\n**Explanation:** The longest consecutive path is \\[1, 2, 3\\] or \\[3, 2, 1\\].\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 3 * 104]`.\n*   `-3 * 104 <= Node.val <= 3 * 104`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef longest_consecutive(root: TreeNode) -> int:\n    def longest_consecutive_path_util(node, max_length):\n        if not node:\n            return 0\n        left = longest_consecutive_path_util(node.left, max_length) + 1\n        right = longest_consecutive_path_util(node.right, max_length) + 1\n        if node.left and node.left.val != node.val + 1:\n            left = 1\n        if node.right and node.right.val != node.val + 1:\n            right = 1\n        length = max(left, right)\n        max_length[0] = max(max_length[0], left + right - 1)\n        return length\n\n    max_length = [0]\n    longest_consecutive_path_util(root, max_length)\n    return max_length[0]\n"
     },
     {
          "instruction": "Write python code for this problem: You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell.\n\nYou are given an `m x n` character matrix, `grid`, of these different types of cells:\n\n*   `'*'` is your location. There is **exactly one** `'*'` cell.\n*   `'#'` is a food cell. There may be **multiple** food cells.\n*   `'O'` is free space, and you can travel through these cells.\n*   `'X'` is an obstacle, and you cannot travel through these cells.\n\nYou can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.\n\nReturn _the **length** of the shortest path for you to reach **any** food cell_. If there is no path for you to reach food, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"\\* \", \"O \", \"O \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"# \", \"O \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\]\\]\n**Output:** 3\n**Explanation:** It takes 3 steps to reach the food.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[ \"X \", \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"\\* \", \"X \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"X \", \"# \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \", \"X \"\\]\\]\n**Output:** -1\n**Explanation:** It is not possible to reach the food.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\],\\[ \"X \", \"\\* \", \"O \", \"X \", \"O \", \"# \", \"O \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"X \", \"O \", \"O \", \"X \", \"X \"\\],\\[ \"X \", \"O \", \"O \", \"O \", \"O \", \"# \", \"O \", \"X \"\\],\\[ \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \", \"X \"\\]\\]\n**Output:** 6\n**Explanation:** There can be multiple food cells. It only takes 6 steps to reach the bottom food.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 200`\n*   `grid[row][col]` is `'*'`, `'X'`, `'O'`, or `'#'`.\n*   The `grid` contains **exactly one** `'*'`.Run BFS starting from the '*' position. Keep the current number of the steps as a state in the queue. The first time you reach a food, return the number of steps as the answer. In case the queue is empty and you still did not manage to reach a food, return -1.",
          "output": "def find_special_integer(nums):\n    for x in range(1, len(nums) + 1):\n        count = sum(1 for num in nums if num >= x)\n        if count == x:\n            return x\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n*   `'A'`: Absent.\n*   `'L'`: Late.\n*   `'P'`: Present.\n\nThe student is eligible for an attendance award if they meet **both** of the following criteria:\n\n*   The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n*   The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\nReturn `true` _if the student is eligible for an attendance award, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"PPALLP \"\n**Output:** true\n**Explanation:** The student has fewer than 2 absences and was never late 3 or more consecutive days.\n\n**Example 2:**\n\n**Input:** s =  \"PPALLL \"\n**Output:** false\n**Explanation:** The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'A'`, `'L'`, or `'P'`.",
          "output": "def checkRecord(s: str) -> bool:\n    late, absent = 0, 0\n    for c in s:\n        if c == 'A':\n            absent += 1\n            late = 0\n        elif c == 'L':\n            late += 1\n        else:\n            late = 0\n\n        if absent >= 2 or late >= 3:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n*   `'A'`: Absent.\n*   `'L'`: Late.\n*   `'P'`: Present.\n\nAny student is eligible for an attendance award if they meet **both** of the following criteria:\n\n*   The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n*   The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\nGiven an integer `n`, return _the **number** of possible attendance records of length_ `n` _that make a student eligible for an attendance award. The answer may be very large, so return it **modulo**_ `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 8\n**Explanation:** There are 8 records with length 2 that are eligible for an award:\n \"PP \",  \"AP \",  \"PA \",  \"LP \",  \"PL \",  \"AL \",  \"LA \",  \"LL \"\nOnly  \"AA \" is not eligible because there are 2 absences (there need to be fewer than 2).\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 3\n\n**Example 3:**\n\n**Input:** n = 10101\n**Output:** 183236316\n\n**Constraints:**\n\n*   `1 <= n <= 105`",
          "output": "def checkRecord(n: int) -> int:\n    M = 1000000007\n    dp = [1] * 6  # [latent state 0, latent state 1, ..., latent state 5]\n    while n:\n        next_dp = [0] * 6\n        next_dp[0] = (dp[0] + dp[1] + dp[2]) % M\n        next_dp[1] = dp[0]\n        next_dp[2] = dp[1]\n        next_dp[3] = (dp[3] + dp[4] + dp[5]) % M\n        next_dp[4] = dp[3]\n        next_dp[5] = dp[4]\n        dp = next_dp\n        n -= 1\n    return sum(dp) % M\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. The adjacent integers in `nums` will perform the float division.\n\n*   For example, for `nums = [2,3,4]`, we will evaluate the expression `\"2/3/4 \"`.\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\n\nReturn _the corresponding expression that has the maximum value in string format_.\n\n**Note:** your expression should not contain redundant parenthesis.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1000,100,10,2\\]\n**Output:**  \"1000/(100/10/2) \"\n**Explanation:** 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in  \"1000/(**(**100/10**)**/2) \" are redundant since they do not influence the operation priority.\nSo you should return  \"1000/(100/10/2) \".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,4\\]\n**Output:**  \"2/(3/4) \"\n**Explanation:** (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667\n\n**Constraints:**\n\n*   `1 <= nums.length <= 10`\n*   `2 <= nums[i] <= 1000`\n*   There is only one optimal division for the given input.",
          "output": "def optimal_division(nums):\n    n = len(nums)\n    if n == 1:\n        return str(nums[0])\n    if n == 2:\n        return str(nums[0]) + '/' + str(nums[1])\n    res = str(nums[0]) + '/('\n    for i in range(1, n - 1):\n        res += str(nums[i]) + '/'\n    res += str(nums[n - 1]) + ')'\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: There is a rectangular brick wall in front of you with `n` rows of bricks. The `ith` row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\n\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\n\nGiven the 2D array `wall` that contains the information about the wall, return _the minimum number of crossed bricks after drawing such a vertical line_.\n\n",
          "input": "**Example 1:**\n\n**Input:** wall = \\[\\[1,2,2,1\\],\\[3,1,2\\],\\[1,3,2\\],\\[2,4\\],\\[3,1,2\\],\\[1,3,1,1\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** wall = \\[\\[1\\],\\[1\\],\\[1\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `n == wall.length`\n*   `1 <= n <= 104`\n*   `1 <= wall[i].length <= 104`\n*   `1 <= sum(wall[i].length) <= 2 * 104`\n*   `sum(wall[i])` is the same for each row `i`.\n*   `1 <= wall[i][j] <= 231 - 1`",
          "output": "from collections import defaultdict\n\ndef least_bricks(wall):\n    edge_count = defaultdict(int)\n    max_count = 0\n\n    for row in wall:\n        edge_position = 0\n        for i in range(len(row) - 1):\n            edge_position += row[i]\n            edge_count[edge_position] += 1\n            max_count = max(max_count, edge_count[edge_position])\n\n    return len(wall) - max_count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `strs`. You could concatenate these strings together into a loop, where for each string, you could choose to reverse it or not. Among all the possible loops\n\nReturn _the lexicographically largest string after cutting the loop, which will make the looped string into a regular one_.\n\nSpecifically, to find the lexicographically largest string, you need to experience two phases:\n\n1.  Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.\n2.  Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint.\n\nAnd your job is to find the lexicographically largest one among all the possible regular strings.\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[ \"abc \", \"xyz \"\\]\n**Output:**  \"zyxcba \"\n**Explanation:** You can get the looped string  \"-abcxyz- \",  \"-abczyx- \",  \"-cbaxyz- \",  \"-cbazyx- \", where '-' represents the looped status. \nThe answer string came from the fourth looped one, where you could cut from the middle character 'a' and get  \"zyxcba \".\n\n**Example 2:**\n\n**Input:** strs = \\[ \"abc \"\\]\n**Output:**  \"cba \"\n\n**Constraints:**\n\n*   `1 <= strs.length <= 1000`\n*   `1 <= strs[i].length <= 1000`\n*   `1 <= sum(strs[i].length) <= 1000`\n*   `strs[i]` consists of lowercase English letters.",
          "output": "def splitLoopedString(strs):\n    ans = ''\n    cur = ''.join(max(s, s[::-1]) for s in strs)\n    \n    for i, s in enumerate(strs):\n        for xstr in (s, s[::-1]):\n            for j in range(len(xstr)):\n                t = xstr[j:] + cur[len(xstr):] + cur[:len(xstr)] + xstr[:j]\n                ans = max(ans, t)\n        cur = cur[len(s):] + cur[:len(s)]\n    \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer `n`, find _the smallest integer which has exactly the same digits existing in the integer_ `n` _and is greater in value than_ `n`. If no such positive integer exists, return `-1`.\n\n**Note** that the returned integer should fit in **32-bit integer**, if there is a valid answer but it does not fit in **32-bit integer**, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 12\n**Output:** 21\n\n**Example 2:**\n\n**Input:** n = 21\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`",
          "output": "from itertools import permutations\n\ndef nextGreaterElement(n: int) -> int:\n    num_str = str(n)\n    num_permutations = sorted(set(int(\"\".join(p)) for p in permutations(num_str)))\n    index = num_permutations.index(n)\n    if index + 1 < len(num_permutations) and num_permutations[index + 1] <= 2**31 - 1:\n        return num_permutations[index + 1]\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"Let's take LeetCode contest\"\n**Output:** \"s'teL ekat edoCteeL tsetnoc\"\n\n**Example 2:**\n\n**Input:** s = \"God Ding\"\n**Output:** \"doG gniD\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `s` contains printable **ASCII** characters.\n*   `s` does not contain any leading or trailing spaces.\n*   There is **at least one** word in `s`.\n*   All the words in `s` are separated by a single space.",
          "output": "def reverse_words_in_string(s: str) -> str:\n    return \" \".join(word[::-1] for word in s.split(\" \"))\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and an integer `k`, return _the total number of subarrays whose sum equals to_ `k`.\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1\\], k = 2\n**Output:** 2\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3\\], k = 3\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `-1000 <= nums[i] <= 1000`\n*   `-107 <= k <= 107`Will Brute force work here? Try to optimize it. Can we optimize it by using some extra space? What about storing sum frequencies in a hash table? Will it be useful? sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it.",
          "output": "def subarraySum(nums, k):\n    prefix_sum_frequency = {0: 1}\n    prefix_sum, result = 0, 0\n    \n    for num in nums:\n        prefix_sum += num\n        result += prefix_sum_frequency.get(prefix_sum - k, 0)\n        prefix_sum_frequency[prefix_sum] = prefix_sum_frequency.get(prefix_sum, 0) + 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` binary matrix `mat`, return _the length of the longest line of consecutive one in the matrix_.\n\nThe line could be horizontal, vertical, diagonal, or anti-diagonal.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,0,0,1\\]\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,1,1,1\\],\\[0,1,1,0\\],\\[0,0,0,1\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 104`\n*   `1 <= m * n <= 104`\n*   `mat[i][j]` is either `0` or `1`.One solution is to count ones in each direction separately and find the longest line. Don't you think  it will take too much lines of code? Is it possible to use some extra space to make the solution simple? Can we use dynamic programming to make use of intermediate results? Think of a 3D array which can be used to store the longest line obtained so far for each direction.",
          "output": "def longestLine(mat):\n    rows, cols = len(mat), len(mat[0])\n    max_length = 0\n    dp = [[[0, 0, 0, 0] for _ in range(cols)] for _ in range(rows)]\n\n    for r in range(rows):\n        for c in range(cols):\n            if mat[r][c] == 1:\n                dp[r][c][0] = dp[r - 1][c][0] + 1 if r > 0 else 1\n                dp[r][c][1] = dp[r][c - 1][1] + 1 if c > 0 else 1\n                dp[r][c][2] = dp[r - 1][c - 1][2] + 1 if r > 0 and c > 0 else 1\n                dp[r][c][3] = dp[r - 1][c + 1][3] + 1 if r > 0 and c < cols - 1 else 1\n                max_length = max(max_length, max(dp[r][c]))\n\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the sum of every tree node's **tilt**._\n\nThe **tilt** of a tree node is the **absolute difference** between the sum of all left subtree node **values** and all right subtree node **values**. If a node does not have a left child, then the sum of the left subtree node **values** is treated as `0`. The rule is similar if the node does not have a right child.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3\\]\n**Output:** 1\n**Explanation:** \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n\n**Example 2:**\n\n**Input:** root = \\[4,2,9,3,5,null,7\\]\n**Output:** 15\n**Explanation:** \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n\n**Example 3:**\n\n**Input:** root = \\[21,7,14,1,1,2,2,3,3\\]\n**Output:** 9\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-1000 <= Node.val <= 1000`Don't think too much, this is an easy problem. Take some small tree as an example. Can a parent node use the values of its child nodes? How will you implement it? May be recursion and tree traversal can help you in implementing. What about postorder traversal, using values of left and right childs?",
          "output": "def findTilt(self, root):\n    def findTiltUtil(node):\n        if not node: return 0, 0\n        \n        leftSum, leftTilt = findTiltUtil(node.left)\n        rightSum, rightTilt = findTiltUtil(node.right)\n    \n        return (node.val + leftSum + rightSum, abs(leftSum - rightSum) + leftTilt + rightTilt)\n\n    return findTiltUtil(root)[1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `n` representing an integer, return _the closest integer (not including itself), which is a palindrome_. If there is a tie, return _**the smaller one**_.\n\nThe closest is defined as the absolute difference minimized between two integers.\n\n",
          "input": "**Example 1:**\n\n**Input:** n =  \"123 \"\n**Output:**  \"121 \"\n\n**Example 2:**\n\n**Input:** n =  \"1 \"\n**Output:**  \"0 \"\n**Explanation:** 0 and 2 are the closest palindromes but we return the smallest which is 0.\n\n**Constraints:**\n\n*   `1 <= n.length <= 18`\n*   `n` consists of only digits.\n*   `n` does not have leading zeros.\n*   `n` is representing an integer in the range `[1, 1018 - 1]`.Will brute force work for this problem? Think of something else. Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible? Do we have to consider only left half or right half of the string or both? Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?",
          "output": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef closest_palindrome(n: str) -> int:\n    num = int(n)\n    left = num - 1\n    right = num + 1\n\n    while True:\n        if is_palindrome(str(left)):\n            return left\n        if is_palindrome(str(right)):\n            return right\n        left -= 1\n        right += 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of length `n` where `nums` is a permutation of the numbers in the range `[0, n - 1]`.\n\nYou should build a set `s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }` subjected to the following rule:\n\n*   The first element in `s[k]` starts with the selection of the element `nums[k]` of `index = k`.\n*   The next element in `s[k]` should be `nums[nums[k]]`, and then `nums[nums[nums[k]]]`, and so on.\n*   We stop adding right before a duplicate element occurs in `s[k]`.\n\nReturn _the longest length of a set_ `s[k]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,4,0,3,1,6,2\\]\n**Output:** 4\n**Explanation:** \nnums\\[0\\] = 5, nums\\[1\\] = 4, nums\\[2\\] = 0, nums\\[3\\] = 3, nums\\[4\\] = 1, nums\\[5\\] = 6, nums\\[6\\] = 2.\nOne of the longest sets s\\[k\\]:\ns\\[0\\] = {nums\\[0\\], nums\\[5\\], nums\\[6\\], nums\\[2\\]} = {5, 6, 2, 0}\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,2\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] < nums.length`\n*   All the values of `nums` are **unique**.",
          "output": "def arrayNesting(nums):\n    n = len(nums)\n    max_len = 0\n    for i in range(n):\n        if nums[i] != -1:\n            start = nums[i]\n            count = 0\n            while nums[start] != -1:\n                temp = start\n                start = nums[start]\n                count += 1\n                nums[temp] = -1\n            max_len = max(max_len, count)\n    return max_len\n"
     },
     {
          "instruction": "Write python code for this problem: In MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data.\n\nYou are given an `m x n` matrix `mat` and two integers `r` and `c` representing the number of rows and the number of columns of the wanted reshaped matrix.\n\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\n\nIf the `reshape` operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 1, c = 4\n**Output:** \\[\\[1,2,3,4\\]\\]\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 2, c = 4\n**Output:** \\[\\[1,2\\],\\[3,4\\]\\]\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 100`\n*   `-1000 <= mat[i][j] <= 1000`\n*   `1 <= r, c <= 300`Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one. M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices? Try to use division and modulus to convert 1-d index into 2-d indices. M[i] =>  M[i/n][i%n] Will it result in right mapping? Take some example and check this formula.",
          "output": "def matrixReshape(mat, r, c):\n    m, n = len(mat), len(mat[0])\n    if m * n != r * c:\n        return mat\n\n    reshaped = [[0] * c for _ in range(r)]\n    for i in range(m * n):\n        reshaped[i // c][i % c] = mat[i // n][i % n]\n\n    return reshaped\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s1` and `s2`, return `true` _if_ `s2` _contains a permutation of_ `s1`_, or_ `false` _otherwise_.\n\nIn other words, return `true` if one of `s1`'s permutations is the substring of `s2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"ab \", s2 =  \"eidbaooo \"\n**Output:** true\n**Explanation:** s2 contains one permutation of s1 ( \"ba \").\n\n**Example 2:**\n\n**Input:** s1 =  \"ab \", s2 =  \"eidboaoo \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 104`\n*   `s1` and `s2` consist of lowercase English letters.Obviously, brute force will result in TLE. Think of something else. How will you check whether one string is a permutation of another string? One way is to sort the string and then compare. But, Is there a better way? If one string is a permutation of another string then they must one common metric. What is that? Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies? What about hash table?  An array of size 26?",
          "output": "def checkInclusion(s1: str, s2: str) -> bool:\n    if len(s1) > len(s2): \n        return False\n    \n    s1_map = [0] * 26\n    s2_map = [0] * 26\n    \n    for i in range(len(s1)):\n        s1_map[ord(s1[i]) - ord('a')] += 1\n        s2_map[ord(s2[i]) - ord('a')] += 1\n    \n    for i in range(len(s2) - len(s1)):\n        if s1_map == s2_map: \n            return True\n        \n        s2_map[ord(s2[i]) - ord('a')] -= 1\n        s2_map[ord(s2[i + len(s1)]) - ord('a')] += 1\n\n    return s1_map == s2_map\n"
     },
     {
          "instruction": "Write python code for this problem: LeetCode wants to give one of its best employees the option to travel among `n` cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\n\nRules and restrictions:\n\n1.  You can only travel among `n` cities, represented by indexes from `0` to `n - 1`. Initially, you are in the city indexed `0` on **Monday**.\n2.  The cities are connected by flights. The flights are represented as an `n x n` matrix (not necessarily symmetrical), called `flights` representing the airline status from the city `i` to the city `j`. If there is no flight from the city `i` to the city `j`, `flights[i][j] == 0`; Otherwise, `flights[i][j] == 1`. Also, `flights[i][i] == 0` for all `i`.\n3.  You totally have `k` weeks (each week has **seven days**) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we do not consider the impact of flight time.\n4.  For each city, you can only have restricted vacation days in different weeks, given an `n x k` matrix called `days` representing this relationship. For the value of `days[i][j]`, it represents the maximum days you could take a vacation in the city `i` in the week `j`.\n5.  You could stay in a city beyond the number of vacation days, but you should work on the extra days, which will not be counted as vacation days.\n6.  If you fly from city `A` to city `B` and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city `B` in that week.\n7.  We do not consider the impact of flight hours on the calculation of vacation days.\n\nGiven the two matrices `flights` and `days`, return _the maximum vacation days you could take during_ `k` _weeks_.\n\n",
          "input": "**Example 1:**\n\n**Input:** flights = \\[\\[0,1,1\\],\\[1,0,1\\],\\[1,1,0\\]\\], days = \\[\\[1,3,1\\],\\[6,0,3\\],\\[3,3,3\\]\\]\n**Output:** 12\n**Explanation:**\nOne of the best strategies is:\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day.\n(Although you start at city 0, we could also fly to and start at other cities since it is Monday.)\n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\n3rd week : stay at city 2, and play 3 days and work 4 days.\nAns = 6 + 3 + 3 = 12.\n\n**Example 2:**\n\n**Input:** flights = \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\], days = \\[\\[1,1,1\\],\\[7,7,7\\],\\[7,7,7\\]\\]\n**Output:** 3\n**Explanation:**\nSince there are no flights that enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. \nFor each week, you only have one day to play and six days to work.\nSo the maximum number of vacation days is 3.\nAns = 1 + 1 + 1 = 3.\n\n**Example 3:**\n\n**Input:** flights = \\[\\[0,1,1\\],\\[1,0,1\\],\\[1,1,0\\]\\], days = \\[\\[7,0,0\\],\\[0,7,0\\],\\[0,0,7\\]\\]\n**Output:** 21\n**Explanation:**\nOne of the best strategies is:\n1st week : stay at city 0, and play 7 days.\n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\nAns = 7 + 7 + 7 = 21\n\n**Constraints:**\n\n*   `n == flights.length`\n*   `n == flights[i].length`\n*   `n == days.length`\n*   `k == days[i].length`\n*   `1 <= n, k <= 100`\n*   `flights[i][j]` is either `0` or `1`.\n*   `0 <= days[i][j] <= 7`First try to understand the problem carefully and then take some example and solve it on a paper. Can you interpret the given input as a graph? Which graph traversal technique is suitable here? Can we use some space to avoid redundant function calls?",
          "output": "def maxVacationDays(flights, days):\n    n = len(flights)\n    k = len(days[0])\n    memo = [[-1] * k for _ in range(n)]\n\n    def dfs(currentWeek, currentCity):\n        if currentWeek == k:\n            return 0\n        if memo[currentCity][currentWeek] != -1:\n            return memo[currentCity][currentWeek]\n\n        maxVacation = days[currentCity][currentWeek] + dfs(currentWeek + 1, currentCity)\n\n        for i in range(n):\n            if flights[currentCity][i] == 1:\n                maxVacation = max(maxVacation, days[i][currentWeek] + dfs(currentWeek + 1, i))\n\n        memo[currentCity][currentWeek] = maxVacation\n        return maxVacation\n\n    return dfs(0, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the roots of two binary trees `root` and `subRoot`, return `true` if there is a subtree of `root` with the same structure and node values of `subRoot` and `false` otherwise.\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,4,5,1,2\\], subRoot = \\[4,1,2\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[3,4,5,1,2,null,null,null,null,0\\], subRoot = \\[4,1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the `root` tree is in the range `[1, 2000]`.\n*   The number of nodes in the `subRoot` tree is in the range `[1, 1000]`.\n*   `-104 <= root.val <= 104`\n*   `-104 <= subRoot.val <= 104`Which approach is better here- recursive or iterative? If recursive approach is better, can you write recursive function with its parameters? Two trees s and t are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae? Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)",
          "output": "cript\r\nclass TreeNode {\r\n    constructor(val, left = null, right = null) {\r\n        this.val = val;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nfunction isSubtree(root, subRoot) {\r\n    if (root === null) return false;\r\n    if (isIdentical(root, subRoot)) return true;\r\n    return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);\r\n}\r\n\r\nfunction isIdentical(n1, n2) {\r\n    if (n1 === null || n2 === null) return n1 === n2;\r\n    if (n1.val !== n2.val) return false;\r\n    return isIdentical(n1.left, n2.left) && isIdentical(n1.right, n2.right);\r\n}\r\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integers `height` and `width` representing a garden of size `height x width`. You are also given:\n\n*   an array `tree` where `tree = [treer, treec]` is the position of the tree in the garden,\n*   an array `squirrel` where `squirrel = [squirrelr, squirrelc]` is the position of the squirrel in the garden,\n*   and an array `nuts` where `nuts[i] = [nutir, nutic]` is the position of the `ith` nut in the garden.\n\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn _the **minimal distance** for the squirrel to collect all the nuts and put them under the tree one by one_.\n\nThe **distance** is the number of moves.\n\n",
          "input": "**Example 1:**\n\n**Input:** height = 5, width = 7, tree = \\[2,2\\], squirrel = \\[4,4\\], nuts = \\[\\[3,0\\], \\[2,5\\]\\]\n**Output:** 12\n**Explanation:** The squirrel should go to the nut at \\[2, 5\\] first to achieve a minimal distance.\n\n**Example 2:**\n\n**Input:** height = 1, width = 3, tree = \\[0,1\\], squirrel = \\[0,0\\], nuts = \\[\\[0,2\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= height, width <= 100`\n*   `tree.length == 2`\n*   `squirrel.length == 2`\n*   `1 <= nuts.length <= 5000`\n*   `nuts[i].length == 2`\n*   `0 <= treer, squirrelr, nutir <= height`\n*   `0 <= treec, squirrelc, nutic <= width`Will Brute force solution works here? What will be its complexity? Brute force definitely won't work here. Think of some simple solution. Take some example and make some observations. Will order of nuts traversed by squirrel is important or only first nut traversed by squirrel is important? Are there some paths which squirrel have to cover in any case? If yes, what are they? Did you notice only first nut traversed by squirrel matters? Obviously squirrel will choose first nut which will result in minimum distance.",
          "output": "def minDistance(height, width, tree, squirrel, nuts):\n    totalDist = 0\n    minDiff = float(\"inf\")\n    \n    for nut in nuts:\n        treeDist = abs(tree[0] - nut[0]) + abs(tree[1] - nut[1])\n        squirrelDist = abs(squirrel[0] - nut[0]) + abs(squirrel[1] - nut[1])\n        \n        totalDist += 2 * treeDist\n        minDiff = min(minDiff, squirrelDist - treeDist)\n    \n    return totalDist + minDiff\n"
     },
     {
          "instruction": "Write python code for this problem: Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.\n\nThe doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\n\nGiven the integer array `candyType` of length `n`, return _the **maximum** number of different types of candies she can eat if she only eats_ `n / 2` _of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** candyType = \\[1,1,2,2,3,3\\]\n**Output:** 3\n**Explanation:** Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n\n**Example 2:**\n\n**Input:** candyType = \\[1,1,2,3\\]\n**Output:** 2\n**Explanation:** Alice can only eat 4 / 2 = 2 candies. Whether she eats types \\[1,2\\], \\[1,3\\], or \\[2,3\\], she still can only eat 2 different types.\n\n**Example 3:**\n\n**Input:** candyType = \\[6,6,6,6\\]\n**Output:** 1\n**Explanation:** Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n\n**Constraints:**\n\n*   `n == candyType.length`\n*   `2 <= n <= 104`\n*   `n` is even.\n*   `-105 <= candyType[i] <= 105`To maximize the number of kinds of candies, we should try to distribute candies such that sister will gain all kinds. What is the upper limit of the number of kinds of candies sister will gain? Remember candies are to distributed equally. Which data structure is the most suitable for finding the number of kinds of candies? Will hashset solves the problem? Inserting all candies kind in the hashset and then checking its size with upper limit.",
          "output": "def maxNumberOfCandies(candyType):\n    uniqueCandies = set(candyType)\n    return min(len(uniqueCandies), len(candyType) // 2)\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `m x n` grid with a ball. The ball is initially at the position `[startRow, startColumn]`. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply **at most** `maxMove` moves to the ball.\n\nGiven the five integers `m`, `n`, `maxMove`, `startRow`, `startColumn`, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\n**Output:** 6\n\n**Example 2:**\n\n**Input:** m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\n**Output:** 12\n\n**Constraints:**\n\n*   `1 <= m, n <= 50`\n*   `0 <= maxMove <= 50`\n*   `0 <= startRow < m`\n*   `0 <= startColumn < n`Is traversing every path feasible? There are many possible paths for a small matrix. Try to optimize it. Can we use some space to store the number of paths and update them after every move? One obvious thing: the ball will go out of the boundary only by crossing it. Also, there is only one possible way the ball can go out of the boundary from the boundary cell except for corner cells. From the corner cell, the ball can go out in two different ways.\r\n\r\nCan you use this thing to solve the problem?",
          "output": "def findPaths(m, n, maxMove, startRow, startColumn):               \n    MOD = 10**9 + 7                     \n    dp = [[[0]* n for _ in range(m)] for _ in range(maxMove + 1)]\n    moves = ((-1, 0), (1, 0), (0, -1), (0, 1))\n\n    for k in range(1, maxMove + 1):                                \n        for i in range(m):                                         \n            for j in range(n):                                           \n                for move in moves:              \n                    ni, nj = i + move[0], j + move[1]\n                    if ni < 0 or ni >= m or nj < 0 or nj >= n:                                 \n                        dp[k][i][j] = (dp[k][i][j] + 1) % MOD          \n                    else:\n                        dp[k][i][j] = (dp[k][i][j] + dp[k - 1][ni][nj]) % MOD\n\n    return dp[maxMove][startRow][startColumn]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, you need to find one **continuous subarray** that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\n\nReturn _the shortest such subarray and output its length_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,6,4,8,10,9,15\\]\n**Output:** 5\n**Explanation:** You need to sort \\[6, 4, 8, 10, 9\\] in ascending order to make the whole array sorted in ascending order.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 0\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-105 <= nums[i] <= 105`\n\n**Follow up:** Can you solve it in `O(n)` time complexity?",
          "output": "def findUnsortedSubarray(nums):\n    sorted_nums = sorted(nums)\n    start, end = 0, len(nums) - 1\n    while start < len(nums) and nums[start] == sorted_nums[start]:\n        start += 1\n    while end > start and nums[end] == sorted_nums[end]:\n        end -= 1\n    return end - start + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` processes forming a rooted tree structure. You are given two integer arrays `pid` and `ppid`, where `pid[i]` is the ID of the `ith` process and `ppid[i]` is the ID of the `ith` process's parent process.\n\nEach process has only **one parent process** but may have multiple children processes. Only one process has `ppid[i] = 0`, which means this process has **no parent process** (the root of the tree).\n\nWhen a process is **killed**, all of its children processes will also be killed.\n\nGiven an integer `kill` representing the ID of a process you want to kill, return _a list of the IDs of the processes that will be killed. You may return the answer in **any order**._\n\n",
          "input": "**Example 1:**\n\n**Input:** pid = \\[1,3,10,5\\], ppid = \\[3,0,5,3\\], kill = 5\n**Output:** \\[5,10\\]\n**Explanation:** The processes colored in red are the processes that should be killed.\n\n**Example 2:**\n\n**Input:** pid = \\[1\\], ppid = \\[0\\], kill = 1\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   `n == pid.length`\n*   `n == ppid.length`\n*   `1 <= n <= 5 * 104`\n*   `1 <= pid[i] <= 5 * 104`\n*   `0 <= ppid[i] <= 5 * 104`\n*   Only one process has no parent.\n*   All the values of `pid` are **unique**.\n*   `kill` is **guaranteed** to be in `pid`.",
          "output": "from collections import defaultdict\n\ndef killProcess(pid, ppid, kill):\n    children = defaultdict(list)\n    for i in range(len(pid)):\n        children[ppid[i]].append(pid[i])\n\n    def dfs(id, killed):\n        killed.append(id)\n        for child in children[id]:\n            dfs(child, killed)\n\n    killed = []\n    dfs(kill, killed)\n    return killed\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `word1` and `word2`, return _the minimum number of **steps** required to make_ `word1` _and_ `word2` _the same_.\n\nIn one **step**, you can delete exactly one character in either string.\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 =  \"sea \", word2 =  \"eat \"\n**Output:** 2\n**Explanation:** You need one step to make  \"sea \" to  \"ea \" and another step to make  \"eat \" to  \"ea \".\n\n**Example 2:**\n\n**Input:** word1 =  \"leetcode \", word2 =  \"etco \"\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 500`\n*   `word1` and `word2` consist of only lowercase English letters.",
          "output": "def minDistance(word1, word2):\n    m, n = len(word1), len(word2)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = i + j\n            elif word1[i-1] == word2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `trees` where `trees[i] = [xi, yi]` represents the location of a tree in the garden.\n\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if **all the trees are enclosed**.\n\nReturn _the coordinates of trees that are exactly located on the fence perimeter_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** trees = \\[\\[1,1\\],\\[2,2\\],\\[2,0\\],\\[2,4\\],\\[3,3\\],\\[4,2\\]\\]\n**Output:** \\[\\[1,1\\],\\[2,0\\],\\[4,2\\],\\[3,3\\],\\[2,4\\]\\]\n**Explanation:** All the trees will be on the perimeter of the fence except the tree at \\[2, 2\\], which will be inside the fence.\n\n**Example 2:**\n\n**Input:** trees = \\[\\[1,2\\],\\[2,2\\],\\[4,2\\]\\]\n**Output:** \\[\\[4,2\\],\\[2,2\\],\\[1,2\\]\\]\n**Explanation:** The fence forms a line that passes through all the trees.\n\n**Constraints:**\n\n*   `1 <= trees.length <= 3000`\n*   `trees[i].length == 2`\n*   `0 <= xi, yi <= 100`\n*   All the given positions are **unique**.",
          "output": "def cross_product(p, q, r):\n    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n\ndef fence(trees):\n    trees.sort(key=lambda p: (p[0], p[1]))\n    hull = []\n    for p in trees:\n        while len(hull) >= 2 and cross_product(hull[-2], hull[-1], p) > 0:\n            hull.pop()\n        hull.append(p)\n\n    for p in reversed(trees):\n        while len(hull) >= 2 and cross_product(hull[-2], hull[-1], p) > 0:\n            hull.pop()\n        hull.append(p)\n    \n    return hull\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure that simulates an in-memory file system.\n\nImplement the FileSystem class:\n\n*   `FileSystem()` Initializes the object of the system.\n*   `List ls(String path)`\n    \n    *   If `path` is a file path, returns a list that only contains this file's name.\n    *   If `path` is a directory path, returns the list of file and directory names **in this directory**.\n    \n    The answer should in **lexicographic order**.\n*   `void mkdir(String path)` Makes a new directory according to the given `path`. The given directory path does not exist. If the middle directories in the path do not exist, you should create them as well.\n*   `void addContentToFile(String filePath, String content)`\n    *   If `filePath` does not exist, creates that file containing given `content`.\n    *   If `filePath` already exists, appends the given `content` to original content.\n*   `String readContentFromFile(String filePath)` Returns the content in the file at `filePath`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"FileSystem \",  \"ls \",  \"mkdir \",  \"addContentToFile \",  \"ls \",  \"readContentFromFile \"\\]\n\\[\\[\\], \\[ \"/ \"\\], \\[ \"/a/b/c \"\\], \\[ \"/a/b/c/d \",  \"hello \"\\], \\[ \"/ \"\\], \\[ \"/a/b/c/d \"\\]\\]\n**Output**\n\\[null, \\[\\], null, null, \\[ \"a \"\\],  \"hello \"\\]\n\n**Explanation**\nFileSystem fileSystem = new FileSystem();\nfileSystem.ls( \"/ \");                         // return \\[\\]\nfileSystem.mkdir( \"/a/b/c \");\nfileSystem.addContentToFile( \"/a/b/c/d \",  \"hello \");\nfileSystem.ls( \"/ \");                         // return \\[ \"a \"\\]\nfileSystem.readContentFromFile( \"/a/b/c/d \"); // return  \"hello \"\n\n**Constraints:**\n\n*   `1 <= path.length, filePath.length <= 100`\n*   `path` and `filePath` are absolute paths which begin with `'/'` and do not end with `'/'` except that the path is just `\"/ \"`.\n*   You can assume that all directory names and file names only contain lowercase letters, and the same names will not exist in the same directory.\n*   You can assume that all operations will be passed valid parameters, and users will not attempt to retrieve file content or list a directory or file that does not exist.\n*   `1 <= content.length <= 50`\n*   At most `300` calls will be made to `ls`, `mkdir`, `addContentToFile`, and `readContentFromFile`.",
          "output": "class FileSystem:\n    class Node:\n        def __init__(self):\n            self.is_file = False\n            self.content = \"\"\n            self.children = {}\n\n    def __init__(self):\n        self.root = self.Node()\n\n    def ls(self, path: str):\n        node = self.root\n        path_parts = self.split_path(path)\n\n        for part in path_parts:\n            node = node.children[part]\n\n        if node.is_file:\n            return path_parts[-1:]\n        else:\n            return sorted(node.children.keys())\n\n    def mkdir(self, path: str):\n        node = self.root\n        path_parts = self.split_path(path)\n\n        for part in path_parts:\n            if part not in node.children:\n                node.children[part] = self.Node()\n            node = node.children[part]\n\n    def addContentToFile(self, filePath: str, content: str):\n        node = self.root\n        path_parts = self.split_path(filePath)\n\n        for part in path_parts:\n            if part not in node.children:\n                node.children[part] = self.Node()\n            node = node.children[part]\n\n        node.is_file = True\n        node.content += content\n\n    def readContentFromFile(self, filePath: str) -> str:\n        node = self.root\n        path_parts = self.split_path(filePath)\n\n        for part in path_parts:\n            node = node.children[part]\n\n        return node.content\n\n    @staticmethod\n    def split_path(path: str):\n        return [part for part in path.split(\"/\") if part]\n\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\n\nA code snippet is valid if all the following rules hold:\n\n1.  The code must be wrapped in a **valid closed tag**. Otherwise, the code is invalid.\n2.  A **closed tag** (not necessarily valid) has exactly the following format : `TAG_CONTENT`. Among them, is the start tag, and is the end tag. The TAG\\_NAME in start and end tags should be the same. A closed tag is **valid** if and only if the TAG\\_NAME and TAG\\_CONTENT are valid.\n3.  A **valid** `TAG_NAME` only contain **upper-case letters**, and has length in range \\[1,9\\]. Otherwise, the `TAG_NAME` is **invalid**.\n4.  A **valid** `TAG_CONTENT` may contain other **valid closed tags**, **cdata** and any characters (see note1) **EXCEPT** unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG\\_NAME. Otherwise, the `TAG_CONTENT` is **invalid**.\n5.  A start tag is unmatched if no end tag exists with the same TAG\\_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n6.  A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or ``, all the subsequent characters until the next `>` should be parsed as TAG_NAME (not necessarily valid).``\n``` *   The cdata has the following format : . The range of `CDATA_CONTENT` is defined as the characters between ``and the **first subsequent** `]]>`.`` ``*   `CDATA_CONTENT` may contain **any characters**. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as **regular characters**.`` ```\n\n``` ``  ",
          "input": "**Example 1:**  **Input:** code =  \"  This is the first line ]]>   \" **Output:** true **Explanation:**  The code is wrapped in a closed tag :    and   .  The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata.  Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag. So TAG_CONTENT is valid, and then the code is valid. Thus return true.  **Example 2:**  **Input:** code =  \"  >>  ![cdata[]] ]>]]>]]>>]   \" **Output:** true **Explanation:** We first separate the code into : start_tag|tag_content|end_tag. start_tag -> ** \"**   **\"** end_tag -> ** \"**   **\"** tag_content could also be separated into : text1|cdata|text2. text1 -> ** \">>  ![cdata[]]  \"** cdata -> ** \"]>]]> \"**, where the CDATA_CONTENT is ** \"**  **]> \"** text2 -> ** \"]]>>] \"** The reason why start_tag is NOT ** \"**  **>> \"** is because of the rule 6. The reason why cdata is NOT ** \"]>]]>]]> \"** is because of the rule 7.  **Example 3:**  **Input:** code =  \"    \" **Output:** false **Explanation:** Unbalanced. If  \" \" is closed, then  \" **\" must be unmatched, and vice versa.**  **  **Constraints:**  *   `1 <= code.length <= 500` *   `code` consists of English letters, digits, `'<'`, `'>'`, `'/'`, `'!'`, `'['`, `']'`, `'.'`, and `' '`.  **`` ```",
          "output": "def is_valid(code, i):\n    if i >= len(code) or code[i] != '<':\n        return False, i\n    i += 1\n    name_start = i\n    while i < len(code) and code[i].isupper():\n        i += 1\n    name_len = i - name_start\n    if name_len < 1 or name_len > 9 or code[i] != '>':\n        return False, i\n    i += 1\n\n    while i < len(code) and code[i] != '<':\n        i += 1\n    if i + 2 + name_len >= len(code) or code[i:i + 2 + name_len] != '</' + code[name_start:i] + '>':\n        return False, i\n    return True, i + 2 + name_len\n\ndef validate_code_snippet(code):\n    is_valid_code, i = is_valid(code, 0)\n    return is_valid_code and i == len(code)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `expression` representing an expression of fraction addition and subtraction, return the calculation result in string format.\n\nThe final result should be an [irreducible fraction](https://en.wikipedia.org/wiki/Irreducible_fraction). If your final result is an integer, change it to the format of a fraction that has a denominator `1`. So in this case, `2` should be converted to `2/1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"-1/2+1/2 \"\n**Output:**  \"0/1 \"\n\n**Example 2:**\n\n**Input:** expression =  \"-1/2+1/2+1/3 \"\n**Output:**  \"1/3 \"\n\n**Example 3:**\n\n**Input:** expression =  \"1/3-1/2 \"\n**Output:**  \"-1/6 \"\n\n**Constraints:**\n\n*   The input string only contains `'0'` to `'9'`, `'/'`, `'+'` and `'-'`. So does the output.\n*   Each fraction (input and output) has the format `\u00b1numerator/denominator`. If the first input fraction or the output is positive, then `'+'` will be omitted.\n*   The input only contains valid **irreducible fractions**, where the **numerator** and **denominator** of each fraction will always be in the range `[1, 10]`. If the denominator is `1`, it means this fraction is actually an integer in a fraction format defined above.\n*   The number of given fractions will be in the range `[1, 10]`.\n*   The numerator and denominator of the **final result** are guaranteed to be valid and in the range of **32-bit** int.",
          "output": "from fractions import Fraction\n\ndef fractionAddition(expression: str) -> str:\n    fractions = expression.replace('+', ' +').replace('-', ' -').split()\n    result = sum(Fraction(fraction) for fraction in fractions)\n    return f\"{result.numerator}/{result.denominator}\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` _if the four points construct a square_.\n\nThe coordinate of a point `pi` is represented as `[xi, yi]`. The input is **not** given in any order.\n\nA **valid square** has four equal sides with positive length and four equal angles (90-degree angles).\n\n",
          "input": "**Example 1:**\n\n**Input:** p1 = \\[0,0\\], p2 = \\[1,1\\], p3 = \\[1,0\\], p4 = \\[0,1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** p1 = \\[0,0\\], p2 = \\[1,1\\], p3 = \\[1,0\\], p4 = \\[0,12\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** p1 = \\[1,0\\], p2 = \\[-1,0\\], p3 = \\[0,1\\], p4 = \\[0,-1\\]\n**Output:** true\n\n**Constraints:**\n\n*   `p1.length == p2.length == p3.length == p4.length == 2`\n*   `-104 <= xi, yi <= 104`",
          "output": "def validSquare(p1, p2, p3, p4):\n    def dist_sq(p, q):\n        return (p[0] - q[0])**2 + (p[1] - q[1])**2\n\n    points = [p1, p2, p3, p4]\n    dists = set()\n\n    for i in range(4):\n        for j in range(i + 1, 4):\n            dists.add(dist_sq(points[i], points[j]))\n\n    return len(dists) == 2 and 0 not in dists\n"
     },
     {
          "instruction": "Write python code for this problem: We define a harmonious array as an array where the difference between its maximum value and its minimum value is **exactly** `1`.\n\nGiven an integer array `nums`, return _the length of its longest harmonious subsequence among all its possible subsequences_.\n\nA **subsequence** of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,2,2,5,2,3,7\\]\n**Output:** 5\n**Explanation:** The longest harmonious subsequence is \\[3,2,2,2,3\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1,1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `-109 <= nums[i] <= 109`",
          "output": "def findLHS(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n\n    longest_sequence = 0\n    for key in count:\n        if key + 1 in count:\n            longest_sequence = max(longest_sequence, count[key] + count[key + 1])\n\n    return longest_sequence\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.\n\nCount and return _the number of maximum integers in the matrix after performing all the operations_.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 3, n = 3, ops = \\[\\[2,2\\],\\[3,3\\]\\]\n**Output:** 4\n**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.\n\n**Example 2:**\n\n**Input:** m = 3, n = 3, ops = \\[\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\],\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\],\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\]\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** m = 3, n = 3, ops = \\[\\]\n**Output:** 9\n\n**Constraints:**\n\n*   `1 <= m, n <= 4 * 104`\n*   `0 <= ops.length <= 104`\n*   `ops[i].length == 2`\n*   `1 <= ai <= m`\n*   `1 <= bi <= n`",
          "output": "def maxCount(m: int, n: int, ops: List[List[int]]) -> int:\n    for op in ops:\n        m = min(m, op[0])\n        n = min(n, op[1])\n    return m * n\n"
     },
     {
          "instruction": "Write python code for this problem: Given two arrays of strings `list1` and `list2`, find the **common strings with the least index sum**.\n\nA **common string** is a string that appeared in both `list1` and `list2`.\n\nA **common string with the least index sum** is a common string such that if it appeared at `list1[i]` and `list2[j]` then `i + j` should be the minimum value among all the other **common strings**.\n\nReturn _all the **common strings with the least index sum**_. Return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** list1 = \\[ \"Shogun \", \"Tapioca Express \", \"Burger King \", \"KFC \"\\], list2 = \\[ \"Piatti \", \"The Grill at Torrey Pines \", \"Hungry Hunter Steakhouse \", \"Shogun \"\\]\n**Output:** \\[ \"Shogun \"\\]\n**Explanation:** The only common string is  \"Shogun \".\n\n**Example 2:**\n\n**Input:** list1 = \\[ \"Shogun \", \"Tapioca Express \", \"Burger King \", \"KFC \"\\], list2 = \\[ \"KFC \", \"Shogun \", \"Burger King \"\\]\n**Output:** \\[ \"Shogun \"\\]\n**Explanation:** The common string with the least index sum is  \"Shogun \" with index sum = (0 + 1) = 1.\n\n**Example 3:**\n\n**Input:** list1 = \\[ \"happy \", \"sad \", \"good \"\\], list2 = \\[ \"sad \", \"happy \", \"good \"\\]\n**Output:** \\[ \"sad \", \"happy \"\\]\n**Explanation:** There are three common strings:\n \"happy \" with index sum = (0 + 1) = 1.\n \"sad \" with index sum = (1 + 0) = 1.\n \"good \" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are  \"sad \" and  \"happy \".\n\n**Constraints:**\n\n*   `1 <= list1.length, list2.length <= 1000`\n*   `1 <= list1[i].length, list2[i].length <= 30`\n*   `list1[i]` and `list2[i]` consist of spaces `' '` and English letters.\n*   All the strings of `list1` are **unique**.\n*   All the strings of `list2` are **unique**.\n*   There is at least a common string between `list1` and `list2`.",
          "output": "from typing import List\n\ndef findRestaurant(list1: List[str], list2: List[str]) -> List[str]:\n    restaurantMap = {restaurant: i for i, restaurant in enumerate(list1)}\n\n    minSum = float(\"inf\")\n    result = []\n    for j, restaurant in enumerate(list2):\n        if restaurant in restaurantMap:\n            totalSum = j + restaurantMap[restaurant]\n            if totalSum < minSum:\n                result = [restaurant]\n                minSum = totalSum\n            elif totalSum == minSum:\n                result.append(restaurant)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer `n`, return the number of the integers in the range `[0, n]` whose binary representations **do not** contain consecutive ones.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** 5\n**Explanation:**\nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 2\n\n**Example 3:**\n\n**Input:** n = 2\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= n <= 109`",
          "output": "def findIntegers(n: int) -> int:\n    dp = [[0, 0] for _ in range(32)]\n    dp[0][0], dp[0][1] = 1, 1\n\n    for i in range(1, 32):\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1]\n        dp[i][1] = dp[i - 1][0]\n\n    ans = 0\n    prev_bit = 0\n    for i in range(30, -1, -1):\n        if n & (1 << i):\n            ans += dp[i][0]\n            if prev_bit:\n                break\n            prev_bit = 1\n        else:\n            prev_bit = 0\n\n    return ans + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\n\nImplement the StringIterator class:\n\n*   `next()` Returns **the next character** if the original string still has uncompressed characters, otherwise returns a **white space**.\n*   `hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"StringIterator \",  \"next \",  \"next \",  \"next \",  \"next \",  \"next \",  \"next \",  \"hasNext \",  \"next \",  \"hasNext \"\\]\n\\[\\[ \"L1e2t1C1o1d1e1 \"\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null,  \"L \",  \"e \",  \"e \",  \"t \",  \"C \",  \"o \", true,  \"d \", true\\]\n\n**Explanation**\nStringIterator stringIterator = new StringIterator( \"L1e2t1C1o1d1e1 \");\nstringIterator.next(); // return  \"L \"\nstringIterator.next(); // return  \"e \"\nstringIterator.next(); // return  \"e \"\nstringIterator.next(); // return  \"t \"\nstringIterator.next(); // return  \"C \"\nstringIterator.next(); // return  \"o \"\nstringIterator.hasNext(); // return True\nstringIterator.next(); // return  \"d \"\nstringIterator.hasNext(); // return True\n\n**Constraints:**\n\n*   `1 <= compressedString.length <= 1000`\n*   `compressedString` consists of lower-case an upper-case English letters and digits.\n*   The number of a single character repetitions in `compressedString` is in the range `[1, 10^9]`\n*   At most `100` calls will be made to `next` and `hasNext`.",
          "output": "class StringIterator:\n    def __init__(self, compressedString: str):\n        self.s = compressedString\n        self.i = 0\n        self.count = 0\n        self.ch = \" \"\n    \n    def next(self) -> str:\n        if not self.hasNext():\n            return \" \"\n        if self.count == 0:\n            self.ch = self.s[self.i]\n            self.i += 1\n            while self.i < len(self.s) and self.s[self.i].isdigit():\n                self.count = self.count * 10 + int(self.s[self.i])\n                self.i += 1\n        self.count -= 1\n        return self.ch\n    \n    def hasNext(self) -> bool:\n        return self.i < len(self.s) or self.count != 0\n"
     },
     {
          "instruction": "Write python code for this problem: You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in **adjacent** plots.\n\nGiven an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return `true` _if_ `n` _new flowers can be planted in the_ `flowerbed` _without violating the no-adjacent-flowers rule and_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** flowerbed = \\[1,0,0,0,1\\], n = 1\n**Output:** true\n\n**Example 2:**\n\n**Input:** flowerbed = \\[1,0,0,0,1\\], n = 2\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= flowerbed.length <= 2 * 104`\n*   `flowerbed[i]` is `0` or `1`.\n*   There are no two adjacent flowers in `flowerbed`.\n*   `0 <= n <= flowerbed.length`",
          "output": "def canPlaceFlowers(flowerbed, n):\n    count = 0\n    for i in range(len(flowerbed)):\n        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == len(flowerbed) - 1 or flowerbed[i + 1] == 0):\n            flowerbed[i] = 1\n            count += 1\n        if count >= n:\n            return True\n    return count >= n\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.\n\nOmit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4\\]\n**Output:**  \"1(2(4))(3) \"\n**Explanation:** Originally, it needs to be  \"1(2(4)())(3()()) \", but you need to omit all the unnecessary empty parenthesis pairs. And it will be  \"1(2(4))(3) \"\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,null,4\\]\n**Output:**  \"1(2()(4))(3) \"\n**Explanation:** Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-1000 <= Node.val <= 1000`",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef tree2str(t):\n    if not t:\n        return \"\"\n    if not t.left and not t.right:\n        return str(t.val)\n    if not t.right:\n        return \"{}({})\".format(t.val, tree2str(t.left))\n    return \"{}({})({})\".format(t.val, tree2str(t.left), tree2str(t.right))\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return _all the duplicate files in the file system in terms of their paths_. You may return the answer in **any order**.\n\nA group of duplicate files consists of at least two files that have the same content.\n\nA single directory info string in the input list has the following format:\n\n*   `\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content) \"`\n\nIt means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory \"`root/d1/d2/.../dm \"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory.\n\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n\n*   `\"directory_path/file_name.txt \"`\n\n",
          "input": "**Example 1:**\n\n**Input:** paths = \\[\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"\\]\n**Output:** \\[\\[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"\\],\\[\"root/a/1.txt\",\"root/c/3.txt\"\\]\\]\n\n**Example 2:**\n\n**Input:** paths = \\[\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"\\]\n**Output:** \\[\\[\"root/a/2.txt\",\"root/c/d/4.txt\"\\],\\[\"root/a/1.txt\",\"root/c/3.txt\"\\]\\]\n\n**Constraints:**\n\n*   `1 <= paths.length <= 2 * 104`\n*   `1 <= paths[i].length <= 3000`\n*   `1 <= sum(paths[i].length) <= 5 * 105`\n*   `paths[i]` consist of English letters, digits, `'/'`, `'.'`, `'('`, `')'`, and `' '`.\n*   You may assume no files or directories share the same name in the same directory.\n*   You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.\n\n**Follow up:**\n\n*   Imagine you are given a real file system, how will you search files? DFS or BFS?\n*   If the file content is very large (GB level), how will you modify your solution?\n*   If you can only read the file by 1kb each time, how will you modify your solution?\n*   What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?\n*   How to make sure the duplicated files you find are not false positive?",
          "output": "from collections import defaultdict\n\ndef find_duplicate(paths):\n    content_map = defaultdict(list)\n    for path in paths:\n        parts = path.split()\n        directory = parts[0]\n        for file in parts[1:]:\n            start = file.index('(')\n            end = file.index(')')\n            content = file[start + 1:end]\n            file_path = directory + '/' + file[:start]\n            content_map[content].append(file_path)\n\n    result = [file_paths for file_paths in content_map.values() if len(file_paths) > 1]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,2,3,4\\]\n**Output:** 3\n**Explanation:** Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n\n**Example 2:**\n\n**Input:** nums = \\[4,2,3,4\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] <= 1000`",
          "output": "def triangleNumber(nums: list) -> int:\n    nums.sort()\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] > nums[k]:\n                    count += 1\n                else:\n                    break\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and an array of strings `words`.\n\nYou should add a closed pair of bold tag **and** to wrap the substrings in `s` that exist in `words`.\n\n*   If two such substrings overlap, you should wrap them together with only one pair of closed bold-tag.\n*   If two substrings wrapped by bold tags are consecutive, you should combine them.\n\nReturn `s` _after adding the bold tags_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcxyz123 \", words = \\[ \"abc \", \"123 \"\\]\n**Output:**  \"**abc**xyz**123** \"\n**Explanation:** The two strings of words are substrings of s as following:  \"abcxyz123 \".\nWe add ** before each substring and ** after each substring.\n\n**Example 2:**\n\n**Input:** s =  \"aaabbb \", words = \\[ \"aa \", \"b \"\\]\n**Output:**  \"**aaabbb** \"\n**Explanation:** \n \"aa \" appears as a substring two times:  \"aaabbb \" and  \"aaabbb \".\n \"b \" appears as a substring three times:  \"aaabbb \",  \"aaabbb \", and  \"aaabbb \".\nWe add ** before each substring and ** after each substring:  \"**a**a**a****b****b****b** \".\nSince the first two **'s overlap, we merge them:  \"**aaa****b****b****b** \".\nSince now the four **'s are consecuutive, we merge them:  \"**aaabbb** \".****\n\n****\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `0 <= words.length <= 100`\n*   `1 <= words[i].length <= 1000`\n*   `s` and `words[i]` consist of English letters and digits.\n*   All the values of `words` are **unique**.\n\n**Note:** This question is the same as 758: [https://leetcode.com/problems/bold-words-in-string/](https://leetcode.com/problems/bold-words-in-string/)\n\n****",
          "output": "def addBoldTag(s: str, words: list) -> str:\n    n = len(s)\n    marked = [False] * n\n    for word in words:\n        pos = s.find(word)\n        while pos != -1:\n            for i in range(pos, pos + len(word)):\n                marked[i] = True\n            pos = s.find(word, pos + 1)\n    result = []\n    i = 0\n    while i < n:\n        if marked[i]:\n            result.append(\"<b>\")\n            while i < n and marked[i]:\n                result.append(s[i])\n                i += 1\n            result.append(\"</b>\")\n        else:\n            result.append(s[i])\n            i += 1\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two binary trees `root1` and `root2`.\n\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\n\nReturn _the merged tree_.\n\n**Note:** The merging process must start from the root nodes of both trees.\n\n",
          "input": "**Example 1:**\n\n**Input:** root1 = \\[1,3,2,5\\], root2 = \\[2,1,3,null,4,null,7\\]\n**Output:** \\[3,4,5,5,4,null,7\\]\n\n**Example 2:**\n\n**Input:** root1 = \\[1\\], root2 = \\[1,2\\]\n**Output:** \\[2,2\\]\n\n**Constraints:**\n\n*   The number of nodes in both trees is in the range `[0, 2000]`.\n*   `-104 <= Node.val <= 104`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef merge_trees(root1: TreeNode, root2: TreeNode) -> TreeNode:\n    if root1 is None: return root2\n    if root2 is None: return root1\n\n    root1.val += root2.val\n    root1.left = merge_trees(root1.left, root2.left)\n    root1.right = merge_trees(root1.right, root2.right)\n    return root1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\n\nHowever, there is a non-negative integer `n` that represents the cooldown period between two **same tasks** (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks.\n\nReturn _the least number of units of times that the CPU will take to finish all the given tasks_.\n\n",
          "input": "**Example 1:**\n\n**Input:** tasks = \\[ \"A \", \"A \", \"A \", \"B \", \"B \", \"B \"\\], n = 2\n**Output:** 8\n**Explanation:** \nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.\n\n**Example 2:**\n\n**Input:** tasks = \\[ \"A \", \"A \", \"A \", \"B \", \"B \", \"B \"\\], n = 0\n**Output:** 6\n**Explanation:** On this case any permutation of size 6 would work since n = 0.\n\\[ \"A \", \"A \", \"A \", \"B \", \"B \", \"B \"\\]\n\\[ \"A \", \"B \", \"A \", \"B \", \"A \", \"B \"\\]\n\\[ \"B \", \"B \", \"B \", \"A \", \"A \", \"A \"\\]\n...\nAnd so on.\n\n**Example 3:**\n\n**Input:** tasks = \\[ \"A \", \"A \", \"A \", \"A \", \"A \", \"A \", \"B \", \"C \", \"D \", \"E \", \"F \", \"G \"\\], n = 2\n**Output:** 16\n**Explanation:** \nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\n\n**Constraints:**\n\n*   `1 <= task.length <= 104`\n*   `tasks[i]` is upper-case English letter.\n*   The integer `n` is in the range `[0, 100]`.",
          "output": "from collections import Counter\n\ndef least_interval(tasks, n):\n    task_freq = Counter(tasks)\n\n    max_f = max(task_freq.values())\n    max_count = sum(1 for count in task_freq.values() if count == max_f)\n\n    return max(len(tasks), (max_f - 1) * (n + 1) + max_count)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.\n\nNote that the `root` node is at depth `1`.\n\nThe adding rule is:\n\n*   Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.\n*   `cur`'s original left subtree should be the left subtree of the new left subtree root.\n*   `cur`'s original right subtree should be the right subtree of the new right subtree root.\n*   If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,6,3,1,5\\], val = 1, depth = 2\n**Output:** \\[4,1,1,2,null,null,6,3,1,5\\]\n\n**Example 2:**\n\n**Input:** root = \\[4,2,null,3,1\\], val = 1, depth = 3\n**Output:** \\[4,2,null,1,1,3,null,null,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   The depth of the tree is in the range `[1, 104]`.\n*   `-100 <= Node.val <= 100`\n*   `-105 <= val <= 105`\n*   `1 <= depth <= the depth of tree + 1`",
          "output": "def add_one_row_helper(node, val, depth, current_depth):\n    if not node:\n        return\n    if current_depth == depth - 1:\n        left = node.left\n        right = node.right\n        node.left = TreeNode(val)\n        node.left.left = left\n        node.right = TreeNode(val)\n        node.right.right = right\n    else:\n        add_one_row_helper(node.left, val, depth, current_depth + 1)\n        add_one_row_helper(node.right, val, depth, current_depth + 1)\n        \ndef add_one_row(root, val, depth):\n    if depth == 1:\n        new_root = TreeNode(val)\n        new_root.left = root\n        return new_root\n    add_one_row_helper(root, val, depth, 1)\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `m` `arrays`, where each array is sorted in **ascending order**.\n\nYou can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`.\n\nReturn _the maximum distance_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arrays = \\[\\[1,2,3\\],\\[4,5\\],\\[1,2,3\\]\\]\n**Output:** 4\n**Explanation:** One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.\n\n**Example 2:**\n\n**Input:** arrays = \\[\\[1\\],\\[1\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `m == arrays.length`\n*   `2 <= m <= 105`\n*   `1 <= arrays[i].length <= 500`\n*   `-104 <= arrays[i][j] <= 104`\n*   `arrays[i]` is sorted in **ascending order**.\n*   There will be at most `105` integers in all the arrays.",
          "output": "def maxDistance(arrays: List[List[int]]) -> int:\n    max_dist = 0\n    min_val = arrays[0][0]\n    max_val = arrays[0][-1]\n    \n    for arr in arrays[1:]:\n        max_dist = max(max_dist, max(abs(arr[-1] - min_val), abs(max_val - arr[0])))\n        min_val = min(min_val, arr[0])\n        max_val = max(max_val, arr[-1])\n        \n    return max_dist\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer num, return _the smallest positive integer_ `x` _whose multiplication of each digit equals_ `num`. If there is no answer or the answer is not fit in **32-bit** signed integer, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 48\n**Output:** 68\n\n**Example 2:**\n\n**Input:** num = 15\n**Output:** 35\n\n**Constraints:**\n\n*   `1 <= num <= 231 - 1`",
          "output": "def smallestFactorization(num: int) -> int:\n    if num == 1:\n        return 1\n    result = 0\n    factor = 1\n    for i in range(9, 1, -1):\n        while num % i == 0:\n            num //= i\n            result += i * factor\n            factor *= 10\n            if result > 2**31 - 1:\n                return 0\n    return result if num == 1 else 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, _find three numbers whose product is maximum and return the maximum product_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 6\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 24\n\n**Example 3:**\n\n**Input:** nums = \\[-1,-2,-3\\]\n**Output:** -6\n\n**Constraints:**\n\n*   `3 <= nums.length <= 104`\n*   `-1000 <= nums[i] <= 1000`",
          "output": "def maximumProduct(nums):\n    nums.sort()\n    n = len(nums)\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n"
     },
     {
          "instruction": "Write python code for this problem: For an integer array `nums`, an **inverse pair** is a pair of integers `[i, j]` where `0 <= i < j < nums.length` and `nums[i] > nums[j]`.\n\nGiven two integers n and k, return the number of different arrays consist of numbers from `1` to `n` such that there are exactly `k` **inverse pairs**. Since the answer can be huge, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 0\n**Output:** 1\n**Explanation:** Only the array \\[1,2,3\\] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\n\n**Example 2:**\n\n**Input:** n = 3, k = 1\n**Output:** 2\n**Explanation:** The array \\[1,3,2\\] and \\[2,1,3\\] have exactly 1 inverse pair.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `0 <= k <= 1000`",
          "output": "def kInversePairs(n: int, k: int) -> int:\n    mod = 10**9 + 7\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n        for j in range(1, k + 1):\n            dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % mod\n            if j - i >= 0:\n                dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + mod) % mod\n    return dp[n][k]\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` different online courses numbered from `1` to `n`. You are given an array `courses` where `courses[i] = [durationi, lastDayi]` indicate that the `ith` course should be taken **continuously** for `durationi` days and must be finished before or on `lastDayi`.\n\nYou will start on the `1st` day and you cannot take two or more courses simultaneously.\n\nReturn _the maximum number of courses that you can take_.\n\n",
          "input": "**Example 1:**\n\n**Input:** courses = \\[\\[100,200\\],\\[200,1300\\],\\[1000,1250\\],\\[2000,3200\\]\\]\n**Output:** 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n\n**Example 2:**\n\n**Input:** courses = \\[\\[1,2\\]\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** courses = \\[\\[3,2\\],\\[4,3\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= courses.length <= 104`\n*   `1 <= durationi, lastDayi <= 104`During iteration, say I want to add the current course, currentTotalTime being total time of all courses taken till now, but adding the current course might exceed my deadline or it doesn\u2019t.\r\n\r\n1. If it doesn\u2019t, then I have added one new course. Increment the currentTotalTime with duration of current course. 2. If it exceeds deadline, I can swap current course with current courses that has biggest duration.\r\n* No harm done and I might have just reduced the currentTotalTime, right? \r\n* What preprocessing do I need to do on my course processing order so that this swap is always legal?",
          "output": "import heapq\n\ndef scheduleCourse(courses):\n    courses.sort(key=lambda x: x[1])\n    curr_time, duration_sum = 0, []\n\n    for duration, deadline in courses:\n        curr_time += duration\n        heapq.heappush(duration_sum, -duration)\n\n        if curr_time > deadline:\n            curr_time += heapq.heappop(duration_sum)\n\n    return len(duration_sum)\n"
     },
     {
          "instruction": "Write python code for this problem: Design the basic function of **Excel** and implement the function of the sum formula.\n\nImplement the `Excel` class:\n\n*   `Excel(int height, char width)` Initializes the object with the `height` and the `width` of the sheet. The sheet is an integer matrix `mat` of size `height x width` with the row index in the range `[1, height]` and the column index in the range `['A', width]`. All the values should be **zero** initially.\n*   `void set(int row, char column, int val)` Changes the value at `mat[row][column]` to be `val`.\n*   `int get(int row, char column)` Returns the value at `mat[row][column]`.\n*   `int sum(int row, char column, List numbers)` Sets the value at `mat[row][column]` to be the sum of cells represented by `numbers` and returns the value at `mat[row][column]`. This sum formula **should exist** until this cell is overlapped by another value or another sum formula. `numbers[i]` could be on the format:\n    *   `\"ColRow \"` that represents a single cell.\n        *   For example, `\"F7 \"` represents the cell `mat[7]['F']`.\n    *   `\"ColRow1:ColRow2 \"` that represents a range of cells. The range will always be a rectangle where `\"ColRow1 \"` represent the position of the top-left cell, and `\"ColRow2 \"` represents the position of the bottom-right cell.\n        *   For example, `\"B3:F7 \"` represents the cells `mat[i][j]` for `3 <= i <= 7` and `'B' <= j <= 'F'`.\n\n**Note:** You could assume that there will not be any circular sum reference.\n\n*   For example, `mat[1]['A'] == sum(1, \"B \")` and `mat[1]['B'] == sum(1, \"A \")`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Excel \",  \"set \",  \"sum \",  \"set \",  \"get \"\\]\n\\[\\[3,  \"C \"\\], \\[1,  \"A \", 2\\], \\[3,  \"C \", \\[ \"A1 \",  \"A1:B2 \"\\]\\], \\[2,  \"B \", 2\\], \\[3,  \"C \"\\]\\]\n**Output**\n\\[null, null, 4, null, 6\\]\n\n**Explanation**\nExcel excel = new Excel(3,  \"C \");\n // construct a 3\\*3 2D array with all zero.\n //   A B C\n // 1 0 0 0\n // 2 0 0 0\n // 3 0 0 0\nexcel.set(1,  \"A \", 2);\n // set mat\\[1\\]\\[ \"A \"\\] to be 2.\n //   A B C\n // 1 2 0 0\n // 2 0 0 0\n // 3 0 0 0\nexcel.sum(3,  \"C \", \\[ \"A1 \",  \"A1:B2 \"\\]); // return 4\n // set mat\\[3\\]\\[ \"C \"\\] to be the sum of value at mat\\[1\\]\\[ \"A \"\\] and the values sum of the rectangle range whose top-left cell is mat\\[1\\]\\[ \"A \"\\] and bottom-right cell is mat\\[2\\]\\[ \"B \"\\].\n //   A B C\n // 1 2 0 0\n // 2 0 0 0\n // 3 0 0 4\nexcel.set(2,  \"B \", 2);\n // set mat\\[2\\]\\[ \"B \"\\] to be 2. Note mat\\[3\\]\\[ \"C \"\\] should also be changed.\n //   A B C\n // 1 2 0 0\n // 2 0 2 0\n // 3 0 0 6\nexcel.get(3,  \"C \"); // return 6\n\n**Constraints:**\n\n*   `1 <= height <= 26`\n*   `'A' <= width <= 'Z'`\n*   `1 <= row <= height`\n*   `'A' <= column <= width`\n*   `-100 <= val <= 100`\n*   `1 <= numbers.length <= 5`\n*   `numbers[i]` has the format `\"ColRow \"` or `\"ColRow1:ColRow2 \"`.\n*   At most `100` calls will be made to `set`, `get`, and `sum`.",
          "output": "class Excel:\n\n    def __init__(self, height: int, width: str):\n        self.mat = [[0] * (ord(width) - ord('A') + 1) for _ in range(height)]\n        self.formulas = {}\n\n    def set(self, row: int, column: str, val: int) -> None:\n        pos = column + str(row)\n        if pos in self.formulas:\n            del self.formulas[pos]\n        self.mat[row - 1][ord(column) - ord('A')] = val\n\n    def get(self, row: int, column: str) -> int:\n        pos = column + str(row)\n        if pos in self.formulas:\n            return self.sum(row, column, self.formulas[pos])\n        return self.mat[row - 1][ord(column) - ord('A')]\n\n    def sum(self, row: int, column: str, numbers) -> int:\n        total = 0\n        for num in numbers:\n            if ':' in num:\n                start, end = num.split(':')\n                start_row, end_row = int(start[1:]), int(end[1:])\n                start_col, end_col = start[0], end[0]\n                for r in range(start_row, end_row + 1):\n                    for c in range(ord(start_col), ord(end_col) + 1):\n                        total += self.get(r, chr(c))\n            else:\n                total += self.get(int(num[1:]), num[0])\n        self.set(row, column, total)\n        self.formulas[column + str(row)] = numbers\n        return total\n"
     },
     {
          "instruction": "Write python code for this problem: You have `k` lists of sorted integers in **non-decreasing order**. Find the **smallest** range that includes at least one number from each of the `k` lists.\n\nWe define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` **or** `a < c` if `b - a == d - c`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[\\[4,10,15,24,26\\],\\[0,9,12,20\\],\\[5,18,22,30\\]\\]\n**Output:** \\[20,24\\]\n**Explanation:** \nList 1: \\[4, 10, 15, 24,26\\], 24 is in range \\[20,24\\].\nList 2: \\[0, 9, 12, 20\\], 20 is in range \\[20,24\\].\nList 3: \\[5, 18, 22, 30\\], 22 is in range \\[20,24\\].\n\n**Example 2:**\n\n**Input:** nums = \\[\\[1,2,3\\],\\[1,2,3\\],\\[1,2,3\\]\\]\n**Output:** \\[1,1\\]\n\n**Constraints:**\n\n*   `nums.length == k`\n*   `1 <= k <= 3500`\n*   `1 <= nums[i].length <= 50`\n*   `-105 <= nums[i][j] <= 105`\n*   `nums[i]` is sorted in **non-decreasing** order.",
          "output": "import heapq\n\ndef smallestRange(nums):\n    minHeap = []\n    maxVal = -1e9\n    \n    for i, lst in enumerate(nums):\n        heapq.heappush(minHeap, (lst[0], i))\n        maxVal = max(maxVal, lst[0])\n        \n    listIndices = [0] * len(nums)\n    minRange = 1e9\n    start, end = -1, -1\n    \n    while len(minHeap) == len(nums):\n        val, listIdx = heapq.heappop(minHeap)\n        range_ = maxVal - val\n        \n        if range_ < minRange:\n            minRange = range_\n            start, end = val, maxVal\n            \n        listIndices[listIdx] += 1\n        if listIndices[listIdx] < len(nums[listIdx]):\n            newVal = nums[listIdx][listIndices[listIdx]]\n            heapq.heappush(minHeap, (newVal, listIdx))\n            maxVal = max(maxVal, newVal)\n            \n    return [start, end]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.\n\n",
          "input": "**Example 1:**\n\n**Input:** c = 5\n**Output:** true\n**Explanation:** 1 \\* 1 + 2 \\* 2 = 5\n\n**Example 2:**\n\n**Input:** c = 3\n**Output:** false\n\n**Constraints:**\n\n*   `0 <= c <= 231 - 1`",
          "output": "def judge_square_sum(c):\n    for a in range(int(c ** 0.5) + 1):\n        b = int((c - a * a) ** 0.5)\n        if a * a + b * b == c:\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: In combinatorial mathematics, a **derangement** is a permutation of the elements of a set, such that no element appears in its original position.\n\nYou are given an integer `n`. There is originally an array consisting of `n` integers from `1` to `n` in ascending order, return _the number of **derangements** it can generate_. Since the answer may be huge, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** The original array is \\[1,2,3\\]. The two derangements are \\[2,3,1\\] and \\[3,1,2\\].\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 106`",
          "output": "def findDerangement(n: int) -> int:\n    MOD = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]) % MOD\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: `Year:Month:Day:Hour:Minute:Second`, for example, `2017:01:01:23:59:59`. All domains are zero-padded decimal numbers.\n\nImplement the `LogSystem` class:\n\n*   `LogSystem()` Initializes the `LogSystem` object.\n*   `void put(int id, string timestamp)` Stores the given log `(id, timestamp)` in your storage system.\n*   `int[] retrieve(string start, string end, string granularity)` Returns the IDs of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `Day`, `Minute`, etc.). For example, `start = \"2017:01:01:23:59:59 \"`, `end = \"2017:01:02:23:59:59 \"`, and `granularity = \"Day \"` means that we need to find the logs within the inclusive range from **Jan. 1st 2017** to **Jan. 2nd 2017**, and the `Hour`, `Minute`, and `Second` for each log entry can be ignored.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"LogSystem \",  \"put \",  \"put \",  \"put \",  \"retrieve \",  \"retrieve \"\\]\n\\[\\[\\], \\[1,  \"2017:01:01:23:59:59 \"\\], \\[2,  \"2017:01:01:22:59:59 \"\\], \\[3,  \"2016:01:01:00:00:00 \"\\], \\[ \"2016:01:01:01:01:01 \",  \"2017:01:01:23:00:00 \",  \"Year \"\\], \\[ \"2016:01:01:01:01:01 \",  \"2017:01:01:23:00:00 \",  \"Hour \"\\]\\]\n**Output**\n\\[null, null, null, null, \\[3, 2, 1\\], \\[2, 1\\]\\]\n\n**Explanation**\nLogSystem logSystem = new LogSystem();\nlogSystem.put(1,  \"2017:01:01:23:59:59 \");\nlogSystem.put(2,  \"2017:01:01:22:59:59 \");\nlogSystem.put(3,  \"2016:01:01:00:00:00 \");\n\n// return \\[3,2,1\\], because you need to return all logs between 2016 and 2017.\nlogSystem.retrieve( \"2016:01:01:01:01:01 \",  \"2017:01:01:23:00:00 \",  \"Year \");\n\n// return \\[2,1\\], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.\n// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.\nlogSystem.retrieve( \"2016:01:01:01:01:01 \",  \"2017:01:01:23:00:00 \",  \"Hour \");\n\n**Constraints:**\n\n*   `1 <= id <= 500`\n*   `2000 <= Year <= 2017`\n*   `1 <= Month <= 12`\n*   `1 <= Day <= 31`\n*   `0 <= Hour <= 23`\n*   `0 <= Minute, Second <= 59`\n*   `granularity` is one of the values `[ \"Year \", \"Month \", \"Day \", \"Hour \", \"Minute \", \"Second \"]`.\n*   At most `500` calls will be made to `put` and `retrieve`.",
          "output": "class LogSystem:\n\n    def __init__(self):\n        self.logs = {}\n        self.time_granularity = {\n            \"Year\": 0, \"Month\": 1, \"Day\": 2, \"Hour\": 3, \"Minute\": 4, \"Second\": 5\n        }\n        self.size_map = [4, 7, 10, 13, 16, 19]\n\n    def put(self, id: int, timestamp: str) -> None:\n        self.logs[timestamp] = id\n\n    def retrieve(self, start: str, end: str, granularity: str) -> list[int]:\n        size_substring = self.size_map[self.time_granularity[granularity]]\n        res = []\n\n        for k, v in self.logs.items():\n            if start[:size_substring] <= k[:size_substring] <= end[:size_substring]:\n                res.append(v)\n\n        return res\n"
     },
     {
          "instruction": "Write python code for this problem: On a **single-threaded** CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`.\n\nFunction calls are **stored in a [call stack](https://en.wikipedia.org/wiki/Call_stack)**: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is **the current function being executed**. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\n\nYou are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `\"{function_id}:{ \"start \" | \"end \"}:{timestamp} \"`. For example, `\"0:start:3 \"` means a function call with function ID `0` **started at the beginning** of timestamp `3`, and `\"1:end:2 \"` means a function call with function ID `1` **ended at the end** of timestamp `2`. Note that a function can be called **multiple times, possibly recursively**.\n\nA function's **exclusive time** is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the **exclusive time** is `2 + 1 = 3`.\n\nReturn _the **exclusive time** of each function in an array, where the value at the_ `ith` _index represents the exclusive time for the function with ID_ `i`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, logs = \\[ \"0:start:0 \", \"1:start:2 \", \"1:end:5 \", \"0:end:6 \"\\]\n**Output:** \\[3,4\\]\n**Explanation:**\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n\n**Example 2:**\n\n**Input:** n = 1, logs = \\[ \"0:start:0 \", \"0:start:2 \", \"0:end:5 \", \"0:start:6 \", \"0:end:6 \", \"0:end:7 \"\\]\n**Output:** \\[8\\]\n**Explanation:**\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n\n**Example 3:**\n\n**Input:** n = 2, logs = \\[ \"0:start:0 \", \"0:start:2 \", \"0:end:5 \", \"1:start:6 \", \"1:end:6 \", \"0:end:7 \"\\]\n**Output:** \\[7,1\\]\n**Explanation:**\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n\n**Constraints:**\n\n*   `1 <= n <= 100`\n*   `1 <= logs.length <= 500`\n*   `0 <= function_id < n`\n*   `0 <= timestamp <= 109`\n*   No two start events will happen at the same timestamp.\n*   No two end events will happen at the same timestamp.\n*   Each function has an `\"end \"` log for each `\"start \"` log.",
          "output": "def exclusiveTime(n, logs):\n    res = [0] * n\n    stack = []\n    prev_time = 0\n\n    for log in logs:\n        parts = log.split(':')\n        id = int(parts[0])\n        type = parts[1]\n        time = int(parts[2])\n\n        if type == \"start\":\n            if stack:\n                res[stack[-1]] += time - prev_time\n            stack.append(id)\n            prev_time = time\n        else:\n            res[stack.pop()] += time - prev_time + 1\n            prev_time = time + 1\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the average value of the nodes on each level in the form of an array_. Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** \\[3.00000,14.50000,11.00000\\]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return \\[3, 14.5, 11\\].\n\n**Example 2:**\n\n**Input:** root = \\[3,9,20,15,7\\]\n**Output:** \\[3.00000,14.50000,11.00000\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-231 <= Node.val <= 231 - 1`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef averageOfLevels(root: TreeNode):\n    result = []\n    queue = [root]\n\n    while queue:\n        sum_ = 0\n        count = 0\n        temp = []\n        while queue:\n            node = queue.pop(0)\n            sum_ += node.val\n            count += 1\n            if node.left: temp.append(node.left)\n            if node.right: temp.append(node.right)\n        queue = temp\n        result.append(sum_ / count)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: In LeetCode Store, there are `n` items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\n\nYou are given an integer array `price` where `price[i]` is the price of the `ith` item, and an integer array `needs` where `needs[i]` is the number of pieces of the `ith` item you want to buy.\n\nYou are also given an array `special` where `special[i]` is of size `n + 1` where `special[i][j]` is the number of pieces of the `jth` item in the `ith` offer and `special[i][n]` (i.e., the last integer in the array) is the price of the `ith` offer.\n\nReturn _the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers_. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\n\n",
          "input": "**Example 1:**\n\n**Input:** price = \\[2,5\\], special = \\[\\[3,0,5\\],\\[1,2,10\\]\\], needs = \\[3,2\\]\n**Output:** 14\n**Explanation:** There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n\n**Example 2:**\n\n**Input:** price = \\[2,3,4\\], special = \\[\\[1,1,0,4\\],\\[2,2,1,9\\]\\], needs = \\[1,2,1\\]\n**Output:** 11\n**Explanation:** The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n\n**Constraints:**\n\n*   `n == price.length == needs.length`\n*   `1 <= n <= 6`\n*   `0 <= price[i], needs[i] <= 10`\n*   `1 <= special.length <= 100`\n*   `special[i].length == n + 1`\n*   `0 <= special[i][j] <= 50`",
          "output": "from typing import List\n\ndef shoppingOffers(price: List[int], special: List[List[int]], needs: List[int]) -> int:\n    def helper(index):\n        if index == len(special):\n            return sum(needs[i] * price[i] for i in range(len(needs)))\n\n        no_offer = helper(index + 1)\n        can_apply_offer = True\n        for i in range(len(needs)):\n            needs[i] -= special[index][i]\n            if needs[i] < 0:\n                can_apply_offer = False\n\n        with_offer = float('inf')\n        if can_apply_offer:\n            offer_cost = special[index][-1] + helper(index)\n            with_offer = min(no_offer, offer_cost)\n\n        for i in range(len(needs)):\n            needs[i] += special[index][i]\n        \n        return with_offer if can_apply_offer else no_offer\n\n    return helper(0)\n"
     },
     {
          "instruction": "Write python code for this problem: A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n'A' ->  \"1 \"\n'B' ->  \"2 \"\n...\n'Z' ->  \"26 \"\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into:\n\n*   `\"AAJF \"` with the grouping `(1 1 10 6)`\n*   `\"KJF \"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`.\n\n**In addition** to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `\"1* \"` may represent any of the encoded messages `\"11 \"`, `\"12 \"`, `\"13 \"`, `\"14 \"`, `\"15 \"`, `\"16 \"`, `\"17 \"`, `\"18 \"`, or `\"19 \"`. Decoding `\"1* \"` is equivalent to decoding **any** of the encoded messages it can represent.\n\nGiven a string `s` consisting of digits and `'*'` characters, return _the **number** of ways to **decode** it_.\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"\\* \"\n**Output:** 9\n**Explanation:** The encoded message can represent any of the encoded messages  \"1 \",  \"2 \",  \"3 \",  \"4 \",  \"5 \",  \"6 \",  \"7 \",  \"8 \", or  \"9 \".\nEach of these can be decoded to the strings  \"A \",  \"B \",  \"C \",  \"D \",  \"E \",  \"F \",  \"G \",  \"H \", and  \"I \" respectively.\nHence, there are a total of 9 ways to decode  \"\\* \".\n\n**Example 2:**\n\n**Input:** s =  \"1\\* \"\n**Output:** 18\n**Explanation:** The encoded message can represent any of the encoded messages  \"11 \",  \"12 \",  \"13 \",  \"14 \",  \"15 \",  \"16 \",  \"17 \",  \"18 \", or  \"19 \".\nEach of these encoded messages have 2 ways to be decoded (e.g.  \"11 \" can be decoded to  \"AA \" or  \"K \").\nHence, there are a total of 9 \\* 2 = 18 ways to decode  \"1\\* \".\n\n**Example 3:**\n\n**Input:** s =  \"2\\* \"\n**Output:** 15\n**Explanation:** The encoded message can represent any of the encoded messages  \"21 \",  \"22 \",  \"23 \",  \"24 \",  \"25 \",  \"26 \",  \"27 \",  \"28 \", or  \"29 \".\n \"21 \",  \"22 \",  \"23 \",  \"24 \",  \"25 \", and  \"26 \" have 2 ways of being decoded, but  \"27 \",  \"28 \", and  \"29 \" only have 1 way.\nHence, there are a total of (6 \\* 2) + (3 \\* 1) = 12 + 3 = 15 ways to decode  \"2\\* \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is a digit or `'*'`.",
          "output": "def num_decodings(s: str) -> int:\n    MOD = 10**9 + 7\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 9 if s[0] == '*' else (0 if s[0] == '0' else 1)\n\n    for i in range(2, n + 1):\n        c, prev_c = s[i - 1], s[i - 2]\n        \n        if c == '*':\n            dp[i] = 9 * dp[i - 1]\n            if prev_c == '1': dp[i] += 9 * dp[i - 2]\n            elif prev_c == '2': dp[i] += 6 * dp[i - 2]\n            elif prev_c == '*': dp[i] += 15 * dp[i - 2]\n        else:\n            dp[i] = dp[i - 1] if c != '0' else 0\n            num = int(s[i - 2 : i])\n            if prev_c == '1' or (prev_c == '2' and num <= 26): dp[i] += dp[i - 2]\n            elif prev_c == '*': dp[i] += 2 * dp[i - 2] if 10 <= num <= 26 else dp[i - 2]\n\n        dp[i] %= MOD\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Solve a given equation and return the value of `'x'` in the form of a string `\"x=#value \"`. The equation contains only `'+'`, `'-'` operation, the variable `'x'` and its coefficient. You should return `\"No solution \"` if there is no solution for the equation, or `\"Infinite solutions \"` if there are infinite solutions for the equation.\n\nIf there is exactly one solution for the equation, we ensure that the value of `'x'` is an integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** equation =  \"x+5-3+x=6+x-2 \"\n**Output:**  \"x=2 \"\n\n**Example 2:**\n\n**Input:** equation =  \"x=x \"\n**Output:**  \"Infinite solutions \"\n\n**Example 3:**\n\n**Input:** equation =  \"2x=x \"\n**Output:**  \"x=0 \"\n\n**Constraints:**\n\n*   `3 <= equation.length <= 1000`\n*   `equation` has exactly one `'='`.\n*   `equation` consists of integers with an absolute value in the range `[0, 100]` without any leading zeros, and the variable `'x'`.",
          "output": "def solve_equation(equation: str) -> str:\n    coef = val = left = operate = 0\n    equation += '+'\n    parts = [s.strip()+c for c in equation if c in '+-' for s in equation.split(c)]\n    for part in parts:\n        if part == '=':\n            left = -1\n            operate = 1\n        else:\n            n, x = part.split('x')\n            value_to_change = 1 if n else int(n)\n            if x:\n                coef += (1 if part[0] == '+' else -1) * left * operate * value_to_change\n            else:\n                val += (1 if part[0] == '+' else -1) * left * operate * value_to_change\n            operate = 1 - x.find('x')\n\n    if coef == 0:\n        return \"Infinite solutions\" if val == 0 else \"No solution\"\n    return \"x=\" + str(-val // coef)\n"
     },
     {
          "instruction": "Write python code for this problem: Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character `'#'`).\n\nYou are given a string array `sentences` and an integer array `times` both of length `n` where `sentences[i]` is a previously typed sentence and `times[i]` is the corresponding number of times the sentence was typed. For each input character except `'#'`, return the top `3` historical hot sentences that have the same prefix as the part of the sentence already typed.\n\nHere are the specific rules:\n\n*   The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.\n*   The returned top `3` hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first).\n*   If less than `3` hot sentences exist, return as many as you can.\n*   When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.\n\nImplement the `AutocompleteSystem` class:\n\n*   `AutocompleteSystem(String[] sentences, int[] times)` Initializes the object with the `sentences` and `times` arrays.\n*   `List input(char c)` This indicates that the user typed the character `c`.\n    *   Returns an empty array `[]` if `c == '#'` and stores the inputted sentence in the system.\n    *   Returns the top `3` historical hot sentences that have the same prefix as the part of the sentence already typed. If there are fewer than `3` matches, return them all.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"AutocompleteSystem \",  \"input \",  \"input \",  \"input \",  \"input \"\\]\n\\[\\[\\[ \"i love you \",  \"island \",  \"iroman \",  \"i love leetcode \"\\], \\[5, 3, 2, 2\\]\\], \\[ \"i \"\\], \\[ \"  \"\\], \\[ \"a \"\\], \\[ \"# \"\\]\\]\n**Output**\n\\[null, \\[ \"i love you \",  \"island \",  \"i love leetcode \"\\], \\[ \"i love you \",  \"i love leetcode \"\\], \\[\\], \\[\\]\\]\n\n**Explanation**\nAutocompleteSystem obj = new AutocompleteSystem(\\[ \"i love you \",  \"island \",  \"iroman \",  \"i love leetcode \"\\], \\[5, 3, 2, 2\\]);\nobj.input( \"i \"); // return \\[ \"i love you \",  \"island \",  \"i love leetcode \"\\]. There are four sentences that have prefix  \"i \". Among them,  \"ironman \" and  \"i love leetcode \" have same hot degree. Since ' ' has ASCII code 32 and 'r' has ASCII code 114,  \"i love leetcode \" should be in front of  \"ironman \". Also we only need to output top 3 hot sentences, so  \"ironman \" will be ignored.\nobj.input( \"  \"); // return \\[ \"i love you \",  \"i love leetcode \"\\]. There are only two sentences that have prefix  \"i  \".\nobj.input( \"a \"); // return \\[\\]. There are no sentences that have prefix  \"i a \".\nobj.input( \"# \"); // return \\[\\]. The user finished the input, the sentence  \"i a \" should be saved as a historical sentence in system. And the following input will be counted as a new search.\n\n**Constraints:**\n\n*   `n == sentences.length`\n*   `n == times.length`\n*   `1 <= n <= 100`\n*   `1 <= sentences[i].length <= 100`\n*   `1 <= times[i] <= 50`\n*   `c` is a lowercase English letter, a hash `'#'`, or space `' '`.\n*   Each tested sentence will be a sequence of characters `c` that end with the character `'#'`.\n*   Each tested sentence will have a length in the range `[1, 200]`.\n*   The words in each input sentence are separated by single spaces.\n*   At most `5000` calls will be made to `input`.",
          "output": "from typing import List\nimport heapq\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.sentence = \"\"\n        self.times = 0\n\nclass AutocompleteSystem:\n\n    def __init__(self, sentences: List[str], times: List[int]):\n        self.root = TrieNode()\n        self.current = self.root\n        self.search = \"\"\n        \n        for i in range(len(sentences)):\n            self.insert(sentences[i], times[i])\n\n    def insert(self, sentence: str, times: int):\n        curr = self.root\n        for c in sentence:\n            if c not in curr.children:\n                curr.children[c] = TrieNode()\n            curr = curr.children[c]\n        curr.sentence = sentence\n        curr.times += times\n\n    def input(self, c: str) -> List[str]:\n        if c == '#':\n            self.insert(self.search, 1)\n            self.search = \"\"\n            self.current = self.root\n            return []\n        \n        self.search += c\n        if not self.current:\n            return []\n        \n        if c not in self.current.children:\n            self.current = None\n            return []\n        \n        self.current = self.current.children[c]\n        heap = []\n        for child in self.current.children.values():\n            if child.times:\n                heapq.heappush(heap, (-child.times, child.sentence))\n        \n        res = []\n        for _ in range(3):\n            if not heap:\n                break\n            res.append(heapq.heappop(heap)[1])\n        return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` consisting of `n` elements, and an integer `k`.\n\nFind a contiguous subarray whose **length is equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,12,-5,-6,50,3\\], k = 4\n**Output:** 12.75000\n**Explanation:** Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n\n**Example 2:**\n\n**Input:** nums = \\[5\\], k = 1\n**Output:** 5.00000\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= k <= n <= 105`\n*   `-104 <= nums[i] <= 104`",
          "output": "def findMaxAverage(nums, k):\n    n = len(nums)\n    sum_ = sum(nums[:k])\n    max_avg = sum_ / k\n    for i in range(k, n):\n        sum_ = sum_ - nums[i - k] + nums[i]\n        max_avg = max(max_avg, sum_ / k)\n    return max_avg\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` consisting of `n` elements, and an integer `k`.\n\nFind a contiguous subarray whose **length is greater than or equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,12,-5,-6,50,3\\], k = 4\n**Output:** 12.75000\n**Explanation:**\n\\- When the length is 4, averages are \\[0.5, 12.75, 10.5\\] and the maximum average is 12.75\n- When the length is 5, averages are \\[10.4, 10.8\\] and the maximum average is 10.8\n- When the length is 6, averages are \\[9.16667\\] and the maximum average is 9.16667\nThe maximum average is when we choose a subarray of length 4 (i.e., the sub array \\[12, -5, -6, 50\\]) which has the max average 12.75, so we return 12.75\nNote that we do not consider the subarrays of length < 4.\n\n**Example 2:**\n\n**Input:** nums = \\[5\\], k = 1\n**Output:** 5.00000\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= k <= n <= 104`\n*   `-104 <= nums[i] <= 104`",
          "output": "def findMaxAverage(nums, k):\n    total = sum(nums[:k])\n    max_avg = total / k\n    for i in range(k, len(nums)):\n        total += nums[i] - nums[i - k]\n        max_avg = max(max_avg, total / k)\n    return max_avg\n"
     },
     {
          "instruction": "Write python code for this problem: You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in **repetition of one** number and **loss of another** number.\n\nYou are given an integer array `nums` representing the data status of this set after the error.\n\nFind the number that occurs twice and the number that is missing and return _them in the form of an array_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,2,4\\]\n**Output:** \\[2,3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,1\\]\n**Output:** \\[1,2\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 104`\n*   `1 <= nums[i] <= 104`",
          "output": "def findErrorNums(nums):\n    result = []\n    for num in nums:\n        index = abs(num) - 1\n        if nums[index] > 0:\n            nums[index] = -nums[index]\n        else:\n            result.append(index + 1)\n    for i, num in enumerate(nums):\n        if num > 0:\n            result.append(i + 1)\n            break\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `n` pairs `pairs` where `pairs[i] = [lefti, righti]` and `lefti < righti`.\n\nA pair `p2 = [c, d]` **follows** a pair `p1 = [a, b]` if `b < c`. A **chain** of pairs can be formed in this fashion.\n\nReturn _the length longest chain which can be formed_.\n\nYou do not need to use up all the given intervals. You can select pairs in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** pairs = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]\n**Output:** 2\n**Explanation:** The longest chain is \\[1,2\\] -> \\[3,4\\].\n\n**Example 2:**\n\n**Input:** pairs = \\[\\[1,2\\],\\[7,8\\],\\[4,5\\]\\]\n**Output:** 3\n**Explanation:** The longest chain is \\[1,2\\] -> \\[4,5\\] -> \\[7,8\\].\n\n**Constraints:**\n\n*   `n == pairs.length`\n*   `1 <= n <= 1000`\n*   `-1000 <= lefti < righti <= 1000`",
          "output": "def findLongestChain(pairs):\n    pairs.sort(key=lambda x: x[1])\n\n    max_chain_length = 0\n    last_right = float('-inf')\n    for pair in pairs:\n        if pair[0] > last_right:\n            last_right = pair[1]\n            max_chain_length += 1\n\n    return max_chain_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the number of **palindromic substrings** in it_.\n\nA string is a **palindrome** when it reads the same backward as forward.\n\nA **substring** is a contiguous sequence of characters within the string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abc \"\n**Output:** 3\n**Explanation:** Three palindromic strings:  \"a \",  \"b \",  \"c \".\n\n**Example 2:**\n\n**Input:** s =  \"aaa \"\n**Output:** 6\n**Explanation:** Six palindromic strings:  \"a \",  \"a \",  \"a \",  \"aa \",  \"aa \",  \"aaa \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of lowercase English letters.How can we reuse a previously computed palindrome to compute a larger palindrome? If \u201caba\u201d is a palindrome, is \u201cxabax\u201d and palindrome? Similarly is \u201cxabay\u201d a palindrome? Complexity based hint:\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation?",
          "output": "def countSubstrings(s: str) -> int:\n    n = len(s)\n    count = 0\n    for center in range(2 * n - 1):\n        left = center // 2\n        right = left + center % 2\n        while left >= 0 and right < n and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: In English, we have a concept called **root**, which can be followed by some other word to form another longer word - let's call this word **successor**. For example, when the **root** `\"an \"` is followed by the **successor** word `\"other \"`, we can form a new word `\"another \"`.\n\nGiven a `dictionary` consisting of many **roots** and a `sentence` consisting of words separated by spaces, replace all the **successors** in the sentence with the **root** forming it. If a **successor** can be replaced by more than one **root**, replace it with the **root** that has **the shortest length**.\n\nReturn _the `sentence`_ after the replacement.\n\n",
          "input": "**Example 1:**\n\n**Input:** dictionary = \\[ \"cat \", \"bat \", \"rat \"\\], sentence =  \"the cattle was rattled by the battery \"\n**Output:**  \"the cat was rat by the bat \"\n\n**Example 2:**\n\n**Input:** dictionary = \\[ \"a \", \"b \", \"c \"\\], sentence =  \"aadsfasf absbs bbab cadsfafs \"\n**Output:**  \"a a b c \"\n\n**Constraints:**\n\n*   `1 <= dictionary.length <= 1000`\n*   `1 <= dictionary[i].length <= 100`\n*   `dictionary[i]` consists of only lower-case letters.\n*   `1 <= sentence.length <= 106`\n*   `sentence` consists of only lower-case letters and spaces.\n*   The number of words in `sentence` is in the range `[1, 1000]`\n*   The length of each word in `sentence` is in the range `[1, 1000]`\n*   Every two consecutive words in `sentence` will be separated by exactly one space.\n*   `sentence` does not have leading or trailing spaces.",
          "output": "def replaceWords(dict, sentence):\n    roots = set(dict)\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        prefix = ''\n        for i in range(1, len(word) + 1):\n            prefix = word[:i]\n            if prefix in roots:\n                break\n        result.append(prefix)\n\n    return ' '.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: In the world of Dota2, there are two parties: the Radiant and the Dire.\n\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise **one** of the two rights:\n\n*   **Ban one senator's right:** A senator can make another senator lose all his rights in this and all the following rounds.\n*   **Announce the victory:** If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\nGiven a string `senate` representing each senator's party belonging. The character `'R'` and `'D'` represent the Radiant party and the Dire party. Then if there are `n` senators, the size of the given string will be `n`.\n\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be `\"Radiant \"` or `\"Dire \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** senate =  \"RD \"\n**Output:**  \"Radiant \"\n**Explanation:** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n\n**Example 2:**\n\n**Input:** senate =  \"RDD \"\n**Output:**  \"Dire \"\n**Explanation:** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n\n**Constraints:**\n\n*   `n == senate.length`\n*   `1 <= n <= 104`\n*   `senate[i]` is either `'R'` or `'D'`.",
          "output": "from collections import deque\n\ndef predict_party_victory(senate: str) -> str:\n    radiant = deque()\n    dire = deque()\n    n = len(senate)\n    \n    for i, s in enumerate(senate):\n        if s == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n\n    while radiant and dire:\n        r = radiant.popleft()\n        d = dire.popleft()\n\n        if r < d:\n            radiant.append(r + n)\n        else:\n            dire.append(d + n)\n\n    return \"Dire\" if not radiant else \"Radiant\"\n"
     },
     {
          "instruction": "Write python code for this problem: There is only one character `'A'` on the screen of a notepad. You can perform one of two operations on this notepad for each step:\n\n*   Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).\n*   Paste: You can paste the characters which are copied last time.\n\nGiven an integer `n`, return _the minimum number of operations to get the character_ `'A'` _exactly_ `n` _times on the screen_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 3\n**Explanation:** Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= n <= 1000`How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?",
          "output": "def min_steps(n):\n    result = 0\n    i = 2\n    while i <= n:\n        while n % i == 0:\n            result += i\n            n //= i\n        i += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Imagine you have a special keyboard with the following keys:\n\n*   A: Print one `'A'` on the screen.\n*   Ctrl-A: Select the whole screen.\n*   Ctrl-C: Copy selection to buffer.\n*   Ctrl-V: Print buffer on screen appending it after what has already been printed.\n\nGiven an integer n, return _the maximum number of_ `'A'` _you can print on the screen with **at most**_ `n` _presses on the keys_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 3\n**Explanation:** We can at most get 3 A's on screen by pressing the following key sequence:\nA, A, A\n\n**Example 2:**\n\n**Input:** n = 7\n**Output:** 9\n**Explanation:** We can at most get 9 A's on screen by pressing following key sequence:\nA, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V\n\n**Constraints:**\n\n*   `1 <= n <= 50`",
          "output": "def maxA(n: int) -> int:\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, i - 2):\n            dp[i] = max(dp[i], dp[j] * (i - j - 1))\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return all **duplicate subtrees**.\n\nFor each kind of duplicate subtrees, you only need to return the root node of any **one** of them.\n\nTwo trees are **duplicate** if they have the **same structure** with the **same node values**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,null,2,4,null,null,4\\]\n**Output:** \\[\\[2,4\\],\\[4\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[2,1,1\\]\n**Output:** \\[\\[1\\]\\]\n\n**Example 3:**\n\n**Input:** root = \\[2,2,2,3,null,3,null\\]\n**Output:** \\[\\[2,3\\],\\[3\\]\\]\n\n**Constraints:**\n\n*   The number of the nodes in the tree will be in the range `[1, 5000]`\n*   `-200 <= Node.val <= 200`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef findDuplicateSubtrees(root):\n    tree_count = {}\n    result = []\n    findDuplicateSubtreesHelper(root, tree_count, result)\n    return result\n\ndef findDuplicateSubtreesHelper(root, tree_count, result):\n    if root is None:\n        return \"\"\n    subtree = \"{},{},{}\".format(root.val, findDuplicateSubtreesHelper(root.left, tree_count, result), findDuplicateSubtreesHelper(root.right, tree_count, result))\n    tree_count[subtree] = tree_count.get(subtree, 0) + 1\n    if tree_count[subtree] == 2:\n        result.append(root)\n    return subtree\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree and an integer `k`, return `true` _if there exist two elements in the BST such that their sum is equal to_ `k`, _or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,3,6,2,4,null,7\\], k = 9\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[5,3,6,2,4,null,7\\], k = 28\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-104 <= Node.val <= 104`\n*   `root` is guaranteed to be a **valid** binary search tree.\n*   `-105 <= k <= 105`",
          "output": "def findTarget(root, k):\n    nodes = set()\n    return findNode(root, k, nodes)\n\ndef findNode(root, k, nodes):\n    if not root:\n        return False\n    if k - root.val in nodes:\n        return True\n    nodes.add(root.val)\n    return findNode(root.left, k, nodes) or findNode(root.right, k, nodes)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` with no duplicates. A **maximum binary tree** can be built recursively from `nums` using the following algorithm:\n\n1.  Create a root node whose value is the maximum value in `nums`.\n2.  Recursively build the left subtree on the **subarray prefix** to the **left** of the maximum value.\n3.  Recursively build the right subtree on the **subarray suffix** to the **right** of the maximum value.\n\nReturn _the **maximum binary tree** built from_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,2,1,6,0,5\\]\n**Output:** \\[6,3,5,null,2,0,null,null,1\\]\n**Explanation:** The recursive calls are as follow:\n- The largest value in \\[3,2,1,6,0,5\\] is 6. Left prefix is \\[3,2,1\\] and right suffix is \\[0,5\\].\n    - The largest value in \\[3,2,1\\] is 3. Left prefix is \\[\\] and right suffix is \\[2,1\\].\n        - Empty array, so no child.\n        - The largest value in \\[2,1\\] is 2. Left prefix is \\[\\] and right suffix is \\[1\\].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in \\[0,5\\] is 5. Left prefix is \\[0\\] and right suffix is \\[\\].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,1\\]\n**Output:** \\[3,null,2,null,1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] <= 1000`\n*   All integers in `nums` are **unique**.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef constructMaximumBinaryTree(nums):\n    def helper(nums, left, right):\n        if left > right:\n            return None\n\n        maxIdx = left\n        for i in range(left + 1, right + 1):\n            if nums[i] > nums[maxIdx]:\n                maxIdx = i\n\n        root = TreeNode(nums[maxIdx])\n        root.left = helper(nums, left, maxIdx - 1)\n        root.right = helper(nums, maxIdx + 1, right)\n        return root\n\n    return helper(nums, 0, len(nums) - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, construct a **0-indexed** `m x n` string matrix `res` that represents a **formatted layout** of the tree. The formatted layout matrix should be constructed using the following rules:\n\n*   The **height** of the tree is `height` and the number of rows `m` should be equal to `height + 1`.\n*   The number of columns `n` should be equal to `2height+1 - 1`.\n*   Place the **root node** in the **middle** of the **top row** (more formally, at location `res[0][(n-1)/2]`).\n*   For each node that has been placed in the matrix at position `res[r][c]`, place its **left child** at `res[r+1][c-2height-r-1]` and its **right child** at `res[r+1][c+2height-r-1]`.\n*   Continue this process until all the nodes in the tree have been placed.\n*   Any empty cells should contain the empty string `\" \"`.\n\nReturn _the constructed matrix_ `res`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2\\]\n**Output:** \n\\[\\[ \" \", \"1 \", \" \"\\],\n \\[ \"2 \", \" \", \" \"\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,null,4\\]\n**Output:** \n\\[\\[ \" \", \" \", \" \", \"1 \", \" \", \" \", \" \"\\],\n \\[ \" \", \"2 \", \" \", \" \", \" \", \"3 \", \" \"\\],\n \\[ \" \", \" \", \"4 \", \" \", \" \", \" \", \" \"\\]\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 210]`.\n*   `-99 <= Node.val <= 99`\n*   The depth of the tree will be in the range `[1, 10]`.",
          "output": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n        \ndef printTree(root):\n    if not root:\n        return [[]]\n\n    # Calculate Depth\n    depth = 0\n    q = deque([root])\n    while q:\n        depth += 1\n        for _ in range(len(q)):\n            node = q.popleft()\n            if node.left:\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n\n    res = [[\"\" for _ in range((1 << depth) - 1)] for _ in range(depth)]\n\n    # Fill in matrix\n    q.append(root)\n    level = 0\n    step = (1 << (depth - 1))\n    while q:\n        cur_pos = step - 1\n        for _ in range(len(q)):\n            node = q.popleft()\n            res[level][cur_pos] = str(node.val)\n            cur_pos += (step << 1)\n            if node.left:\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n        step >>= 1\n        level += 1\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `coins` (**1-indexed**) of length `n` and an integer `maxJump`. You can jump to any index `i` of the array `coins` if `coins[i] != -1` and you have to pay `coins[i]` when you visit index `i`. In addition to that, if you are currently at index `i`, you can only jump to any index `i + k` where `i + k <= n` and `k` is a value in the range `[1, maxJump]`.\n\nYou are initially positioned at index `1` (`coins[1]` is not `-1`). You want to find the path that reaches index n with the minimum cost.\n\nReturn an integer array of the indices that you will visit in order so that you can reach index n with the minimum cost. If there are multiple paths with the same cost, return the **lexicographically smallest** such path. If it is not possible to reach index n, return an empty array.\n\nA path `p1 = [Pa1, Pa2, ..., Pax]` of length `x` is **lexicographically smaller** than `p2 = [Pb1, Pb2, ..., Pbx]` of length `y`, if and only if at the first `j` where `Paj` and `Pbj` differ, `Paj < Pbj`; when no such `j` exists, then `x < y`.\n\n",
          "input": "**Example 1:**\n\n**Input:** coins = \\[1,2,4,-1,2\\], maxJump = 2\n**Output:** \\[1,3,5\\]\n\n**Example 2:**\n\n**Input:** coins = \\[1,2,4,-1,2\\], maxJump = 1\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= coins.length <= 1000`\n*   `-1 <= coins[i] <= 100`\n*   `coins[1] != -1`\n*   `1 <= maxJump <= 100`",
          "output": "def cheapestJump(coins, maxJump):\n    n = len(coins)\n    dp = [float('inf')] * n\n    parent = [-1] * n\n    dp[0] = coins[0]\n    for i in range(n):\n        if coins[i] == -1:\n            continue\n        for j in range(1, maxJump + 1):\n            if i + j >= n:\n                break\n            next = i + j\n            cost = coins[next] + dp[i]\n            if cost < dp[next]:\n                dp[next] = cost\n                parent[next] = i\n    ans = []\n    if dp[n - 1] == float('inf'):\n        return ans\n    cur = n - 1\n    while cur != -1:\n        ans.append(cur + 1)\n        cur = parent[cur]\n    ans.reverse()\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There is a robot starting at the position `(0, 0)`, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot **ends up at** `(0, 0)` after it completes its moves.\n\nYou are given a string `moves` that represents the move sequence of the robot where `moves[i]` represents its `ith` move. Valid moves are `'R'` (right), `'L'` (left), `'U'` (up), and `'D'` (down).\n\nReturn `true` _if the robot returns to the origin after it finishes all of its moves, or_ `false` _otherwise_.\n\n**Note**: The way that the robot is \"facing \" is irrelevant. `'R'` will always make the robot move to the right once, `'L'` will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\n",
          "input": "**Example 1:**\n\n**Input:** moves =  \"UD \"\n**Output:** true\n**Explanation**: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n\n**Example 2:**\n\n**Input:** moves =  \"LL \"\n**Output:** false\n**Explanation**: The robot moves left twice. It ends up two  \"moves \" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n\n**Constraints:**\n\n*   `1 <= moves.length <= 2 * 104`\n*   `moves` only contains the characters `'U'`, `'D'`, `'L'` and `'R'`.",
          "output": "def judgeCircle(moves: str) -> bool:\n    x, y = 0, 0\n    for move in moves:\n        if move == 'U': y += 1\n        elif move == 'D': y -= 1\n        elif move == 'R': x += 1\n        elif move == 'L': x -= 1\n    return x == 0 and y == 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **sorted** integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.\n\nAn integer `a` is closer to `x` than an integer `b` if:\n\n*   `|a - x| < |b - x|`, or\n*   `|a - x| == |b - x|` and `a < b`\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3,4,5\\], k = 4, x = 3\n**Output:** \\[1,2,3,4\\]\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,3,4,5\\], k = 4, x = -1\n**Output:** \\[1,2,3,4\\]\n\n**Constraints:**\n\n*   `1 <= k <= arr.length`\n*   `1 <= arr.length <= 104`\n*   `arr` is sorted in **ascending** order.\n*   `-104 <= arr[i], x <= 104`",
          "output": "from typing import List\n\ndef findClosestElements(arr: List[int], k: int, x: int) -> List[int]:\n    left = 0\n    right = len(arr) - k\n\n    while left < right:\n        mid = left + (right - left) // 2\n        if x - arr[mid] > arr[mid + k] - x:\n            left = mid + 1\n        else:\n            right = mid\n\n    return arr[left:left + k]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` that is **sorted in non-decreasing order**.\n\nDetermine if it is possible to split `nums` into **one or more subsequences** such that **both** of the following conditions are true:\n\n*   Each subsequence is a **consecutive increasing sequence** (i.e. each integer is **exactly one** more than the previous integer).\n*   All subsequences have a length of `3` **or more**.\n\nReturn `true` _if you can split_ `nums` _according to the above conditions, or_ `false` _otherwise_.\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., `[1,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,3,2]` is not).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,3,4,5\\]\n**Output:** true\n**Explanation:** nums can be split into the following subsequences:\n\\[**1**,**2**,**3**,3,4,5\\] --> 1, 2, 3\n\\[1,2,3,**3**,**4**,**5**\\] --> 3, 4, 5\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,3,4,4,5,5\\]\n**Output:** true\n**Explanation:** nums can be split into the following subsequences:\n\\[**1**,**2**,**3**,3,**4**,4,**5**,5\\] --> 1, 2, 3, 4, 5\n\\[1,2,3,**3**,4,**4**,5,**5**\\] --> 3, 4, 5\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,4,5\\]\n**Output:** false\n**Explanation:** It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-1000 <= nums[i] <= 1000`\n*   `nums` is sorted in **non-decreasing** order.",
          "output": "def can_split(nums):\n    freq = [0] * 20001\n    needed = [0] * 20001\n    for n in nums:\n        freq[n] += 1\n    for n in nums:\n        if not freq[n]: continue\n        if not needed[n - 1]:\n            if freq[n + 1] and freq[n + 2]:\n                freq[n] -= 1; freq[n + 1] -= 1; freq[n + 2] -= 1;\n                needed[n + 2] += 1\n            else: return False\n        else:\n            freq[n] -= 1; needed[n - 1] -= 1;\n            needed[n] += 1\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Start from integer `1`, remove any integer that contains `9` such as `9`, `19`, `29`...\n\nNow, you will have a new integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...]`.\n\nGiven an integer `n`, return _the_ `nth` (**1-indexed**) integer in the new sequence.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 9\n**Output:** 10\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 11\n\n**Constraints:**\n\n*   `1 <= n <= 8 * 108`",
          "output": "def newInteger(n):\n    result = 0\n    base = 1\n    while n:\n        result += n % 9 * base\n        n //= 9\n        base *= 10\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: An **image smoother** is a filter of the size `3 x 3` that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\nGiven an `m x n` integer matrix `img` representing the grayscale of an image, return _the image after applying the smoother on each cell of it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** img = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]\n**Explanation:**\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n\n**Example 2:**\n\n**Input:** img = \\[\\[100,200,100\\],\\[200,50,200\\],\\[100,200,100\\]\\]\n**Output:** \\[\\[137,141,137\\],\\[141,138,141\\],\\[137,141,137\\]\\]\n**Explanation:**\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n\n**Constraints:**\n\n*   `m == img.length`\n*   `n == img[i].length`\n*   `1 <= m, n <= 200`\n*   `0 <= img[i][j] <= 255`",
          "output": "def imageSmoother(img):\n    m, n = len(img), len(img[0])\n    result = [[0] * n for _ in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            count, total = 0, 0\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    if 0 <= x < m and 0 <= y < n:\n                        total += img[x][y]\n                        count += 1\n            result[i][j] = total // count\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the **maximum width** of the given tree_.\n\nThe **maximum width** of a tree is the maximum **width** among all levels.\n\nThe **width** of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\nIt is **guaranteed** that the answer will in the range of a **32-bit** signed integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,3,2,5,3,null,9\\]\n**Output:** 4\n**Explanation:** The maximum width exists in the third level with length 4 (5,3,null,9).\n\n**Example 2:**\n\n**Input:** root = \\[1,3,2,5,null,null,9,6,null,7\\]\n**Output:** 7\n**Explanation:** The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n\n**Example 3:**\n\n**Input:** root = \\[1,3,2,5\\]\n**Output:** 2\n**Explanation:** The maximum width exists in the second level with length 2 (3,2).\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 3000]`.\n*   `-100 <= Node.val <= 100`",
          "output": "from collections import deque\n\ndef widthOfBinaryTree(root):\n    if not root:\n        return 0\n\n    maxWidth = 0\n    q = deque([(root, 1)])\n\n    while q:\n        levelSize = len(q)\n        left, _ = q[0]\n        right = left\n        for _ in range(levelSize):\n            node, pos = q.popleft()\n            right = pos\n\n            if node.left:\n                q.append((node.left, 2 * pos))\n            if node.right:\n                q.append((node.right, 2 * pos + 1))\n        \n        maxWidth = max(maxWidth, right - left + 1)\n    \n    return maxWidth\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return `true` _if you can partition the tree into two trees with equal sums of values after removing exactly one edge on the original tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,10,10,null,null,2,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[1,2,10,null,null,2,20\\]\n**Output:** false\n**Explanation:** You cannot split the tree into two trees with equal sums after removing exactly one edge on the tree.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-105 <= Node.val <= 105`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def checkEqualTree(self, root: TreeNode) -> bool:\n        def _sum(node, seen):\n            if not node:\n                return 0\n            s = node.val + _sum(node.left, seen) + _sum(node.right, seen)\n            seen.add(s)\n            return s\n\n        seen = set()\n        total = _sum(root, seen)\n        return total % 2 == 0 and (total // 2) in seen\n"
     },
     {
          "instruction": "Write python code for this problem: There is a strange printer with the following two special properties:\n\n*   The printer can only print a sequence of **the same character** each time.\n*   At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\n\nGiven a string `s`, return _the minimum number of turns the printer needed to print it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaabbb \"\n**Output:** 2\n**Explanation:** Print  \"aaa \" first and then print  \"bbb \".\n\n**Example 2:**\n\n**Input:** s =  \"aba \"\n**Output:** 2\n**Explanation:** Print  \"aaa \" first and then print  \"b \" from the second place of the string, which will cover the existing character 'a'.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of lowercase English letters.",
          "output": "def strange_printer(s: str) -> int:\n    n = len(s)\n    if n == 0: return 0\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for len in range(1, n):\n        for i in range(n - len):\n            j = i + len\n            dp[i][j] = dp[i+1][j] + 1\n            for k in range(i + 1, j + 1):\n                if s[i] == s[k]:\n                    dp[i][j] = min(dp[i][j], dp[i+1][k-1] + dp[k][j])\n    return dp[0][n-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying **at most one element**.\n\nWe define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (**0-based**) such that (`0 <= i <= n - 2`).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,2,3\\]\n**Output:** true\n**Explanation:** You could modify the first 4 to 1 to get a non-decreasing array.\n\n**Example 2:**\n\n**Input:** nums = \\[4,2,1\\]\n**Output:** false\n**Explanation:** You cannot get a non-decreasing array by modifying at most one element.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 104`\n*   `-105 <= nums[i] <= 105`",
          "output": "def checkPossibility(nums):\n    cnt = 0\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            cnt += 1\n            if i == 1 or nums[i] >= nums[i - 2]:\n                nums[i-1] = nums[i]\n            else:\n                nums[i] = nums[i - 1]\n            if cnt > 1:\n                return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: If the depth of a tree is smaller than `5`, then this tree can be represented by an array of three-digit integers. For each integer in this array:\n\n*   The hundreds digit represents the depth `d` of this node where `1 <= d <= 4`.\n*   The tens digit represents the position `p` of this node in the level it belongs to where `1 <= p <= 8`. The position is the same as that in a full binary tree.\n*   The units digit represents the value `v` of this node where `0 <= v <= 9`.\n\nGiven an array of **ascending** three-digit integers `nums` representing a binary tree with a depth smaller than `5`, return _the sum of all paths from the root towards the leaves_.\n\nIt is **guaranteed** that the given array represents a valid connected binary tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[113,215,221\\]\n**Output:** 12\n**Explanation:** The tree that the list represents is shown.\nThe path sum is (3 + 5) + (3 + 1) = 12.\n\n**Example 2:**\n\n**Input:** nums = \\[113,221\\]\n**Output:** 4\n**Explanation:** The tree that the list represents is shown. \nThe path sum is (3 + 1) = 4.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 15`\n*   `110 <= nums[i] <= 489`\n*   `nums` represents a valid binary tree with depth less than `5`.",
          "output": "def sumPaths(root, val):\n    if not root: return 0\n    val = val * 10 + root.val\n    if not root.left and not root.right: return val\n    return sumPaths(root.left, val) + sumPaths(root.right, val)\n\ndef pathSum(nums):\n    root = TreeNode(nums[0] % 10)\n    for num in nums:\n        depth, pos, val = num // 100, num % 100 // 10, num % 10\n        cur = root\n        for d in reversed(range(depth - 1)):\n            if (pos >> d) & 1:\n                if not cur.right: cur.right = TreeNode(val)\n                cur = cur.right\n            else:\n                if not cur.left: cur.left = TreeNode(val)\n                cur = cur.left\n    return sumPaths(root, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `n` and `k`, construct a list `answer` that contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement:\n\n*   Suppose this list is `answer = [a1, a2, a3, ... , an]`, then the list `[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|]` has exactly `k` distinct integers.\n\nReturn _the list_ `answer`. If there multiple valid answers, return **any of them**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 1\n**Output:** \\[1,2,3\\]\nExplanation: The \\[1,2,3\\] has three different positive integers ranging from 1 to 3, and the \\[1,1\\] has exactly 1 distinct integer: 1\n\n**Example 2:**\n\n**Input:** n = 3, k = 2\n**Output:** \\[1,3,2\\]\nExplanation: The \\[1,3,2\\] has three different positive integers ranging from 1 to 3, and the \\[2,1\\] has exactly 2 distinct integers: 1 and 2.\n\n**Constraints:**\n\n*   `1 <= k < n <= 104`",
          "output": "def constructArray(n: int, k: int) -> List[int]:\n    answer = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            answer[i] = i // 2 + 1\n        else:\n            answer[i] = n - (i - 1) // 2\n            k -= 1\n    if k > 0:\n        for i in range(n - 2, -1, -1):\n            if k > 0:\n                answer[i] = answer[i + 1] - answer[i]\n                k -= 1\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: Nearly everyone has used the [Multiplication Table](https://en.wikipedia.org/wiki/Multiplication_table). The multiplication table of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (**1-indexed**).\n\nGiven three integers `m`, `n`, and `k`, return _the_ `kth` _smallest element in the_ `m x n` _multiplication table_.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 3, n = 3, k = 5\n**Output:** 3\n**Explanation:** The 5th smallest number is 3.\n\n**Example 2:**\n\n**Input:** m = 2, n = 3, k = 6\n**Output:** 6\n**Explanation:** The 6th smallest number is 6.\n\n**Constraints:**\n\n*   `1 <= m, n <= 3 * 104`\n*   `1 <= k <= m * n`",
          "output": "def findKthNumber(m, n, k):\n    low, high = 1, m * n\n    while low < high:\n        mid = low + (high - low) // 2\n        count = 0\n        for i in range(1, m+1):\n            count += min(mid // i, n)\n        if count < k:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should **not** change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a **unique answer**.\n\nReturn _the root of the trimmed binary search tree_. Note that the root may change depending on the given bounds.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,0,2\\], low = 1, high = 2\n**Output:** \\[1,null,2\\]\n\n**Example 2:**\n\n**Input:** root = \\[3,0,4,null,2,null,null,1\\], low = 1, high = 3\n**Output:** \\[3,2,null,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `0 <= Node.val <= 104`\n*   The value of each node in the tree is **unique**.\n*   `root` is guaranteed to be a valid binary search tree.\n*   `0 <= low <= high <= 104`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef trimBST(self, root: TreeNode, low: int, high: int) -> TreeNode:\n    if not root:\n        return None\n\n    if root.val < low:\n        return self.trimBST(root.right, low, high)\n    elif root.val > high:\n        return self.trimBST(root.left, low, high)\n    else:\n        root.left = self.trimBST(root.left, low, high)\n        root.right = self.trimBST(root.right, low, high)\n\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `num`. You can swap two digits at most once to get the maximum valued number.\n\nReturn _the maximum valued number you can get_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 2736\n**Output:** 7236\n**Explanation:** Swap the number 2 and the number 7.\n\n**Example 2:**\n\n**Input:** num = 9973\n**Output:** 9973\n**Explanation:** No swap.\n\n**Constraints:**\n\n*   `0 <= num <= 108`",
          "output": "def maximumSwap(num):\n    num_str = list(str(num))\n    last = {int(v): i for i, v in enumerate(num_str)}\n\n    for i, v in enumerate(num_str):\n        for d in range(9, int(v), -1):\n            if last.get(d, -1) > i:\n                num_str[i], num_str[last[d]] = num_str[last[d]], num_str[i]\n                return int(\"\".join(num_str))\n\n    return num\n"
     },
     {
          "instruction": "Write python code for this problem: Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds.\n\nGiven such a binary tree, you need to output the **second minimum** value in the set made of all the nodes' value in the whole tree.\n\nIf no such second minimum value exists, output -1 instead.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[2,2,5,null,null,5,7\\]\n**Output:** 5\n**Explanation:** The smallest value is 2, the second smallest value is 5.\n\n**Example 2:**\n\n**Input:** root = \\[2,2,2\\]\n**Output:** -1\n**Explanation:** The smallest value is 2, but there isn't any second smallest value.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 25]`.\n*   `1 <= Node.val <= 231 - 1`\n*   `root.val == min(root.left.val, root.right.val)` for each internal node of the tree.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_second_minimum_value(root, current=-1):\n    if root is None:\n        return current\n    if current == -1 or root.val < current:\n        current = root.val\n    if root.left is not None and root.right is not None:\n        if root.val == root.left.val:\n            current = find_second_minimum_value(root.left, current)\n            if root.val != root.right.val:\n                current = root.right.val if current == -1 else min(current, root.right.val)\n        else:\n            current = find_second_minimum_value(root.right, current)\n            if root.val != root.left.val:\n                current = root.left.val if current == -1 else min(current, root.left.val)\n    return current\n"
     },
     {
          "instruction": "Write python code for this problem: There is a room with `n` bulbs labeled from `1` to `n` that all are turned on initially, and **four buttons** on the wall. Each of the four buttons has a different functionality where:\n\n*   **Button 1:** Flips the status of all the bulbs.\n*   **Button 2:** Flips the status of all the bulbs with even labels (i.e., `2, 4, ...`).\n*   **Button 3:** Flips the status of all the bulbs with odd labels (i.e., `1, 3, ...`).\n*   **Button 4:** Flips the status of all the bulbs with a label `j = 3k + 1` where `k = 0, 1, 2, ...` (i.e., `1, 4, 7, 10, ...`).\n\nYou must make **exactly** `presses` button presses in total. For each press, you may pick **any** of the four buttons to press.\n\nGiven the two integers `n` and `presses`, return _the number of **different possible statuses** after performing all_ `presses` _button presses_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1, presses = 1\n**Output:** 2\n**Explanation:** Status can be:\n- \\[off\\] by pressing button 1\n- \\[on\\] by pressing button 2\n\n**Example 2:**\n\n**Input:** n = 2, presses = 1\n**Output:** 3\n**Explanation:** Status can be:\n- \\[off, off\\] by pressing button 1\n- \\[on, off\\] by pressing button 2\n- \\[off, on\\] by pressing button 3\n\n**Example 3:**\n\n**Input:** n = 3, presses = 1\n**Output:** 4\n**Explanation:** Status can be:\n- \\[off, off, off\\] by pressing button 1\n- \\[off, on, off\\] by pressing button 2\n- \\[on, off, on\\] by pressing button 3\n- \\[off, on, on\\] by pressing button 4\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `0 <= presses <= 1000`",
          "output": "def num_light_configuration(n, presses):\n    dp = [[0] * (presses + 1) for _ in range(n+1)]\n    dp[0][0] = 1\n\n    for i in range(n + 1):\n        for j in range(1, presses + 1):\n            dp[i][j] = dp[i][j - 1] * (i + 1) + (dp[i - 1][j - 1] if i > 0 else 0)\n\n    return dp[n][presses]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the number of longest increasing subsequences._\n\n**Notice** that the sequence has to be **strictly** increasing.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,5,4,7\\]\n**Output:** 2\n**Explanation:** The two longest increasing subsequences are \\[1, 3, 4, 7\\] and \\[1, 3, 5, 7\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\]\n**Output:** 5\n**Explanation:** The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2000`\n*   `-106 <= nums[i] <= 106`",
          "output": "def findNumberOfLIS(nums):\n    n = len(nums)\n    maxLength = ans = 0\n    length = [1] * n\n    count = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                if length[i] == length[j] + 1:\n                    count[i] += count[j]\n                elif length[i] < length[j] + 1:\n                    length[i] = length[j] + 1\n                    count[i] = count[j]\n        if maxLength == length[i]:\n            ans += count[i]\n        elif maxLength < length[i]:\n            maxLength = length[i]\n            ans = count[i]\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an unsorted array of integers `nums`, return _the length of the longest **continuous increasing subsequence** (i.e. subarray)_. The subsequence must be **strictly** increasing.\n\nA **continuous increasing subsequence** is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,5,4,7\\]\n**Output:** 3\n**Explanation:** The longest continuous increasing subsequence is \\[1,3,5\\] with length 3.\nEven though \\[1,3,5,7\\] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\]\n**Output:** 1\n**Explanation:** The longest continuous increasing subsequence is \\[2\\] with length 1. Note that it must be strictly\nincreasing.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-109 <= nums[i] <= 109`",
          "output": "def findLengthOfLCIS(nums):\n    if not nums:\n        return 0\n    result, current = 1, 1\n    for i in range(1, len(nums)):\n        current = current + 1 if nums[i] > nums[i - 1] else 1\n        result = max(result, current)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:\n\n*   `0` means the cell cannot be walked through.\n*   `1` represents an empty cell that can be walked through.\n*   A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.\n\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\n\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell).\n\nStarting from the point `(0, 0)`, return _the minimum steps you need to walk to cut off all the trees_. If you cannot cut off all the trees, return `-1`.\n\n**Note:** The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\n\n",
          "input": "**Example 1:**\n\n**Input:** forest = \\[\\[1,2,3\\],\\[0,0,4\\],\\[7,6,5\\]\\]\n**Output:** 6\n**Explanation:** Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n\n**Example 2:**\n\n**Input:** forest = \\[\\[1,2,3\\],\\[0,0,0\\],\\[7,6,5\\]\\]\n**Output:** -1\n**Explanation:** The trees in the bottom row cannot be accessed as the middle row is blocked.\n\n**Example 3:**\n\n**Input:** forest = \\[\\[2,3,4\\],\\[0,0,5\\],\\[8,7,6\\]\\]\n**Output:** 6\n**Explanation:** You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.\n\n**Constraints:**\n\n*   `m == forest.length`\n*   `n == forest[i].length`\n*   `1 <= m, n <= 50`\n*   `0 <= forest[i][j] <= 109`\n*   Heights of all trees are **distinct**.",
          "output": "from heapq import heappush, heappop\nfrom collections import deque\n\ndef cutOffTree(forest: List[List[int]]) -> int:\n    if not forest or not forest[0]: return 0\n    m, n = len(forest), len(forest[0])\n    trees = []\n    \n    for i in range(m):\n        for j in range(n):\n            if forest[i][j] > 1:\n                heappush(trees, (forest[i][j], i, j))\n    \n    startX, startY = 0, 0\n    totalSteps = 0\n    while trees:\n        tree, endX, endY = heappop(trees)\n        steps = bfs(forest, startX, startY, endX, endY)\n        if steps == -1:\n            return -1\n        totalSteps += steps\n        startX, startY = endX, endY\n    \n    return totalSteps\n\ndef bfs(forest, startX, startY, endX, endY):\n    if startX == endX and startY == endY:\n        return 0\n        \n    m, n = len(forest), len(forest[0])\n    visited = [[False] * n for _ in range(m)]\n    q = deque([(startX, startY, 0)])\n    visited[startX][startY] = True\n    dirs = [-1, 0, 1, 0, -1]\n    \n    while q:\n        x, y, steps = q.popleft()\n        for k in range(4):\n            newX, newY = x + dirs[k], y + dirs[k+1]\n            if 0 <= newX < m and 0 <= newY < n and not visited[newX][newY] and forest[newX][newY] != 0:\n                if newX == endX and newY == endY:\n                    return steps + 1\n                q.append((newX, newY, steps + 1))\n                visited[newX][newY] = True\n    \n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure that is initialized with a list of **different** words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\n\nImplement the `MagicDictionary` class:\n\n*   `MagicDictionary()` Initializes the object.\n*   `void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.\n*   `bool search(String searchWord)` Returns `true` if you can change **exactly one character** in `searchWord` to match any string in the data structure, otherwise returns `false`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MagicDictionary \",  \"buildDict \",  \"search \",  \"search \",  \"search \",  \"search \"\\]\n\\[\\[\\], \\[\\[ \"hello \",  \"leetcode \"\\]\\], \\[ \"hello \"\\], \\[ \"hhllo \"\\], \\[ \"hell \"\\], \\[ \"leetcoded \"\\]\\]\n**Output**\n\\[null, null, false, true, false, false\\]\n\n**Explanation**\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict(\\[ \"hello \",  \"leetcode \"\\]);\nmagicDictionary.search( \"hello \"); // return False\nmagicDictionary.search( \"hhllo \"); // We can change the second 'h' to 'e' to match  \"hello \" so we return True\nmagicDictionary.search( \"hell \"); // return False\nmagicDictionary.search( \"leetcoded \"); // return False\n\n**Constraints:**\n\n*   `1 <= dictionary.length <= 100`\n*   `1 <= dictionary[i].length <= 100`\n*   `dictionary[i]` consists of only lower-case English letters.\n*   All the strings in `dictionary` are **distinct**.\n*   `1 <= searchWord.length <= 100`\n*   `searchWord` consists of only lower-case English letters.\n*   `buildDict` will be called only once before `search`.\n*   At most `100` calls will be made to `search`.",
          "output": "class MagicDictionary:\n\n    def __init__(self):\n        self.word_list = {}\n\n    def buildDict(self, dictionary: List[str]) -> None:\n        for word in dictionary:\n            if len(word) not in self.word_list:\n                self.word_list[len(word)] = []\n            self.word_list[len(word)].append(word)\n\n    def search(self, searchWord: str) -> bool:\n        if len(searchWord) in self.word_list:\n            for word in self.word_list[len(searchWord)]:\n                diff = sum(c1 != c2 for c1, c2 in zip(searchWord, word))\n                if diff == 1: return True\n        return False\n"
     },
     {
          "instruction": "Write python code for this problem: Design a map that allows you to do the following:\n\n*   Maps a string key to a given value.\n*   Returns the sum of the values that have a key with a prefix equal to a given string.\n\nImplement the `MapSum` class:\n\n*   `MapSum()` Initializes the `MapSum` object.\n*   `void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.\n*   `int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MapSum \",  \"insert \",  \"sum \",  \"insert \",  \"sum \"\\]\n\\[\\[\\], \\[ \"apple \", 3\\], \\[ \"ap \"\\], \\[ \"app \", 2\\], \\[ \"ap \"\\]\\]\n**Output**\n\\[null, null, 3, null, 5\\]\n\n**Explanation**\nMapSum mapSum = new MapSum();\nmapSum.insert( \"apple \", 3);  \nmapSum.sum( \"ap \");           // return 3 (apple = 3)\nmapSum.insert( \"app \", 2);    \nmapSum.sum( \"ap \");           // return 5 (apple + app = 3 + 2 = 5)\n\n**Constraints:**\n\n*   `1 <= key.length, prefix.length <= 50`\n*   `key` and `prefix` consist of only lowercase English letters.\n*   `1 <= val <= 1000`\n*   At most `50` calls will be made to `insert` and `sum`.",
          "output": "class MapSum:\n    def __init__(self):\n        self.map = {}\n\n    def insert(self, key: str, val: int) -> None:\n        self.map[key] = val\n\n    def sum(self, prefix: str) -> int:\n        total = 0\n        for key, value in self.map.items():\n            if key.startswith(prefix):\n                total += value\n        return total\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` _if_ `s` _is **valid**_.\n\nThe following rules define a **valid** string:\n\n*   Any left parenthesis `'('` must have a corresponding right parenthesis `')'`.\n*   Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.\n*   Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.\n*   `'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `\" \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"()\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"(\\*)\"\n**Output:** true\n\n**Example 3:**\n\n**Input:** s = \"(\\*))\"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s[i]` is `'('`, `')'` or `'*'`.",
          "output": "def checkValidString(s: str) -> bool:\n    left_balance, right_balance = 0, 0\n\n    for i in range(len(s)):\n        left_balance += 1 if s[i] == '(' or s[i] == '*' else -1\n        right_balance += 1 if s[len(s) - 1 - i] == ')' or s[len(s) - 1 - i] == '*' else -1\n\n        if left_balance < 0 or right_balance < 0:\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `cards` of length `4`. You have four cards, each containing a number in the range `[1, 9]`. You should arrange the numbers on these cards in a mathematical expression using the operators `['+', '-', '*', '/']` and the parentheses `'('` and `')'` to get the value 24.\n\nYou are restricted with the following rules:\n\n*   The division operator `'/'` represents real division, not integer division.\n    *   For example, `4 / (1 - 2 / 3) = 4 / (1 / 3) = 12`.\n*   Every operation done is between two numbers. In particular, we cannot use `'-'` as a unary operator.\n    *   For example, if `cards = [1, 1, 1, 1]`, the expression `\"-1 - 1 - 1 - 1 \"` is **not allowed**.\n*   You cannot concatenate numbers together\n    *   For example, if `cards = [1, 2, 1, 2]`, the expression `\"12 + 12 \"` is not valid.\n\nReturn `true` if you can get such expression that evaluates to `24`, and `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** cards = \\[4,1,8,7\\]\n**Output:** true\n**Explanation:** (8-4) \\* (7-1) = 24\n\n**Example 2:**\n\n**Input:** cards = \\[1,2,1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   `cards.length == 4`\n*   `1 <= cards[i] <= 9`",
          "output": "from itertools import permutations\n\ndef helper(cards, target=24):\n    if len(cards) == 1:\n        return abs(cards[0] - target) < 1e-6\n\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            a, b = cards[i], cards[j]\n            rest = [cards[k] for k in range(len(cards)) if k != i and k != j]\n            for e in a + b, a - b, a * b, a / b:\n                if helper(rest + [e]):\n                    return True\n    return False\n\ndef canGet24(cards):\n    return helper(cards)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return `true` _if the_ `s` _can be palindrome after deleting **at most one** character from it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aba \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s =  \"abca \"\n**Output:** true\n**Explanation:** You could delete the character 'c'.\n\n**Example 3:**\n\n**Input:** s =  \"abc \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.",
          "output": "def validPalindrome(s: str) -> bool:\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            temp1, temp2 = i + 1, j\n            while temp1 < temp2 and s[temp1] == s[temp2]:\n                temp1 += 1\n                temp2 -= 1\n            if temp1 >= temp2:\n                return True\n\n            temp1, temp2 = i, j - 1\n            while temp1 < temp2 and s[temp1] == s[temp2]:\n                temp1 += 1\n                temp2 -= 1\n            if temp1 >= temp2:\n                return True\n\n            return False\n        i += 1\n        j -= 1\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `time` represented in the format `\"HH:MM \"`, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.\n\nYou may assume the given input string is always valid. For example, `\"01:34 \"`, `\"12:09 \"` are all valid. `\"1:34 \"`, `\"12:9 \"` are all invalid.\n\n",
          "input": "**Example 1:**\n\n**Input:** time =  \"19:34 \"\n**Output:**  \"19:39 \"\n**Explanation:** The next closest time choosing from digits **1**, **9**, **3**, **4**, is **19:39**, which occurs 5 minutes later.\nIt is not **19:33**, because this occurs 23 hours and 59 minutes later.\n\n**Example 2:**\n\n**Input:** time =  \"23:59 \"\n**Output:**  \"22:22 \"\n**Explanation:** The next closest time choosing from digits **2**, **3**, **5**, **9**, is **22:22**.\nIt may be assumed that the returned time is next day's time since it is smaller than the input time numerically.\n\n**Constraints:**\n\n*   `time.length == 5`\n*   `time` is a valid time in the form `\"HH:MM \"`.\n*   `0 <= HH < 24`\n*   `0 <= MM < 60`",
          "output": "def nextClosestTime(time: str) -> str:\n    digits = time[:2] + time[3:]\n    next_time = time\n    elapsed = float('inf')\n\n    for a in digits:\n        for b in digits:\n            for c in digits:\n                for d in digits:\n                    candidate_time = f\"{a}{b}:{c}{d}\"\n                    cand_elapsed = (int(candidate_time[:2]) * 60 + int(candidate_time[3:]) -\n                                    int(time[:2]) * 60 - int(time[3:]) + 1440) % 1440\n                    if 0 < cand_elapsed < elapsed:\n                        elapsed = cand_elapsed\n                        next_time = candidate_time\n\n    return next_time\n"
     },
     {
          "instruction": "Write python code for this problem: You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\n\nYou are given a list of strings `operations`, where `operations[i]` is the `ith` operation you must apply to the record and is one of the following:\n\n*   An integer `x`.\n    *   Record a new score of `x`.\n*   `'+'`.\n    *   Record a new score that is the sum of the previous two scores.\n*   `'D'`.\n    *   Record a new score that is the double of the previous score.\n*   `'C'`.\n    *   Invalidate the previous score, removing it from the record.\n\nReturn _the sum of all the scores on the record after applying all the operations_.\n\nThe test cases are generated such that the answer and all intermediate calculations fit in a **32-bit** integer and that all operations are valid.\n\n",
          "input": "**Example 1:**\n\n**Input:** ops = \\[ \"5 \", \"2 \", \"C \", \"D \", \"+ \"\\]\n**Output:** 30\n**Explanation:**\n \"5 \" - Add 5 to the record, record is now \\[5\\].\n \"2 \" - Add 2 to the record, record is now \\[5, 2\\].\n \"C \" - Invalidate and remove the previous score, record is now \\[5\\].\n \"D \" - Add 2 \\* 5 = 10 to the record, record is now \\[5, 10\\].\n \"+ \" - Add 5 + 10 = 15 to the record, record is now \\[5, 10, 15\\].\nThe total sum is 5 + 10 + 15 = 30.\n\n**Example 2:**\n\n**Input:** ops = \\[ \"5 \", \"-2 \", \"4 \", \"C \", \"D \", \"9 \", \"+ \", \"+ \"\\]\n**Output:** 27\n**Explanation:**\n \"5 \" - Add 5 to the record, record is now \\[5\\].\n \"-2 \" - Add -2 to the record, record is now \\[5, -2\\].\n \"4 \" - Add 4 to the record, record is now \\[5, -2, 4\\].\n \"C \" - Invalidate and remove the previous score, record is now \\[5, -2\\].\n \"D \" - Add 2 \\* -2 = -4 to the record, record is now \\[5, -2, -4\\].\n \"9 \" - Add 9 to the record, record is now \\[5, -2, -4, 9\\].\n \"+ \" - Add -4 + 9 = 5 to the record, record is now \\[5, -2, -4, 9, 5\\].\n \"+ \" - Add 9 + 5 = 14 to the record, record is now \\[5, -2, -4, 9, 5, 14\\].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n\n**Example 3:**\n\n**Input:** ops = \\[ \"1 \", \"C \"\\]\n**Output:** 0\n**Explanation:**\n \"1 \" - Add 1 to the record, record is now \\[1\\].\n \"C \" - Invalidate and remove the previous score, record is now \\[\\].\nSince the record is empty, the total sum is 0.\n\n**Constraints:**\n\n*   `1 <= operations.length <= 1000`\n*   `operations[i]` is `\"C \"`, `\"D \"`, `\"+ \"`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.\n*   For operation `\"+ \"`, there will always be at least two previous scores on the record.\n*   For operations `\"C \"` and `\"D \"`, there will always be at least one previous score on the record.",
          "output": "def calPoints(ops):\n    record = []\n    for op in ops:\n        if op == '+':\n            record.append(record[-1] + record[-2])\n        elif op == 'D':\n            record.append(record[-1] * 2)\n        elif op == 'C':\n            record.pop()\n        else:\n            record.append(int(op))\n    return sum(record)\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` bulbs in a row numbered from `1` to `n`. Initially, all the bulbs are turned off. We turn on **exactly one** bulb every day until all bulbs are on after `n` days.\n\nYou are given an array `bulbs` of length `n` where `bulbs[i] = x` means that on the `(i+1)th` day, we will turn on the bulb at position `x` where `i` is **0-indexed** and `x` is **1-indexed.**\n\nGiven an integer `k`, return _the **minimum day number** such that there exists two **turned on** bulbs that have **exactly** `k` bulbs between them that are **all turned off**. If there isn't such day, return `-1`._\n\n",
          "input": "**Example 1:**\n\n**Input:** bulbs = \\[1,3,2\\], k = 1\n**Output:** 2\n**Explanation:**\nOn the first day: bulbs\\[0\\] = 1, first bulb is turned on: \\[1,0,0\\]\nOn the second day: bulbs\\[1\\] = 3, third bulb is turned on: \\[1,0,1\\]\nOn the third day: bulbs\\[2\\] = 2, second bulb is turned on: \\[1,1,1\\]\nWe return 2 because on the second day, there were two on bulbs with one off bulb between them.\n\n**Example 2:**\n\n**Input:** bulbs = \\[1,2,3\\], k = 1\n**Output:** -1\n\n**Constraints:**\n\n*   `n == bulbs.length`\n*   `1 <= n <= 2 * 104`\n*   `1 <= bulbs[i] <= n`\n*   `bulbs` is a permutation of numbers from `1` to `n`.\n*   `0 <= k <= 2 * 104`",
          "output": "def kEmptySlots(bulbs, k):\n    days = [0] * len(bulbs)\n    for i, bulb in enumerate(bulbs):\n        days[bulb - 1] = i\n\n    ans = float('inf')\n    left = 0\n    right = k + 1\n    while right < len(days):\n        i = left + 1\n        for i in range(left + 1, right):\n            if days[i] < days[left] or days[i] < days[right]:\n                left = i\n                break\n        else:\n            ans = min(ans, max(days[left], days[right]))\n            left += 1\n            right += 1\n\n    return -1 if ans == float('inf') else ans + 1\n"
     },
     {
          "instruction": "Write python code for this problem: In this problem, a tree is an **undirected graph** that is connected and has no cycles.\n\nYou are given a graph that started as a tree with `n` nodes labeled from `1` to `n`, with one additional edge added. The added edge has two **different** vertices chosen from `1` to `n`, and was not an edge that already existed. The graph is represented as an array `edges` of length `n` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the graph.\n\nReturn _an edge that can be removed so that the resulting graph is a tree of_ `n` _nodes_. If there are multiple answers, return the answer that occurs last in the input.\n\n",
          "input": "**Example 1:**\n\n**Input:** edges = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]\n**Output:** \\[2,3\\]\n\n**Example 2:**\n\n**Input:** edges = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[1,4\\],\\[1,5\\]\\]\n**Output:** \\[1,4\\]\n\n**Constraints:**\n\n*   `n == edges.length`\n*   `3 <= n <= 1000`\n*   `edges[i].length == 2`\n*   `1 <= ai < bi <= edges.length`\n*   `ai != bi`\n*   There are no repeated edges.\n*   The given graph is connected.",
          "output": "from typing import List\n\ndef findRedundantConnection(edges: List[List[int]]) -> List[int]:\n    def find(parent, x):\n        if parent[x] != x:\n            parent[x] = find(parent, parent[x])\n        return parent[x]\n\n    parent = list(range(len(edges) + 1))\n    for edge in edges:\n        root1 = find(parent, edge[0])\n        root2 = find(parent, edge[1])\n        if root1 == root2:\n            return edge\n        parent[root1] = root2\n    return []\n"
     },
     {
          "instruction": "Write python code for this problem: In this problem, a rooted tree is a **directed** graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\n\nThe given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a **directed** edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`.\n\nReturn _an edge that can be removed so that the resulting graph is a rooted tree of_ `n` _nodes_. If there are multiple answers, return the answer that occurs last in the given 2D-array.\n\n",
          "input": "**Example 1:**\n\n**Input:** edges = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]\n**Output:** \\[2,3\\]\n\n**Example 2:**\n\n**Input:** edges = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,1\\],\\[1,5\\]\\]\n**Output:** \\[4,1\\]\n\n**Constraints:**\n\n*   `n == edges.length`\n*   `3 <= n <= 1000`\n*   `edges[i].length == 2`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`",
          "output": "def findRedundantDirectedConnection(edges):\n    parent = [0] * (len(edges) + 1)\n    candidateA = candidateB = None\n\n    for u, v in edges:\n        if parent[v] > 0:\n            candidateA = [parent[v], v]\n            candidateB = [u, v]\n        else:\n            parent[v] = u\n\n    for i in range(1, len(edges) + 1):\n        cycle = i\n        steps = len(edges)\n        while parent[cycle] != 0 and steps > 0:\n            cycle = parent[cycle]\n            steps -= 1\n        if steps == 0:\n            if not candidateA:\n                return [parent[i], i]\n            else:\n                return candidateA\n\n    return candidateB\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `a` and `b`, return _the minimum number of times you should repeat string_ `a` _so that string_ `b` _is a substring of it_. If it is impossible for `b`\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of `a` after repeating it, return `-1`.\n\n**Notice:** string `\"abc \"` repeated 0 times is `\" \"`, repeated 1 time is `\"abc \"` and repeated 2 times is `\"abcabc \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** a =  \"abcd \", b =  \"cdabcdab \"\n**Output:** 3\n**Explanation:** We return 3 because by repeating a three times  \"ab**cdabcdab**cd \", b is a substring of it.\n\n**Example 2:**\n\n**Input:** a =  \"a \", b =  \"aa \"\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= a.length, b.length <= 104`\n*   `a` and `b` consist of lowercase English letters.",
          "output": "def min_repeats_to_substring(a: str, b: str) -> int:\n    times = (len(b) + len(a) - 1) // len(a)\n\n    for i in range(2):\n        repeated_a = a * (times + i)\n        if b in repeated_a:\n            return times + i\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the length of the longest path, where each node in the path has the same value_. This path may or may not pass through the root.\n\n**The length of the path** between two nodes is represented by the number of edges between them.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,4,5,1,1,null,5\\]\n**Output:** 2\n**Explanation:** The shown image shows that the longest path of the same value (i.e. 5).\n\n**Example 2:**\n\n**Input:** root = \\[1,4,5,4,4,null,5\\]\n**Output:** 2\n**Explanation:** The shown image shows that the longest path of the same value (i.e. 4).\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-1000 <= Node.val <= 1000`\n*   The depth of the tree will not exceed `1000`.",
          "output": "def longestUnivaluePath(root):\n    def findUnivaluePath(node):\n        if not node:\n            return 0\n        left = findUnivaluePath(node.left)\n        right = findUnivaluePath(node.right)\n        left = left + 1 if node.left and node.left.val == node.val else 0\n        right = right + 1 if node.right and node.right.val == node.val else 0\n        maxLen[0] = max(maxLen[0], left + right)\n        return max(left, right)\n\n    maxLen = [0]\n    findUnivaluePath(root)\n    return maxLen[0]\n"
     },
     {
          "instruction": "Write python code for this problem: On an `n x n` chessboard, a knight starts at the cell `(row, column)` and attempts to make exactly `k` moves. The rows and columns are **0-indexed**, so the top-left cell is `(0, 0)`, and the bottom-right cell is `(n - 1, n - 1)`.\n\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\n\nThe knight continues moving until it has made exactly `k` moves or has moved off the chessboard.\n\nReturn _the probability that the knight remains on the board after it has stopped moving_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 2, row = 0, column = 0\n**Output:** 0.06250\n**Explanation:** There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.\n\n**Example 2:**\n\n**Input:** n = 1, k = 0, row = 0, column = 0\n**Output:** 1.00000\n\n**Constraints:**\n\n*   `1 <= n <= 25`\n*   `0 <= k <= 100`\n*   `0 <= row, column <= n - 1`",
          "output": "def knightProbability(self, n: int, k: int, row: int, column: int) -> float:\n    memo = [[[-1.0 for _ in range(k + 1)] for _ in range(n)] for _ in range(n)]\n    return self.helper(n, k, row, column, memo)\n\ndef helper(self, n, k, row, column, memo):\n    if row < 0 or row >= n or column < 0 or column >= n:\n        return 0.0\n    if k == 0:\n        return 1.0\n    if memo[row][column][k] >= 0:\n        return memo[row][column][k]\n\n    result = 0.0\n    moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    for move in moves:\n        result += self.helper(n, k - 1, row + move[0], column + move[1], memo) / 8\n\n    memo[row][column][k] = result\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, find three non-overlapping subarrays of length `k` with maximum sum and return them.\n\nReturn the result as a list of indices representing the starting position of each interval (**0-indexed**). If there are multiple answers, return the lexicographically smallest one.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,1,2,6,7,5,1\\], k = 2\n**Output:** \\[0,3,5\\]\n**Explanation:** Subarrays \\[1, 2\\], \\[2, 6\\], \\[7, 5\\] correspond to the starting indices \\[0, 3, 5\\].\nWe could have also taken \\[2, 1\\], but an answer of \\[1, 3, 5\\] would be lexicographically larger.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,1,2,1,2,1,2,1\\], k = 2\n**Output:** \\[0,2,4\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `1 <= nums[i] < 216`\n*   `1 <= k <= floor(nums.length / 3)`",
          "output": "def max_sum_of_three_subarrays(nums, k):\n    n = len(nums)\n    sums = [0] * (n - k + 1)\n    left, right = [0] * n, [0] * n\n\n    acc_sum = 0\n    for i in range(n):\n        acc_sum += nums[i]\n        if i >= k:\n            acc_sum -= nums[i - k]\n        if i >= k - 1:\n            sums[i - k + 1] = acc_sum\n\n    left[0] = 0\n    right[n - k] = n - k\n    for i in range(1, n - k + 1):\n        left[i] = i if sums[i] > sums[left[i - 1]] else left[i - 1]\n\n    for i in range(n - k - 1, -1, -1):\n        right[i] = i if sums[i] >= sums[right[i + 1]] else right[i + 1]\n\n    max_sum, ans = 0, [0] * 3\n    for i in range(k, n - 2 * k + 1):\n        left_idx, right_idx = left[i - k], right[i + k]\n        total_sum = sums[left_idx] + sums[i] + sums[right_idx]\n        if total_sum > max_sum:\n            max_sum = total_sum\n            ans = [left_idx, i, right_idx]\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\n\nYou are given an array of employees `employees` where:\n\n*   `employees[i].id` is the ID of the `ith` employee.\n*   `employees[i].importance` is the importance value of the `ith` employee.\n*   `employees[i].subordinates` is a list of the IDs of the direct subordinates of the `ith` employee.\n\nGiven an integer `id` that represents an employee's ID, return _the **total** importance value of this employee and all their direct and indirect subordinates_.\n\n",
          "input": "**Example 1:**\n\n**Input:** employees = \\[\\[1,5,\\[2,3\\]\\],\\[2,3,\\[\\]\\],\\[3,3,\\[\\]\\]\\], id = 1\n**Output:** 11\n**Explanation:** Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.\n\n**Example 2:**\n\n**Input:** employees = \\[\\[1,2,\\[5\\]\\],\\[5,-3,\\[\\]\\]\\], id = 5\n**Output:** -3\n**Explanation:** Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3.\n\n**Constraints:**\n\n*   `1 <= employees.length <= 2000`\n*   `1 <= employees[i].id <= 2000`\n*   All `employees[i].id` are **unique**.\n*   `-100 <= employees[i].importance <= 100`\n*   One employee has at most one direct leader and may have several subordinates.\n*   The IDs in `employees[i].subordinates` are valid IDs.",
          "output": "class Employee:\n    def __init__(self, id: int, importance: int, subordinates: list):\n        self.id = id\n        self.importance = importance\n        self.subordinates = subordinates\n\ndef getTotalImportance(employees, id):\n    emap = {emp.id: emp for emp in employees}\n    return dfs(emap, id)\n\ndef dfs(emap, id):\n    emp = emap[id]\n    return emp.importance + sum(dfs(emap, sub_id) for sub_id in emp.subordinates)\n"
     },
     {
          "instruction": "Write python code for this problem: We are given `n` different types of `stickers`. Each sticker has a lowercase English word on it.\n\nYou would like to spell out the given string `target` by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\n\nReturn _the minimum number of stickers that you need to spell out_ `target`. If the task is impossible, return `-1`.\n\n**Note:** In all test cases, all words were chosen randomly from the `1000` most common US English words, and `target` was chosen as a concatenation of two random words.\n\n",
          "input": "**Example 1:**\n\n**Input:** stickers = \\[ \"with \", \"example \", \"science \"\\], target =  \"thehat \"\n**Output:** 3\n**Explanation:**\nWe can use 2  \"with \" stickers, and 1  \"example \" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target  \"thehat \".\nAlso, this is the minimum number of stickers necessary to form the target string.\n\n**Example 2:**\n\n**Input:** stickers = \\[ \"notice \", \"possible \"\\], target =  \"basicbasic \"\n**Output:** -1\nExplanation:\nWe cannot form the target  \"basicbasic \" from cutting letters from the given stickers.\n\n**Constraints:**\n\n*   `n == stickers.length`\n*   `1 <= n <= 50`\n*   `1 <= stickers[i].length <= 10`\n*   `1 <= target.length <= 15`\n*   `stickers[i]` and `target` consist of lowercase English letters.We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]",
          "output": "from collections import Counter\nfrom functools import lru_cache\n\ndef minStickers(stickers, target):\n    target_count = Counter(target)\n    memo = {}\n    \n    for s in stickers:\n        sticker_count = Counter(s)\n        state = ''.join(sticker_count & target_count)\n        memo[state] = 1\n    \n    @lru_cache(None)\n    def dp(state):\n        counts = Counter(state)\n        ans = float('inf')\n        for key, value in memo.items():\n            if any(counts[ch] < key.count(ch) for ch in state): continue\n            ans = min(ans, dp(state.translate(str.maketrans('', '', key))) + value)\n        return -1 if ans == float('inf') else ans\n    \n    return dp(target)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words` and an integer `k`, return _the_ `k` _most frequent strings_.\n\nReturn the answer **sorted** by **the frequency** from highest to lowest. Sort the words with the same frequency by their **lexicographical order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"i \", \"love \", \"leetcode \", \"i \", \"love \", \"coding \"\\], k = 2\n**Output:** \\[ \"i \", \"love \"\\]\n**Explanation:**  \"i \" and  \"love \" are the two most frequent words.\nNote that  \"i \" comes before  \"love \" due to a lower alphabetical order.\n\n**Example 2:**\n\n**Input:** words = \\[ \"the \", \"day \", \"is \", \"sunny \", \"the \", \"the \", \"the \", \"sunny \", \"is \", \"is \"\\], k = 4\n**Output:** \\[ \"the \", \"is \", \"sunny \", \"day \"\\]\n**Explanation:**  \"the \",  \"is \",  \"sunny \" and  \"day \" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\n\n**Constraints:**\n\n*   `1 <= words.length <= 500`\n*   `1 <= words[i].length <= 10`\n*   `words[i]` consists of lowercase English letters.\n*   `k` is in the range `[1, The number of **unique** words[i]]`\n\n**Follow-up:** Could you solve it in `O(n log(k))` time and `O(n)` extra space?",
          "output": "import heapq\nfrom collections import Counter\n\ndef k_frequent_words(words, k):\n    word_count = Counter(words)\n    heap = [(-count, word) for word, count in word_count.items()]\n    heapq.heapify(heap)\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** true\n**Explanation:** The binary representation of 5 is: 101\n\n**Example 2:**\n\n**Input:** n = 7\n**Output:** false\n**Explanation:** The binary representation of 7 is: 111.\n\n**Example 3:**\n\n**Input:** n = 11\n**Output:** false\n**Explanation:** The binary representation of 11 is: 1011.\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`",
          "output": "def has_alternating_bits(n):\n    prev_bit = n % 2\n    n //= 2\n    while n > 0:\n        curr_bit = n % 2\n        if curr_bit == prev_bit:\n            return False\n        prev_bit = curr_bit\n        n //= 2\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nAn island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.\n\nReturn _the number of **distinct** islands_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,0,0,0\\],\\[1,1,0,0,0\\],\\[0,0,0,1,1\\],\\[0,0,0,1,1\\]\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,0,1,1\\],\\[1,0,0,0,0\\],\\[0,0,0,0,1\\],\\[1,1,0,1,1\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `grid[i][j]` is either `0` or `1`.",
          "output": "def numDistinctIslands(grid):\n    unique_islands = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                island_shape = []\n                dfs(grid, i, j, i, j, island_shape)\n                island_shape.sort()\n                unique_islands.add(tuple(island_shape))\n    return len(unique_islands)\n\ndef dfs(grid, i, j, i0, j0, shape):\n    if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] == 1:\n        grid[i][j] = 2\n        shape.append((i - i0, j - j0))\n        dfs(grid, i - 1, j, i0, j0, shape)\n        dfs(grid, i + 1, j, i0, j0, shape)\n        dfs(grid, i, j - 1, i0, j0, shape)\n        dfs(grid, i, j + 1, i0, j0, shape)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nThe **area** of an island is the number of cells with a value `1` in the island.\n\nReturn _the maximum **area** of an island in_ `grid`. If there is no island, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,0,1,0,0,0,0,1,0,0,0,0,0\\],\\[0,0,0,0,0,0,0,1,1,1,0,0,0\\],\\[0,1,1,0,1,0,0,0,0,0,0,0,0\\],\\[0,1,0,0,1,1,0,0,1,0,1,0,0\\],\\[0,1,0,0,1,1,0,0,1,1,1,0,0\\],\\[0,0,0,0,0,0,0,0,0,0,1,0,0\\],\\[0,0,0,0,0,0,0,1,1,1,0,0,0\\],\\[0,0,0,0,0,0,0,1,1,0,0,0,0\\]\\]\n**Output:** 6\n**Explanation:** The answer is not 11, because the island must be connected 4-directionally.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,0,0,0,0,0,0,0\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `grid[i][j]` is either `0` or `1`.",
          "output": "def maxAreaOfIsland(grid):\n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return 0\n        grid[i][j] = 0\n        return 1 + dfs(i-1, j) + dfs(i+1, j) + dfs(i, j-1) + dfs(i, j+1)\n\n    max_area = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j]:\n                max_area = max(max_area, dfs(i, j))\n    return max_area\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s`, return the number of non-empty substrings that have the same number of `0`'s and `1`'s, and all the `0`'s and all the `1`'s in these substrings are grouped consecutively.\n\nSubstrings that occur multiple times are counted the number of times they occur.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"00110011 \"\n**Output:** 6\n**Explanation:** There are 6 substrings that have equal number of consecutive 1's and 0's:  \"0011 \",  \"01 \",  \"1100 \",  \"10 \",  \"0011 \", and  \"01 \".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso,  \"00110011 \" is not a valid substring because all the 0's (and 1's) are not grouped together.\n\n**Example 2:**\n\n**Input:** s =  \"10101 \"\n**Output:** 4\n**Explanation:** There are 4 substrings:  \"10 \",  \"01 \",  \"10 \",  \"01 \" that have equal number of consecutive 1's and 0's.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`.How many valid binary substrings exist in \"000111\", and how many in \"11100\"?  What about \"00011100\"?",
          "output": "def count_binary_substrings(s: str) -> int:\n    prev, curr, result = 0, 1, 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            curr += 1\n        else:\n            result += min(prev, curr)\n            prev, curr = curr, 1\n    return result + min(prev, curr)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a non-empty array of non-negative integers `nums`, the **degree** of this array is defined as the maximum frequency of any one of its elements.\n\nYour task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,2,3,1\\]\n**Output:** 2\n**Explanation:** \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n\\[1, 2, 2, 3, 1\\], \\[1, 2, 2, 3\\], \\[2, 2, 3, 1\\], \\[1, 2, 2\\], \\[2, 2, 3\\], \\[2, 2\\]\nThe shortest length is 2. So return 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,2,3,1,4,2\\]\n**Output:** 6\n**Explanation:** \nThe degree is 3 because the element 2 is repeated 3 times.\nSo \\[2,2,3,1,4,2\\] is the shortest subarray, therefore returning 6.\n\n**Constraints:**\n\n*   `nums.length` will be between 1 and 50,000.\n*   `nums[i]` will be an integer between 0 and 49,999.Say 5 is the only element that occurs the most number of times - for example, nums = [1, 5, 2, 3, 5, 4, 5, 6].  What is the answer?",
          "output": "def findShortestSubArray(nums):\n    freq_map, start_map = {}, {}\n    max_freq, min_length = 0, len(nums)\n\n    for i, num in enumerate(nums):\n        if num not in start_map:\n            start_map[num] = i\n        freq_map[num] = freq_map.get(num, 0) + 1\n\n        freq = freq_map[num]\n        if freq > max_freq:\n            max_freq = freq\n            min_length = i - start_map[num] + 1\n        elif freq == max_freq:\n            min_length = min(min_length, i - start_map[num] + 1)\n\n    return min_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,3,2,3,5,2,1\\], k = 4\n**Output:** true\n**Explanation:** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\], k = 3\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 16`\n*   `1 <= nums[i] <= 104`\n*   The frequency of each element is in the range `[1, 4]`.We can figure out what target each subset must sum to.  Then, let's recursively search, where at each call to our function, we choose which of k subsets the next value will join.",
          "output": "def canPartitionKSubsets(nums, k):\n    total_sum = sum(nums)\n    if total_sum % k != 0:\n        return False\n    target = total_sum // k\n    visited = [False] * len(nums)\n    return dfs(nums, visited, 0, target, 0, k)\n\ndef dfs(nums, visited, start, target, curr_sum, k):\n    if k == 1:\n        return True\n    if curr_sum == target:\n        return dfs(nums, visited, 0, target, 0, k - 1)\n    for i in range(start, len(nums)):\n        if not visited[i] and curr_sum + nums[i] <= target:\n            visited[i] = True\n            if dfs(nums, visited, i + 1, target, curr_sum + nums[i], k):\n                return True\n            visited[i] = False\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: There are several squares being dropped onto the X-axis of a 2D plane.\n\nYou are given a 2D integer array `positions` where `positions[i] = [lefti, sideLengthi]` represents the `ith` square with a side length of `sideLengthi` that is dropped with its left edge aligned with X-coordinate `lefti`.\n\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands **on the top side of another square** or **on the X-axis**. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\n\nAfter each square is dropped, you must record the **height of the current tallest stack of squares**.\n\nReturn _an integer array_ `ans` _where_ `ans[i]` _represents the height described above after dropping the_ `ith` _square_.\n\n",
          "input": "**Example 1:**\n\n**Input:** positions = \\[\\[1,2\\],\\[2,3\\],\\[6,1\\]\\]\n**Output:** \\[2,5,5\\]\n**Explanation:**\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of \\[2, 5, 5\\].\n\n**Example 2:**\n\n**Input:** positions = \\[\\[100,100\\],\\[200,100\\]\\]\n**Output:** \\[100,100\\]\n**Explanation:**\nAfter the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of \\[100, 100\\].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.\n\n**Constraints:**\n\n*   `1 <= positions.length <= 1000`\n*   `1 <= lefti <= 108`\n*   `1 <= sideLengthi <= 106`If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?",
          "output": "def fallingSquares(positions):\n    ans = []\n    intervals = []\n\n    for p in positions:\n        L, size = p\n        R = L + size\n        h = size\n        for h2, R2 in intervals:\n            if R2 > L and R > R2:\n                h = max(h, size + h2)\n\n        maxHeight = max((h2 for h2, R2 in intervals), default=0)\n        ans.append(max(maxHeight, h))\n        intervals.append((h, R))\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nAn island is considered to be the same as another if they have the same shape, or have the same shape after **rotation** (90, 180, or 270 degrees only) or **reflection** (left/right direction or up/down direction).\n\nReturn _the number of **distinct** islands_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,0,0,0\\],\\[1,0,0,0,0\\],\\[0,0,0,0,1\\],\\[0,0,0,1,1\\]\\]\n**Output:** 1\n**Explanation:** The two islands are considered the same because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,0,0,0\\],\\[1,1,0,0,0\\],\\[0,0,0,1,1\\],\\[0,0,0,1,1\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `grid[i][j]` is either `0` or `1`.",
          "output": "class Solution:\n    def numDistinctIslands(self, grid: List[List[int]]) -> int:\n        def dfs(r, c, r0, c0):\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c]:\n                grid[r][c] = 0\n                island.append((r - r0, c - c0))\n                dfs(r + 1, c, r0, c0)\n                dfs(r - 1, c, r0, c0)\n                dfs(r, c + 1, r0, c0)\n                dfs(r, c - 1, r0, c0)\n\n        def normalize(island):\n            ret = []\n            for p in island:\n                x, y = p\n                ret += [(x, y), (x, -y), (-x, y), (-x, -y), (y, x), (y, -x), (-y, x), (-y, -x)]\n            ret.sort()\n            return tuple(ret)\n\n        distinctIslands = set()\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c]:\n                    island = []\n                    dfs(r, c, r, c)\n                    distinctIslands.add(normalize(island))\n        return len(distinctIslands)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s1` and `s2`, return _the lowest **ASCII** sum of deleted characters to make two strings equal_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"sea \", s2 =  \"eat \"\n**Output:** 231\n**Explanation:** Deleting  \"s \" from  \"sea \" adds the ASCII value of  \"s \" (115) to the sum.\nDeleting  \"t \" from  \"eat \" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n\n**Example 2:**\n\n**Input:** s1 =  \"delete \", s2 =  \"leet \"\n**Output:** 403\n**Explanation:** Deleting  \"dee \" from  \"delete \" to turn the string into  \"let \",\nadds 100\\[d\\] + 101\\[e\\] + 101\\[e\\] to the sum.\nDeleting  \"e \" from  \"leet \" adds 101\\[e\\] to the sum.\nAt the end, both strings are equal to  \"let \", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into  \"lee \" or  \"eet \", we would get answers of 433 or 417, which are higher.\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 1000`\n*   `s1` and `s2` consist of lowercase English letters.Let dp(i, j) be the answer for inputs s1[i:] and s2[j:].",
          "output": "def minimumDeleteSum(s1: str, s2: str) -> int:\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    for i in range(1, len(s1) + 1):\n        dp[i][0] = dp[i - 1][0] + ord(s1[i - 1])\n    for j in range(1, len(s2) + 1):\n        dp[0][j] = dp[0][j - 1] + ord(s2[j - 1])\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + ord(s1[i - 1]), dp[i][j - 1] + ord(s2[j - 1]))\n    return dp[len(s1)][len(s2)]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and an integer `k`, return _the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than_ `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[10,5,2,6\\], k = 100\n**Output:** 8\n**Explanation:** The 8 subarrays that have product less than 100 are:\n\\[10\\], \\[5\\], \\[2\\], \\[6\\], \\[10, 5\\], \\[5, 2\\], \\[2, 6\\], \\[5, 2, 6\\]\nNote that \\[10, 5, 2\\] is not included as the product of 100 is not strictly less than k.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3\\], k = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `1 <= nums[i] <= 1000`\n*   `0 <= k <= 106`For each j, let opt(j) be the smallest i so that nums[i] * nums[i+1] * ... * nums[j] is less than k.  opt is an increasing function.",
          "output": "def numSubarrayProductLessThanK(nums, k):\n    if k <= 1:\n        return 0\n    prod = 1\n    count = 0\n    left = 0\n    for right in range(len(nums)):\n        prod *= nums[right]\n        while prod >= k:\n            prod /= nums[left]\n            left += 1\n        count += right - left + 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[1,3,2,8,4,9\\], fee = 2\n**Output:** 8\n**Explanation:** The maximum profit can be achieved by:\n- Buying at prices\\[0\\] = 1\n- Selling at prices\\[3\\] = 8\n- Buying at prices\\[4\\] = 4\n- Selling at prices\\[5\\] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n\n**Example 2:**\n\n**Input:** prices = \\[1,3,7,5,10,3\\], fee = 3\n**Output:** 6\n\n**Constraints:**\n\n*   `1 <= prices.length <= 5 * 104`\n*   `1 <= prices[i] < 5 * 104`\n*   `0 <= fee < 5 * 104`Consider the first K stock prices.  At the end, the only legal states are that you don't own a share of stock, or that you do.  Calculate the most profit you could have under each of these two cases.",
          "output": "def maxProfit(prices, fee):\n    cash, hold = 0, -prices[0]\n    for price in prices:\n        temp = cash\n        cash = max(cash, hold + price - fee)\n        hold = max(hold, temp - price)\n    return cash\n"
     },
     {
          "instruction": "Write python code for this problem: Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.\n\nImplement the `MaxStack` class:\n\n*   `MaxStack()` Initializes the stack object.\n*   `void push(int x)` Pushes element `x` onto the stack.\n*   `int pop()` Removes the element on top of the stack and returns it.\n*   `int top()` Gets the element on the top of the stack without removing it.\n*   `int peekMax()` Retrieves the maximum element in the stack without removing it.\n*   `int popMax()` Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the **top-most** one.\n\nYou must come up with a solution that supports `O(1)` for each `top` call and `O(logn)` for each other call.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MaxStack \",  \"push \",  \"push \",  \"push \",  \"top \",  \"popMax \",  \"top \",  \"peekMax \",  \"pop \",  \"top \"\\]\n\\[\\[\\], \\[5\\], \\[1\\], \\[5\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, null, 5, 5, 1, 5, 1, 5\\]\n\n**Explanation**\nMaxStack stk = new MaxStack();\nstk.push(5);   // \\[**5**\\] the top of the stack and the maximum number is 5.\nstk.push(1);   // \\[5, **1**\\] the top of the stack is 1, but the maximum is 5.\nstk.push(5);   // \\[5, 1, **5**\\] the top of the stack is 5, which is also the maximum, because it is the top most one.\nstk.top();     // return 5, \\[5, 1, **5**\\] the stack did not change.\nstk.popMax();  // return 5, \\[5, **1**\\] the stack is changed now, and the top is different from the max.\nstk.top();     // return 1, \\[5, **1**\\] the stack did not change.\nstk.peekMax(); // return 5, \\[5, **1**\\] the stack did not change.\nstk.pop();     // return 1, \\[**5**\\] the top of the stack and the max element is now 5.\nstk.top();     // return 5, \\[**5**\\] the stack did not change.\n\n**Constraints:**\n\n*   `-107 <= x <= 107`\n*   At most `105` calls will be made to `push`, `pop`, `top`, `peekMax`, and `popMax`.\n*   There will be **at least one element** in the stack when `pop`, `top`, `peekMax`, or `popMax` is called.",
          "output": "from sortedcontainers import SortedList\n\nclass MaxStack:\n    def __init__(self):\n        self.mainStack = []\n        self.maxSet = SortedList()\n\n    def push(self, x: int) -> None:\n        self.mainStack.append(x)\n        self.maxSet.add(x)\n\n    def pop(self) -> int:\n        top = self.mainStack.pop()\n        self.maxSet.remove(top)\n        return top\n\n    def top(self) -> int:\n        return self.mainStack[-1]\n\n    def peekMax(self) -> int:\n        return self.maxSet[-1]\n\n    def popMax(self) -> int:\n        max_val = self.maxSet.pop()\n        tempStack = []\n        while self.mainStack[-1] != max_val:\n            tempStack.append(self.mainStack.pop())\n        self.mainStack.pop()\n        while tempStack:\n            self.mainStack.append(tempStack.pop())\n        return max_val\n"
     },
     {
          "instruction": "Write python code for this problem: We have two special characters:\n\n*   The first character can be represented by one bit `0`.\n*   The second character can be represented by two bits (`10` or `11`).\n\nGiven a binary array `bits` that ends with `0`, return `true` if the last character must be a one-bit character.\n\n",
          "input": "**Example 1:**\n\n**Input:** bits = \\[1,0,0\\]\n**Output:** true\n**Explanation:** The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n\n**Example 2:**\n\n**Input:** bits = \\[1,1,1,0\\]\n**Output:** false\n**Explanation:** The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\n\n**Constraints:**\n\n*   `1 <= bits.length <= 1000`\n*   `bits[i]` is either `0` or `1`.Keep track of where the next character starts.  At the end, you want to know if you started on the last bit.",
          "output": "def is_one_bit_character(bits):\n    i = 0\n    while i < len(bits) - 1:\n        i += bits[i] + 1\n    return i == len(bits) - 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `nums1` and `nums2`, return _the maximum length of a subarray that appears in **both** arrays_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2,3,2,1\\], nums2 = \\[3,2,1,4,7\\]\n**Output:** 3\n**Explanation:** The repeated subarray with maximum length is \\[3,2,1\\].\n\n**Example 2:**\n\n**Input:** nums1 = \\[0,0,0,0,0\\], nums2 = \\[0,0,0,0,0\\]\n**Output:** 5\n**Explanation:** The repeated subarray with maximum length is \\[0,0,0,0,0\\].\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `0 <= nums1[i], nums2[i] <= 100`Use dynamic programming.  dp[i][j] will be the answer for inputs A[i:], B[j:].",
          "output": "def findLength(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    maxLength = 0\n\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if nums1[i] == nums2[j]:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n                maxLength = max(maxLength, dp[i][j])\n\n    return maxLength\n"
     },
     {
          "instruction": "Write python code for this problem: The **distance of a pair** of integers `a` and `b` is defined as the absolute difference between `a` and `b`.\n\nGiven an integer array `nums` and an integer `k`, return _the_ `kth` _smallest **distance among all the pairs**_ `nums[i]` _and_ `nums[j]` _where_ `0 <= i < j < nums.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,1\\], k = 1\n**Output:** 0\n**Explanation:** Here are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1\\], k = 2\n**Output:** 0\n\n**Example 3:**\n\n**Input:** nums = \\[1,6,1\\], k = 3\n**Output:** 5\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `2 <= n <= 104`\n*   `0 <= nums[i] <= 106`\n*   `1 <= k <= n * (n - 1) / 2`Binary search for the answer.  How can you check how many pairs have distance <= X?",
          "output": "def smallestDistancePair(nums, k):\n    nums.sort()\n    low, high = 0, nums[-1] - nums[0]\n    \n    while low < high:\n        mid = (low + high) // 2\n        count, left = 0, 0\n\n        for right in range(len(nums)):\n            while nums[right] - nums[left] > mid:\n                left += 1\n            count += (right - left)\n\n        if count < k:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return low\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words` representing an English Dictionary, return _the longest word in_ `words` _that can be built one character at a time by other words in_ `words`.\n\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n\nNote that the word should be built from left to right with each additional character being added to the end of a previous word.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"w \", \"wo \", \"wor \", \"worl \", \"world \"\\]\n**Output:**  \"world \"\n**Explanation:** The word  \"world \" can be built one character at a time by  \"w \",  \"wo \",  \"wor \", and  \"worl \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \", \"banana \", \"app \", \"appl \", \"ap \", \"apply \", \"apple \"\\]\n**Output:**  \"apple \"\n**Explanation:** Both  \"apply \" and  \"apple \" can be built from other words in the dictionary. However,  \"apple \" is lexicographically smaller than  \"apply \".\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 30`\n*   `words[i]` consists of lowercase English letters.For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set.",
          "output": "def longest_word(words):\n    built_words = set()\n    result = ''\n\n    for word in sorted(words):\n        if len(word) == 1 or word[:-1] in built_words:\n            if len(word) > len(result):\n                result = word\n            built_words.add(word)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are **emails** representing emails of the account.\n\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\n\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails **in sorted order**. The accounts themselves can be returned in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** accounts = \\[\\[ \"John \", \"johnsmith@mail.com \", \"john\\_newyork@mail.com \"\\],\\[ \"John \", \"johnsmith@mail.com \", \"john00@mail.com \"\\],\\[ \"Mary \", \"mary@mail.com \"\\],\\[ \"John \", \"johnnybravo@mail.com \"\\]\\]\n**Output:** \\[\\[ \"John \", \"john00@mail.com \", \"john\\_newyork@mail.com \", \"johnsmith@mail.com \"\\],\\[ \"Mary \", \"mary@mail.com \"\\],\\[ \"John \", \"johnnybravo@mail.com \"\\]\\]\n**Explanation:**\nThe first and second John's are the same person as they have the common email  \"johnsmith@mail.com \".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer \\[\\['Mary', 'mary@mail.com'\\], \\['John', 'johnnybravo@mail.com'\\], \n\\['John', 'john00@mail.com', 'john\\_newyork@mail.com', 'johnsmith@mail.com'\\]\\] would still be accepted.\n\n**Example 2:**\n\n**Input:** accounts = \\[\\[ \"Gabe \", \"Gabe0@m.co \", \"Gabe3@m.co \", \"Gabe1@m.co \"\\],\\[ \"Kevin \", \"Kevin3@m.co \", \"Kevin5@m.co \", \"Kevin0@m.co \"\\],\\[ \"Ethan \", \"Ethan5@m.co \", \"Ethan4@m.co \", \"Ethan0@m.co \"\\],\\[ \"Hanzo \", \"Hanzo3@m.co \", \"Hanzo1@m.co \", \"Hanzo0@m.co \"\\],\\[ \"Fern \", \"Fern5@m.co \", \"Fern1@m.co \", \"Fern0@m.co \"\\]\\]\n**Output:** \\[\\[ \"Ethan \", \"Ethan0@m.co \", \"Ethan4@m.co \", \"Ethan5@m.co \"\\],\\[ \"Gabe \", \"Gabe0@m.co \", \"Gabe1@m.co \", \"Gabe3@m.co \"\\],\\[ \"Hanzo \", \"Hanzo0@m.co \", \"Hanzo1@m.co \", \"Hanzo3@m.co \"\\],\\[ \"Kevin \", \"Kevin0@m.co \", \"Kevin3@m.co \", \"Kevin5@m.co \"\\],\\[ \"Fern \", \"Fern0@m.co \", \"Fern1@m.co \", \"Fern5@m.co \"\\]\\]\n\n**Constraints:**\n\n*   `1 <= accounts.length <= 1000`\n*   `2 <= accounts[i].length <= 10`\n*   `1 <= accounts[i][j].length <= 30`\n*   `accounts[i][0]` consists of English letters.\n*   `accounts[i][j] (for j > 0)` is a valid email.For every pair of emails in the same account, draw an edge between those emails.  The problem is about enumerating the connected components of this graph.",
          "output": "from collections import defaultdict\n\ndef accountsMerge(accounts):\n    def dfs(id, visited, merged_emails):\n        if id in visited:\n            return\n        visited.add(id)\n        for email in accounts[id][1:]:\n            merged_emails.add(email)\n            dfs(email_to_id[email], visited, merged_emails)\n\n    email_to_id = {}\n    for i, account in enumerate(accounts):\n        for email in account[1:]:\n            email_to_id[email] = i\n\n    result = []\n    visited = set()\n    for i, account in enumerate(accounts):\n        if i not in visited:\n            merged_emails = set()\n            dfs(i, visited, merged_emails)\n            result.append([account[0]] + sorted(merged_emails))\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a C++ program, remove comments from it. The program source is an array of strings `source` where `source[i]` is the `ith` line of the source code. This represents the result of splitting the original source code string by the newline character `'\\n'`.\n\nIn C++, there are two types of comments, line comments, and block comments.\n\n*   The string `\"// \"` denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\n*   The string `\"/* \"` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `\"*/ \"` should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string `\"/*/ \"` does not yet end the block comment, as the ending would be overlapping the beginning.\n\nThe first effective comment takes precedence over others.\n\n*   For example, if the string `\"// \"` occurs in a block comment, it is ignored.\n*   Similarly, if the string `\"/* \"` occurs in a line or block comment, it is also ignored.\n\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\n\nThere will be no control characters, single quote, or double quote characters.\n\n*   For example, `source = \"string s = \"/* Not a comment. */ \"; \"` will not be a test case.\n\nAlso, nothing else such as defines or macros will interfere with the comments.\n\nIt is guaranteed that every open block comment will eventually be closed, so `\"/* \"` outside of a line or block comment always starts a new comment.\n\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\n\nAfter removing the comments from the source code, return _the source code in the same format_.\n\n",
          "input": "**Example 1:**\n\n**Input:** source = \\[ \"/\\*Test program \\*/ \",  \"int main() \",  \"{  \",  \"  // variable declaration  \",  \"int a, b, c; \",  \"/\\* This is a test \",  \"   multiline   \",  \"   comment for  \",  \"   testing \\*/ \",  \"a = b + c; \",  \"} \"\\]\n**Output:** \\[ \"int main() \", \"{  \", \"   \", \"int a, b, c; \", \"a = b + c; \", \"} \"\\]\n**Explanation:** The line by line code is visualized as below:\n/\\*Test program \\*/\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/\\* This is a test\n   multiline  \n   comment for \n   testing \\*/\na = b + c;\n}\nThe string /\\* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\n**Example 2:**\n\n**Input:** source = \\[ \"a/\\*comment \",  \"line \",  \"more\\_comment\\*/b \"\\]\n**Output:** \\[ \"ab \"\\]\n**Explanation:** The original source string is  \"a/\\*comment\\\\nline\\\\nmore\\_comment\\*/b \", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string  \"ab \", which when delimited by newline characters becomes \\[ \"ab \"\\].\n\n**Constraints:**\n\n*   `1 <= source.length <= 100`\n*   `0 <= source[i].length <= 80`\n*   `source[i]` consists of printable **ASCII** characters.\n*   Every open block comment is eventually closed.\n*   There are no single-quote or double-quote in the input.Carefully parse each line according to the following rules:\r\n\r\n* If we start a block comment and we aren't in a block, then we will skip over the next two characters and change our state to be in a block.\r\n\r\n* If we end a block comment and we are in a block, then we will skip over the next two characters and change our state to be *not* in a block.\r\n\r\n* If we start a line comment and we aren't in a block, then we will ignore the rest of the line.\r\n\r\n* If we aren't in a block comment (and it wasn't the start of a comment), we will record the character we are at.\r\n\r\n* At the end of each line, if we aren't in a block, we will record the line.",
          "output": "def removeComments(self, source: List[str]) -> List[str]:\n    result = []\n    buffer = []\n    in_block_comment = False\n\n    for line in source:\n        i = 0\n        while i < len(line):\n            if in_block_comment:\n                if i < len(line) - 1 and line[i] == '*' and line[i + 1] == '/':\n                    in_block_comment = False\n                    i += 1\n            else:\n                if i < len(line) - 1 and line[i] == '/' and line[i + 1] == '*':\n                    in_block_comment = True\n                    i += 1\n                elif i < len(line) - 1 and line[i] == '/' and line[i + 1] == '/':\n                    break\n                else:\n                    buffer.append(line[i])\n            i += 1\n\n        if not in_block_comment and buffer:\n            result.append(''.join(buffer))\n            buffer.clear()\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: This question is about implementing a basic elimination algorithm for Candy Crush.\n\nGiven an `m x n` integer array `board` representing the grid of candy where `board[i][j]` represents the type of candy. A value of `board[i][j] == 0` represents that the cell is empty.\n\nThe given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:\n\n*   If three or more candies of the same type are adjacent vertically or horizontally, crush them all at the same time - these positions become empty.\n*   After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. No new candies will drop outside the top boundary.\n*   After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.\n*   If there does not exist more candies that can be crushed (i.e., the board is stable), then return the current board.\n\nYou need to perform the above rules until the board becomes stable, then return _the stable board_.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[110,5,112,113,114\\],\\[210,211,5,213,214\\],\\[310,311,3,313,314\\],\\[410,411,412,5,414\\],\\[5,1,512,3,3\\],\\[610,4,1,613,614\\],\\[710,1,2,713,714\\],\\[810,1,2,1,1\\],\\[1,1,2,2,2\\],\\[4,1,4,4,1014\\]\\]\n**Output:** \\[\\[0,0,0,0,0\\],\\[0,0,0,0,0\\],\\[0,0,0,0,0\\],\\[110,0,0,0,114\\],\\[210,0,0,0,214\\],\\[310,0,0,113,314\\],\\[410,0,0,213,414\\],\\[610,211,112,313,614\\],\\[710,311,412,613,714\\],\\[810,411,512,713,1014\\]\\]\n\n**Example 2:**\n\n**Input:** board = \\[\\[1,3,5,5,2\\],\\[3,4,3,3,1\\],\\[3,2,4,5,2\\],\\[2,4,4,5,5\\],\\[1,4,4,1,1\\]\\]\n**Output:** \\[\\[1,3,0,0,0\\],\\[3,4,0,5,2\\],\\[3,2,0,3,1\\],\\[2,4,0,5,2\\],\\[1,4,3,1,1\\]\\]\n\n**Constraints:**\n\n*   `m == board.length`\n*   `n == board[i].length`\n*   `3 <= m, n <= 50`\n*   `1 <= board[i][j] <= 2000`Carefully perform the \"crush\" and \"gravity\" steps.  In the crush step, flag each candy that should be removed, then go through and crush each flagged candy.  In the gravity step, collect the candy in each column and then rewrite the column appropriately.  Do these steps repeatedly until there's no work left to do.",
          "output": "def candyCrush(board):\n    rows = len(board)\n    cols = len(board[0])\n    toDo = False\n    \n    for r in range(rows):\n        for c in range(cols - 2):\n            val = abs(board[r][c])\n            if val and val == abs(board[r][c + 1]) and val == abs(board[r][c + 2]):\n                board[r][c] = board[r][c + 1] = board[r][c + 2] = -val\n                toDo = True\n                \n    for r in range(rows - 2):\n        for c in range(cols):\n            val = abs(board[r][c])\n            if val and val == abs(board[r + 1][c]) and val == abs(board[r + 2][c]):\n                board[r][c] = board[r + 1][c] = board[r + 2][c] = -val\n                toDo = True\n                \n    for c in range(cols):\n        wr = rows - 1\n        for r in range(rows - 1, -1, -1):\n            if board[r][c] > 0:\n                board[wr][c] = board[r][c]\n                wr -= 1\n                \n        for r in range(wr, -1, -1):\n            board[r][c] = 0\n                \n    return candyCrush(board) if toDo else board\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums`, calculate the **pivot index** of this array.\n\nThe **pivot index** is the index where the sum of all the numbers **strictly** to the left of the index is equal to the sum of all the numbers **strictly** to the index's right.\n\nIf the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.\n\nReturn _the **leftmost pivot index**_. If no such index exists, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,7,3,6,5,6\\]\n**Output:** 3\n**Explanation:**\nThe pivot index is 3.\nLeft sum = nums\\[0\\] + nums\\[1\\] + nums\\[2\\] = 1 + 7 + 3 = 11\nRight sum = nums\\[4\\] + nums\\[5\\] = 5 + 6 = 11\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** -1\n**Explanation:**\nThere is no index that satisfies the conditions in the problem statement.\n\n**Example 3:**\n\n**Input:** nums = \\[2,1,-1\\]\n**Output:** 0\n**Explanation:**\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums\\[1\\] + nums\\[2\\] = 1 + -1 = 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-1000 <= nums[i] <= 1000`\n\n**Note:** This question is the same as 1991: [https://leetcode.com/problems/find-the-middle-index-in-array/](https://leetcode.com/problems/find-the-middle-index-in-array/)We can precompute prefix sums P[i] = nums[0] + nums[1] + ... + nums[i-1].\r\nThen for each index, the left sum is P[i], and the right sum is P[P.length - 1] - P[i] - nums[i].",
          "output": "def pivotIndex(nums):\n    total_sum = sum(nums)\n    left_sum = 0\n    for i, num in enumerate(nums):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list and an integer `k`, split the linked list into `k` consecutive linked list parts.\n\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\n\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\n\nReturn _an array of the_ `k` _parts_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3\\], k = 5\n**Output:** \\[\\[1\\],\\[2\\],\\[3\\],\\[\\],\\[\\]\\]\n**Explanation:**\nThe first element output\\[0\\] has output\\[0\\].val = 1, output\\[0\\].next = null.\nThe last element output\\[4\\] is null, but its string representation as a ListNode is \\[\\].\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4,5,6,7,8,9,10\\], k = 3\n**Output:** \\[\\[1,2,3,4\\],\\[5,6,7\\],\\[8,9,10\\]\\]\n**Explanation:**\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 1000]`.\n*   `0 <= Node.val <= 1000`\n*   `1 <= k <= 50`If there are N nodes in the list, and k parts, then every part has N/k elements, except the first N%k parts have an extra one.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef splitListToParts(root, k):\n    result = [None] * k\n    list_size = 0\n    current_node = root\n    while current_node:\n        list_size += 1\n        current_node = current_node.next\n\n    base_size = list_size // k\n    extra = list_size % k\n\n    current_node = root\n    for i in range(k):\n        if not current_node:\n            break\n        result[i] = current_node\n        current_part_size = base_size + (1 if i < extra else 0)\n        for _ in range(current_part_size - 1):\n            current_node = current_node.next\n        next_node = current_node.next\n        current_node.next = None\n        current_node = next_node\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `formula` representing a chemical formula, return _the count of each atom_.\n\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\n\nOne or more digits representing that element's count may follow if the count is greater than `1`. If the count is `1`, no digits will follow.\n\n*   For example, `\"H2O \"` and `\"H2O2 \"` are possible, but `\"H1O2 \"` is impossible.\n\nTwo formulas are concatenated together to produce another formula.\n\n*   For example, `\"H2O2He3Mg4 \"` is also a formula.\n\nA formula placed in parentheses, and a count (optionally added) is also a formula.\n\n*   For example, `\"(H2O2) \"` and `\"(H2O2)3 \"` are formulas.\n\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than `1`), followed by the second name (in sorted order), followed by its count (if that count is more than `1`), and so on.\n\nThe test cases are generated so that all the values in the output fit in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** formula =  \"H2O \"\n**Output:**  \"H2O \"\n**Explanation:** The count of elements are {'H': 2, 'O': 1}.\n\n**Example 2:**\n\n**Input:** formula =  \"Mg(OH)2 \"\n**Output:**  \"H2MgO2 \"\n**Explanation:** The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\n\n**Example 3:**\n\n**Input:** formula =  \"K4(ON(SO3)2)2 \"\n**Output:**  \"K4N2O14S4 \"\n**Explanation:** The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\n\n**Constraints:**\n\n*   `1 <= formula.length <= 1000`\n*   `formula` consists of English letters, digits, `'('`, and `')'`.\n*   `formula` is always valid.To parse formula[i:], when we see a `'('`, we will parse recursively whatever is inside the brackets (up to the correct closing ending bracket) and add it to our count, multiplying by the following multiplicity if there is one.\r\n\r\nOtherwise, we should see an uppercase character: we will parse the rest of the letters to get the name, and add that (plus the multiplicity if there is one.)",
          "output": "from collections import Counter\n\ndef parse(formula, i):\n    counts = Counter()\n    while i[0] < len(formula):\n        if formula[i[0]] == '(':\n            i[0] += 1\n            temp = parse(formula, i)\n            count = 0\n            while i[0] < len(formula) and formula[i[0]].isdigit():\n                count = count * 10 + int(formula[i[0]])\n                i[0] += 1\n            if count == 0: count = 1\n            for name, c in temp.items():\n                counts[name] += c * count\n        elif formula[i[0]] == ')':\n            i[0] += 1\n            return counts\n        else:\n            name = formula[i[0]]\n            i[0] += 1\n            while i[0] < len(formula) and formula[i[0]].islower():\n                name += formula[i[0]]\n                i[0] += 1\n            count = 0\n            while i[0] < len(formula) and formula[i[0]].isdigit():\n                count = count * 10 + int(formula[i[0]])\n                i[0] += 1\n            if count == 0: count = 1\n            counts[name] += count\n    return counts\n\ndef countOfAtoms(formula):\n    i = [0]\n    counts = parse(formula, i)\n    ans = []\n    for name, count in counts.items():\n        ans.append(name)\n        if count > 1: ans.append(str(count))\n    return ''.join(ans)\n"
     },
     {
          "instruction": "Write python code for this problem: Given strings `s1` and `s2`, return _the minimum contiguous substring part of_ `s1`_, so that_ `s2` _is a subsequence of the part_.\n\nIf there is no such window in `s1` that covers all characters in `s2`, return the empty string `\" \"`. If there are multiple such minimum-length windows, return the one with the **left-most starting index**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"abcdebdde \", s2 =  \"bde \"\n**Output:**  \"bcde \"\n**Explanation:** \n \"bcde \" is the answer because it occurs before  \"bdde \" which has the same length.\n \"deb \" is not a smaller window because the elements of s2 in the window must occur in order.\n\n**Example 2:**\n\n**Input:** s1 =  \"jmeqksfrsdcmsiwvaovztaqenprpvnbstl \", s2 =  \"u \"\n**Output:**  \" \"\n\n**Constraints:**\n\n*   `1 <= s1.length <= 2 * 104`\n*   `1 <= s2.length <= 100`\n*   `s1` and `s2` consist of lowercase English letters.Let dp[j][e] = s be the largest index for which S[s:e+1] has T[:j] as a substring.",
          "output": "def min_window_sub_sequence(s1: str, s2: str) -> str:\n    m, n = len(s1), len(s2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for j in range(0, m + 1):\n        dp[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[j - 1] == s2[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    start, length = 0, m + 1\n    for j in range(1, m + 1):\n        if dp[n][j] != 0 and j - dp[n][j] < length:\n            start = dp[n][j]\n            length = j - start\n\n    return \"\" if length == m + 1 else s1[start:start + length]\n"
     },
     {
          "instruction": "Write python code for this problem: A **self-dividing number** is a number that is divisible by every digit it contains.\n\n*   For example, `128` is **a self-dividing number** because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`.\n\nA **self-dividing number** is not allowed to contain the digit zero.\n\nGiven two integers `left` and `right`, return _a list of all the **self-dividing numbers** in the range_ `[left, right]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** left = 1, right = 22\n**Output:** \\[1,2,3,4,5,6,7,8,9,11,12,15,22\\]\n\n**Example 2:**\n\n**Input:** left = 47, right = 85\n**Output:** \\[48,55,66,77\\]\n\n**Constraints:**\n\n*   `1 <= left <= right <= 104`For each number in the range, check whether it is self dividing by converting that number to a character array (or string in Python), then checking that each digit is nonzero and divides the original number.",
          "output": "def is_self_dividing(num):\n    n = num\n    while n:\n        digit = n % 10\n        if digit == 0 or num % digit != 0:\n            return False\n        n //= 10\n    return True\n\ndef self_dividing_numbers(left, right):\n    return [i for i in range(left, right+1) if is_self_dividing(i)]\n"
     },
     {
          "instruction": "Write python code for this problem: You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **double booking**.\n\nA **double booking** happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\n\nThe event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\nImplement the `MyCalendar` class:\n\n*   `MyCalendar()` Initializes the calendar object.\n*   `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **double booking**. Otherwise, return `false` and do not add the event to the calendar.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyCalendar \",  \"book \",  \"book \",  \"book \"\\]\n\\[\\[\\], \\[10, 20\\], \\[15, 25\\], \\[20, 30\\]\\]\n**Output**\n\\[null, true, false, true\\]\n\n**Explanation**\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.\n\n**Constraints:**\n\n*   `0 <= start < end <= 109`\n*   At most `1000` calls will be made to `book`.Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added.",
          "output": "from bisect import bisect_left, insort\n\nclass MyCalendar:\n\n    def __init__(self):\n        self.calendar = []\n\n    def book(self, start, end):\n        i = bisect_left(self.calendar, [start, end])\n        if i % 2 == 1:\n            return False\n        if i > 0 and self.calendar[i-1] > start:\n            return False\n        if i < len(self.calendar) and end > self.calendar[i]:\n            return False\n        insort(self.calendar, start)\n        insort(self.calendar, end)\n        return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string s, return _the number of different non-empty palindromic subsequences in_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA subsequence of a string is obtained by deleting zero or more characters from the string.\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\nTwo sequences `a1, a2, ...` and `b1, b2, ...` are different if there is some `i` for which `ai != bi`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"bccb \"\n**Output:** 6\n**Explanation:** The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice.\n\n**Example 2:**\n\n**Input:** s =  \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba \"\n**Output:** 104860361\n**Explanation:** There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'a'`, `'b'`, `'c'`, or `'d'`.Let dp(i, j) be the answer for the string T = S[i:j+1] including the empty sequence. The answer is the number of unique characters in T, plus palindromes of the form \"a_a\", \"b_b\", \"c_c\", and \"d_d\", where \"_\" represents zero or more characters.",
          "output": "def countPalindromicSubsequences(s: str) -> int:\n    n = len(s)\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(4)]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n + 1):\n            c = ord(s[i]) - ord('a')\n            dp[c][j] = sum(dp[k][j - 1] for k in range(4)) - dp[c][i] + 2\n            dp[c][j] = (dp[c][j] + MOD) % MOD\n\n    return sum(dp[c][n] for c in range(4)) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **triple booking**.\n\nA **triple booking** happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\n\nThe event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\nImplement the `MyCalendarTwo` class:\n\n*   `MyCalendarTwo()` Initializes the calendar object.\n*   `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **triple booking**. Otherwise, return `false` and do not add the event to the calendar.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyCalendarTwo \",  \"book \",  \"book \",  \"book \",  \"book \",  \"book \",  \"book \"\\]\n\\[\\[\\], \\[10, 20\\], \\[50, 60\\], \\[10, 40\\], \\[5, 15\\], \\[5, 10\\], \\[25, 55\\]\\]\n**Output**\n\\[null, true, true, true, false, true, true\\]\n\n**Explanation**\nMyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked. \nmyCalendarTwo.book(50, 60); // return True, The event can be booked. \nmyCalendarTwo.book(10, 40); // return True, The event can be double booked. \nmyCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in \\[25, 40) will be double booked with the third event, the time \\[40, 50) will be single booked, and the time \\[50, 55) will be double booked with the second event.\n\n**Constraints:**\n\n*   `0 <= start < end <= 109`\n*   At most `1000` calls will be made to `book`.Store two sorted lists of intervals: one list will be all times that are at least single booked, and another list will be all times that are definitely double booked.  If none of the double bookings conflict, then the booking will succeed, and you should update your single and double bookings accordingly.",
          "output": "class MyCalendarTwo:\n    def __init__(self):\n        self.singles = []\n        self.doubles = []\n\n    def book(self, start: int, end: int) -> bool:\n        for d_start, d_end in self.doubles:\n            if start < d_end and end > d_start:\n                return False\n        for s_start, s_end in self.singles:\n            if start < s_end and end > s_start:\n                self.doubles.append((max(start, s_start), min(end, s_end)))\n        self.singles.append((start, end))\n        return True\n"
     },
     {
          "instruction": "Write python code for this problem: A `k`\\-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.)\n\nYou are given some events `[startTime, endTime)`, after each given event, return an integer `k` representing the maximum `k`\\-booking between all the previous events.\n\nImplement the `MyCalendarThree` class:\n\n*   `MyCalendarThree()` Initializes the object.\n*   `int book(int startTime, int endTime)` Returns an integer `k` representing the largest integer such that there exists a `k`\\-booking in the calendar.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyCalendarThree \",  \"book \",  \"book \",  \"book \",  \"book \",  \"book \",  \"book \"\\]\n\\[\\[\\], \\[10, 20\\], \\[50, 60\\], \\[10, 40\\], \\[5, 15\\], \\[5, 10\\], \\[25, 55\\]\\]\n**Output**\n\\[null, 1, 1, 2, 3, 3, 3\\]\n\n**Explanation**\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1\nmyCalendarThree.book(50, 60); // return 1\nmyCalendarThree.book(10, 40); // return 2\nmyCalendarThree.book(5, 15); // return 3\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3\n\n**Constraints:**\n\n*   `0 <= startTime < endTime <= 109`\n*   At most `400` calls will be made to `book`.Treat each interval [start, end) as two events \"start\" and \"end\", and process them in sorted order.",
          "output": "from collections import defaultdict\nimport heapq\n\nclass MyCalendarThree:\n\n    def __init__(self):\n        self.timeline = defaultdict(int)\n\n    def book(self, start: int, end: int) -> int:\n        self.timeline[start] += 1\n        self.timeline[end] -= 1\n        ongoing, k = 0, 0\n        for value in self.timeline.values():\n            k = max(k, ongoing + value)\n            ongoing += value\n        return k\n"
     },
     {
          "instruction": "Write python code for this problem: An image is represented by an `m x n` integer grid `image` where `image[i][j]` represents the pixel value of the image.\n\nYou are also given three integers `sr`, `sc`, and `color`. You should perform a **flood fill** on the image starting from the pixel `image[sr][sc]`.\n\nTo perform a **flood fill**, consider the starting pixel, plus any pixels connected **4-directionally** to the starting pixel of the same color as the starting pixel, plus any pixels connected **4-directionally** to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with `color`.\n\nReturn _the modified image after performing the flood fill_.\n\n",
          "input": "**Example 1:**\n\n**Input:** image = \\[\\[1,1,1\\],\\[1,1,0\\],\\[1,0,1\\]\\], sr = 1, sc = 1, color = 2\n**Output:** \\[\\[2,2,2\\],\\[2,2,0\\],\\[2,0,1\\]\\]\n**Explanation:** From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n\n**Example 2:**\n\n**Input:** image = \\[\\[0,0,0\\],\\[0,0,0\\]\\], sr = 0, sc = 0, color = 0\n**Output:** \\[\\[0,0,0\\],\\[0,0,0\\]\\]\n**Explanation:** The starting pixel is already colored 0, so no changes are made to the image.\n\n**Constraints:**\n\n*   `m == image.length`\n*   `n == image[i].length`\n*   `1 <= m, n <= 50`\n*   `0 <= image[i][j], color < 216`\n*   `0 <= sr < m`\n*   `0 <= sc < n`Write a recursive function that paints the pixel if it's the correct color, then recurses on neighboring pixels.",
          "output": "def floodFill(image, sr, sc, newColor):\n    startColor = image[sr][sc]\n    def fill(sr, sc):\n        if not (0 <= sr < len(image)) or not (0 <= sc < len(image[0])) or image[sr][sc] != startColor or image[sr][sc] == newColor: \n            return\n        image[sr][sc] = newColor\n        fill(sr - 1, sc)\n        fill(sr + 1, sc)\n        fill(sr, sc - 1)\n        fill(sr, sc + 1)\n    \n    fill(sr, sc)\n    return image\n"
     },
     {
          "instruction": "Write python code for this problem: We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode \"` can be represented as `arr = [ \"I \", \"am \",happy \", \"with \", \"leetcode \"]`.\n\nGiven two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.\n\nReturn _`true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar_.\n\nTwo sentences are similar if:\n\n*   They have **the same length** (i.e., the same number of words)\n*   `sentence1[i]` and `sentence2[i]` are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar, and the words `b` and `c` are similar, `a` and `c` are **not necessarily similar**.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence1 = \\[ \"great \", \"acting \", \"skills \"\\], sentence2 = \\[ \"fine \", \"drama \", \"talent \"\\], similarPairs = \\[\\[ \"great \", \"fine \"\\],\\[ \"drama \", \"acting \"\\],\\[ \"skills \", \"talent \"\\]\\]\n**Output:** true\n**Explanation:** The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.\n\n**Example 2:**\n\n**Input:** sentence1 = \\[ \"great \"\\], sentence2 = \\[ \"great \"\\], similarPairs = \\[\\]\n**Output:** true\n**Explanation:** A word is similar to itself.\n\n**Example 3:**\n\n**Input:** sentence1 = \\[ \"great \"\\], sentence2 = \\[ \"doubleplus \", \"good \"\\], similarPairs = \\[\\[ \"great \", \"doubleplus \"\\]\\]\n**Output:** false\n**Explanation:** As they don't have the same length, we return false.\n\n**Constraints:**\n\n*   `1 <= sentence1.length, sentence2.length <= 1000`\n*   `1 <= sentence1[i].length, sentence2[i].length <= 20`\n*   `sentence1[i]` and `sentence2[i]` consist of English letters.\n*   `0 <= similarPairs.length <= 1000`\n*   `similarPairs[i].length == 2`\n*   `1 <= xi.length, yi.length <= 20`\n*   `xi` and `yi` consist of lower-case and upper-case English letters.\n*   All the pairs `(xi, yi)` are **distinct**.Two words w1 and w2 are similar if and only if w1 == w2, (w1, w2) was a pair, or (w2, w1) was a pair.",
          "output": "from collections import defaultdict\n\ndef areSentencesSimilar(sentence1, sentence2, similarPairs):\n    if len(sentence1) != len(sentence2): return False\n    similarityMap = defaultdict(set)\n    for pair in similarPairs:\n        similarityMap[pair[0]].add(pair[1])\n        similarityMap[pair[1]].add(pair[0])\n    for i in range(len(sentence1)):\n        if sentence1[i] != sentence2[i] and sentence2[i] not in similarityMap[sentence1[i]]:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: We are given an array `asteroids` of integers representing asteroids in a row.\n\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\n\n",
          "input": "**Example 1:**\n\n**Input:** asteroids = \\[5,10,-5\\]\n**Output:** \\[5,10\\]\n**Explanation:** The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n\n**Example 2:**\n\n**Input:** asteroids = \\[8,-8\\]\n**Output:** \\[\\]\n**Explanation:** The 8 and -8 collide exploding each other.\n\n**Example 3:**\n\n**Input:** asteroids = \\[10,2,-5\\]\n**Output:** \\[10\\]\n**Explanation:** The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n\n**Constraints:**\n\n*   `2 <= asteroids.length <= 104`\n*   `-1000 <= asteroids[i] <= 1000`\n*   `asteroids[i] != 0`Say a row of asteroids is stable.  What happens when a new asteroid is added on the right?",
          "output": "def asteroidCollision(asteroids):\n    s = []\n    for num in asteroids:\n        if num > 0 or not s or s[-1] < 0:\n            s.append(num)\n        elif s[-1] <= -num:\n            if s[-1] < -num:\n                s.pop()\n                s.append(num)\n            else:\n                s.pop()\n    return s\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string expression representing a Lisp-like expression to return the integer value of.\n\nThe syntax for these expressions is given as follows.\n\n*   An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n*   (An integer could be positive or negative.)\n*   A let expression takes the form `\"(let v1 e1 v2 e2 ... vn en expr) \"`, where let is always the string `\"let \"`, then there are one or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let expression is the value of the expression `expr`.\n*   An add expression takes the form `\"(add e1 e2) \"` where add is always the string `\"add \"`, there are always two expressions `e1`, `e2` and the result is the addition of the evaluation of `e1` and the evaluation of `e2`.\n*   A mult expression takes the form `\"(mult e1 e2) \"` where mult is always the string `\"mult \"`, there are always two expressions `e1`, `e2` and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\n*   For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names `\"add \"`, `\"let \"`, and `\"mult \"` are protected and will never be used as variable names.\n*   Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"(let x 2 (mult x (let x 3 y 4 (add x y)))) \"\n**Output:** 14\n**Explanation:** In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3.\n\n**Example 2:**\n\n**Input:** expression =  \"(let x 3 x 2 x) \"\n**Output:** 2\n**Explanation:** Assignment in let statements is processed sequentially.\n\n**Example 3:**\n\n**Input:** expression =  \"(let x 1 y 2 x (add x y) (add x y)) \"\n**Output:** 5\n**Explanation:** The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5.\n\n**Constraints:**\n\n*   `1 <= expression.length <= 2000`\n*   There are no leading or trailing spaces in `expression`.\n*   All tokens are separated by a single space in `expression`.\n*   The answer and all intermediate calculations of that answer are guaranteed to fit in a **32-bit** integer.\n*   The expression is guaranteed to be legal and evaluate to an integer.* If the expression starts with a digit or '-', it's an integer: return it.\r\n\r\n* If the expression starts with a letter, it's a variable.  Recall it by checking the current scope in reverse order.\r\n\r\n* Otherwise, group the tokens (variables or expressions) within this expression by counting the \"balance\" `bal` of the occurrences of `'('` minus the number of occurrences of `')'`.  When the balance is zero, we have ended a token.  For example, `(add 1 (add 2 3))` should have tokens `'1'` and `'(add 2 3)'`.\r\n\r\n* For add and mult expressions, evaluate each token and return the addition or multiplication of them.\r\n\r\n* For let expressions, evaluate each expression sequentially and assign it to the variable in the current scope, then return the evaluation of the final expression.",
          "output": "def evaluate(expression: str) -> int:\n    def calculate(s, start, end, variables):\n        if s[start] == '(':\n            if s[start + 1:start + 4] == \"add\":\n                first = start + 5\n                second = first\n                value1 = calculate(s, first, end, variables)\n                second = s.index(' ', second) + 1\n                value2 = calculate(s, second, end, variables)\n                return value1 + value2\n            elif s[start + 1:start + 5] == \"mult\":\n                first = start + 6\n                second = first\n                value1 = calculate(s, first, end, variables)\n                second = s.index(' ', second) + 1\n                value2 = calculate(s, second, end, variables)\n                return value1 * value2\n            else:\n                inner = variables.copy()\n                idx = start + 5\n                while idx < end - 1 and s[idx] != '(':\n                    temp = idx\n                    idx = s.index(' ', idx + 1)\n                    var = s[temp:idx]\n                    temp = idx + 1\n                    if s[temp] == '(':\n                        idx += 1\n                    else:\n                        idx = s.index(' ', idx + 1)\n                    result = calculate(s, temp, idx, variables)\n                    inner[var] = result\n                    variables = inner\n                return calculate(s, end - 1, end, variables)\n        else:\n            if s[start].isdigit() or s[start] == '-':\n                end = s.find(' ', start) if ' ' in s[start:end] else end\n                return int(s[start:end])\n            else:\n                end = s.find(' ', start) if ' ' in s[start:end] else end\n                return variables[s[start:end]]\n\n    return calculate(expression, 0, len(expression), {})\n"
     },
     {
          "instruction": "Write python code for this problem: We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode \"` can be represented as `arr = [ \"I \", \"am \",happy \", \"with \", \"leetcode \"]`.\n\nGiven two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.\n\nReturn `true` _if `sentence1` and `sentence2` are similar, or_ `false` _if they are not similar_.\n\nTwo sentences are similar if:\n\n*   They have **the same length** (i.e., the same number of words)\n*   `sentence1[i]` and `sentence2[i]` are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is transitive. For example, if the words `a` and `b` are similar, and the words `b` and `c` are similar, then `a` and `c` are **similar**.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence1 = \\[ \"great \", \"acting \", \"skills \"\\], sentence2 = \\[ \"fine \", \"drama \", \"talent \"\\], similarPairs = \\[\\[ \"great \", \"good \"\\],\\[ \"fine \", \"good \"\\],\\[ \"drama \", \"acting \"\\],\\[ \"skills \", \"talent \"\\]\\]\n**Output:** true\n**Explanation:** The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.\n\n**Example 2:**\n\n**Input:** sentence1 = \\[ \"I \", \"love \", \"leetcode \"\\], sentence2 = \\[ \"I \", \"love \", \"onepiece \"\\], similarPairs = \\[\\[ \"manga \", \"onepiece \"\\],\\[ \"platform \", \"anime \"\\],\\[ \"leetcode \", \"platform \"\\],\\[ \"anime \", \"manga \"\\]\\]\n**Output:** true\n**Explanation:**  \"leetcode \" -->  \"platform \" -->  \"anime \" -->  \"manga \" -->  \"onepiece \".\nSince  \"leetcode is similar to  \"onepiece \" and the first two words are the same, the two sentences are similar.\n\n**Example 3:**\n\n**Input:** sentence1 = \\[ \"I \", \"love \", \"leetcode \"\\], sentence2 = \\[ \"I \", \"love \", \"onepiece \"\\], similarPairs = \\[\\[ \"manga \", \"hunterXhunter \"\\],\\[ \"platform \", \"anime \"\\],\\[ \"leetcode \", \"platform \"\\],\\[ \"anime \", \"manga \"\\]\\]\n**Output:** false\n**Explanation:**  \"leetcode \" is not similar to  \"onepiece \".\n\n**Constraints:**\n\n*   `1 <= sentence1.length, sentence2.length <= 1000`\n*   `1 <= sentence1[i].length, sentence2[i].length <= 20`\n*   `sentence1[i]` and `sentence2[i]` consist of lower-case and upper-case English letters.\n*   `0 <= similarPairs.length <= 2000`\n*   `similarPairs[i].length == 2`\n*   `1 <= xi.length, yi.length <= 20`\n*   `xi` and `yi` consist of English letters.Consider the graphs where each pair in \"pairs\" is an edge.  Two words are similar if they are the same, or are in the same connected component of this graph.",
          "output": "from collections import defaultdict\n\ndef areSentencesSimilar(sentence1, sentence2, pairs):\n    if len(sentence1) != len(sentence2):\n        return False\n    \n    graph = defaultdict(set)\n    for a, b in pairs:\n        graph[a].add(b)\n        graph[b].add(a)\n\n    for a, b in zip(sentence1, sentence2):\n        if a == b:\n            continue\n        if b not in graph[a]:\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: An integer has **monotone increasing digits** if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.\n\nGiven an integer `n`, return _the largest number that is less than or equal to_ `n` _with **monotone increasing digits**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10\n**Output:** 9\n\n**Example 2:**\n\n**Input:** n = 1234\n**Output:** 1234\n\n**Example 3:**\n\n**Input:** n = 332\n**Output:** 299\n\n**Constraints:**\n\n*   `0 <= n <= 109`Build the answer digit by digit, adding the largest possible one that would make the number still less than or equal to N.",
          "output": "def monotoneIncreasingDigits(n: int) -> int:\n    n_str = [c for c in str(n)]\n\n    i = len(n_str) - 1\n    while i > 0:\n        if n_str[i] < n_str[i - 1]:\n            n_str[i - 1] = chr(ord(n_str[i - 1]) - 1)\n            for j in range(i, len(n_str)):\n                n_str[j] = '9'\n        i -= 1\n\n    return int(''.join(n_str))\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `temperatures` represents the daily temperatures, return _an array_ `answer` _such that_ `answer[i]` _is the number of days you have to wait after the_ `ith` _day to get a warmer temperature_. If there is no future day for which this is possible, keep `answer[i] == 0` instead.\n\n",
          "input": "**Example 1:**\n\n**Input:** temperatures = \\[73,74,75,71,69,72,76,73\\]\n**Output:** \\[1,1,4,2,1,1,0,0\\]\n\n**Example 2:**\n\n**Input:** temperatures = \\[30,40,50,60\\]\n**Output:** \\[1,1,1,0\\]\n\n**Example 3:**\n\n**Input:** temperatures = \\[30,60,90\\]\n**Output:** \\[1,1,0\\]\n\n**Constraints:**\n\n*   `1 <= temperatures.length <= 105`\n*   `30 <= temperatures[i] <= 100`If the temperature is say, 70 today, then in the future a warmer temperature must be either 71, 72, 73, ..., 99, or 100.  We could remember when all of them occur next.",
          "output": "def daily_temperatures(temperatures):\n    result = [0] * len(temperatures)\n    stack = []\n\n    for i, temp in enumerate(temperatures):\n        while stack and temp > temperatures[stack[-1]]:\n            idx = stack.pop()\n            result[idx] = i - idx\n        stack.append(i)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. You want to maximize the number of points you get by performing the following operation any number of times:\n\n*   Pick any `nums[i]` and delete it to earn `nums[i]` points. Afterwards, you must delete **every** element equal to `nums[i] - 1` and **every** element equal to `nums[i] + 1`.\n\nReturn _the **maximum number of points** you can earn by applying the above operation some number of times_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,4,2\\]\n**Output:** 6\n**Explanation:** You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = \\[2\\].\n- Delete 2 to earn 2 points. nums = \\[\\].\nYou earn a total of 6 points.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,3,3,3,4\\]\n**Output:** 9\n**Explanation:** You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = \\[3,3\\].\n- Delete a 3 again to earn 3 points. nums = \\[3\\].\n- Delete a 3 once more to earn 3 points. nums = \\[\\].\nYou earn a total of 9 points.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `1 <= nums[i] <= 104`If you take a number, you might as well take them all.  Keep track of what the value is of the subset of the input with maximum M when you either take or don't take M.",
          "output": "def max_points(nums):\n    dp = [0] * 100001\n    max_points = 0\n    for num in nums:\n        dp[num] += 1\n    for i in range(2, len(dp)):\n        dp[i] = max(dp[i - 1], dp[i - 2] + i * dp[i])\n        max_points = max(max_points, dp[i])\n    return max_points\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.\n\n*   `0` means the cell is empty, so you can pass through,\n*   `1` means the cell contains a cherry that you can pick up and pass through, or\n*   `-1` means the cell contains a thorn that blocks your way.\n\nReturn _the maximum number of cherries you can collect by following the rules below_:\n\n*   Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).\n*   After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.\n*   When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.\n*   If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1,-1\\],\\[1,0,-1\\],\\[1,1,1\\]\\]\n**Output:** 5\n**Explanation:** The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes \\[\\[0,1,-1\\],\\[0,0,-1\\],\\[0,0,0\\]\\].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,-1\\],\\[1,-1,1\\],\\[-1,1,1\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == grid.length`\n*   `n == grid[i].length`\n*   `1 <= n <= 50`\n*   `grid[i][j]` is `-1`, `0`, or `1`.\n*   `grid[0][0] != -1`\n*   `grid[n - 1][n - 1] != -1`",
          "output": "def cherryPickup(self, grid: List[List[int]]) -> int:\n    def dp(r1, c1, c2):\n        r2 = r1 + c1 - c2\n        if (r1 == len(grid) or r2 == len(grid) or c1 == len(grid) or c2 == len(grid) or\n            grid[r1][c1] == -1 or grid[r2][c2] == -1):\n            return float('-inf')\n        elif r1 == len(grid) - 1 and c1 == len(grid) - 1:\n            return grid[r1][c1]\n        elif memo[r1][c1][c2] != float('-inf'):\n            return memo[r1][c1][c2]\n        else:\n            memo[r1][c1][c2] = grid[r1][c1] + (r1 != r2) * grid[r2][c2]\n            max_cherries = max(dp(r1 + 1, c1, c2 + 1), dp(r1, c1 + 1, c2 + 1),\n                               dp(r1 + 1, c1, c2), dp(r1, c1 + 1, c2))\n            memo[r1][c1][c2] += max_cherries\n        \n        return memo[r1][c1][c2]\n    \n    N = len(grid)\n    memo = [[[float('-inf')] * N for _1 in range(N)] for _2 in range(N)]\n    return max(0, dp(0, 0, 0))\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the string after replacing every uppercase letter with the same lowercase letter_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"Hello \"\n**Output:**  \"hello \"\n\n**Example 2:**\n\n**Input:** s =  \"here \"\n**Output:**  \"here \"\n\n**Example 3:**\n\n**Input:** s =  \"LOVELY \"\n**Output:**  \"lovely \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of printable ASCII characters.Most languages support lowercase conversion for a string data type. However, that is certainly not the purpose of the problem. Think about how the implementation of the lowercase function call can be done easily. Think ASCII! Think about the different capital letters and their ASCII codes and how that relates to their lowercase counterparts. Does there seem to be any pattern there? Any mathematical relationship that we can use?",
          "output": "def toLowerCase(s: str) -> str:\n    return s.lower()\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree where every node has **a unique value** and a target integer `k`, return _the value of the **nearest leaf node** to the target_ `k` _in the tree_.\n\n**Nearest to a leaf** means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,3,2\\], k = 1\n**Output:** 2\n**Explanation:** Either 2 or 3 is the nearest leaf node to the target of 1.\n\n**Example 2:**\n\n**Input:** root = \\[1\\], k = 1\n**Output:** 1\n**Explanation:** The nearest leaf node is the root node itself.\n\n**Example 3:**\n\n**Input:** root = \\[1,2,3,4,null,null,null,5,null,6\\], k = 2\n**Output:** 3\n**Explanation:** The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `1 <= Node.val <= 1000`\n*   All the values of the tree are **unique**.\n*   There exist some node in the tree where `Node.val == k`.Convert the tree to a general graph, and do a breadth-first search.  Alternatively, find the closest leaf for every node on the path from root to target.",
          "output": "def to_lower_case(s: str) -> str:\n    return s.lower()\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node `k`. Return _the **minimum** time it takes for all the_ `n` _nodes to receive the signal_. If it is impossible for all the `n` nodes to receive the signal, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** times = \\[\\[2,1,1\\],\\[2,3,1\\],\\[3,4,1\\]\\], n = 4, k = 2\n**Output:** 2\n\n**Example 2:**\n\n**Input:** times = \\[\\[1,2,1\\]\\], n = 2, k = 1\n**Output:** 1\n\n**Example 3:**\n\n**Input:** times = \\[\\[1,2,1\\]\\], n = 2, k = 2\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= k <= n <= 100`\n*   `1 <= times.length <= 6000`\n*   `times[i].length == 3`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   `0 <= wi <= 100`\n*   All the pairs `(ui, vi)` are **unique**. (i.e., no multiple edges.)We visit each node at some time, and if that time is better than the fastest time we've reached this node, we travel along outgoing edges in sorted order.  Alternatively, we could use Dijkstra's algorithm.",
          "output": "import heapq\n\ndef networkDelayTime(times, n, k):\n    graph = {i: [] for i in range(1, n+1)}\n    for u, v, w in times:\n        graph[u].append((v, w))\n\n    dist = {u: float('inf') for u in range(1, n+1)}\n    dist[k] = 0\n\n    pq = [(0, k)]\n\n    while pq:\n        curr_dist, u = heapq.heappop(pq)\n\n        for v, weight in graph[u]:\n            new_dist = curr_dist + weight\n            if new_dist < dist[v]:\n                dist[v] = new_dist\n                heapq.heappush(pq, (new_dist, v))\n\n    max_time = max(dist.values())\n    return max_time if max_time < float('inf') else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of characters `letters` that is sorted in **non-decreasing order**, and a character `target`. There are **at least two different** characters in `letters`.\n\nReturn _the smallest character in_ `letters` _that is lexicographically greater than_ `target`. If such a character does not exist, return the first character in `letters`.\n\n",
          "input": "**Example 1:**\n\n**Input:** letters = \\[ \"c \", \"f \", \"j \"\\], target =  \"a \"\n**Output:**  \"c \"\n**Explanation:** The smallest character that is lexicographically greater than 'a' in letters is 'c'.\n\n**Example 2:**\n\n**Input:** letters = \\[ \"c \", \"f \", \"j \"\\], target =  \"c \"\n**Output:**  \"f \"\n**Explanation:** The smallest character that is lexicographically greater than 'c' in letters is 'f'.\n\n**Example 3:**\n\n**Input:** letters = \\[ \"x \", \"x \", \"y \", \"y \"\\], target =  \"z \"\n**Output:**  \"x \"\n**Explanation:** There are no characters in letters that is lexicographically greater than 'z' so we return letters\\[0\\].\n\n**Constraints:**\n\n*   `2 <= letters.length <= 104`\n*   `letters[i]` is a lowercase English letter.\n*   `letters` is sorted in **non-decreasing** order.\n*   `letters` contains at least two different characters.\n*   `target` is a lowercase English letter.Try to find whether each of 26 next letters are in the given string array.",
          "output": "import heapq\nfrom collections import defaultdict\n\ndef networkDelayTime(times, n, k):\n    graph = defaultdict(list)\n    for u, v, w in times:\n        graph[u].append((v, w))\n\n    dist = {i: float('inf') for i in range(1, n + 1)}\n    dist[k] = 0\n\n    pq = [(0, k)]\n\n    while pq:\n        time, node = heapq.heappop(pq)\n\n        if time > dist[node]:\n            continue\n\n        for neighbour, neighbourTime in graph[node]:\n            candidate_dist = time + neighbourTime\n            if candidate_dist < dist[neighbour]:\n                dist[neighbour] = candidate_dist\n                heapq.heappush(pq, (candidate_dist, neighbour))\n\n    maxTime = max(dist.values())\n    return maxTime if maxTime < float('inf') else -1\n"
     },
     {
          "instruction": "Write python code for this problem: Design a special dictionary that searches the words in it by a prefix and a suffix.\n\nImplement the `WordFilter` class:\n\n*   `WordFilter(string[] words)` Initializes the object with the `words` in the dictionary.\n*   `f(string pref, string suff)` Returns _the index of the word in the dictionary,_ which has the prefix `pref` and the suffix `suff`. If there is more than one valid index, return **the largest** of them. If there is no such word in the dictionary, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"WordFilter \",  \"f \"\\]\n\\[\\[\\[ \"apple \"\\]\\], \\[ \"a \",  \"e \"\\]\\]\n**Output**\n\\[null, 0\\]\n**Explanation**\nWordFilter wordFilter = new WordFilter(\\[ \"apple \"\\]);\nwordFilter.f( \"a \",  \"e \"); // return 0, because the word at index 0 has prefix =  \"a \" and suffix =  \"e \".\n\n**Constraints:**\n\n*   `1 <= words.length <= 104`\n*   `1 <= words[i].length <= 7`\n*   `1 <= pref.length, suff.length <= 7`\n*   `words[i]`, `pref` and `suff` consist of lowercase English letters only.\n*   At most `104` calls will be made to the function `f`.For a word like \"test\", consider \"#test\", \"t#test\", \"st#test\", \"est#test\", \"test#test\".  Then if we have a query like prefix = \"te\", suffix = \"t\", we can find it by searching for something we've inserted starting with \"t#te\".",
          "output": "def next_greatest_letter(letters, target):\n    for letter in letters:\n        if letter > target:\n            return letter\n    return letters[0]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\nYou can either start from the step with index `0`, or the step with index `1`.\n\nReturn _the minimum cost to reach the top of the floor_.\n\n",
          "input": "**Example 1:**\n\n**Input:** cost = \\[10,15,20\\]\n**Output:** 15\n**Explanation:** You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n\n**Example 2:**\n\n**Input:** cost = \\[1,100,1,1,1,100,1,1,100,1\\]\n**Output:** 6\n**Explanation:** You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n\n**Constraints:**\n\n*   `2 <= cost.length <= 1000`\n*   `0 <= cost[i] <= 999`Say f[i] is the final cost to climb to the top from step i.  Then f[i] = cost[i] + min(f[i+1], f[i+2]).",
          "output": "class WordFilter:\n\n    def __init__(self, words):\n        self.dict = {}\n        for i, word in enumerate(words):\n            for j in range(len(word) + 1):\n                self.dict[word[:j] + \"#\" + word[j:]] = i\n\n    def f(self, prefix, suffix):\n        return self.dict.get(prefix + \"#\" + suffix, -1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` where the largest integer is **unique**.\n\nDetermine whether the largest element in the array is **at least twice** as much as every other number in the array. If it is, return _the **index** of the largest element, or return_ `-1` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,6,1,0\\]\n**Output:** 1\n**Explanation:** 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** -1\n**Explanation:** 4 is less than twice the value of 3, so we return -1.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 50`\n*   `0 <= nums[i] <= 100`\n*   The largest element in `nums` is unique.Scan through the array to find the unique largest element `m`, keeping track of it's index `maxIndex`.\r\n\r\nScan through the array again.  If we find some `x != m` with `m < 2*x`, we should return `-1`.\r\n\r\nOtherwise, we should return `maxIndex`.",
          "output": "def minCostClimbingStairs(cost):\n    for i in range(2, len(cost)):\n        cost[i] += min(cost[i-1], cost[i-2])\n    return min(cost[-1], cost[-2])\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `licensePlate` and an array of strings `words`, find the **shortest completing** word in `words`.\n\nA **completing** word is a word that **contains all the letters** in `licensePlate`. **Ignore numbers and spaces** in `licensePlate`, and treat letters as **case insensitive**. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.\n\nFor example, if `licensePlate` `= \"aBc 12c \"`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible **completing** words are `\"abccdef \"`, `\"caaacab \"`, and `\"cbca \"`.\n\nReturn _the shortest **completing** word in_ `words`_._ It is guaranteed an answer exists. If there are multiple shortest **completing** words, return the **first** one that occurs in `words`.\n\n",
          "input": "**Example 1:**\n\n**Input:** licensePlate =  \"1s3 PSt \", words = \\[ \"step \", \"steps \", \"stripe \", \"stepple \"\\]\n**Output:**  \"steps \"\n**Explanation:** licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n \"step \" contains 't' and 'p', but only contains 1 's'.\n \"steps \" contains 't', 'p', and both 's' characters.\n \"stripe \" is missing an 's'.\n \"stepple \" is missing an 's'.\nSince  \"steps \" is the only word containing all the letters, that is the answer.\n\n**Example 2:**\n\n**Input:** licensePlate =  \"1s3 456 \", words = \\[ \"looks \", \"pest \", \"stew \", \"show \"\\]\n**Output:**  \"pest \"\n**Explanation:** licensePlate only contains the letter 's'. All the words contain 's', but among these  \"pest \",  \"stew \", and  \"show \" are shortest. The answer is  \"pest \" because it is the word that appears earliest of the 3.\n\n**Constraints:**\n\n*   `1 <= licensePlate.length <= 7`\n*   `licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 15`\n*   `words[i]` consists of lower case English letters.Count only the letters (possibly converted to lowercase) of each word.  If a word is shorter and the count of each letter is at least the count of that letter in the licensePlate, it is the best answer we've seen yet.",
          "output": "def shortestCompletingWord(licensePlate: str, words: list[str]) -> str:\n    from collections import Counter\n\n    lp_count = Counter(c.lower() for c in licensePlate if c.isalpha())\n\n    result = \"\"\n    for word in words:\n        word_count = Counter(word)\n\n        valid = all(word_count[ch] >= count for ch, count in lp_count.items())\n\n        if valid and (not result or len(word) < len(result)):\n            result = word\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\n\nThe world is modeled as an `m x n` binary grid `isInfected`, where `isInfected[i][j] == 0` represents uninfected cells, and `isInfected[i][j] == 1` represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two **4-directionally** adjacent cells, on the shared boundary.\n\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There **will never be a tie**.\n\nReturn _the number of walls used to quarantine all the infected regions_. If the world will become fully infected, return the number of walls used.\n\n",
          "input": "**Example 1:**\n\n**Input:** isInfected = \\[\\[0,1,0,0,0,0,0,1\\],\\[0,1,0,0,0,0,0,1\\],\\[0,0,0,0,0,0,0,1\\],\\[0,0,0,0,0,0,0,0\\]\\]\n**Output:** 10\n**Explanation:** There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n \nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n \n\n**Example 2:**\n\n**Input:** isInfected = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** 4\n**Explanation:** Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells.\n\n**Example 3:**\n\n**Input:** isInfected = \\[\\[1,1,1,0,0,0,0,0,0\\],\\[1,0,1,0,1,1,1,1,1\\],\\[1,1,1,0,0,0,0,0,0\\]\\]\n**Output:** 13\n**Explanation:** The region on the left only builds two new walls.\n\n**Constraints:**\n\n*   `m == isInfected.length`\n*   `n == isInfected[i].length`\n*   `1 <= m, n <= 50`\n*   `isInfected[i][j]` is either `0` or `1`.\n*   There is always a contiguous viral region throughout the described process that will **infect strictly more uncontaminated squares** in the next round.The implementation is long - we want to perfrom the following steps:\r\n\r\n* Find all viral regions (connected components), additionally for each region keeping track of the frontier (neighboring uncontaminated cells), and the perimeter of the region.\r\n\r\n* Disinfect the most viral region, adding it's perimeter to the answer.\r\n\r\n* Spread the virus in the remaining regions outward by 1 square.",
          "output": "def shortest_completing_word(license_plate, words):\n    target = [0] * 26\n    for c in license_plate:\n        if c.isalpha():\n            target[ord(c.lower()) - ord('a')] += 1\n\n    result = \"\"\n    for word in words:\n        current = [0] * 26\n        for c in word:\n            if c.isalpha():\n                current[ord(c.lower()) - ord('a')] += 1\n\n        if all(a <= b for a, b in zip(target, current)) and (not result or len(word) < len(result)):\n            result = word\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` integer matrix `grid` where each entry is only `0` or `1`, return _the number of **corner rectangles**_.\n\nA **corner rectangle** is four distinct `1`'s on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value `1`. Also, all four `1`'s used must be distinct.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0,0,1,0\\],\\[0,0,1,0,1\\],\\[0,0,0,1,0\\],\\[1,0,1,0,1\\]\\]\n**Output:** 1\n**Explanation:** There is only one corner rectangle, with corners grid\\[1\\]\\[2\\], grid\\[1\\]\\[4\\], grid\\[3\\]\\[2\\], grid\\[3\\]\\[4\\].\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\]\n**Output:** 9\n**Explanation:** There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,1,1\\]\\]\n**Output:** 0\n**Explanation:** Rectangles must have four distinct corners.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 200`\n*   `grid[i][j]` is either `0` or `1`.\n*   The number of `1`'s in the grid is in the range `[1, 6000]`.For each pair of 1s in the new row (say at `new_row[i]` and `new_row[j]`), we could create more rectangles where that pair forms the base.  The number of new rectangles is the number of times some previous row had `row[i] = row[j] = 1`.",
          "output": "def countCornerRectangles(grid):\n    count = 0\n    m = len(grid)\n    n = len(grid[0])\n    \n    for i in range(m - 1):\n        for j in range(n - 1):\n            if grid[i][j] == 1:\n                for k in range(i + 1, m):\n                    for l in range(j + 1, n):\n                        if grid[k][l] == 1 and grid[i][l] == 1 and grid[k][j] == 1:\n                            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: An **IP address** is a formatted 32-bit unsigned integer where each group of 8 bits is printed as a decimal number and the dot character `'.'` splits the groups.\n\n*   For example, the binary number `00001111 10001000 11111111 01101011` (spaces added for clarity) formatted as an IP address would be `\"15.136.255.107 \"`.\n\nA **CIDR block** is a format used to denote a specific set of IP addresses. It is a string consisting of a base IP address, followed by a slash, followed by a prefix length `k`. The addresses it covers are all the IPs whose **first `k` bits** are the same as the base IP address.\n\n*   For example, `\"123.45.67.89/20 \"` is a CIDR block with a prefix length of `20`. Any IP address whose binary representation matches `01111011 00101101 0100xxxx xxxxxxxx`, where `x` can be either `0` or `1`, is in the set covered by the CIDR block.\n\nYou are given a start IP address `ip` and the number of IP addresses we need to cover `n`. Your goal is to use **as few CIDR blocks as possible** to cover all the IP addresses in the **inclusive** range `[ip, ip + n - 1]` **exactly**. No other IP addresses outside of the range should be covered.\n\nReturn _the **shortest** list of **CIDR blocks** that covers the range of IP addresses. If there are multiple answers, return **any** of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** ip =  \"255.0.0.7 \", n = 10\n**Output:** \\[ \"255.0.0.7/32 \", \"255.0.0.8/29 \", \"255.0.0.16/32 \"\\]\n**Explanation:**\nThe IP addresses that need to be covered are:\n- 255.0.0.7  -> 11111111 00000000 00000000 00000111\n- 255.0.0.8  -> 11111111 00000000 00000000 00001000\n- 255.0.0.9  -> 11111111 00000000 00000000 00001001\n- 255.0.0.10 -> 11111111 00000000 00000000 00001010\n- 255.0.0.11 -> 11111111 00000000 00000000 00001011\n- 255.0.0.12 -> 11111111 00000000 00000000 00001100\n- 255.0.0.13 -> 11111111 00000000 00000000 00001101\n- 255.0.0.14 -> 11111111 00000000 00000000 00001110\n- 255.0.0.15 -> 11111111 00000000 00000000 00001111\n- 255.0.0.16 -> 11111111 00000000 00000000 00010000\nThe CIDR block  \"255.0.0.7/32 \" covers the first address.\nThe CIDR block  \"255.0.0.8/29 \" covers the middle 8 addresses (binary format of 11111111 00000000 00000000 00001xxx).\nThe CIDR block  \"255.0.0.16/32 \" covers the last address.\nNote that while the CIDR block  \"255.0.0.0/28 \" does cover all the addresses, it also includes addresses outside of the range, so we cannot use it.\n\n**Example 2:**\n\n**Input:** ip =  \"117.145.102.62 \", n = 8\n**Output:** \\[ \"117.145.102.62/31 \", \"117.145.102.64/30 \", \"117.145.102.68/31 \"\\]\n\n**Constraints:**\n\n*   `7 <= ip.length <= 15`\n*   `ip` is a valid **IPv4** on the form `\"a.b.c.d \"` where `a`, `b`, `c`, and `d` are integers in the range `[0, 255]`.\n*   `1 <= n <= 1000`\n*   Every implied address `ip + x` (for `x < n`) will be a valid IPv4 address.Convert the ip addresses to and from (long) integers.  You want to know what is the most addresses you can put in this block starting from the \"start\" ip, up to n.  It is the smallest between the lowest bit of start and the highest bit of n.  Then, repeat this process with a new start and n.",
          "output": "def ipToCIDR(ip: str, n: int) -> List[str]:\n    a, b, c, d = map(int, ip.split('.'))\n    start = (a << 24) + (b << 16) + (c << 8) + d\n    end = start + n - 1\n    \n    ans = []\n    while start <= end:\n        samePrefixBits = (~start & start).bit_length() - 1\n        while ((end - start) >> samePrefixBits) < 1:\n            samePrefixBits -= 1\n        range = 1 << samePrefixBits\n        ans.append(f\"{start >> 24}.{(start >> 16) & 255}.{(start >> 8) & 255}.{start & 255}/{32 - samePrefixBits}\")\n        start += range\n    \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.\n\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\n",
          "input": "**Example 1:**\n\n**Input:** deadends = \\[ \"0201 \", \"0101 \", \"0102 \", \"1212 \", \"2002 \"\\], target =  \"0202 \"\n**Output:** 6\n**Explanation:** \nA sequence of valid moves would be  \"0000 \" ->  \"1000 \" ->  \"1100 \" ->  \"1200 \" ->  \"1201 \" ->  \"1202 \" ->  \"0202 \".\nNote that a sequence like  \"0000 \" ->  \"0001 \" ->  \"0002 \" ->  \"0102 \" ->  \"0202 \" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end  \"0102 \".\n\n**Example 2:**\n\n**Input:** deadends = \\[ \"8888 \"\\], target =  \"0009 \"\n**Output:** 1\n**Explanation:** We can turn the last wheel in reverse to move from  \"0000 \" ->  \"0009 \".\n\n**Example 3:**\n\n**Input:** deadends = \\[ \"8887 \", \"8889 \", \"8878 \", \"8898 \", \"8788 \", \"8988 \", \"7888 \", \"9888 \"\\], target =  \"8888 \"\n**Output:** -1\n**Explanation:** We cannot reach the target without getting stuck.\n\n**Constraints:**\n\n*   `1 <= deadends.length <= 500`\n*   `deadends[i].length == 4`\n*   `target.length == 4`\n*   target **will not be** in the list `deadends`.\n*   `target` and `deadends[i]` consist of digits only.We can think of this problem as a shortest path problem on a graph: there are `10000` nodes (strings `'0000'` to `'9999'`), and there is an edge between two nodes if they differ in one digit, that digit differs by 1 (wrapping around, so `'0'` and `'9'` differ by 1), and if *both* nodes are not in `deadends`.",
          "output": "from collections import deque\n\ndef openLock(deadends, target):\n    dead = set(deadends)\n    visited = set()\n    q = deque([\"0000\"])\n\n    if \"0000\" in dead:\n        return -1\n\n    visited.add(\"0000\")\n    moves = 0\n\n    while q:\n        level_size = len(q)\n        for i in range(level_size):\n            cur = q.popleft()\n\n            if cur == target:\n                return moves\n\n            for j in range(4):\n                for k in [-1, 1]:\n                    next_val = cur[:j] + str((int(cur[j]) + k + 10) % 10) + cur[j + 1:]\n\n                    if next_val not in visited and next_val not in dead:\n                        visited.add(next_val)\n                        q.append(next_val)\n\n        moves += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: There is a safe protected by a password. The password is a sequence of `n` digits where each digit can be in the range `[0, k - 1]`.\n\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the **most recent** `n` **digits** that were entered each time you type a digit.\n\n*   For example, the correct password is `\"345 \"` and you enter in `\"012345 \"`:\n    *   After typing `0`, the most recent `3` digits is `\"0 \"`, which is incorrect.\n    *   After typing `1`, the most recent `3` digits is `\"01 \"`, which is incorrect.\n    *   After typing `2`, the most recent `3` digits is `\"012 \"`, which is incorrect.\n    *   After typing `3`, the most recent `3` digits is `\"123 \"`, which is incorrect.\n    *   After typing `4`, the most recent `3` digits is `\"234 \"`, which is incorrect.\n    *   After typing `5`, the most recent `3` digits is `\"345 \"`, which is correct and the safe unlocks.\n\nReturn _any string of **minimum length** that will unlock the safe **at some point** of entering it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1, k = 2\n**Output:**  \"10 \"\n**Explanation:** The password is a single digit, so enter each digit.  \"01 \" would also unlock the safe.\n\n**Example 2:**\n\n**Input:** n = 2, k = 2\n**Output:**  \"01100 \"\n**Explanation:** For each possible password:\n-  \"00 \" is typed in starting from the 4th digit.\n-  \"01 \" is typed in starting from the 1st digit.\n-  \"10 \" is typed in starting from the 3rd digit.\n-  \"11 \" is typed in starting from the 2nd digit.\nThus  \"01100 \" will unlock the safe.  \"10011 \", and  \"11001 \" would also unlock the safe.\n\n**Constraints:**\n\n*   `1 <= n <= 4`\n*   `1 <= k <= 10`\n*   `1 <= kn <= 4096`We can think of this problem as the problem of finding an Euler path (a path visiting every edge exactly once) on the following graph: there are $$k^{n-1}$$ nodes with each node having $$k$$ edges.  It turns out this graph always has an Eulerian circuit (path starting where it ends.)\r\n\r\nWe should visit each node in \"post-order\" so as to not get stuck in the graph prematurely.",
          "output": "from collections import deque\n\ndef openLock(deadends, target):\n    dead = set(deadends)\n    visited = set()\n    wheel_states = deque([(\"0000\", 0)])\n\n    if \"0000\" in dead:\n        return -1\n\n    while wheel_states:\n        current_state, turns = wheel_states.popleft()\n\n        if current_state == target:\n            return turns\n\n        for i in range(4):\n            up_state = current_state[:i] + str((int(current_state[i]) + 1) % 10) + current_state[i + 1:]\n            down_state = current_state[:i] + str((int(current_state[i]) - 1) % 10) + current_state[i + 1:]\n\n            if up_state not in visited and up_state not in dead:\n                wheel_states.append((up_state, turns + 1))\n                visited.add(up_state)\n\n            if down_state not in visited and down_state not in dead:\n                wheel_states.append((down_state, turns + 1))\n                visited.add(down_state)\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are standing at position `0` on an infinite number line. There is a destination at position `target`.\n\nYou can make some number of moves `numMoves` so that:\n\n*   On each move, you can either go left or right.\n*   During the `ith` move (starting from `i == 1` to `i == numMoves`), you take `i` steps in the chosen direction.\n\nGiven the integer `target`, return _the **minimum** number of moves required (i.e., the minimum_ `numMoves`_) to reach the destination_.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = 2\n**Output:** 3\n**Explanation:**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to -1 (2 steps).\nOn the 3rd move, we step from -1 to 2 (3 steps).\n\n**Example 2:**\n\n**Input:** target = 3\n**Output:** 2\n**Explanation:**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to 3 (2 steps).\n\n**Constraints:**\n\n*   `-109 <= target <= 109`\n*   `target != 0`",
          "output": "def reachNumber(target: int) -> int:\n    target = abs(target)\n    step = 0\n    sum = 0\n    while sum < target:\n        step += 1\n        sum += step\n    while (sum - target) % 2 != 0:\n        step += 1\n        sum += step\n    return step\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an elevation map represents as an integer array `heights` where `heights[i]` representing the height of the terrain at index `i`. The width at each index is `1`. You are also given two integers `volume` and `k`. `volume` units of water will fall at index `k`.\n\nWater first drops at the index `k` and rests on top of the highest terrain or water at that index. Then, it flows according to the following rules:\n\n*   If the droplet would eventually fall by moving left, then move left.\n*   Otherwise, if the droplet would eventually fall by moving right, then move right.\n*   Otherwise, rise to its current position.\n\nHere, **\"eventually fall \"** means that the droplet will eventually be at a lower level if it moves in that direction. Also, level means the height of the terrain plus any water in that column.\n\nWe can assume there is infinitely high terrain on the two sides out of bounds of the array. Also, there could not be partial water being spread out evenly on more than one grid block, and each unit of water has to be in exactly one block.\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[2,1,1,2,1,2,2\\], volume = 4, k = 3\n**Output:** \\[2,2,2,3,2,2,2\\]\n**Explanation:**\nThe first drop of water lands at index k = 3. When moving left or right, the water can only move to the same level or a lower level. (By level, we mean the total height of the terrain plus any water in that column.)\nSince moving left will eventually make it fall, it moves left. (A droplet  \"made to fall \" means go to a lower height than it was at previously.) Since moving left will not make it fall, it stays in place.\n \nThe next droplet falls at index k = 3. Since the new droplet moving left will eventually make it fall, it moves left. Notice that the droplet still preferred to move left, even though it could move right (and moving right makes it fall quicker.)\n \nThe third droplet falls at index k = 3. Since moving left would not eventually make it fall, it tries to move right. Since moving right would eventually make it fall, it moves right.\n \nFinally, the fourth droplet falls at index k = 3. Since moving left would not eventually make it fall, it tries to move right. Since moving right would not eventually make it fall, it stays in place.\n \n\n**Example 2:**\n\n**Input:** heights = \\[1,2,3,4\\], volume = 2, k = 2\n**Output:** \\[2,3,3,4\\]\n**Explanation:** The last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.\n\n**Example 3:**\n\n**Input:** heights = \\[3,1,3\\], volume = 5, k = 1\n**Output:** \\[4,4,4\\]\n\n**Constraints:**\n\n*   `1 <= heights.length <= 100`\n*   `0 <= heights[i] <= 99`\n*   `0 <= volume <= 2000`\n*   `0 <= k < heights.length`",
          "output": "def min_moves(target: int) -> int:\n    target = abs(target)\n    step = 0\n    total = 0\n    while total < target or (total - target) % 2 != 0:\n        step += 1\n        total += step\n    return step\n"
     },
     {
          "instruction": "Write python code for this problem: You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains **one less block** than the row beneath it and is centered on top.\n\nTo make the pyramid aesthetically pleasing, there are only specific **triangular patterns** that are allowed. A triangular pattern consists of a **single block** stacked on top of **two blocks**. The patterns are given as a list of three-letter strings `allowed`, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\n\n*   For example, `\"ABC \"` represents a triangular pattern with a `'C'` block stacked on top of an `'A'` (left) and `'B'` (right) block. Note that this is different from `\"BAC \"` where `'B'` is on the left bottom and `'A'` is on the right bottom.\n\nYou start with a bottom row of blocks `bottom`, given as a single string, that you **must** use as the base of the pyramid.\n\nGiven `bottom` and `allowed`, return `true` _if you can build the pyramid all the way to the top such that **every triangular pattern** in the pyramid is in_ `allowed`_, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** bottom =  \"BCD \", allowed = \\[ \"BCC \", \"CDE \", \"CEA \", \"FFF \"\\]\n**Output:** true\n**Explanation:** The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build  \"CE \" on level 2 and then build  \"A \" on level 1.\nThere are three triangular patterns in the pyramid, which are  \"BCC \",  \"CDE \", and  \"CEA \". All are allowed.\n\n**Example 2:**\n\n**Input:** bottom =  \"AAAA \", allowed = \\[ \"AAB \", \"AAC \", \"BCD \", \"BBE \", \"DEF \"\\]\n**Output:** false\n**Explanation:** The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.\n\n**Constraints:**\n\n*   `2 <= bottom.length <= 6`\n*   `0 <= allowed.length <= 216`\n*   `allowed[i].length == 3`\n*   The letters in all input strings are from the set `{'A', 'B', 'C', 'D', 'E', 'F'}`.\n*   All the values of `allowed` are **unique**.",
          "output": "def pyramid_transition(bottom, allowed):\n    mapping = {}\n    for s in allowed:\n        key = s[:2]\n        if key not in mapping:\n            mapping[key] = []\n        mapping[key].append(s[2])\n    return pyramid_transition_helper(bottom, \"\", 0, mapping)\n\ndef pyramid_transition_helper(bottom, top, idx, mapping):\n    if len(bottom) == 1:\n        return True\n    if idx == len(bottom) - 1:\n        return pyramid_transition_helper(top, \"\", 0, mapping)\n    key = bottom[idx:idx + 2]\n    if key not in mapping:\n        return False\n    for c in mapping[key]:\n        if pyramid_transition_helper(bottom, top + c, idx + 1, mapping):\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Convert a **Binary Search Tree** to a sorted **Circular Doubly-Linked List** in place.\n\nYou can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.\n\nWe want to do the transformation **in place**. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,5,1,3\\]\n\n \n**Output:** \\[1,2,3,4,5\\]\n\n**Explanation:** The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.\n \n\n**Example 2:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** \\[1,2,3\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 2000]`.\n*   `-1000 <= Node.val <= 1000`\n*   All the values of the tree are **unique**.",
          "output": "class Node:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def treeToDoublyList(self, root: 'Node') -> 'Node':\n        if not root:\n            return None\n\n        first = None\n        last = None\n        \n        def inOrder(node):\n            nonlocal first, last\n            \n            if not node:\n                return\n\n            inOrder(node.left)\n\n            if last:\n                last.right = node\n                node.left = last\n            else:\n                first = node\n            \n            last = node\n\n            inOrder(node.right)\n\n        inOrder(root)\n\n        first.left = last\n        last.right = first\n\n        return first\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `intervals` where `intervals[i] = [starti, endi]` represents all the integers from `starti` to `endi` inclusively.\n\nA **containing set** is an array `nums` where each interval from `intervals` has **at least two** integers in `nums`.\n\n*   For example, if `intervals = [[1,3], [3,7], [8,9]]`, then `[1,2,4,7,8,9]` and `[2,3,4,8,9]` are **containing sets**.\n\nReturn _the minimum possible size of a containing set_.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[1,3\\],\\[3,7\\],\\[8,9\\]\\]\n**Output:** 5\n**Explanation:** let nums = \\[2, 3, 4, 8, 9\\].\nIt can be shown that there cannot be any containing array of size 4.\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[1,3\\],\\[1,4\\],\\[2,5\\],\\[3,5\\]\\]\n**Output:** 3\n**Explanation:** let nums = \\[2, 3, 4\\].\nIt can be shown that there cannot be any containing array of size 2.\n\n**Example 3:**\n\n**Input:** intervals = \\[\\[1,2\\],\\[2,3\\],\\[2,4\\],\\[4,5\\]\\]\n**Output:** 5\n**Explanation:** let nums = \\[1, 2, 3, 4, 5\\].\nIt can be shown that there cannot be any containing array of size 4.\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 3000`\n*   `intervals[i].length == 2`\n*   `0 <= starti < endi <= 108`",
          "output": "from collections import defaultdict\n\ndef pyramidTransition(bottom, allowed):\n    mapping = defaultdict(list)\n    for s in allowed:\n        mapping[s[:2]].append(s[2])\n    return dfs(\"\", bottom, mapping)\n\ndef dfs(curr, bottom, mapping):\n    if len(bottom) == 1:\n        return True\n    for i in range(len(bottom) - 1):\n        if bottom[i:i+2] not in mapping:\n            return False\n    curr = \"\".join(mapping[bottom[i:i + 2]][0] for i in range(len(bottom) - 1))\n    return dfs(curr, curr, mapping)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of keywords `words` and a string `s`, make all appearances of all keywords `words[i]` in `s` bold. Any letters between **and** tags become bold.\n\nReturn `s` _after adding the bold tags_. The returned string should use the least number of tags possible, and the tags should form a valid combination.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"ab \", \"bc \"\\], s =  \"aabcd \"\n**Output:**  \"a**abc**d \"\n**Explanation:** Note that returning ` \"a**a**b**c**d \"` would use more tags, so it is incorrect.\n\n**Example 2:**\n\n**Input:** words = \\[ \"ab \", \"cb \"\\], s =  \"aabcd \"\n**Output:**  \"a**ab**cd \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `0 <= words.length <= 50`\n*   `1 <= words[i].length <= 10`\n*   `s` and `words[i]` consist of lowercase English letters.\n\n**Note:** This question is the same as 616: [https://leetcode.com/problems/add-bold-tag-in-string/](https://leetcode.com/problems/add-bold-tag-in-string/)First, determine which letters are bold and store that information in mask[i] = if i-th character is bold.\r\nThen, insert the tags at the beginning and end of groups.  The start of a group is if and only if (mask[i] and (i == 0 or not mask[i-1])), and the end of a group is similar.",
          "output": "def addBoldTag(words, s):\n    bold = [False] * len(s)\n    for word in words:\n        pos = s.find(word)\n        while pos != -1:\n            for i in range(pos, pos + len(word)):\n                bold[i] = True\n            pos = s.find(word, pos + 1)\n\n    result = []\n    for i in range(len(s)):\n        if bold[i] and (i == 0 or not bold[i - 1]):\n            result.append(\"<b>\")\n        result.append(s[i])\n        if bold[i] and (i == len(s) - 1 or not bold[i + 1]):\n            result.append(\"</b>\")\n\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: We are given a list `schedule` of employees, which represents the working time for each employee.\n\nEach employee has a list of non-overlapping `Intervals`, and these intervals are in sorted order.\n\nReturn the list of finite intervals representing **common, positive-length free time** for _all_ employees, also in sorted order.\n\n(Even though we are representing `Intervals` in the form `[x, y]`, the objects inside are `Intervals`, not lists or arrays. For example, `schedule[0][0].start = 1`, `schedule[0][0].end = 2`, and `schedule[0][0][0]` is not defined). Also, we wouldn't include intervals like \\[5, 5\\] in our answer, as they have zero length.\n\n",
          "input": "**Example 1:**\n\n**Input:** schedule = \\[\\[\\[1,2\\],\\[5,6\\]\\],\\[\\[1,3\\]\\],\\[\\[4,10\\]\\]\\]\n**Output:** \\[\\[3,4\\]\\]\n**Explanation:** There are a total of three employees, and all common\nfree time intervals would be \\[-inf, 1\\], \\[3, 4\\], \\[10, inf\\].\nWe discard any intervals that contain inf as they aren't finite.\n\n**Example 2:**\n\n**Input:** schedule = \\[\\[\\[1,3\\],\\[6,7\\]\\],\\[\\[2,4\\]\\],\\[\\[2,5\\],\\[9,12\\]\\]\\]\n**Output:** \\[\\[5,6\\],\\[7,9\\]\\]\n\n**Constraints:**\n\n*   `1 <= schedule.length , schedule[i].length <= 50`\n*   `0 <= schedule[i].start < schedule[i].end <= 10^8`Take all the intervals and do an \"events\" (or \"line sweep\") approach - an event of (x, OPEN) increases the number of active intervals, while (x, CLOSE) decreases it.\r\n\r\nProcessing in sorted order from left to right, if the number of active intervals is zero, then you crossed a region of common free time.",
          "output": "def min_set_size(intervals):\n    intervals.sort()\n    n = len(intervals)\n    end = intervals[0][1]\n    count = 1\n\n    for i in range(1, n):\n        if end < intervals[i][0]:\n            end = intervals[i][1]\n            count += 1\n        else:\n            end = min(end, intervals[i][1])\n    return count * 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2` where `nums2` is **an anagram** of `nums1`. Both arrays may contain duplicates.\n\nReturn _an index mapping array_ `mapping` _from_ `nums1` _to_ `nums2` _where_ `mapping[i] = j` _means the_ `ith` _element in_ `nums1` _appears in_ `nums2` _at index_ `j`. If there are multiple answers, return **any of them**.\n\nAn array `a` is **an anagram** of an array `b` means `b` is made by randomizing the order of the elements in `a`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[12,28,46,32,50\\], nums2 = \\[50,12,32,46,28\\]\n**Output:** \\[1,4,3,2,0\\]\n**Explanation:** As mapping\\[0\\] = 1 because the 0th element of nums1 appears at nums2\\[1\\], and mapping\\[1\\] = 4 because the 1st element of nums1 appears at nums2\\[4\\], and so on.\n\n**Example 2:**\n\n**Input:** nums1 = \\[84,46\\], nums2 = \\[84,46\\]\n**Output:** \\[0,1\\]\n\n**Constraints:**\n\n*   `1 <= nums1.length <= 100`\n*   `nums2.length == nums1.length`\n*   `0 <= nums1[i], nums2[i] <= 105`\n*   `nums2` is an anagram of `nums1`.Create a hashmap so that D[x] = i  whenever B[i] = x.  Then, the answer is [D[x] for x in A].",
          "output": "def anagramMappings(nums1, nums2):\n    num_map = {num: i for i, num in enumerate(nums2)}\n    mapping = [num_map[num] for num in nums1]\n    return mapping\n"
     },
     {
          "instruction": "Write python code for this problem: **Special binary strings** are binary strings with the following two properties:\n\n*   The number of `0`'s is equal to the number of `1`'s.\n*   Every prefix of the binary string has at least as many `1`'s as `0`'s.\n\nYou are given a **special binary** string `s`.\n\nA move consists of choosing two consecutive, non-empty, special substrings of `s`, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\n\nReturn _the lexicographically largest resulting string possible after applying the mentioned operations on the string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"11011000 \"\n**Output:**  \"11100100 \"\n**Explanation:** The strings  \"10 \" \\[occuring at s\\[1\\]\\] and  \"1100 \" \\[at s\\[3\\]\\] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.\n\n**Example 2:**\n\n**Input:** s =  \"10 \"\n**Output:**  \"10 \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 50`\n*   `s[i]` is either `'0'` or `'1'`.\n*   `s` is a special binary string.Draw a line from (x, y) to (x+1, y+1) if we see a \"1\", else to (x+1, y-1).\r\nA special substring is just a line that starts and ends at the same y-coordinate, and that is the lowest y-coordinate reached.\r\nCall a mountain a special substring with no special prefixes - ie. only at the beginning and end is the lowest y-coordinate reached.\r\nIf F is the answer function, and S has mountain decomposition M1,M2,M3,...,Mk,  then the answer is:\r\nreverse_sorted(F(M1), F(M2), ..., F(Mk)).\r\nHowever, you'll also need to deal with the case that S is a mountain, such as 11011000 -> 11100100.",
          "output": "def makeLargestSpecial(s: str) -> str:\n    count, i = 0, 0\n    subs = []\n\n    for j in range(len(s)):\n        if s[j] == '1':\n            count += 1\n        else:\n            count -= 1\n\n        if count == 0:\n            subs.append(\"1\" + makeLargestSpecial(s[i+1:j]) + \"0\")\n            i = j + 1\n\n    subs.sort(reverse=True)\n    return \"\".join(subs)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an n-ary tree, return the _level order_ traversal of its nodes' values.\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[\\[1\\],\\[3,2,4\\],\\[5,6\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[\\[1\\],\\[2,3,4,5\\],\\[6,7,8,9,10\\],\\[11,12,13\\],\\[14\\]\\]\n\n**Constraints:**\n\n*   The height of the n-ary tree is less than or equal to `1000`\n*   The total number of nodes is between `[0, 104]`",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef levelOrder(root):\n    if not root:\n        return []\n    \n    result = []\n    queue = [root]\n    \n    while queue:\n        currentLevel = []\n        nextLevel = []\n        \n        for node in queue:\n            currentLevel.append(node.val)\n            nextLevel.extend(node.children)\n            \n        result.append(currentLevel)\n        queue = nextLevel\n            \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nFor example, you may serialize the following `3-ary` tree\n\nas `[1 [3[5 6] 2 4]]`. Note that this is just an example, you do not necessarily need to follow this format.\n\nOr you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.\n\nFor example, the above tree may be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\nYou do not necessarily need to follow the above-suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[1,null,3,2,4,null,5,6\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `0 <= Node.val <= 104`\n*   The height of the n-ary tree is less than or equal to `1000`\n*   Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\nclass Codec:\n    def serialize(self, root):\n        if root is None:\n            return \"\"\n        \n        data = str(root.val) + \" \"\n        for child in root.children:\n            data += self.serialize(child)\n        data += \"# \"\n        return data\n\n    def deserialize(self, data):\n        def dfs(iter_data):\n            val = next(iter_data)\n            if val == \"#\":\n                return None\n            \n            node = Node(int(val))\n            while True:\n                child = dfs(iter_data)\n                if child is None:\n                    break\n                node.children.append(child)\n            return node\n\n        return dfs(iter(data.split()))\n\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional **child pointer**. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a **multilevel data structure** as shown in the example below.\n\nGiven the `head` of the first level of the list, **flatten** the list so that all the nodes appear in a single-level, doubly linked list. Let `curr` be a node with a child list. The nodes in the child list should appear **after** `curr` and **before** `curr.next` in the flattened list.\n\nReturn _the_ `head` _of the flattened list. The nodes in the list must have **all** of their child pointers set to_ `null`.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12\\]\n**Output:** \\[1,2,3,7,8,11,12,9,10,4,5,6\\]\n**Explanation:** The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n \n\n**Example 2:**\n\n**Input:** head = \\[1,2,null,3\\]\n**Output:** \\[1,3,2\\]\n**Explanation:** The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n \n\n**Example 3:**\n\n**Input:** head = \\[\\]\n**Output:** \\[\\]\n**Explanation:** There could be empty list in the input.\n\n**Constraints:**\n\n*   The number of Nodes will not exceed `1000`.\n*   `1 <= Node.val <= 105`\n\n**How the multilevel linked list is represented in test cases:**\n\nWe use the multilevel linked list from **Example 1** above:\n\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\n\nThe serialization of each level is as follows:\n\n\\[1,2,3,4,5,6,null\\]\n\\[7,8,9,10,null\\]\n\\[11,12,null\\]\n\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\n\n\\[1,    2,    3, 4, 5, 6, null\\]\n             |\n\\[null, null, 7,    8, 9, 10, null\\]\n                   |\n\\[            null, 11, 12, null\\]\n\nMerging the serialization of each level and removing trailing nulls we obtain:\n\n\\[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12\\]",
          "output": "class Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\ndef flatten(head: Node) -> Node:\n    if not head:\n        return None\n    \n    cur, prev, next_node = head, None, None\n\n    while cur:\n        next_node = cur.next\n\n        if cur.child:\n            cur.next = flatten(cur.child)\n            cur.child.prev = cur\n            cur.child = None\n\n            if next_node:\n                prev = cur\n                while cur.next:\n                    cur = cur.next\n                    prev = prev.next\n\n                cur.next = next_node\n                next_node.prev = prev\n\n        cur = next_node\n\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `left` and `right`, return _the **count** of numbers in the **inclusive** range_ `[left, right]` _having a **prime number of set bits** in their binary representation_.\n\nRecall that the **number of set bits** an integer has is the number of `1`'s present when written in binary.\n\n*   For example, `21` written in binary is `10101`, which has `3` set bits.\n\n",
          "input": "**Example 1:**\n\n**Input:** left = 6, right = 10\n**Output:** 4\n**Explanation:**\n6  -> 110 (2 set bits, 2 is prime)\n7  -> 111 (3 set bits, 3 is prime)\n8  -> 1000 (1 set bit, 1 is not prime)\n9  -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.\n\n**Example 2:**\n\n**Input:** left = 10, right = 15\n**Output:** 5\n**Explanation:**\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.\n\n**Constraints:**\n\n*   `1 <= left <= right <= 106`\n*   `0 <= right - left <= 104`Write a helper function to count the number of set bits in a number, then check whether the number of set bits is 2, 3, 5, 7, 11, 13, 17 or 19.",
          "output": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_prime_set_bits(left: int, right: int) -> int:\n    return sum(is_prime(bin(i).count('1')) for i in range(left, right + 1))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s`. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\n\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be `s`.\n\nReturn _a list of integers representing the size of these parts_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ababcbacadefegdehijhklij \"\n**Output:** \\[9,7,8\\]\n**Explanation:**\nThe partition is  \"ababcbaca \",  \"defegde \",  \"hijhklij \".\nThis is a partition so that each letter appears in at most one part.\nA partition like  \"ababcbacadefegde \",  \"hijhklij \" is incorrect, because it splits s into less parts.\n\n**Example 2:**\n\n**Input:** s =  \"eccbbbbdec \"\n**Output:** \\[10\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of lowercase English letters.Try to greedily choose the smallest partition that includes the first letter.  If you have something like \"abaccbdeffed\", then you might need to add b.  You can use an map like \"last['b'] = 5\" to help you expand the width of your partition.",
          "output": "def partition_labels(s):\n    last = {c:i for i, c in enumerate(s)}\n    ans = []\n    j = anchor = 0\n    for i, c in enumerate(s):\n        j = max(j, last[c])\n        if i == j:\n            ans.append(i - anchor + 1)\n            anchor = i + 1\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`. You have an `n x n` binary grid `grid` with all values initially `1`'s except for some indices given in the array `mines`. The `ith` element of the array `mines` is defined as `mines[i] = [xi, yi]` where `grid[xi][yi] == 0`.\n\nReturn _the order of the largest **axis-aligned** plus sign of_ 1_'s contained in_ `grid`. If there is none, return `0`.\n\nAn **axis-aligned plus sign** of `1`'s of order `k` has some center `grid[r][c] == 1` along with four arms of length `k - 1` going up, down, left, and right, and made of `1`'s. Note that there could be `0`'s or `1`'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for `1`'s.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, mines = \\[\\[4,2\\]\\]\n**Output:** 2\n**Explanation:** In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n\n**Example 2:**\n\n**Input:** n = 1, mines = \\[\\[0,0\\]\\]\n**Output:** 0\n**Explanation:** There is no plus sign, so return 0.\n\n**Constraints:**\n\n*   `1 <= n <= 500`\n*   `1 <= mines.length <= 5000`\n*   `0 <= xi, yi < n`\n*   All the pairs `(xi, yi)` are **unique**.For each direction such as \"left\", find left[r][c] = the number of 1s you will see before a zero starting at r, c and walking left.  You can find this in N^2 time with a dp.  The largest plus sign at r, c is just the minimum of left[r][c], up[r][c] etc.",
          "output": "from collections import deque\n\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef levelOrder(root):\n    result = []\n\n    if not root:\n        return result\n\n    toVisit = deque([root])\n\n    while toVisit:\n        size = len(toVisit)\n        level = []\n\n        for _ in range(size):\n            currentNode = toVisit.popleft()\n            level.append(currentNode.val)\n\n            for child in currentNode.children:\n                toVisit.append(child)\n\n        result.append(level)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` couples sitting in `2n` seats arranged in a row and want to hold hands.\n\nThe people and seats are represented by an integer array `row` where `row[i]` is the ID of the person sitting in the `ith` seat. The couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2n - 2, 2n - 1)`.\n\nReturn _the minimum number of swaps so that every couple is sitting side by side_. A swap consists of choosing any two people, then they stand up and switch seats.\n\n",
          "input": "**Example 1:**\n\n**Input:** row = \\[0,2,1,3\\]\n**Output:** 1\n**Explanation:** We only need to swap the second (row\\[1\\]) and third (row\\[2\\]) person.\n\n**Example 2:**\n\n**Input:** row = \\[3,2,0,1\\]\n**Output:** 0\n**Explanation:** All couples are already seated side by side.\n\n**Constraints:**\n\n*   `2n == row.length`\n*   `2 <= n <= 30`\n*   `n` is even.\n*   `0 <= row[i] < 2n`\n*   All the elements of `row` are **unique**.Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner.",
          "output": "def minSwapsCouples(row):\n    n = len(row)\n    position = [0] * n\n    for i in range(n):\n        position[row[i]] = i\n\n    swaps = 0\n    for i in range(0, n, 2):\n        partner = row[i] + 1 if row[i] % 2 == 0 else row[i] - 1\n        if row[i + 1] != partner:\n            row[position[partner]], row[i + 1] = row[i + 1], row[position[partner]]\n            position[row[i + 1]], position[partner] = position[partner], position[row[i + 1]]\n            swaps += 1\n    return swaps\n"
     },
     {
          "instruction": "Write python code for this problem: Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See following example)._\n\nFor example, you may encode the following `3-ary` tree to a binary tree in this way:\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n\nNote that the above is just an example which _might or might not_ work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[1,null,3,2,4,null,5,6\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `0 <= Node.val <= 104`\n*   The height of the n-ary tree is less than or equal to `1000`\n*   Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",
          "output": "class NaryTreeNode:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\nclass BinaryTreeNode:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef encode(root: NaryTreeNode) -> BinaryTreeNode:\n    if not root:\n        return None\n    binary_root = BinaryTreeNode(root.val)\n    if root.children:\n        binary_root.left = encode(root.children[0])\n    sibling = binary_root.left\n    for child in root.children[1:]:\n        sibling.right = encode(child)\n        sibling = sibling.right\n    return binary_root\n\ndef decode(root: BinaryTreeNode) -> NaryTreeNode:\n    if not root:\n        return None\n    nary_root = NaryTreeNode(root.val)\n    sibling = root.left\n    while sibling:\n        nary_root.children.append(decode(sibling))\n        sibling = sibling.right\n    return nary_root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent `grid` with a Quad-Tree.\n\nReturn _the root of the Quad-Tree representing_ `grid`.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n*   `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the `val` to True or False when `isLeaf` is False, and both are accepted in the answer.\n*   `isLeaf`: True if the node is a leaf node on the tree or False if the node has four children.\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n1.  If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n2.  If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n3.  Recurse for each of the children with the proper sub-grid.\n\nIf you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n**Quad-Tree format:**\n\nYou don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1\\],\\[1,0\\]\\]\n**Output:** \\[\\[0,1\\],\\[1,0\\],\\[1,1\\],\\[1,1\\],\\[1,0\\]\\]\n**Explanation:** The explanation of this example is shown below:\nNotice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\n \n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,1,1,1,1\\],\\[1,1,1,1,1,1,1,1\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\],\\[1,1,1,1,0,0,0,0\\]\\]\n**Output:** \\[\\[0,1\\],\\[1,1\\],\\[0,1\\],\\[1,1\\],\\[1,0\\],null,null,null,null,\\[1,0\\],\\[1,0\\],\\[1,1\\],\\[1,1\\]\\]\n**Explanation:** All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:\n \n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `n == 2x` where `0 <= x <= 6`",
          "output": "class Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\ndef build(grid, row, col, size):\n    if size == 1:\n        return Node(grid[row][col] == 1, True, None, None, None, None)\n    half = size // 2\n    topLeft = build(grid, row, col, half)\n    topRight = build(grid, row, col + half, half)\n    bottomLeft = build(grid, row + half, col, half)\n    bottomRight = build(grid, row + half, col + half, half)\n    if topLeft.isLeaf and topRight.isLeaf and bottomLeft.isLeaf and bottomRight.isLeaf and topLeft.val == topRight.val and topLeft.val == bottomLeft.val and topLeft.val == bottomRight.val:\n        return topLeft\n    return Node(False, False, topLeft, topRight, bottomLeft, bottomRight)\n\ndef construct(grid):\n    return build(grid, 0, 0, len(grid))\n"
     },
     {
          "instruction": "Write python code for this problem: A Binary Matrix is a matrix in which all the elements are either **0** or **1**.\n\nGiven `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix.\n\nReturn _a Quad-Tree_ representing the `n * n` binary matrix which is the result of **logical bitwise OR** of the two binary matrixes represented by `quadTree1` and `quadTree2`.\n\nNotice that you can assign the value of a node to **True** or **False** when `isLeaf` is **False**, and both are **accepted** in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n*   `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n*   `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n1.  If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n2.  If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n3.  Recurse for each of the children with the proper sub-grid.\n\nIf you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n**Quad-Tree format:**\n\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n",
          "input": "**Example 1:**\n\n**Input:** quadTree1 = \\[\\[0,1\\],\\[1,1\\],\\[1,1\\],\\[1,0\\],\\[1,0\\]\\]\n, quadTree2 = \\[\\[0,1\\],\\[1,1\\],\\[0,1\\],\\[1,1\\],\\[1,0\\],null,null,null,null,\\[1,0\\],\\[1,0\\],\\[1,1\\],\\[1,1\\]\\]\n**Output:** \\[\\[0,0\\],\\[1,1\\],\\[1,1\\],\\[1,1\\],\\[1,0\\]\\]\n**Explanation:** quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n \n\n**Example 2:**\n\n**Input:** quadTree1 = \\[\\[1,0\\]\\], quadTree2 = \\[\\[1,0\\]\\]\n**Output:** \\[\\[1,0\\]\\]\n**Explanation:** Each tree represents a binary matrix of size 1\\*1. Each matrix contains only zero.\nThe resulting matrix is of size 1\\*1 with also zero.\n\n**Constraints:**\n\n*   `quadTree1` and `quadTree2` are both **valid** Quad-Trees each representing a `n * n` grid.\n*   `n == 2x` where `0 <= x <= 9`.",
          "output": "class Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\nclass Solution:\n    def intersect(self, quadTree1: 'Node', quadTree2: 'Node') -> 'Node':\n        if quadTree1.isLeaf:\n            return quadTree1 if quadTree1.val else quadTree2\n        if quadTree2.isLeaf:\n            return quadTree2 if quadTree2.val else quadTree1\n        \n        quadTree1.topLeft = self.intersect(quadTree1.topLeft, quadTree2.topLeft)\n        quadTree1.topRight = self.intersect(quadTree1.topRight, quadTree2.topRight)\n        quadTree1.bottomLeft = self.intersect(quadTree1.bottomLeft, quadTree2.bottomLeft)\n        quadTree1.bottomRight = self.intersect(quadTree1.bottomRight, quadTree2.bottomRight)\n        \n        if (quadTree1.topLeft.isLeaf and quadTree1.topRight.isLeaf and\n            quadTree1.bottomLeft.isLeaf and quadTree1.bottomRight.isLeaf and\n            quadTree1.topLeft.val == quadTree1.topRight.val and\n            quadTree1.topLeft.val == quadTree1.bottomLeft.val and\n            quadTree1.topLeft.val == quadTree1.bottomRight.val):\n            quadTree1.isLeaf = True\n            quadTree1.val = quadTree1.topLeft.val\n        \n        return quadTree1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a n-ary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** 5\n\n**Constraints:**\n\n*   The total number of nodes is in the range `[0, 104]`.\n*   The depth of the n-ary tree is less than or equal to `1000`.",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef max_depth(root):\n    if root is None:\n        return 0\n    max_depth = 0\n    for child in root.children:\n        max_depth = max(max_depth, max_depth(child))\n    return max_depth + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of an n-ary tree, return _the preorder traversal of its nodes' values_.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[1,3,5,6,2,4\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[1,2,3,6,7,11,14,4,8,12,5,9,13,10\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `0 <= Node.val <= 104`\n*   The height of the n-ary tree is less than or equal to `1000`.\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\ndef preorder(root):\n    result = []\n    if not root:\n        return result\n    nodes = [root]\n\n    while nodes:\n        current = nodes.pop()\n        result.append(current.val)\n        nodes.extend(reversed(current.children))\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of an n-ary tree, return _the postorder traversal of its nodes' values_.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[5,6,3,2,4,1\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[2,6,14,11,7,3,12,8,4,13,9,10,5,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `0 <= Node.val <= 104`\n*   The height of the n-ary tree is less than or equal to `1000`.\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children or []\n\ndef postorder(root):\n    result = []\n    if not root:\n        return result\n    \n    stk = [root]\n    \n    while stk:\n        current = stk.pop()\n        result.append(current.val)\n        \n        for child in current.children:\n            stk.append(child)\n    \n    return result[::-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` `matrix`, return _`true` if the matrix is Toeplitz. Otherwise, return `false`._\n\nA matrix is **Toeplitz** if every diagonal from top-left to bottom-right has the same elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3,4\\],\\[5,1,2,3\\],\\[9,5,1,2\\]\\]\n**Output:** true\n**Explanation:**\nIn the above grid, the diagonals are:\n \"\\[9\\] \",  \"\\[5, 5\\] \",  \"\\[1, 1, 1\\] \",  \"\\[2, 2, 2\\] \",  \"\\[3, 3\\] \",  \"\\[4\\] \".\nIn each diagonal all elements are the same, so the answer is True.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,2\\],\\[2,2\\]\\]\n**Output:** false\n**Explanation:**\nThe diagonal  \"\\[1, 2\\] \" has different elements.\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 20`\n*   `0 <= matrix[i][j] <= 99`\n\n**Follow up:**\n\n*   What if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\n*   What if the `matrix` is so large that you can only load up a partial row into the memory at once?Check whether each value is equal to the value of it's top-left neighbor.",
          "output": "class Node:\n    def __init__(self, val=0, prev=None, next=None, child=None):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\ndef flatten(head: Node) -> Node:\n    if not head:\n        return None\n    \n    curr = head\n    while curr:\n        if curr.child:\n            insert = curr.child\n            next_node = curr.next\n            \n            insert.prev = curr\n            curr.next = insert\n            curr.child = None\n            \n            while insert.next:\n                insert = insert.next\n                \n            if next_node:\n                next_node.prev = insert\n                insert.next = next_node\n                \n        curr = curr.next\n        \n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same.\n\nReturn _any possible rearrangement of_ `s` _or return_ `\" \"` _if not possible_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"aab\"\n**Output:** \"aba\"\n\n**Example 2:**\n\n**Input:** s = \"aaab\"\n**Output:** \"\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of lowercase English letters.Alternate placing the most common letters.",
          "output": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_set_bits(left: int, right: int) -> int:\n    count = 0\n    for i in range(left, right + 1):\n        bits = bin(i).count('1')\n        if is_prime(bits):\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `arr`.\n\nWe split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\nReturn _the largest number of chunks we can make to sort the array_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[5,4,3,2,1\\]\n**Output:** 1\n**Explanation:**\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into \\[5, 4\\], \\[3, 2, 1\\] will result in \\[4, 5, 1, 2, 3\\], which isn't sorted.\n\n**Example 2:**\n\n**Input:** arr = \\[2,1,3,4,4\\]\n**Output:** 4\n**Explanation:**\nWe can split into two chunks, such as \\[2, 1\\], \\[3, 4, 4\\].\nHowever, splitting into \\[2, 1\\], \\[3\\], \\[4\\], \\[4\\] is the highest number of chunks possible.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 2000`\n*   `0 <= arr[i] <= 108`Each k for which some permutation of arr[:k] is equal to sorted(arr)[:k] is where we should cut each chunk.",
          "output": "def partition_labels(s: str) -> list[int]:\n    last_pos = {}\n    for i, c in enumerate(s):\n        last_pos[c] = i\n\n    partitions = []\n    start, end = 0, 0\n    for i, c in enumerate(s):\n        end = max(end, last_pos[c])\n        if i == end:\n            partitions.append(end - start + 1)\n            start = i + 1\n    return partitions\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `arr` of length `n` that represents a permutation of the integers in the range `[0, n - 1]`.\n\nWe split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\nReturn _the largest number of chunks we can make to sort the array_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[4,3,2,1,0\\]\n**Output:** 1\n**Explanation:**\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into \\[4, 3\\], \\[2, 1, 0\\] will result in \\[3, 4, 0, 1, 2\\], which isn't sorted.\n\n**Example 2:**\n\n**Input:** arr = \\[1,0,2,3,4\\]\n**Output:** 4\n**Explanation:**\nWe can split into two chunks, such as \\[1, 0\\], \\[2, 3, 4\\].\nHowever, splitting into \\[1, 0\\], \\[2\\], \\[3\\], \\[4\\] is the highest number of chunks possible.\n\n**Constraints:**\n\n*   `n == arr.length`\n*   `1 <= n <= 10`\n*   `0 <= arr[i] < n`\n*   All the elements of `arr` are **unique**.The first chunk can be found as the smallest k for which A[:k+1] == [0, 1, 2, ...k]; then we repeat this process.",
          "output": "def orderOfLargestPlusSign(n, mines):\n    grid = [[1] * n for _ in range(n)]\n    for mine in mines:\n        grid[mine[0]][mine[1]] = 0\n        \n    left, right, up, down = [list(grid) for _ in range(4)]\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]:\n                left[i][j] = 1 + (left[i][j - 1] if j > 0 else 0)\n                up[i][j] = 1 + (up[i - 1][j] if i > 0 else 0)\n\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if grid[i][j]:\n                right[i][j] = 1 + (right[i][j + 1] if j < n - 1 else 0)\n                down[i][j] = 1 + (down[i + 1][j] if i < n - 1 else 0)\n                ans = max(ans, min([left[i][j], right[i][j], up[i][j], down[i][j]]))\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an expression such as `expression = \"e + 8 - a + 5 \"` and an evaluation map such as `{ \"e \": 1}` (given in terms of `evalvars = [ \"e \"]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[ \"-1*a \", \"14 \"]`\n\n*   An expression alternates chunks and symbols, with a space separating each chunk and symbol.\n*   A chunk is either an expression in parentheses, a variable, or a non-negative integer.\n*   A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x \"` or `\"-x \"`.\n\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\n\n*   For example, `expression = \"1 + 2 * 3 \"` has an answer of `[ \"7 \"]`.\n\nThe format of the output is as follows:\n\n*   For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n    *   For example, we would never write a term like `\"b*a*c \"`, only `\"a*b*c \"`.\n*   Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n    *   For example, `\"a*a*b*c \"` has degree `4`.\n*   The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\n*   An example of a well-formatted answer is `[ \"-2*a*a*a \", \"3*a*a*b \", \"3*b*b \", \"4*a \", \"5*c \", \"-6 \"]`.\n*   Terms (including constant terms) with coefficient `0` are not included.\n    *   For example, an expression of `\"0 \"` has an output of `[]`.\n\n**Note:** You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"e + 8 - a + 5 \", evalvars = \\[ \"e \"\\], evalints = \\[1\\]\n**Output:** \\[ \"-1\\*a \", \"14 \"\\]\n\n**Example 2:**\n\n**Input:** expression =  \"e - 8 + temperature - pressure \", evalvars = \\[ \"e \",  \"temperature \"\\], evalints = \\[1, 12\\]\n**Output:** \\[ \"-1\\*pressure \", \"5 \"\\]\n\n**Example 3:**\n\n**Input:** expression =  \"(e + 8) \\* (e - 8) \", evalvars = \\[\\], evalints = \\[\\]\n**Output:** \\[ \"1\\*e\\*e \", \"-64 \"\\]\n\n**Constraints:**\n\n*   `1 <= expression.length <= 250`\n*   `expression` consists of lowercase English letters, digits, `'+'`, `'-'`, `'*'`, `'('`, `')'`, `' '`.\n*   `expression` does not contain any leading or trailing spaces.\n*   All the tokens in `expression` are separated by a single space.\n*   `0 <= evalvars.length <= 100`\n*   `1 <= evalvars[i].length <= 20`\n*   `evalvars[i]` consists of lowercase English letters.\n*   `evalints.length == evalvars.length`\n*   `-100 <= evalints[i] <= 100`One way is with a Polynomial class.  For example,\r\n\r\n* `Poly:add(this, that)` returns the result of `this + that`.\r\n* `Poly:sub(this, that)` returns the result of `this - that`.\r\n* `Poly:mul(this, that)` returns the result of `this * that`.\r\n* `Poly:evaluate(this, evalmap)` returns the polynomial after replacing all free variables with constants as specified by `evalmap`.\r\n* `Poly:toList(this)` returns the polynomial in the correct output format.\r\n\r\n* `Solution::combine(left, right, symbol)` returns the result of applying the binary operator represented by `symbol` to `left` and `right`.\r\n* `Solution::make(expr)` makes a new `Poly` represented by either the constant or free variable specified by `expr`.\r\n* `Solution::parse(expr)` parses an expression into a new `Poly`.",
          "output": "def minSwapsCouples(row):\n    n = len(row) // 2\n    swaps = 0\n    position = {num: i for i, num in enumerate(row)}\n\n    for i in range(0, len(row), 2):\n        couple = row[i] - 1 if row[i] % 2 else row[i] + 1\n        if row[i + 1] != couple:\n            row[i + 1], row[position[couple]] = row[position[couple]], row[i + 1]\n            position[row[i + 1]], position[couple] = position[couple], i + 1\n            swaps += 1\n\n    return swaps\n"
     },
     {
          "instruction": "Write python code for this problem: You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels.\n\nLetters are case sensitive, so `\"a \"` is considered a different type of stone from `\"A \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** jewels = \"aA\", stones = \"aAAbbbb\"\n**Output:** 3\n\n**Example 2:**\n\n**Input:** jewels = \"z\", stones = \"ZZ\"\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= jewels.length, stones.length <= 50`\n*   `jewels` and `stones` consist of only English letters.\n*   All the characters of `jewels` are **unique**.For each stone, check if it is a jewel.",
          "output": "def num_jewels_in_stones(jewels: str, stones: str) -> int:\n    count = 0\n    for stone in stones:\n        if stone in jewels:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary search tree (BST) and an integer `val`.\n\nFind the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,7,1,3\\], val = 2\n**Output:** \\[2,1,3\\]\n\n**Example 2:**\n\n**Input:** root = \\[4,2,7,1,3\\], val = 5\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 5000]`.\n*   `1 <= Node.val <= 107`\n*   `root` is a binary search tree.\n*   `1 <= val <= 107`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef searchBST(root: TreeNode, val: int) -> TreeNode:\n    if not root or root.val == val:\n        return root\n    return searchBST(root.right, val) if root.val < val else searchBST(root.left, val)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return _the root node of the BST after the insertion_. It is **guaranteed** that the new value does not exist in the original BST.\n\n**Notice** that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return **any of them**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,7,1,3\\], val = 5\n**Output:** \\[4,2,7,1,3,5\\]\n**Explanation:** Another accepted tree is:\n \n\n**Example 2:**\n\n**Input:** root = \\[40,20,60,10,30,50,70\\], val = 25\n**Output:** \\[40,20,60,10,30,50,70,null,null,25\\]\n\n**Example 3:**\n\n**Input:** root = \\[4,2,7,1,3,null,null,null,null,null,null\\], val = 5\n**Output:** \\[4,2,7,1,3,5\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree will be in the range `[0, 104]`.\n*   `-108 <= Node.val <= 108`\n*   All the values `Node.val` are **unique**.\n*   `-108 <= val <= 108`\n*   It's **guaranteed** that `val` does not exist in the original BST.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef insertIntoBST(root, val):\n    if root is None:\n        return TreeNode(val)\n\n    if val < root.val:\n        root.left = insertIntoBST(root.left, val)\n    else:\n        root.right = insertIntoBST(root.right, val)\n\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Implement a basic calculator to evaluate a simple expression string.\n\nThe expression string contains only non-negative integers, `'+'`, `'-'`, `'*'`, `'/'` operators, and open `'('` and closing parentheses `')'`. The integer division should **truncate toward zero**.\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n**Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1+1 \"\n**Output:** 2\n\n**Example 2:**\n\n**Input:** s =  \"6-4/2 \"\n**Output:** 4\n\n**Example 3:**\n\n**Input:** s =  \"2\\*(5+5\\*2)/3+(6/2+8) \"\n**Output:** 21\n\n**Constraints:**\n\n*   `1 <= s <= 104`\n*   `s` consists of digits, `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n*   `s` is a **valid** expression.",
          "output": "class Node:\n    def __init__(self, val: bool, isLeaf: bool, topLeft: 'Node', topRight: 'Node', bottomLeft: 'Node', bottomRight: 'Node'):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\ndef construct(grid):\n    def helper(x, y, length):\n        if length == 1:\n            return Node(grid[x][y] == 1, True, None, None, None, None)\n\n        tl = helper(x, y, length // 2)\n        tr = helper(x, y + length // 2, length // 2)\n        bl = helper(x + length // 2, y, length // 2)\n        br = helper(x + length // 2, y + length // 2, length // 2)\n\n        if tl.isLeaf and tr.isLeaf and bl.isLeaf and br.isLeaf and tl.val == tr.val and tr.val == bl.val and bl.val == br.val:\n            return Node(tl.val, True, None, None, None, None)\n        else:\n            return Node(False, False, tl, tr, bl, br)\n\n    return helper(0, 0, len(grid))\n"
     },
     {
          "instruction": "Write python code for this problem: This is an **_interactive problem_**.\n\nYou have a sorted array of **unique** elements and an **unknown size**. You do not have an access to the array but you can use the `ArrayReader` interface to access it. You can call `ArrayReader.get(i)` that:\n\n*   returns the value at the `ith` index (**0-indexed**) of the secret array (i.e., `secret[i]`), or\n*   returns `231 - 1` if the `i` is out of the boundary of the array.\n\nYou are also given an integer `target`.\n\nReturn the index `k` of the hidden array where `secret[k] == target` or return `-1` otherwise.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** secret = \\[-1,0,3,5,9,12\\], target = 9\n**Output:** 4\n**Explanation:** 9 exists in secret and its index is 4.\n\n**Example 2:**\n\n**Input:** secret = \\[-1,0,3,5,9,12\\], target = 2\n**Output:** -1\n**Explanation:** 2 does not exist in secret so return -1.\n\n**Constraints:**\n\n*   `1 <= secret.length <= 104`\n*   `-104 <= secret[i], target <= 104`\n*   `secret` is sorted in a strictly increasing order.",
          "output": "def search(reader, target):\n    left, right = 0, 1\n    while reader.get(right) < target:\n        left = right\n        right <<= 1\n\n    while left <= right:\n        mid = left + ((right - left) >> 1)\n        val = reader.get(mid)\n        if val == target:\n            return mid\n        if val > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: On an `2 x 3` board, there are five tiles labeled from `1` to `5`, and an empty square represented by `0`. A **move** consists of choosing `0` and a 4-directionally adjacent number and swapping it.\n\nThe state of the board is solved if and only if the board is `[[1,2,3],[4,5,0]]`.\n\nGiven the puzzle board `board`, return _the least number of moves required so that the state of the board is solved_. If it is impossible for the state of the board to be solved, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[1,2,3\\],\\[4,0,5\\]\\]\n**Output:** 1\n**Explanation:** Swap the 0 and the 5 in one move.\n\n**Example 2:**\n\n**Input:** board = \\[\\[1,2,3\\],\\[5,4,0\\]\\]\n**Output:** -1\n**Explanation:** No number of moves will make the board solved.\n\n**Example 3:**\n\n**Input:** board = \\[\\[4,1,2\\],\\[5,0,3\\]\\]\n**Output:** 5\n**Explanation:** 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: \\[\\[4,1,2\\],\\[5,0,3\\]\\]\nAfter move 1: \\[\\[4,1,2\\],\\[0,5,3\\]\\]\nAfter move 2: \\[\\[0,1,2\\],\\[4,5,3\\]\\]\nAfter move 3: \\[\\[1,0,2\\],\\[4,5,3\\]\\]\nAfter move 4: \\[\\[1,2,0\\],\\[4,5,3\\]\\]\nAfter move 5: \\[\\[1,2,3\\],\\[4,5,0\\]\\]\n\n**Constraints:**\n\n*   `board.length == 2`\n*   `board[i].length == 3`\n*   `0 <= board[i][j] <= 5`\n*   Each value `board[i][j]` is **unique**.Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move.",
          "output": "class TreeNode:\n    def __init__(self, isLeaf, val, topLeft=None, topRight=None, bottomLeft=None, bottomRight=None):\n        self.isLeaf = isLeaf\n        self.val = val\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\ndef intersect(quadTree1, quadTree2):    \n    if quadTree1.isLeaf:\n        return quadTree1 if quadTree1.val else quadTree2\n    if quadTree2.isLeaf:\n        return quadTree2 if quadTree2.val else quadTree1\n\n    quadTree1.topLeft = intersect(quadTree1.topLeft, quadTree2.topLeft)\n    quadTree1.topRight = intersect(quadTree1.topRight, quadTree2.topRight)\n    quadTree1.bottomLeft = intersect(quadTree1.bottomLeft, quadTree2.bottomLeft)\n    quadTree1.bottomRight = intersect(quadTree1.bottomRight, quadTree2.bottomRight)\n\n    if quadTree1.topLeft.isLeaf and quadTree1.topRight.isLeaf and quadTree1.bottomLeft.isLeaf and quadTree1.bottomRight.isLeaf and quadTree1.topLeft.val == quadTree1.topRight.val == quadTree1.bottomLeft.val == quadTree1.bottomRight.val:\n        quadTree1.isLeaf = True\n        quadTree1.val = quadTree1.topLeft.val\n\n    return quadTree1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `stations` that represents the positions of the gas stations on the **x-axis**. You are also given an integer `k`.\n\nYou should add `k` new gas stations. You can add the stations anywhere on the **x-axis**, and not necessarily on an integer position.\n\nLet `penalty()` be the maximum distance between **adjacent** gas stations after adding the `k` new stations.\n\nReturn _the smallest possible value of_ `penalty()`. Answers within `10-6` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** stations = \\[1,2,3,4,5,6,7,8,9,10\\], k = 9\n**Output:** 0.50000\n\n**Example 2:**\n\n**Input:** stations = \\[23,24,36,39,46,56,57,65,84,98\\], k = 1\n**Output:** 14.00000\n\n**Constraints:**\n\n*   `10 <= stations.length <= 2000`\n*   `0 <= stations[i] <= 108`\n*   `stations` is sorted in a **strictly increasing** order.\n*   `1 <= k <= 106`Use a binary search.  We'll binary search the monotone function \"possible(D) = can we use K or less gas stations to ensure each adjacent distance between gas stations is at most D?\"",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n \ndef max_depth(root):\n    if root is None:\n        return 0\n    depth = 0\n    for child in root.children:\n        depth = max(depth, max_depth(child))\n    return 1 + depth\n"
     },
     {
          "instruction": "Write python code for this problem: Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\nImplement `KthLargest` class:\n\n*   `KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.\n*   `int add(int val)` Appends the integer `val` to the stream and returns the element representing the `kth` largest element in the stream.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"KthLargest \",  \"add \",  \"add \",  \"add \",  \"add \",  \"add \"\\]\n\\[\\[3, \\[4, 5, 8, 2\\]\\], \\[3\\], \\[5\\], \\[10\\], \\[9\\], \\[4\\]\\]\n**Output**\n\\[null, 4, 5, 5, 8, 8\\]\n\n**Explanation**\nKthLargest kthLargest = new KthLargest(3, \\[4, 5, 8, 2\\]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n\n**Constraints:**\n\n*   `1 <= k <= 104`\n*   `0 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `-104 <= val <= 104`\n*   At most `104` calls will be made to `add`.\n*   It is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element.",
          "output": "import heapq\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.min_heap = nums\n        heapq.heapify(self.min_heap)\n        \n        while len(self.min_heap) > k:\n            heapq.heappop(self.min_heap)\n\n    def add(self, val: int) -> int:\n        if len(self.min_heap) < self.k:\n            heapq.heappush(self.min_heap, val)\n        elif val > self.min_heap[0]:\n            heapq.heappushpop(self.min_heap, val)\n        return self.min_heap[0]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of length `n` which represents a permutation of all the integers in the range `[0, n - 1]`.\n\nThe number of **global inversions** is the number of the different pairs `(i, j)` where:\n\n*   `0 <= i < j < n`\n*   `nums[i] > nums[j]`\n\nThe number of **local inversions** is the number of indices `i` where:\n\n*   `0 <= i < n - 1`\n*   `nums[i] > nums[i + 1]`\n\nReturn `true` _if the number of **global inversions** is equal to the number of **local inversions**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,0,2\\]\n**Output:** true\n**Explanation:** There is 1 global inversion and 1 local inversion.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,0\\]\n**Output:** false\n**Explanation:** There are 2 global inversions and 1 local inversion.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `0 <= nums[i] < n`\n*   All the integers of `nums` are **unique**.\n*   `nums` is a permutation of all the numbers in the range `[0, n - 1]`.Where can the 0 be placed in an ideal permutation?  What about the 1?",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef helper(root, result):\n    if not root:\n        return\n    result.append(root.val)\n    for child in root.children:\n        helper(child, result)\n\ndef preorder(root):\n    result = []\n    helper(root, result)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree (BST) and an integer `target`, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value. It Is not necessarily the case that the tree contains a node with the value `target`.\n\nAdditionally, most of the structure of the original tree should remain. Formally, for any child `c` with parent `p` in the original tree, if they are both in the same subtree after the split, then node `c` should still have the parent `p`.\n\nReturn _an array of the two roots of the two subtrees_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,6,1,3,5,7\\], target = 2\n**Output:** \\[\\[2,1\\],\\[4,3,6,null,null,5,7\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[1\\], target = 1\n**Output:** \\[\\[1\\],\\[\\]\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 50]`.\n*   `0 <= Node.val, target <= 1000`Use recursion.  If root.val <= V, you split root.right into two halves, then join it's left half back on root.right.",
          "output": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef postorder(root: 'Node'):\n    if root is None:\n        return []\n    \n    result = []\n    stack = [root]\n\n    while stack:\n        curr = stack.pop()\n        result.append(curr.val)\n        stack.extend(curr.children)\n\n    return result[::-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-1,0,3,5,9,12\\], target = 9\n**Output:** 4\n**Explanation:** 9 exists in nums and its index is 4\n\n**Example 2:**\n\n**Input:** nums = \\[-1,0,3,5,9,12\\], target = 2\n**Output:** -1\n**Explanation:** 2 does not exist in nums so return -1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 < nums[i], target < 104`\n*   All the integers in `nums` are **unique**.\n*   `nums` is sorted in ascending order.",
          "output": "def search(nums: List[int], target: int) -> int:\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: In a string composed of `'L'`, `'R'`, and `'X'` characters, like `\"RXXLRXRXL \"`, a move consists of either replacing one occurrence of `\"XL \"` with `\"LX \"`, or replacing one occurrence of `\"RX \"` with `\"XR \"`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.\n\n",
          "input": "**Example 1:**\n\n**Input:** start =  \"RXXLRXRXL \", end =  \"XRLXXRRLX \"\n**Output:** true\n**Explanation:** We can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX\n\n**Example 2:**\n\n**Input:** start =  \"X \", end =  \"L \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= start.length <= 104`\n*   `start.length == end.length`\n*   Both `start` and `end` will only consist of characters in `'L'`, `'R'`, and `'X'`.Think of the L and R's as people on a horizontal line, where X is a space.  The people can't cross each other, and also you can't go from XRX to RXX.",
          "output": "def isToeplitzMatrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the elevation at that point `(i, j)`.\n\nThe rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nReturn _the least time until you can reach the bottom right square_ `(n - 1, n - 1)` _if you start at the top left square_ `(0, 0)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,2\\],\\[1,3\\]\\]\n**Output:** 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,1,2,3,4\\],\\[24,23,22,21,5\\],\\[12,13,14,15,16\\],\\[11,17,18,19,20\\],\\[10,9,8,7,6\\]\\]\n**Output:** 16\n**Explanation:** The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n\n**Constraints:**\n\n*   `n == grid.length`\n*   `n == grid[i].length`\n*   `1 <= n <= 50`\n*   `0 <= grid[i][j] < n2`\n*   Each value `grid[i][j]` is **unique**.Use either Dijkstra's, or binary search for the best time T for which you can reach the end if you only step on squares at most T.",
          "output": "import heapq\n\ndef rearrange_string(s):\n    counts = {}\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n    \n    pq = [(-count, char) for char, count in counts.items()]\n    heapq.heapify(pq)\n    \n    result = []\n    previous = (0, '')\n    \n    while pq:\n        count, char = heapq.heappop(pq)\n        result.append(char)\n        \n        if previous[0] < 0:\n            heapq.heappush(pq, previous)\n        \n        count += 1\n        previous = (count, char)\n    \n    result_str = ''.join(result)\n    return result_str if len(result_str) == len(s) else \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: We build a table of `n` rows (**1-indexed**). We start by writing `0` in the `1st` row. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`.\n\n*   For example, for `n = 3`, the `1st` row is `0`, the `2nd` row is `01`, and the `3rd` row is `0110`.\n\nGiven two integer `n` and `k`, return the `kth` (**1-indexed**) symbol in the `nth` row of a table of `n` rows.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1, k = 1\n**Output:** 0\n**Explanation:** row 1: 0\n\n**Example 2:**\n\n**Input:** n = 2, k = 1\n**Output:** 0\n**Explanation:** \nrow 1: 0\nrow 2: 01\n\n**Example 3:**\n\n**Input:** n = 2, k = 2\n**Output:** 1\n**Explanation:** \nrow 1: 0\nrow 2: 01\n\n**Constraints:**\n\n*   `1 <= n <= 30`\n*   `1 <= k <= 2n - 1`Try to represent the current (N, K) in terms of some (N-1, prevK).  What is prevK ?",
          "output": "def max_chunks_to_sorted(arr):\n    max_val, chunks = 0, 0\n    for i, value in enumerate(arr):\n        max_val = max(max_val, value)\n        if max_val == i:\n            chunks += 1\n    return chunks\n"
     },
     {
          "instruction": "Write python code for this problem: Given four integers `sx`, `sy`, `tx`, and `ty`, return `true` _if it is possible to convert the point_ `(sx, sy)` _to the point_ `(tx, ty)` _through some operations__, or_ `false` _otherwise_.\n\nThe allowed operation on some point `(x, y)` is to convert it to either `(x, x + y)` or `(x + y, y)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** sx = 1, sy = 1, tx = 3, ty = 5\n**Output:** true\n**Explanation:**\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)\n\n**Example 2:**\n\n**Input:** sx = 1, sy = 1, tx = 2, ty = 2\n**Output:** false\n\n**Example 3:**\n\n**Input:** sx = 1, sy = 1, tx = 1, ty = 1\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= sx, sy, tx, ty <= 109`",
          "output": "def max_chunks_to_sorted(arr):\n    max_so_far, count = 0, 0\n    for i, val in enumerate(arr):\n        max_so_far = max(max_so_far, val)\n        if max_so_far == i:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: There is a forest with an unknown number of rabbits. We asked n rabbits **\"How many rabbits have the same color as you? \"** and collected the answers in an integer array `answers` where `answers[i]` is the answer of the `ith` rabbit.\n\nGiven the array `answers`, return _the minimum number of rabbits that could be in the forest_.\n\n",
          "input": "**Example 1:**\n\n**Input:** answers = \\[1,1,2\\]\n**Output:** 5\n**Explanation:**\nThe two rabbits that answered  \"1 \" could both be the same color, say red.\nThe rabbit that answered  \"2 \" can't be red or the answers would be inconsistent.\nSay the rabbit that answered  \"2 \" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.\n\n**Example 2:**\n\n**Input:** answers = \\[10,10,10\\]\n**Output:** 11\n\n**Constraints:**\n\n*   `1 <= answers.length <= 1000`\n*   `0 <= answers[i] < 1000`",
          "output": "from collections import Counter\n\ndef numRabbits(answers):\n    count = Counter(answers)\n    rabbits = 0\n    for ans, cnt in count.items():\n        rabbits += (ans + cnt)//(ans + 1) * (ans + 1)\n    return rabbits\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` binary grid `board`. In each move, you can swap any two rows with each other, or any two columns with each other.\n\nReturn _the minimum number of moves to transform the board into a **chessboard board**_. If the task is impossible, return `-1`.\n\nA **chessboard board** is a board where no `0`'s and no `1`'s are 4-directionally adjacent.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[1,0,0,1\\],\\[1,0,0,1\\]\\]\n**Output:** 2\n**Explanation:** One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.\n\n**Example 2:**\n\n**Input:** board = \\[\\[0,1\\],\\[1,0\\]\\]\n**Output:** 0\n**Explanation:** Also note that the board with 0 in the top left corner, is also a valid chessboard.\n\n**Example 3:**\n\n**Input:** board = \\[\\[1,0\\],\\[1,0\\]\\]\n**Output:** -1\n**Explanation:** No matter what sequence of moves you make, you cannot end with a valid chessboard.\n\n**Constraints:**\n\n*   `n == board.length`\n*   `n == board[i].length`\n*   `2 <= n <= 30`\n*   `board[i][j]` is either `0` or `1`.",
          "output": "def numJewelsInStones(jewels, stones):\n    count = 0\n    for s in stones:\n        if s in jewels:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a Binary Search Tree (BST), return _the minimum difference between the values of any two different nodes in the tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,2,6,1,3\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** root = \\[1,0,48,null,null,12,49\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 100]`.\n*   `0 <= Node.val <= 105`\n\n**Note:** This question is the same as 530: [https://leetcode.com/problems/minimum-absolute-difference-in-bst/](https://leetcode.com/problems/minimum-absolute-difference-in-bst/)",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef searchBST(root: TreeNode, val: int) -> TreeNode:\n    if not root or root.val == val:\n        return root\n    return searchBST(root.left, val) if root.val > val else searchBST(root.right, val)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, you can transform every letter individually to be lowercase or uppercase to create another string.\n\nReturn _a list of all possible strings we could create_. Return the output in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"a1b2 \"\n**Output:** \\[ \"a1b2 \", \"a1B2 \", \"A1b2 \", \"A1B2 \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"3z4 \"\n**Output:** \\[ \"3z4 \", \"3Z4 \"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 12`\n*   `s` consists of lowercase English letters, uppercase English letters, and digits.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef insertIntoBST(root, val):\n    if root is None:\n        return TreeNode(val)\n\n    if val < root.val:\n        root.left = insertIntoBST(root.left, val)\n    else:\n        root.right = insertIntoBST(root.right, val)\n\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: There is an **undirected** graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:\n\n*   There are no self-edges (`graph[u]` does not contain `u`).\n*   There are no parallel edges (`graph[u]` does not contain duplicate values).\n*   If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).\n*   The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.\n\nA graph is **bipartite** if the nodes can be partitioned into two independent sets `A` and `B` such that **every** edge in the graph connects a node in set `A` and a node in set `B`.\n\nReturn `true` _if and only if it is **bipartite**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[1,2,3\\],\\[0,2\\],\\[0,1,3\\],\\[0,2\\]\\]\n**Output:** false\n**Explanation:** There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.\n\n**Example 2:**\n\n**Input:** graph = \\[\\[1,3\\],\\[0,2\\],\\[1,3\\],\\[0,2\\]\\]\n**Output:** true\n**Explanation:** We can partition the nodes into two sets: {0, 2} and {1, 3}.\n\n**Constraints:**\n\n*   `graph.length == n`\n*   `1 <= n <= 100`\n*   `0 <= graph[u].length < n`\n*   `0 <= graph[u][i] <= n - 1`\n*   `graph[u]` does not contain `u`.\n*   All the values of `graph[u]` are **unique**.\n*   If `graph[u]` contains `v`, then `graph[v]` contains `u`.",
          "output": "def isBipartite(graph: List[List[int]]) -> bool:\n    def dfs(node: int, color: int) -> bool:\n        if colors[node]:\n            return colors[node] == color\n\n        colors[node] = color\n        for neighbor in graph[node]:\n            if not dfs(neighbor, 3 - color):\n                return False\n\n        return True\n\n    n = len(graph)\n    colors = [0] * n\n\n    for i in range(n):\n        if not colors[i] and not dfs(i, 1):\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a sorted integer array `arr` containing `1` and **prime** numbers, where all the integers of `arr` are unique. You are also given an integer `k`.\n\nFor every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`.\n\nReturn _the_ `kth` _smallest fraction considered_. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3,5\\], k = 3\n**Output:** \\[2,5\\]\n**Explanation:** The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5.\n\n**Example 2:**\n\n**Input:** arr = \\[1,7\\], k = 1\n**Output:** \\[1,7\\]\n\n**Constraints:**\n\n*   `2 <= arr.length <= 1000`\n*   `1 <= arr[i] <= 3 * 104`\n*   `arr[0] == 1`\n*   `arr[i]` is a **prime** number for `i > 0`.\n*   All the numbers of `arr` are **unique** and sorted in **strictly increasing** order.\n*   `1 <= k <= arr.length * (arr.length - 1) / 2`\n\n**Follow up:** Can you solve the problem with better than `O(n2)` complexity?",
          "output": "import heapq\nfrom typing import List\n\ndef kthSmallestPrimeFraction(arr: List[int], k: int) -> List[int]:\n    pq = [(arr[i] / arr[j], i, j) for j in range(len(arr) - 1, 0, -1)]\n    heapq.heapify(pq)\n    for _ in range(k - 1):\n        _, i, j = heapq.heappop(pq)\n        if j != i + 1:\n            heapq.heappush(pq, (arr[i] / arr[j - 1], i, j - 1))\n    return [arr[pq[0][1]], arr[pq[0][2]]]\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`.\n\nYou are also given three integers `src`, `dst`, and `k`, return _**the cheapest price** from_ `src` _to_ `dst` _with at most_ `k` _stops._ If there is no such route, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, flights = \\[\\[0,1,100\\],\\[1,2,100\\],\\[2,0,100\\],\\[1,3,600\\],\\[2,3,200\\]\\], src = 0, dst = 3, k = 1\n**Output:** 700\n**Explanation:**\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities \\[0,1,2,3\\] is cheaper but is invalid because it uses 2 stops.\n\n**Example 2:**\n\n**Input:** n = 3, flights = \\[\\[0,1,100\\],\\[1,2,100\\],\\[0,2,500\\]\\], src = 0, dst = 2, k = 1\n**Output:** 200\n**Explanation:**\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n\n**Example 3:**\n\n**Input:** n = 3, flights = \\[\\[0,1,100\\],\\[1,2,100\\],\\[0,2,500\\]\\], src = 0, dst = 2, k = 0\n**Output:** 500\n**Explanation:**\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n\n**Constraints:**\n\n*   `1 <= n <= 100`\n*   `0 <= flights.length <= (n * (n - 1) / 2)`\n*   `flights[i].length == 3`\n*   `0 <= fromi, toi < n`\n*   `fromi != toi`\n*   `1 <= pricei <= 104`\n*   There will not be any multiple flights between two cities.\n*   `0 <= src, dst, k < n`\n*   `src != dst`",
          "output": "from collections import deque\n\ndef slidingPuzzle(board):\n    m, n = 2, 3\n    target = \"123450\"\n    start = \"\".join(str(num) for row in board for num in row)\n    dirs = [[1, 3], [0, 2, 4], [1, 5], [0, 4], [1, 3, 5], [2, 4]]\n    q = deque([start])\n    res = 0\n    visited = {start}\n    while q:\n        for _ in range(len(q)):\n            cur = q.popleft()\n            if cur == target:\n                return res\n            zero_idx = cur.index(\"0\")\n            for dir in dirs[zero_idx]:\n                neighbor = list(cur)\n                neighbor[zero_idx], neighbor[dir] = neighbor[dir], neighbor[zero_idx]\n                neighbor = \"\".join(neighbor)\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    q.append(neighbor)\n        res += 1\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: An integer `x` is a **good** if after rotating each digit individually by 180 degrees, we get a valid number that is different from `x`. Each digit must be rotated - we cannot choose to leave it alone.\n\nA number is valid if each digit remains a digit after rotation. For example:\n\n*   `0`, `1`, and `8` rotate to themselves,\n*   `2` and `5` rotate to each other (in this case they are rotated in a different direction, in other words, `2` or `5` gets mirrored),\n*   `6` and `9` rotate to each other, and\n*   the rest of the numbers do not rotate to any other number and become invalid.\n\nGiven an integer `n`, return _the number of **good** integers in the range_ `[1, n]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10\n**Output:** 4\n**Explanation:** There are four good numbers in the range \\[1, 10\\] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 0\n\n**Example 3:**\n\n**Input:** n = 2\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 104`",
          "output": "def rotatedDigits(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if isGood(i):\n            count += 1\n    return count\n\ndef isGood(num: int) -> bool:\n    changed = False\n    while num:\n        digit = num % 10\n        if digit in (3, 4, 7):\n            return False\n        if digit in (2, 5, 6, 9):\n            changed = True\n        num //= 10\n    return changed\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]` that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are **integral coordinates**.\n\nEach turn, you and all the ghosts may independently choose to either **move 1 unit** in any of the four cardinal directions: north, east, south, or west, or **stay still**. All actions happen **simultaneously**.\n\nYou escape if and only if you can reach the target **before** any ghost reaches you. If you reach any square (including the target) at the **same time** as a ghost, it **does not** count as an escape.\n\nReturn `true` _if it is possible to escape regardless of how the ghosts move, otherwise return_ `false`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** ghosts = \\[\\[1,0\\],\\[0,3\\]\\], target = \\[0,1\\]\n**Output:** true\n**Explanation:** You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n\n**Example 2:**\n\n**Input:** ghosts = \\[\\[1,0\\]\\], target = \\[2,0\\]\n**Output:** false\n**Explanation:** You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n\n**Example 3:**\n\n**Input:** ghosts = \\[\\[2,0\\]\\], target = \\[1,0\\]\n**Output:** false\n**Explanation:** The ghost can reach the target at the same time as you.\n\n**Constraints:**\n\n*   `1 <= ghosts.length <= 100`\n*   `ghosts[i].length == 2`\n*   `-104 <= xi, yi <= 104`\n*   There can be **multiple ghosts** in the same location.\n*   `target.length == 2`\n*   `-104 <= xtarget, ytarget <= 104`",
          "output": "import heapq\n\nclass KthLargest:\n\n    def __init__(self, k, nums):\n        self.heap = []\n        self.k = k\n        for num in nums:\n            self.add(num)\n\n    def add(self, val):\n        heapq.heappush(self.heap, val)\n        if len(self.heap) > self.k:\n            heapq.heappop(self.heap)\n        return self.heap[0]\n"
     },
     {
          "instruction": "Write python code for this problem: You have two types of tiles: a `2 x 1` domino shape and a tromino shape. You may rotate these shapes.\n\nGiven an integer n, return _the number of ways to tile an_ `2 x n` _board_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 5\n**Explanation:** The five different ways are show above.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 1000`",
          "output": "def is_ideal_permutation(nums):\n    for i, num in enumerate(nums):\n        if abs(num - i) > 1:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings order and s. All the characters of `order` are **unique** and were sorted in some custom order previously.\n\nPermute the characters of `s` so that they match the order that `order` was sorted. More specifically, if a character `x` occurs before a character `y` in `order`, then `x` should occur before `y` in the permuted string.\n\nReturn _any permutation of_ `s` _that satisfies this property_.\n\n",
          "input": "**Example 1:**\n\n**Input:** order =  \"cba \", s =  \"abcd \"\n**Output:**  \"cbad \"\n**Explanation:** \n \"a \",  \"b \",  \"c \" appear in order, so the order of  \"a \",  \"b \",  \"c \" should be  \"c \",  \"b \", and  \"a \". \nSince  \"d \" does not appear in order, it can be at any position in the returned string.  \"dcba \",  \"cdba \",  \"cbda \" are also valid outputs.\n\n**Example 2:**\n\n**Input:** order =  \"cbafg \", s =  \"abcd \"\n**Output:**  \"cbad \"\n\n**Constraints:**\n\n*   `1 <= order.length <= 26`\n*   `1 <= s.length <= 200`\n*   `order` and `s` consist of lowercase English letters.\n*   All the characters of `order` are **unique**.",
          "output": "def customSortString(order, s):\n    priority = {char: idx for idx, char in enumerate(order)}\n    return \"\".join(sorted(s, key=lambda x: priority.get(x, 0)))\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an array of strings `words`, return _the number of_ `words[i]` _that is a subsequence of_ `s`.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n*   For example, `\"ace \"` is a subsequence of `\"abcde \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcde \", words = \\[ \"a \", \"bb \", \"acd \", \"ace \"\\]\n**Output:** 3\n**Explanation:** There are three strings in words that are a subsequence of s:  \"a \",  \"acd \",  \"ace \".\n\n**Example 2:**\n\n**Input:** s =  \"dsahjpjauf \", words = \\[ \"ahjpjau \", \"ja \", \"ahbwzgqnuk \", \"tnmlanowax \"\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `1 <= words.length <= 5000`\n*   `1 <= words[i].length <= 50`\n*   `s` and `words[i]` consist of only lowercase English letters.",
          "output": "def search(nums, target):\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Let `f(x)` be the number of zeroes at the end of `x!`. Recall that `x! = 1 * 2 * 3 * ... * x` and by convention, `0! = 1`.\n\n*   For example, `f(3) = 0` because `3! = 6` has no zeroes at the end, while `f(11) = 2` because `11! = 39916800` has two zeroes at the end.\n\nGiven an integer `k`, return the number of non-negative integers `x` have the property that `f(x) = k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 0\n**Output:** 5\n**Explanation:** 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n\n**Example 2:**\n\n**Input:** k = 5\n**Output:** 0\n**Explanation:** There is no x such that x! ends in k = 5 zeroes.\n\n**Example 3:**\n\n**Input:** k = 3\n**Output:** 5\n\n**Constraints:**\n\n*   `0 <= k <= 109`",
          "output": "def canTransform(start: str, end: str) -> bool:\n    if len(start) != len(end): return False\n\n    i, j = 0, 0\n    n = len(start)\n    while i < n and j < n:\n        while i < n and start[i] == 'X': i += 1\n        while j < n and end[j] == 'X': j += 1\n\n        if start[i] != end[j]: return False\n\n        if (start[i] == 'R' and i > j) or (start[i] == 'L' and i < j): return False\n\n        i += 1; j += 1\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a Tic-Tac-Toe board as a string array `board`, return `true` if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\n\nThe board is a `3 x 3` array that consists of characters `' '`, `'X'`, and `'O'`. The `' '` character represents an empty square.\n\nHere are the rules of Tic-Tac-Toe:\n\n*   Players take turns placing characters into empty squares `' '`.\n*   The first player always places `'X'` characters, while the second player always places `'O'` characters.\n*   `'X'` and `'O'` characters are always placed into empty squares, never filled ones.\n*   The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\n*   The game also ends if all squares are non-empty.\n*   No more moves can be played if the game is over.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[ \"O   \", \"    \", \"    \"\\]\n**Output:** false\n**Explanation:** The first player always plays  \"X \".\n\n**Example 2:**\n\n**Input:** board = \\[ \"XOX \", \" X  \", \"    \"\\]\n**Output:** false\n**Explanation:** Players take turns making moves.\n\n**Example 3:**\n\n**Input:** board = \\[ \"XOX \", \"O O \", \"XOX \"\\]\n**Output:** true\n\n**Constraints:**\n\n*   `board.length == 3`\n*   `board[i].length == 3`\n*   `board[i][j]` is either `'X'`, `'O'`, or `' '`.",
          "output": "import heapq\n\ndef swim(n, grid):\n    pq = [(grid[0][0], 0, 0)]\n    visited = [[False] * n for _ in range(n)]\n\n    dr = [-1, 0, 1, 0]\n    dc = [0, 1, 0, -1]\n\n    while pq:\n        curT, curR, curC = heapq.heappop(pq)\n\n        if curR == n - 1 and curC == n - 1:\n            return curT\n\n        for d in range(4):\n            newRow, newCol = curR + dr[d], curC + dc[d]\n            if 0 <= newRow < n and 0 <= newCol < n and not visited[newRow][newCol]:\n                visited[newRow][newCol] = True\n                heapq.heappush(pq, (max(curT, grid[newRow][newCol]), newRow, newCol))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and two integers `left` and `right`, return _the number of contiguous non-empty **subarrays** such that the value of the maximum array element in that subarray is in the range_ `[left, right]`.\n\nThe test cases are generated so that the answer will fit in a **32-bit** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,4,3\\], left = 2, right = 3\n**Output:** 3\n**Explanation:** There are three subarrays that meet the requirements: \\[2\\], \\[2, 1\\], \\[3\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,9,2,5,6\\], left = 2, right = 8\n**Output:** 7\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 109`\n*   `0 <= left <= right <= 109`",
          "output": "def kthSymbolInGrammar(n, k):\n    if n == 1:\n        return 0\n    if k % 2 == 0:\n        return 1 - kthSymbolInGrammar(n - 1, k // 2)\n    else:\n        return kthSymbolInGrammar(n - 1, (k + 1) // 2)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `goal`, return `true` _if and only if_ `s` _can become_ `goal` _after some number of **shifts** on_ `s`.\n\nA **shift** on `s` consists of moving the leftmost character of `s` to the rightmost position.\n\n*   For example, if `s = \"abcde \"`, then it will be `\"bcdea \"` after one shift.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"abcde\", goal = \"cdeab\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"abcde\", goal = \"abced\"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length, goal.length <= 100`\n*   `s` and `goal` consist of lowercase English letters.",
          "output": "def can_transform(sx, sy, tx, ty):\n    while sx != tx or sy != ty:\n        if sx > tx or sy > ty:\n            return False\n        if sx < tx:\n            tx -= ty\n        else:\n            ty -= sx\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a directed acyclic graph (**DAG**) of `n` nodes labeled from `0` to `n - 1`, find all possible paths from node `0` to node `n - 1` and return them in **any order**.\n\nThe graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[1,2\\],\\[3\\],\\[3\\],\\[\\]\\]\n**Output:** \\[\\[0,1,3\\],\\[0,2,3\\]\\]\n**Explanation:** There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\n\n**Example 2:**\n\n**Input:** graph = \\[\\[4,3,1\\],\\[3,2,4\\],\\[3\\],\\[4\\],\\[\\]\\]\n**Output:** \\[\\[0,4\\],\\[0,3,4\\],\\[0,1,3,4\\],\\[0,1,2,3,4\\],\\[0,1,4\\]\\]\n\n**Constraints:**\n\n*   `n == graph.length`\n*   `2 <= n <= 15`\n*   `0 <= graph[i][j] < n`\n*   `graph[i][j] != i` (i.e., there will be no self-loops).\n*   All the elements of `graph[i]` are **unique**.\n*   The input graph is **guaranteed** to be a **DAG**.",
          "output": "from collections import defaultdict\ndef numRabbits(answers):\n    count = defaultdict(int)\n    res = 0\n    for a in answers:\n        count[a] += 1\n        if count[a] == 1:\n            res += (a + 1)\n        elif count[a] > a + 1:\n            count[a] = 1\n            res += (a + 1)\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums`. You can rotate it by a non-negative integer `k` so that the array becomes `[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]`. Afterward, any entries that are less than or equal to their index are worth one point.\n\n*   For example, if we have `nums = [2,4,1,3,0]`, and we rotate by `k = 2`, it becomes `[1,3,0,2,4]`. This is worth `3` points because `1 > 0` \\[no points\\], `3 > 1` \\[no points\\], `0 <= 2` \\[one point\\], `2 <= 3` \\[one point\\], `4 <= 4` \\[one point\\].\n\nReturn _the rotation index_ `k` _that corresponds to the highest score we can achieve if we rotated_ `nums` _by it_. If there are multiple answers, return the smallest such index `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,1,4,0\\]\n**Output:** 3\n**Explanation:** Scores for each k are listed below: \nk = 0,  nums = \\[2,3,1,4,0\\],    score 2\nk = 1,  nums = \\[3,1,4,0,2\\],    score 3\nk = 2,  nums = \\[1,4,0,2,3\\],    score 3\nk = 3,  nums = \\[4,0,2,3,1\\],    score 4\nk = 4,  nums = \\[0,2,3,1,4\\],    score 3\nSo we should choose k = 3, which has the highest score.\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,0,2,4\\]\n**Output:** 0\n**Explanation:** nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] < nums.length`",
          "output": "def moves_to_chessboard(board):\n    N = len(board)\n    row, col = 0, 0\n    row_count, col_count = 0, 0\n\n    for i in range(N):\n        for j in range(N):\n            if (board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]) != 0:\n                return -1\n\n    for i in range(N):\n        row ^= board[0][i]\n        col ^= board[i][0]\n        row_count += 1 if board[0][i] == 1 else 0\n        col_count += 1 if board[i][0] == 1 else 0\n\n    if row != 0 and row_count * 2 != N:\n        return -1\n    if col != 0 and col_count * 2 != N:\n        return -1\n\n    if N % 2 == 1:\n        if row_count % 2 == 1:\n            row_count = N - row_count\n        if col_count % 2 == 1:\n            col_count = N - col_count\n    else:\n        row_count = min(row_count, N - row_count)\n        col_count = min(col_count, N - col_count)\n\n    return (row_count + col_count) // 2\n"
     },
     {
          "instruction": "Write python code for this problem: We stack glasses in a pyramid, where the **first** row has `1` glass, the **second** row has `2` glasses, and so on until the 100th row. Each glass holds one cup of champagne.\n\nThen, some champagne is poured into the first glass at the top. When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (A glass at the bottom row has its excess champagne fall on the floor.)\n\nFor example, after one cup of champagne is poured, the top most glass is full. After two cups of champagne are poured, the two glasses on the second row are half full. After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\nNow after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)\n\n",
          "input": "**Example 1:**\n\n**Input:** poured = 1, query\\_row = 1, query\\_glass = 1\n**Output:** 0.00000\n**Explanation:** We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\n\n**Example 2:**\n\n**Input:** poured = 2, query\\_row = 1, query\\_glass = 1\n**Output:** 0.50000\n**Explanation:** We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\n**Example 3:**\n\n**Input:** poured = 100000009, query\\_row = 33, query\\_glass = 17\n**Output:** 1.00000\n\n**Constraints:**\n\n*   `0 <= poured <= 109`\n*   `0 <= query_glass <= query_row < 100`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def __init__(self):\n        self.min_diff = float(\"inf\")\n        self.prev = None\n\n    def minDiffInBST(self, root: TreeNode) -> int:\n        self.in_order_traversal(root)\n        return self.min_diff\n\n    def in_order_traversal(self, node: TreeNode) -> None:\n        if not node: return\n        self.in_order_traversal(node.left)\n        if self.prev:\n            self.min_diff = min(self.min_diff, node.val - self.prev.val)\n        self.prev = node\n        self.in_order_traversal(node.right)\n"
     },
     {
          "instruction": "Write python code for this problem: Design a HashSet without using any built-in hash table libraries.\n\nImplement `MyHashSet` class:\n\n*   `void add(key)` Inserts the value `key` into the HashSet.\n*   `bool contains(key)` Returns whether the value `key` exists in the HashSet or not.\n*   `void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyHashSet \",  \"add \",  \"add \",  \"contains \",  \"contains \",  \"add \",  \"contains \",  \"remove \",  \"contains \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[1\\], \\[3\\], \\[2\\], \\[2\\], \\[2\\], \\[2\\]\\]\n**Output**\n\\[null, null, null, true, false, null, true, null, false\\]\n\n**Explanation**\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = \\[1\\]\nmyHashSet.add(2);      // set = \\[1, 2\\]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = \\[1, 2\\]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = \\[1\\]\nmyHashSet.contains(2); // return False, (already removed)\n\n**Constraints:**\n\n*   `0 <= key <= 106`\n*   At most `104` calls will be made to `add`, `remove`, and `contains`.",
          "output": "class MyHashSet:\n\n    def __init__(self):\n        self.storage = [False] * 1000001\n\n    def add(self, key: int):\n        self.storage[key] = True\n\n    def remove(self, key: int):\n        self.storage[key] = False\n\n    def contains(self, key: int) -> bool:\n        return self.storage[key]\n"
     },
     {
          "instruction": "Write python code for this problem: Design a HashMap without using any built-in hash table libraries.\n\nImplement the `MyHashMap` class:\n\n*   `MyHashMap()` initializes the object with an empty map.\n*   `void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.\n*   `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.\n*   `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyHashMap \",  \"put \",  \"put \",  \"get \",  \"get \",  \"put \",  \"get \",  \"remove \",  \"get \"\\]\n\\[\\[\\], \\[1, 1\\], \\[2, 2\\], \\[1\\], \\[3\\], \\[2, 1\\], \\[2\\], \\[2\\], \\[2\\]\\]\n**Output**\n\\[null, null, null, 1, -1, null, 1, null, -1\\]\n\n**Explanation**\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now \\[\\[1,1\\]\\]\nmyHashMap.put(2, 2); // The map is now \\[\\[1,1\\], \\[2,2\\]\\]\nmyHashMap.get(1);    // return 1, The map is now \\[\\[1,1\\], \\[2,2\\]\\]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now \\[\\[1,1\\], \\[2,2\\]\\]\nmyHashMap.put(2, 1); // The map is now \\[\\[1,1\\], \\[2,1\\]\\] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now \\[\\[1,1\\], \\[2,1\\]\\]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now \\[\\[1,1\\]\\]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now \\[\\[1,1\\]\\]\n\n**Constraints:**\n\n*   `0 <= key, value <= 106`\n*   At most `104` calls will be made to `put`, `get`, and `remove`.",
          "output": "class MyHashMap:\n    def __init__(self):\n        self.size = 10007\n        self.data = [[] for _ in range(self.size)]\n\n    def put(self, key: int, value: int) -> None:\n        bucket = self.data[key % self.size]\n        for pair in bucket:\n            if pair[0] == key:\n                pair[1] = value\n                return\n        bucket.append([key, value])\n\n    def get(self, key: int) -> int:\n        bucket = self.data[key % self.size]\n        for pair in bucket:\n            if pair[0] == key:\n                return pair[1]\n        return -1\n\n    def remove(self, key: int) -> None:\n        bucket = self.data[key % self.size]\n        for i, pair in enumerate(bucket):\n            if pair[0] == key:\n                bucket.pop(i)\n                return\n"
     },
     {
          "instruction": "Write python code for this problem: The red-green-blue color `\"#AABBCC \"` can be written as `\"#ABC \"` in shorthand.\n\n*   For example, `\"#15c \"` is shorthand for the color `\"#1155cc \"`.\n\nThe similarity between the two colors `\"#ABCDEF \"` and `\"#UVWXYZ \"` is `-(AB - UV)2 - (CD - WX)2 - (EF - YZ)2`.\n\nGiven a string `color` that follows the format `\"#ABCDEF \"`, return a string represents the color that is most similar to the given color and has a shorthand (i.e., it can be represented as some `\"#XYZ \"`).\n\n**Any answer** which has the same highest similarity as the best answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** color =  \"#09f166 \"\n**Output:**  \"#11ee66 \"\n**Explanation:** \nThe similarity is -(0x09 - 0x11)2 -(0xf1 - 0xee)2 - (0x66 - 0x66)2 = -64 -9 -0 = -73.\nThis is the highest among any shorthand color.\n\n**Example 2:**\n\n**Input:** color =  \"#4e3fe1 \"\n**Output:**  \"#5544dd \"\n\n**Constraints:**\n\n*   `color.length == 7`\n*   `color[0] == '#'`\n*   `color[i]` is either digit or character in the range `['a', 'f']` for `i > 0`.",
          "output": "def letterCasePermutation(s):\n    def backtrack(index):\n        if index == len(s):\n            result.append(\"\".join(s))\n            return\n        backtrack(index + 1)\n        if s[index].isalpha():\n            s[index] = s[index].swapcase()\n            backtrack(index + 1)\n            s[index] = s[index].swapcase()\n\n    result = []\n    s = list(s)\n    backtrack(0)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays of the same length `nums1` and `nums2`. In one operation, you are allowed to swap `nums1[i]` with `nums2[i]`.\n\n*   For example, if `nums1 = [1,2,3,8]`, and `nums2 = [5,6,7,4]`, you can swap the element at `i = 3` to obtain `nums1 = [1,2,3,4]` and `nums2 = [5,6,7,8]`.\n\nReturn _the minimum number of needed operations to make_ `nums1` _and_ `nums2` _**strictly increasing**_. The test cases are generated so that the given input always makes it possible.\n\nAn array `arr` is **strictly increasing** if and only if `arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,3,5,4\\], nums2 = \\[1,2,3,7\\]\n**Output:** 1\n**Explanation:** \nSwap nums1\\[3\\] and nums2\\[3\\]. Then the sequences are:\nnums1 = \\[1, 3, 5, 7\\] and nums2 = \\[1, 2, 3, 4\\]\nwhich are both strictly increasing.\n\n**Example 2:**\n\n**Input:** nums1 = \\[0,3,5,8,9\\], nums2 = \\[2,1,4,6,9\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `2 <= nums1.length <= 105`\n*   `nums2.length == nums1.length`\n*   `0 <= nums1[i], nums2[i] <= 2 * 105`",
          "output": "from collections import deque\n\ndef isBipartite(graph):\n    colors = [0] * len(graph)\n    for i in range(len(graph)):\n        if colors[i] != 0:\n            continue\n        colors[i] = 1\n        queue = deque([i])\n        while queue:\n            node = queue.popleft()\n            for neighbor in graph[node]:\n                if colors[neighbor] == 0:\n                    colors[neighbor] = -colors[node]\n                    queue.append(neighbor)\n                elif colors[neighbor] == colors[node]:\n                    return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: There is a directed graph of `n` nodes with each node labeled from `0` to `n - 1`. The graph is represented by a **0-indexed** 2D integer array `graph` where `graph[i]` is an integer array of nodes adjacent to node `i`, meaning there is an edge from node `i` to each node in `graph[i]`.\n\nA node is a **terminal node** if there are no outgoing edges. A node is a **safe node** if every possible path starting from that node leads to a **terminal node** (or another safe node).\n\nReturn _an array containing all the **safe nodes** of the graph_. The answer should be sorted in **ascending** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[1,2\\],\\[2,3\\],\\[5\\],\\[0\\],\\[5\\],\\[\\],\\[\\]\\]\n**Output:** \\[2,4,5,6\\]\n**Explanation:** The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.\n\n**Example 2:**\n\n**Input:** graph = \\[\\[1,2,3,4\\],\\[1,2\\],\\[3,4\\],\\[0,4\\],\\[\\]\\]\n**Output:** \\[4\\]\n**Explanation:**\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n\n**Constraints:**\n\n*   `n == graph.length`\n*   `1 <= n <= 104`\n*   `0 <= graph[i].length <= n`\n*   `0 <= graph[i][j] <= n - 1`\n*   `graph[i]` is sorted in a strictly increasing order.\n*   The graph may contain self-loops.\n*   The number of edges in the graph will be in the range `[1, 4 * 104]`.",
          "output": "import heapq\n\ndef kthSmallestPrimeFraction(arr, k):\n    pq = [(-arr[i] / arr[-1], i, len(arr) - 1) for i in range(len(arr) - 1)]\n\n    heapq.heapify(pq)\n\n    for _ in range(k - 1):\n        frac, i, j = heapq.heappop(pq)\n        j -= 1\n        if i < j:\n            heapq.heappush(pq, (-arr[i] / arr[j], i, j))\n\n    frac, i, j = heapq.heappop(pq)\n    return [arr[i], arr[j]]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is **stable** if:\n\n*   It is directly connected to the top of the grid, or\n*   At least one other brick in its four adjacent cells is **stable**.\n\nYou are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will **fall**. Once a brick falls, it is **immediately** erased from the `grid` (i.e., it does not land on other stable bricks).\n\nReturn _an array_ `result`_, where each_ `result[i]` _is the number of bricks that will **fall** after the_ `ith` _erasure is applied._\n\n**Note** that an erasure may refer to a location with no brick, and if it does, no bricks drop.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0,0,0\\],\\[1,1,1,0\\]\\], hits = \\[\\[1,0\\]\\]\n**Output:** \\[2\\]\n**Explanation:** Starting with the grid:\n\\[\\[1,0,0,0\\],\n \\[1,1,1,0\\]\\]\nWe erase the underlined brick at (1,0), resulting in the grid:\n\\[\\[1,0,0,0\\],\n \\[0,1,1,0\\]\\]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n\\[\\[1,0,0,0\\],\n \\[0,0,0,0\\]\\]\nHence the result is \\[2\\].\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0,0,0\\],\\[1,1,0,0\\]\\], hits = \\[\\[1,1\\],\\[1,0\\]\\]\n**Output:** \\[0,0\\]\n**Explanation:** Starting with the grid:\n\\[\\[1,0,0,0\\],\n \\[1,1,0,0\\]\\]\nWe erase the underlined brick at (1,1), resulting in the grid:\n\\[\\[1,0,0,0\\],\n \\[1,0,0,0\\]\\]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n\\[\\[1,0,0,0\\],\n \\[1,0,0,0\\]\\]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n\\[\\[1,0,0,0\\],\n \\[0,0,0,0\\]\\]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is \\[0,0\\].\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 200`\n*   `grid[i][j]` is `0` or `1`.\n*   `1 <= hits.length <= 4 * 104`\n*   `hits[i].length == 2`\n*   `0 <= xi <= m - 1`\n*   `0 <= yi <= n - 1`\n*   All `(xi, yi)` are unique.",
          "output": "import heapq\n\ndef findCheapestPrice(n, flights, src, dst, k):\n    graph = [[] for _ in range(n)]\n    for flight in flights:\n        graph[flight[0]].append((flight[1], flight[2]))\n\n    pq = [(0, src, k + 1)]\n    while pq:\n        price, city, stops = heapq.heappop(pq)\n\n        if city == dst:\n            return price\n\n        if stops > 0:\n            for nei, prc in graph[city]:\n                heapq.heappush(pq, (price + prc, nei, stops - 1))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n\n*   `'a'` maps to `\".- \"`,\n*   `'b'` maps to `\"-... \"`,\n*   `'c'` maps to `\"-.-. \"`, and so on.\n\nFor convenience, the full table for the `26` letters of the English alphabet is given below:\n\n\\[ \".- \", \"-... \", \"-.-. \", \"-.. \", \". \", \"..-. \", \"--. \", \".... \", \".. \", \".--- \", \"-.- \", \".-.. \", \"-- \", \"-. \", \"--- \", \".--. \", \"--.- \", \".-. \", \"... \", \"- \", \"..- \", \"...- \", \".-- \", \"-..- \", \"-.-- \", \"--.. \"\\]\n\nGiven an array of strings `words` where each word can be written as a concatenation of the Morse code of each letter.\n\n*   For example, `\"cab \"` can be written as `\"-.-..--... \"`, which is the concatenation of `\"-.-. \"`, `\".- \"`, and `\"-... \"`. We will call such a concatenation the **transformation** of a word.\n\nReturn _the number of different **transformations** among all words we have_.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"gin \", \"zen \", \"gig \", \"msg \"\\]\n**Output:** 2\n**Explanation:** The transformation of each word is:\n \"gin \" ->  \"--...-. \"\n \"zen \" ->  \"--...-. \"\n \"gig \" ->  \"--...--. \"\n \"msg \" ->  \"--...--. \"\nThere are 2 different transformations:  \"--...-. \" and  \"--...--. \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \"\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 12`\n*   `words[i]` consists of lowercase English letters.",
          "output": "def rotated_digits(n):\n    count = 0\n    for i in range(1, n + 1):\n        is_valid_after_rotation = True\n        is_different_after_rotation = False\n        num = i\n        while num:\n            digit = num % 10\n            if digit in {3, 4, 7}:\n                is_valid_after_rotation = False\n                break\n            if digit in {2, 5, 6, 9}:\n                is_different_after_rotation = True\n            num //= 10\n        if is_valid_after_rotation and is_different_after_rotation:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`.\n\nYou should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`.\n\nReturn `true` if it is possible to achieve that and `false` otherwise.\n\n**Note** that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5,6,7,8\\]\n**Output:** true\n**Explanation:** We can split the array into \\[1,4,5,8\\] and \\[2,3,6,7\\], and both of them have an average of 4.5.\n\n**Example 2:**\n\n**Input:** nums = \\[3,1\\]\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 30`\n*   `0 <= nums[i] <= 104`",
          "output": "from typing import List\n\ndef escape_ghosts(ghosts: List[List[int]], target: List[int]) -> bool:\n    max_dist = abs(target[0]) + abs(target[1])\n    for ghost in ghosts:\n        ghost_dist = abs(ghost[0] - target[0]) + abs(ghost[1] - target[1])\n        if ghost_dist <= max_dist:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` of lowercase English letters and an array `widths` denoting **how many pixels wide** each lowercase English letter is. Specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on.\n\nYou are trying to write `s` across several lines, where **each line is no longer than** `100` **pixels**. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`.\n\nReturn _an array_ `result` _of length 2 where:_\n\n*   `result[0]` _is the total number of lines._\n*   `result[1]` _is the width of the last line in pixels._\n\n",
          "input": "**Example 1:**\n\n**Input:** widths = \\[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10\\], s =  \"abcdefghijklmnopqrstuvwxyz \"\n**Output:** \\[3,60\\]\n**Explanation:** You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.\n\n**Example 2:**\n\n**Input:** widths = \\[4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10\\], s =  \"bbbcccdddaaa \"\n**Output:** \\[2,4\\]\n**Explanation:** You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.\n\n**Constraints:**\n\n*   `widths.length == 26`\n*   `2 <= widths[i] <= 10`\n*   `1 <= s.length <= 1000`\n*   `s` contains only lowercase English letters.",
          "output": "def numberOfWays(n):\n    MOD = 1000000007\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: There is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`.\n\nA city's **skyline** is the outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different.\n\nWe are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`\\-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction.\n\nReturn _the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[3,0,8,4\\],\\[2,4,5,7\\],\\[9,2,6,3\\],\\[0,3,1,0\\]\\]\n**Output:** 35\n**Explanation:** The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = \\[ \\[8, 4, 8, 7\\],\n            \\[7, 4, 7, 7\\],\n            \\[9, 4, 8, 7\\],\n            \\[3, 3, 3, 3\\] \\]\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]\n**Output:** 0\n**Explanation:** Increasing the height of any building will result in the skyline changing.\n\n**Constraints:**\n\n*   `n == grid.length`\n*   `n == grid[r].length`\n*   `2 <= n <= 50`\n*   `0 <= grid[r][c] <= 100`",
          "output": "def custom_sort_string(order, s):\n    return ''.join(sorted(s, key=lambda x: order.index(x) if x in order else len(order)))\n"
     },
     {
          "instruction": "Write python code for this problem: There are two types of soup: **type A** and **type B**. Initially, we have `n` ml of each type of soup. There are four kinds of operations:\n\n1.  Serve `100` ml of **soup A** and `0` ml of **soup B**,\n2.  Serve `75` ml of **soup A** and `25` ml of **soup B**,\n3.  Serve `50` ml of **soup A** and `50` ml of **soup B**, and\n4.  Serve `25` ml of **soup A** and `75` ml of **soup B**.\n\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability `0.25`. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\n\n**Note** that we do not have an operation where all `100` ml's of **soup B** are used first.\n\nReturn _the probability that **soup A** will be empty first, plus half the probability that **A** and **B** become empty at the same time_. Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 50\n**Output:** 0.62500\n**Explanation:** If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 \\* (1 + 1 + 0.5 + 0) = 0.625.\n\n**Example 2:**\n\n**Input:** n = 100\n**Output:** 0.71875\n\n**Constraints:**\n\n*   `0 <= n <= 109`",
          "output": "from bisect import bisect_left\nfrom collections import defaultdict\n\ndef numMatchingSubseq(s, words):\n    positions = defaultdict(list)\n\n    for i, c in enumerate(s):\n        positions[c].append(i)\n\n    count = 0\n\n    for word in words:\n        index = -1\n        isSubsequence = True\n\n        for c in word:\n            position_list = positions.get(c, [])\n            i = bisect_left(position_list, index + 1)\n            if (i == len(position_list)):\n                isSubsequence = False\n                break\n            index = position_list[i]\n\n        if isSubsequence:\n            count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Sometimes people repeat letters to represent extra feeling. For example:\n\n*   `\"hello \" -> \"heeellooo \"`\n*   `\"hi \" -> \"hiiii \"`\n\nIn these strings like `\"heeellooo \"`, we have groups of adjacent letters that are all the same: `\"h \"`, `\"eee \"`, `\"ll \"`, `\"ooo \"`.\n\nYou are given a string `s` and an array of query strings `words`. A query word is **stretchy** if it can be made to be equal to `s` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is **three or more**.\n\n*   For example, starting with `\"hello \"`, we could do an extension on the group `\"o \"` to get `\"hellooo \"`, but we cannot get `\"helloo \"` since the group `\"oo \"` has a size less than three. Also, we could do another extension like `\"ll \" -> \"lllll \"` to get `\"helllllooo \"`. If `s = \"helllllooo \"`, then the query word `\"hello \"` would be **stretchy** because of these two extension operations: `query = \"hello \" -> \"hellooo \" -> \"helllllooo \" = s`.\n\nReturn _the number of query strings that are **stretchy**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"heeellooo \", words = \\[ \"hello \",  \"hi \",  \"helo \"\\]\n**Output:** 1\n**Explanation:** \nWe can extend  \"e \" and  \"o \" in the word  \"hello \" to get  \"heeellooo \".\nWe can't extend  \"helo \" to get  \"heeellooo \" because the group  \"ll \" is not size 3 or more.\n\n**Example 2:**\n\n**Input:** s =  \"zzzzzyyyyy \", words = \\[ \"zzyy \", \"zy \", \"zyy \"\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= s.length, words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `s` and `words[i]` consist of lowercase letters.",
          "output": "def num_zeros(k):\n    x = 0\n    i = 5\n    while k // i >= 1:\n        x += k // i\n        i *= 5\n    return x\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `nums` represents the numbers written on a chalkboard.\n\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become `0`, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is `0`.\n\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to `0`, then that player wins.\n\nReturn `true` _if and only if Alice wins the game, assuming both players play optimally_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,2\\]\n**Output:** false\n**Explanation:** \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes \\[1, 2\\]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become \\[1, 1\\]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1\\]\n**Output:** true\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] < 216`",
          "output": "def valid_tic_tac_toe(board: List[str]) -> bool:\n    x_count = sum(row.count('X') for row in board)\n    o_count = sum(row.count('O') for row in board)\n    if x_count != o_count and x_count != o_count + 1: return False\n\n    x_win, o_win = False, False\n    for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2] != ' ':\n            x_win, o_win = (True, o_win) if board[i][0] == 'X' else (x_win, True)\n        if board[0][i] == board[1][i] == board[2][i] != ' ':\n            x_win, o_win = (True, o_win) if board[0][i] == 'X' else (x_win, True)\n    if board[0][0] == board[1][1] == board[2][2] != ' ':\n        x_win, o_win = (True, o_win) if board[0][0] == 'X' else (x_win, True)\n    if board[0][2] == board[1][1] == board[2][0] != ' ':\n        x_win, o_win = (True, o_win) if board[0][2] == 'X' else (x_win, True)\n\n    if x_win and o_win: return False\n    if x_win and x_count == o_count: return False\n    if o_win and x_count > o_count: return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: A website domain `\"discuss.leetcode.com \"` consists of various subdomains. At the top level, we have `\"com \"`, at the next level, we have `\"leetcode.com \"` and at the lowest level, `\"discuss.leetcode.com \"`. When we visit a domain like `\"discuss.leetcode.com \"`, we will also visit the parent domains `\"leetcode.com \"` and `\"com \"` implicitly.\n\nA **count-paired domain** is a domain that has one of the two formats `\"rep d1.d2.d3 \"` or `\"rep d1.d2 \"` where `rep` is the number of visits to the domain and `d1.d2.d3` is the domain itself.\n\n*   For example, `\"9001 discuss.leetcode.com \"` is a **count-paired domain** that indicates that `discuss.leetcode.com` was visited `9001` times.\n\nGiven an array of **count-paired domains** `cpdomains`, return _an array of the **count-paired domains** of each subdomain in the input_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** cpdomains = \\[ \"9001 discuss.leetcode.com \"\\]\n**Output:** \\[ \"9001 leetcode.com \", \"9001 discuss.leetcode.com \", \"9001 com \"\\]\n**Explanation:** We only have one website domain:  \"discuss.leetcode.com \".\nAs discussed above, the subdomain  \"leetcode.com \" and  \"com \" will also be visited. So they will all be visited 9001 times.\n\n**Example 2:**\n\n**Input:** cpdomains = \\[ \"900 google.mail.com \",  \"50 yahoo.com \",  \"1 intel.mail.com \",  \"5 wiki.org \"\\]\n**Output:** \\[ \"901 mail.com \", \"50 yahoo.com \", \"900 google.mail.com \", \"5 wiki.org \", \"5 org \", \"1 intel.mail.com \", \"951 com \"\\]\n**Explanation:** We will visit  \"google.mail.com \" 900 times,  \"yahoo.com \" 50 times,  \"intel.mail.com \" once and  \"wiki.org \" 5 times.\nFor the subdomains, we will visit  \"mail.com \" 900 + 1 = 901 times,  \"com \" 900 + 50 + 1 = 951 times, and  \"org \" 5 times.\n\n**Constraints:**\n\n*   `1 <= cpdomain.length <= 100`\n*   `1 <= cpdomain[i].length <= 100`\n*   `cpdomain[i]` follows either the `\"repi d1i.d2i.d3i \"` format or the `\"repi d1i.d2i \"` format.\n*   `repi` is an integer in the range `[1, 104]`.\n*   `d1i`, `d2i`, and `d3i` consist of lowercase English letters.",
          "output": "def numSubarrayBoundedMax(nums, left, right):\n    result, prev, start = 0, 0, -1\n    for i, num in enumerate(nums):\n        if left <= num <= right:\n            prev = i - start\n            result += prev\n        elif num < left:\n            result += prev\n        else:\n            start = i\n            prev = 0\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`, return _the area of the largest triangle that can be formed by any three different points_. Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[0,0\\],\\[0,1\\],\\[1,0\\],\\[0,2\\],\\[2,0\\]\\]\n**Output:** 2.00000\n**Explanation:** The five points are shown in the above figure. The red triangle is the largest.\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,0\\],\\[0,0\\],\\[0,1\\]\\]\n**Output:** 0.50000\n\n**Constraints:**\n\n*   `3 <= points.length <= 50`\n*   `-50 <= xi, yi <= 50`\n*   All the given points are **unique**.",
          "output": "def is_shifted(s, goal):\n    if len(s) != len(goal): return False\n\n    s = s + s\n    return goal in s\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray.\n\nNote that the partition must use every integer in `nums`, and that the score is not necessarily an integer.\n\nReturn _the maximum **score** you can achieve of all the possible partitions_. Answers within `10-6` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[9,1,2,3,9\\], k = 3\n**Output:** 20.00000\n**Explanation:** \nThe best choice is to partition nums into \\[9\\], \\[1, 2, 3\\], \\[9\\]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into \\[9, 1\\], \\[2\\], \\[3, 9\\], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,5,6,7\\], k = 4\n**Output:** 20.50000\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 104`\n*   `1 <= k <= nums.length`",
          "output": "from typing import List\n\ndef allPathsSourceTarget(graph: List[List[int]]) -> List[List[int]]:\n    def DFS(currentNode, path):\n        path.append(currentNode)\n        if currentNode == len(graph) - 1:\n            result.append(path[:])\n        else:\n            for neighbor in graph[currentNode]:\n                DFS(neighbor, path)\n        path.pop()\n\n    result = []\n    DFS(0, [])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the same tree where every subtree (of the given tree) not containing a_ `1` _has been removed_.\n\nA subtree of a node `node` is `node` plus every node that is a descendant of `node`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,0,0,1\\]\n**Output:** \\[1,null,0,null,1\\]\n**Explanation:** \nOnly the red nodes satisfy the property  \"every subtree not containing a 1 \".\nThe diagram on the right represents the answer.\n\n**Example 2:**\n\n**Input:** root = \\[1,0,1,0,0,0,1\\]\n**Output:** \\[1,null,1,null,1\\]\n\n**Example 3:**\n\n**Input:** root = \\[1,1,0,1,1,0,1,0\\]\n**Output:** \\[1,1,0,1,1,null,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 200]`.\n*   `Node.val` is either `0` or `1`.",
          "output": "def best_rotation(nums):\n    n = len(nums)\n    change = [0] * n\n\n    for i in range(n):\n        change[(i - nums[i] + 1 + n) % n] -= 1\n        change[(i + 1) % n] += 1\n\n    max_score = 0\n    cur_score = change[0]\n    for i in range(1, n):\n        cur_score += change[i]\n        if cur_score > max_score:\n            max_score = cur_score\n            \n    return max_score\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.\n\n*   For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\nYou will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.\n\nReturn _the least number of buses you must take to travel from_ `source` _to_ `target`. Return `-1` if it is not possible.\n\n",
          "input": "**Example 1:**\n\n**Input:** routes = \\[\\[1,2,7\\],\\[3,6,7\\]\\], source = 1, target = 6\n**Output:** 2\n**Explanation:** The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n\n**Example 2:**\n\n**Input:** routes = \\[\\[7,12\\],\\[4,5,15\\],\\[6\\],\\[15,19\\],\\[9,12,13\\]\\], source = 15, target = 12\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= routes.length <= 500`.\n*   `1 <= routes[i].length <= 105`\n*   All the values of `routes[i]` are **unique**.\n*   `sum(routes[i].length) <= 105`\n*   `0 <= routes[i][j] < 106`\n*   `0 <= source, target < 106`",
          "output": "from collections import defaultdict, deque\n\ndef numBusesToDestination(routes, source, target):\n    if source == target:\n        return 0\n\n    stop_route_map = defaultdict(set)\n    for i, route in enumerate(routes):\n        for stop in route:\n            stop_route_map[stop].add(i)\n\n    queue = deque([source])\n    visited_sources = {source}\n\n    transfers = 0\n    while queue:\n        size = len(queue)\n        for _ in range(size):\n            curr = queue.popleft()\n            if curr == target:\n                return transfers\n\n            for route in stop_route_map[curr]:\n                for stop in routes[route]:\n                    if stop not in visited_sources:\n                        queue.append(stop)\n                        visited_sources.add(stop)\n                stop_route_map[curr].remove(route)\n        transfers += 1\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: We had some 2-dimensional coordinates, like `\"(1, 3) \"` or `\"(2, 0.5) \"`. Then, we removed all commas, decimal points, and spaces and ended up with the string s.\n\n*   For example, `\"(1, 3) \"` becomes `s = \"(13) \"` and `\"(2, 0.5) \"` becomes `s = \"(205) \"`.\n\nReturn _a list of strings representing all possibilities for what our original coordinates could have been_.\n\nOur original representation never had extraneous zeroes, so we never started with numbers like `\"00 \"`, `\"0.0 \"`, `\"0.00 \"`, `\"1.0 \"`, `\"001 \"`, `\"00.01 \"`, or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like `\".1 \"`.\n\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"(123) \"\n**Output:** \\[ \"(1, 2.3) \", \"(1, 23) \", \"(1.2, 3) \", \"(12, 3) \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"(0123) \"\n**Output:** \\[ \"(0, 1.23) \", \"(0, 12.3) \", \"(0, 123) \", \"(0.1, 2.3) \", \"(0.1, 23) \", \"(0.12, 3) \"\\]\n**Explanation:** 0.0, 00, 0001 or 00.01 are not allowed.\n\n**Example 3:**\n\n**Input:** s =  \"(00011) \"\n**Output:** \\[ \"(0, 0.011) \", \"(0.001, 1) \"\\]\n\n**Constraints:**\n\n*   `4 <= s.length <= 12`\n*   `s[0] == '('` and `s[s.length - 1] == ')'`.\n*   The rest of `s` are digits.",
          "output": "class MyHashSet:\n\n    def __init__(self):\n        self.storage = [False] * 1000001\n\n    def add(self, key: int):\n        self.storage[key] = True\n\n    def remove(self, key: int):\n        self.storage[key] = False\n\n    def contains(self, key: int) -> bool:\n        return self.storage[key]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `head` of a linked list containing unique integer values and an integer array `nums` that is a subset of the linked list values.\n\nReturn _the number of connected components in_ `nums` _where two values are connected if they appear **consecutively** in the linked list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[0,1,2,3\\], nums = \\[0,1,3\\]\n**Output:** 2\n**Explanation:** 0 and 1 are connected, so \\[0, 1\\] and \\[3\\] are the two connected components.\n\n**Example 2:**\n\n**Input:** head = \\[0,1,2,3,4\\], nums = \\[0,3,1,4\\]\n**Output:** 2\n**Explanation:** 0 and 1 are connected, 3 and 4 are connected, so \\[0, 1\\] and \\[3, 4\\] are the two connected components.\n\n**Constraints:**\n\n*   The number of nodes in the linked list is `n`.\n*   `1 <= n <= 104`\n*   `0 <= Node.val < n`\n*   All the values `Node.val` are **unique**.\n*   `1 <= nums.length <= n`\n*   `0 <= nums[i] < n`\n*   All the values of `nums` are **unique**.",
          "output": "class MyHashMap:\n\n    def __init__(self):\n        self.data = [-1] * 1000001\n\n    def put(self, key: int, value: int) -> None:\n        self.data[key] = value\n\n    def get(self, key: int) -> int:\n        return self.data[key]\n\n    def remove(self, key: int) -> None:\n        self.data[key] = -1\n"
     },
     {
          "instruction": "Write python code for this problem: Your car starts at position `0` and speed `+1` on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions `'A'` (accelerate) and `'R'` (reverse):\n\n*   When you get an instruction `'A'`, your car does the following:\n    *   `position += speed`\n    *   `speed *= 2`\n*   When you get an instruction `'R'`, your car does the following:\n    *   If your speed is positive then `speed = -1`\n    *   otherwise `speed = 1`Your position stays the same.\n\nFor example, after commands `\"AAR \"`, your car goes to positions `0 --> 1 --> 3 --> 3`, and your speed goes to `1 --> 2 --> 4 --> -1`.\n\nGiven a target position `target`, return _the length of the shortest sequence of instructions to get there_.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = 3\n**Output:** 2\n**Explanation:** \nThe shortest instruction sequence is  \"AA \".\nYour position goes from 0 --> 1 --> 3.\n\n**Example 2:**\n\n**Input:** target = 6\n**Output:** 5\n**Explanation:** \nThe shortest instruction sequence is  \"AAARA \".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.\n\n**Constraints:**\n\n*   `1 <= target <= 104`",
          "output": "def racecar(target: int) -> int:\n    memo = {}\n    def dp(position, speed):\n        if abs(position) > 2 * target:\n            return target + 1\n        if position == target:\n            return 0 if speed == 1 else 1\n        if (position, speed) in memo:\n            return memo[(position, speed)]\n        \n        ans = dp(position + speed // 2, -speed // 2) + 1 if speed > 0 else dp(position - speed // 2, -speed // 2) + 1\n        ans = min(ans, dp(position + speed, speed * 2) + 1)\n        memo[(position, speed)] = ans\n        return ans\n    \n    return dp(0, 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `paragraph` and a string array of the banned words `banned`, return _the most frequent word that is not banned_. It is **guaranteed** there is **at least one word** that is not banned, and that the answer is **unique**.\n\nThe words in `paragraph` are **case-insensitive** and the answer should be returned in **lowercase**.\n\n",
          "input": "**Example 1:**\n\n**Input:** paragraph =  \"Bob hit a ball, the hit BALL flew far after it was hit. \", banned = \\[ \"hit \"\\]\n**Output:**  \"ball \"\n**Explanation:** \n \"hit \" occurs 3 times, but it is a banned word.\n \"ball \" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as  \"ball, \"), \nand that  \"hit \" isn't the answer even though it occurs more because it is banned.\n\n**Example 2:**\n\n**Input:** paragraph =  \"a. \", banned = \\[\\]\n**Output:**  \"a \"\n\n**Constraints:**\n\n*   `1 <= paragraph.length <= 1000`\n*   paragraph consists of English letters, space `' '`, or one of the symbols: `\"!?',;. \"`.\n*   `0 <= banned.length <= 100`\n*   `1 <= banned[i].length <= 10`\n*   `banned[i]` consists of only lowercase English letters.",
          "output": "def minSwaps(nums1, nums2):\n    n = len(nums1)\n    noSwap = [float('inf')] * n\n    doSwap = [float('inf')] * n\n    noSwap[0] = 0\n    doSwap[0] = 1\n\n    for i in range(1, n):\n        if nums1[i] > nums1[i - 1] and nums2[i] > nums2[i - 1]:\n            noSwap[i] = noSwap[i - 1]\n            doSwap[i] = doSwap[i - 1] + 1\n        if nums1[i] > nums2[i - 1] and nums2[i] > nums1[i - 1]:\n            noSwap[i] = min(noSwap[i], doSwap[i - 1])\n            doSwap[i] = min(doSwap[i], noSwap[i - 1] + 1)\n\n    return min(noSwap[n - 1], doSwap[n - 1])\n"
     },
     {
          "instruction": "Write python code for this problem: Design your implementation of the linked list. You can choose to use a singly or doubly linked list.  \nA node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node.  \nIf you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are **0-indexed**.\n\nImplement the `MyLinkedList` class:\n\n*   `MyLinkedList()` Initializes the `MyLinkedList` object.\n*   `int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.\n*   `void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n*   `void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.\n*   `void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node **will not be inserted**.\n*   `void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyLinkedList \",  \"addAtHead \",  \"addAtTail \",  \"addAtIndex \",  \"get \",  \"deleteAtIndex \",  \"get \"\\]\n\\[\\[\\], \\[1\\], \\[3\\], \\[1, 2\\], \\[1\\], \\[1\\], \\[1\\]\\]\n**Output**\n\\[null, null, null, null, 2, null, 3\\]\n\n**Explanation**\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\nmyLinkedList.get(1);              // return 3\n\n**Constraints:**\n\n*   `0 <= index, val <= 1000`\n*   Please do not use the built-in LinkedList library.\n*   At most `2000` calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex` and `deleteAtIndex`.",
          "output": "class Node:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass MyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.size = 0\n\n    def get(self, index: int) -> int:\n        if index < 0 or index >= self.size:\n            return -1\n        cur = self.head\n        for _ in range(index):\n            cur = cur.next\n        return cur.val\n\n    def addAtHead(self, val: int) -> None:\n        self.head = Node(val, self.head)\n        self.size += 1\n\n    def addAtTail(self, val: int) -> None:\n        if self.size == 0:\n            self.addAtHead(val)\n        else:\n            cur = self.head\n            while cur.next:\n                cur = cur.next\n            cur.next = Node(val)\n            self.size += 1\n\n    def addAtIndex(self, index: int, val: int) -> None:\n        if index < 0 or index > self.size:\n            return\n        if index == 0:\n            self.addAtHead(val)\n        else:\n            cur = self.head\n            for _ in range(index - 1):\n                cur = cur.next\n            cur.next = Node(val, cur.next)\n            self.size += 1\n\n    def deleteAtIndex(self, index: int) -> None:\n        if index < 0 or index >= self.size:\n            return\n        if index == 0:\n            self.head = self.head.next\n        else:\n            cur = self.head\n            for _ in range(index - 1):\n                cur = cur.next\n            cur.next = cur.next.next\n        self.size -= 1\n"
     },
     {
          "instruction": "Write python code for this problem: A **valid encoding** of an array of `words` is any reference string `s` and array of indices `indices` such that:\n\n*   `words.length == indices.length`\n*   The reference string `s` ends with the `'#'` character.\n*   For each index `indices[i]`, the **substring** of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`.\n\nGiven an array of `words`, return _the **length of the shortest reference string**_ `s` _possible of any **valid encoding** of_ `words`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"time \",  \"me \",  \"bell \"\\]\n**Output:** 10\n**Explanation:** A valid encoding would be s = ` \"time#bell# \" and indices = [0, 2, 5`\\].\nwords\\[0\\] =  \"time \", the substring of s starting from indices\\[0\\] = 0 to the next '#' is underlined in  \"time#bell# \"\nwords\\[1\\] =  \"me \", the substring of s starting from indices\\[1\\] = 2 to the next '#' is underlined in  \"time#bell# \"\nwords\\[2\\] =  \"bell \", the substring of s starting from indices\\[2\\] = 5 to the next '#' is underlined in  \"time#bell\\# \"\n\n**Example 2:**\n\n**Input:** words = \\[ \"t \"\\]\n**Output:** 2\n**Explanation:** A valid encoding would be s =  \"t# \" and indices = \\[0\\].\n\n**Constraints:**\n\n*   `1 <= words.length <= 2000`\n*   `1 <= words[i].length <= 7`\n*   `words[i]` consists of only lowercase letters.",
          "output": "from typing import List\n\ndef eventualSafeNodes(graph: List[List[int]]) -> List[int]:\n    n = len(graph)\n    color = [0] * n\n    ans = []\n\n    def hasCycle(node: int, color: List[int], graph: List[List[int]]) -> bool:\n        if color[node] > 0:\n            return color[node] == 1\n        color[node] = 1\n        for neighbor in graph[node]:\n            if hasCycle(neighbor, color, graph):\n                return True\n        color[node] = 2\n        return False\n\n    for i in range(n):\n        if not hasCycle(i, color, graph):\n            ans.append(i)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and a character `c` that occurs in `s`, return _an array of integers_ `answer` _where_ `answer.length == s.length` _and_ `answer[i]` _is the **distance** from index_ `i` _to the **closest** occurrence of character_ `c` _in_ `s`.\n\nThe **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"loveleetcode \", c =  \"e \"\n**Output:** \\[3,2,1,0,1,0,0,1,2,2,1,0\\]\n**Explanation:** The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n\n**Example 2:**\n\n**Input:** s =  \"aaab \", c =  \"b \"\n**Output:** \\[3,2,1,0\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s[i]` and `c` are lowercase English letters.\n*   It is guaranteed that `c` occurs at least once in `s`.",
          "output": "from typing import List\n\ndef hitBricks(grid: List[List[int]], hits: List[List[int]]) -> List[int]:\n    def dfs(x, y):\n        if not (0 <= x < m) or not (0 <= y < n) or grid[x][y] <= 0:\n            return 0\n        grid[x][y] = -1\n        return 1 + sum(dfs(x + dx, y + dy) for dx, dy in directions)\n\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    for x, y in hits:\n        grid[x][y] -= 1\n\n    for j in range(n):\n        if grid[0][j] == 1:\n            dfs(0, j)\n\n    result = []\n    for x, y in hits:\n        grid[x][y] += 1\n        if grid[x][y] != 1:\n            result.append(0)\n            continue\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy) != 0:\n                result.append(dfs(x, y) - 1)\n                break\n        else:\n            result.append(0)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **0-indexed** integer arrays `fronts` and `backs` of length `n`, where the `ith` card has the positive integer `fronts[i]` printed on the front and `backs[i]` printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\n\nAfter flipping the cards, an integer is considered **good** if it is facing down on some card and **not** facing up on any card.\n\nReturn _the minimum possible good integer after flipping the cards_. If there are no good integers, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** fronts = \\[1,2,4,4,7\\], backs = \\[1,3,4,1,3\\]\n**Output:** 2\n**Explanation:**\nIf we flip the second card, the face up numbers are \\[1,3,4,4,7\\] and the face down are \\[1,2,4,1,3\\].\n2 is the minimum good integer as it appears facing down but not facing up.\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.\n\n**Example 2:**\n\n**Input:** fronts = \\[1\\], backs = \\[1\\]\n**Output:** 0\n**Explanation:**\nThere are no good integers no matter how we flip the cards, so we return 0.\n\n**Constraints:**\n\n*   `n == fronts.length == backs.length`\n*   `1 <= n <= 1000`\n*   `1 <= fronts[i], backs[i] <= 2000`",
          "output": "def uniqueMorseRepresentations(words):\n    morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n    transformations = set()\n\n    for word in words:\n        morseCode = ''.join(morse[ord(c) - ord('a')] for c in word)\n        transformations.add(morseCode)\n\n    return len(transformations)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`.\n\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\n\nReturn _the number of binary trees we can make_. The answer may be too large so return the answer **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,4\\]\n**Output:** 3\n**Explanation:** We can make these trees: `[2], [4], [4, 2, 2]`\n\n**Example 2:**\n\n**Input:** arr = \\[2,4,5,10\\]\n**Output:** 7\n**Explanation:** We can make these trees: `[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]`.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `2 <= arr[i] <= 109`\n*   All the values of `arr` are **unique**.",
          "output": "def isPossibleToSplit(nums):\n    n = len(nums)\n    total_sum = sum(nums)\n\n    if total_sum % n != 0:\n        return False\n\n    target_sum = total_sum * (n // 2) // n\n    dp = [[False] * (target_sum + 1) for _ in range(n // 2 + 1)]\n    dp[0][0] = True\n\n    for num in nums:\n        for count in range(n // 2, 0, -1):\n            for sum_ in range(target_sum, num - 1, -1):\n                dp[count][sum_] = dp[count][sum_] or dp[count - 1][sum_ - num]\n\n        if dp[n // 2][target_sum]:\n            return True\n\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given a Circular Linked List node, which is sorted in non-descending order, write a function to insert a value `insertVal` into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list and may not necessarily be the smallest value in the circular list.\n\nIf there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.\n\nIf the list is empty (i.e., the given node is `null`), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the originally given node.\n\n",
          "input": "**Example 1:**\n\n  \n\n**Input:** head = \\[3,4,1\\], insertVal = 2\n**Output:** \\[3,4,1,2\\]\n**Explanation:** In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.\n\n \n\n**Example 2:**\n\n**Input:** head = \\[\\], insertVal = 1\n**Output:** \\[1\\]\n**Explanation:** The list is empty (given head is `null`). We create a new single circular list and return the reference to that single node.\n\n**Example 3:**\n\n**Input:** head = \\[1\\], insertVal = 0\n**Output:** \\[1,0\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 5 * 104]`.\n*   `-106 <= Node.val, insertVal <= 106`",
          "output": "class Node:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef insert(head, insertVal):\n    if head is None:\n        newNode = Node(insertVal)\n        newNode.next = newNode\n        return newNode\n\n    prev, curr = head, head.next\n    inserted = False\n\n    while True:\n        if prev.val <= insertVal <= curr.val:\n            prev.next = Node(insertVal, curr)\n            inserted = True\n        elif prev.val > curr.val:\n            if insertVal >= prev.val or insertVal <= curr.val:\n                prev.next = Node(insertVal, curr)\n                inserted = True\n        prev, curr = curr, curr.next\n\n        if prev == head or inserted:\n            break\n\n    if not inserted:\n        prev.next = Node(insertVal, curr)\n\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `sentence` that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\n\nWe would like to convert the sentence to \"Goat Latin \" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\n\n*   If a word begins with a vowel (`'a'`, `'e'`, `'i'`, `'o'`, or `'u'`), append `\"ma \"` to the end of the word.\n    *   For example, the word `\"apple \"` becomes `\"applema \"`.\n*   If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add `\"ma \"`.\n    *   For example, the word `\"goat \"` becomes `\"oatgma \"`.\n*   Add one letter `'a'` to the end of each word per its word index in the sentence, starting with `1`.\n    *   For example, the first word gets `\"a \"` added to the end, the second word gets `\"aa \"` added to the end, and so on.\n\nReturn _the final sentence representing the conversion from sentence to Goat Latin_.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence = \"I speak Goat Latin\"\n**Output:** \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n\n**Example 2:**\n\n**Input:** sentence = \"The quick brown fox jumped over the lazy dog\"\n**Output:** \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 150`\n*   `sentence` consists of English letters and spaces.\n*   `sentence` has no leading or trailing spaces.\n*   All the words in `sentence` are separated by a single space.",
          "output": "def number_of_lines(widths, s):\n    lines = 1\n    current_pixel = 0\n    for c in s:\n        letter_pixels = widths[ord(c) - ord('a')]\n        if current_pixel + letter_pixels > 100:\n            lines += 1\n            current_pixel = 0\n        current_pixel += letter_pixels\n    return [lines, current_pixel]\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` persons on a social media website. You are given an integer array `ages` where `ages[i]` is the age of the `ith` person.\n\nA Person `x` will not send a friend request to a person `y` (`x != y`) if any of the following conditions is true:\n\n*   `age[y] <= 0.5 * age[x] + 7`\n*   `age[y] > age[x]`\n*   `age[y] > 100 && age[x] < 100`\n\nOtherwise, `x` will send a friend request to `y`.\n\nNote that if `x` sends a request to `y`, `y` will not necessarily send a request to `x`. Also, a person will not send a friend request to themself.\n\nReturn _the total number of friend requests made_.\n\n",
          "input": "**Example 1:**\n\n**Input:** ages = \\[16,16\\]\n**Output:** 2\n**Explanation:** 2 people friend request each other.\n\n**Example 2:**\n\n**Input:** ages = \\[16,17,18\\]\n**Output:** 2\n**Explanation:** Friend requests are made 17 -> 16, 18 -> 17.\n\n**Example 3:**\n\n**Input:** ages = \\[20,30,100,110,120\\]\n**Output:** 3\n**Explanation:** Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n\n**Constraints:**\n\n*   `n == ages.length`\n*   `1 <= n <= 2 * 104`\n*   `1 <= ages[i] <= 120`",
          "output": "def max_increase_keeping_skyline(grid):\n    n = len(grid)\n    row_max = [0] * n\n    col_max = [0] * n\n    \n    for i in range(n):\n        for j in range(n):\n            row_max[i] = max(row_max[i], grid[i][j])\n            col_max[j] = max(col_max[j], grid[i][j])\n    \n    total_sum = 0\n    for i in range(n):\n        for j in range(n):\n            total_sum += min(row_max[i], col_max[j]) - grid[i][j]\n    \n    return total_sum\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` jobs and `m` workers. You are given three arrays: `difficulty`, `profit`, and `worker` where:\n\n*   `difficulty[i]` and `profit[i]` are the difficulty and the profit of the `ith` job, and\n*   `worker[j]` is the ability of `jth` worker (i.e., the `jth` worker can only complete a job with difficulty at most `worker[j]`).\n\nEvery worker can be assigned **at most one job**, but one job can be **completed multiple times**.\n\n*   For example, if three workers attempt the same job that pays `$1`, then the total profit will be `$3`. If a worker cannot complete any job, their profit is `$0`.\n\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\n\n",
          "input": "**Example 1:**\n\n**Input:** difficulty = \\[2,4,6,8,10\\], profit = \\[10,20,30,40,50\\], worker = \\[4,5,6,7\\]\n**Output:** 100\n**Explanation:** Workers are assigned jobs of difficulty \\[4,4,6,6\\] and they get a profit of \\[20,20,30,30\\] separately.\n\n**Example 2:**\n\n**Input:** difficulty = \\[85,47,57\\], profit = \\[24,66,99\\], worker = \\[40,25,25\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == difficulty.length`\n*   `n == profit.length`\n*   `m == worker.length`\n*   `1 <= n, m <= 104`\n*   `1 <= difficulty[i], profit[i], worker[i] <= 105`",
          "output": "def maxProfitAssignment(difficulty, profit, worker):\n    n = len(difficulty)\n    jobs = sorted(zip(difficulty, profit))\n    worker.sort()\n\n    max_profit = 0\n    total_profit = 0\n    job_idx = 0\n\n    for w in worker:\n        while job_idx < n and w >= jobs[job_idx][0]:\n            max_profit = max(max_profit, jobs[job_idx][1])\n            job_idx += 1\n        total_profit += max_profit\n\n    return total_profit\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` binary matrix `grid`. You are allowed to change **at most one** `0` to be `1`.\n\nReturn _the size of the largest **island** in_ `grid` _after applying this operation_.\n\nAn **island** is a 4-directionally connected group of `1`s.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** 3\n**Explanation:** Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1\\],\\[1,0\\]\\]\n**Output:** 4\n**Explanation:** Change the 0 to 1 and make the island bigger, only one island with area = 4.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1\\],\\[1,1\\]\\]\n**Output:** 4\n**Explanation:** Can't change any 0 to 1, only one island with area = 4.\n\n**Constraints:**\n\n*   `n == grid.length`\n*   `n == grid[i].length`\n*   `1 <= n <= 500`\n*   `grid[i][j]` is either `0` or `1`.",
          "output": "def maxAreaOfIsland(grid):\n    def dfs(x, y):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0:\n            return 0\n        grid[x][y] = 0\n        return dfs(x - 1, y) + dfs(x + 1, y) + dfs(x, y - 1) + dfs(x, y + 1) + 1\n\n    ans = 0\n    for i, row in enumerate(grid):\n        for j, cell in enumerate(row):\n            if cell == 0:\n                grid[i][j] = 1\n                ans = max(ans, dfs(i, j))\n                grid[i][j] = 0\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Let's define a function `countUniqueChars(s)` that returns the number of unique characters on `s`.\n\n*   For example, calling `countUniqueChars(s)` if `s = \"LEETCODE \"` then `\"L \"`, `\"T \"`, `\"C \"`, `\"O \"`, `\"D \"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.\n\nGiven a string `s`, return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. The test cases are generated such that the answer fits in a 32-bit integer.\n\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ABC \"\n**Output:** 10\n**Explanation:** All possible substrings are:  \"A \", \"B \", \"C \", \"AB \", \"BC \" and  \"ABC \".\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n\n**Example 2:**\n\n**Input:** s =  \"ABA \"\n**Output:** 8\n**Explanation:** The same as example 1, except `countUniqueChars`( \"ABA \") = 1.\n\n**Example 3:**\n\n**Input:** s =  \"LEETCODE \"\n**Output:** 92\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of uppercase English letters only.",
          "output": "def xor_game(nums: List[int]) -> bool:\n    xor_sum = 0\n    for num in nums:\n        xor_sum ^= num\n    return xor_sum == 0 or len(nums) % 2 == 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the number of ways you can write_ `n` _as the sum of consecutive positive integers._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** 5 = 2 + 3\n\n**Example 2:**\n\n**Input:** n = 9\n**Output:** 3\n**Explanation:** 9 = 4 + 5 = 2 + 3 + 4\n\n**Example 3:**\n\n**Input:** n = 15\n**Output:** 4\n**Explanation:** 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n\n**Constraints:**\n\n*   `1 <= n <= 109`",
          "output": "from collections import defaultdict\n\ndef subdomainVisits(cpdomains):\n    counts = defaultdict(int)\n    result = []\n\n    for cpdomain in cpdomains:\n        count, domain = cpdomain.split()\n        count = int(count)\n\n        for i in range(len(domain)):\n            if domain[i] == '.':\n                counts[domain[i + 1:]] += count\n        counts[domain] += count\n\n    for sub, cnt in counts.items():\n        result.append(f\"{cnt} {sub}\")\n        \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: In a string `s` of lowercase letters, these letters form consecutive groups of the same character.\n\nFor example, a string like `s = \"abbxxxxzyy \"` has the groups `\"a \"`, `\"bb \"`, `\"xxxx \"`, `\"z \"`, and `\"yy \"`.\n\nA group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `\"xxxx \"` has the interval `[3,6]`.\n\nA group is considered **large** if it has 3 or more characters.\n\nReturn _the intervals of every **large** group sorted in **increasing order by start index**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abbxxxxzzy \"\n**Output:** \\[\\[3,6\\]\\]\n**Explanation:** `\"xxxx \" is the only` large group with start index 3 and end index 6.\n\n**Example 2:**\n\n**Input:** s =  \"abc \"\n**Output:** \\[\\]\n**Explanation:** We have groups  \"a \",  \"b \", and  \"c \", none of which are large groups.\n\n**Example 3:**\n\n**Input:** s =  \"abcdddeeeeaabbbcd \"\n**Output:** \\[\\[3,5\\],\\[6,9\\],\\[12,14\\]\\]\n**Explanation:** The large groups are  \"ddd \",  \"eeee \", and  \"bbb \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` contains lowercase English letters only.",
          "output": "from itertools import combinations\n\ndef largestTriangleArea(points):\n    return max(0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) for (x1, y1), (x2, y2), (x3, y3) in combinations(points, 3))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a personal information string `s`, representing either an **email address** or a **phone number**. Return _the **masked** personal information using the below rules_.\n\n**Email address:**\n\nAn email address is:\n\n*   A **name** consisting of uppercase and lowercase English letters, followed by\n*   The `'@'` symbol, followed by\n*   The **domain** consisting of uppercase and lowercase English letters with a dot `'.'` somewhere in the middle (not the first or last character).\n\nTo mask an email:\n\n*   The uppercase letters in the **name** and **domain** must be converted to lowercase letters.\n*   The middle letters of the **name** (i.e., all but the first and last letters) must be replaced by 5 asterisks `\"***** \"`.\n\n**Phone number:**\n\nA phone number is formatted as follows:\n\n*   The phone number contains 10-13 digits.\n*   The last 10 digits make up the **local number**.\n*   The remaining 0-3 digits, in the beginning, make up the **country code**.\n*   **Separation characters** from the set `{'+', '-', '(', ')', ' '}` separate the above digits in some way.\n\nTo mask a phone number:\n\n*   Remove all **separation characters**.\n*   The masked phone number should have the form:\n    *   `\"***-***-XXXX \"` if the country code has 0 digits.\n    *   `\"+*-***-***-XXXX \"` if the country code has 1 digit.\n    *   `\"+**-***-***-XXXX \"` if the country code has 2 digits.\n    *   `\"+***-***-***-XXXX \"` if the country code has 3 digits.\n*   `\"XXXX \"` is the last 4 digits of the **local number**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"LeetCode@LeetCode.com \"\n**Output:**  \"l\\*\\*\\*\\*\\*e@leetcode.com \"\n**Explanation:** s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\n\n**Example 2:**\n\n**Input:** s =  \"AB@qq.com \"\n**Output:**  \"a\\*\\*\\*\\*\\*b@qq.com \"\n**Explanation:** s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though  \"ab \" is 2 characters, it still must have 5 asterisks in the middle.\n\n**Example 3:**\n\n**Input:** s =  \"1(234)567-890 \"\n**Output:**  \"\\*\\*\\*-\\*\\*\\*-7890 \"\n**Explanation:** s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is  \"\\*\\*\\*-\\*\\*\\*-7890 \".\n\n**Constraints:**\n\n*   `s` is either a **valid** email or a phone number.\n*   If `s` is an email:\n    *   `8 <= s.length <= 40`\n    *   `s` consists of uppercase and lowercase English letters and exactly one `'@'` symbol and `'.'` symbol.\n*   If `s` is a phone number:\n    *   `10 <= s.length <= 20`\n    *   `s` consists of digits, spaces, and the symbols `'('`, `')'`, `'-'`, and `'+'`.",
          "output": "class Solution:\n    def largestSumOfAverages(self, nums: List[int], k: int) -> float:\n        memo = {}\n        \n        def max_partition_sum(start: int, k: int) -> float:\n            if k == 1:\n                return sum(nums[start:]) / (len(nums) - start)\n            if (start, k) in memo:\n                return memo[start, k]\n            \n            ans, curr_sum = 0, 0\n            for i in range(start, len(nums) - k + 1):\n                curr_sum += nums[i]\n                ans = max(ans, curr_sum / (i - start + 1) + max_partition_sum(i + 1, k - 1))\n            \n            memo[start, k] = ans\n            return ans\n        \n        return max_partition_sum(0, k)\n"
     },
     {
          "instruction": "Write python code for this problem: Design your implementation of the circular double-ended queue (deque).\n\nImplement the `MyCircularDeque` class:\n\n*   `MyCircularDeque(int k)` Initializes the deque with a maximum size of `k`.\n*   `boolean insertFront()` Adds an item at the front of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `boolean insertLast()` Adds an item at the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `boolean deleteFront()` Deletes an item from the front of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `boolean deleteLast()` Deletes an item from the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `int getFront()` Returns the front item from the Deque. Returns `-1` if the deque is empty.\n*   `int getRear()` Returns the last item from Deque. Returns `-1` if the deque is empty.\n*   `boolean isEmpty()` Returns `true` if the deque is empty, or `false` otherwise.\n*   `boolean isFull()` Returns `true` if the deque is full, or `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyCircularDeque \",  \"insertLast \",  \"insertLast \",  \"insertFront \",  \"insertFront \",  \"getRear \",  \"isFull \",  \"deleteLast \",  \"insertFront \",  \"getFront \"\\]\n\\[\\[3\\], \\[1\\], \\[2\\], \\[3\\], \\[4\\], \\[\\], \\[\\], \\[\\], \\[4\\], \\[\\]\\]\n**Output**\n\\[null, true, true, true, false, 2, true, true, true, 4\\]\n\n**Explanation**\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4\n\n**Constraints:**\n\n*   `1 <= k <= 1000`\n*   `0 <= value <= 1000`\n*   At most `2000` calls will be made to `insertFront`, `insertLast`, `deleteFront`, `deleteLast`, `getFront`, `getRear`, `isEmpty`, `isFull`.",
          "output": "class MyCircularDeque:\n\n    def __init__(self, k: int):\n        self.buffer = [0] * k\n        self.front = -1\n        self.rear = 0\n        self.capacity = k\n\n    def insertFront(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        if self.front == -1:\n            self.front = 0\n        else:\n            self.front = (self.front - 1 + self.capacity) % self.capacity\n        self.buffer[self.front] = value\n        return True\n\n    def insertLast(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.buffer[self.rear] = value\n        self.rear = (self.rear + 1) % self.capacity\n        if self.front == -1:\n            self.front = 0\n        return True\n\n    def deleteFront(self) -> bool:\n        if self.isEmpty():\n            return False\n        if self.front == self.rear - 1:\n            self.front = -1\n        else:\n            self.front = (self.front + 1) % self.capacity\n        return True\n\n    def deleteLast(self) -> bool:\n        if self.isEmpty():\n            return False\n        if self.front == self.rear - 1:\n            self.rear = 0\n            self.front = -1\n        else:\n            self.rear = (self.rear - 1 + self.capacity) % self.capacity\n        return True\n\n    def getFront(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.buffer[self.front]\n\n    def getRear(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.buffer[(self.rear - 1 + self.capacity) % self.capacity]\n\n    def isEmpty(self) -> bool:\n        return self.front == -1\n\n    def isFull(self) -> bool:\n        return self.front == self.rear\n"
     },
     {
          "instruction": "Write python code for this problem: Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer \".\n\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n\nImplement the `MyCircularQueue` class:\n\n*   `MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.\n*   `int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.\n*   `int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.\n*   `boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.\n*   `boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.\n*   `boolean isEmpty()` Checks whether the circular queue is empty or not.\n*   `boolean isFull()` Checks whether the circular queue is full or not.\n\nYou must solve the problem without using the built-in queue data structure in your programming language.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MyCircularQueue \",  \"enQueue \",  \"enQueue \",  \"enQueue \",  \"enQueue \",  \"Rear \",  \"isFull \",  \"deQueue \",  \"enQueue \",  \"Rear \"\\]\n\\[\\[3\\], \\[1\\], \\[2\\], \\[3\\], \\[4\\], \\[\\], \\[\\], \\[\\], \\[4\\], \\[\\]\\]\n**Output**\n\\[null, true, true, true, false, 3, true, true, true, 4\\]\n\n**Explanation**\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n\n**Constraints:**\n\n*   `1 <= k <= 1000`\n*   `0 <= value <= 1000`\n*   At most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`.",
          "output": "class MyCircularQueue:\n\n    def __init__(self, k: int):\n        self.size = k\n        self.data = [0]*k\n        self.front = -1\n        self.rear = -1\n\n    def enQueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        if self.isEmpty():\n            self.front = 0\n        self.rear = (self.rear + 1) % self.size\n        self.data[self.rear] = value\n        return True\n\n    def deQueue(self) -> bool:\n        if self.isEmpty():\n            return False\n        if self.front == self.rear:\n            self.front = -1\n            self.rear = -1\n        else:\n            self.front = (self.front + 1) % self.size\n        return True\n\n    def Front(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.data[self.front]\n\n    def Rear(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.data[self.rear]\n\n    def isEmpty(self) -> bool:\n        return self.front == -1\n\n    def isFull(self) -> bool:\n        return (self.rear + 1) % self.size == self.front\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `n x n` binary matrix `image`, flip the image **horizontally**, then invert it, and return _the resulting image_.\n\nTo flip an image horizontally means that each row of the image is reversed.\n\n*   For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.\n\nTo invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`.\n\n*   For example, inverting `[0,1,1]` results in `[1,0,0]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** image = \\[\\[1,1,0\\],\\[1,0,1\\],\\[0,0,0\\]\\]\n**Output:** \\[\\[1,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]\n**Explanation:** First reverse each row: \\[\\[0,1,1\\],\\[1,0,1\\],\\[0,0,0\\]\\].\nThen, invert the image: \\[\\[1,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]\n\n**Example 2:**\n\n**Input:** image = \\[\\[1,1,0,0\\],\\[1,0,0,1\\],\\[0,1,1,1\\],\\[1,0,1,0\\]\\]\n**Output:** \\[\\[1,1,0,0\\],\\[0,1,1,0\\],\\[0,0,0,1\\],\\[1,0,1,0\\]\\]\n**Explanation:** First reverse each row: \\[\\[0,0,1,1\\],\\[1,0,0,1\\],\\[1,1,1,0\\],\\[0,1,0,1\\]\\].\nThen invert the image: \\[\\[1,1,0,0\\],\\[0,1,1,0\\],\\[0,0,0,1\\],\\[1,0,1,0\\]\\]\n\n**Constraints:**\n\n*   `n == image.length`\n*   `n == image[i].length`\n*   `1 <= n <= 20`\n*   `images[i][j]` is either `0` or `1`.",
          "output": "def pruneTree(root: TreeNode) -> TreeNode:\n    if not root:\n        return None\n    root.left = pruneTree(root.left)\n    root.right = pruneTree(root.right)\n    if root.val == 0 and not root.left and not root.right:\n        return None\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s` that you must perform `k` replacement operations on. The replacement operations are given as three **0-indexed** parallel arrays, `indices`, `sources`, and `targets`, all of length `k`.\n\nTo complete the `ith` replacement operation:\n\n1.  Check if the **substring** `sources[i]` occurs at index `indices[i]` in the **original string** `s`.\n2.  If it does not occur, **do nothing**.\n3.  Otherwise if it does occur, **replace** that substring with `targets[i]`.\n\nFor example, if `s = \"abcd \"`, `indices[i] = 0`, `sources[i] = \"ab \"`, and `targets[i] = \"eee \"`, then the result of this replacement will be `\"eeecd \"`.\n\nAll replacement operations must occur **simultaneously**, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will **not overlap**.\n\n*   For example, a testcase with `s = \"abc \"`, `indices = [0, 1]`, and `sources = [ \"ab \", \"bc \"]` will not be generated because the `\"ab \"` and `\"bc \"` replacements overlap.\n\nReturn _the **resulting string** after performing all replacement operations on_ `s`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcd \", indices = \\[0, 2\\], sources = \\[ \"a \",  \"cd \"\\], targets = \\[ \"eee \",  \"ffff \"\\]\n**Output:**  \"eeebffff \"\n**Explanation:**\n \"a \" occurs at index 0 in s, so we replace it with  \"eee \".\n \"cd \" occurs at index 2 in s, so we replace it with  \"ffff \".\n\n**Example 2:**\n\n**Input:** s =  \"abcd \", indices = \\[0, 2\\], sources = \\[ \"ab \", \"ec \"\\], targets = \\[ \"eee \", \"ffff \"\\]\n**Output:**  \"eeecd \"\n**Explanation:**\n \"ab \" occurs at index 0 in s, so we replace it with  \"eee \".\n \"ec \" does not occur at index 2 in s, so we do nothing.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `k == indices.length == sources.length == targets.length`\n*   `1 <= k <= 100`\n*   `0 <= indexes[i] < s.length`\n*   `1 <= sources[i].length, targets[i].length <= 50`\n*   `s` consists of only lowercase English letters.\n*   `sources[i]` and `targets[i]` consist of only lowercase English letters.",
          "output": "from collections import defaultdict\nfrom queue import Queue\n\ndef numBusesToDestination(routes, source, target):\n    if source == target:\n        return 0\n\n    stop_to_buses = defaultdict(set)\n    for i, route in enumerate(routes):\n        for stop in route:\n            stop_to_buses[stop].add(i)\n\n    q = Queue()\n    visited_buses = set()\n    num_buses = 0\n    q.put(source)\n\n    while not q.empty():\n        size = q.qsize()\n        for _ in range(size):\n            stop = q.get()\n            for bus in stop_to_buses[stop]:\n                if bus in visited_buses:\n                    continue\n                visited_buses.add(bus)\n                for next_stop in routes[bus]:\n                    if next_stop == target:\n                        return num_buses + 1\n                    q.put(next_stop)\n        num_buses += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges.\n\nYou are given the integer `n` and the array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\nReturn an array `answer` of length `n` where `answer[i]` is the sum of the distances between the `ith` node in the tree and all other nodes.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[2,4\\],\\[2,5\\]\\]\n**Output:** \\[8,12,6,10,10,10\\]\n**Explanation:** The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer\\[0\\] = 8, and so on.\n\n**Example 2:**\n\n**Input:** n = 1, edges = \\[\\]\n**Output:** \\[0\\]\n\n**Example 3:**\n\n**Input:** n = 2, edges = \\[\\[1,0\\]\\]\n**Output:** \\[1,1\\]\n\n**Constraints:**\n\n*   `1 <= n <= 3 * 104`\n*   `edges.length == n - 1`\n*   `edges[i].length == 2`\n*   `0 <= ai, bi < n`\n*   `ai != bi`\n*   The given input represents a valid tree.",
          "output": "def ambiguousCoordinates(s):\n    def generateNumber(s):\n        if not s or (len(s) > 1 and s[0] == '0' and s[-1] == '0'):\n            return []\n        if len(s) > 1 and s[0] == '0':\n            return [\"0.\" + s[1:]]\n        res = [s]\n        if len(s) == 1 or s[-1] == '0':\n            return res\n        for i in range(1, len(s)):\n            res.append(s[:i] + \".\" + s[i:])\n        return res\n\n    n = len(s)\n    res = []\n    \n    for i in range(2, n - 1):\n        first = generateNumber(s[1:i])\n        second = generateNumber(s[i:n - 1])\n        \n        for f in first:\n            for sec in second:\n                res.append(\"(\" + f + \", \" + sec + \")\")\n    \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two images, `img1` and `img2`, represented as binary, square matrices of size `n x n`. A binary matrix has only `0`s and `1`s as values.\n\nWe **translate** one image however we choose by sliding all the `1` bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the **overlap** by counting the number of positions that have a `1` in **both** images.\n\nNote also that a translation does **not** include any kind of rotation. Any `1` bits that are translated outside of the matrix borders are erased.\n\nReturn _the largest possible overlap_.\n\n",
          "input": "**Example 1:**\n\n**Input:** img1 = \\[\\[1,1,0\\],\\[0,1,0\\],\\[0,1,0\\]\\], img2 = \\[\\[0,0,0\\],\\[0,1,1\\],\\[0,0,1\\]\\]\n**Output:** 3\n**Explanation:** We translate img1 to right by 1 unit and down by 1 unit.\n \nThe number of positions that have a 1 in both images is 3 (shown in red).\n \n\n**Example 2:**\n\n**Input:** img1 = \\[\\[1\\]\\], img2 = \\[\\[1\\]\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** img1 = \\[\\[0\\]\\], img2 = \\[\\[0\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == img1.length == img1[i].length`\n*   `n == img2.length == img2[i].length`\n*   `1 <= n <= 30`\n*   `img1[i][j]` is either `0` or `1`.\n*   `img2[i][j]` is either `0` or `1`.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef numComponents(head: ListNode, nums: List[int]) -> int:\n    num_set = set(nums)\n    result = 0\n    connected = False\n\n    while head:\n        if head.val in num_set:\n            if not connected:\n                connected = True\n                result += 1\n        else:\n            connected = False\n        head = head.next\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are controlling a robot that is located somewhere in a room. The room is modeled as an `m x n` binary grid where `0` represents a wall and `1` represents an empty slot.\n\nThe robot starts at an unknown location in the room that is guaranteed to be empty, and you do not have access to the grid, but you can move the robot using the given API `Robot`.\n\nYou are tasked to use the robot to clean the entire room (i.e., clean every empty cell in the room). The robot with the four given APIs can move forward, turn left, or turn right. Each turn is `90` degrees.\n\nWhen the robot tries to move into a wall cell, its bumper sensor detects the obstacle, and it stays on the current cell.\n\nDesign an algorithm to clean the entire room using the following APIs:\n\ninterface Robot {\n  // returns true if next cell is open and robot moves into the cell.\n  // returns false if next cell is obstacle and robot stays on the current cell.\n  boolean move();\n\n  // Robot will stay on the same cell after calling turnLeft/turnRight.\n  // Each turn will be 90 degrees.\n  void turnLeft();\n  void turnRight();\n\n  // Clean the current cell.\n  void clean();\n}\n\n**Note** that the initial direction of the robot will be facing up. You can assume all four edges of the grid are all surrounded by a wall.\n\n**Custom testing:**\n\nThe input is only given to initialize the room and the robot's position internally. You must solve this problem \"blindfolded \". In other words, you must control the robot using only the four mentioned APIs without knowing the room layout and the initial robot's position.\n\n",
          "input": "**Example 1:**\n\n**Input:** room = \\[\\[1,1,1,1,1,0,1,1\\],\\[1,1,1,1,1,0,1,1\\],\\[1,0,1,1,1,1,1,1\\],\\[0,0,0,1,0,0,0,0\\],\\[1,1,1,1,1,1,1,1\\]\\], row = 1, col = 3\n**Output:** Robot cleaned all rooms.\n**Explanation:** All grids in the room are marked by either 0 or 1.\n0 means the cell is blocked, while 1 means the cell is accessible.\nThe robot initially starts at the position of row=1, col=3.\nFrom the top left corner, its position is one row below and three columns right.\n\n**Example 2:**\n\n**Input:** room = \\[\\[1\\]\\], row = 0, col = 0\n**Output:** Robot cleaned all rooms.\n\n**Constraints:**\n\n*   `m == room.length`\n*   `n == room[i].length`\n*   `1 <= m <= 100`\n*   `1 <= n <= 200`\n*   `room[i][j]` is either `0` or `1`.\n*   `0 <= row < m`\n*   `0 <= col < n`\n*   `room[row][col] == 1`\n*   All the empty cells can be visited from the starting position.",
          "output": "from math import comb\n\ndef kthSmallestPath(destination, k):\n    row, col = destination\n    ans = \"\"\n\n    for i in range(row + col):\n        if row == 0:\n            ans += 'H'\n            col -= 1\n        elif col == 0:\n            ans += 'V'\n            row -= 1\n        elif k <= comb(row + col - 1, row - 1):\n            ans += 'H'\n            col -= 1\n        else:\n            ans += 'V'\n            k -= comb(row + col - 1, row - 1)\n            row -= 1\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\n\nTwo rectangles overlap if the area of their intersection is **positive**. To be clear, two rectangles that only touch at the corner or edges do not overlap.\n\nGiven two axis-aligned rectangles `rec1` and `rec2`, return `true` _if they overlap, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rec1 = \\[0,0,2,2\\], rec2 = \\[1,1,3,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** rec1 = \\[0,0,1,1\\], rec2 = \\[1,0,2,1\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** rec1 = \\[0,0,1,1\\], rec2 = \\[2,2,3,3\\]\n**Output:** false\n\n**Constraints:**\n\n*   `rec1.length == 4`\n*   `rec2.length == 4`\n*   `-109 <= rec1[i], rec2[i] <= 109`\n*   `rec1` and `rec2` represent a valid rectangle with a non-zero area.",
          "output": "def racecar(target: int) -> int:\n    memo = {}\n\n    def dp(pos: int, speed: int) -> int:\n        if pos == target:\n            return 0\n        if abs(pos) > 2 * target:\n            return float('inf')\n\n        key = (pos, speed)\n        if key in memo:\n            return memo[key]\n\n        op1 = dp(pos + speed, speed * 2) + 1\n        op2 = dp(pos, -speed) + 2\n\n        ans = min(op1, op2)\n        memo[key] = ans\n        return ans\n\n    return dp(0, 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Alice plays the following game, loosely based on the card game **\"21 \"**.\n\nAlice starts with `0` points and draws numbers while she has less than `k` points. During each draw, she gains an integer number of points randomly from the range `[1, maxPts]`, where `maxPts` is an integer. Each draw is independent and the outcomes have equal probabilities.\n\nAlice stops drawing numbers when she gets `k` **or more points**.\n\nReturn the probability that Alice has `n` or fewer points.\n\nAnswers within `10-5` of the actual answer are considered accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10, k = 1, maxPts = 10\n**Output:** 1.00000\n**Explanation:** Alice gets a single card, then stops.\n\n**Example 2:**\n\n**Input:** n = 6, k = 1, maxPts = 10\n**Output:** 0.60000\n**Explanation:** Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.\n\n**Example 3:**\n\n**Input:** n = 21, k = 17, maxPts = 10\n**Output:** 0.73278\n\n**Constraints:**\n\n*   `0 <= k <= n <= 104`\n*   `1 <= maxPts <= 104`",
          "output": "def mostCommonWord(paragraph: str, banned: List[str]):\n    word_count = {}\n    banned_set = {ban.lower() for ban in banned}\n\n    for word in paragraph.lower().split():\n        cleaned_word = ''.join(c for c in word if c.isalpha())\n        if cleaned_word not in banned_set:\n            word_count[cleaned_word] = word_count.get(cleaned_word, 0) + 1\n\n    return max(word_count, key=word_count.get)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\n\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\n\nYou are given a string `dominoes` representing the initial state where:\n\n*   `dominoes[i] = 'L'`, if the `ith` domino has been pushed to the left,\n*   `dominoes[i] = 'R'`, if the `ith` domino has been pushed to the right, and\n*   `dominoes[i] = '.'`, if the `ith` domino has not been pushed.\n\nReturn _a string representing the final state_.\n\n",
          "input": "**Example 1:**\n\n**Input:** dominoes =  \"RR.L \"\n**Output:**  \"RR.L \"\n**Explanation:** The first domino expends no additional force on the second domino.\n\n**Example 2:**\n\n**Input:** dominoes =  \".L.R...LR..L.. \"\n**Output:**  \"LL.RR.LLRRLL.. \"\n\n**Constraints:**\n\n*   `n == dominoes.length`\n*   `1 <= n <= 105`\n*   `dominoes[i]` is either `'L'`, `'R'`, or `'.'`.",
          "output": "def pushDominoes(dominoes: str) -> str:\n    n = len(dominoes)\n    forces = [0] * n\n    \n    force = 0\n    for i in range(n):\n        if dominoes[i] == 'R':\n            force = n\n        elif dominoes[i] == 'L':\n            force = 0\n        else:\n            force = max(force - 1, 0)\n        forces[i] += force\n    \n    force = 0\n    for i in range(n - 1, -1, -1):\n        if dominoes[i] == 'L':\n            force = n\n        elif dominoes[i] == 'R':\n            force = 0\n        else:\n            force = max(force - 1, 0)\n        forces[i] -= force\n    \n    return \"\".join(['R' if f > 0 else 'L' if f < 0 else '.' for f in forces])\n"
     },
     {
          "instruction": "Write python code for this problem: Two strings `X` and `Y` are similar if we can swap two letters (in different positions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are similar if they are equal.\n\nFor example, `\"tars \"` and `\"rats \"` are similar (swapping at positions `0` and `2`), and `\"rats \"` and `\"arts \"` are similar, but `\"star \"` is not similar to `\"tars \"`, `\"rats \"`, or `\"arts \"`.\n\nTogether, these form two connected groups by similarity: `{ \"tars \", \"rats \", \"arts \"}` and `{ \"star \"}`. Notice that `\"tars \"` and `\"arts \"` are in the same group even though they are not similar. Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\n\nWe are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[ \"tars \", \"rats \", \"arts \", \"star \"\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** strs = \\[ \"omv \", \"ovm \"\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= strs.length <= 300`\n*   `1 <= strs[i].length <= 300`\n*   `strs[i]` consists of lowercase letters only.\n*   All words in `strs` have the same length and are anagrams of each other.",
          "output": "def minimal_length_encoding(words):\n    word_set = set(words)\n\n    for word in words:\n        for i in range(1, len(word)):\n            word_set.discard(word[i:])\n\n    return sum(len(word) + 1 for word in word_set)\n"
     },
     {
          "instruction": "Write python code for this problem: A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers **from** `1` **to** `9` such that each row, column, and both diagonals all have the same sum.\n\nGiven a `row x col` `grid` of integers, how many `3 x 3` \"magic square \" subgrids are there? (Each subgrid is contiguous).\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[4,3,8,4\\],\\[9,5,1,9\\],\\[2,7,6,2\\]\\]\n**Output:** 1\n**Explanation:** \nThe following subgrid is a 3 x 3 magic square:\n \nwhile this one is not:\n \nIn total, there is only one magic square inside the given grid.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[8\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `row == grid.length`\n*   `col == grid[i].length`\n*   `1 <= row, col <= 10`\n*   `0 <= grid[i][j] <= 15`",
          "output": "def numMagicSquaresInside(grid):\n    count = 0\n    for i in range(len(grid) - 2):\n        for j in range(len(grid[0]) - 2):\n            if grid[i][j] <= 9 and grid[i + 1][j + 1] == 5 and isMagic(grid, i, j):\n                count += 1\n    return count\n\n\ndef isMagic(grid, x, y):\n    temp = [0] * 16\n    for i in range(3):\n        for j in range(3):\n            num = grid[x + i][y + j]\n            temp[num] += 1\n            if num > 9 or temp[num] > 1:\n                return False\n\n    _sum = grid[x][y] + grid[x][y+1] + grid[x][y+2]\n    for i in range(3):\n        row_sum, col_sum = 0, 0\n        for j in range(3):\n            row_sum += grid[x + i][y + j]\n            col_sum += grid[x + j][y + i]\n        if row_sum != _sum or col_sum != _sum:\n            return False\n\n    if grid[x][y] + grid[x + 1][y + 1] + grid[x + 2][y + 2] != _sum:\n        return False\n    if grid[x][y + 2] + grid[x + 1][y + 1] + grid[x + 2][y] != _sum:\n        return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` rooms labeled from `0` to `n - 1` and all the rooms are locked except for room `0`. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n\nWhen you visit a room, you may find a set of **distinct keys** in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n\nGiven an array `rooms` where `rooms[i]` is the set of keys that you can obtain if you visited room `i`, return `true` _if you can visit **all** the rooms, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** rooms = \\[\\[1\\],\\[2\\],\\[3\\],\\[\\]\\]\n**Output:** true\n**Explanation:** \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.\n\n**Example 2:**\n\n**Input:** rooms = \\[\\[1,3\\],\\[3,0,1\\],\\[2\\],\\[0\\]\\]\n**Output:** false\n**Explanation:** We can not enter room number 2 since the only key that unlocks it is in that room.\n\n**Constraints:**\n\n*   `n == rooms.length`\n*   `2 <= n <= 1000`\n*   `0 <= rooms[i].length <= 1000`\n*   `1 <= sum(rooms[i].length) <= 3000`\n*   `0 <= rooms[i][j] < n`\n*   All the values of `rooms[i]` are **unique**.",
          "output": "def shortestToChar(s, c):\n    n = len(s)\n    result = [n for _ in range(n)]\n    pos = -n\n\n    for i in range(n):\n        if s[i] == c:\n            pos = i\n        result[i] = i - pos\n\n    for i in range(pos - 1, -1, -1):\n        if s[i] == c:\n            pos = i\n        result[i] = min(result[i], pos - i)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string of digits `num`, such as `\"123456579 \"`. We can split it into a Fibonacci-like sequence `[123, 456, 579]`.\n\nFormally, a **Fibonacci-like** sequence is a list `f` of non-negative integers such that:\n\n*   `0 <= f[i] < 231`, (that is, each integer fits in a **32-bit** signed integer type),\n*   `f.length >= 3`, and\n*   `f[i] + f[i + 1] == f[i + 2]` for all `0 <= i < f.length - 2`.\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number `0` itself.\n\nReturn any Fibonacci-like sequence split from `num`, or return `[]` if it cannot be done.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"1101111 \"\n**Output:** \\[11,0,11,11\\]\n**Explanation:** The output \\[110, 1, 111\\] would also be accepted.\n\n**Example 2:**\n\n**Input:** num =  \"112358130 \"\n**Output:** \\[\\]\n**Explanation:** The task is impossible.\n\n**Example 3:**\n\n**Input:** num =  \"0123 \"\n**Output:** \\[\\]\n**Explanation:** Leading zeroes are not allowed, so  \"01 \",  \"2 \",  \"3 \" is not valid.\n\n**Constraints:**\n\n*   `1 <= num.length <= 200`\n*   `num` contains only digits.",
          "output": "def smallest_good_integer(fronts, backs):\n    not_good = {fronts[i] for i in range(len(fronts)) if fronts[i] == backs[i]}\n\n    result = float('inf')\n    for i in range(len(fronts)):\n        if fronts[i] not in not_good:\n            result = min(result, fronts[i])\n        if backs[i] not in not_good:\n            result = min(result, backs[i])\n\n    return 0 if result == float('inf') else result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of unique strings `words` where `words[i]` is six letters long. One word of `words` was chosen as a secret word.\n\nYou are also given the helper object `Master`. You may call `Master.guess(word)` where `word` is a six-letter-long string, and it must be from `words`. `Master.guess(word)` returns:\n\n*   `-1` if `word` is not from `words`, or\n*   an integer representing the number of exact matches (value and position) of your guess to the secret word.\n\nThere is a parameter `allowedGuesses` for each test case where `allowedGuesses` is the maximum number of times you can call `Master.guess(word)`.\n\nFor each test case, you should call `Master.guess` with the secret word without exceeding the maximum number of allowed guesses. You will get:\n\n*   **`\"Either you took too many guesses, or you did not find the secret word. \"`** if you called `Master.guess` more than `allowedGuesses` times or if you did not call `Master.guess` with the secret word, or\n*   **`\"You guessed the secret word correctly. \"`** if you called `Master.guess` with the secret word with the number of calls to `Master.guess` less than or equal to `allowedGuesses`.\n\nThe test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).\n\n",
          "input": "**Example 1:**\n\n**Input:** secret =  \"acckzz \", words = \\[ \"acckzz \", \"ccbazz \", \"eiowzz \", \"abcczz \"\\], allowedGuesses = 10\n**Output:** You guessed the secret word correctly.\n**Explanation:**\nmaster.guess( \"aaaaaa \") returns -1, because  \"aaaaaa \" is not in wordlist.\nmaster.guess( \"acckzz \") returns 6, because  \"acckzz \" is secret and has all 6 matches.\nmaster.guess( \"ccbazz \") returns 3, because  \"ccbazz \" has 3 matches.\nmaster.guess( \"eiowzz \") returns 2, because  \"eiowzz \" has 2 matches.\nmaster.guess( \"abcczz \") returns 4, because  \"abcczz \" has 4 matches.\nWe made 5 calls to master.guess, and one of them was the secret, so we pass the test case.\n\n**Example 2:**\n\n**Input:** secret =  \"hamada \", words = \\[ \"hamada \", \"khaled \"\\], allowedGuesses = 10\n**Output:** You guessed the secret word correctly.\n**Explanation:** Since there are two words, you can guess both.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `words[i].length == 6`\n*   `words[i]` consist of lowercase English letters.\n*   All the strings of `wordlist` are **unique**.\n*   `secret` exists in `words`.\n*   `10 <= allowedGuesses <= 30`",
          "output": "def numFactoredBinaryTrees(arr):\n    MOD = 10**9 + 7\n    n = len(arr)\n    arr.sort()\n    dp = {}\n    for i, x in enumerate(arr):\n        dp[x] = 1\n        for y in arr[:i]:\n            if x % y == 0 and x // y in dp:\n                dp[x] = (dp[x] + dp[y] * dp[x // y]) % MOD\n    return sum(dp.values()) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, return `true` _if they are equal when both are typed into empty text editors_. `'#'` means a backspace character.\n\nNote that after backspacing an empty text, the text will continue empty.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ab#c \", t =  \"ad#c \"\n**Output:** true\n**Explanation:** Both s and t become  \"ac \".\n\n**Example 2:**\n\n**Input:** s =  \"ab## \", t =  \"c#d# \"\n**Output:** true\n**Explanation:** Both s and t become  \" \".\n\n**Example 3:**\n\n**Input:** s =  \"a#c \", t =  \"b \"\n**Output:** false\n**Explanation:** s becomes  \"c \" while t becomes  \"b \".\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 200`\n*   `s` and `t` only contain lowercase letters and `'#'` characters.\n\n**Follow up:** Can you solve it in `O(n)` time and `O(1)` space?",
          "output": "def backspaceCompare(s: str, t: str) -> bool:\n    i, j = len(s) - 1, len(t) - 1\n    while True:\n        back = 0\n        while i >= 0 and (back > 0 or s[i] == '#'):\n            back = back + 1 if s[i] == '#' else back - 1\n            i -= 1\n        back = 0\n        while j >= 0 and (back > 0 or t[j] == '#'):\n            back = back + 1 if t[j] == '#' else back - 1\n            j -= 1\n        if i >= 0 and j >= 0 and s[i] == t[j]:\n            i, j = i -1, j - 1\n        else:\n            return i == -1 and j == -1\n"
     },
     {
          "instruction": "Write python code for this problem: You may recall that an array `arr` is a **mountain array** if and only if:\n\n*   `arr.length >= 3`\n*   There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `arr`, return _the length of the longest subarray, which is a mountain_. Return `0` if there is no mountain subarray.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,1,4,7,3,2,5\\]\n**Output:** 5\n**Explanation:** The largest mountain is \\[1,4,7,3,2\\] which has length 5.\n\n**Example 2:**\n\n**Input:** arr = \\[2,2,2\\]\n**Output:** 0\n**Explanation:** There is no mountain.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `0 <= arr[i] <= 104`\n\n**Follow up:**\n\n*   Can you solve it using only one pass?\n*   Can you solve it in `O(1)` space?",
          "output": "def longestMountain(arr):\n    n = len(arr)\n    res = up = down = 0\n\n    for i in range(1, n):\n        if (down and arr[i - 1] < arr[i]) or arr[i - 1] == arr[i]:\n            up = down = 0\n\n        up += arr[i - 1] < arr[i]\n        down += arr[i - 1] > arr[i]\n\n        if up and down:\n            res = max(res, up + down + 1)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size `groupSize`, and consists of `groupSize` consecutive cards.\n\nGiven an integer array `hand` where `hand[i]` is the value written on the `ith` card and an integer `groupSize`, return `true` if she can rearrange the cards, or `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** hand = \\[1,2,3,6,2,3,4,7,8\\], groupSize = 3\n**Output:** true\n**Explanation:** Alice's hand can be rearranged as \\[1,2,3\\],\\[2,3,4\\],\\[6,7,8\\]\n\n**Example 2:**\n\n**Input:** hand = \\[1,2,3,4,5\\], groupSize = 4\n**Output:** false\n**Explanation:** Alice's hand can not be rearranged into groups of 4.\n\n**Constraints:**\n\n*   `1 <= hand.length <= 104`\n*   `0 <= hand[i] <= 109`\n*   `1 <= groupSize <= hand.length`\n\n**Note:** This question is the same as 1296: [https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/](https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/)",
          "output": "from collections import Counter\n\ndef is_possible_divide(hand, group_size):\n    card_count = Counter(hand)\n\n    for card in sorted(card_count):\n        if card_count[card] > 0:\n            count = card_count[card]\n            for i in range(1, group_size):\n                if card_count[card + i] < count:\n                    return False\n                card_count[card + i] -= count\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You have an undirected, connected graph of `n` nodes labeled from `0` to `n - 1`. You are given an array `graph` where `graph[i]` is a list of all the nodes connected with node `i` by an edge.\n\nReturn _the length of the shortest path that visits every node_. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[1,2,3\\],\\[0\\],\\[0\\],\\[0\\]\\]\n**Output:** 4\n**Explanation:** One possible path is \\[1,0,2,0,3\\]\n\n**Example 2:**\n\n**Input:** graph = \\[\\[1\\],\\[0,2,4\\],\\[1,3,4\\],\\[2\\],\\[1,2\\]\\]\n**Output:** 4\n**Explanation:** One possible path is \\[0,1,4,2,3\\]\n\n**Constraints:**\n\n*   `n == graph.length`\n*   `1 <= n <= 12`\n*   `0 <= graph[i].length < n`\n*   `graph[i]` does not contain `i`.\n*   If `graph[a]` contains `b`, then `graph[b]` contains `a`.\n*   The input graph is always connected.",
          "output": "from collections import deque\n\ndef shortestPathLength(graph):\n    n = len(graph)\n    queue = deque([(i, 1 << i, 0) for i in range(n)])\n    visited = [[False] * (1 << n) for _ in range(n)]\n\n    for i in range(n):\n        visited[i][1 << i] = True\n\n    while queue:\n        node, bitmask, length = queue.popleft()\n\n        if bitmask == (1 << n) - 1:\n            return length\n\n        for nei in graph[node]:\n            next_bitmask = bitmask | (1 << nei)\n            if not visited[nei][next_bitmask]:\n                visited[nei][next_bitmask] = True\n                queue.append((nei, next_bitmask, length + 1))\n\n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` of lowercase English letters and an integer array `shifts` of the same length.\n\nCall the `shift()` of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`).\n\n*   For example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`.\n\nNow for each `shifts[i] = x`, we want to shift the first `i + 1` letters of `s`, `x` times.\n\nReturn _the final string after all such shifts to s are applied_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abc \", shifts = \\[3,5,9\\]\n**Output:**  \"rpl \"\n**Explanation:** We start with  \"abc \".\nAfter shifting the first 1 letters of s by 3, we have  \"dbc \".\nAfter shifting the first 2 letters of s by 5, we have  \"igc \".\nAfter shifting the first 3 letters of s by 9, we have  \"rpl \", the answer.\n\n**Example 2:**\n\n**Input:** s =  \"aaa \", shifts = \\[1,2,3\\]\n**Output:**  \"gfd \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.\n*   `shifts.length == s.length`\n*   `0 <= shifts[i] <= 109`",
          "output": "def shiftingLetters(s: str, shifts) -> str:\n    for i in range(len(shifts) - 2, -1, -1):\n        shifts[i] += shifts[i + 1] % 26\n\n    result = list(s)\n    for i in range(len(s)):\n        result[i] = chr((ord(result[i]) - ord('a') + shifts[i] % 26) % 26 + ord('a'))\n        \n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty **(0-indexed)**.\n\nThere is at least one empty seat, and at least one person sitting.\n\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\n\nReturn _that maximum distance to the closest person_.\n\n",
          "input": "**Example 1:**\n\n**Input:** seats = \\[1,0,0,0,1,0,1\\]\n**Output:** 2\n**Explanation:** \nIf Alex sits in the second open seat (i.e. seats\\[2\\]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n\n**Example 2:**\n\n**Input:** seats = \\[1,0,0,0\\]\n**Output:** 3\n**Explanation:** \nIf Alex sits in the last seat (i.e. seats\\[3\\]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n\n**Example 3:**\n\n**Input:** seats = \\[0,1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `2 <= seats.length <= 2 * 104`\n*   `seats[i]` is `0` or `1`.\n*   At least one seat is **empty**.\n*   At least one seat is **occupied**.",
          "output": "def maxDistToClosest(seats):\n    n = len(seats)\n    maxDist = 0\n    lastPerson = -1\n\n    for i in range(n):\n        if seats[i] == 1:\n            if lastPerson == -1:\n                maxDist = i\n            else:\n                maxDist = max(maxDist, (i - lastPerson) // 2)\n            lastPerson = i\n\n    maxDist = max(maxDist, n - 1 - lastPerson)\n    return maxDist\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D array of axis-aligned `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2]` denotes the `ith` rectangle where `(xi1, yi1)` are the coordinates of the **bottom-left corner**, and `(xi2, yi2)` are the coordinates of the **top-right corner**.\n\nCalculate the **total area** covered by all `rectangles` in the plane. Any area covered by two or more rectangles should only be counted **once**.\n\nReturn _the **total area**_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rectangles = \\[\\[0,0,2,2\\],\\[1,0,2,3\\],\\[1,0,3,1\\]\\]\n**Output:** 6\n**Explanation:** A total area of 6 is covered by all three rectangles, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap.\n\n**Example 2:**\n\n**Input:** rectangles = \\[\\[0,0,1000000000,1000000000\\]\\]\n**Output:** 49\n**Explanation:** The answer is 1018 modulo (109 + 7), which is 49.\n\n**Constraints:**\n\n*   `1 <= rectangles.length <= 200`\n*   `rectanges[i].length == 4`\n*   `0 <= xi1, yi1, xi2, yi2 <= 109`\n*   `xi1 <= xi2`\n*   `yi1 <= yi2`",
          "output": "def rectangleArea(rectangles):\n    mod = 10**9 + 7\n    n = len(rectangles)\n    X, Y = set(), set()\n    for rect in rectangles:\n        X.add(rect[0])\n        X.add(rect[2])\n        Y.add(rect[1])\n        Y.add(rect[3])\n    sorted_x = sorted(X)\n    sorted_y = sorted(Y)\n    cnt = [[0 for _ in range(len(Y) - 1)] for _ in range(len(X) - 1)]\n\n    for rect in rectangles:\n        x1_idx = sorted_x.index(rect[0])\n        x2_idx = sorted_x.index(rect[2]) - 1\n        y1_idx = sorted_y.index(rect[1])\n        y2_idx = sorted_y.index(rect[3]) - 1\n        for i in range(x1_idx, x2_idx + 1):\n            for j in range(y1_idx, y2_idx + 1):\n                cnt[i][j] = 1\n\n    total_area = 0\n    for i in range(len(X) - 1):\n        for j in range(len(Y) - 1):\n            if cnt[i][j]:\n                total_area += (sorted_x[i + 1] - sorted_x[i]) * (sorted_y[j + 1] - sorted_y[j])\n                total_area %= mod\n\n    return total_area\n"
     },
     {
          "instruction": "Write python code for this problem: There is a group of `n` people labeled from `0` to `n - 1` where each person has a different amount of money and a different level of quietness.\n\nYou are given an array `richer` where `richer[i] = [ai, bi]` indicates that `ai` has more money than `bi` and an integer array `quiet` where `quiet[i]` is the quietness of the `ith` person. All the given data in richer are **logically correct** (i.e., the data will not lead you to a situation where `x` is richer than `y` and `y` is richer than `x` at the same time).\n\nReturn _an integer array_ `answer` _where_ `answer[x] = y` _if_ `y` _is the least quiet person (that is, the person_ `y` _with the smallest value of_ `quiet[y]`_) among all people who definitely have equal to or more money than the person_ `x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** richer = \\[\\[1,0\\],\\[2,1\\],\\[3,1\\],\\[3,7\\],\\[4,3\\],\\[5,3\\],\\[6,3\\]\\], quiet = \\[3,2,5,4,6,1,7,0\\]\n**Output:** \\[5,5,2,5,4,5,6,7\\]\n**Explanation:** \nanswer\\[0\\] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet\\[x\\]) is person 7, but it is not clear if they have more money than person 0.\nanswer\\[7\\] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet\\[x\\]) is person 7.\nThe other answers can be filled out with similar reasoning.\n\n**Example 2:**\n\n**Input:** richer = \\[\\], quiet = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `n == quiet.length`\n*   `1 <= n <= 500`\n*   `0 <= quiet[i] < n`\n*   All the values of `quiet` are **unique**.\n*   `0 <= richer.length <= n * (n - 1) / 2`\n*   `0 <= ai, bi < n`\n*   `ai != bi`\n*   All the pairs of `richer` are **unique**.\n*   The observations in `richer` are all logically consistent.",
          "output": "def to_goat_latin(sentence: str) -> str:\n    words = sentence.split()\n    vowels = set(\"AEIOUaeiou\")\n    result = []\n\n    for i, word in enumerate(words):\n        if word[0] not in vowels:\n            word = word[1:] + word[0]\n        result.append(word + \"ma\" + \"a\" * (i + 1))\n\n    return ' '.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: An array `arr` a **mountain** if the following properties hold:\n\n*   `arr.length >= 3`\n*   There exists some `i` with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven a mountain array `arr`, return the index `i` such that `arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.\n\nYou must solve it in `O(log(arr.length))` time complexity.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[0,1,0\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** arr = \\[0,2,1,0\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** arr = \\[0,10,5,2\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `3 <= arr.length <= 105`\n*   `0 <= arr[i] <= 106`\n*   `arr` is **guaranteed** to be a mountain array.",
          "output": "def numFriendRequests(ages):\n    count = [0] * 121\n    total_requests = 0\n\n    for age in ages:\n        count[age] += 1\n\n    for a in range(1, 121):\n        for b in range(1, 121):\n            if a * 0.5 + 7 >= b:\n                continue\n            if a < b:\n                continue\n            if a < b * 2:\n                total_requests += count[a] * count[b]\n                if a == b:\n                    total_requests -= count[a]\n\n    return total_requests\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cars going to the same destination along a one-lane road. The destination is `target` miles away.\n\nYou are given two integer array `position` and `speed`, both of length `n`, where `position[i]` is the position of the `ith` car and `speed[i]` is the speed of the `ith` car (in miles per hour).\n\nA car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper **at the same speed**. The faster car will **slow down** to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).\n\nA **car fleet** is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.\n\nIf a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\n\nReturn _the **number of car fleets** that will arrive at the destination_.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = 12, position = \\[10,8,0,5,3\\], speed = \\[2,4,1,1,3\\]\n**Output:** 3\n**Explanation:**\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n\n**Example 2:**\n\n**Input:** target = 10, position = \\[3\\], speed = \\[3\\]\n**Output:** 1\n**Explanation:** There is only one car, hence there is only one fleet.\n\n**Example 3:**\n\n**Input:** target = 100, position = \\[0,2,4\\], speed = \\[4,2,1\\]\n**Output:** 1\n**Explanation:**\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n\n**Constraints:**\n\n*   `n == position.length == speed.length`\n*   `1 <= n <= 105`\n*   `0 < target <= 106`\n*   `0 <= position[i] < target`\n*   All the values of `position` are **unique**.\n*   `0 < speed[i] <= 106`",
          "output": "def max_profit_assignment(difficulty, profit, worker):\n    jobs = sorted(zip(difficulty, profit))\n    worker.sort()\n\n    i, max_profit, total_profit = 0, 0, 0\n    for ability in worker:\n        while i < len(difficulty) and ability >= jobs[i][0]:\n            max_profit = max(max_profit, jobs[i][1])\n            i += 1\n        total_profit += max_profit\n    return total_profit\n"
     },
     {
          "instruction": "Write python code for this problem: Strings `s1` and `s2` are `k`**\\-similar** (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`.\n\nGiven two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`**\\-similar**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"ab \", s2 =  \"ba \"\n**Output:** 1\n**Explanation:** The two string are 1-similar because we can use one swap to change s1 to s2:  \"ab \" -->  \"ba \".\n\n**Example 2:**\n\n**Input:** s1 =  \"abc \", s2 =  \"bca \"\n**Output:** 2\n**Explanation:** The two strings are 2-similar because we can use two swaps to change s1 to s2:  \"abc \" -->  \"bac \" -->  \"bca \".\n\n**Constraints:**\n\n*   `1 <= s1.length <= 20`\n*   `s2.length == s1.length`\n*   `s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', 'f'}`.\n*   `s2` is an anagram of `s1`.",
          "output": "def kSimilarity(s1: str, s2: str) -> int:\n    k = 0\n    temp = list(s1)\n\n    for i in range(len(temp)):\n        if temp[i] != s2[i]:\n            j = i + 1\n            while temp[j] != s2[i] or s2[j] == temp[j]:\n                j += 1\n            temp[i], temp[j] = temp[j], temp[i]\n            k += 1\n\n    return k\n"
     },
     {
          "instruction": "Write python code for this problem: There is an exam room with `n` seats in a single row labeled from `0` to `n - 1`.\n\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number `0`.\n\nDesign a class that simulates the mentioned exam room.\n\nImplement the `ExamRoom` class:\n\n*   `ExamRoom(int n)` Initializes the object of the exam room with the number of the seats `n`.\n*   `int seat()` Returns the label of the seat at which the next student will set.\n*   `void leave(int p)` Indicates that the student sitting at seat `p` will leave the room. It is guaranteed that there will be a student sitting at seat `p`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"ExamRoom \",  \"seat \",  \"seat \",  \"seat \",  \"seat \",  \"leave \",  \"seat \"\\]\n\\[\\[10\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[4\\], \\[\\]\\]\n**Output**\n\\[null, 0, 9, 4, 2, null, 5\\]\n\n**Explanation**\nExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5.\n\n**Constraints:**\n\n*   `1 <= n <= 109`\n*   It is guaranteed that there is a student sitting at seat `p`.\n*   At most `104` calls will be made to `seat` and `leave`.",
          "output": "def count_unique_chars(s):\n    return len(set(s))\n\ndef sum_count_unique_chars(s):\n    sum = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            sum += count_unique_chars(s[i:j])\n    return sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given a balanced parentheses string `s`, return _the **score** of the string_.\n\nThe **score** of a balanced parentheses string is based on the following rule:\n\n*   `\"() \"` has score `1`.\n*   `AB` has score `A + B`, where `A` and `B` are balanced parentheses strings.\n*   `(A)` has score `2 * A`, where `A` is a balanced parentheses string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"() \"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** s =  \"(()) \"\n**Output:** 2\n\n**Example 3:**\n\n**Input:** s =  \"()() \"\n**Output:** 2\n\n**Constraints:**\n\n*   `2 <= s.length <= 50`\n*   `s` consists of only `'('` and `')'`.\n*   `s` is a balanced parentheses string.",
          "output": "def consecutive_numbers_sum(n: int) -> int:\n    count = 0\n    i = 1\n    while i * (i - 1) // 2 < n:\n        if (n - i * (i - 1) // 2) % i == 0:\n            count += 1\n        i += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` workers. You are given two integer arrays `quality` and `wage` where `quality[i]` is the quality of the `ith` worker and `wage[i]` is the minimum wage expectation for the `ith` worker.\n\nWe want to hire exactly `k` workers to form a paid group. To hire a group of `k` workers, we must pay them according to the following rules:\n\n1.  Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\n2.  Every worker in the paid group must be paid at least their minimum wage expectation.\n\nGiven the integer `k`, return _the least amount of money needed to form a paid group satisfying the above conditions_. Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** quality = \\[10,20,5\\], wage = \\[70,50,30\\], k = 2\n**Output:** 105.00000\n**Explanation:** We pay 70 to 0th worker and 35 to 2nd worker.\n\n**Example 2:**\n\n**Input:** quality = \\[3,1,10,10,1\\], wage = \\[4,8,2,2,7\\], k = 3\n**Output:** 30.66667\n**Explanation:** We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.\n\n**Constraints:**\n\n*   `n == quality.length == wage.length`\n*   `1 <= k <= n <= 104`\n*   `1 <= quality[i], wage[i] <= 104`",
          "output": "def largeGroupPositions(s: str):\n    result = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i] != s[start]:\n            if i - start >= 3:\n                result.append([start, i - 1])\n            start = i\n    if len(s) - start >= 3:\n        result.append([start, len(s) - 1])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`.\n\nThe square room has walls of length `p` and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0th` receptor.\n\nGiven the two integers `p` and `q`, return _the number of the receptor that the ray meets first_.\n\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\n\n",
          "input": "**Example 1:**\n\n**Input:** p = 2, q = 1\n**Output:** 2\n**Explanation:** The ray meets receptor 2 the first time it gets reflected back to the left wall.\n\n**Example 2:**\n\n**Input:** p = 3, q = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= q <= p <= 1000`",
          "output": "def mask_information(s: str) -> str:\n    if '@' in s:\n        s = s.lower()\n        return s[0] + \"*****\" + s[s.index('@') - 1:]\n    else:\n        digits = \"\".join(filter(str.isdigit, s))\n        if len(digits) == 10:\n            return \"***-***-\" + digits[-4:]\n        prefix = \"*\"* (len(digits) - 10) + \"-\"\n        return \"+\" + prefix + \"***-***-\" + digits[-4:]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `goal`, return `true` _if you can swap two letters in_ `s` _so the result is equal to_ `goal`_, otherwise, return_ `false`_._\n\nSwapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `s[i]` and `s[j]`.\n\n*   For example, swapping at indices `0` and `2` in `\"abcd \"` results in `\"cbad \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ab \", goal =  \"ba \"\n**Output:** true\n**Explanation:** You can swap s\\[0\\] = 'a' and s\\[1\\] = 'b' to get  \"ba \", which is equal to goal.\n\n**Example 2:**\n\n**Input:** s =  \"ab \", goal =  \"ab \"\n**Output:** false\n**Explanation:** The only letters you can swap are s\\[0\\] = 'a' and s\\[1\\] = 'b', which results in  \"ba \" != goal.\n\n**Example 3:**\n\n**Input:** s =  \"aa \", goal =  \"aa \"\n**Output:** true\n**Explanation:** You can swap s\\[0\\] = 'a' and s\\[1\\] = 'a' to get  \"aa \", which is equal to goal.\n\n**Constraints:**\n\n*   `1 <= s.length, goal.length <= 2 * 104`\n*   `s` and `goal` consist of lowercase letters.",
          "output": "script\nclass MyCircularDeque {\n    constructor(k) {\n        this.buffer = new Array(k);\n        this.front = 0;\n        this.rear = 0;\n        this.size = 0;\n    }\n\n    insertFront(value) {\n        if (this.size == this.buffer.length) return false;\n        this.front = (this.front - 1 + this.buffer.length) % this.buffer.length;\n        this.buffer[this.front] = value;\n        this.size++;\n        return true;\n    }\n\n    insertLast(value) {\n        if (this.size == this.buffer.length) return false;\n        this.buffer[this.rear] = value;\n        this.rear = (this.rear + 1) % this.buffer.length;\n        this.size++;\n        return true;\n    }\n\n    deleteFront() {\n        if (this.size == 0) return false;\n        this.front = (this.front + 1) % this.buffer.length;\n        this.size--;\n        return true;\n    }\n\n    deleteLast() {\n        if (this.size == 0) return false;\n        this.rear = (this.rear - 1 + this.buffer.length) % this.buffer.length;\n        this.size--;\n        return true;\n    }\n\n    getFront() {\n        if (this.size == 0) return -1;\n        return this.buffer[this.front];\n    }\n\n    getRear() {\n        if (this.size == 0) return -1;\n        return this.buffer[(this.rear - 1 + this.buffer.length) % this.buffer.length];\n    }\n\n    isEmpty() {\n        return this.size == 0;\n    }\n\n    isFull() {\n        return this.size == this.buffer.length;\n    }\n}\n"
     },
     {
          "instruction": "Write python code for this problem: At a lemonade stand, each lemonade costs `$5`. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill. You must provide the correct change to each customer so that the net transaction is that the customer pays `$5`.\n\nNote that you do not have any change in hand at first.\n\nGiven an integer array `bills` where `bills[i]` is the bill the `ith` customer pays, return `true` _if you can provide every customer with the correct change, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** bills = \\[5,5,5,10,20\\]\n**Output:** true\n**Explanation:** \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.\n\n**Example 2:**\n\n**Input:** bills = \\[5,5,10,10,20\\]\n**Output:** false\n**Explanation:** \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false.\n\n**Constraints:**\n\n*   `1 <= bills.length <= 105`\n*   `bills[i]` is either `5`, `10`, or `20`.",
          "output": "class MyCircularQueue:\n\n    def __init__(self, k: int):\n        self.data = [0] * k\n        self.head = 0\n        self.tail = -1\n        self.size = 0\n        self.capacity = k\n\n    def enQueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.tail = (self.tail + 1) % self.capacity\n        self.data[self.tail] = value\n        self.size += 1\n        return True\n\n    def deQueue(self) -> bool:\n        if self.isEmpty():\n            return False\n        self.head = (self.head + 1) % self.capacity\n        self.size -= 1\n        return True\n\n    def Front(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.data[self.head]\n\n    def Rear(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.data[self.tail]\n\n    def isEmpty(self) -> bool:\n        return self.size == 0\n\n    def isFull(self) -> bool:\n        return self.size == self.capacity\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `grid`.\n\nA **move** consists of choosing any row or column and toggling each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s).\n\nEvery row of the matrix is interpreted as a binary number, and the **score** of the matrix is the sum of these numbers.\n\nReturn _the highest possible **score** after making any number of **moves** (including zero moves)_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,0,1,1\\],\\[1,0,1,0\\],\\[1,1,0,0\\]\\]\n**Output:** 39\n**Explanation:** 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 20`\n*   `grid[i][j]` is either `0` or `1`.",
          "output": "def flipAndInvertImage(image):\n    for row in image:\n        row.reverse()\n        for j in range(len(row)):\n            row[j] = 1 - row[j]\n    return image\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return _the length of the shortest non-empty **subarray** of_ `nums` _with a sum of at least_ `k`. If there is no such **subarray**, return `-1`.\n\nA **subarray** is a **contiguous** part of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1\\], k = 1\n**Output:** 1\n\n**Example 2:**\n\n**Input:** nums = \\[1,2\\], k = 4\n**Output:** -1\n\n**Example 3:**\n\n**Input:** nums = \\[2,-1,2\\], k = 3\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-105 <= nums[i] <= 105`\n*   `1 <= k <= 109`",
          "output": "def findReplaceString(s, indices, sources, targets):\n    index_mapping = sorted(\n        [(indices[i], i) for i in range(len(indices)) if s.startswith(sources[i], indices[i])]\n    )\n    result = []\n    last_idx = 0\n\n    for idx, i in index_mapping:\n        result.append(s[last_idx:idx])\n        result.append(targets[i])\n        last_idx = idx + len(sources[i])\n\n    result.append(s[last_idx:])\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, the value of a target node `target`, and an integer `k`, return _an array of the values of all nodes that have a distance_ `k` _from the target node._\n\nYou can return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], target = 5, k = 2\n**Output:** \\[7,4,1\\]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n\n**Example 2:**\n\n**Input:** root = \\[1\\], target = 1, k = 3\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 500]`.\n*   `0 <= Node.val <= 500`\n*   All the values `Node.val` are **unique**.\n*   `target` is the value of one of the nodes in the tree.\n*   `0 <= k <= 1000`",
          "output": "from collections import defaultdict\n\ndef sumOfDistancesInTree(n, edges):\n    tree = defaultdict(set)\n    for u, v in edges:\n        tree[u].add(v)\n        tree[v].add(u)\n\n    count = [1] * n\n    res = [0] * n\n\n    def dfs(node, parent):\n        for child in tree[node]:\n            if child != parent:\n                dfs(child, node)\n                count[node] += count[child]\n                res[node] += res[child] + count[child]\n\n    def dfs2(node, parent):\n        for child in tree[node]:\n            if child != parent:\n                res[child] = res[node] - count[child] + n - count[child]\n                dfs2(child, node)\n\n    dfs(0, -1)\n    dfs2(0, -1)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` and an array of **unique** integers `blacklist`. Design an algorithm to pick a random integer in the range `[0, n - 1]` that is **not** in `blacklist`. Any integer that is in the mentioned range and not in `blacklist` should be **equally likely** to be returned.\n\nOptimize your algorithm such that it minimizes the number of calls to the **built-in** random function of your language.\n\nImplement the `Solution` class:\n\n*   `Solution(int n, int[] blacklist)` Initializes the object with the integer `n` and the blacklisted integers `blacklist`.\n*   `int pick()` Returns a random integer in the range `[0, n - 1]` and not in `blacklist`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \",  \"pick \",  \"pick \",  \"pick \",  \"pick \",  \"pick \",  \"pick \",  \"pick \"\\]\n\\[\\[7, \\[2, 3, 5\\]\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, 0, 4, 1, 6, 1, 0, 4\\]\n\n**Explanation**\nSolution solution = new Solution(7, \\[2, 3, 5\\]);\nsolution.pick(); // return 0, any integer from \\[0,1,4,6\\] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4\n\n**Constraints:**\n\n*   `1 <= n <= 109`\n*   `0 <= blacklist.length <= min(105, n - 1)`\n*   `0 <= blacklist[i] < n`\n*   All the values of `blacklist` are **unique**.\n*   At most `2 * 104` calls will be made to `pick`.",
          "output": "import random\n\nclass Solution:\n    def __init__(self, n: int, blacklist: List[int]):\n        blacklist.sort()\n        self.mapping = dict()\n        idx = 0\n        for black in blacklist:\n            while idx < black:\n                self.mapping[idx] = n - 1\n                idx += 1\n                n -= 1\n            idx += 1\n            n -= 1\n        self.last = n\n\n    def pick(self) -> int:\n        num = random.randrange(self.last)\n        return self.mapping.get(num, num)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` grid `grid` where:\n\n*   `'.'` is an empty cell.\n*   `'#'` is a wall.\n*   `'@'` is the starting point.\n*   Lowercase letters represent keys.\n*   Uppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\n\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\n\nFor some `1 <= k <= 6`, there is exactly one lowercase and one uppercase letter of the first `k` letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\n\nReturn _the lowest number of moves to acquire all keys_. If it is impossible, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[ \"@.a.. \", \"###.# \", \"b.A.B \"\\]\n**Output:** 8\n**Explanation:** Note that the goal is to obtain all the keys not to open all the locks.\n\n**Example 2:**\n\n**Input:** grid = \\[ \"@..aA \", \"..B#. \", \"....b \"\\]\n**Output:** 6\n\n**Example 3:**\n\n**Input:** grid = \\[ \"@Aa \"\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 30`\n*   `grid[i][j]` is either an English letter, `'.'`, `'#'`, or `'@'`.\n*   The number of keys in the grid is in the range `[1, 6]`.\n*   Each key in the grid is **unique**.\n*   Each key in the grid has a matching lock.",
          "output": "def largestOverlap(img1, img2):\n    n = len(img1)\n    onesImg1 = [(i, j) for i in range(n) for j in range(n) if img1[i][j]]\n    onesImg2 = [(i, j) for i in range(n) for j in range(n) if img2[i][j]]\n\n    overlaps = {}\n    for pt1 in onesImg1:\n        for pt2 in onesImg2:\n            dx, dy = pt2[0] - pt1[0], pt2[1] - pt1[1]\n            key = (dx, dy)\n            if key not in overlaps:\n                overlaps[key] = 0\n            overlaps[key] += 1\n\n    return max(overlaps.values() or [0])\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, the depth of each node is **the shortest distance to the root**.\n\nReturn _the smallest subtree_ such that it contains **all the deepest nodes** in the original tree.\n\nA node is called **the deepest** if it has the largest depth possible among any node in the entire tree.\n\nThe **subtree** of a node is a tree consisting of that node, plus the set of all descendants of that node.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\]\n**Output:** \\[2,7,4\\]\n**Explanation:** We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n**Explanation:** The root is the deepest node in the tree.\n\n**Example 3:**\n\n**Input:** root = \\[0,1,3,null,2\\]\n**Output:** \\[2\\]\n**Explanation:** The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\n\n**Constraints:**\n\n*   The number of nodes in the tree will be in the range `[1, 500]`.\n*   `0 <= Node.val <= 500`\n*   The values of the nodes in the tree are **unique**.\n\n**Note:** This question is the same as 1123: [https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/](https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/)",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:\n        def find_deepest(node):\n            if not node:\n                return None, 0\n            left, left_height = find_deepest(node.left)\n            right, right_height = find_deepest(node.right)\n            if left_height == right_height:\n                return node, left_height + 1\n            return (left, left_height + 1) if left_height > right_height else (right, right_height + 1)\n\n        return find_deepest(root)[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer n, return _the smallest **prime palindrome** greater than or equal to_ `n`.\n\nAn integer is **prime** if it has exactly two divisors: `1` and itself. Note that `1` is not a prime number.\n\n*   For example, `2`, `3`, `5`, `7`, `11`, and `13` are all primes.\n\nAn integer is a **palindrome** if it reads the same from left to right as it does from right to left.\n\n*   For example, `101` and `12321` are palindromes.\n\nThe test cases are generated so that the answer always exists and is in the range `[2, 2 * 108]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6\n**Output:** 7\n\n**Example 2:**\n\n**Input:** n = 8\n**Output:** 11\n\n**Example 3:**\n\n**Input:** n = 13\n**Output:** 101\n\n**Constraints:**\n\n*   `1 <= n <= 108`",
          "output": "def isRectangleOverlap(rec1, rec2):\n    return rec1[2] > rec2[0] and rec1[3] > rec2[1] and rec1[0] < rec2[2] and rec1[1] < rec2[3]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D integer array `matrix`, return _the **transpose** of_ `matrix`.\n\nThe **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** \\[\\[1,4,7\\],\\[2,5,8\\],\\[3,6,9\\]\\]\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[4,5,6\\]\\]\n**Output:** \\[\\[1,4\\],\\[2,5\\],\\[3,6\\]\\]\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 1000`\n*   `1 <= m * n <= 105`\n*   `-109 <= matrix[i][j] <= 109`We don't need any special algorithms to do this. You just need to know what the transpose of a matrix looks like. Rows become columns and vice versa!",
          "output": "def new21Game(n: int, k: int, maxPts: int) -> float:\n    if k == 0 or n >= k + maxPts:\n        return 1\n    \n    dp = [0] * (n + 1)\n    dp[0] = 1\n    s, ans = 1, 0\n\n    for i in range(1, n + 1):\n        dp[i] = s / maxPts\n        if i < k:\n            s += dp[i]\n        else:\n            ans += dp[i]\n        if i >= maxPts:\n            s -= dp[i - maxPts]\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer `n`, find and return _the **longest distance** between any two **adjacent**_ `1`_'s in the binary representation of_ `n`_. If there are no two adjacent_ `1`_'s, return_ `0`_._\n\nTwo `1`'s are **adjacent** if there are only `0`'s separating them (possibly no `0`'s). The **distance** between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `\"1001 \"` have a distance of 3.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 22\n**Output:** 2\n**Explanation:** 22 in binary is  \"10110 \".\nThe first adjacent pair of 1's is  \"10110 \" with a distance of 2.\nThe second adjacent pair of 1's is  \"10110 \" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that  \"10110 \" is not a valid pair since there is a 1 separating the two 1's underlined.\n\n**Example 2:**\n\n**Input:** n = 8\n**Output:** 0\n**Explanation:** 8 in binary is  \"1000 \".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n\n**Example 3:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** 5 in binary is  \"101 \".\n\n**Constraints:**\n\n*   `1 <= n <= 109`",
          "output": "def push_dominoes(dominoes: str) -> str:\n    prev, cur = None, dominoes\n    while prev != cur:\n        prev = cur\n        cur_lst = list(prev)\n        for i in range(len(cur)):\n            if prev[i] == 'L' and i > 0 and prev[i - 1] == '.':\n                cur_lst[i - 1] = 'L'\n            elif prev[i] == 'R' and i < len(cur) - 1 and prev[i + 1] == '.':\n                cur_lst[i + 1] = 'R'\n        cur = ''.join(cur_lst)\n    return cur\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\n\nReturn `true` _if and only if we can do this so that the resulting number is a power of two_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** true\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= n <= 109`",
          "output": "def is_similar(a: str, b: str) -> bool:\n    diff_count = 0\n    for char_a, char_b in zip(a, b):\n        if char_a != char_b:\n            diff_count += 1\n            if diff_count > 2:\n                return False\n    return True\n\ndef count_groups(strs: list[str]) -> int:\n    count = 0\n    visited = [False] * len(strs)\n    for i in range(len(strs)):\n        if not visited[i]:\n            count += 1\n            visited[i] = True\n            for j in range(i + 1, len(strs)):\n                if is_similar(strs[i], strs[j]):\n                    visited[j] = True\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2` both of the same length. The **advantage** of `nums1` with respect to `nums2` is the number of indices `i` for which `nums1[i] > nums2[i]`.\n\nReturn _any permutation of_ `nums1` _that maximizes its **advantage** with respect to_ `nums2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[2,7,11,15\\], nums2 = \\[1,10,4,11\\]\n**Output:** \\[2,11,7,15\\]\n\n**Example 2:**\n\n**Input:** nums1 = \\[12,24,8,32\\], nums2 = \\[13,25,32,11\\]\n**Output:** \\[24,32,8,12\\]\n\n**Constraints:**\n\n*   `1 <= nums1.length <= 105`\n*   `nums2.length == nums1.length`\n*   `0 <= nums1[i], nums2[i] <= 109`",
          "output": "from sortedcontainers import SortedList\n\ndef advantage_count(nums1, nums2):\n    nums1_sorted = SortedList(nums1)\n    result = []\n    for num in nums2:\n        index = nums1_sorted.bisect_right(num)\n        if index == len(nums1_sorted):\n            val = nums1_sorted.pop(0)\n        else:\n            val = nums1_sorted.pop(index)\n        result.append(val)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A car travels from a starting position to a destination which is `target` miles east of the starting position.\n\nThere are gas stations along the way. The gas stations are represented as an array `stations` where `stations[i] = [positioni, fueli]` indicates that the `ith` gas station is `positioni` miles east of the starting position and has `fueli` liters of gas.\n\nThe car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\n\nReturn _the minimum number of refueling stops the car must make in order to reach its destination_. If it cannot reach the destination, return `-1`.\n\nNote that if the car reaches a gas station with `0` fuel left, the car can still refuel there. If the car reaches the destination with `0` fuel left, it is still considered to have arrived.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = 1, startFuel = 1, stations = \\[\\]\n**Output:** 0\n**Explanation:** We can reach the target without refueling.\n\n**Example 2:**\n\n**Input:** target = 100, startFuel = 1, stations = \\[\\[10,100\\]\\]\n**Output:** -1\n**Explanation:** We can not reach the target (or even the first gas station).\n\n**Example 3:**\n\n**Input:** target = 100, startFuel = 10, stations = \\[\\[10,60\\],\\[20,30\\],\\[30,30\\],\\[60,40\\]\\]\n**Output:** 2\n**Explanation:** We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n\n**Constraints:**\n\n*   `1 <= target, startFuel <= 109`\n*   `0 <= stations.length <= 500`\n*   `1 <= positioni < positioni+1 < target`\n*   `1 <= fueli < 109`",
          "output": "def can_visit_all_rooms(rooms):\n    visited = set()\n    stack = [0]\n\n    while stack:\n        current_room = stack.pop()\n\n        visited.add(current_room)\n\n        for key in rooms[current_room]:\n            if key not in visited:\n                stack.append(key)\n\n    return len(visited) == len(rooms)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the **API** `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please **do not** use a language's built-in random API.\n\nEach test case will have one **internal** argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is **not an argument** passed to `rand10()`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** \\[2\\]\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** \\[2,8\\]\n\n**Example 3:**\n\n**Input:** n = 3\n**Output:** \\[3,8,10\\]\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n\n**Follow up:**\n\n*   What is the [expected value](https://en.wikipedia.org/wiki/Expected_value) for the number of calls to `rand7()` function?\n*   Could you minimize the number of calls to `rand7()`?",
          "output": "def rand7():\n    pass  # Provided API\n\ndef rand10():\n    result = None\n    while True:\n        result = (rand7() - 1) * 7 + rand7()\n        if result <= 40:\n            break\n    return result % 10 + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a **leaf value sequence**_._\n\nFor example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`.\n\nTwo binary trees are considered _leaf-similar_ if their leaf value sequence is the same.\n\nReturn `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.\n\n",
          "input": "**Example 1:**\n\n**Input:** root1 = \\[3,5,1,6,2,9,8,null,null,7,4\\], root2 = \\[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root1 = \\[1,2,3\\], root2 = \\[1,3,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in each tree will be in the range `[1, 200]`.\n*   Both of the given trees will have values in the range `[0, 200]`.",
          "output": "def splitIntoFibonacci(num):\n    ans = []\n    def backtrack(index, prev1, prev2):\n        if index == len(num):\n            return len(ans) >= 3\n        curr = 0\n        for i in range(index, len(num)):\n            if i > index and num[index] == '0':\n                break\n            curr = curr * 10 + ord(num[i]) - ord('0')\n            if curr > 2**31 - 1:\n                break\n            if len(ans) >= 2:\n                if curr < prev1 + prev2:\n                    continue\n                elif curr > prev1 + prev2:\n                    break\n            ans.append(curr)\n            if backtrack(i + 1, prev2, curr):\n                return True\n            ans.pop()\n        return False\n            \n    backtrack(0, 0, 0)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: A sequence `x1, x2, ..., xn` is _Fibonacci-like_ if:\n\n*   `n >= 3`\n*   `xi + xi+1 == xi+2` for all `i + 2 <= n`\n\nGiven a **strictly increasing** array `arr` of positive integers forming a sequence, return _the **length** of the longest Fibonacci-like subsequence of_ `arr`. If one does not exist, return `0`.\n\nA **subsequence** is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3,4,5,6,7,8\\]\n**Output:** 5\n**Explanation:** The longest subsequence that is fibonacci-like: \\[1,2,3,5,8\\].\n\n**Example 2:**\n\n**Input:** arr = \\[1,3,7,11,12,14,18\\]\n**Output:** 3\n**Explanation**: The longest subsequence that is fibonacci-like: \\[1,11,12\\], \\[3,11,14\\] or \\[7,11,18\\].\n\n**Constraints:**\n\n*   `3 <= arr.length <= 1000`\n*   `1 <= arr[i] < arr[i + 1] <= 109`",
          "output": "import random\n\ndef match(a, b):\n    return sum(a[i] == b[i] for i in range(6))\n\ndef find_secret_word(wordlist, master):\n    for _ in range(10):\n        guess = random.choice(wordlist)\n        match_cnt = master.guess(guess)\n        if match_cnt == 6:\n            return\n        wordlist = [word for word in wordlist if match(word, guess) == match_cnt]\n"
     },
     {
          "instruction": "Write python code for this problem: A robot on an infinite XY-plane starts at point `(0, 0)` facing north. The robot can receive a sequence of these three possible types of `commands`:\n\n*   `-2`: Turn left `90` degrees.\n*   `-1`: Turn right `90` degrees.\n*   `1 <= k <= 9`: Move forward `k` units, one unit at a time.\n\nSome of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`. If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.\n\nReturn _the **maximum Euclidean distance** that the robot ever gets from the origin **squared** (i.e. if the distance is_ `5`_, return_ `25`_)_.\n\n**Note:**\n\n*   North means +Y direction.\n*   East means +X direction.\n*   South means -Y direction.\n*   West means -X direction.\n\n",
          "input": "**Example 1:**\n\n**Input:** commands = \\[4,-1,3\\], obstacles = \\[\\]\n**Output:** 25\n**Explanation:** The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.\n\n**Example 2:**\n\n**Input:** commands = \\[4,-1,4,-2,4\\], obstacles = \\[\\[2,4\\]\\]\n**Output:** 65\n**Explanation:** The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.\n\n**Example 3:**\n\n**Input:** commands = \\[6,-1,-1,6\\], obstacles = \\[\\]\n**Output:** 36\n**Explanation:** The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.\n\n**Constraints:**\n\n*   `1 <= commands.length <= 104`\n*   `commands[i]` is either `-2`, `-1`, or an integer in the range `[1, 9]`.\n*   `0 <= obstacles.length <= 104`\n*   `-3 * 104 <= xi, yi <= 3 * 104`\n*   The answer is guaranteed to be less than `231`.",
          "output": "def backspace_compare(s, t):\n    def process_backspaces(string):\n        stack = []\n        for c in string:\n            if c != '#':\n                stack.append(c)\n            elif stack:\n                stack.pop()\n        return stack\n\n    return process_backspaces(s) == process_backspaces(t)\n"
     },
     {
          "instruction": "Write python code for this problem: Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\nReturn _the minimum integer_ `k` _such that she can eat all the bananas within_ `h` _hours_.\n\n",
          "input": "**Example 1:**\n\n**Input:** piles = \\[3,6,7,11\\], h = 8\n**Output:** 4\n\n**Example 2:**\n\n**Input:** piles = \\[30,11,23,4,20\\], h = 5\n**Output:** 30\n\n**Example 3:**\n\n**Input:** piles = \\[30,11,23,4,20\\], h = 6\n**Output:** 23\n\n**Constraints:**\n\n*   `1 <= piles.length <= 104`\n*   `piles.length <= h <= 109`\n*   `1 <= piles[i] <= 109`",
          "output": "def longest_mountain(arr):\n    n = len(arr)\n    max_length = 0\n    i = 1\n    while i < n - 1:\n        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n            left = i - 1\n            right = i + 1\n            while left > 0 and arr[left - 1] < arr[left]:\n                left -= 1\n            while right < n - 1 and arr[right] > arr[right + 1]:\n                right += 1\n            max_length = max(max_length, right - left + 1)\n            i = right\n        else:\n            i += 1\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list, return _the middle node of the linked list_.\n\nIf there are two middle nodes, return **the second middle** node.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\]\n**Output:** \\[3,4,5\\]\n**Explanation:** The middle node of the list is node 3.\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4,5,6\\]\n**Output:** \\[4,5,6\\]\n**Explanation:** Since the list has two middle nodes with values 3 and 4, we return the second one.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 100]`.\n*   `1 <= Node.val <= 100`",
          "output": "from collections import Counter\n\ndef is_n_straight_hand(hand, group_size):\n    counts = Counter(hand)\n\n    for card in sorted(counts):\n        if counts[card] > 0:\n            for i in range(group_size - 1, -1, -1):\n                if counts[card + i] < counts[card]:\n                    return False\n                counts[card + i] -= counts[card]\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob play a game with piles of stones. There are an **even** number of piles arranged in a row, and each pile has a **positive** integer number of stones `piles[i]`.\n\nThe objective of the game is to end with the most stones. The **total** number of stones across all the piles is **odd**, so there are no ties.\n\nAlice and Bob take turns, with **Alice starting first**. Each turn, a player takes the entire pile of stones either from the **beginning** or from the **end** of the row. This continues until there are no more piles left, at which point the person with the **most stones wins**.\n\nAssuming Alice and Bob play optimally, return `true` _if Alice wins the game, or_ `false` _if Bob wins_.\n\n",
          "input": "**Example 1:**\n\n**Input:** piles = \\[5,3,4,5\\]\n**Output:** true\n**Explanation:** \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes \\[3, 4, 5\\].\nIf Bob takes 3, then the board is \\[4, 5\\], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is \\[3, 4\\], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.\n\n**Example 2:**\n\n**Input:** piles = \\[3,7,2,3\\]\n**Output:** true\n\n**Constraints:**\n\n*   `2 <= piles.length <= 500`\n*   `piles.length` is **even**.\n*   `1 <= piles[i] <= 500`\n*   `sum(piles[i])` is **odd**.",
          "output": "from collections import deque, defaultdict\n\ndef shortestPathLength(graph):\n    n = len(graph)\n    q = deque()\n    \n    for i in range(n):\n        q.append((i, 1 << i))\n    steps = -1\n    visited = {i: set() for i in range(n)}\n    \n    while q:\n        steps += 1\n        for _ in range(len(q)):\n            currNode, currVisits = q.popleft()\n            \n            if bin(currVisits).count('1') == n:\n                return steps\n\n            for nextNode in graph[currNode]:\n                nextVisits = currVisits | (1 << nextNode)\n\n                if nextVisits not in visited[nextNode]:\n                    visited[nextNode].add(nextVisits)\n                    q.append((nextNode, nextVisits))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: A positive integer is _magical_ if it is divisible by either `a` or `b`.\n\nGiven the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1, a = 2, b = 3\n**Output:** 2\n\n**Example 2:**\n\n**Input:** n = 4, a = 2, b = 3\n**Output:** 6\n\n**Constraints:**\n\n*   `1 <= n <= 109`\n*   `2 <= a, b <= 4 * 104`",
          "output": "def shiftingLetters(s: str, shifts: list[int]) -> str:\n    n = len(s)\n    for i in range(n - 2, -1, -1):\n        shifts[i] = (shifts[i] + shifts[i + 1]) % 26\n    \n    result = []\n    for i in range(n):\n        result.append(chr(((ord(s[i]) - ord('a')) + shifts[i]) % 26 + ord('a')))\n    \n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime.\n\nLet's call a **profitable scheme** any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`.\n\nReturn the number of schemes that can be chosen. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, minProfit = 3, group = \\[2,2\\], profit = \\[2,3\\]\n**Output:** 2\n**Explanation:** To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.\n\n**Example 2:**\n\n**Input:** n = 10, minProfit = 5, group = \\[2,3,5\\], profit = \\[6,7,8\\]\n**Output:** 7\n**Explanation:** To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n\n**Constraints:**\n\n*   `1 <= n <= 100`\n*   `0 <= minProfit <= 100`\n*   `1 <= group.length <= 100`\n*   `1 <= group[i] <= 100`\n*   `profit.length == group.length`\n*   `0 <= profit[i] <= 100`",
          "output": "def max_dist_to_closest(seats):\n    max_dist = 0\n    last_person = -1\n    for i, seat in enumerate(seats):\n        if seat == 1:\n            max_dist = i if last_person < 0 else max(max_dist, (i - last_person) // 2)\n            last_person = i\n    return max(max_dist, len(seats) - 1 - last_person)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of positive integers `w` where `w[i]` describes the **weight** of the `ith` index.\n\nYou need to implement the function `pickIndex()`, which **randomly** picks an index in the range `[0, w.length - 1]` (**inclusive**) and returns it. The **probability** of picking an index `i` is `w[i] / sum(w)`.\n\n*   For example, if `w = [1, 3]`, the probability of picking index `0` is `1 / (1 + 3) = 0.25` (i.e., `25%`), and the probability of picking index `1` is `3 / (1 + 3) = 0.75` (i.e., `75%`).\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \", \"pickIndex \"\\]\n\\[\\[\\[1\\]\\],\\[\\]\\]\n**Output**\n\\[null,0\\]\n\n**Explanation**\nSolution solution = new Solution(\\[1\\]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n\n**Example 2:**\n\n**Input**\n\\[ \"Solution \", \"pickIndex \", \"pickIndex \", \"pickIndex \", \"pickIndex \", \"pickIndex \"\\]\n\\[\\[\\[1,3\\]\\],\\[\\],\\[\\],\\[\\],\\[\\],\\[\\]\\]\n**Output**\n\\[null,1,1,1,1,0\\]\n\n**Explanation**\nSolution solution = new Solution(\\[1, 3\\]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n\\[null,1,1,1,1,0\\]\n\\[null,1,1,1,1,1\\]\n\\[null,1,1,1,0,0\\]\n\\[null,1,1,1,0,1\\]\n\\[null,1,0,1,0,0\\]\n......\nand so on.\n\n**Constraints:**\n\n*   `1 <= w.length <= 104`\n*   `1 <= w[i] <= 105`\n*   `pickIndex` will be called at most `104` times.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef swapNodes(head, k):\n    first, second, temp = head, head, head\n    for _ in range(k - 1):\n        temp = temp.next\n    first = temp\n    temp = temp.next\n    while temp:\n        temp = temp.next\n        second = second.next\n\n    first.val, second.val = second.val, first.val\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `m x n` binary grid `matrix` with all the values set `0` initially. Design an algorithm to randomly pick an index `(i, j)` where `matrix[i][j] == 0` and flips it to `1`. All the indices `(i, j)` where `matrix[i][j] == 0` should be equally likely to be returned.\n\nOptimize your algorithm to minimize the number of calls made to the **built-in** random function of your language and optimize the time and space complexity.\n\nImplement the `Solution` class:\n\n*   `Solution(int m, int n)` Initializes the object with the size of the binary matrix `m` and `n`.\n*   `int[] flip()` Returns a random index `[i, j]` of the matrix where `matrix[i][j] == 0` and flips it to `1`.\n*   `void reset()` Resets all the values of the matrix to be `0`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \",  \"flip \",  \"flip \",  \"flip \",  \"reset \",  \"flip \"\\]\n\\[\\[3, 1\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, \\[1, 0\\], \\[2, 0\\], \\[0, 0\\], null, \\[2, 0\\]\\]\n\n**Explanation**\nSolution solution = new Solution(3, 1);\nsolution.flip();  // return \\[1, 0\\], \\[0,0\\], \\[1,0\\], and \\[2,0\\] should be equally likely to be returned.\nsolution.flip();  // return \\[2, 0\\], Since \\[1,0\\] was returned, \\[2,0\\] and \\[0,0\\]\nsolution.flip();  // return \\[0, 0\\], Based on the previously returned indices, only \\[0,0\\] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return \\[2, 0\\], \\[0,0\\], \\[1,0\\], and \\[2,0\\] should be equally likely to be returned.\n\n**Constraints:**\n\n*   `1 <= m, n <= 104`\n*   There will be at least one free cell for each call to `flip`.\n*   At most `1000` calls will be made to `flip` and `reset`.",
          "output": "import random\n\nclass Solution:\n    def __init__(self, m: int, n: int):\n        self.m, self.n = m, n\n        self.total = m * n\n        self.matrix = [[0] * n for _ in range(m)]\n\n    def flip(self):\n        idx = random.randint(0, self.total - 1)\n        self.total -= 1\n\n        for i in range(self.m):\n            for j in range(self.n):\n                if self.matrix[i][j] == 0:\n                    if idx == 0:\n                        self.matrix[i][j] = 1\n                        return [i, j]\n                    idx -= 1\n        return [-1, -1] # This line should never be reached\n\n    def reset(self):\n        self.total = self.m * self.n\n        for row in self.matrix:\n            for j in range(self.n):\n                row[j] = 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of non-overlapping axis-aligned rectangles `rects` where `rects[i] = [ai, bi, xi, yi]` indicates that `(ai, bi)` is the bottom-left corner point of the `ith` rectangle and `(xi, yi)` is the top-right corner point of the `ith` rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n\n**Note** that an integer point is a point that has integer coordinates.\n\nImplement the `Solution` class:\n\n*   `Solution(int[][] rects)` Initializes the object with the given rectangles `rects`.\n*   `int[] pick()` Returns a random integer point `[u, v]` inside the space covered by one of the given rectangles.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \",  \"pick \",  \"pick \",  \"pick \",  \"pick \",  \"pick \"\\]\n\\[\\[\\[\\[-2, -2, 1, 1\\], \\[2, 2, 4, 6\\]\\]\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, \\[1, -2\\], \\[1, -1\\], \\[-1, -2\\], \\[-2, -2\\], \\[0, 0\\]\\]\n\n**Explanation**\nSolution solution = new Solution(\\[\\[-2, -2, 1, 1\\], \\[2, 2, 4, 6\\]\\]);\nsolution.pick(); // return \\[1, -2\\]\nsolution.pick(); // return \\[1, -1\\]\nsolution.pick(); // return \\[-1, -2\\]\nsolution.pick(); // return \\[-2, -2\\]\nsolution.pick(); // return \\[0, 0\\]\n\n**Constraints:**\n\n*   `1 <= rects.length <= 100`\n*   `rects[i].length == 4`\n*   `-109 <= ai < xi <= 109`\n*   `-109 <= bi < yi <= 109`\n*   `xi - ai <= 2000`\n*   `yi - bi <= 2000`\n*   All the rectangles do not overlap.\n*   At most `104` calls will be made to `pick`.",
          "output": "import random\nfrom typing import List\n\nclass Solution:\n    def __init__(self, rects: List[List[int]]):\n        self.rects = rects\n        self.areas = [0] * len(rects)\n        self.total_area = 0\n\n        for i, rect in enumerate(rects):\n            area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)\n            self.areas[i] = area\n            self.total_area += area\n\n    def pick(self) -> List[int]:\n        rnd = random.randint(0, self.total_area - 1)\n        idx = 0\n        while rnd >= self.areas[idx]:\n            rnd -= self.areas[idx]\n            idx += 1\n\n        x = random.randint(self.rects[idx][0], self.rects[idx][2])\n        y = random.randint(self.rects[idx][1], self.rects[idx][3])\n        \n        return [x, y]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle.\n\nImplement the `Solution` class:\n\n*   `Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.\n*   `randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Solution \",  \"randPoint \",  \"randPoint \",  \"randPoint \"\\]\n\\[\\[1.0, 0.0, 0.0\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, \\[-0.02493, -0.38077\\], \\[0.82314, 0.38945\\], \\[0.36572, 0.17248\\]\\]\n\n**Explanation**\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return \\[-0.02493, -0.38077\\]\nsolution.randPoint(); // return \\[0.82314, 0.38945\\]\nsolution.randPoint(); // return \\[0.36572, 0.17248\\]\n\n**Constraints:**\n\n*   `0 < radius <= 108`\n*   `-107 <= x_center, y_center <= 107`\n*   At most `3 * 104` calls will be made to `randPoint`.",
          "output": "import random\nfrom math import sqrt, pi, cos, sin\n\nclass Solution:\n\n    def __init__(self, radius: float, x_center: float, y_center: float):\n        self.radius = radius\n        self.x_center = x_center\n        self.y_center = y_center\n\n    def randPoint(self):\n        r = sqrt(random.random()) * self.radius\n        theta = random.random() * 2 * pi\n        return [self.x_center + r * cos(theta), self.y_center + r * sin(theta)]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an encoded string `s`. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\n\n*   If the character read is a letter, that letter is written onto the tape.\n*   If the character read is a digit `d`, the entire current tape is repeatedly written `d - 1` more times in total.\n\nGiven an integer `k`, return _the_ `kth` _letter (**1-indexed)** in the decoded string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leet2code3 \", k = 10\n**Output:**  \"o \"\n**Explanation:** The decoded string is  \"leetleetcodeleetleetcodeleetleetcode \".\nThe 10th letter in the string is  \"o \".\n\n**Example 2:**\n\n**Input:** s =  \"ha22 \", k = 5\n**Output:**  \"h \"\n**Explanation:** The decoded string is  \"hahahaha \".\nThe 5th letter is  \"h \".\n\n**Example 3:**\n\n**Input:** s =  \"a2345678999999999999999 \", k = 1\n**Output:**  \"a \"\n**Explanation:** The decoded string is  \"a \" repeated 8301530446056247680 times.\nThe 1st letter is  \"a \".\n\n**Constraints:**\n\n*   `2 <= s.length <= 100`\n*   `s` consists of lowercase English letters and digits `2` through `9`.\n*   `s` starts with a letter.\n*   `1 <= k <= 109`\n*   It is guaranteed that `k` is less than or equal to the length of the decoded string.\n*   The decoded string is guaranteed to have less than `263` letters.",
          "output": "def rectangleArea(rectangles):\n    mod = 10**9 + 7\n    X = sorted(set(x for rect in rectangles for x in rect[::2]))\n    Xdict = {x:i for i,x in enumerate(X)}\n\n    events = []\n    for x1,y1,x2,y2 in rectangles:\n        events.append((Xdict[x1], 1, y1, y2))\n        events.append((Xdict[x2], -1, y1, y2))\n    events.sort()\n\n    area = 0\n    cnt = [0] * len(X)\n    active = 0\n    for idx, type, y1, y2 in events:\n        area = (area + (X[idx+1] - X[idx]) * active % mod) % mod\n        cnt[y1] += type\n        cnt[y2] -= type\n        active = sum(p for j,p in zip(X, cnt) if p)\n\n    return area\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.\n\nReturn _the minimum number of boats to carry every given person_.\n\n",
          "input": "**Example 1:**\n\n**Input:** people = \\[1,2\\], limit = 3\n**Output:** 1\n**Explanation:** 1 boat (1, 2)\n\n**Example 2:**\n\n**Input:** people = \\[3,2,2,1\\], limit = 3\n**Output:** 3\n**Explanation:** 3 boats (1, 2), (2) and (3)\n\n**Example 3:**\n\n**Input:** people = \\[3,5,3,4\\], limit = 5\n**Output:** 4\n**Explanation:** 4 boats (3), (3), (4), (5)\n\n**Constraints:**\n\n*   `1 <= people.length <= 5 * 104`\n*   `1 <= people[i] <= limit <= 3 * 104`",
          "output": "from collections import defaultdict\n\ndef loudAndRich(richer, quiet):\n    n = len(quiet)\n    graph = defaultdict(list)\n    for r in richer:\n        graph[r[1]].append(r[0])\n\n    answer = [-1] * n\n\n    def dfs(x):\n        if answer[x] != -1:\n            return answer[x]\n        answer[x] = x\n        for y in graph[x]:\n            cand = dfs(y)\n            if quiet[cand] < quiet[answer[x]]:\n                answer[x] = cand\n        return answer[x]\n\n    for i in range(n):\n        dfs(i)\n\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an undirected graph (the **\"original graph \"**) with `n` nodes labeled from `0` to `n - 1`. You decide to **subdivide** each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\n\nThe graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will **subdivide** the edge into. Note that `cnti == 0` means you will not subdivide the edge.\n\nTo **subdivide** the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti-1, xcnti]`, `[xcnti, vi]`.\n\nIn this **new graph**, you want to know how many nodes are **reachable** from the node `0`, where a node is **reachable** if the distance is `maxMoves` or less.\n\nGiven the original graph and `maxMoves`, return _the number of nodes that are **reachable** from node_ `0` _in the new graph_.\n\n",
          "input": "**Example 1:**\n\n**Input:** edges = \\[\\[0,1,10\\],\\[0,2,1\\],\\[1,2,2\\]\\], maxMoves = 6, n = 3\n**Output:** 13\n**Explanation:** The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow.\n\n**Example 2:**\n\n**Input:** edges = \\[\\[0,1,4\\],\\[1,2,6\\],\\[0,2,8\\],\\[1,3,1\\]\\], maxMoves = 10, n = 4\n**Output:** 23\n\n**Example 3:**\n\n**Input:** edges = \\[\\[1,2,4\\],\\[1,4,5\\],\\[1,3,1\\],\\[2,3,4\\],\\[3,4,5\\]\\], maxMoves = 17, n = 5\n**Output:** 1\n**Explanation:** Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\n\n**Constraints:**\n\n*   `0 <= edges.length <= min(n * (n - 1) / 2, 104)`\n*   `edges[i].length == 3`\n*   `0 <= ui < vi < n`\n*   There are **no multiple edges** in the graph.\n*   `0 <= cnti <= 104`\n*   `0 <= maxMoves <= 109`\n*   `1 <= n <= 3000`",
          "output": "def peakIndexInMountainArray(arr):\n    low, high = 0, len(arr) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] < arr[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes.\n\nEach value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`.\n\nWe view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.\n\nA **projection** is like a shadow, that maps our **3-dimensional** figure to a **2-dimensional** plane. We are viewing the \"shadow \" when looking at the cubes from the top, the front, and the side.\n\nReturn _the total area of all three projections_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** 17\n**Explanation:** Here are the three projections ( \"shadows \") of the shape made with each axis-aligned plane.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[2\\]\\]\n**Output:** 5\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,0\\],\\[0,2\\]\\]\n**Output:** 8\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `1 <= n <= 50`\n*   `0 <= grid[i][j] <= 50`",
          "output": "def carFleet(target: int, position: List[int], speed: List[int]) -> int:\n    cars = sorted(zip(position, speed), reverse=True)\n    fleets = 0\n    last_arrival = -1\n\n    for pos, sp in cars:\n        arrival = (target - pos) / sp\n        if arrival > last_arrival:\n            fleets += 1\n            last_arrival = arrival\n\n    return fleets\n"
     },
     {
          "instruction": "Write python code for this problem: A **sentence** is a string of single-space separated words where each word consists only of lowercase letters.\n\nA word is **uncommon** if it appears exactly once in one of the sentences, and **does not appear** in the other sentence.\n\nGiven two **sentences** `s1` and `s2`, return _a list of all the **uncommon words**_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\n**Output:** \\[\"sweet\",\"sour\"\\]\n\n**Example 2:**\n\n**Input:** s1 = \"apple apple\", s2 = \"banana\"\n**Output:** \\[\"banana\"\\]\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 200`\n*   `s1` and `s2` consist of lowercase English letters and spaces.\n*   `s1` and `s2` do not have leading or trailing spaces.\n*   All the words in `s1` and `s2` are separated by a single space.",
          "output": "def k_similarity(s1, s2):\n    k = 0\n    a, b = list(s1), list(s2)\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            for j in range(i + 1, len(b)):\n                if a[i] == b[j] and a[j] != b[j]:\n                    a[i], a[j] = a[j], a[i]\n                    k += 1\n                    break\n    return k\n"
     },
     {
          "instruction": "Write python code for this problem: You start at the cell `(rStart, cStart)` of an `rows x cols` grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\n\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all `rows * cols` spaces of the grid.\n\nReturn _an array of coordinates representing the positions of the grid in the order you visited them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** rows = 1, cols = 4, rStart = 0, cStart = 0\n**Output:** \\[\\[0,0\\],\\[0,1\\],\\[0,2\\],\\[0,3\\]\\]\n\n**Example 2:**\n\n**Input:** rows = 5, cols = 6, rStart = 1, cStart = 4\n**Output:** \\[\\[1,4\\],\\[1,5\\],\\[2,5\\],\\[2,4\\],\\[2,3\\],\\[1,3\\],\\[0,3\\],\\[0,4\\],\\[0,5\\],\\[3,5\\],\\[3,4\\],\\[3,3\\],\\[3,2\\],\\[2,2\\],\\[1,2\\],\\[0,2\\],\\[4,5\\],\\[4,4\\],\\[4,3\\],\\[4,2\\],\\[4,1\\],\\[3,1\\],\\[2,1\\],\\[1,1\\],\\[0,1\\],\\[4,0\\],\\[3,0\\],\\[2,0\\],\\[1,0\\],\\[0,0\\]\\]\n\n**Constraints:**\n\n*   `1 <= rows, cols <= 100`\n*   `0 <= rStart < rows`\n*   `0 <= cStart < cols`",
          "output": "from bisect import bisect_left, insort_left\n\nclass ExamRoom:\n\n    def __init__(self, n: int):\n        self.students = []\n        self.n = n\n\n    def seat(self) -> int:\n        if not self.students:\n            seat_index = 0\n        else:\n            distance, seat_index = self.students[0], 0\n            \n            for i in range(1, len(self.students)):\n                d = (self.students[i] - self.students[i - 1]) // 2\n                if d > distance:\n                    distance = d\n                    seat_index = self.students[i - 1] + d\n                    \n            if self.n - 1 - self.students[-1] > distance:\n                seat_index = self.n - 1\n                \n        insort_left(self.students, seat_index)\n        return seat_index\n\n    def leave(self, p: int) -> None:\n        index = bisect_left(self.students, p)\n        self.students.pop(index)\n"
     },
     {
          "instruction": "Write python code for this problem: We want to split a group of `n` people (labeled from `1` to `n`) into two groups of **any size**. Each person may dislike some other people, and they should not go into the same group.\n\nGiven the integer `n` and the array `dislikes` where `dislikes[i] = [ai, bi]` indicates that the person labeled `ai` does not like the person labeled `bi`, return `true` _if it is possible to split everyone into two groups in this way_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, dislikes = \\[\\[1,2\\],\\[1,3\\],\\[2,4\\]\\]\n**Output:** true\n**Explanation:** The first group has \\[1,4\\], and the second group has \\[2,3\\].\n\n**Example 2:**\n\n**Input:** n = 3, dislikes = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]\n**Output:** false\n**Explanation:** We need at least 3 groups to divide them. We cannot put them in two groups.\n\n**Constraints:**\n\n*   `1 <= n <= 2000`\n*   `0 <= dislikes.length <= 104`\n*   `dislikes[i].length == 2`\n*   `1 <= ai < bi <= n`\n*   All the pairs of `dislikes` are **unique**.",
          "output": "def scoreOfParentheses(s):\n    score, depth = 0, 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            depth += 1\n        else:\n            depth -= 1\n            if s[i - 1] == '(':\n                score += 1 << depth\n    return score\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`.\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**.\n\nEach move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves.\n\nReturn _the **minimum number of moves** that you need to determine **with certainty** what the value of_ `f` is.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 1, n = 2\n**Output:** 2\n**Explanation:** \nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.\n\n**Example 2:**\n\n**Input:** k = 2, n = 6\n**Output:** 3\n\n**Example 3:**\n\n**Input:** k = 3, n = 14\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= k <= 100`\n*   `1 <= n <= 104`",
          "output": "import heapq\n\ndef mincost_to_hire_workers(quality, wage, k):\n    workers = sorted((w / q, q) for w, q in zip(wage, quality))\n    total_quality = 0\n    max_heap = []\n    result = float(\"inf\")\n\n    for ratio, q in workers:\n        heapq.heappush(max_heap, -q)\n        total_quality += q\n\n        if len(max_heap) > k:\n            total_quality += heapq.heappop(max_heap)\n\n        if len(max_heap) == k:\n            result = min(result, total_quality * ratio)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob have a different total number of candies. You are given two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `ith` box of candy that Alice has and `bobSizes[j]` is the number of candies of the `jth` box of candy that Bob has.\n\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\n\nReturn a_n integer array_ `answer` _where_ `answer[0]` _is the number of candies in the box that Alice must exchange, and_ `answer[1]` _is the number of candies in the box that Bob must exchange_. If there are multiple answers, you may **return any** one of them. It is guaranteed that at least one answer exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** aliceSizes = \\[1,1\\], bobSizes = \\[2,2\\]\n**Output:** \\[1,2\\]\n\n**Example 2:**\n\n**Input:** aliceSizes = \\[1,2\\], bobSizes = \\[2,3\\]\n**Output:** \\[1,2\\]\n\n**Example 3:**\n\n**Input:** aliceSizes = \\[2\\], bobSizes = \\[1,3\\]\n**Output:** \\[2,3\\]\n\n**Constraints:**\n\n*   `1 <= aliceSizes.length, bobSizes.length <= 104`\n*   `1 <= aliceSizes[i], bobSizes[j] <= 105`\n*   Alice and Bob have a different total number of candies.\n*   There will be at least one valid answer for the given input.",
          "output": "def mirrorReflection(p, q):\n    from math import gcd\n    m = p // gcd(p, q)\n\n    if m % 2 == 0:\n        return 2\n    if (q // gcd(p, q)) % 2 == 0:\n        return 0\n    return 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays, `preorder` and `postorder` where `preorder` is the preorder traversal of a binary tree of **distinct** values and `postorder` is the postorder traversal of the same tree, reconstruct and return _the binary tree_.\n\nIf there exist multiple answers, you can **return any** of them.\n\n",
          "input": "**Example 1:**\n\n**Input:** preorder = \\[1,2,4,5,3,6,7\\], postorder = \\[4,5,2,6,7,3,1\\]\n**Output:** \\[1,2,3,4,5,6,7\\]\n\n**Example 2:**\n\n**Input:** preorder = \\[1\\], postorder = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   `1 <= preorder.length <= 30`\n*   `1 <= preorder[i] <= preorder.length`\n*   All the values of `preorder` are **unique**.\n*   `postorder.length == preorder.length`\n*   `1 <= postorder[i] <= postorder.length`\n*   All the values of `postorder` are **unique**.\n*   It is guaranteed that `preorder` and `postorder` are the preorder traversal and postorder traversal of the same binary tree.",
          "output": "def are_almost_equal(s, goal):\n    if s == goal:\n        return True\n    count = 0\n    index1, index2 = -1, -1\n    for i in range(len(s)):\n        if s[i] != goal[i]:\n            count += 1\n            if index1 == -1:\n                index1 = i\n            else:\n                index2 = i\n            if count > 2:\n                return False\n    return count == 2 and s[index1] == goal[index2] and s[index2] == goal[index1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of strings `words` and a string `pattern`, return _a list of_ `words[i]` _that match_ `pattern`. You may return the answer in **any order**.\n\nA word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word.\n\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"abc \", \"deq \", \"mee \", \"aqq \", \"dkd \", \"ccc \"\\], pattern =  \"abb \"\n**Output:** \\[ \"mee \", \"aqq \"\\]\n**Explanation:**  \"mee \" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n \"ccc \" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \", \"b \", \"c \"\\], pattern =  \"a \"\n**Output:** \\[ \"a \", \"b \", \"c \"\\]\n\n**Constraints:**\n\n*   `1 <= pattern.length <= 20`\n*   `1 <= words.length <= 50`\n*   `words[i].length == pattern.length`\n*   `pattern` and `words[i]` are lowercase English letters.",
          "output": "def lemonadeChange(bills):\n    five, ten = 0, 0\n    for bill in bills:\n        if bill == 5:\n            five += 1\n        elif bill == 10:\n            if not five:\n                return False\n            five -= 1\n            ten += 1\n        else:\n            if ten and five:\n                ten -= 1\n                five -= 1\n            elif five >= 3:\n                five -= 3\n            else:\n                return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: The **width** of a sequence is the difference between the maximum and minimum elements in the sequence.\n\nGiven an array of integers `nums`, return _the sum of the **widths** of all the non-empty **subsequences** of_ `nums`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **subsequence** is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,3\\]\n**Output:** 6\nExplanation: The subsequences are \\[1\\], \\[2\\], \\[3\\], \\[2,1\\], \\[2,3\\], \\[1,3\\], \\[2,1,3\\].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n\n**Example 2:**\n\n**Input:** nums = \\[2\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`",
          "output": "def matrixScore(grid):\n    m, n = len(grid), len(grid[0])\n    for i in range(m):\n        if grid[i][0] == 0:\n            for j in range(n):\n                grid[i][j] = 1 - grid[i][j]\n    for j in range(1, n):\n        count = sum(grid[i][j] for i in range(m))\n        if count <= m // 2:\n            for i in range(m):\n                grid[i][j] = 1 - grid[i][j]\n    return sum(sum(grid[i][j]*(1 << (n - 1 - j)) for j in range(n)) for i in range(m))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.\n\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\n\nReturn _the total surface area of the resulting shapes_.\n\n**Note:** The bottom face of each shape counts toward its surface area.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** 34\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** 32\n\n**Example 3:**\n\n**Input:** grid = \\[\\[2,2,2\\],\\[2,1,2\\],\\[2,2,2\\]\\]\n**Output:** 46\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `1 <= n <= 50`\n*   `0 <= grid[i][j] <= 50`",
          "output": "from collections import deque\n\ndef shortest_subarray(nums, k):\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    res = n + 1\n    dq = deque()\n    for i in range(n + 1):\n        while dq and prefix_sum[i] - prefix_sum[dq[0]] >= k:\n            res = min(res, i - dq.popleft())\n        while dq and prefix_sum[i] <= prefix_sum[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n\n    return res if res <= n else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings of the same length `words`.\n\nIn one **move**, you can swap any two even indexed characters or any two odd indexed characters of a string `words[i]`.\n\nTwo strings `words[i]` and `words[j]` are **special-equivalent** if after any number of moves, `words[i] == words[j]`.\n\n*   For example, `words[i] = \"zzxy \"` and `words[j] = \"xyzz \"` are **special-equivalent** because we may make the moves `\"zzxy \" -> \"xzzy \" -> \"xyzz \"`.\n\nA **group of special-equivalent strings** from `words` is a non-empty subset of words such that:\n\n*   Every pair of strings in the group are special equivalent, and\n*   The group is the largest size possible (i.e., there is not a string `words[i]` not in the group such that `words[i]` is special-equivalent to every string in the group).\n\nReturn _the number of **groups of special-equivalent strings** from_ `words`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"abcd \", \"cdab \", \"cbad \", \"xyzz \", \"zzxy \", \"zzyx \"\\]\n**Output:** 3\n**Explanation:** \nOne group is \\[ \"abcd \",  \"cdab \",  \"cbad \"\\], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are \\[ \"xyzz \",  \"zzxy \"\\] and \\[ \"zzyx \"\\].\nNote that in particular,  \"zzxy \" is not special equivalent to  \"zzyx \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"abc \", \"acb \", \"bac \", \"bca \", \"cab \", \"cba \"\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 20`\n*   `words[i]` consist of lowercase English letters.\n*   All the strings are of the same length.",
          "output": "from collections import defaultdict\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef find_nodes_at_distance_k(root, target_val, k):\n    if k < 0:\n        return []\n\n    parent_map = defaultdict(lambda: None)\n    visited = set()\n    target_node = initialize_parent_map(root, None, target_val, parent_map)\n\n    result = []\n    find_nodes_at_distance_k_helper(target_node, k, visited, parent_map, result)\n    return result\n\ndef initialize_parent_map(node, parent, target_val, parent_map):\n    if not node:\n        return None\n    if node.val == target_val:\n        return node\n\n    parent_map[node] = parent\n    left = initialize_parent_map(node.left, node, target_val, parent_map)\n    right = initialize_parent_map(node.right, node, target_val, parent_map)\n    return left if left else right\n\ndef find_nodes_at_distance_k_helper(node, k, visited, parent_map, result):\n    if not node or node in visited:\n        return\n\n    visited.add(node)\n    if k == 0:\n        result.append(node.val)\n        return\n\n    find_nodes_at_distance_k_helper(node.left, k-1, visited, parent_map, result)\n    find_nodes_at_distance_k_helper(node.right, k-1, visited, parent_map, result)\n    find_nodes_at_distance_k_helper(parent_map[node], k-1, visited, parent_map, result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _a list of all possible **full binary trees** with_ `n` _nodes_. Each node of each tree in the answer must have `Node.val == 0`.\n\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in **any order**.\n\nA **full binary tree** is a binary tree where each node has exactly `0` or `2` children.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7\n**Output:** \\[\\[0,0,0,null,null,0,0,null,null,0,0\\],\\[0,0,0,null,null,0,0,0,0\\],\\[0,0,0,0,0,0,0\\],\\[0,0,0,0,0,null,null,null,null,0,0\\],\\[0,0,0,0,0,null,null,0,0\\]\\]\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** \\[\\[0,0,0\\]\\]\n\n**Constraints:**\n\n*   `1 <= n <= 20`",
          "output": "import random\n\nclass Solution:\n\n    def __init__(self, n: int, blacklist: List[int]):\n        self.blacklist_map = {}\n        self.reduced_n = n - len(blacklist)\n\n        for b in blacklist:\n            if b < n:\n                self.blacklist_map[b] = -1\n\n        for b in blacklist:\n            if b >= self.reduced_n:\n                continue\n            while n - 1 in self.blacklist_map:\n                n -= 1\n            self.blacklist_map[b] = n - 1\n            n -= 1\n\n    def pick(self) -> int:\n        random_int = random.randint(0, self.reduced_n - 1)\n        return self.blacklist_map.get(random_int, random_int)\n"
     },
     {
          "instruction": "Write python code for this problem: Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n\nImplement the `FreqStack` class:\n\n*   `FreqStack()` constructs an empty frequency stack.\n*   `void push(int val)` pushes an integer `val` onto the top of the stack.\n*   `int pop()` removes and returns the most frequent element in the stack.\n    *   If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"FreqStack \",  \"push \",  \"push \",  \"push \",  \"push \",  \"push \",  \"push \",  \"pop \",  \"pop \",  \"pop \",  \"pop \"\\]\n\\[\\[\\], \\[5\\], \\[7\\], \\[5\\], \\[7\\], \\[4\\], \\[5\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, null, null, null, null, 5, 7, 5, 4\\]\n\n**Explanation**\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is \\[5\\]\nfreqStack.push(7); // The stack is \\[5,7\\]\nfreqStack.push(5); // The stack is \\[5,7,5\\]\nfreqStack.push(7); // The stack is \\[5,7,5,7\\]\nfreqStack.push(4); // The stack is \\[5,7,5,7,4\\]\nfreqStack.push(5); // The stack is \\[5,7,5,7,4,5\\]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes \\[5,7,5,7,4\\].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes \\[5,7,5,4\\].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes \\[5,7,4\\].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes \\[5,7\\].\n\n**Constraints:**\n\n*   `0 <= val <= 109`\n*   At most `2 * 104` calls will be made to `push` and `pop`.\n*   It is guaranteed that there will be at least one element in the stack before calling `pop`.",
          "output": "from collections import deque\n\ndef shortestPathAllKeys(grid):\n    m, n, steps, k, x, y, mask = len(grid), len(grid[0]), 0, 0, -1, -1, 0\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '@':\n                x, y = i, j\n            elif 'a' <= grid[i][j] <= 'f':\n                k = max(k, ord(grid[i][j]) - ord('a') + 1)\n\n    q = deque([(x, y, 0)])\n    visited = {(x, y, mask)}\n\n    dirs = [(-1, 0), (1, 0), (0, 1), (0, -1)]\n\n    while q:\n        qs = len(q)\n        for sz in range(qs):\n            x, y, mask = q.popleft()\n\n            if mask == (1 << k) - 1:\n                return steps\n\n            for dx, dy in dirs:\n                nx, ny, nmask = x + dx, y + dy, mask\n\n                if 0 <= nx < m and 0 <= ny < n:\n                    c = grid[nx][ny]\n                    if 'A' <= c <= 'F' and not nmask & (1 << (ord(c) - ord('A'))):\n                        continue\n                    if 'a' <= c <= 'f':\n                        nmask |= (1 << (ord(c) - ord('a')))\n\n                    if (nx, ny, nmask) in visited:\n                        continue\n\n                    visited.add((nx, ny, nmask))\n                    q.append((nx, ny, nmask))\n\n        steps += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: An array is **monotonic** if it is either monotone increasing or monotone decreasing.\n\nAn array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`.\n\nGiven an integer array `nums`, return `true` _if the given array is monotonic, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,2,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** nums = \\[6,5,4,4\\]\n**Output:** true\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-105 <= nums[i] <= 105`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        return max(maxDepth(node.left), maxDepth(node.right)) + 1\n\ndef subtreeWithAllDeepest(root):\n    if root is None:\n        return None\n\n    leftDepth = maxDepth(root.left)\n    rightDepth = maxDepth(root.right)\n\n    if leftDepth == rightDepth:\n        return root\n\n    if leftDepth > rightDepth:\n        return subtreeWithAllDeepest(root.left)\n    else:\n        return subtreeWithAllDeepest(root.right)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree, rearrange the tree in **in-order** so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,3,6,2,4,null,8,1,null,null,null,7,9\\]\n**Output:** \\[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9\\]\n\n**Example 2:**\n\n**Input:** root = \\[5,1,7\\]\n**Output:** \\[1,null,5,null,7\\]\n\n**Constraints:**\n\n*   The number of nodes in the given tree will be in the range `[1, 100]`.\n*   `0 <= Node.val <= 1000`",
          "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef prime_palindrome(n):\n    while True:\n        if is_prime(n) and is_palindrome(n):\n            return n\n        n += 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, return _the number of distinct bitwise ORs of all the non-empty subarrays of_ `arr`.\n\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[0\\]\n**Output:** 1\n**Explanation:** There is only one possible result: 0.\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,2\\]\n**Output:** 3\n**Explanation:** The possible subarrays are \\[1\\], \\[1\\], \\[2\\], \\[1, 1\\], \\[1, 2\\], \\[1, 1, 2\\].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,4\\]\n**Output:** 6\n**Explanation:** The possible results are 1, 2, 3, 4, 6, and 7.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 5 * 104`\n*   `0 <= arr[i] <= 109`",
          "output": "def transpose(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    result = [[0] * rows for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            result[j][i] = matrix[i][j]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and an integer `k`. You can choose one of the first `k` letters of `s` and append it at the end of the string..\n\nReturn _the lexicographically smallest string you could have after applying the mentioned step any number of moves_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"cba \", k = 1\n**Output:**  \"acb \"\n**Explanation:** \nIn the first move, we move the 1st character 'c' to the end, obtaining the string  \"bac \".\nIn the second move, we move the 1st character 'b' to the end, obtaining the final result  \"acb \".\n\n**Example 2:**\n\n**Input:** s =  \"baaca \", k = 3\n**Output:**  \"aaabc \"\n**Explanation:** \nIn the first move, we move the 1st character 'b' to the end, obtaining the string  \"aacab \".\nIn the second move, we move the 3rd character 'c' to the end, obtaining the final result  \"aaabc \".\n\n**Constraints:**\n\n*   `1 <= k <= s.length <= 1000`\n*   `s` consist of lowercase English letters.",
          "output": "def longest_distance(n):\n    last = -1\n    longest = 0\n    i = 0\n    while n:\n        if n & 1:\n            if last >= 0:\n                longest = max(longest, i - last)\n            last = i\n        n >>= 1\n        i += 1\n    return longest\n"
     },
     {
          "instruction": "Write python code for this problem: We can use run-length encoding (i.e., **RLE**) to encode a sequence of integers. In a run-length encoded array of even length `encoding` (**0-indexed**), for all even `i`, `encoding[i]` tells us the number of times that the non-negative integer value `encoding[i + 1]` is repeated in the sequence.\n\n*   For example, the sequence `arr = [8,8,8,5,5]` can be encoded to be `encoding = [3,8,2,5]`. `encoding = [3,8,0,9,2,5]` and `encoding = [2,8,1,8,2,5]` are also valid **RLE** of `arr`.\n\nGiven a run-length encoded array, design an iterator that iterates through it.\n\nImplement the `RLEIterator` class:\n\n*   `RLEIterator(int[] encoded)` Initializes the object with the encoded array `encoded`.\n*   `int next(int n)` Exhausts the next `n` elements and returns the last element exhausted in this way. If there is no element left to exhaust, return `-1` instead.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"RLEIterator \",  \"next \",  \"next \",  \"next \",  \"next \"\\]\n\\[\\[\\[3, 8, 0, 9, 2, 5\\]\\], \\[2\\], \\[1\\], \\[1\\], \\[2\\]\\]\n**Output**\n\\[null, 8, 8, 5, -1\\]\n\n**Explanation**\nRLEIterator rLEIterator = new RLEIterator(\\[3, 8, 0, 9, 2, 5\\]); // This maps to the sequence \\[8,8,8,5,5\\].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now \\[8, 5, 5\\].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now \\[5, 5\\].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now \\[5\\].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.\n\n**Constraints:**\n\n*   `2 <= encoding.length <= 1000`\n*   `encoding.length` is even.\n*   `0 <= encoding[i] <= 109`\n*   `1 <= n <= 109`\n*   At most `1000` calls will be made to `next`.",
          "output": "from itertools import permutations as perm\n\ndef reorderedPowerOf2(n):\n    for p in set(perm(str(n))):\n        if p[0] != '0' and (bin(int(''.join(p))).count('1') == 1):\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Design an algorithm that collects daily price quotes for some stock and returns **the span** of that stock's price for the current day.\n\nThe **span** of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.\n\n*   For example, if the prices of the stock in the last four days is `[7,2,1,2]` and the price of the stock today is `2`, then the span of today is `4` because starting from today, the price of the stock was less than or equal `2` for `4` consecutive days.\n*   Also, if the prices of the stock in the last four days is `[7,34,1,2]` and the price of the stock today is `8`, then the span of today is `3` because starting from today, the price of the stock was less than or equal `8` for `3` consecutive days.\n\nImplement the `StockSpanner` class:\n\n*   `StockSpanner()` Initializes the object of the class.\n*   `int next(int price)` Returns the **span** of the stock's price given that today's price is `price`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"StockSpanner \",  \"next \",  \"next \",  \"next \",  \"next \",  \"next \",  \"next \",  \"next \"\\]\n\\[\\[\\], \\[100\\], \\[80\\], \\[60\\], \\[70\\], \\[60\\], \\[75\\], \\[85\\]\\]\n**Output**\n\\[null, 1, 1, 1, 2, 1, 4, 6\\]\n\n**Explanation**\nStockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80);  // return 1\nstockSpanner.next(60);  // return 1\nstockSpanner.next(70);  // return 2\nstockSpanner.next(60);  // return 1\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85);  // return 6\n\n**Constraints:**\n\n*   `1 <= price <= 105`\n*   At most `104` calls will be made to `next`.",
          "output": "from collections import defaultdict\nfrom sortedcontainers import SortedList\n\ndef advantageCount(nums1, nums2):\n    d = defaultdict(int)\n    sorted_nums1 = SortedList(nums1)\n    res = []\n    \n    for num in nums2:\n        i = sorted_nums1.bisect_right(num)\n        if i == len(sorted_nums1):\n            i = 0\n        res.append(sorted_nums1.pop(i))\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of `digits` which is sorted in **non-decreasing** order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`.\n\nReturn _the number of positive integers that can be generated_ that are less than or equal to a given integer `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** digits = \\[ \"1 \", \"3 \", \"5 \", \"7 \"\\], n = 100\n**Output:** 20\n**Explanation:** \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n\n**Example 2:**\n\n**Input:** digits = \\[ \"1 \", \"4 \", \"9 \"\\], n = 1000000000\n**Output:** 29523\n**Explanation:** \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n\n**Example 3:**\n\n**Input:** digits = \\[ \"7 \"\\], n = 8\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= digits.length <= 9`\n*   `digits[i].length == 1`\n*   `digits[i]` is a digit from `'1'` to `'9'`.\n*   All the values in `digits` are **unique**.\n*   `digits` is sorted in **non-decreasing** order.\n*   `1 <= n <= 109`",
          "output": "import heapq\n\ndef minRefuelStops(target: int, startFuel: int, stations: List[List[int]]) -> int:\n    i, stops, curFuel = 0, 0, startFuel\n    pq = []\n    while curFuel < target:\n        while i < len(stations) and stations[i][0] <= curFuel:\n            heapq.heappush(pq, -stations[i][1])\n            i += 1\n        if not pq: return -1\n        curFuel += -heapq.heappop(pq)\n        stops += 1\n    return stops\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` of length `n` where `s[i]` is either:\n\n*   `'D'` means decreasing, or\n*   `'I'` means increasing.\n\nA permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` is called a **valid permutation** if for all valid `i`:\n\n*   If `s[i] == 'D'`, then `perm[i] > perm[i + 1]`, and\n*   If `s[i] == 'I'`, then `perm[i] < perm[i + 1]`.\n\nReturn _the number of **valid permutations**_ `perm`. Since the answer may be large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"DID \"\n**Output:** 5\n**Explanation:** The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n\n**Example 2:**\n\n**Input:** s =  \"D \"\n**Output:** 1\n\n**Constraints:**\n\n*   `n == s.length`\n*   `1 <= n <= 200`\n*   `s[i]` is either `'I'` or `'D'`.",
          "output": "def rand7(): # Given API\n    pass\n\ndef rand10():\n    result = 41\n    while result > 40:\n        result = (rand7() - 1) * 7 + rand7()\n    return result % 10 + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array `fruits` where `fruits[i]` is the **type** of fruit the `ith` tree produces.\n\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n\n*   You only have **two** baskets, and each basket can only hold a **single type** of fruit. There is no limit on the amount of fruit each basket can hold.\n*   Starting from any tree of your choice, you must pick **exactly one fruit** from **every** tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\n*   Once you reach a tree with fruit that cannot fit in your baskets, you must stop.\n\nGiven the integer array `fruits`, return _the **maximum** number of fruits you can pick_.\n\n",
          "input": "**Example 1:**\n\n**Input:** fruits = \\[1,2,1\\]\n**Output:** 3\n**Explanation:** We can pick from all 3 trees.\n\n**Example 2:**\n\n**Input:** fruits = \\[0,1,2,2\\]\n**Output:** 3\n**Explanation:** We can pick from trees \\[1,2,2\\].\nIf we had started at the first tree, we would only pick from trees \\[0,1\\].\n\n**Example 3:**\n\n**Input:** fruits = \\[1,2,3,2,2\\]\n**Output:** 4\n**Explanation:** We can pick from trees \\[2,3,2,2\\].\nIf we had started at the first tree, we would only pick from trees \\[1,2\\].\n\n**Constraints:**\n\n*   `1 <= fruits.length <= 105`\n*   `0 <= fruits[i] < fruits.length`",
          "output": "def leafSimilar(root1, root2):\n    def getLeaves(node):\n        if not node:\n            return []\n        if not node.left and not node.right:\n            return [node.val]\n        return getLeaves(node.left) + getLeaves(node.right)\n\n    return getLeaves(root1) == getLeaves(root2)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers.\n\nReturn _**any array** that satisfies this condition_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,2,4\\]\n**Output:** \\[2,4,3,1\\]\n**Explanation:** The outputs \\[4,2,3,1\\], \\[2,4,1,3\\], and \\[4,2,1,3\\] would also be accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `0 <= nums[i] <= 5000`",
          "output": "def lenLongestFibSubseq(arr):\n    index = {x: i for i, x in enumerate(arr)}\n\n    longest = dict()\n    ans = 0\n\n    for k, z in enumerate(arr):\n        for j, y in enumerate(arr[:k]):\n            i = index.get(z - y, None)\n            if i is not None and i < j:\n                longest[j, k] = longest.get((i, j), 1) + 1\n                ans = max(ans, longest[j, k] + 1)\n\n    return ans if ans >= 3 else 0\n"
     },
     {
          "instruction": "Write python code for this problem: Let's say a positive integer is a **super-palindrome** if it is a palindrome, and it is also the square of a palindrome.\n\nGiven two positive integers `left` and `right` represented as strings, return _the number of **super-palindromes** integers in the inclusive range_ `[left, right]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** left =  \"4 \", right =  \"1000 \"\n**Output:** 4\n**Explanation**: 4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 \\* 26 = 676, but 26 is not a palindrome.\n\n**Example 2:**\n\n**Input:** left =  \"1 \", right =  \"2 \"\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= left.length, right.length <= 18`\n*   `left` and `right` consist of only digits.\n*   `left` and `right` cannot have leading zeros.\n*   `left` and `right` represent integers in the range `[1, 1018 - 1]`.\n*   `left` is less than or equal to `right`.",
          "output": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        dx = [0, 1, 0, -1]\n        dy = [1, 0, -1, 0]\n        x = y = di = 0\n        obstacleSet = set(map(tuple, obstacles))\n\n        ans = 0\n        for cmd in commands:\n            if cmd == -2:\n                di = (di - 1) % 4\n            elif cmd == -1:\n                di = (di + 1) % 4\n            else:\n                for k in range(cmd):\n                    nx = x + dx[di]\n                    ny = y + dy[di]\n                    if (nx, ny) not in obstacleSet:\n                        x = nx\n                        y = ny\n                        ans = max(ans, x * x + y * y)\n\n        return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,1,2,4\\]\n**Output:** 17\n**Explanation:** \nSubarrays are \\[3\\], \\[1\\], \\[2\\], \\[4\\], \\[3,1\\], \\[1,2\\], \\[2,4\\], \\[3,1,2\\], \\[1,2,4\\], \\[3,1,2,4\\]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.\n\n**Example 2:**\n\n**Input:** arr = \\[11,81,94,43,3\\]\n**Output:** 444\n\n**Constraints:**\n\n*   `1 <= arr.length <= 3 * 104`\n*   `1 <= arr[i] <= 3 * 104`",
          "output": "def minEatingSpeed(piles, h):\n    left, right = 1, max(piles)\n    while left < right:\n        mid = left + (right - left) // 2\n        totalHours = sum((pile + mid - 1) // mid for pile in piles)\n        if totalHours > h:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `k`.\n\nIn one operation, you can choose any index `i` where `0 <= i < nums.length` and change `nums[i]` to `nums[i] + x` where `x` is an integer from the range `[-k, k]`. You can apply this operation **at most once** for each index `i`.\n\nThe **score** of `nums` is the difference between the maximum and minimum elements in `nums`.\n\nReturn _the minimum **score** of_ `nums` _after applying the mentioned operation at most once for each index in it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1\\], k = 0\n**Output:** 0\n**Explanation:** The score is max(nums) - min(nums) = 1 - 1 = 0.\n\n**Example 2:**\n\n**Input:** nums = \\[0,10\\], k = 2\n**Output:** 6\n**Explanation:** Change nums to be \\[2, 8\\]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,6\\], k = 3\n**Output:** 0\n**Explanation:** Change nums to be \\[4, 4, 4\\]. The score is max(nums) - min(nums) = 4 - 4 = 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `0 <= nums[i] <= 104`\n*   `0 <= k <= 104`",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef middleNode(head):\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n\n    return slow\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` integer matrix `board` where the cells are labeled from `1` to `n2` in a [**Boustrophedon style**](https://en.wikipedia.org/wiki/Boustrophedon) starting from the bottom left of the board (i.e. `board[n - 1][0]`) and alternating direction each row.\n\nYou start on square `1` of the board. In each move, starting from square `curr`, do the following:\n\n*   Choose a destination square `next` with a label in the range `[curr + 1, min(curr + 6, n2)]`.\n    *   This choice simulates the result of a standard **6-sided die roll**: i.e., there are always at most 6 destinations, regardless of the size of the board.\n*   If `next` has a snake or ladder, you **must** move to the destination of that snake or ladder. Otherwise, you move to `next`.\n*   The game ends when you reach the square `n2`.\n\nA board square on row `r` and column `c` has a snake or ladder if `board[r][c] != -1`. The destination of that snake or ladder is `board[r][c]`. Squares `1` and `n2` do not have a snake or ladder.\n\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do **not** follow the subsequent snake or ladder.\n\n*   For example, suppose the board is `[[-1,4],[-1,3]]`, and on the first move, your destination square is `2`. You follow the ladder to square `3`, but do **not** follow the subsequent ladder to `4`.\n\nReturn _the least number of moves required to reach the square_ `n2`_. If it is not possible to reach the square, return_ `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[-1,-1,-1,-1,-1,-1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[-1,35,-1,-1,13,-1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[-1,15,-1,-1,-1,-1\\]\\]\n**Output:** 4\n**Explanation:** \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4.\n\n**Example 2:**\n\n**Input:** board = \\[\\[-1,-1\\],\\[-1,3\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `n == board.length == board[i].length`\n*   `2 <= n <= 20`\n*   `board[i][j]` is either `-1` or in the range `[1, n2]`.\n*   The squares labeled `1` and `n2` do not have any ladders or snakes.",
          "output": "def aliceWins(piles):\n    n = len(piles)\n    dp = [[0] * n for _ in range(n)]\n    for gap in range(n):\n        for i in range(n - gap):\n            j = i + gap\n            x = dp[i + 2][j] if i + 2 <= j else 0\n            y = dp[i + 1][j - 1] if i + 1 <= j - 1 else 0\n            z = dp[i][j - 2] if i <= j - 2 else 0\n            dp[i][j] = max(piles[i] + min(x, y), piles[j] + min(y, z))\n    sum_of_piles = sum(piles)\n    return dp[0][n - 1] > (sum_of_piles - dp[0][n - 1])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `k`.\n\nFor each index `i` where `0 <= i < nums.length`, change `nums[i]` to be either `nums[i] + k` or `nums[i] - k`.\n\nThe **score** of `nums` is the difference between the maximum and minimum elements in `nums`.\n\nReturn _the minimum **score** of_ `nums` _after changing the values at each index_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1\\], k = 0\n**Output:** 0\n**Explanation:** The score is max(nums) - min(nums) = 1 - 1 = 0.\n\n**Example 2:**\n\n**Input:** nums = \\[0,10\\], k = 2\n**Output:** 6\n**Explanation:** Change nums to be \\[2, 8\\]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,6\\], k = 3\n**Output:** 3\n**Explanation:** Change nums to be \\[4, 6, 3\\]. The score is max(nums) - min(nums) = 6 - 3 = 3.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `0 <= nums[i] <= 104`\n*   `0 <= k <= 104`",
          "output": "def nthMagicalNumber(n, a, b):\n    mod = 1000000007\n    lcm = a * b // gcd(a, b)\n    left, right = 1, 10**14\n    while left < right:\n        mid = left + (right - left) // 2\n        if (mid // a + mid // b - mid // lcm) < n:\n            left = mid + 1\n        else:\n            right = mid\n    return left % mod\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `persons` and `times`. In an election, the `ith` vote was cast for `persons[i]` at time `times[i]`.\n\nFor each query at a time `t`, find the person that was leading the election at time `t`. Votes cast at time `t` will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\n\nImplement the `TopVotedCandidate` class:\n\n*   `TopVotedCandidate(int[] persons, int[] times)` Initializes the object with the `persons` and `times` arrays.\n*   `int q(int t)` Returns the number of the person that was leading the election at time `t` according to the mentioned rules.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"TopVotedCandidate \",  \"q \",  \"q \",  \"q \",  \"q \",  \"q \",  \"q \"\\]\n\\[\\[\\[0, 1, 1, 0, 0, 1, 0\\], \\[0, 5, 10, 15, 20, 25, 30\\]\\], \\[3\\], \\[12\\], \\[25\\], \\[15\\], \\[24\\], \\[8\\]\\]\n**Output**\n\\[null, 0, 1, 1, 0, 0, 1\\]\n\n**Explanation**\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate(\\[0, 1, 1, 0, 0, 1, 0\\], \\[0, 5, 10, 15, 20, 25, 30\\]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are \\[0\\], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are \\[0,1,1\\], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are \\[0,1,1,0,0,1\\], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1\n\n**Constraints:**\n\n*   `1 <= persons.length <= 5000`\n*   `times.length == persons.length`\n*   `0 <= persons[i] < persons.length`\n*   `0 <= times[i] <= 109`\n*   `times` is sorted in a strictly increasing order.\n*   `times[0] <= t <= 109`\n*   At most `104` calls will be made to `q`.",
          "output": "def profitableSchemes(n, minProfit, group, profit):\n    dp = [[0] * (minProfit + 1) for _ in range(n + 1)]\n    mod = 10**9 + 7\n    dp[0][0] = 1\n    for i in range(len(group)):\n        for j in range(n, group[i] - 1, -1):\n            for k in range(minProfit, -1, -1):\n                dp[j][k] = (dp[j][k] + dp[j - group[i]][max(0, k - profit[i])]) % mod\n    return sum(dp[i][minProfit] for i in range(1, n + 1)) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums`, sort the array in ascending order and return it.\n\nYou must solve the problem **without using any built-in** functions in `O(nlog(n))` time complexity and with the smallest space complexity possible.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,2,3,1\\]\n**Output:** \\[1,2,3,5\\]\n**Explanation:** After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n\n**Example 2:**\n\n**Input:** nums = \\[5,1,1,2,0,0\\]\n**Output:** \\[0,0,1,1,2,5\\]\n**Explanation:** Note that the values of nums are not necessairly unique.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `-5 * 104 <= nums[i] <= 5 * 104`",
          "output": "import random\nfrom bisect import bisect_left\n\nclass Solution:\n\n    def __init__(self, w: List[int]):\n        self.prefix_sum = []\n        for weight in w:\n            previous = self.prefix_sum[-1] if self.prefix_sum else 0\n            self.prefix_sum.append(previous + weight)\n\n    def pickIndex(self) -> int:\n        num = random.random() * self.prefix_sum[-1]\n        return bisect_left(self.prefix_sum, num)\n"
     },
     {
          "instruction": "Write python code for this problem: A game on an **undirected** graph is played by two players, Mouse and Cat, who alternate turns.\n\nThe graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph.\n\nThe mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`.\n\nDuring each player's turn, they **must** travel along one edge of the graph that meets where they are. For example, if the Mouse is at node 1, it **must** travel to any node in `graph[1]`.\n\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\n\nThen, the game can end in three ways:\n\n*   If ever the Cat occupies the same node as the Mouse, the Cat wins.\n*   If ever the Mouse reaches the Hole, the Mouse wins.\n*   If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\n\nGiven a `graph`, and assuming both players play optimally, return\n\n*   `1` if the mouse wins the game,\n*   `2` if the cat wins the game, or\n*   `0` if the game is a draw.\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[2,5\\],\\[3\\],\\[0,4,5\\],\\[1,4,5\\],\\[2,3\\],\\[0,2,3\\]\\]\n**Output:** 0\n\n**Example 2:**\n\n**Input:** graph = \\[\\[1,3\\],\\[0\\],\\[3\\],\\[0,2\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `3 <= graph.length <= 50`\n*   `1 <= graph[i].length < graph.length`\n*   `0 <= graph[i][j] < graph.length`\n*   `graph[i][j] != i`\n*   `graph[i]` is unique.\n*   The mouse and the cat can always move.",
          "output": "import random\n\nclass Solution:\n    def __init__(self, m, n):\n        self.grid = [[0] * n for _ in range(m)]\n        self.zero_count = m * n\n\n    def pick(self):\n        index = random.randrange(self.zero_count)\n\n        for i, row in enumerate(self.grid):\n            for j, cell in enumerate(row):\n                if cell == 0:\n                    if index == 0:\n                        self.grid[i][j] = 1\n                        self.zero_count -= 1\n                        return (i, j)\n                    index -= 1\n        return (-1, -1)  # Should not happen\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `deck` where `deck[i]` represents the number written on the `ith` card.\n\nPartition the cards into **one or more groups** such that:\n\n*   Each group has **exactly** `x` cards where `x > 1`, and\n*   All the cards in one group have the same integer written on them.\n\nReturn `true` _if such partition is possible, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** deck = \\[1,2,3,4,4,3,2,1\\]\n**Output:** true\n**Explanation**: Possible partition \\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\].\n\n**Example 2:**\n\n**Input:** deck = \\[1,1,1,2,2,2,3,3\\]\n**Output:** false\n**Explanation**: No possible partition.\n\n**Constraints:**\n\n*   `1 <= deck.length <= 104`\n*   `0 <= deck[i] < 104`",
          "output": "import random\nfrom bisect import bisect_left\n\nclass Solution:\n    def __init__(self, rects):\n        self.rects = rects\n        self.areas = []\n        self.total_area = 0\n        for rect in rects:\n            area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)\n            self.total_area += area\n            self.areas.append(self.total_area)\n\n    def pick(self):\n        random_area = random.randint(0, self.total_area - 1)\n        rect_index = bisect_left(self.areas, random_area + 1)\n\n        x = random.randint(self.rects[rect_index][0], self.rects[rect_index][2])\n        y = random.randint(self.rects[rect_index][1], self.rects[rect_index][3])\n\n        return [x, y]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, partition it into two (contiguous) subarrays `left` and `right` so that:\n\n*   Every element in `left` is less than or equal to every element in `right`.\n*   `left` and `right` are non-empty.\n*   `left` has the smallest possible size.\n\nReturn _the length of_ `left` _after such a partitioning_.\n\nTest cases are generated such that partitioning exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,0,3,8,6\\]\n**Output:** 3\n**Explanation:** left = \\[5,0,3\\], right = \\[8,6\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,0,6,12\\]\n**Output:** 4\n**Explanation:** left = \\[1,1,1,0\\], right = \\[6,12\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 105`\n*   `0 <= nums[i] <= 106`\n*   There is at least one valid answer for the given input.",
          "output": "import random\nimport math\n\nclass Solution:\n\n    def __init__(self, radius: float, x_center: float, y_center: float):\n        self.radius = radius\n        self.x_center = x_center\n        self.y_center = y_center\n\n    def randPoint(self):\n        angle = random.random() * 2 * math.pi\n        r = math.sqrt(random.random()) * self.radius\n        return [self.x_center + r * math.cos(angle), self.y_center + r * math.sin(angle)]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two string arrays `words1` and `words2`.\n\nA string `b` is a **subset** of string `a` if every letter in `b` occurs in `a` including multiplicity.\n\n*   For example, `\"wrr \"` is a subset of `\"warrior \"` but is not a subset of `\"world \"`.\n\nA string `a` from `words1` is **universal** if for every string `b` in `words2`, `b` is a subset of `a`.\n\nReturn an array of all the **universal** strings in `words1`. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** words1 = \\[ \"amazon \", \"apple \", \"facebook \", \"google \", \"leetcode \"\\], words2 = \\[ \"e \", \"o \"\\]\n**Output:** \\[ \"facebook \", \"google \", \"leetcode \"\\]\n\n**Example 2:**\n\n**Input:** words1 = \\[ \"amazon \", \"apple \", \"facebook \", \"google \", \"leetcode \"\\], words2 = \\[ \"l \", \"e \"\\]\n**Output:** \\[ \"apple \", \"google \", \"leetcode \"\\]\n\n**Constraints:**\n\n*   `1 <= words1.length, words2.length <= 104`\n*   `1 <= words1[i].length, words2[i].length <= 10`\n*   `words1[i]` and `words2[i]` consist only of lowercase English letters.\n*   All the strings of `words1` are **unique**.",
          "output": "def find_kth_character(s: str, k: int) -> str:\n    n = len(s)\n    size = 0\n\n    for c in s:\n        if c.isdigit():\n            size = size * int(c)\n        else:\n            size += 1\n\n    for i in range(n - 1, -1, -1):\n        c = s[i]\n        k %= size\n        if k == 0 and not c.isdigit():\n            return c\n\n        if c.isdigit():\n            size //= int(c)\n        else:\n            size -= 1\n\n    return '-'\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, reverse the string according to the following rules:\n\n*   All the characters that are not English letters remain in the same position.\n*   All the English letters (lowercase or uppercase) should be reversed.\n\nReturn `s` _after reversing it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"ab-cd\"\n**Output:** \"dc-ba\"\n\n**Example 2:**\n\n**Input:** s = \"a-bC-dEf-ghIj\"\n**Output:** \"j-Ih-gfE-dCba\"\n\n**Example 3:**\n\n**Input:** s = \"Test1ng-Leet=code-Q!\"\n**Output:** \"Qedo1ct-eeLg=ntse-T!\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of characters with ASCII values in the range `[33, 122]`.\n*   `s` does not contain `'\\ \"'` or `'\\\\'`.This problem is exactly like reversing a normal string except that there are certain characters that we have to simply skip. That should be easy enough to do if you know how to reverse a string using the two-pointer approach.",
          "output": "def num_rescue_boats(people, limit):\n    people.sort()\n    left, right = 0, len(people) - 1\n    boats = 0\n    while left <= right:\n        if people[left] + people[right] <= limit:\n            left += 1\n        right -= 1\n        boats += 1\n    return boats\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **circular integer array** `nums` of length `n`, return _the maximum possible sum of a non-empty **subarray** of_ `nums`.\n\nA **circular array** means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`.\n\nA **subarray** may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`, there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,-2,3,-2\\]\n**Output:** 3\n**Explanation:** Subarray \\[3\\] has maximum sum 3.\n\n**Example 2:**\n\n**Input:** nums = \\[5,-3,5\\]\n**Output:** 10\n**Explanation:** Subarray \\[5,5\\] has maximum sum 5 + 5 = 10.\n\n**Example 3:**\n\n**Input:** nums = \\[-3,-2,-3\\]\n**Output:** -2\n**Explanation:** Subarray \\[-2\\] has maximum sum -2.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 3 * 104`\n*   `-3 * 104 <= nums[i] <= 3 * 104`For those of you who are familiar with the Kadane's algorithm, think in terms of that. For the newbies, Kadane's algorithm is used to finding the maximum sum subarray from a given array. This problem is a twist on that idea and it is advisable to read up on that algorithm first before starting this problem. Unless you already have a great algorithm brewing up in your mind in which case, go right ahead! What is an alternate way of representing a circular array so that it appears to be a straight array?\r\nEssentially, there are two cases of this problem that we need to take care of. Let's look at the figure below to understand those two cases: The first case can be handled by the good old Kadane's algorithm. However, is there a smarter way of going about handling the second case as well?",
          "output": "from heapq import heappush, heappop\n\ndef reachableNodes(edges, maxMoves, n):\n    graph = [[] for _ in range(n)]\n    for u, v, cnt in edges:\n        graph[u].append((v, cnt + 1))\n        graph[v].append((u, cnt + 1))\n\n    visited = set()\n    pq = [(-maxMoves, 0)]\n\n    while pq:\n        moves_left, node = heappop(pq)\n\n        if node in visited:\n            continue\n        visited.add(node)\n\n        for next_node, moves_needed in graph[node]:\n            moves_left_after = moves_left - moves_needed\n            if next_node not in visited and moves_left_after > 0:\n                heappush(pq, (moves_left_after, next_node))\n\n    return len(visited)\n"
     },
     {
          "instruction": "Write python code for this problem: A **complete binary tree** is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\n\nImplement the `CBTInserter` class:\n\n*   `CBTInserter(TreeNode root)` Initializes the data structure with the `root` of the complete binary tree.\n*   `int insert(int v)` Inserts a `TreeNode` into the tree with value `Node.val == val` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`.\n*   `TreeNode get_root()` Returns the root node of the tree.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"CBTInserter \",  \"insert \",  \"insert \",  \"get\\_root \"\\]\n\\[\\[\\[1, 2\\]\\], \\[3\\], \\[4\\], \\[\\]\\]\n**Output**\n\\[null, 1, 2, \\[1, 2, 3, 4\\]\\]\n\n**Explanation**\nCBTInserter cBTInserter = new CBTInserter(\\[1, 2\\]);\ncBTInserter.insert(3);  // return 1\ncBTInserter.insert(4);  // return 2\ncBTInserter.get\\_root(); // return \\[1, 2, 3, 4\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree will be in the range `[1, 1000]`.\n*   `0 <= Node.val <= 5000`\n*   `root` is a complete binary tree.\n*   `0 <= val <= 5000`\n*   At most `104` calls will be made to `insert` and `get_root`.",
          "output": "def projectionArea(grid):\n    n = len(grid)\n    top, front, side = 0, 0, 0\n    for i in range(n):\n        max_front, max_side = 0, 0\n        for j in range(n):\n            if grid[i][j] > 0:\n                top += 1\n            max_front = max(max_front, grid[i][j])\n            max_side = max(max_side, grid[j][i])\n        front += max_front\n        side += max_side\n    return top + front + side\n"
     },
     {
          "instruction": "Write python code for this problem: Your music player contains `n` different songs. You want to listen to `goal` songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\n\n*   Every song is played **at least once**.\n*   A song can only be played again only if `k` other songs have been played.\n\nGiven `n`, `goal`, and `k`, return _the number of possible playlists that you can create_. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, goal = 3, k = 1\n**Output:** 6\n**Explanation:** There are 6 possible playlists: \\[1, 2, 3\\], \\[1, 3, 2\\], \\[2, 1, 3\\], \\[2, 3, 1\\], \\[3, 1, 2\\], and \\[3, 2, 1\\].\n\n**Example 2:**\n\n**Input:** n = 2, goal = 3, k = 0\n**Output:** 6\n**Explanation:** There are 6 possible playlists: \\[1, 1, 2\\], \\[1, 2, 1\\], \\[2, 1, 1\\], \\[2, 2, 1\\], \\[2, 1, 2\\], and \\[1, 2, 2\\].\n\n**Example 3:**\n\n**Input:** n = 2, goal = 3, k = 1\n**Output:** 2\n**Explanation:** There are 2 possible playlists: \\[1, 2, 1\\] and \\[2, 1, 2\\].\n\n**Constraints:**\n\n*   `0 <= k < n <= goal <= 100`",
          "output": "def uncommon_from_sentences(s1, s2):\n    word_count = {}\n    for word in (s1 + \" \" + s2).split():\n        word_count[word] = word_count.get(word, 0) + 1\n\n    return [key for key, val in word_count.items() if val == 1]\n"
     },
     {
          "instruction": "Write python code for this problem: A parentheses string is valid if and only if:\n\n*   It is the empty string,\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\n*   It can be written as `(A)`, where `A` is a valid string.\n\nYou are given a parentheses string `s`. In one move, you can insert a parenthesis at any position of the string.\n\n*   For example, if `s = \"())) \"`, you can insert an opening parenthesis to be `\"(**(**))) \"` or a closing parenthesis to be `\"())**)**) \"`.\n\nReturn _the minimum number of moves required to make_ `s` _valid_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"()) \"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** s =  \"((( \"\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'('` or `')'`.",
          "output": "def spiral_walk(rows, cols, rStart, cStart):\n    result = []\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    moves = rows * cols\n    r, c, dir = rStart, cStart, 0\n    \n    while len(result) < moves:\n        result.append([r, c])\n        r += dr[dir]\n        c += dc[dir]\n        \n        if r < 0 or r >= rows or c < 0 or c >= cols:\n            r -= dr[dir]\n            c -= dc[dir]\n            dir = (dir + 1) % 4\n            r += dr[dir]\n            c += dc[dir]\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums`, half of the integers in `nums` are **odd**, and the other half are **even**.\n\nSort the array so that whenever `nums[i]` is odd, `i` is **odd**, and whenever `nums[i]` is even, `i` is **even**.\n\nReturn _any answer array that satisfies this condition_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,2,5,7\\]\n**Output:** \\[4,5,2,7\\]\n**Explanation:** \\[4,7,2,5\\], \\[2,5,4,7\\], \\[2,7,4,5\\] would also have been accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3\\]\n**Output:** \\[2,3\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 2 * 104`\n*   `nums.length` is even.\n*   Half of the integers in `nums` are even.\n*   `0 <= nums[i] <= 1000`\n\n**Follow Up:** Could you solve it in-place?",
          "output": "from collections import defaultdict\n\n\ndef possible_bipartition(n, dislikes):\n    def dfs(person, group):\n        if person in groups:\n            return groups[person] == group\n        groups[person] = group\n        for other in dislike_list[person]:\n            if not dfs(other, -group):\n                return False\n        return True\n\n    groups = {}\n    dislike_list = defaultdict(list)\n    for p1, p2 in dislikes:\n        dislike_list[p1].append(p2)\n        dislike_list[p2].append(p1)\n\n    for person in range(1, n + 1):\n        if person not in groups and not dfs(person, 1):\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`.\n\nAs the answer can be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,1,2,2,3,3,4,4,5,5\\], target = 8\n**Output:** 20\n**Explanation:** \nEnumerating by the values (arr\\[i\\], arr\\[j\\], arr\\[k\\]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,2,2,2,2\\], target = 5\n**Output:** 12\n**Explanation:** \narr\\[i\\] = 1, arr\\[j\\] = arr\\[k\\] = 2 occurs 12 times:\nWe choose one 1 from \\[1,1\\] in 2 ways,\nand two 2s from \\[2,2,2,2\\] in 6 ways.\n\n**Example 3:**\n\n**Input:** arr = \\[2,1,3\\], target = 6\n**Output:** 1\n**Explanation:** (1, 2, 3) occured one time in the array so we return 1.\n\n**Constraints:**\n\n*   `3 <= arr.length <= 3000`\n*   `0 <= arr[i] <= 100`\n*   `0 <= target <= 300`",
          "output": "def min_moves(k, n):\n    if k == 1 or n == 0 or n == 1:\n        return n\n    \n    res = float('inf')\n    for i in range(1, n + 1):\n        temp = max(min_moves(k - 1, i - 1), min_moves(k, n - i))\n        res = min(res, temp)\n    \n    return res + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\nNote that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[1,1,0\\],\\[1,1,0\\],\\[0,0,1\\]\\], initial = \\[0,1\\]\n**Output:** 0\n\n**Example 2:**\n\n**Input:** graph = \\[\\[1,0,0\\],\\[0,1,0\\],\\[0,0,1\\]\\], initial = \\[0,2\\]\n**Output:** 0\n\n**Example 3:**\n\n**Input:** graph = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\], initial = \\[1,2\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `n == graph.length`\n*   `n == graph[i].length`\n*   `2 <= n <= 300`\n*   `graph[i][j]` is `0` or `1`.\n*   `graph[i][j] == graph[j][i]`\n*   `graph[i][i] == 1`\n*   `1 <= initial.length <= n`\n*   `0 <= initial[i] <= n - 1`\n*   All the integers in `initial` are **unique**.",
          "output": "def fair_candy_swap(aliceSizes, bobSizes):\n    aliceTotal, bobTotal = sum(aliceSizes), sum(bobSizes)\n    delta = (bobTotal - aliceTotal) // 2\n    for a in aliceSizes:\n        for b in bobSizes:\n            if a + delta == b:\n                return [a, b]\n    return []\n"
     },
     {
          "instruction": "Write python code for this problem: Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get _long pressed_, and the character will be typed 1 or more times.\n\nYou examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\n",
          "input": "**Example 1:**\n\n**Input:** name =  \"alex \", typed =  \"aaleex \"\n**Output:** true\n**Explanation:** 'a' and 'e' in 'alex' were long pressed.\n\n**Example 2:**\n\n**Input:** name =  \"saeed \", typed =  \"ssaaedd \"\n**Output:** false\n**Explanation:** 'e' must have been pressed twice, but it was not in the typed output.\n\n**Constraints:**\n\n*   `1 <= name.length, typed.length <= 1000`\n*   `name` and `typed` consist of only lowercase English letters.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def constructFromPrePost(self, pre, post):\n        def buildTree(preStart, preEnd, postStart, postEnd):\n            if preStart == preEnd:\n                return None\n\n            root = TreeNode(pre[preStart])\n\n            if preStart + 1 == preEnd:\n                return root\n\n            leftRoot = pre[preStart + 1]\n\n            leftSize = 0\n            for i in range(postStart, postEnd):\n                if post[i] == leftRoot:\n                    leftSize = i - postStart + 1\n                    break\n\n            root.left = buildTree(preStart + 1, preStart + 1 + leftSize, postStart, postStart + leftSize)\n            root.right = buildTree(preStart + 1 + leftSize, preEnd, postStart + leftSize, postEnd - 1)\n\n            return root\n\n        return buildTree(0, len(pre), 0, len(post))\n"
     },
     {
          "instruction": "Write python code for this problem: A binary string is monotone increasing if it consists of some number of `0`'s (possibly none), followed by some number of `1`'s (also possibly none).\n\nYou are given a binary string `s`. You can flip `s[i]` changing it from `0` to `1` or from `1` to `0`.\n\nReturn _the minimum number of flips to make_ `s` _monotone increasing_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"00110 \"\n**Output:** 1\n**Explanation:** We flip the last digit to get 00111.\n\n**Example 2:**\n\n**Input:** s =  \"010110 \"\n**Output:** 2\n**Explanation:** We flip to get 011111, or alternatively 000111.\n\n**Example 3:**\n\n**Input:** s =  \"00011000 \"\n**Output:** 2\n**Explanation:** We flip to get 00000000.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`.",
          "output": "def find_and_replace_patterns(words, pattern):\n    result = []\n    for word in words:\n        if len(word) != len(pattern): continue\n\n        w2p = {}\n        p2w = {}\n        matches = True\n        for cWord, cPattern in zip(word, pattern):\n            if cWord not in w2p: w2p[cWord] = cPattern\n            if cPattern not in p2w: p2w[cPattern] = cWord\n\n            if w2p[cWord] != cPattern or p2w[cPattern] != cWord:\n                matches = False\n                break\n\n        if matches: result.append(word)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `arr` which consists of only zeros and ones, divide the array into **three non-empty parts** such that all of these parts represent the same binary value.\n\nIf it is possible, return any `[i, j]` with `i + 1 < j`, such that:\n\n*   `arr[0], arr[1], ..., arr[i]` is the first part,\n*   `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and\n*   `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.\n*   All three parts have equal binary values.\n\nIf it is not possible, return `[-1, -1]`.\n\nNote that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros **are allowed**, so `[0,1,1]` and `[1,1]` represent the same value.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,0,1,0,1\\]\n**Output:** \\[0,3\\]\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,0,1,1\\]\n**Output:** \\[-1,-1\\]\n\n**Example 3:**\n\n**Input:** arr = \\[1,1,0,0,1\\]\n**Output:** \\[0,2\\]\n\n**Constraints:**\n\n*   `3 <= arr.length <= 3 * 104`\n*   `arr[i]` is `0` or `1`",
          "output": "def sum_of_widths(nums):\n    MOD = 10**9 + 7\n    nums.sort()\n    c, res = 1, 0\n    n = len(nums)\n\n    for i in range(n):\n        res = (res + (nums[i] - nums[n - i - 1]) * c) % MOD\n        c = c * 2 % MOD\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops.\n\nWe will remove **exactly one node** from `initial`, **completely removing it and any connections from this node to any other node**.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\n",
          "input": "**Example 1:**\n\n**Input:** graph = \\[\\[1,1,0\\],\\[1,1,0\\],\\[0,0,1\\]\\], initial = \\[0,1\\]\n**Output:** 0\n\n**Example 2:**\n\n**Input:** graph = \\[\\[1,1,0\\],\\[1,1,1\\],\\[0,1,1\\]\\], initial = \\[0,1\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** graph = \\[\\[1,1,0,0\\],\\[1,1,1,0\\],\\[0,1,1,1\\],\\[0,0,1,1\\]\\], initial = \\[0,1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `n == graph.length`\n*   `n == graph[i].length`\n*   `2 <= n <= 300`\n*   `graph[i][j]` is `0` or `1`.\n*   `graph[i][j] == graph[j][i]`\n*   `graph[i][i] == 1`\n*   `1 <= initial.length < n`\n*   `0 <= initial[i] <= n - 1`\n*   All the integers in `initial` are **unique**.",
          "output": "def surfaceArea(grid):\n    n = len(grid)\n    area = 0\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]:\n                area += 4 * grid[i][j] + 2\n                if i > 0:\n                    area -= 2 * min(grid[i][j], grid[i - 1][j])\n                if j > 0:\n                    area -= 2 * min(grid[i][j], grid[i][j - 1])\n\n    return area\n"
     },
     {
          "instruction": "Write python code for this problem: Every **valid email** consists of a **local name** and a **domain name**, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.\n\n*   For example, in `\"alice@leetcode.com \"`, `\"alice \"` is the **local name**, and `\"leetcode.com \"` is the **domain name**.\n\nIf you add periods `'.'` between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule **does not apply** to **domain names**.\n\n*   For example, `\"alice.z@leetcode.com \"` and `\"alicez@leetcode.com \"` forward to the same email address.\n\nIf you add a plus `'+'` in the **local name**, everything after the first plus sign **will be ignored**. This allows certain emails to be filtered. Note that this rule **does not apply** to **domain names**.\n\n*   For example, `\"m.y+name@email.com \"` will be forwarded to `\"my@email.com \"`.\n\nIt is possible to use both of these rules at the same time.\n\nGiven an array of strings `emails` where we send one email to each `emails[i]`, return _the number of different addresses that actually receive mails_.\n\n",
          "input": "**Example 1:**\n\n**Input:** emails = \\[ \"test.email+alex@leetcode.com \", \"test.e.mail+bob.cathy@leetcode.com \", \"testemail+david@lee.tcode.com \"\\]\n**Output:** 2\n**Explanation:**  \"testemail@leetcode.com \" and  \"testemail@lee.tcode.com \" actually receive mails.\n\n**Example 2:**\n\n**Input:** emails = \\[ \"a@leetcode.com \", \"b@leetcode.com \", \"c@leetcode.com \"\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= emails.length <= 100`\n*   `1 <= emails[i].length <= 100`\n*   `emails[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.\n*   Each `emails[i]` contains exactly one `'@'` character.\n*   All local and domain names are non-empty.\n*   Local names do not start with a `'+'` character.\n*   Domain names end with the `\".com \"` suffix.",
          "output": "def num_special_equivalent_groups(words):\n    groups = set()\n\n    for word in words:\n        evens = \"\".join(sorted(word[0::2]))\n        odds = \"\".join(sorted(word[1::2]))\n\n        groups.add(evens + odds)\n\n    return len(groups)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary array `nums` and an integer `goal`, return _the number of non-empty **subarrays** with a sum_ `goal`.\n\nA **subarray** is a contiguous part of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,0,1,0,1\\], goal = 2\n**Output:** 4\n**Explanation:** The 4 subarrays are bolded and underlined below:\n\\[**1,0,1**,0,1\\]\n\\[**1,0,1,0**,1\\]\n\\[1,**0,1,0,1**\\]\n\\[1,0,**1,0,1**\\]\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,0,0,0\\], goal = 0\n**Output:** 15\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `nums[i]` is either `0` or `1`.\n*   `0 <= goal <= nums.length`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef all_possible_FBT(n):\n    if n % 2 == 0:\n        return []\n    if n == 1:\n        return [TreeNode(0)]\n\n    result = []\n    for i in range(1, n, 2):\n        left = all_possible_FBT(i)\n        right = all_possible_FBT(n - i - 1)\n        for l in left:\n            for r in right:\n                root = TreeNode(0)\n                root.left = l\n                root.right = r\n                result.append(root)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `n x n` array of integers `matrix`, return _the **minimum sum** of any **falling path** through_ `matrix`.\n\nA **falling path** starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[2,1,3\\],\\[6,5,4\\],\\[7,8,9\\]\\]\n**Output:** 13\n**Explanation:** There are two falling paths with a minimum sum as shown.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[-19,57\\],\\[-40,-5\\]\\]\n**Output:** -59\n**Explanation:** The falling path with a minimum sum is shown.\n\n**Constraints:**\n\n*   `n == matrix.length == matrix[i].length`\n*   `1 <= n <= 100`\n*   `-100 <= matrix[i][j] <= 100`",
          "output": "from collections import defaultdict, deque\n\nclass FreqStack:\n    def __init__(self):\n        self.freq = defaultdict(int)\n        self.group = defaultdict(list)\n\n    def push(self, x: int):\n        freq = self.freq[x] = self.freq[x] + 1\n        self.group[freq].append(x)\n\n    def pop(self) -> int:\n        max_freq = max(self.group)\n        x = self.group[max_freq].pop()\n        self.freq[x] -= 1\n        if not self.group[max_freq]:\n            del self.group[max_freq]\n        return x\n"
     },
     {
          "instruction": "Write python code for this problem: An array `nums` of length `n` is **beautiful** if:\n\n*   `nums` is a permutation of the integers in the range `[1, n]`.\n*   For every `0 <= i < j < n`, there is no index `k` with `i < k < j` where `2 * nums[k] == nums[i] + nums[j]`.\n\nGiven the integer `n`, return _any **beautiful** array_ `nums` _of length_ `n`. There will be at least one valid answer for the given `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:** \\[2,1,4,3\\]\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** \\[3,1,2,5,4\\]\n\n**Constraints:**\n\n*   `1 <= n <= 1000`",
          "output": "def isMonotonic(nums):\n    increasing = decreasing = True\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]: decreasing = False\n        if nums[i] < nums[i - 1]: increasing = False\n    return increasing or decreasing\n"
     },
     {
          "instruction": "Write python code for this problem: You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.\n\nImplement the `RecentCounter` class:\n\n*   `RecentCounter()` Initializes the counter with zero recent requests.\n*   `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.\n\nIt is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous call.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"RecentCounter \",  \"ping \",  \"ping \",  \"ping \",  \"ping \"\\]\n\\[\\[\\], \\[1\\], \\[100\\], \\[3001\\], \\[3002\\]\\]\n**Output**\n\\[null, 1, 2, 3, 3\\]\n\n**Explanation**\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = \\[1\\], range is \\[-2999,1\\], return 1\nrecentCounter.ping(100);   // requests = \\[1, 100\\], range is \\[-2900,100\\], return 2\nrecentCounter.ping(3001);  // requests = \\[1, 100, 3001\\], range is \\[1,3001\\], return 3\nrecentCounter.ping(3002);  // requests = \\[1, 100, 3001, 3002\\], range is \\[2,3002\\], return 3\n\n**Constraints:**\n\n*   `1 <= t <= 109`\n*   Each test case will call `ping` with **strictly increasing** values of `t`.\n*   At most `104` calls will be made to `ping`.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef increasingBST(root):\n    def inorder(node):\n        nonlocal prev\n        if not node: return\n\n        inorder(node.left)\n        prev.right = node\n        prev = node\n        node.left = None\n        inorder(node.right)\n\n    dummy = TreeNode(0)\n    prev = dummy\n    inorder(root)\n    return dummy.right\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water.\n\nAn **island** is a 4-directionally connected group of `1`'s not connected to any other `1`'s. There are **exactly two islands** in `grid`.\n\nYou may change `0`'s to `1`'s to connect the two islands to form **one island**.\n\nReturn _the smallest number of_ `0`_'s you must flip to connect the two islands_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1\\],\\[1,0\\]\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,1,0\\],\\[0,0,0\\],\\[0,0,1\\]\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,1,1,1\\],\\[1,0,0,0,1\\],\\[1,0,1,0,1\\],\\[1,0,0,0,1\\],\\[1,1,1,1,1\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `2 <= n <= 100`\n*   `grid[i][j]` is either `0` or `1`.\n*   There are exactly two islands in `grid`.",
          "output": "def subarrayBitwiseORs(arr: List[int]) -> int:\n    result, current, temp = set(), set(), set()\n    for num in arr:\n        temp = {num}\n        for c in current:\n            temp.add(num | c)\n        current = temp\n        result |= current\n    return len(result)\n"
     },
     {
          "instruction": "Write python code for this problem: The chess knight has a **unique movement**, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an **L**). The possible movements of chess knight are shown in this diagaram:\n\nA chess knight can move as indicated in the chess diagram below:\n\nWe have a chess knight and a phone pad as shown below, the knight **can only stand on a numeric cell** (i.e. blue cell).\n\nGiven an integer `n`, return how many distinct phone numbers of length `n` we can dial.\n\nYou are allowed to place the knight **on any numeric cell** initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be **valid** knight jumps.\n\nAs the answer may be very large, **return the answer modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 10\n**Explanation:** We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 20\n**Explanation:** All the valid number we can dial are \\[04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94\\]\n\n**Example 3:**\n\n**Input:** n = 3131\n**Output:** 136006598\n**Explanation:** Please take care of the mod.\n\n**Constraints:**\n\n*   `1 <= n <= 5000`",
          "output": "def lex_smallest_string(s, k):\n    res = s\n    for i in range(k):\n        tmp = s[i:] + s[:i]\n        if tmp < res:\n            res = tmp\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `stamp` and `target`. Initially, there is a string `s` of length `target.length` with all `s[i] == '?'`.\n\nIn one turn, you can place `stamp` over `s` and replace every letter in the `s` with the corresponding letter from `stamp`.\n\n*   For example, if `stamp = \"abc \"` and `target = \"abcba \"`, then `s` is `\"????? \"` initially. In one turn you can:\n    \n    *   place `stamp` at index `0` of `s` to obtain `\"abc?? \"`,\n    *   place `stamp` at index `1` of `s` to obtain `\"?abc? \"`, or\n    *   place `stamp` at index `2` of `s` to obtain `\"??abc \"`.\n    \n    Note that `stamp` must be fully contained in the boundaries of `s` in order to stamp (i.e., you cannot place `stamp` at index `3` of `s`).\n\nWe want to convert `s` to `target` using **at most** `10 * target.length` turns.\n\nReturn _an array of the index of the left-most letter being stamped at each turn_. If we cannot obtain `target` from `s` within `10 * target.length` turns, return an empty array.\n\n",
          "input": "**Example 1:**\n\n**Input:** stamp =  \"abc \", target =  \"ababc \"\n**Output:** \\[0,2\\]\n**Explanation:** Initially s =  \"????? \".\n- Place stamp at index 0 to get  \"abc?? \".\n- Place stamp at index 2 to get  \"ababc \".\n\\[1,0,2\\] would also be accepted as an answer, as well as some other answers.\n\n**Example 2:**\n\n**Input:** stamp =  \"abca \", target =  \"aabcaca \"\n**Output:** \\[3,0,1\\]\n**Explanation:** Initially s =  \"??????? \".\n- Place stamp at index 3 to get  \"???abca \".\n- Place stamp at index 0 to get  \"abcabca \".\n- Place stamp at index 1 to get  \"aabcaca \".\n\n**Constraints:**\n\n*   `1 <= stamp.length <= target.length <= 1000`\n*   `stamp` and `target` consist of lowercase English letters.",
          "output": "class RLEIterator:\n    def __init__(self, encoding):\n        self.encoding = encoding\n        self.index = 0\n\n    def next(self, n):\n        while self.index < len(self.encoding):\n            if n <= self.encoding[self.index]:\n                self.encoding[self.index] -= n\n                return self.encoding[self.index + 1]\n            n -= self.encoding[self.index]\n            self.index += 2\n        return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the **identifier**.\n\nThere are two types of logs:\n\n*   **Letter-logs**: All words (except the identifier) consist of lowercase English letters.\n*   **Digit-logs**: All words (except the identifier) consist of digits.\n\nReorder these logs so that:\n\n1.  The **letter-logs** come before all **digit-logs**.\n2.  The **letter-logs** are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\n3.  The **digit-logs** maintain their relative ordering.\n\nReturn _the final order of the logs_.\n\n",
          "input": "**Example 1:**\n\n**Input:** logs = \\[ \"dig1 8 1 5 1 \", \"let1 art can \", \"dig2 3 6 \", \"let2 own kit dig \", \"let3 art zero \"\\]\n**Output:** \\[ \"let1 art can \", \"let3 art zero \", \"let2 own kit dig \", \"dig1 8 1 5 1 \", \"dig2 3 6 \"\\]\n**Explanation:**\nThe letter-log contents are all different, so their ordering is  \"art can \",  \"art zero \",  \"own kit dig \".\nThe digit-logs have a relative order of  \"dig1 8 1 5 1 \",  \"dig2 3 6 \".\n\n**Example 2:**\n\n**Input:** logs = \\[ \"a1 9 2 3 1 \", \"g1 act car \", \"zo4 4 7 \", \"ab1 off key dog \", \"a8 act zoo \"\\]\n**Output:** \\[ \"g1 act car \", \"a8 act zoo \", \"ab1 off key dog \", \"a1 9 2 3 1 \", \"zo4 4 7 \"\\]\n\n**Constraints:**\n\n*   `1 <= logs.length <= 100`\n*   `3 <= logs[i].length <= 100`\n*   All the tokens of `logs[i]` are separated by a **single** space.\n*   `logs[i]` is guaranteed to have an identifier and at least one word after the identifier.",
          "output": "class StockSpanner:\n\n    def __init__(self):\n        self.prices = []\n        self.index_stack = []\n\n    def next(self, price: int) -> int:\n        while self.index_stack and self.prices[self.index_stack[-1]] <= price:\n            self.index_stack.pop()\n        span = len(self.prices) + 1 if not self.index_stack else len(self.prices) - self.index_stack[-1]\n        self.index_stack.append(len(self.prices))\n        self.prices.append(price)\n        return span\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` node of a binary search tree and two integers `low` and `high`, return _the sum of values of all nodes with a value in the **inclusive** range_ `[low, high]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[10,5,15,3,7,null,18\\], low = 7, high = 15\n**Output:** 32\n**Explanation:** Nodes 7, 10, and 15 are in the range \\[7, 15\\]. 7 + 10 + 15 = 32.\n\n**Example 2:**\n\n**Input:** root = \\[10,5,15,3,7,13,18,1,null,6\\], low = 6, high = 10\n**Output:** 23\n**Explanation:** Nodes 6, 7, and 10 are in the range \\[6, 10\\]. 6 + 7 + 10 = 23.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 2 * 104]`.\n*   `1 <= Node.val <= 105`\n*   `1 <= low <= high <= 105`\n*   All `Node.val` are **unique**.",
          "output": "from bisect import bisect_right\n\ndef num_digits_less_than_n(digits: List[int], n: int) -> int:\n    ans = 0\n    factor = 1\n    n_str = str(n)\n    for i in range(len(n_str) - 1, -1, -1):\n        ans += bisect_right(digits, int(n_str[i])) * factor\n        factor *= len(digits)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.\n\nReturn _the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes_. If there is not any such rectangle, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[1,3\\],\\[3,1\\],\\[3,3\\],\\[2,2\\]\\]\n**Output:** 4\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,1\\],\\[1,3\\],\\[3,1\\],\\[3,3\\],\\[4,1\\],\\[4,3\\]\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= points.length <= 500`\n*   `points[i].length == 2`\n*   `0 <= xi, yi <= 4 * 104`\n*   All the given points are **unique**.",
          "output": "def find_valid_permutations(s: str) -> int:\n    n = len(s)\n    MOD = 1000000007\n    dp = [0] * (n + 2)\n    dp[0] = 1\n\n    for c in s:\n        new_dp = [0] * (n + 2)\n        if c == 'I':\n            for i in range(n):\n                new_dp[i + 1] = (new_dp[i + 1] + dp[i]) % MOD\n        else:\n            for i in range(n - 1, -1, -1):\n                new_dp[i] = (new_dp[i + 1] + dp[i + 1]) % MOD\n        dp = new_dp\n\n    return dp[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string s, return _the number of **distinct non-empty subsequences** of_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abc \"\n**Output:** 7\n**Explanation:** The 7 distinct subsequences are  \"a \",  \"b \",  \"c \",  \"ab \",  \"ac \",  \"bc \", and  \"abc \".\n\n**Example 2:**\n\n**Input:** s =  \"aba \"\n**Output:** 6\n**Explanation:** The 6 distinct subsequences are  \"a \",  \"b \",  \"ab \",  \"aa \",  \"ba \", and  \"aba \".\n\n**Example 3:**\n\n**Input:** s =  \"aaa \"\n**Output:** 3\n**Explanation:** The 3 distinct subsequences are  \"a \",  \"aa \" and  \"aaa \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 2000`\n*   `s` consists of lowercase English letters.",
          "output": "def totalFruit(fruits):\n    left, right, max_count = 0, 0, 0\n    count = {}\n\n    while right < len(fruits):\n        count[fruits[right]] = count.get(fruits[right], 0) + 1\n        while len(count) > 2:\n            count[fruits[left]] -= 1\n            if count[fruits[left]] == 0:\n                del count[fruits[left]]\n            left += 1\n        max_count = max(max_count, right - left + 1)\n        right += 1\n\n    return max_count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, return _`true` if and only if it is a valid mountain array_.\n\nRecall that arr is a mountain array if and only if:\n\n*   `arr.length >= 3`\n*   There exists some `i` with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,1\\]\n**Output:** false\n\n**Example 2:**\n\n**Input:** arr = \\[3,5,5\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** arr = \\[0,3,2,1\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `0 <= arr[i] <= 104`It's very easy to keep track of a monotonically increasing or decreasing ordering of elements. You just need to be able to determine the start of the valley in the mountain and from that point onwards, it should be a valley i.e. no mini-hills after that. Use this information in regards to the values in the array and you will be able to come up with a straightforward solution.",
          "output": "def move_even_odd(nums):\n    even_index = 0\n    odd_index = len(nums) - 1\n\n    while even_index < odd_index:\n        if nums[even_index] % 2 == 0:\n            even_index += 1\n        else:\n            nums[even_index], nums[odd_index] = nums[odd_index], nums[even_index]\n            odd_index -= 1\n\n    return nums\n"
     },
     {
          "instruction": "Write python code for this problem: A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:\n\n*   `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n*   `s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\nGiven a string `s`, reconstruct the permutation `perm` and return it. If there are multiple valid permutations perm, return **any of them**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"IDID\"\n**Output:** \\[0,4,1,3,2\\]\n\n**Example 2:**\n\n**Input:** s = \"III\"\n**Output:** \\[0,1,2,3\\]\n\n**Example 3:**\n\n**Input:** s = \"DDI\"\n**Output:** \\[3,2,0,1\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'I'` or `'D'`.",
          "output": "def isPalindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef superpalindromesInRange(left: str, right: str) -> int:\n    l = int(left)\n    r = int(right)\n    cnt = 0\n    base = 1\n    while base * base <= r:\n        if isPalindrome(base) and isPalindrome(base * base):\n            if base * base >= l:\n                cnt += 1\n        base += 1\n    return cnt\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words`, return _the smallest string that contains each string in_ `words` _as a substring_. If there are multiple valid strings of the smallest length, return **any of them**.\n\nYou may assume that no string in `words` is a substring of another string in `words`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"alex \", \"loves \", \"leetcode \"\\]\n**Output:**  \"alexlovesleetcode \"\n**Explanation:** All permutations of  \"alex \", \"loves \", \"leetcode \" would also be accepted.\n\n**Example 2:**\n\n**Input:** words = \\[ \"catg \", \"ctaagt \", \"gcta \", \"ttca \", \"atgcatc \"\\]\n**Output:**  \"gctaagttcatgcatc \"\n\n**Constraints:**\n\n*   `1 <= words.length <= 12`\n*   `1 <= words[i].length <= 20`\n*   `words[i]` consists of lowercase English letters.\n*   All the strings of `words` are **unique**.",
          "output": "def sum_of_mins(arr):\n    mod = 10**9 + 7\n    n = len(arr)\n    left, right = [0] * n, [0] * n\n    st = []\n\n    for i in range(n):\n        while st and arr[st[-1]] > arr[i]:\n            st.pop()\n        left[i] = st[-1] if st else -1\n        st.append(i)\n\n    st.clear()\n    for i in range(n - 1, -1, -1):\n        while st and arr[st[-1]] > arr[i]:\n            st.pop()\n        right[i] = st[-1] if st else n\n        st.append(i)\n\n    ans = 0\n    for i in range(n):\n        ans = (ans + arr[i] * (i - left[i]) * (right[i] - i)) % mod\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `n` strings `strs`, all of the same length.\n\nThe strings can be arranged such that there is one on each line, making a grid.\n\n*   For example, `strs = [ \"abc \", \"bce \", \"cae \"]` can be arranged as follows:\n\nabc\nbce\ncae\n\nYou want to **delete** the columns that are **not sorted lexicographically**. In the above example (**0-indexed**), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted, while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.\n\nReturn _the number of columns that you will delete_.\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[ \"cba \", \"daf \", \"ghi \"\\]\n**Output:** 1\n**Explanation:** The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n\n**Example 2:**\n\n**Input:** strs = \\[ \"a \", \"b \"\\]\n**Output:** 0\n**Explanation:** The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.\n\n**Example 3:**\n\n**Input:** strs = \\[ \"zyx \", \"wvu \", \"tsr \"\\]\n**Output:** 3\n**Explanation:** The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3.\n\n**Constraints:**\n\n*   `n == strs.length`\n*   `1 <= n <= 100`\n*   `1 <= strs[i].length <= 1000`\n*   `strs[i]` consists of lowercase English letters.",
          "output": "def minDifference(nums, k):\n    if len(nums) <= 1: return 0\n    nums.sort()\n    min_diff = nums[-1] - nums[0]\n    for i in range(1, len(nums)):\n        high = max(nums[i-1] + k, nums[-1] - k)\n        low = min(nums[i] - k, nums[0] + k)\n        min_diff = min(min_diff, high - low)\n    return min_diff\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. In one move, you can pick an index `i` where `0 <= i < nums.length` and increment `nums[i]` by `1`.\n\nReturn _the minimum number of moves to make every value in_ `nums` _**unique**_.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,2\\]\n**Output:** 1\n**Explanation:** After 1 move, the array could be \\[1, 2, 3\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,1,2,1,7\\]\n**Output:** 6\n**Explanation:** After 6 moves, the array could be \\[3, 4, 1, 2, 5, 7\\].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 105`",
          "output": "def snakesAndLadders(board):\n    n = len(board)\n    visited = [False] * (n*n + 1)\n    queue = [(1, 0)]  # starting at position 1\n    visited[1] = True\n\n    def get_position(pos):\n        r = (pos - 1) // n\n        c = (pos - 1) % n\n        if r % 2 == 1:\n            c = n - 1 - c\n        r = n - r - 1\n        return r, c\n\n    while queue:\n        pos, steps = queue.pop(0)\n        for jump in range(1, 7):\n            next_pos = pos + jump\n            if next_pos > n*n:\n                break\n            r, c = get_position(next_pos)\n            if board[r][c] != -1:\n                next_pos = board[r][c]\n            if next_pos == n*n:\n                return steps + 1\n            if not visited[next_pos]:\n                visited[next_pos] = True\n                queue.append((next_pos, steps + 1))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `pushed` and `popped` each with distinct values, return `true` _if this could have been the result of a sequence of push and pop operations on an initially empty stack, or_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** pushed = \\[1,2,3,4,5\\], popped = \\[4,5,3,2,1\\]\n**Output:** true\n**Explanation:** We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -> 4,\npush(5),\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n\n**Example 2:**\n\n**Input:** pushed = \\[1,2,3,4,5\\], popped = \\[4,3,5,1,2\\]\n**Output:** false\n**Explanation:** 1 cannot be popped before 2.\n\n**Constraints:**\n\n*   `1 <= pushed.length <= 1000`\n*   `0 <= pushed[i] <= 1000`\n*   All the elements of `pushed` are **unique**.\n*   `popped.length == pushed.length`\n*   `popped` is a permutation of `pushed`.",
          "output": "def minimum_score(nums, k):\n    nums.sort()\n    n = len(nums)\n    res = nums[n - 1] - nums[0]\n\n    for i in range(n - 1):\n        high = max(nums[i] + k, nums[n - 1] - k)\n        low = min(nums[i + 1] - k, nums[0] + k)\n        res = min(res, high - low)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\nA stone can be removed if it shares either **the same row or the same column** as another stone that has not been removed.\n\nGiven an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return _the largest possible number of stones that can be removed_.\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[\\[0,0\\],\\[0,1\\],\\[1,0\\],\\[1,2\\],\\[2,1\\],\\[2,2\\]\\]\n**Output:** 5\n**Explanation:** One way to remove 5 stones is as follows:\n1. Remove stone \\[2,2\\] because it shares the same row as \\[2,1\\].\n2. Remove stone \\[2,1\\] because it shares the same column as \\[0,1\\].\n3. Remove stone \\[1,2\\] because it shares the same row as \\[1,0\\].\n4. Remove stone \\[1,0\\] because it shares the same column as \\[0,0\\].\n5. Remove stone \\[0,1\\] because it shares the same row as \\[0,0\\].\nStone \\[0,0\\] cannot be removed since it does not share a row/column with another stone still on the plane.\n\n**Example 2:**\n\n**Input:** stones = \\[\\[0,0\\],\\[0,2\\],\\[1,1\\],\\[2,0\\],\\[2,2\\]\\]\n**Output:** 3\n**Explanation:** One way to make 3 moves is as follows:\n1. Remove stone \\[2,2\\] because it shares the same row as \\[2,0\\].\n2. Remove stone \\[2,0\\] because it shares the same column as \\[0,0\\].\n3. Remove stone \\[0,2\\] because it shares the same row as \\[0,0\\].\nStones \\[0,0\\] and \\[1,1\\] cannot be removed since they do not share a row/column with another stone still on the plane.\n\n**Example 3:**\n\n**Input:** stones = \\[\\[0,0\\]\\]\n**Output:** 0\n**Explanation:** \\[0,0\\] is the only stone on the plane, so you cannot remove it.\n\n**Constraints:**\n\n*   `1 <= stones.length <= 1000`\n*   `0 <= xi, yi <= 104`\n*   No two stones are at the same coordinate point.",
          "output": "from collections import defaultdict\nfrom bisect import bisect\n\nclass TopVotedCandidate:\n\n    def __init__(self, persons, times):\n        self.leader_map = {}\n        self.times = times\n        votes = defaultdict(int)\n        leader = -1\n        for i, t in enumerate(times):\n            votes[persons[i]] += 1\n            if votes[persons[i]] >= votes[leader]:\n                leader = persons[i]\n            self.leader_map[t] = leader\n\n    def q(self, t):\n        idx = bisect.bisect(self.times, t)\n        return self.times[idx - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: You have an initial **power** of `power`, an initial **score** of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).\n\nYour goal is to maximize your total **score** by potentially playing each token in one of two ways:\n\n*   If your current **power** is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` **power** and gaining `1` **score**.\n*   If your current **score** is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` **power** and losing `1` **score**.\n\nEach token may be played **at most** once and **in any order**. You do **not** have to play all the tokens.\n\nReturn _the largest possible **score** you can achieve after playing any number of tokens_.\n\n",
          "input": "**Example 1:**\n\n**Input:** tokens = \\[100\\], power = 50\n**Output:** 0\n**Explanation****:** Playing the only token in the bag is impossible because you either have too little power or too little score.\n\n**Example 2:**\n\n**Input:** tokens = \\[100,200\\], power = 150\n**Output:** 1\n**Explanation:** Play the 0th token (100) face up, your power becomes 50 and score becomes 1.\nThere is no need to play the 1st token since you cannot play it face up to add to your score.\n\n**Example 3:**\n\n**Input:** tokens = \\[100,200,300,400\\], power = 200\n**Output:** 2\n**Explanation:** Play the tokens in this order to get a score of 2:\n1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.\n2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.\n3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.\n4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.\n\n**Constraints:**\n\n*   `0 <= tokens.length <= 1000`\n*   `0 <= tokens[i], power < 104`",
          "output": "def sortArray(nums):\n    nums.sort()\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit **exactly once**.\n\n24-hour times are formatted as `\"HH:MM \"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\nReturn _the latest 24-hour time in `\"HH:MM \"` format_. If no valid time can be made, return an empty string.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3,4\\]\n**Output:**  \"23:41 \"\n**Explanation:** The valid 24-hour times are  \"12:34 \",  \"12:43 \",  \"13:24 \",  \"13:42 \",  \"14:23 \",  \"14:32 \",  \"21:34 \",  \"21:43 \",  \"23:14 \", and  \"23:41 \". Of these times,  \"23:41 \" is the latest.\n\n**Example 2:**\n\n**Input:** arr = \\[5,5,5,5\\]\n**Output:**  \" \"\n**Explanation:** There are no valid 24-hour times as  \"55:55 \" is not valid.\n\n**Constraints:**\n\n*   `arr.length == 4`\n*   `0 <= arr[i] <= 9`",
          "output": "from collections import deque\n\ndef catMouseGame(graph):\n    n = len(graph)\n    status = [[[0]*3 for _ in range(n)] for _ in range(n)]\n\n    for i in range(1, n):\n        status[i][i][1] = 2\n        status[i][i][2] = 2\n    queue = deque([(i, i, t, 2) for i in range(1, n) for t in (1, 2)])\n\n    while queue:\n        pos_m, pos_c, t_type, t_result = queue.popleft()\n\n        for prev in graph[pos_m if t_type == 1 else pos_c]:\n            if (t_type == 2 and prev == 0) or (t_result == 2 and status[prev][pos_c][3 - t_type]):\n                continue\n            if status[prev][pos_c][3 - t_type]:\n                continue\n            queue.append((pos_c, prev, 3 - t_type, 3 - t_result))\n            status[prev][pos_c][3 - t_type] = 3 - t_result\n\n    return status[1][2][1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`.\n\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\n\nYou will do the following steps repeatedly until all cards are revealed:\n\n1.  Take the top card of the deck, reveal it, and take it out of the deck.\n2.  If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\n3.  If there are still unrevealed cards, go back to step 1. Otherwise, stop.\n\nReturn _an ordering of the deck that would reveal the cards in increasing order_.\n\n**Note** that the first entry in the answer is considered to be the top of the deck.\n\n",
          "input": "**Example 1:**\n\n**Input:** deck = \\[17,13,11,2,3,5,7\\]\n**Output:** \\[2,13,3,11,5,17,7\\]\n**Explanation:** \nWe get the deck in the order \\[17,13,11,2,3,5,7\\] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as \\[2,13,3,11,5,17,7\\], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now \\[3,11,5,17,7,13\\].\nWe reveal 3, and move 11 to the bottom.  The deck is now \\[5,17,7,13,11\\].\nWe reveal 5, and move 17 to the bottom.  The deck is now \\[7,13,11,17\\].\nWe reveal 7, and move 13 to the bottom.  The deck is now \\[11,17,13\\].\nWe reveal 11, and move 17 to the bottom.  The deck is now \\[13,17\\].\nWe reveal 13, and move 17 to the bottom.  The deck is now \\[17\\].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n\n**Example 2:**\n\n**Input:** deck = \\[1,1000\\]\n**Output:** \\[1,1000\\]\n\n**Constraints:**\n\n*   `1 <= deck.length <= 1000`\n*   `1 <= deck[i] <= 106`\n*   All the values of `deck` are **unique**.",
          "output": "from collections import Counter\nfrom math import gcd\nfrom functools import reduce\n\ndef hasGroupsSizeX(deck):\n    counts = Counter(deck)\n    gcd_result = reduce(gcd, counts.values())\n    return gcd_result > 1\n"
     },
     {
          "instruction": "Write python code for this problem: For a binary tree **T**, we can define a **flip operation** as follows: choose any node, and swap the left and right child subtrees.\n\nA binary tree **X** is _flip equivalent_ to a binary tree **Y** if and only if we can make **X** equal to **Y** after some number of flip operations.\n\nGiven the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivalent or `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** root1 = \\[1,2,3,4,5,6,null,null,null,7,8\\], root2 = \\[1,3,2,null,6,4,5,null,null,null,null,8,7\\]\n**Output:** true\n**Explanation:** We flipped at nodes with values 1, 3, and 5.\n\n**Example 2:**\n\n**Input:** root1 = \\[\\], root2 = \\[\\]\n**Output:** true\n\n**Example 3:**\n\n**Input:** root1 = \\[\\], root2 = \\[1\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in each tree is in the range `[0, 100]`.\n*   Each tree will have **unique node values** in the range `[0, 99]`.",
          "output": "def partitionDisjoint(nums):\n    left_max, global_max, left_length = nums[0], nums[0], 1\n    for i in range(1, len(nums)):\n        if nums[i] < left_max:\n            left_max = global_max\n            left_length = i + 1\n        else:\n            global_max = max(global_max, nums[i])\n    return left_length\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array of unique positive integers `nums`. Consider the following graph:\n\n*   There are `nums.length` nodes, labeled `nums[0]` to `nums[nums.length - 1]`,\n*   There is an undirected edge between `nums[i]` and `nums[j]` if `nums[i]` and `nums[j]` share a common factor greater than `1`.\n\nReturn _the size of the largest connected component in the graph_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,6,15,35\\]\n**Output:** 4\n\n**Example 2:**\n\n**Input:** nums = \\[20,50,9,63\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** nums = \\[2,3,6,7,4,12,21,39\\]\n**Output:** 8\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `1 <= nums[i] <= 105`\n*   All the values of `nums` are **unique**.",
          "output": "from collections import Counter\n\ndef word_subsets(words1, words2):\n    max_chars = Counter()\n    for word in words2:\n        chars = Counter(word)\n        for c, count in chars.items():\n            max_chars[c] = max(max_chars[c], count)\n    \n    result = []\n    for word in words1:\n        word_chars = Counter(word)\n        universal = all(word_chars[c] >= max_chars[c] for c in max_chars)\n        if universal:\n            result.append(word)\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters.\n\nGiven a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographically in this alien language.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"hello \", \"leetcode \"\\], order =  \"hlabcdefgijkmnopqrstuvwxyz \"\n**Output:** true\n**Explanation:** As 'h' comes before 'l' in this language, then the sequence is sorted.\n\n**Example 2:**\n\n**Input:** words = \\[ \"word \", \"world \", \"row \"\\], order =  \"worldabcefghijkmnpqstuvxyz \"\n**Output:** false\n**Explanation:** As 'd' comes after 'l' in this language, then words\\[0\\] > words\\[1\\], hence the sequence is unsorted.\n\n**Example 3:**\n\n**Input:** words = \\[ \"apple \", \"app \"\\], order =  \"abcdefghijklmnopqrstuvwxyz \"\n**Output:** false\n**Explanation:** The first three characters  \"app \" match, and the second string is shorter (in size.) According to lexicographical rules  \"apple \" >  \"app \", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character ([More info](https://en.wikipedia.org/wiki/Lexicographical_order)).\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 20`\n*   `order.length == 26`\n*   All characters in `words[i]` and `order` are English lowercase letters.",
          "output": "def reverse_string(s):\n    return s[::-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array of even length `arr`, return `true` _if it is possible to reorder_ `arr` _such that_ `arr[2 * i + 1] = 2 * arr[2 * i]` _for every_ `0 <= i < len(arr) / 2`_, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,1,3,6\\]\n**Output:** false\n\n**Example 2:**\n\n**Input:** arr = \\[2,1,2,6\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** arr = \\[4,-2,2,-4\\]\n**Output:** true\n**Explanation:** We can take two groups, \\[-2,-4\\] and \\[2,4\\] to form \\[-2,-4,2,4\\] or \\[2,4,-2,-4\\].\n\n**Constraints:**\n\n*   `2 <= arr.length <= 3 * 104`\n*   `arr.length` is even.\n*   `-105 <= arr[i] <= 105`",
          "output": "def canReorderDoubled(arr):\n    count = collections.Counter(arr)\n    \n    for a in sorted(count, key=abs):\n        if count[a] > 0:\n            target = a * 2\n            if count[target] < count[a]:\n                return False\n            count[target] -= count[a]\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have `strs = [ \"abcdef \", \"uvwxyz \"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[ \"bef \", \"vyz \"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in **lexicographic** order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return _the minimum possible value of_ `answer.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[ \"ca \", \"bb \", \"ac \"\\]\n**Output:** 1\n**Explanation:** \nAfter deleting the first column, strs = \\[ \"a \",  \"b \",  \"c \"\\].\nNow strs is in lexicographic order (ie. strs\\[0\\] <= strs\\[1\\] <= strs\\[2\\]).\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.\n\n**Example 2:**\n\n**Input:** strs = \\[ \"xc \", \"yb \", \"za \"\\]\n**Output:** 0\n**Explanation:** \nstrs is already in lexicographic order, so we do not need to delete anything.\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs\\[0\\]\\[0\\] <= strs\\[0\\]\\[1\\] <= ...)\n\n**Example 3:**\n\n**Input:** strs = \\[ \"zyx \", \"wvu \", \"tsr \"\\]\n**Output:** 3\n**Explanation:** We have to delete every column.\n\n**Constraints:**\n\n*   `n == strs.length`\n*   `1 <= n <= 100`\n*   `1 <= strs[i].length <= 100`\n*   `strs[i]` consists of lowercase English letters.",
          "output": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass CBTInserter:\n    def __init__(self, root: TreeNode):\n        self.root = root\n        self.q = deque([root])\n        while True:\n            node = self.q[0]\n            if not node.left or not node.right:\n                break\n            self.q.append(node.left)\n            self.q.append(node.right)\n            self.q.popleft()\n\n    def insert(self, v: int) -> int:\n        newNode = TreeNode(v)\n        parentNode = self.q[0]\n        if not parentNode.left:\n            parentNode.left = newNode\n        else:\n            parentNode.right = newNode\n            self.q.append(parentNode.left)\n            self.q.append(parentNode.right)\n            self.q.popleft()\n        return parentNode.val\n\n    def get_root(self) -> TreeNode:\n        return self.root\n"
     },
     {
          "instruction": "Write python code for this problem: You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\n\nYou are given a collection of `rods` that can be welded together. For example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`.\n\nReturn _the largest possible height of your billboard installation_. If you cannot support the billboard, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rods = \\[1,2,3,6\\]\n**Output:** 6\n**Explanation:** We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n\n**Example 2:**\n\n**Input:** rods = \\[1,2,3,4,5,6\\]\n**Output:** 10\n**Explanation:** We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n\n**Example 3:**\n\n**Input:** rods = \\[1,2\\]\n**Output:** 0\n**Explanation:** The billboard cannot be supported, so we return 0.\n\n**Constraints:**\n\n*   `1 <= rods.length <= 20`\n*   `1 <= rods[i] <= 1000`\n*   `sum(rods[i]) <= 5000`",
          "output": "def numMusicPlaylists(n, goal, k):\n    MOD = 1000000007\n    dp = [[0] * (n + 1) for _ in range(goal + 1)]\n    dp[0][0] = 1\n    for i in range(1, goal + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = (dp[i - 1][j - 1] * (n - (j - 1)) % MOD + dp[i - 1][j] * max(0, j - k) % MOD) % MOD\n    return dp[goal][n]\n"
     },
     {
          "instruction": "Write python code for this problem: There are `8` prison cells in a row and each cell is either occupied or vacant.\n\nEach day, whether the cell is occupied or vacant changes according to the following rules:\n\n*   If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\n*   Otherwise, it becomes vacant.\n\n**Note** that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\n\nYou are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`.\n\nReturn the state of the prison after `n` days (i.e., `n` such changes described above).\n\n",
          "input": "**Example 1:**\n\n**Input:** cells = \\[0,1,0,1,1,0,0,1\\], n = 7\n**Output:** \\[0,0,1,1,0,0,0,0\\]\n**Explanation:** The following table summarizes the state of the prison on each day:\nDay 0: \\[0, 1, 0, 1, 1, 0, 0, 1\\]\nDay 1: \\[0, 1, 1, 0, 0, 0, 0, 0\\]\nDay 2: \\[0, 0, 0, 0, 1, 1, 1, 0\\]\nDay 3: \\[0, 1, 1, 0, 0, 1, 0, 0\\]\nDay 4: \\[0, 0, 0, 0, 0, 1, 0, 0\\]\nDay 5: \\[0, 1, 1, 1, 0, 1, 0, 0\\]\nDay 6: \\[0, 0, 1, 0, 1, 1, 0, 0\\]\nDay 7: \\[0, 0, 1, 1, 0, 0, 0, 0\\]\n\n**Example 2:**\n\n**Input:** cells = \\[1,0,0,1,0,0,1,0\\], n = 1000000000\n**Output:** \\[0,0,1,1,1,1,1,0\\]\n\n**Constraints:**\n\n*   `cells.length == 8`\n*   `cells[i]` is either `0` or `1`.\n*   `1 <= n <= 109`",
          "output": "def minAddToMakeValid(s: str) -> int:\n    result = balance = 0\n    for c in s:\n        balance += 1 if c == '(' else -1\n        if balance == -1:\n            result += 1\n            balance += 1\n    return result + balance\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, determine if it is a _complete binary tree_.\n\nIn a **[complete binary tree](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,6\\]\n**Output:** true\n**Explanation:** Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,4,5,null,7\\]\n**Output:** false\n**Explanation:** The node with value 7 isn't as far left as possible.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `1 <= Node.val <= 1000`",
          "output": "def sortArrayByParityII(nums):\n    j = 1\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2:\n            while nums[j] % 2:\n                j += 2\n            nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
     },
     {
          "instruction": "Write python code for this problem: An `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the square into contiguous regions.\n\nGiven the grid `grid` represented as a string array, return _the number of regions_.\n\nNote that backslash characters are escaped, so a `'\\'` is represented as `'\\\\'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[ \" / \", \"/  \"\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** grid = \\[ \" / \", \"   \"\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** grid = \\[ \"/\\\\\\\\ \", \"\\\\/ \"\\]\n**Output:** 5\n**Explanation:** Recall that because \\\\ characters are escaped,  \"\\\\/ \" refers to /, and  \"/\\\\\\\\ \" refers to /\\\\.\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `1 <= n <= 30`\n*   `grid[i][j]` is either `'/'`, `'\\'`, or `' '`.",
          "output": "def threeSumMulti(arr, target):\n    MOD = 1000000007\n    ans = 0\n\n    arr.sort()\n    n = len(arr)\n\n    for i in range(n - 2):\n        j, k = i + 1, n - 1\n        while j < k:\n            s = arr[i] + arr[j] + arr[k]\n            if s > target:\n                k -= 1\n            elif s < target:\n                j += 1\n            else:\n                if arr[j] != arr[k]:\n                    left_count = right_count = 1\n\n                    while j < n - 1 and arr[j] == arr[j + 1]:\n                        left_count += 1\n                        j += 1\n\n                    while k > 0 and arr[k] == arr[k - 1]:\n                        right_count += 1\n                        k -= 1\n\n                    ans += left_count * right_count\n                    ans %= MOD\n                    j += 1\n                    k -= 1\n                else:\n                    ans += (k - j + 1) * (k - j) // 2\n                    ans %= MOD\n                    break\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have `strs = [ \"abcdef \", \"uvwxyz \"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[ \"bef \", \"vyz \"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has **every string (row) in lexicographic** order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return _the minimum possible value of_ `answer.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** strs = \\[ \"babca \", \"bbazb \"\\]\n**Output:** 3\n**Explanation:** After deleting columns 0, 1, and 4, the final array is strs = \\[ \"bc \",  \"az \"\\].\nBoth these rows are individually in lexicographic order (ie. strs\\[0\\]\\[0\\] <= strs\\[0\\]\\[1\\] and strs\\[1\\]\\[0\\] <= strs\\[1\\]\\[1\\]).\nNote that strs\\[0\\] > strs\\[1\\] - the array strs is not necessarily in lexicographic order.\n\n**Example 2:**\n\n**Input:** strs = \\[ \"edcba \"\\]\n**Output:** 4\n**Explanation:** If we delete less than 4 columns, the only row will not be lexicographically sorted.\n\n**Example 3:**\n\n**Input:** strs = \\[ \"ghi \", \"def \", \"abc \"\\]\n**Output:** 0\n**Explanation:** All rows are already lexicographically sorted.\n\n**Constraints:**\n\n*   `n == strs.length`\n*   `1 <= n <= 100`\n*   `1 <= strs[i].length <= 100`\n*   `strs[i]` consists of lowercase English letters.",
          "output": "from collections import deque\n\ndef minMalwareSpread(graph, initial):\n    n = len(graph)\n    initial.sort()\n    \n    malware = set(initial)\n    \n    minNode = initial[0]\n    minSpread = n + 1\n\n    for node in initial:\n        q = deque(otherNode for otherNode in initial if node != otherNode)\n        visited = [node != otherNode and otherNode in malware for otherNode in range(n)]\n        \n        while q:\n            cur = q.popleft()\n            for next, isConnected in enumerate(graph[cur]):\n                if isConnected and not visited[next] and next not in malware:\n                    visited[next] = True\n                    q.append(next)\n        \n        spread = sum(visited)\n        \n        if spread < minSpread:\n            minNode = node\n            minSpread = spread\n    \n    return minNode\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` with the following properties:\n\n*   `nums.length == 2 * n`.\n*   `nums` contains `n + 1` **unique** elements.\n*   Exactly one element of `nums` is repeated `n` times.\n\nReturn _the element that is repeated_ `n` _times_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,3\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** nums = \\[2,1,2,5,3,2\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** nums = \\[5,1,5,2,5,3,5,4\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `2 <= n <= 5000`\n*   `nums.length == 2 * n`\n*   `0 <= nums[i] <= 104`\n*   `nums` contains `n + 1` **unique** elements and one of them is repeated exactly `n` times.",
          "output": "def isLongPressedName(name: str, typed: str) -> bool:\n    i, j = 0, 0\n    while j < len(typed):\n        if i < len(name) and name[i] == typed[j]:\n            i += 1\n        elif j == 0 or typed[j] != typed[j - 1]:\n            return False\n        j += 1\n    return i == len(name)\n"
     },
     {
          "instruction": "Write python code for this problem: A **ramp** in an integer array `nums` is a pair `(i, j)` for which `i < j` and `nums[i] <= nums[j]`. The **width** of such a ramp is `j - i`.\n\nGiven an integer array `nums`, return _the maximum width of a **ramp** in_ `nums`. If there is no **ramp** in `nums`, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[6,0,8,2,1,5\\]\n**Output:** 4\n**Explanation:** The maximum width ramp is achieved at (i, j) = (1, 5): nums\\[1\\] = 0 and nums\\[5\\] = 5.\n\n**Example 2:**\n\n**Input:** nums = \\[9,8,1,0,1,9,4,0,4,1\\]\n**Output:** 7\n**Explanation:** The maximum width ramp is achieved at (i, j) = (2, 9): nums\\[2\\] = 1 and nums\\[9\\] = 1.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 5 * 104`\n*   `0 <= nums[i] <= 5 * 104`",
          "output": "def minFlipsMonoIncr(s: str) -> int:\n    flipCount, oneCount = 0, 0\n    for c in s:\n        if c == '1':\n            oneCount += 1\n        else:\n            flipCount = min(flipCount + 1, oneCount)\n    return flipCount\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.\n\nReturn _the minimum area of any rectangle formed from these points, with sides **not necessarily parallel** to the X and Y axes_. If there is not any such rectangle, return `0`.\n\nAnswers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,2\\],\\[2,1\\],\\[1,0\\],\\[0,1\\]\\]\n**Output:** 2.00000\n**Explanation:** The minimum area rectangle occurs at \\[1,2\\],\\[2,1\\],\\[1,0\\],\\[0,1\\], with an area of 2.\n\n**Example 2:**\n\n**Input:** points = \\[\\[0,1\\],\\[2,1\\],\\[1,1\\],\\[1,0\\],\\[2,0\\]\\]\n**Output:** 1.00000\n**Explanation:** The minimum area rectangle occurs at \\[1,0\\],\\[1,1\\],\\[2,1\\],\\[2,0\\], with an area of 1.\n\n**Example 3:**\n\n**Input:** points = \\[\\[0,3\\],\\[1,2\\],\\[3,1\\],\\[1,3\\],\\[2,1\\]\\]\n**Output:** 0\n**Explanation:** There is no possible rectangle to form from these points.\n\n**Constraints:**\n\n*   `1 <= points.length <= 50`\n*   `points[i].length == 2`\n*   `0 <= xi, yi <= 4 * 104`\n*   All the given points are **unique**.",
          "output": "def find_same_binary_value_parts(arr):\n    ones = sum(arr)\n\n    if ones % 3 != 0:\n        return [-1, -1]\n\n    target = ones // 3\n    if target == 0:\n        return [0, len(arr) - 2]\n\n    count = 0\n    i = j = -1\n    ones = 0\n    for idx, n in enumerate(arr):\n        if n == 1:\n            ones += 1\n            if ones == target + 1:\n                count += 1\n            if count == 1 and i == -1:\n                i = idx\n            if count == 2 and j == -1:\n                j = idx\n            if count == 3:\n                break\n\n    return [i, j]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3.\n\nWhen writing such an expression, we adhere to the following conventions:\n\n*   The division operator (`/`) returns rational numbers.\n*   There are no parentheses placed anywhere.\n*   We use the usual order of operations: multiplication and division happen before addition and subtraction.\n*   It is not allowed to use the unary negation operator (`-`). For example, \"`x - x` \" is a valid expression as it only uses subtraction, but \"`-x + x` \" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used.\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 3, target = 19\n**Output:** 5\n**Explanation:** 3 \\* 3 + 3 \\* 3 + 3 / 3.\nThe expression contains 5 operations.\n\n**Example 2:**\n\n**Input:** x = 5, target = 501\n**Output:** 8\n**Explanation:** 5 \\* 5 \\* 5 \\* 5 - 5 \\* 5 \\* 5 + 5 / 5.\nThe expression contains 8 operations.\n\n**Example 3:**\n\n**Input:** x = 100, target = 100000000\n**Output:** 3\n**Explanation:** 100 \\* 100 \\* 100 \\* 100.\nThe expression contains 3 operations.\n\n**Constraints:**\n\n*   `2 <= x <= 100`\n*   `1 <= target <= 2 * 108`",
          "output": "from collections import deque\nfrom typing import List\n\ndef minMalwareSpread(graph: List[List[int]], initial: List[int]) -> int:\n    n = len(graph)\n    color = [-1] * n\n    colors = 0\n\n    for i in range(n):\n        if color[i] == -1:\n            q = deque([i])\n            color[i] = colors\n\n            while q:\n                t = q.popleft()\n                for j in range(n):\n                    if graph[t][j] == 1 and color[j] == -1:\n                        q.append(j)\n                        color[j] = colors\n\n            colors += 1\n\n    area = [0] * colors\n    count = [0] * colors\n    initially_infected = set(initial)\n    for i in range(n):\n        area[color[i]] += 1\n        if i in initially_infected:\n            count[color[i]] += 1\n\n    res = min(initial)\n    min_size = n + 1\n    for i in initial:\n        if count[color[i]] == 1:\n            if area[color[i]] < min_size:\n                min_size = area[color[i]]\n                res = i\n            elif area[color[i]] == min_size and i < res:\n                res = i\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: A binary tree is **uni-valued** if every node in the tree has the same value.\n\nGiven the `root` of a binary tree, return `true` _if the given tree is **uni-valued**, or_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,1,1,1,1,null,1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[2,2,2,5,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `0 <= Node.val < 100`",
          "output": "def num_unique_emails(emails):\n    unique_emails = set()\n\n    for email in emails:\n        local_name, domain_name = email.split(\"@\")\n        local_name = local_name.split(\"+\")[0]\n        local_name = local_name.replace(\".\", \"\")\n\n        unique_emails.add(local_name + \"@\" + domain_name)\n\n    return len(unique_emails)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word.\n\nFor a given `query` word, the spell checker handles two categories of spelling mistakes:\n\n*   Capitalization: If the query matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the case in the wordlist.\n    *   Example: `wordlist = [ \"yellow \"]`, `query = \"YellOw \"`: `correct = \"yellow \"`\n    *   Example: `wordlist = [ \"Yellow \"]`, `query = \"yellow \"`: `correct = \"Yellow \"`\n    *   Example: `wordlist = [ \"yellow \"]`, `query = \"yellow \"`: `correct = \"yellow \"`\n*   Vowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the match in the wordlist.\n    *   Example: `wordlist = [ \"YellOw \"]`, `query = \"yollow \"`: `correct = \"YellOw \"`\n    *   Example: `wordlist = [ \"YellOw \"]`, `query = \"yeellow \"`: `correct = \" \"` (no match)\n    *   Example: `wordlist = [ \"YellOw \"]`, `query = \"yllw \"`: `correct = \" \"` (no match)\n\nIn addition, the spell checker operates under the following precedence rules:\n\n*   When the query exactly matches a word in the wordlist (**case-sensitive**), you should return the same word back.\n*   When the query matches a word up to capitlization, you should return the first such match in the wordlist.\n*   When the query matches a word up to vowel errors, you should return the first such match in the wordlist.\n*   If the query has no matches in the wordlist, you should return the empty string.\n\nGiven some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** wordlist = \\[\"KiTe\",\"kite\",\"hare\",\"Hare\"\\], queries = \\[\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"\\]\n**Output:** \\[\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"\\]\n\n**Example 2:**\n\n**Input:** wordlist = \\[\"yellow\"\\], queries = \\[\"YellOw\"\\]\n**Output:** \\[\"yellow\"\\]\n\n**Constraints:**\n\n*   `1 <= wordlist.length, queries.length <= 5000`\n*   `1 <= wordlist[i].length, queries[i].length <= 7`\n*   `wordlist[i]` and `queries[i]` consist only of only English letters.",
          "output": "def num_subarrays_with_sum(nums, goal):\n    from collections import defaultdict\n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1\n    cumulative_sum, result = 0, 0\n    \n    for num in nums:\n        cumulative_sum += num\n        result += prefix_sum_count[cumulative_sum - goal]\n        prefix_sum_count[cumulative_sum] += 1\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers n and k, return _an array of all the integers of length_ `n` _where the difference between every two consecutive digits is_ `k`. You may return the answer in **any order**.\n\nNote that the integers should not have leading zeros. Integers as `02` and `043` are not allowed.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 7\n**Output:** \\[181,292,707,818,929\\]\n**Explanation:** Note that 070 is not a valid number, because it has leading zeroes.\n\n**Example 2:**\n\n**Input:** n = 2, k = 1\n**Output:** \\[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98\\]\n\n**Constraints:**\n\n*   `2 <= n <= 9`\n*   `0 <= k <= 9`",
          "output": "def minFallingPathSum(matrix):\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(n):\n            min_val = matrix[i - 1][j]\n            if j > 0: min_val = min(min_val, matrix[i - 1][j - 1])\n            if j < n - 1: min_val = min(min_val, matrix[i - 1][j + 1])\n            matrix[i][j] += min_val\n    return min(matrix[-1])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\n\nReturn _the minimum number of cameras needed to monitor all nodes of the tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[0,0,null,0,0\\]\n**Output:** 1\n**Explanation:** One camera is enough to monitor all nodes if placed as shown.\n\n**Example 2:**\n\n**Input:** root = \\[0,0,null,0,null,0,null,null,0\\]\n**Output:** 2\n**Explanation:** At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `Node.val == 0`",
          "output": "def beautifulArray(n: int) -> List[int]:\n    result = [1]\n    while len(result) < n:\n        temp = []\n        for i in result:\n            if i * 2 - 1 <= n:\n                temp.append(i * 2 - 1)\n        for i in result:\n            if i * 2 <= n:\n                temp.append(i * 2)\n        result = temp\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, sort the array by performing a series of **pancake flips**.\n\nIn one pancake flip we do the following steps:\n\n*   Choose an integer `k` where `1 <= k <= arr.length`.\n*   Reverse the sub-array `arr[0...k-1]` (**0-indexed**).\n\nFor example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`.\n\nReturn _an array of the_ `k`_\\-values corresponding to a sequence of pancake flips that sort_ `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,2,4,1\\]\n**Output:** \\[4,2,4,3\\]\n**Explanation:** \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = \\[3, 2, 4, 1\\]\nAfter 1st flip (k = 4): arr = \\[1, 4, 2, 3\\]\nAfter 2nd flip (k = 2): arr = \\[4, 1, 2, 3\\]\nAfter 3rd flip (k = 4): arr = \\[3, 2, 1, 4\\]\nAfter 4th flip (k = 3): arr = \\[1, 2, 3, 4\\], which is sorted.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,3\\]\n**Output:** \\[\\]\n**Explanation:** The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as \\[3, 3\\], would also be accepted.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 100`\n*   `1 <= arr[i] <= arr.length`\n*   All integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`).",
          "output": "from collections import deque\n\nclass RecentCounter:\n    def __init__(self):\n        self.requests = deque()\n\n    def ping(self, t: int) -> int:\n        self.requests.append(t)\n        while self.requests[0] < t - 3000:\n            self.requests.popleft()\n        return len(self.requests)\n"
     },
     {
          "instruction": "Write python code for this problem: Given three integers `x`, `y`, and `bound`, return _a list of all the **powerful integers** that have a value less than or equal to_ `bound`.\n\nAn integer is **powerful** if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`.\n\nYou may return the answer in **any order**. In your answer, each value should occur **at most once**.\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 2, y = 3, bound = 10\n**Output:** \\[2,3,4,5,7,9,10\\]\n**Explanation:**\n2 = 20 + 30\n3 = 21 + 30\n4 = 20 + 31\n5 = 21 + 31\n7 = 22 + 31\n9 = 23 + 30\n10 = 20 + 32\n\n**Example 2:**\n\n**Input:** x = 3, y = 5, bound = 15\n**Output:** \\[2,4,6,8,10,14\\]\n\n**Constraints:**\n\n*   `1 <= x, y <= 100`\n*   `0 <= bound <= 106`",
          "output": "def powerfulIntegers(x, y, bound):\n    max_i = 0 if x == 1 else int(math.log(bound, x))\n    max_j = 0 if y == 1 else int(math.log(bound, y))\n    result_set = set()\n    \n    for i in range(max_i + 1):\n        for j in range(max_j + 1):\n            powerful_num = x ** i + y ** j\n            if powerful_num <= bound:\n                result_set.add(powerful_num)\n                \n    return list(result_set)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the **desired** [**pre-order traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order) of the binary tree.\n\nAny node in the binary tree can be **flipped** by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\n\nFlip the **smallest** number of nodes so that the **pre-order traversal** of the tree **matches** `voyage`.\n\nReturn _a list of the values of all **flipped** nodes. You may return the answer in **any order**. If it is **impossible** to flip the nodes in the tree to make the pre-order traversal match_ `voyage`_, return the list_ `[-1]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2\\], voyage = \\[2,1\\]\n**Output:** \\[-1\\]\n**Explanation:** It is impossible to flip the nodes such that the pre-order traversal matches voyage.\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3\\], voyage = \\[1,3,2\\]\n**Output:** \\[1\\]\n**Explanation:** Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.\n\n**Example 3:**\n\n**Input:** root = \\[1,2,3\\], voyage = \\[1,2,3\\]\n**Output:** \\[\\]\n**Explanation:** The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.\n\n**Constraints:**\n\n*   The number of nodes in the tree is `n`.\n*   `n == voyage.length`\n*   `1 <= n <= 100`\n*   `1 <= Node.val, voyage[i] <= n`\n*   All the values in the tree are **unique**.\n*   All the values in `voyage` are **unique**.",
          "output": "from collections import deque\n\ndef shortestBridge(grid):\n    n = len(grid)\n    q = deque()\n\n    # Find the first island and mark it\n    for i in range(n):\n        if any(grid[i]):\n            first_row = i\n            first_col = grid[first_row].index(1)\n            break\n\n    dfs(grid, q, first_row, first_col)\n\n    steps = 0\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    while q:\n        for _ in range(len(q)):\n            x, y = q.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n:\n                    if grid[nx][ny] == 1:\n                        return steps\n                    elif grid[nx][ny] == 0:\n                        grid[nx][ny] = -1\n                        q.append((nx, ny))\n        steps += 1\n    return -1\n\ndef dfs(grid, q, i, j):\n    n = len(grid)\n    if not (0 <= i < n and 0 <= j < n and grid[i][j] == 1):\n        return\n    grid[i][j] = -1\n    q.append((i, j))\n    \n    dfs(grid, q, i - 1, j)\n    dfs(grid, q, i + 1, j)\n    dfs(grid, q, i, j - 1)\n    dfs(grid, q, i, j + 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\n\nA **rational number** can be represented using up to three parts: , , and a . The number will be represented in one of the following three ways:\n\n*   *   For example, `12`, `0`, and `123`.\n*   `**<.>**`\n    *   For example, `0.5`, `1.`, `2.12`, and `123.0001`.\n*   `**<.>****<(>****<)>**`\n    *   For example, `0.1(6)`, `1.(9)`, `123.00(1212)`.\n\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\n\n*   `1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"0.(52) \", t =  \"0.5(25) \"\n**Output:** true\n**Explanation:** Because  \"0.(52) \" represents 0.52525252..., and  \"0.5(25) \" represents 0.52525252525..... , the strings represent the same number.\n\n**Example 2:**\n\n**Input:** s =  \"0.1666(6) \", t =  \"0.166(66) \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** s =  \"0.9(9) \", t =  \"1. \"\n**Output:** true\n**Explanation:**  \"0.9(9) \" represents 0.999999999... repeated forever, which equals 1.  \\[[See this link for an explanation.](https://en.wikipedia.org/wiki/0.999...)\\]\n \"1. \" represents the number 1, which is formed correctly: (IntegerPart) =  \"1 \" and (NonRepeatingPart) =  \" \".\n\n**Constraints:**\n\n*   Each part consists only of digits.\n*   The does not have leading zeros (except for the zero itself).\n*   `1 <= .length <= 4`\n*   `0 <= .length <= 4`\n*   `1 <= .length <= 4`",
          "output": "def knightDialer(n: int) -> int:\n    if n == 1:\n        return 10\n    MOD = 10**9 + 7\n    moves = [\n        [4, 6], [6, 8], [7, 9], [4, 8], [0, 3, 9],\n        [], [1, 7, 0], [2, 6], [1, 3], [2, 4]\n    ]\n    dp = [1] * 10\n    for _ in range(2, n + 1):\n        new_dp = [0] * 10\n        for j in range(10):\n            for move in moves[j]:\n                new_dp[j] = (new_dp[j] + dp[move]) % MOD\n        dp = new_dp\n    return sum(dp) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: The **Fibonacci numbers**, commonly denoted `F(n)` form a sequence, called the **Fibonacci sequence**, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\nGiven `n`, calculate `F(n)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** F(2) = F(1) + F(0) = 1 + 0 = 1.\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** F(3) = F(2) + F(1) = 1 + 1 = 2.\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:** 3\n**Explanation:** F(4) = F(3) + F(2) = 2 + 1 = 3.\n\n**Constraints:**\n\n*   `0 <= n <= 30`",
          "output": "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.\n\nThe distance between two points on the **X-Y** plane is the Euclidean distance (i.e., `\u221a(x1 - x2)2 + (y1 - y2)2`).\n\nYou may return the answer in **any order**. The answer is **guaranteed** to be **unique** (except for the order that it is in).\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,3\\],\\[-2,2\\]\\], k = 1\n**Output:** \\[\\[-2,2\\]\\]\n**Explanation:**\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just \\[\\[-2,2\\]\\].\n\n**Example 2:**\n\n**Input:** points = \\[\\[3,3\\],\\[5,-1\\],\\[-2,4\\]\\], k = 2\n**Output:** \\[\\[3,3\\],\\[-2,4\\]\\]\n**Explanation:** The answer \\[\\[-2,4\\],\\[3,3\\]\\] would also be accepted.\n\n**Constraints:**\n\n*   `1 <= k <= points.length <= 104`\n*   `-104 < xi, yi < 104`",
          "output": "def moves_to_stamp(stamp: str, target: str) -> list:\n    result = []\n    is_stamped = [False] * len(target)\n    stamp_count = 0\n    target = list(target)\n\n    while stamp_count < 10 * len(target):\n        found_stamp = False\n        for i in range(len(target) - len(stamp) + 1):\n            if is_stamped[i]:\n                continue\n            j = 0\n            overlap = 0\n            while j < len(stamp) and (target[i + j] == '?' or target[i + j] == stamp[j]):\n                if target[i + j] == stamp[j]:\n                    overlap += 1\n                j += 1\n            if j == len(stamp) and overlap > 0:\n                for j in range(len(stamp)):\n                    target[i + j] = '?'\n                result.append(i)\n                is_stamped[i] = True\n                found_stamp = True\n        if not found_stamp:\n            break\n        \n        stamp_count += 1\n\n    for c in target:\n        if c != '?':\n            return []\n\n    return result[::-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return _the number of non-empty **subarrays** that have a sum divisible by_ `k`.\n\nA **subarray** is a **contiguous** part of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,5,0,-2,-3,1\\], k = 5\n**Output:** 7\n**Explanation:** There are 7 subarrays with a sum divisible by k = 5:\n\\[4, 5, 0, -2, -3, 1\\], \\[5\\], \\[5, 0\\], \\[5, 0, -2, -3\\], \\[0\\], \\[0, -2, -3\\], \\[-2, -3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[5\\], k = 9\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-104 <= nums[i] <= 104`\n*   `2 <= k <= 104`",
          "output": "def subarraysDivByK(nums, k):\n    prefix_sums_mod_k = [0] * k\n    prefix_sums_mod_k[0] = 1\n    running_sum = 0\n    count = 0\n    \n    for num in nums:\n        running_sum += num\n        mod = (running_sum % k + k) % k\n        count += prefix_sums_mod_k[mod]\n        prefix_sums_mod_k[mod] += 1\n    \n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called **odd-numbered jumps**, and the (2nd, 4th, 6th, ...) jumps in the series are called **even-numbered jumps**. Note that the **jumps** are numbered, not the indices.\n\nYou may jump forward from index `i` to index `j` (with `i < j`) in the following way:\n\n*   During **odd-numbered jumps** (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n*   During **even-numbered jumps** (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n*   It may be the case that for some index `i`, there are no legal jumps.\n\nA starting index is **good** if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once).\n\nReturn _the number of **good** starting indices_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[10,13,12,14,15\\]\n**Output:** 2\n**Explanation:** \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr\\[2\\] is the smallest among arr\\[1\\], arr\\[2\\], arr\\[3\\], arr\\[4\\] that is greater or equal to arr\\[0\\]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.\n\n**Example 2:**\n\n**Input:** arr = \\[2,3,1,1,4\\]\n**Output:** 3\n**Explanation:** \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr\\[1\\] is the smallest value in \\[arr\\[1\\], arr\\[2\\], arr\\[3\\], arr\\[4\\]\\] that is greater than or equal to arr\\[0\\].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr\\[2\\] is the largest value in \\[arr\\[2\\], arr\\[3\\], arr\\[4\\]\\] that is less than or equal to arr\\[1\\]. arr\\[3\\] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr\\[3\\] is the smallest value in \\[arr\\[3\\], arr\\[4\\]\\] that is greater than or equal to arr\\[2\\].\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.\n\n**Example 3:**\n\n**Input:** arr = \\[5,1,3,4,2\\]\n**Output:** 3\n**Explanation:** We can reach the end from starting indices 1, 2, and 4.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 2 * 104`\n*   `0 <= arr[i] < 105`",
          "output": "def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:\n    if not root:\n        return 0\n    if root.val < low:\n        return self.rangeSumBST(root.right, low, high)\n    if root.val > high:\n        return self.rangeSumBST(root.left, low, high)\n    return root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the largest perimeter of a triangle with a non-zero area, formed from three of these lengths_. If it is impossible to form any triangle of a non-zero area, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,2\\]\n**Output:** 5\n**Explanation:** You can form a triangle with three side lengths: 1, 2, and 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,1,10\\]\n**Output:** 0\n**Explanation:** \nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 104`\n*   `1 <= nums[i] <= 106`",
          "output": "def min_area_rect(points):\n    point_set = {(x, y) for x, y in points}\n    min_area = float('inf')\n\n    for p1 in point_set:\n        for p2 in point_set:\n            if p1[0] != p2[0] and p1[1] != p2[1]:\n                if (p1[0], p2[1]) in point_set and (p2[0], p1[1]) in point_set:\n                    min_area = min(min_area, abs((p1[0] - p2[0]) * (p1[1] - p2[1])))\n\n    return min_area if min_area != float('inf') else 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` sorted in **non-decreasing** order, return _an array of **the squares of each number** sorted in non-decreasing order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-4,-1,0,3,10\\]\n**Output:** \\[0,1,9,16,100\\]\n**Explanation:** After squaring, the array becomes \\[16,1,0,9,100\\].\nAfter sorting, it becomes \\[0,1,9,16,100\\].\n\n**Example 2:**\n\n**Input:** nums = \\[-7,-3,2,3,11\\]\n**Output:** \\[4,9,9,49,121\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `nums` is sorted in **non-decreasing** order.\n\n**Follow up:** Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?",
          "output": "def distinctSubseqII(s):\n    mod = 10**9 + 7\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    last = [-1] * 26\n\n    for i in range(1, n + 1):\n        dp[i] = (dp[i - 1] * 2) % mod\n        if last[ord(s[i - 1]) - ord('a')] != -1:\n            dp[i] = (dp[i] - dp[last[ord(s[i - 1]) - ord('a')]] + mod) % mod\n        last[ord(s[i - 1]) - ord('a')] = i - 1\n\n    dp[n] = (dp[n] - 1 + mod) % mod\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, return _the length of a maximum size turbulent subarray of_ `arr`.\n\nA subarray is **turbulent** if the comparison sign flips between each adjacent pair of elements in the subarray.\n\nMore formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if:\n\n*   For `i <= k < j`:\n    *   `arr[k] > arr[k + 1]` when `k` is odd, and\n    *   `arr[k] < arr[k + 1]` when `k` is even.\n*   Or, for `i <= k < j`:\n    *   `arr[k] > arr[k + 1]` when `k` is even, and\n    *   `arr[k] < arr[k + 1]` when `k` is odd.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[9,4,2,10,7,8,8,1,9\\]\n**Output:** 5\n**Explanation:** arr\\[1\\] > arr\\[2\\] < arr\\[3\\] > arr\\[4\\] < arr\\[5\\]\n\n**Example 2:**\n\n**Input:** arr = \\[4,8,12,16\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** arr = \\[100\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= arr.length <= 4 * 104`\n*   `0 <= arr[i] <= 109`",
          "output": "def valid_mountain_array(arr):\n    n, i, j = len(arr), 0, len(arr) - 1\n    while i + 1 < n and arr[i] < arr[i + 1]:\n        i += 1\n    while j > 0 and arr[j - 1] > arr[j]:\n        j -= 1\n    return i > 0 and i == j and j < n - 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins. There are `n` coins in total throughout the whole tree.\n\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\n\nReturn _the **minimum** number of moves required to make every node have **exactly** one coin_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,0,0\\]\n**Output:** 2\n**Explanation:** From the root of the tree, we move one coin to its left child, and one coin to its right child.\n\n**Example 2:**\n\n**Input:** root = \\[0,3,0\\]\n**Output:** 3\n**Explanation:** From the left child of the root, we move two coins to the root \\[taking two moves\\]. Then, we move one coin from the root of the tree to the right child.\n\n**Constraints:**\n\n*   The number of nodes in the tree is `n`.\n*   `1 <= n <= 100`\n*   `0 <= Node.val <= n`\n*   The sum of all `Node.val` is `n`.",
          "output": "def decode_permutation(s: str):\n    n = len(s)\n    perm = [0] * (n + 1)\n    next_zero, next_one = 0, n\n\n    for c in s:\n        if c == '0':\n            perm[next_zero] = next_one\n            next_zero += 1\n            next_one -= 1\n        else:\n            perm[next_one] = next_zero\n            next_one -= 1\n            next_zero += 1\n\n    perm[next_zero] = next_one\n    return perm\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer array `grid` where `grid[i][j]` could be:\n\n*   `1` representing the starting square. There is exactly one starting square.\n*   `2` representing the ending square. There is exactly one ending square.\n*   `0` representing empty squares we can walk over.\n*   `-1` representing obstacles that we cannot walk over.\n\nReturn _the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0,0,0\\],\\[0,0,0,0\\],\\[0,0,2,-1\\]\\]\n**Output:** 2\n**Explanation:** We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0,0,0\\],\\[0,0,0,0\\],\\[0,0,0,2\\]\\]\n**Output:** 4\n**Explanation:** We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n\n**Example 3:**\n\n**Input:** grid = \\[\\[0,1\\],\\[2,0\\]\\]\n**Output:** 0\n**Explanation:** There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 20`\n*   `1 <= m * n <= 20`\n*   `-1 <= grid[i][j] <= 2`\n*   There is exactly one starting cell and one ending cell.",
          "output": "from itertools import permutations\n\ndef smallestSuperstring(words):\n    def get_shared_length(a, b):\n        for shared_length in range(min(len(a), len(b)), 0, -1):\n            if a[-shared_length:] == b[:shared_length]:\n                return shared_length\n        return 0\n\n    def merge(a, b, shared_length):\n        return a + b[shared_length:]\n\n    def get_total_length(merged_words):\n        return sum(len(word) for word in merged_words)\n\n    best = None\n    for perm in permutations(words):\n        merged_words = list(perm)\n        for i in range(len(words) - 1):\n            shared_length = get_shared_length(merged_words[i], merged_words[i + 1])\n            merged_words[i + 1] = merge(merged_words[i], merged_words[i + 1], shared_length)\n        if best is None or get_total_length(merged_words) < len(best):\n            best = \"\".join(merged_words)\n\n    return best\n"
     },
     {
          "instruction": "Write python code for this problem: Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\n\nImplement the `TimeMap` class:\n\n*   `TimeMap()` Initializes the object of the data structure.\n*   `void set(String key, String value, int timestamp)` Stores the key `key` with the value `value` at the given time `timestamp`.\n*   `String get(String key, int timestamp)` Returns a value such that `set` was called previously, with `timestamp_prev <= timestamp`. If there are multiple such values, it returns the value associated with the largest `timestamp_prev`. If there are no values, it returns `\" \"`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"TimeMap \",  \"set \",  \"get \",  \"get \",  \"set \",  \"get \",  \"get \"\\]\n\\[\\[\\], \\[ \"foo \",  \"bar \", 1\\], \\[ \"foo \", 1\\], \\[ \"foo \", 3\\], \\[ \"foo \",  \"bar2 \", 4\\], \\[ \"foo \", 4\\], \\[ \"foo \", 5\\]\\]\n**Output**\n\\[null, null,  \"bar \",  \"bar \", null,  \"bar2 \",  \"bar2 \"\\]\n\n**Explanation**\nTimeMap timeMap = new TimeMap();\ntimeMap.set( \"foo \",  \"bar \", 1);  // store the key  \"foo \" and value  \"bar \" along with timestamp = 1.\ntimeMap.get( \"foo \", 1);         // return  \"bar \"\ntimeMap.get( \"foo \", 3);         // return  \"bar \", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is  \"bar \".\ntimeMap.set( \"foo \",  \"bar2 \", 4); // store the key  \"foo \" and value  \"bar2 \" along with timestamp = 4.\ntimeMap.get( \"foo \", 4);         // return  \"bar2 \"\ntimeMap.get( \"foo \", 5);         // return  \"bar2 \"\n\n**Constraints:**\n\n*   `1 <= key.length, value.length <= 100`\n*   `key` and `value` consist of lowercase English letters and digits.\n*   `1 <= timestamp <= 107`\n*   All the timestamps `timestamp` of `set` are strictly increasing.\n*   At most `2 * 105` calls will be made to `set` and `get`.",
          "output": "def min_deletion_size(strs):\n    num_deleted = 0\n    for col in range(len(strs[0])):\n        for row in range(1, len(strs)):\n            if strs[row][col] < strs[row - 1][col]:\n                num_deleted += 1\n                break\n    return num_deleted\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array nums, return _the number of **AND triples**_.\n\nAn **AND triple** is a triple of indices `(i, j, k)` such that:\n\n*   `0 <= i < nums.length`\n*   `0 <= j < nums.length`\n*   `0 <= k < nums.length`\n*   `nums[i] & nums[j] & nums[k] == 0`, where `&` represents the bitwise-AND operator.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,3\\]\n**Output:** 12\n**Explanation:** We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,0\\]\n**Output:** 27\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] < 216`",
          "output": "def min_moves_unique(nums):\n    nums.sort()\n    moves = 0\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i - 1]:\n            diff = nums[i - 1] - nums[i] + 1\n            moves += diff\n            nums[i] += diff\n    return moves\n"
     },
     {
          "instruction": "Write python code for this problem: You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array `days`. Each day is an integer from `1` to `365`.\n\nTrain tickets are sold in **three different ways**:\n\n*   a **1-day** pass is sold for `costs[0]` dollars,\n*   a **7-day** pass is sold for `costs[1]` dollars, and\n*   a **30-day** pass is sold for `costs[2]` dollars.\n\nThe passes allow that many days of consecutive travel.\n\n*   For example, if we get a **7-day** pass on day `2`, then we can travel for `7` days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`.\n\nReturn _the minimum number of dollars you need to travel every day in the given list of days_.\n\n",
          "input": "**Example 1:**\n\n**Input:** days = \\[1,4,6,7,8,20\\], costs = \\[2,7,15\\]\n**Output:** 11\n**Explanation:** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs\\[0\\] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs\\[1\\] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs\\[0\\] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n\n**Example 2:**\n\n**Input:** days = \\[1,2,3,4,5,6,7,8,9,10,30,31\\], costs = \\[2,7,15\\]\n**Output:** 17\n**Explanation:** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs\\[2\\] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs\\[0\\] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\n\n**Constraints:**\n\n*   `1 <= days.length <= 365`\n*   `1 <= days[i] <= 365`\n*   `days` is in strictly increasing order.\n*   `costs.length == 3`\n*   `1 <= costs[i] <= 1000`",
          "output": "def validateStackSequences(pushed, popped):\n    stack = []\n    popIndex = 0\n    \n    for pushValue in pushed:\n        stack.append(pushValue)\n        while stack and stack[-1] == popped[popIndex]:\n            stack.pop()\n            popIndex += 1\n    \n    return not stack\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `a` and `b`, return **any** string `s` such that:\n\n*   `s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,\n*   The substring `'aaa'` does not occur in `s`, and\n*   The substring `'bbb'` does not occur in `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** a = 1, b = 2\n**Output:**  \"abb \"\n**Explanation:**  \"abb \",  \"bab \" and  \"bba \" are all correct answers.\n\n**Example 2:**\n\n**Input:** a = 4, b = 1\n**Output:**  \"aabaa \"\n\n**Constraints:**\n\n*   `0 <= a, b <= 100`\n*   It is guaranteed such an `s` exists for the given `a` and `b`.",
          "output": "from collections import defaultdict\n\ndef removeStones(stones):\n    row_groups = defaultdict(int)\n    col_groups = defaultdict(int)\n    group_count = 0\n    \n    groups = defaultdict(list)\n    \n    for x, y in stones:\n        if x not in row_groups:\n            row_groups[x] = group_count\n            group_count += 1\n        if y + 10001 not in col_groups: # Offset by max row index\n            col_groups[y + 10001] = group_count\n            group_count += 1\n            \n        group_x, group_y = row_groups[x], col_groups[y + 10001]\n        groups[group_x].append(group_y)\n        groups[group_y].append(group_x)\n    \n    visited = [False] * group_count\n    \n    def dfs(groupId):\n        if visited[groupId]:\n            return 0\n        visited[groupId] = True\n        size = 1\n        for neighbor in groups[groupId]:\n            size += dfs(neighbor)\n        return size\n    \n    max_stones = 0\n    for groupId in range(group_count):\n        max_stones += dfs(groupId) - 1\n    \n    return max_stones\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an array `queries` where `queries[i] = [vali, indexi]`.\n\nFor each query `i`, first, apply `nums[indexi] = nums[indexi] + vali`, then print the sum of the even values of `nums`.\n\nReturn _an integer array_ `answer` _where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\], queries = \\[\\[1,0\\],\\[-3,1\\],\\[-4,0\\],\\[2,3\\]\\]\n**Output:** \\[8,6,2,4\\]\n**Explanation:** At the beginning, the array is \\[1,2,3,4\\].\nAfter adding 1 to nums\\[0\\], the array is \\[2,2,3,4\\], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums\\[1\\], the array is \\[2,-1,3,4\\], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums\\[0\\], the array is \\[-2,-1,3,4\\], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums\\[3\\], the array is \\[-2,-1,3,6\\], and the sum of even values is -2 + 6 = 4.\n\n**Example 2:**\n\n**Input:** nums = \\[1\\], queries = \\[\\[4,0\\]\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `1 <= queries.length <= 104`\n*   `-104 <= vali <= 104`\n*   `0 <= indexi < nums.length`",
          "output": "def bag_of_tokens_score(tokens, power):\n    tokens.sort()\n    max_score = score = 0\n    left, right = 0, len(tokens) - 1\n\n    while left <= right:\n        if power >= tokens[left]:\n            power -= tokens[left]\n            left += 1\n            score += 1\n            max_score = max(max_score, score)\n        elif score > 0:\n            power += tokens[right]\n            right -= 1\n            score -= 1\n        else:\n            break\n\n    return max_score\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise **disjoint** and in **sorted order**.\n\nReturn _the intersection of these two interval lists_.\n\nA **closed interval** `[a, b]` (with `a <= b`) denotes the set of real numbers `x` with `a <= x <= b`.\n\nThe **intersection** of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** firstList = \\[\\[0,2\\],\\[5,10\\],\\[13,23\\],\\[24,25\\]\\], secondList = \\[\\[1,5\\],\\[8,12\\],\\[15,24\\],\\[25,26\\]\\]\n**Output:** \\[\\[1,2\\],\\[5,5\\],\\[8,10\\],\\[15,23\\],\\[24,24\\],\\[25,25\\]\\]\n\n**Example 2:**\n\n**Input:** firstList = \\[\\[1,3\\],\\[5,9\\]\\], secondList = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `0 <= firstList.length, secondList.length <= 1000`\n*   `firstList.length + secondList.length >= 1`\n*   `0 <= starti < endi <= 109`\n*   `endi < starti+1`\n*   `0 <= startj < endj <= 109`\n*   `endj < startj+1`",
          "output": "from itertools import permutations\n\ndef largestTimeFromDigits(arr):\n    max_time = -1\n    for h, i, j, k in permutations(arr):\n        hour = h * 10 + i\n        minute = j * 10 + k\n        time = hour * 60 + minute\n        if hour < 24 and minute < 60 and time > max_time:\n            max_time = time\n\n    if max_time == -1:\n        return \"\"\n    else:\n        return \"{:02d}:{:02d}\".format(max_time // 60, max_time % 60)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree.\n\nFor each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.\n\nThe **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\n\nReturn _the **vertical order traversal** of the binary tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** \\[\\[9\\],\\[3,15\\],\\[20\\],\\[7\\]\\]\n**Explanation:**\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,4,5,6,7\\]\n**Output:** \\[\\[4\\],\\[2\\],\\[1,5,6\\],\\[3\\],\\[7\\]\\]\n**Explanation:**\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n\n**Example 3:**\n\n**Input:** root = \\[1,2,3,4,6,5,7\\]\n**Output:** \\[\\[4\\],\\[2\\],\\[1,5,6\\],\\[3\\],\\[7\\]\\]\n**Explanation:**\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `0 <= Node.val <= 1000`",
          "output": "from collections import deque\n\ndef deckRevealedIncreasing(deck):\n    n = len(deck)\n    index = deque(range(n))\n    ans = [0] * n\n\n    deck.sort()\n    for card in deck:\n        ans[index.popleft()] = card\n        if index:\n            index.append(index.popleft())\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree where each node has a value in the range `[0, 25]` representing the letters `'a'` to `'z'`.\n\nReturn _the **lexicographically smallest** string that starts at a leaf of this tree and ends at the root_.\n\nAs a reminder, any shorter prefix of a string is **lexicographically smaller**.\n\n*   For example, `\"ab \"` is lexicographically smaller than `\"aba \"`.\n\nA leaf of a node is a node that has no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[0,1,2,3,4,3,4\\]\n**Output:**  \"dba \"\n\n**Example 2:**\n\n**Input:** root = \\[25,1,3,1,3,0,2\\]\n**Output:**  \"adz \"\n\n**Example 3:**\n\n**Input:** root = \\[2,2,1,null,1,0,null,0\\]\n**Output:**  \"abc \"\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 8500]`.\n*   `0 <= Node.val <= 25`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef flipEquiv(root1, root2):\n    if not root1 and not root2: return True\n    if not root1 or not root2: return False\n    if root1.val != root2.val: return False\n    return (flipEquiv(root1.left, root2.left) and flipEquiv(root1.right, root2.right)) or \\\n           (flipEquiv(root1.left, root2.right) and flipEquiv(root1.right, root2.left))\n"
     },
     {
          "instruction": "Write python code for this problem: The **array-form** of an integer `num` is an array representing its digits in left to right order.\n\n*   For example, for `num = 1321`, the array form is `[1,3,2,1]`.\n\nGiven `num`, the **array-form** of an integer, and an integer `k`, return _the **array-form** of the integer_ `num + k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = \\[1,2,0,0\\], k = 34\n**Output:** \\[1,2,3,4\\]\n**Explanation:** 1200 + 34 = 1234\n\n**Example 2:**\n\n**Input:** num = \\[2,7,4\\], k = 181\n**Output:** \\[4,5,5\\]\n**Explanation:** 274 + 181 = 455\n\n**Example 3:**\n\n**Input:** num = \\[2,1,5\\], k = 806\n**Output:** \\[1,0,2,1\\]\n**Explanation:** 215 + 806 = 1021\n\n**Constraints:**\n\n*   `1 <= num.length <= 104`\n*   `0 <= num[i] <= 9`\n*   `num` does not contain any leading zeros except for the zero itself.\n*   `1 <= k <= 104`",
          "output": "from collections import defaultdict\n\ndef largestComponentSize(nums):\n    def primes(n):\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return i\n        return n\n\n    def dfs(node, visited, graph):\n        if node in visited:\n            return 0\n        visited.add(node)\n        size = 1\n        for neighbor in graph[node]:\n            size += dfs(neighbor, visited, graph)\n        return size\n\n    graph = defaultdict(set)\n    visited = set()\n\n    for num in nums:\n        prime = primes(num)\n        graph[prime].add(num)\n        if num != prime:\n            graph[num].add(prime)\n\n    count = 0\n    for num in nums:\n        count = max(count, dfs(num, visited, graph))\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `equations` that represent relationships between variables where each string `equations[i]` is of length `4` and takes one of two different forms: `\"xi==yi \"` or `\"xi!=yi \"`.Here, `xi` and `yi` are lowercase letters (not necessarily different) that represent one-letter variable names.\n\nReturn `true` _if it is possible to assign integers to variable names so as to satisfy all the given equations, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** equations = \\[ \"a==b \", \"b!=a \"\\]\n**Output:** false\n**Explanation:** If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n\n**Example 2:**\n\n**Input:** equations = \\[ \"b==a \", \"a==b \"\\]\n**Output:** true\n**Explanation:** We could assign a = 1 and b = 1 to satisfy both equations.\n\n**Constraints:**\n\n*   `1 <= equations.length <= 500`\n*   `equations[i].length == 4`\n*   `equations[i][0]` is a lowercase letter.\n*   `equations[i][1]` is either `'='` or `'!'`.\n*   `equations[i][2]` is `'='`.\n*   `equations[i][3]` is a lowercase letter.",
          "output": "def is_alien_sorted(words, order):\n    alien_order = {char: i for i, char in enumerate(order)}\n\n    for i in range(1, len(words)):\n        for j in range(len(words[i - 1])):\n            if j == len(words[i]):\n                return False\n\n            if words[i - 1][j] != words[i][j]:\n                if alien_order[words[i - 1][j]] > alien_order[words[i][j]]:\n                    return False\n                break\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: There is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can:\n\n*   multiply the number on display by `2`, or\n*   subtract `1` from the number on display.\n\nGiven two integers `startValue` and `target`, return _the minimum number of operations needed to display_ `target` _on the calculator_.\n\n",
          "input": "**Example 1:**\n\n**Input:** startValue = 2, target = 3\n**Output:** 2\n**Explanation:** Use double operation and then decrement operation {2 -> 4 -> 3}.\n\n**Example 2:**\n\n**Input:** startValue = 5, target = 8\n**Output:** 2\n**Explanation:** Use decrement and then double {5 -> 4 -> 8}.\n\n**Example 3:**\n\n**Input:** startValue = 3, target = 10\n**Output:** 3\n**Explanation:** Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n**Constraints:**\n\n*   `1 <= startValue, target <= 109`",
          "output": "def can_reorder_array(arr):\n    from collections import Counter\n    \n    count = Counter(arr)\n    arr = sorted(arr)\n    for x in arr:\n        if count[x] == 0:\n            continue\n        if count[2 * x] > 0:\n            count[x] -= 1\n            count[2 * x] -= 1\n        else:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return _the number of **good subarrays** of_ `nums`.\n\nA **good array** is an array where the number of different integers in that array is exactly `k`.\n\n*   For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.\n\nA **subarray** is a **contiguous** part of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,1,2,3\\], k = 2\n**Output:** 7\n**Explanation:** Subarrays formed with exactly 2 different integers: \\[1,2\\], \\[2,1\\], \\[1,2\\], \\[2,3\\], \\[1,2,1\\], \\[2,1,2\\], \\[1,2,1,2\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,1,3,4\\], k = 3\n**Output:** 3\n**Explanation:** Subarrays formed with exactly 3 different integers: \\[1,2,1,3\\], \\[2,1,3\\], \\[1,3,4\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `1 <= nums[i], k <= nums.length`",
          "output": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        n = len(strs)\n        m = len(strs[0])\n        dp = [1] * m\n\n        for j in range(m):\n            for i in range(j):\n                flag = all(strs[k][i] <= strs[k][j] for k in range(n - 1))\n                dp[j] = max(dp[j], dp[i] + 1) if flag else dp[j]\n\n        return m - max(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree with unique values and the values of two different nodes of the tree `x` and `y`, return `true` _if the nodes corresponding to the values_ `x` _and_ `y` _in the tree are **cousins**, or_ `false` _otherwise._\n\nTwo nodes of a binary tree are **cousins** if they have the same depth with different parents.\n\nNote that in a binary tree, the root node is at the depth `0`, and children of each depth `k` node are at the depth `k + 1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4\\], x = 4, y = 3\n**Output:** false\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,null,4,null,5\\], x = 5, y = 4\n**Output:** true\n\n**Example 3:**\n\n**Input:** root = \\[1,2,3,null,4\\], x = 2, y = 3\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 100]`.\n*   `1 <= Node.val <= 100`\n*   Each node has a **unique** value.\n*   `x != y`\n*   `x` and `y` are exist in the tree.",
          "output": "def tallestBillboard(rods):\n    n = len(rods)\n    totalLength = sum(rods)\n    dp = [[-1] * (totalLength + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(totalLength + 1):\n            dp[i][j] = dp[i - 1][j]\n            if rods[i - 1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - rods[i - 1]] + rods[i - 1])\n            if rods[i - 1] <= totalLength - j:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j + rods[i - 1]])\n                \n    return dp[n][0] // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` `grid` where each cell can have one of three values:\n\n*   `0` representing an empty cell,\n*   `1` representing a fresh orange, or\n*   `2` representing a rotten orange.\n\nEvery minute, any fresh orange that is **4-directionally adjacent** to a rotten orange becomes rotten.\n\nReturn _the minimum number of minutes that must elapse until no cell has a fresh orange_. If _this is impossible, return_ `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[2,1,1\\],\\[1,1,0\\],\\[0,1,1\\]\\]\n**Output:** 4\n\n**Example 2:**\n\n**Input:** grid = \\[\\[2,1,1\\],\\[0,1,1\\],\\[1,0,1\\]\\]\n**Output:** -1\n**Explanation:** The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[0,2\\]\\]\n**Output:** 0\n**Explanation:** Since there are already no fresh oranges at minute 0, the answer is just 0.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 10`\n*   `grid[i][j]` is `0`, `1`, or `2`.",
          "output": "def prisonAfterNDays(cells, n):\n    n = n % 14 if n % 14 != 0 else 14 # Pattern repeats every 14 days\n\n    for _ in range(n):\n        temp = [0] * 8\n        for i in range(1, 7):\n            temp[i] = int(cells[i - 1] == cells[i + 1])\n        cells = temp\n\n    return cells\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a binary array `nums` and an integer `k`.\n\nA **k-bit flip** is choosing a **subarray** of length `k` from `nums` and simultaneously changing every `0` in the subarray to `1`, and every `1` in the subarray to `0`.\n\nReturn _the minimum number of **k-bit flips** required so that there is no_ `0` _in the array_. If it is not possible, return `-1`.\n\nA **subarray** is a **contiguous** part of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,0\\], k = 1\n**Output:** 2\n**Explanation:** Flip nums\\[0\\], then flip nums\\[2\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,0\\], k = 2\n**Output:** -1\n**Explanation:** No matter how we flip subarrays of size 2, we cannot make the array become \\[1,1,1\\].\n\n**Example 3:**\n\n**Input:** nums = \\[0,0,0,1,0,1,1,0\\], k = 3\n**Output:** 3\n**Explanation:** \nFlip nums\\[0\\],nums\\[1\\],nums\\[2\\]: nums becomes \\[1,1,1,1,0,1,1,0\\]\nFlip nums\\[4\\],nums\\[5\\],nums\\[6\\]: nums becomes \\[1,1,1,1,1,0,0,0\\]\nFlip nums\\[5\\],nums\\[6\\],nums\\[7\\]: nums becomes \\[1,1,1,1,1,1,1,1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= k <= nums.length`",
          "output": "def min_k_bit_flips(nums, k):\n    n = len(nums)\n    flipped = [0] * n\n    flips = ans = 0\n    for i in range(n):\n        if i >= k:\n            flips -= flipped[i - k]\n        if (flips + nums[i]) % 2 == 0:\n            if i + k > n:\n                return -1\n            flipped[i] = 1\n            flips += 1\n            ans += 1\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: An array is **squareful** if the sum of every pair of adjacent elements is a **perfect square**.\n\nGiven an integer array nums, return _the number of permutations of_ `nums` _that are **squareful**_.\n\nTwo permutations `perm1` and `perm2` are different if there is some index `i` such that `perm1[i] != perm2[i]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,17,8\\]\n**Output:** 2\n**Explanation:** \\[1,8,17\\] and \\[17,8,1\\] are the valid permutations.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 12`\n*   `0 <= nums[i] <= 109`",
          "output": "from collections import Counter\n\ndef numSquarefulPerms(nums):\n    def is_square(n):\n        return int(n ** 0.5) ** 2 == n\n\n    def dfs(idx):\n        if idx == len(nums):\n            return 1\n\n        count = 0\n        for key in counter.keys():\n            if counter[key] and (idx == 0 or is_square(nums[idx - 1] + key)):\n                counter[key] -= 1\n                nums[idx] = key\n                count += dfs(idx + 1)\n                counter[key] += 1\n\n        return count\n\n    key_set, counter = set(nums), Counter(nums)\n    return dfs(0)\n"
     },
     {
          "instruction": "Write python code for this problem: In a town, there are `n` people labeled from `1` to `n`. There is a rumor that one of these people is secretly the town judge.\n\nIf the town judge exists, then:\n\n1.  The town judge trusts nobody.\n2.  Everybody (except for the town judge) trusts the town judge.\n3.  There is exactly one person that satisfies properties **1** and **2**.\n\nYou are given an array `trust` where `trust[i] = [ai, bi]` representing that the person labeled `ai` trusts the person labeled `bi`. If a trust relationship does not exist in `trust` array, then such a trust relationship does not exist.\n\nReturn _the label of the town judge if the town judge exists and can be identified, or return_ `-1` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, trust = \\[\\[1,2\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** n = 3, trust = \\[\\[1,3\\],\\[2,3\\]\\]\n**Output:** 3\n\n**Example 3:**\n\n**Input:** n = 3, trust = \\[\\[1,3\\],\\[2,3\\],\\[3,1\\]\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `0 <= trust.length <= 104`\n*   `trust[i].length == 2`\n*   All the pairs of `trust` are **unique**.\n*   `ai != bi`\n*   `1 <= ai, bi <= n`",
          "output": "def findJudge(n, trust):\n    trust_counts = [0] * (n + 1)\n    for a, b in trust:\n        trust_counts[a] -= 1\n        trust_counts[b] += 1\n    for i in range(1, n + 1):\n        if trust_counts[i] == n - 1:\n            return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: A **maximum tree** is a tree where every node has a value greater than any other value in its subtree.\n\nYou are given the `root` of a maximum binary tree and an integer `val`.\n\nJust as in the [previous problem](https://leetcode.com/problems/maximum-binary-tree/), the given tree was constructed from a list `a` (`root = Construct(a)`) recursively with the following `Construct(a)` routine:\n\n*   If `a` is empty, return `null`.\n*   Otherwise, let `a[i]` be the largest element of `a`. Create a `root` node with the value `a[i]`.\n*   The left child of `root` will be `Construct([a[0], a[1], ..., a[i - 1]])`.\n*   The right child of `root` will be `Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])`.\n*   Return `root`.\n\nNote that we were not given `a` directly, only a root node `root = Construct(a)`.\n\nSuppose `b` is a copy of `a` with the value `val` appended to it. It is guaranteed that `b` has unique values.\n\nReturn `Construct(b)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,1,3,null,null,2\\], val = 5\n**Output:** \\[5,4,null,1,3,null,null,2\\]\n**Explanation:** a = \\[1,4,2,3\\], b = \\[1,4,2,3,5\\]\n\n**Example 2:**\n\n**Input:** root = \\[5,2,4,null,1\\], val = 3\n**Output:** \\[5,2,4,null,1,null,3\\]\n**Explanation:** a = \\[2,1,5,4\\], b = \\[2,1,5,4,3\\]\n\n**Example 3:**\n\n**Input:** root = \\[5,2,3,null,1\\], val = 4\n**Output:** \\[5,2,4,null,1,3\\]\n**Explanation:** a = \\[2,1,5,3\\], b = \\[2,1,5,3,4\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `1 <= Node.val <= 100`\n*   All the values of the tree are **unique**.\n*   `1 <= val <= 100`",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef is_complete_tree(root: TreeNode) -> bool:\n    if not root:\n        return True\n    \n    queue = [root]\n    while queue[0]:\n        node = queue.pop(0)\n        queue.append(node.left)\n        queue.append(node.right)\n    while queue and not queue[0]:\n        queue.pop(0)\n    return not queue\n"
     },
     {
          "instruction": "Write python code for this problem: On an `8 x 8` chessboard, there is **exactly one** white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.\n\nWhen the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered **attacking** a pawn if the rook can capture the pawn on the rook's turn. The **number of available captures** for the white rook is the number of pawns that the rook is **attacking**.\n\nReturn _the **number of available captures** for the white rook_.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"R \", \". \", \". \", \". \", \"p \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]\n**Output:** 3\n**Explanation:** In this example, the rook is attacking all the pawns.\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"p \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"B \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"B \", \"R \", \"B \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"B \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"p \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]\n**Output:** 0\n**Explanation:** The bishops are blocking the rook from attacking any of the pawns.\n\n**Example 3:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \"p \", \"p \", \". \", \"R \", \". \", \"p \", \"B \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]\n**Output:** 3\n**Explanation:** The rook is attacking the pawns at positions b5, d6, and f5.\n\n**Constraints:**\n\n*   `board.length == 8`\n*   `board[i].length == 8`\n*   `board[i][j]` is either `'R'`, `'.'`, `'B'`, or `'p'`\n*   There is exactly one cell with `board[i][j] == 'R'`",
          "output": "def regionsBySlashes(grid):\n    n = len(grid)\n    graph = [[0] * (n * 3) for _ in range(n * 3)]\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                graph[i * 3][j * 3 + 2] = graph[i * 3 + 1][j * 3 + 1] = graph[i * 3 + 2][j * 3] = 1\n            if grid[i][j] == '\\\\':\n                graph[i * 3][j * 3] = graph[i * 3 + 1][j * 3 + 1] = graph[i * 3 + 2][j * 3 + 2] = 1\n\n    regions = 0\n    for i in range(n * 3):\n        for j in range(n * 3):\n            if not graph[i][j]:\n                regions += 1\n                dfs(graph, i, j)\n\n    return regions\n\ndef dfs(graph, i, j):\n    n = len(graph)\n    if i < 0 or j < 0 or i >= n or j >= n or graph[i][j]:\n        return\n\n    graph[i][j] = 1\n    dfs(graph, i - 1, j)\n    dfs(graph, i + 1, j)\n    dfs(graph, i, j - 1)\n    dfs(graph, i, j + 1)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` piles of `stones` arranged in a row. The `ith` pile has `stones[i]` stones.\n\nA move consists of merging exactly `k` **consecutive** piles into one pile, and the cost of this move is equal to the total number of stones in these `k` piles.\n\nReturn _the minimum cost to merge all piles of stones into one pile_. If it is impossible, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[3,2,4,1\\], k = 2\n**Output:** 20\n**Explanation:** We start with \\[3, 2, 4, 1\\].\nWe merge \\[3, 2\\] for a cost of 5, and we are left with \\[5, 4, 1\\].\nWe merge \\[4, 1\\] for a cost of 5, and we are left with \\[5, 5\\].\nWe merge \\[5, 5\\] for a cost of 10, and we are left with \\[10\\].\nThe total cost was 20, and this is the minimum possible.\n\n**Example 2:**\n\n**Input:** stones = \\[3,2,4,1\\], k = 3\n**Output:** -1\n**Explanation:** After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\n\n**Example 3:**\n\n**Input:** stones = \\[3,5,1,2,6\\], k = 3\n**Output:** 25\n**Explanation:** We start with \\[3, 5, 1, 2, 6\\].\nWe merge \\[5, 1, 2\\] for a cost of 8, and we are left with \\[3, 8, 6\\].\nWe merge \\[3, 8, 6\\] for a cost of 17, and we are left with \\[17\\].\nThe total cost was 25, and this is the minimum possible.\n\n**Constraints:**\n\n*   `n == stones.length`\n*   `1 <= n <= 30`\n*   `1 <= stones[i] <= 100`\n*   `2 <= k <= 30`",
          "output": "def min_deletion_size(strs):\n    rows, cols = len(strs), len(strs[0])\n    count = 0\n    for c in range(cols):\n        for r in range(1, rows):\n            if strs[r - 1][c] > strs[r][c]:\n                count += 1\n                break\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: There is a 2D `grid` of size `n x n` where each cell of this grid has a lamp that is initially **turned off**.\n\nYou are given a 2D array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is **turned on**. Even if the same lamp is listed more than once, it is turned on.\n\nWhen a lamp is turned on, it **illuminates its cell** and **all other cells** in the same **row, column, or diagonal**.\n\nYou are also given another 2D array `queries`, where `queries[j] = [rowj, colj]`. For the `jth` query, determine whether `grid[rowj][colj]` is illuminated or not. After answering the `jth` query, **turn off** the lamp at `grid[rowj][colj]` and its **8 adjacent lamps** if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowj][colj]`.\n\nReturn _an array of integers_ `ans`_,_ _where_ `ans[j]` _should be_ `1` _if the cell in the_ `jth` _query was illuminated, or_ `0` _if the lamp was not._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, lamps = \\[\\[0,0\\],\\[4,4\\]\\], queries = \\[\\[1,1\\],\\[1,0\\]\\]\n**Output:** \\[1,0\\]\n**Explanation:** We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid\\[0\\]\\[0\\] then turning on the lamp at grid\\[4\\]\\[4\\].\nThe 0th query asks if the lamp at grid\\[1\\]\\[1\\] is illuminated or not (the blue square). It is illuminated, so set ans\\[0\\] = 1. Then, we turn off all lamps in the red square.\n \nThe 1st query asks if the lamp at grid\\[1\\]\\[0\\] is illuminated or not (the blue square). It is not illuminated, so set ans\\[1\\] = 0. Then, we turn off all lamps in the red rectangle.\n \n\n**Example 2:**\n\n**Input:** n = 5, lamps = \\[\\[0,0\\],\\[4,4\\]\\], queries = \\[\\[1,1\\],\\[1,1\\]\\]\n**Output:** \\[1,1\\]\n\n**Example 3:**\n\n**Input:** n = 5, lamps = \\[\\[0,0\\],\\[0,4\\]\\], queries = \\[\\[0,4\\],\\[0,1\\],\\[1,4\\]\\]\n**Output:** \\[1,1,0\\]\n\n**Constraints:**\n\n*   `1 <= n <= 109`\n*   `0 <= lamps.length <= 20000`\n*   `0 <= queries.length <= 20000`\n*   `lamps[i].length == 2`\n*   `0 <= rowi, coli < n`\n*   `queries[j].length == 2`\n*   `0 <= rowj, colj < n`",
          "output": "def repeatedNTimes(nums):\n    hash_map = {}\n    for num in nums:\n        if num in hash_map:\n            return num\n        else:\n            hash_map[num] = 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string array `words`, return _an array of all characters that show up in all strings within the_ `words` _(including duplicates)_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[\"bella\",\"label\",\"roller\"\\]\n**Output:** \\[\"e\",\"l\",\"l\"\\]\n\n**Example 2:**\n\n**Input:** words = \\[\"cool\",\"lock\",\"cook\"\\]\n**Output:** \\[\"c\",\"o\"\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists of lowercase English letters.",
          "output": "cript\r\nfunction maxWidthRamp(nums) {\r\n    const indices = [...Array(nums.length).keys()].sort((i, j) => {\r\n        return nums[i] === nums[j] ? i - j : nums[i] - nums[j];\r\n    });\r\n    \r\n    let maxWidth = 0;\r\n    let minIndex = Infinity;\r\n    for (const index of indices) {\r\n        maxWidth = Math.max(maxWidth, index - minIndex);\r\n        minIndex = Math.min(minIndex, index);\r\n    }\r\n    \r\n    return maxWidth;\r\n}\r\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, determine if it is **valid**.\n\nA string `s` is **valid** if, starting with an empty string `t = \" \"`, you can **transform** `t` **into** `s` after performing the following operation **any number of times**:\n\n*   Insert string `\"abc \"` into any position in `t`. More formally, `t` becomes `tleft + \"abc \" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be **empty**.\n\nReturn `true` _if_ `s` _is a **valid** string, otherwise, return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aabcbc \"\n**Output:** true\n**Explanation:**\n \" \" ->  \"abc \" ->  \"aabcbc \"\nThus,  \"aabcbc \" is valid.\n\n**Example 2:**\n\n**Input:** s =  \"abcabcababcc \"\n**Output:** true\n**Explanation:**\n \" \" ->  \"abc \" ->  \"abcabc \" ->  \"abcabcabc \" ->  \"abcabcababcc \"\nThus,  \"abcabcababcc \" is valid.\n\n**Example 3:**\n\n**Input:** s =  \"abccba \"\n**Output:** false\n**Explanation:** It is impossible to get  \"abccba \" using the operation.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2 * 104`\n*   `s` consists of letters `'a'`, `'b'`, and `'c'`",
          "output": "from collections import defaultdict\nfrom math import sqrt, inf\n\ndef minAreaFreeRect(points):\n    minArea = inf\n    xGroups = defaultdict(set)\n\n    for x, y in points:\n        xGroups[x].add(y)\n\n    for x1, ys1 in xGroups.items():\n        for x2, ys2 in xGroups.items():\n            if x1 == x2:\n                continue\n\n            for y1 in ys1:\n                for y2 in ys2:\n                    if y2 in ys1 and y1 in ys2:\n                        area = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) * sqrt((x1 - x2) ** 2 + (y1 - y1) ** 2)\n                        minArea = min(minArea, area)\n\n    return minArea if minArea != inf else 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary array `nums` and an integer `k`, return _the maximum number of consecutive_ `1`_'s in the array if you can flip at most_ `k` `0`'s.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1,0,0,0,1,1,1,1,0\\], k = 2\n**Output:** 6\n**Explanation:** \\[1,1,1,0,0,**1**,1,1,1,1,**1**\\]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1\\], k = 3\n**Output:** 10\n**Explanation:** \\[0,0,1,1,**1**,**1**,1,1,1,**1**,1,1,0,0,0,1,1,1,1\\]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`.\n*   `0 <= k <= nums.length`One thing's for sure, we will only flip a zero if it extends an existing window of 1s. Otherwise, there's no point in doing it, right? Think Sliding Window! Since we know this problem can be solved using the sliding window construct, we might as well focus in that direction for hints. Basically, in a given window, we can never have > K zeros, right? We don't have a fixed size window in this case. The window size can grow and shrink depending upon the number of zeros we have (we don't actually have to flip the zeros here!). The way to shrink or expand a window would be based on the number of zeros that can still be flipped and so on.",
          "output": "def least_ops_express_target(x, target):\n    if x == target:\n        return 0\n    if target == 1:\n        return 1\n    if x > target:\n        return min(2 * target - 1, 2 * (x - target))\n\n    k = 0\n    p = x\n    while p < target:\n        k += 1\n        p *= x\n\n    ans = float('inf')\n    d = 1\n\n    for i in range(k - 1, -1, -1):\n        while p >= target + d * (1 - x):\n            p -= d\n            ans = min(ans, i + int(math.log2(target // d) + 1) + int(d == 1 and -1 or 0))\n        d = d * x + 1\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, modify the array in the following way:\n\n*   choose an index `i` and replace `nums[i]` with `-nums[i]`.\n\nYou should apply this process exactly `k` times. You may choose the same index `i` multiple times.\n\nReturn _the largest possible sum of the array after modifying it in this way_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,2,3\\], k = 1\n**Output:** 5\n**Explanation:** Choose index 1 and nums becomes \\[4,-2,3\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,-1,0,2\\], k = 3\n**Output:** 6\n**Explanation:** Choose indices (1, 2, 2) and nums becomes \\[3,1,0,2\\].\n\n**Example 3:**\n\n**Input:** nums = \\[2,-3,-1,5,-4\\], k = 2\n**Output:** 13\n**Explanation:** Choose indices (1, 4) and nums becomes \\[2,3,-1,5,4\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-100 <= nums[i] <= 100`\n*   `1 <= k <= 104`",
          "output": "def is_univalued(root, val=None):\n    if not root:\n        return True\n    if val is None:\n        val = root.val\n    return root.val == val and is_univalued(root.left, val) and is_univalued(root.right, val)\n"
     },
     {
          "instruction": "Write python code for this problem: The **factorial** of a positive integer `n` is the product of all positive integers less than or equal to `n`.\n\n*   For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`.\n\nWe make a **clumsy factorial** using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply `'*'`, divide `'/'`, add `'+'`, and subtract `'-'` in this order.\n\n*   For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`.\n\nHowever, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\n\nAdditionally, the division that we use is floor division such that `10 * 9 / 8 = 90 / 8 = 11`.\n\nGiven an integer `n`, return _the clumsy factorial of_ `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:** 7\n**Explanation:** 7 = 4 \\* 3 / 2 + 1\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 12\n**Explanation:** 12 = 10 \\* 9 / 8 + 7 - 6 \\* 5 / 4 + 3 - 2 \\* 1\n\n**Constraints:**\n\n*   `1 <= n <= 104`",
          "output": "def spellchecker(wordlist, queries):\n    word_map = {word: word for word in wordlist}\n    word_map_lower_case = {word.lower(): word for word in wordlist if word.lower() not in word_map_lower_case}\n    word_map_vowel_replaced = {replace_vowels(word.lower()): word for word in wordlist if replace_vowels(word.lower()) not in word_map_vowel_replaced}\n\n    result = []\n    for query in queries:\n        lower_query = query.lower()\n        vowel_replaced_query = replace_vowels(lower_query)\n\n        if query in word_map:\n            result.append(word_map[query])\n        elif lower_query in word_map_lower_case:\n            result.append(word_map_lower_case[lower_query])\n        elif vowel_replaced_query in word_map_vowel_replaced:\n            result.append(word_map_vowel_replaced[vowel_replaced_query])\n        else:\n            result.append(\"\")\n\n    return result\n\n\ndef replace_vowels(word):\n    return ''.join(['#' if ch in 'aeiou' else ch for ch in word])\n"
     },
     {
          "instruction": "Write python code for this problem: In a row of dominoes, `tops[i]` and `bottoms[i]` represent the top and bottom halves of the `ith` domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\n\nWe may rotate the `ith` domino, so that `tops[i]` and `bottoms[i]` swap values.\n\nReturn the minimum number of rotations so that all the values in `tops` are the same, or all the values in `bottoms` are the same.\n\nIf it cannot be done, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** tops = \\[2,1,2,4,2,2\\], bottoms = \\[5,2,6,2,3,2\\]\n**Output:** 2\n**Explanation:** \nThe first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.\n\n**Example 2:**\n\n**Input:** tops = \\[3,5,1,2,3\\], bottoms = \\[3,6,3,3,4\\]\n**Output:** -1\n**Explanation:** \nIn this case, it is not possible to rotate the dominoes to make one row of values equal.\n\n**Constraints:**\n\n*   `2 <= tops.length <= 2 * 104`\n*   `bottoms.length == tops.length`\n*   `1 <= tops[i], bottoms[i] <= 6`",
          "output": "def numsSameConsecDiff(n, k):\n    result = []\n    if n == 1: result.append(0)\n\n    def dfs(current):\n        if len(current) == n:\n            result.append(int(current))\n            return\n\n        last_digit = current[-1]\n        if last_digit - k >= 0: dfs(current + str(last_digit - k))\n        if k != 0 and last_digit + k <= 9: dfs(current + str(last_digit + k))\n\n    for i in range(1, 10):\n        dfs(str(i))\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers preorder, which represents the **preorder traversal** of a BST (i.e., **binary search tree**), construct the tree and return _its root_.\n\nIt is **guaranteed** that there is always possible to find a binary search tree with the given requirements for the given test cases.\n\nA **binary search tree** is a binary tree where for every node, any descendant of `Node.left` has a value **strictly less than** `Node.val`, and any descendant of `Node.right` has a value **strictly greater than** `Node.val`.\n\nA **preorder traversal** of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.\n\n",
          "input": "**Example 1:**\n\n**Input:** preorder = \\[8,5,1,7,10,12\\]\n**Output:** \\[8,5,10,1,7,null,12\\]\n\n**Example 2:**\n\n**Input:** preorder = \\[1,3\\]\n**Output:** \\[1,null,3\\]\n\n**Constraints:**\n\n*   `1 <= preorder.length <= 100`\n*   `1 <= preorder[i] <= 1000`\n*   All the values of `preorder` are **unique**.",
          "output": "def min_camera_cover(root):\n    ans = [0]\n    return (dfs(root, ans) < 1) + ans[0]\n\ndef dfs(node, ans):\n    if not node:\n        return 2\n    left = dfs(node.left, ans)\n    right = dfs(node.right, ans)\n    if left == 0 or right == 0:\n        ans[0] += 1\n        return 1\n    return 2 if left == 1 or right == 1 else 0\n"
     },
     {
          "instruction": "Write python code for this problem: A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not).\n\nGiven two strings `source` and `target`, return _the minimum number of **subsequences** of_ `source` _such that their concatenation equals_ `target`. If the task is impossible, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** source =  \"abc \", target =  \"abcbc \"\n**Output:** 2\n**Explanation:** The target  \"abcbc \" can be formed by  \"abc \" and  \"bc \", which are subsequences of source  \"abc \".\n\n**Example 2:**\n\n**Input:** source =  \"abc \", target =  \"acdbc \"\n**Output:** -1\n**Explanation:** The target string cannot be constructed from the subsequences of source string due to the character  \"d \" in target string.\n\n**Example 3:**\n\n**Input:** source =  \"xyz \", target =  \"xzyxz \"\n**Output:** 3\n**Explanation:** The target string can be constructed as follows  \"xz \" +  \"y \" +  \"xz \".\n\n**Constraints:**\n\n*   `1 <= source.length, target.length <= 1000`\n*   `source` and `target` consist of lowercase English letters.Which conditions have to been met in order to be impossible to form the target string? If there exists a character in the target string which doesn't exist in the source string then it will be impossible to form the target string. Assuming we are in the case which is possible to form the target string, how can we assure the minimum number of used subsequences of source? For each used subsequence try to match the leftmost character of the current subsequence with the leftmost character of the target string, if they match then erase both character otherwise erase just the subsequence character whenever the current subsequence gets empty, reset it to a new copy of subsequence and increment the count, do this until the target sequence gets empty. Finally return the count.",
          "output": "def num_pairs_divisible_by60(time):\n    count = [0] * 60\n    pairs = 0\n\n    for t in time:\n        mod = t % 60\n        pairs += count[(60 - mod) % 60]\n        count[mod] += 1\n\n    return pairs\n"
     },
     {
          "instruction": "Write python code for this problem: On a campus represented on the X-Y plane, there are `n` workers and `m` bikes, with `n <= m`.\n\nYou are given an array `workers` of length `n` where `workers[i] = [xi, yi]` is the position of the `ith` worker. You are also given an array `bikes` of length `m` where `bikes[j] = [xj, yj]` is the position of the `jth` bike. All the given positions are **unique**.\n\nAssign a bike to each worker. Among the available bikes and workers, we choose the `(workeri, bikej)` pair with the shortest **Manhattan distance** between each other and assign the bike to that worker.\n\nIf there are multiple `(workeri, bikej)` pairs with the same shortest **Manhattan distance**, we choose the pair with **the smallest worker index**. If there are multiple ways to do that, we choose the pair with **the smallest bike index**. Repeat this process until there are no available workers.\n\nReturn _an array_ `answer` _of length_ `n`_, where_ `answer[i]` _is the index (**0-indexed**) of the bike that the_ `ith` _worker is assigned to_.\n\nThe **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\n",
          "input": "**Example 1:**\n\n**Input:** workers = \\[\\[0,0\\],\\[2,1\\]\\], bikes = \\[\\[1,2\\],\\[3,3\\]\\]\n**Output:** \\[1,0\\]\n**Explanation:** Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is \\[1, 0\\].\n\n**Example 2:**\n\n**Input:** workers = \\[\\[0,0\\],\\[1,1\\],\\[2,0\\]\\], bikes = \\[\\[1,0\\],\\[2,2\\],\\[2,1\\]\\]\n**Output:** \\[0,2,1\\]\n**Explanation:** Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is \\[0,2,1\\].\n\n**Constraints:**\n\n*   `n == workers.length`\n*   `m == bikes.length`\n*   `1 <= n <= m <= 1000`\n*   `workers[i].length == bikes[j].length == 2`\n*   `0 <= xi, yi < 1000`\n*   `0 <= xj, yj < 1000`\n*   All worker and bike locations are **unique**.Sort the elements by distance. In case of a tie, sort them by the index of the worker. After that, if there are still ties, sort them by the index of the bike.\nCan you do this in less than O(nlogn) time, where n is the total number of pairs between workers and bikes? Loop the sorted elements and match each pair of worker and bike if the given worker and bike where not used.",
          "output": "def num_dup_digits_at_most_n(n):\n    count = 0\n    for i in range(1, n + 1):\n        digits = set()\n        num = i\n        while num != 0:\n            digit = num % 10\n            if digit in digits:\n                count += 1\n                break\n            else:\n                digits.add(digit)\n            num //= 10\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`.\n\nReturn the string `\"-1 \"` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `\u03a3 |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[ \"0.700 \", \"2.800 \", \"4.900 \"\\], target = 8\n**Output:**  \"1.000 \"\n**Explanation:**\nUse Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .\n\n**Example 2:**\n\n**Input:** prices = \\[ \"1.500 \", \"2.500 \", \"3.500 \"\\], target = 10\n**Output:**  \"-1 \"\n**Explanation:** It is impossible to meet the target.\n\n**Example 3:**\n\n**Input:** prices = \\[ \"1.500 \", \"2.500 \", \"3.500 \"\\], target = 9\n**Output:**  \"1.500 \"\n\n**Constraints:**\n\n*   `1 <= prices.length <= 500`\n*   Each string `prices[i]` represents a real number in the range `[0.0, 1000.0]` and has exactly 3 decimal places.\n*   `0 <= target <= 106`If we have integer values in the array then we just need to subtract the target those integer values, so we reduced the problem. Similarly if we have non integer values we have two options to put them flor(value) or ceil(value) = floor(value) + 1, so the idea is to just subtract floor(value). Now the problem is different for each position we can sum just add 0 or 1 in order to sum the target, minimizing the deltas. This can be solved with DP.",
          "output": "from math import floor, ceil\n\ndef find_rounding_error(prices, target):\n    n = len(prices)\n    decimals = [float(price) - floor(float(price)) for price in prices]\n    rounded_sum = sum(floor(float(price)) for price in prices)\n\n    if target < rounded_sum or target > rounded_sum + n:\n        return \"-1 \"\n\n    ceil_count = target - rounded_sum\n    rounding_error = 0.0\n\n    for d in decimals:\n        if ceil_count > 0:\n            rounding_error += 1 - d\n            ceil_count -= 1\n        else:\n            rounding_error += d\n\n    return f\"{rounding_error:.3f} \"\n"
     },
     {
          "instruction": "Write python code for this problem: The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.\n\n*   For example, The integer `5` is `\"101 \"` in binary and its **complement** is `\"010 \"` which is the integer `2`.\n\nGiven an integer `n`, return _its complement_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** 5 is  \"101 \" in binary, with complement  \"010 \" in binary, which is 2 in base-10.\n\n**Example 2:**\n\n**Input:** n = 7\n**Output:** 0\n**Explanation:** 7 is  \"111 \" in binary, with complement  \"000 \" in binary, which is 0 in base-10.\n\n**Example 3:**\n\n**Input:** n = 10\n**Output:** 5\n**Explanation:** 10 is  \"1010 \" in binary, with complement  \"0101 \" in binary, which is 5 in base-10.\n\n**Constraints:**\n\n*   `0 <= n < 109`\n\n**Note:** This question is the same as 476: [https://leetcode.com/problems/number-complement/](https://leetcode.com/problems/number-complement/)A binary number plus its complement will equal 111....111 in binary.  Also, N = 0 is a corner case.",
          "output": "def pancakeSort(arr):\n    flips = []\n    for size in range(len(arr), 1, -1):\n        maxIdx = arr.index(max(arr[:size]))\n        flips.extend([maxIdx + 1, size])\n        arr[:maxIdx + 1] = reversed(arr[:maxIdx + 1])\n        arr[:size] = reversed(arr[:size])\n    return flips\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a list of songs where the `ith` song has a duration of `time[i]` seconds.\n\nReturn _the number of pairs of songs for which their total duration in seconds is divisible by_ `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** time = \\[30,20,150,100,40\\]\n**Output:** 3\n**Explanation:** Three pairs have a total duration divisible by 60:\n(time\\[0\\] = 30, time\\[2\\] = 150): total duration 180\n(time\\[1\\] = 20, time\\[3\\] = 100): total duration 120\n(time\\[1\\] = 20, time\\[4\\] = 40): total duration 60\n\n**Example 2:**\n\n**Input:** time = \\[60,60,60\\]\n**Output:** 3\n**Explanation:** All three pairs have a total duration of 120, which is divisible by 60.\n\n**Constraints:**\n\n*   `1 <= time.length <= 6 * 104`\n*   `1 <= time[i] <= 500`We only need to consider each song length modulo 60. We can count the number of songs with (length % 60) equal to r, and store that in an array of size 60.",
          "output": "def powerful_integers(x, y, bound):\n    result = set()\n    for i in range(20):\n        for j in range(20):\n            val = x**i + y**j\n            if val <= bound:\n                result.add(val)\n    return list(result)\n"
     },
     {
          "instruction": "Write python code for this problem: A conveyor belt has packages that must be shipped from one port to another within `days` days.\n\nThe `ith` package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `days` days.\n\n",
          "input": "**Example 1:**\n\n**Input:** weights = \\[1,2,3,4,5,6,7,8,9,10\\], days = 5\n**Output:** 15\n**Explanation:** A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n\n**Example 2:**\n\n**Input:** weights = \\[3,2,2,4,1,4\\], days = 3\n**Output:** 6\n**Explanation:** A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n\n**Example 3:**\n\n**Input:** weights = \\[1,2,3,1,1\\], days = 4\n**Output:** 3\n**Explanation:**\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n\n**Constraints:**\n\n*   `1 <= days <= weights.length <= 5 * 104`\n*   `1 <= weights[i] <= 500`Binary search on the answer.  We need a function possible(capacity) which returns true if and only if we can do the task in D days.",
          "output": "def flipRecur(node, voyage, flipped, idx):\n    if not node:\n        return idx\n    if node.val != voyage[idx]:\n        flipped[0] = -1\n        return idx\n    idx += 1\n    if (idx < len(voyage) and node.left and\n            node.left.val != voyage[idx]):\n        flipped.append(node.val)\n        idx = flipRecur(node.right, voyage, flipped, idx)\n        idx = flipRecur(node.left, voyage, flipped, idx)\n    else:\n        idx = flipRecur(node.left, voyage, flipped, idx)\n        idx = flipRecur(node.right, voyage, flipped, idx)\n    return idx\n\n\ndef flipMatchVoyage(root, voyage):\n    flipped = []\n    flipRecur(root, voyage, flipped, 0)\n    if flipped and flipped[0] == -1:\n        return [-1]\n    return flipped\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the number of positive integers in the range_ `[1, n]` _that have **at least one** repeated digit_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 20\n**Output:** 1\n**Explanation:** The only positive number (<= 20) with at least 1 repeated digit is 11.\n\n**Example 2:**\n\n**Input:** n = 100\n**Output:** 10\n**Explanation:** The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n\n**Example 3:**\n\n**Input:** n = 1000\n**Output:** 262\n\n**Constraints:**\n\n*   `1 <= n <= 109`How many numbers with no duplicate digits?  How many numbers with K digits and no duplicates? How many numbers with same length as N?  How many numbers with same prefix as N?",
          "output": "def isRationalEqual(s: str, t: str) -> bool:\n    def evaluate(s: str) -> float:\n        i = s.find('(')\n        if i != -1:\n            base = s[:i]\n            rep = s[i + 1:-1]\n            return float(base + rep * 20)\n        return float(s)\n\n    return abs(evaluate(s) - evaluate(t)) < 1e-12\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings of the same length `s1` and `s2` and a string `baseStr`.\n\nWe say `s1[i]` and `s2[i]` are equivalent characters.\n\n*   For example, if `s1 = \"abc \"` and `s2 = \"cde \"`, then we have `'a' == 'c'`, `'b' == 'd'`, and `'c' == 'e'`.\n\nEquivalent characters follow the usual rules of any equivalence relation:\n\n*   **Reflexivity:** `'a' == 'a'`.\n*   **Symmetry:** `'a' == 'b'` implies `'b' == 'a'`.\n*   **Transitivity:** `'a' == 'b'` and `'b' == 'c'` implies `'a' == 'c'`.\n\nFor example, given the equivalency information from `s1 = \"abc \"` and `s2 = \"cde \"`, `\"acd \"` and `\"aab \"` are equivalent strings of `baseStr = \"eed \"`, and `\"aab \"` is the lexicographically smallest equivalent string of `baseStr`.\n\nReturn _the lexicographically smallest equivalent string of_ `baseStr` _by using the equivalency information from_ `s1` _and_ `s2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"parker \", s2 =  \"morris \", baseStr =  \"parser \"\n**Output:**  \"makkek \"\n**Explanation:** Based on the equivalency information in s1 and s2, we can group their characters as \\[m,p\\], \\[a,o\\], \\[k,r,s\\], \\[e,i\\].\nThe characters in each group are equivalent and sorted in lexicographical order.\nSo the answer is  \"makkek \".\n\n**Example 2:**\n\n**Input:** s1 =  \"hello \", s2 =  \"world \", baseStr =  \"hold \"\n**Output:**  \"hdld \"\n**Explanation:** Based on the equivalency information in s1 and s2, we can group their characters as \\[h,w\\], \\[d,e,o\\], \\[l,r\\].\nSo only the second letter 'o' in baseStr is changed to 'd', the answer is  \"hdld \".\n\n**Example 3:**\n\n**Input:** s1 =  \"leetcode \", s2 =  \"programs \", baseStr =  \"sourcecode \"\n**Output:**  \"aauaaaaada \"\n**Explanation:** We group the equivalent characters in s1 and s2 as \\[a,o,e,r,s,c\\], \\[l,p\\], \\[g,t\\] and \\[d,m\\], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is  \"aauaaaaada \".\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length, baseStr <= 1000`\n*   `s1.length == s2.length`\n*   `s1`, `s2`, and `baseStr` consist of lowercase English letters.Model these equalities as edges of a graph. Group each connected component of the graph and assign each node of this component to the node with the lowest lexicographically character. Finally convert the string with the precalculated information.",
          "output": "def lex_smallest_equivalent(s1, s2, base_str):\n    parent = {chr(ch): chr(ch) for ch in range(ord('a'), ord('z') + 1)}\n\n    for c1, c2 in zip(s1, s2):\n        root1, root2 = c1, c2\n        while parent[root1] != root1:\n            root1 = parent[root1]\n        while parent[root2] != root2:\n            root2 = parent[root2]\n        if root1 != root2:\n            min_root = min(root1, root2)\n            parent[root1] = min_root\n            parent[root2] = min_root\n\n    return ''.join(parent[ch] for ch in base_str)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` which is sorted in **ascending order** and all of its elements are **unique** and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,7,9,10\\], k = 1\n**Output:** 5\n**Explanation:** The first missing number is 5.\n\n**Example 2:**\n\n**Input:** nums = \\[4,7,9,10\\], k = 3\n**Output:** 8\n**Explanation:** The missing numbers are \\[5,6,8,...\\], hence the third missing number is 8.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,4\\], k = 3\n**Output:** 6\n**Explanation:** The missing numbers are \\[3,5,6,7,...\\], hence the third missing number is 6.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `1 <= nums[i] <= 107`\n*   `nums` is sorted in **ascending order,** and all the elements are **unique**.\n*   `1 <= k <= 108`\n\n**Follow up:** Can you find a logarithmic time complexity (i.e., `O(log(n))`) solution?First define a function f(x) that counts the number of missing elements until x. Then use binary search with the given function f(x) to find the kth missing element.",
          "output": "def findKthPositive(nums, k):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] - mid - 1 < k:\n            left = mid + 1\n        else:\n            right = mid\n    return left + k\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the length of the longest repeating substrings_. If no repeating substring exists, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcd \"\n**Output:** 0\n**Explanation:** There is no repeating substring.\n\n**Example 2:**\n\n**Input:** s =  \"abbaba \"\n**Output:** 2\n**Explanation:** The longest repeating substrings are  \"ab \" and  \"ba \", each of which occurs twice.\n\n**Example 3:**\n\n**Input:** s =  \"aabcaabdaab \"\n**Output:** 3\n**Explanation:** The longest repeating substring is  \"aab \", which occurs `3` times.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2000`\n*   `s` consists of lowercase English letters.Generate all substrings in O(N^2) time with hashing. Choose those hashing of strings with the largest length.",
          "output": "def find_longest_repeating_substring(s: str) -> int:\n    n = len(s)\n    max_substr_length = 0\n    for length in range(1, n // 2 + 1):\n        max_repeat_count = repeat_count = 0\n        for i in range(n - length):\n            if s[i:i + length] == s[i + length:i + 2 * length]:\n                repeat_count += 1\n            else:\n                max_repeat_count = max(max_repeat_count, repeat_count)\n                repeat_count = 0\n        max_substr_length = max(max_substr_length, max_repeat_count * length)\n    return max_substr_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the number of non-empty **subarrays** with the leftmost element of the subarray not larger than other elements in the subarray_.\n\nA **subarray** is a **contiguous** part of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,4,2,5,3\\]\n**Output:** 11\n**Explanation:** There are 11 valid subarrays: \\[1\\],\\[4\\],\\[2\\],\\[5\\],\\[3\\],\\[1,4\\],\\[2,5\\],\\[1,4,2\\],\\[2,5,3\\],\\[1,4,2,5\\],\\[1,4,2,5,3\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,1\\]\n**Output:** 3\n**Explanation:** The 3 valid subarrays are: \\[3\\],\\[2\\],\\[1\\].\n\n**Example 3:**\n\n**Input:** nums = \\[2,2,2\\]\n**Output:** 6\n**Explanation:** There are 6 valid subarrays: \\[2\\],\\[2\\],\\[2\\],\\[2,2\\],\\[2,2\\],\\[2,2,2\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `0 <= nums[i] <= 105`Given a data structure that answers queries of the type to find the minimum in a range of an array (Range minimum query (RMQ) sparse table) in O(1) time. How can you solve this problem? For each starting index do a binary search with an RMQ to find the ending possible position.",
          "output": "def maxScoreSightseeingPair(values):\n    max_score = 0\n    max_score_left = values[0] + 0\n    for j in range(1, len(values)):\n        max_score = max(max_score, max_score_left + values[j] - j)\n        max_score_left = max(max_score_left, values[j] + j)\n    return max_score\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, return `true` if we can partition the array into three **non-empty** parts with equal sums.\n\nFormally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[0,2,1,-6,6,-7,9,1,2,0,1\\]\n**Output:** true\n**Explanation:** 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\n**Example 2:**\n\n**Input:** arr = \\[0,2,1,-6,6,7,9,-1,2,0,1\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** arr = \\[3,3,6,5,-2,2,5,1,-9,4\\]\n**Output:** true\n**Explanation:** 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n\n**Constraints:**\n\n*   `3 <= arr.length <= 5 * 104`\n*   `-104 <= arr[i] <= 104`If we have three parts with the same sum, what is the sum of each?\r\nIf you can find the first part, can you find the second part?",
          "output": "def fib(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `values` where values\\[i\\] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them.\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\nReturn _the maximum score of a pair of sightseeing spots_.\n\n",
          "input": "**Example 1:**\n\n**Input:** values = \\[8,1,5,2,6\\]\n**Output:** 11\n**Explanation:** i = 0, j = 2, values\\[i\\] + values\\[j\\] + i - j = 8 + 5 + 0 - 2 = 11\n\n**Example 2:**\n\n**Input:** values = \\[1,2\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `2 <= values.length <= 5 * 104`\n*   `1 <= values[i] <= 1000`Can you tell the best sightseeing spot in one pass (ie. as you iterate over the input?)  What should we store or keep track of as we iterate to do this?",
          "output": "def kClosest(points, k):\n    points.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    return points[:k]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer `k`, you need to find the **length** of the **smallest** positive integer `n` such that `n` is divisible by `k`, and `n` only contains the digit `1`.\n\nReturn _the **length** of_ `n`. If there is no such `n`, return -1.\n\n**Note:** `n` may not fit in a 64-bit signed integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 1\n**Output:** 1\n**Explanation:** The smallest answer is n = 1, which has length 1.\n\n**Example 2:**\n\n**Input:** k = 2\n**Output:** -1\n**Explanation:** There is no such positive integer n divisible by 2.\n\n**Example 3:**\n\n**Input:** k = 3\n**Output:** 3\n**Explanation:** The smallest answer is n = 111, which has length 3.\n\n**Constraints:**\n\n*   `1 <= k <= 105`11111 = 1111 * 10 + 1\r\nWe only need to store remainders modulo K. If we never get a remainder of 0, why would that happen, and how would we know that?",
          "output": "def smallestRepunitDivByK(k: int) -> int:\n    if k % 2 == 0 or k % 5 == 0:\n        return -1\n    n = 0\n    for i in range(1, k + 1):\n        n = (n * 10 + 1) % k\n        if n == 0:\n            return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s` and a positive integer `n`, return `true` _if the binary representation of all the integers in the range_ `[1, n]` _are **substrings** of_ `s`_, or_ `false` _otherwise_.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"0110\", n = 3\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"0110\", n = 4\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'0'` or `'1'`.\n*   `1 <= n <= 109`We only need to check substrings of length at most 30, because 10^9 has 30 bits.",
          "output": "def subarraysDivByK(nums, k):\n    counts = {0: 1}\n    sum_, result = 0, 0\n    \n    for num in nums:\n        sum_ += num\n        mod = (sum_ % k + k) % k\n        result += counts.get(mod, 0)\n        counts[mod] = counts.get(mod, 0) + 1\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of distinct integers `arr`, where `arr` is sorted in **ascending order**, return the smallest index `i` that satisfies `arr[i] == i`. If there is no such index, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[-10,-5,0,3,7\\]\n**Output:** 3\n**Explanation:** For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3.\n\n**Example 2:**\n\n**Input:** arr = \\[0,2,5,8,17\\]\n**Output:** 0\n**Explanation:** `arr[0] = 0`, thus the output is 0.\n\n**Example 3:**\n\n**Input:** arr = \\[-10,-5,3,4,7,9\\]\n**Output:** -1\n**Explanation:** There is no such `i` that `arr[i] == i`, thus the output is -1.\n\n**Constraints:**\n\n*   `1 <= arr.length < 104`\n*   `-109 <= arr[i] <= 109`\n\n**Follow up:** The `O(n)` solution is very straightforward. Can we do better?Loop over the array and check the first index i such A[i] == i",
          "output": "def fixedPoint(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    while left < right:\n        middle = left + (right - left) // 2\n        if arr[middle] < middle:\n            left = middle + 1\n        else:\n            right = middle\n    return left if arr[left] == left else -1\n"
     },
     {
          "instruction": "Write python code for this problem: On a campus represented as a 2D grid, there are `n` workers and `m` bikes, with `n <= m`. Each worker and bike is a 2D coordinate on this grid.\n\nWe assign one unique bike to each worker so that the sum of the **Manhattan distances** between each worker and their assigned bike is minimized.\n\nReturn `the minimum possible sum of Manhattan distances between each worker and their assigned bike`.\n\nThe **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\n",
          "input": "**Example 1:**\n\n**Input:** workers = \\[\\[0,0\\],\\[2,1\\]\\], bikes = \\[\\[1,2\\],\\[3,3\\]\\]\n**Output:** 6\n**Explanation:** \nWe assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.\n\n**Example 2:**\n\n**Input:** workers = \\[\\[0,0\\],\\[1,1\\],\\[2,0\\]\\], bikes = \\[\\[1,0\\],\\[2,2\\],\\[2,1\\]\\]\n**Output:** 4\n**Explanation:** \nWe first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.\n\n**Example 3:**\n\n**Input:** workers = \\[\\[0,0\\],\\[1,0\\],\\[2,0\\],\\[3,0\\],\\[4,0\\]\\], bikes = \\[\\[0,999\\],\\[1,999\\],\\[2,999\\],\\[3,999\\],\\[4,999\\]\\]\n**Output:** 4995\n\n**Constraints:**\n\n*   `n == workers.length`\n*   `m == bikes.length`\n*   `1 <= n <= m <= 10`\n*   `workers[i].length == 2`\n*   `bikes[i].length == 2`\n*   `0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000`\n*   All the workers and the bikes locations are **unique**.Model the problem with a dp(pos, mask) where pos represents the current bike to be assigned and mask the set of available workers.",
          "output": "from typing import List\n\ndef manhattan_distance(worker: List[int], bike: List[int]) -> int:\n    return abs(worker[0] - bike[0]) + abs(worker[1] - bike[1])\n\ndef dfs(workers: List[List[int]], bikes: List[List[int]], used: List[bool], index: int, dist: int, min_dist: List[int]) -> None:\n    if index == len(workers):\n        min_dist[0] = min(min_dist[0], dist)\n        return\n\n    if dist >= min_dist[0]:\n        return\n\n    for i in range(len(bikes)):\n        if used[i]:\n            continue\n        used[i] = True\n        cur_dist = manhattan_distance(workers[index], bikes[i])\n        dfs(workers, bikes, used, index + 1, dist + cur_dist, min_dist)\n        used[i] = False\n\ndef assign_bikes(workers: List[List[int]], bikes: List[List[int]]) -> int:\n    min_dist = [float('inf')]\n    used = [False] * len(bikes)\n    dfs(workers, bikes, used, 0, 0, min_dist)\n    return min_dist[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a single-digit integer `d` and two integers `low` and `high`, return _the number of times that_ `d` _occurs as a digit in all integers in the inclusive range_ `[low, high]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** d = 1, low = 1, high = 13\n**Output:** 6\n**Explanation:** The digit d = 1 occurs 6 times in 1, 10, 11, 12, 13.\nNote that the digit d = 1 occurs twice in the number 11.\n\n**Example 2:**\n\n**Input:** d = 3, low = 100, high = 250\n**Output:** 35\n**Explanation:** The digit d = 3 occurs 35 times in 103,113,123,130,131,...,238,239,243.\n\n**Constraints:**\n\n*   `0 <= d <= 9`\n*   `1 <= low <= high <= 2 * 108`Define a function f(x) to get the requested sum from 1 to x. So the answer will be f(hi) - f(lo - 1) In order to solve f(x) we need to do a DP over digits approach.",
          "output": "def count_digit(d, low, high):\n    count = 0\n    for i in range(low, high + 1):\n        num = i\n        while num > 0:\n            if num % 10 == d:\n                count += 1\n            num //= 10\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: A **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**.\n\nWe can rotate digits of a number by `180` degrees to form new digits.\n\n*   When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively.\n*   When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**.\n\nNote that after rotating a number, we can ignore leading zeros.\n\n*   For example, after rotating `8000`, we have `0008` which is considered as just `8`.\n\nGiven an integer `n`, return `true` _if it is a **confusing number**, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6\n**Output:** true\n**Explanation:** We get 9 after rotating 6, 9 is a valid number, and 9 != 6.\n\n**Example 2:**\n\n**Input:** n = 89\n**Output:** true\n**Explanation:** We get 68 after rotating 89, 68 is a valid number and 68 != 89.\n\n**Example 3:**\n\n**Input:** n = 11\n**Output:** false\n**Explanation:** We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number\n\n**Constraints:**\n\n*   `0 <= n <= 109`Reverse each digit with their corresponding new digit if an invalid digit is found the return -1. After reversing the digits just compare the reversed number with the original number.",
          "output": "cript\r\nfunction shipWithinDays(weights, days) {\r\n    let left = Math.max(...weights), right = weights.reduce((a, b) => a + b, 0);\r\n    while (left < right) {\r\n        let mid = left + ((right - left) / 2) | 0;\r\n        let day_count = 1, curr_capacity = 0;\r\n        for (const w of weights) {\r\n            curr_capacity += w;\r\n            if (curr_capacity > mid) {\r\n                day_count++;\r\n                curr_capacity = w;\r\n            }\r\n        }\r\n        if (day_count > days) {\r\n            left = mid + 1;\r\n        } else {\r\n            right = mid;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _a binary string representing its representation in base_ `-2`.\n\n**Note** that the returned string should not have leading zeros unless the string is `\"0 \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:**  \"110 \"\n**Explantion:** (-2)2 + (-2)1 = 2\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:**  \"111 \"\n**Explantion:** (-2)2 + (-2)1 + (-2)0 = 3\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:**  \"100 \"\n**Explantion:** (-2)2 = 4\n\n**Constraints:**\n\n*   `0 <= n <= 109`Figure out whether you need the ones digit placed or not, then shift by two.",
          "output": "def odd_even_jumps(arr):\n    n = len(arr)\n    can_reach_odd = [False] * n\n    can_reach_even = [False] * n\n    can_reach_odd[-1] = can_reach_even[-1] = True\n\n    index_map = {}\n    index_map[arr[-1]] = n - 1\n\n    good_indices = 1\n    for i in range(n - 2, -1, -1):\n        odd_jump = next(iter([value for value in index_map if value >= arr[i]]), None)\n        even_jump = next(iter([value for value in index_map if value <= arr[i]]), None)\n\n        if odd_jump is not None:\n            can_reach_odd[i] = can_reach_even[index_map[odd_jump]]\n        if even_jump is not None:\n            can_reach_even[i] = can_reach_odd[index_map[even_jump]]\n\n        if can_reach_odd[i]:\n            good_indices += 1\n\n        index_map[arr[i]] = i\n\n    return good_indices\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a binary array `nums` (**0-indexed**).\n\nWe define `xi` as the number whose binary representation is the subarray `nums[0..i]` (from most-significant-bit to least-significant-bit).\n\n*   For example, if `nums = [1,0,1]`, then `x0 = 1`, `x1 = 2`, and `x2 = 5`.\n\nReturn _an array of booleans_ `answer` _where_ `answer[i]` _is_ `true` _if_ `xi` _is divisible by_ `5`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,1\\]\n**Output:** \\[true,false,false\\]\n**Explanation:** The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer\\[0\\] is true.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** \\[false,false,false\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`.If X is the first i digits of the array as a binary number, then 2X + A[i] is the first i+1 digits.",
          "output": "def largestPerimeter(nums):\n    nums.sort(reverse=True)\n\n    for i in range(len(nums) - 2):\n        if nums[i] < nums[i + 1] + nums[i + 2]:\n            return nums[i] + nums[i + 1] + nums[i + 2]\n\n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `head` of a linked list with `n` nodes.\n\nFor each node in the list, find the value of the **next greater node**. That is, for each node, find the value of the first node that is next to it and has a **strictly larger** value than it.\n\nReturn an integer array `answer` where `answer[i]` is the value of the next greater node of the `ith` node (**1-indexed**). If the `ith` node does not have a next greater node, set `answer[i] = 0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[2,1,5\\]\n**Output:** \\[5,5,0\\]\n\n**Example 2:**\n\n**Input:** head = \\[2,7,4,3,5\\]\n**Output:** \\[7,0,5,5,0\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is `n`.\n*   `1 <= n <= 104`\n*   `1 <= Node.val <= 109`We can use a stack that stores nodes in monotone decreasing order of value.  When we see a node_j with a larger value, every node_i in the stack has next_larger(node_i) = node_j .",
          "output": "def sortedSquares(nums):\n    return sorted([x ** 2 for x in nums])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell.\n\nA **move** consists of walking from one land cell to another adjacent (**4-directionally**) land cell or walking off the boundary of the `grid`.\n\nReturn _the number of land cells in_ `grid` _for which we cannot walk off the boundary of the grid in any number of **moves**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,0,0,0\\],\\[1,0,1,0\\],\\[0,1,1,0\\],\\[0,0,0,0\\]\\]\n**Output:** 3\n**Explanation:** There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,1,1,0\\],\\[0,0,1,0\\],\\[0,0,1,0\\],\\[0,0,0,0\\]\\]\n**Output:** 0\n**Explanation:** All 1s are either on the boundary or can reach the boundary.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 500`\n*   `grid[i][j]` is either `0` or `1`.\n\nFor i <= k < j, arr\\[k\\] > arr\\[k + 1\\] when k is odd, and arr\\[k\\] < arr\\[k + 1\\] when k is even. OR For i <= k < j, arr\\[k\\] > arr\\[k + 1\\] when k is even, and arr\\[k\\] < arr\\[k + 1\\] when k is odd.Can you model this problem as a graph problem?  Create n * m + 1 nodes where n * m nodes represents each cell of the map and one extra node to represent the exterior of the map. In the map add edges between neighbors on land cells. And add edges between the exterior and land nodes which are in the boundary.\r\nReturn as answer the number of nodes that are not reachable from the exterior node.",
          "output": "def maxTurbulenceSize(arr):\n    n = len(arr)\n    result = 1\n    i = 0\n\n    while i < n - 1:\n        if arr[i] == arr[i + 1]:\n            i += 1\n            continue\n\n        j = i + 1\n        while j < n - 1 and ((arr[j] > arr[j + 1]) != (arr[j - 1] > arr[j])):\n            j += 1\n        \n        result = max(result, j - i + 1)\n        i = j\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's **top five average**.\n\nReturn _the answer as an array of pairs_ `result`_, where_ `result[j] = [IDj, topFiveAveragej]` _represents the student with_ `IDj` _and their **top five average**. Sort_ `result` _by_ `IDj` _in **increasing order**._\n\nA student's **top five average** is calculated by taking the sum of their top five scores and dividing it by `5` using **integer division**.\n\n",
          "input": "**Example 1:**\n\n**Input:** items = \\[\\[1,91\\],\\[1,92\\],\\[2,93\\],\\[2,97\\],\\[1,60\\],\\[2,77\\],\\[1,65\\],\\[1,87\\],\\[1,100\\],\\[2,100\\],\\[2,76\\]\\]\n**Output:** \\[\\[1,87\\],\\[2,88\\]\\]\n**Explanation:** \nThe student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.\nThe student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.\n\n**Example 2:**\n\n**Input:** items = \\[\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\]\\]\n**Output:** \\[\\[1,100\\],\\[7,100\\]\\]\n\n**Constraints:**\n\n*   `1 <= items.length <= 1000`\n*   `items[i].length == 2`\n*   `1 <= IDi <= 1000`\n*   `0 <= scorei <= 100`\n*   For each `IDi`, there will be **at least** five scores.How can we solve the problem if we have just one student? Given an student sort their grades and get the top 5 average. Generalize the idea to do it for many students.",
          "output": "def alice_win(n):\n    return n % 2 == 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `text` and an array of strings `words`, return _an array of all index pairs_ `[i, j]` _so that the substring_ `text[i...j]` _is in `words`_.\n\nReturn the pairs `[i, j]` in sorted order (i.e., sort them by their first coordinate, and in case of ties sort them by their second coordinate).\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"thestoryofleetcodeandme \", words = \\[ \"story \", \"fleet \", \"leetcode \"\\]\n**Output:** \\[\\[3,7\\],\\[9,13\\],\\[10,17\\]\\]\n\n**Example 2:**\n\n**Input:** text =  \"ababa \", words = \\[ \"aba \", \"ab \"\\]\n**Output:** \\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[2,4\\]\\]\n**Explanation:** Notice that matches can overlap, see  \"aba \" is found in \\[0,2\\] and \\[2,4\\].\n\n**Constraints:**\n\n*   `1 <= text.length <= 100`\n*   `1 <= words.length <= 20`\n*   `1 <= words[i].length <= 50`\n*   `text` and `words[i]` consist of lowercase English letters.\n*   All the strings of `words` are **unique**.For each string of the set, look for matches and store those matches indices.",
          "output": "def has_all_codes_in_range(s: str, n: int) -> bool:\n    substrings = set()\n    length = len(bin(n)) - 2\n    for i in range(len(s) - length + 1):\n        substrings.add(s[i:i + length])\n    return len(substrings) == n\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` representing a list of words. Each letter in the word has one or more options.\n\n*   If there is one option, the letter is represented as is.\n*   If there is more than one option, then curly braces delimit the options. For example, `\"{a,b,c} \"` represents options `[ \"a \", \"b \", \"c \"]`.\n\nFor example, if `s = \"a{b,c} \"`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. The original list is `[ \"ab \", \"ac \"]`.\n\nReturn all words that can be formed in this manner, **sorted** in lexicographical order.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"{a,b}c{d,e}f\"\n**Output:** \\[\"acdf\",\"acef\",\"bcdf\",\"bcef\"\\]\n\n**Example 2:**\n\n**Input:** s = \"abcd\"\n**Output:** \\[\"abcd\"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 50`\n*   `s` consists of curly brackets `'{}'`, commas `','`, and lowercase English letters.\n*   `s` is guaranteed to be a valid input.\n*   There are no nested curly brackets.\n*   All characters inside a pair of consecutive opening and ending curly brackets are different.All generated strings are of the same size. How can we generate all of these strings? Do a backtracking on which each level of it has to choose one single (e.g. 'a') character or any character of the given parenthesized group (e.g. \"{a,b,c}\")",
          "output": "def longestArithSeqLength(nums):\n    n = len(nums)\n    longest = 0\n    dp = [{} for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i):\n            diff = nums[i] - nums[j]\n            dp[i][diff] = dp[j].get(diff, 1) + 1\n            longest = max(longest, dp[i][diff])\n    \n    return longest\n"
     },
     {
          "instruction": "Write python code for this problem: A **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**.\n\nWe can rotate digits of a number by `180` degrees to form new digits.\n\n*   When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively.\n*   When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**.\n\nNote that after rotating a number, we can ignore leading zeros.\n\n*   For example, after rotating `8000`, we have `0008` which is considered as just `8`.\n\nGiven an integer `n`, return _the number of **confusing numbers** in the inclusive range_ `[1, n]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 20\n**Output:** 6\n**Explanation:** The confusing numbers are \\[6,9,10,16,18,19\\].\n6 converts to 9.\n9 converts to 6.\n10 converts to 01 which is just 1.\n16 converts to 91.\n18 converts to 81.\n19 converts to 61.\n\n**Example 2:**\n\n**Input:** n = 100\n**Output:** 19\n**Explanation:** The confusing numbers are \\[6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100\\].\n\n**Constraints:**\n\n*   `1 <= n <= 109`Which set of digits have the valid numbers? Only 0, 1, 6, 8, 9 are the valid set of digits, do a backtracking to generate all the numbers containing this digits and check they are valid.",
          "output": "def confusingNumberII(n):\n    def helper(current):\n        nonlocal count, validNums\n        for num in validNums:\n            next_num = current * 10 + num\n            if next_num > n:\n                break\n            if current != 0 or next_num != 0:\n                if next_num != rotate(next_num):\n                    count += 1\n                count = helper(next_num)\n        return count\n\n    def rotate(num):\n        rotated = 0\n        original = num\n        while num > 0:\n            digit = num % 10\n            if digit in (2, 3, 4, 5, 7):\n                return original\n            revd = {0: 0, 1: 1, 6: 9, 8: 8, 9: 6}\n            rotated = rotated * 10 + revd[digit]\n            num //= 10\n        return rotated\n\n    count = 0\n    validNums = [0, 1, 6, 8, 9]\n    return helper(0)\n"
     },
     {
          "instruction": "Write python code for this problem: A valid parentheses string is either empty `\" \"`, `\"( \" + A + \") \"`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation.\n\n*   For example, `\" \"`, `\"() \"`, `\"(())() \"`, and `\"(()(())) \"` are all valid parentheses strings.\n\nA valid parentheses string `s` is primitive if it is nonempty, and there does not exist a way to split it into `s = A + B`, with `A` and `B` nonempty valid parentheses strings.\n\nGiven a valid parentheses string `s`, consider its primitive decomposition: `s = P1 + P2 + ... + Pk`, where `Pi` are primitive valid parentheses strings.\n\nReturn `s` _after removing the outermost parentheses of every primitive string in the primitive decomposition of_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"(()())(()) \"\n**Output:**  \"()()() \"\n**Explanation:** \nThe input string is  \"(()())(()) \", with primitive decomposition  \"(()()) \" +  \"(()) \".\nAfter removing outer parentheses of each part, this is  \"()() \" +  \"() \" =  \"()()() \".\n\n**Example 2:**\n\n**Input:** s =  \"(()())(())(()(())) \"\n**Output:**  \"()()()()(()) \"\n**Explanation:** \nThe input string is  \"(()())(())(()(())) \", with primitive decomposition  \"(()()) \" +  \"(()) \" +  \"(()(())) \".\nAfter removing outer parentheses of each part, this is  \"()() \" +  \"() \" +  \"()(()) \" =  \"()()()()(()) \".\n\n**Example 3:**\n\n**Input:** s =  \"()() \"\n**Output:**  \" \"\n**Explanation:** \nThe input string is  \"()() \", with primitive decomposition  \"() \" +  \"() \".\nAfter removing outer parentheses of each part, this is  \" \" +  \" \" =  \" \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'('` or `')'`.\n*   `s` is a valid parentheses string.Can you find the primitive decomposition?  The number of ( and ) characters must be equal.",
          "output": "def distributeCoins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left, right = dfs(node.left), dfs(node.right)\n        moves[0] += abs(left) + abs(right)\n        return node.val + left + right - 1\n\n    moves = [0]\n    dfs(root)\n    return moves[0]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit.\n\n*   For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.\n\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return _the sum of these numbers_.\n\nThe test cases are generated so that the answer fits in a **32-bits** integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,0,1,0,1,0,1\\]\n**Output:** 22\n**Explanation:** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n\n**Example 2:**\n\n**Input:** root = \\[0\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `Node.val` is `0` or `1`.Find each path, then transform that path to an integer in base 10.",
          "output": "def uniquePathsIII(grid):\n    x, y, empty = 0, 0, 1\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                x, y = i, j\n            elif grid[i][j] == 0:\n                empty += 1\n    return dfs(grid, x, y, empty)\n\ndef dfs(grid, x, y, empty):\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == -1:\n        return 0\n    if grid[x][y] == 2:\n        return 1 if empty == -1 else 0\n    grid[x][y] = -1\n    paths = dfs(grid, x + 1, y, empty - 1) + dfs(grid, x - 1, y, empty - 1) + dfs(grid, x, y + 1, empty - 1) + dfs(grid, x, y - 1, empty - 1)\n    grid[x][y] = 0\n    return paths\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `queries` and a string `pattern`, return a boolean array `answer` where `answer[i]` is `true` if `queries[i]` matches `pattern`, and `false` otherwise.\n\nA query word `queries[i]` matches `pattern` if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.\n\n",
          "input": "**Example 1:**\n\n**Input:** queries = \\[ \"FooBar \", \"FooBarTest \", \"FootBall \", \"FrameBuffer \", \"ForceFeedBack \"\\], pattern =  \"FB \"\n**Output:** \\[true,false,true,true,false\\]\n**Explanation:**  \"FooBar \" can be generated like this  \"F \" +  \"oo \" +  \"B \" +  \"ar \".\n \"FootBall \" can be generated like this  \"F \" +  \"oot \" +  \"B \" +  \"all \".\n \"FrameBuffer \" can be generated like this  \"F \" +  \"rame \" +  \"B \" +  \"uffer \".\n\n**Example 2:**\n\n**Input:** queries = \\[ \"FooBar \", \"FooBarTest \", \"FootBall \", \"FrameBuffer \", \"ForceFeedBack \"\\], pattern =  \"FoBa \"\n**Output:** \\[true,false,true,false,false\\]\n**Explanation:**  \"FooBar \" can be generated like this  \"Fo \" +  \"o \" +  \"Ba \" +  \"r \".\n \"FootBall \" can be generated like this  \"Fo \" +  \"ot \" +  \"Ba \" +  \"ll \".\n\n**Example 3:**\n\n**Input:** queries = \\[ \"FooBar \", \"FooBarTest \", \"FootBall \", \"FrameBuffer \", \"ForceFeedBack \"\\], pattern =  \"FoBaT \"\n**Output:** \\[false,true,false,false,false\\]\n**Explanation:**  \"FooBarTest \" can be generated like this  \"Fo \" +  \"o \" +  \"Ba \" +  \"r \" +  \"T \" +  \"est \".\n\n**Constraints:**\n\n*   `1 <= pattern.length, queries.length <= 100`\n*   `1 <= queries[i].length <= 100`\n*   `queries[i]` and `pattern` consist of English letters.Given a single pattern and word, how can we solve it? One way to do it is using a DP (pos1, pos2) where pos1 is a pointer to the word and pos2 to the pattern and returns true if we can match the pattern with the given word. We have two scenarios: The first one is when `word[pos1] == pattern[pos2]`, then the transition will be just DP(pos1 + 1, pos2 + 1). The second scenario is when `word[pos1]` is lowercase then we can add this character to the pattern so that the transition is just DP(pos1 + 1, pos2)\r\nThe case base is `if (pos1 == n && pos2 == m) return true;` Where n and m are the sizes of the strings word and pattern respectively.",
          "output": "from collections import defaultdict\nimport bisect\n\nclass TimeMap:\n\n    def __init__(self):\n        self.data = defaultdict(list)\n\n    def set(self, key, value, timestamp):\n        self.data[key].append((timestamp, value))\n\n    def get(self, key, timestamp):\n        if key not in self.data: return \"\"\n        index = bisect.bisect(self.data[key], (timestamp + 1,))\n        return self.data[key][index-1][1] if index else \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a series of video clips from a sporting event that lasted `time` seconds. These video clips can be overlapping with each other and have varying lengths.\n\nEach video clip is described by an array `clips` where `clips[i] = [starti, endi]` indicates that the ith clip started at `starti` and ended at `endi`.\n\nWe can cut these clips into segments freely.\n\n*   For example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.\n\nReturn _the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event_ `[0, time]`. If the task is impossible, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** clips = \\[\\[0,2\\],\\[4,6\\],\\[8,10\\],\\[1,9\\],\\[1,5\\],\\[5,9\\]\\], time = 10\n**Output:** 3\n**Explanation:** We take the clips \\[0,2\\], \\[8,10\\], \\[1,9\\]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut \\[1,9\\] into segments \\[1,2\\] + \\[2,8\\] + \\[8,9\\].\nNow we have segments \\[0,2\\] + \\[2,8\\] + \\[8,10\\] which cover the sporting event \\[0, 10\\].\n\n**Example 2:**\n\n**Input:** clips = \\[\\[0,1\\],\\[1,2\\]\\], time = 5\n**Output:** -1\n**Explanation:** We cannot cover \\[0,5\\] with only \\[0,1\\] and \\[1,2\\].\n\n**Example 3:**\n\n**Input:** clips = \\[\\[0,1\\],\\[6,8\\],\\[0,2\\],\\[5,6\\],\\[0,4\\],\\[0,3\\],\\[6,7\\],\\[1,3\\],\\[4,7\\],\\[1,4\\],\\[2,5\\],\\[2,6\\],\\[3,4\\],\\[4,5\\],\\[5,7\\],\\[6,9\\]\\], time = 9\n**Output:** 3\n**Explanation:** We can take clips \\[0,4\\], \\[4,7\\], and \\[6,9\\].\n\n**Constraints:**\n\n*   `1 <= clips.length <= 100`\n*   `0 <= starti <= endi <= 100`\n*   `1 <= time <= 100`\n\n0 <= i < j < k < nums.length, and nums\\[i\\] & nums\\[j\\] & nums\\[k\\] != 0. (\\`&\\` represents the bitwise AND operation.)What if we sort the intervals?  Considering the sorted intervals, how can we solve the problem with dynamic programming? Let's consider a DP(pos, limit) where pos represents the position of the current interval we are gonna take the decision and limit is the current covered area from [0 - limit]. This DP returns the minimum number of taken intervals or infinite if it's not possible to cover the [0 - T] section.",
          "output": "def count_and_triples(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] & nums[j] & nums[k] != 0:\n                    count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return `0` _if the sum of the digits of the minimum integer in_ `nums` _is odd, or_ `1` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[34,23,1,24,75,33,54,8\\]\n**Output:** 0\n**Explanation:** The minimal element is 1, and the sum of those digits is 1 which is odd, so the answer is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[99,77,33,66,55\\]\n**Output:** 1\n**Explanation:** The minimal element is 33, and the sum of those digits is 3 + 3 = 6 which is even, so the answer is 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`How to find the minimum number in an array? Loop over the array and compare each one of the numbers. How to find the sum of digits? Divide the number consecutively and get their remainder modulus 10. Sum those remainders and return the answer as the problem asks.",
          "output": "def sum_of_digits(nums):\n    min_val = min(nums)\n    digit_sum = sum(int(digit) for digit in str(min_val))\n    return 1 if digit_sum % 2 == 0 else 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[34,23,1,24,75,33,54,8\\], k = 60\n**Output:** 58\n**Explanation:** We can use 34 and 24 to sum 58 which is less than 60.\n\n**Example 2:**\n\n**Input:** nums = \\[10,20,30\\], k = 15\n**Output:** -1\n**Explanation:** In this case it is not possible to get a pair sum less that 15.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 1000`\n*   `1 <= k <= 2000`What if we have the array sorted? Loop the array and get the value A[i] then we need to find a value A[j] such that A[i] + A[j] < K  which means A[j] < K - A[i]. In order to do that we can find that value with a binary search.",
          "output": "def max_sum_under_k(nums, k):\n    max_sum = -1\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            _sum = nums[i] + nums[j]\n            if _sum < k and _sum > max_sum:\n                max_sum = _sum\n    return max_sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, return _the number of substrings in_ `s` _of length_ `k` _with no repeated characters_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"havefunonleetcode \", k = 5\n**Output:** 6\n**Explanation:** There are 6 substrings they are: 'havef','avefu','vefun','efuno','etcod','tcode'.\n\n**Example 2:**\n\n**Input:** s =  \"home \", k = 5\n**Output:** 0\n**Explanation:** Notice k can be larger than the length of s. In this case, it is not possible to find any substring.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of lowercase English letters.\n*   `1 <= k <= 104`How to check efficiently each K-length substring? First store the first leftmost K-length substring in a hashTable or array of frequencies. Then iterate through the rest of characters and erase the first element and add the next element from the right. If in the hashTable we have K different character we add 1 to the counter. After that return as answer the counter.",
          "output": "def num_k_len_substr_no_repeats(s: str, k: int) -> int:\n    n = len(s)\n    if k > n:\n        return 0\n\n    result = 0\n    window = set()\n\n    i = 0\n    for j in range(n):\n        while s[j] in window:\n            window.remove(s[i])\n            i += 1\n        window.add(s[j])\n        if j - i + 1 == k:\n            result += 1\n            window.remove(s[i])\n            i += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There are n people in a social group labeled from `0` to `n - 1`. You are given an array `logs` where `logs[i] = [timestampi, xi, yi]` indicates that `xi` and `yi` will be friends at the time `timestampi`.\n\nFriendship is **symmetric**. That means if `a` is friends with `b`, then `b` is friends with `a`. Also, person `a` is acquainted with a person `b` if `a` is friends with `b`, or `a` is a friend of someone acquainted with `b`.\n\nReturn _the earliest time for which every person became acquainted with every other person_. If there is no such earliest time, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** logs = \\[\\[20190101,0,1\\],\\[20190104,3,4\\],\\[20190107,2,3\\],\\[20190211,1,5\\],\\[20190224,2,4\\],\\[20190301,0,3\\],\\[20190312,1,2\\],\\[20190322,4,5\\]\\], n = 6\n**Output:** 20190301\n**Explanation:** \nThe first event occurs at timestamp = 20190101, and after 0 and 1 become friends, we have the following friendship groups \\[0,1\\], \\[2\\], \\[3\\], \\[4\\], \\[5\\].\nThe second event occurs at timestamp = 20190104, and after 3 and 4 become friends, we have the following friendship groups \\[0,1\\], \\[2\\], \\[3,4\\], \\[5\\].\nThe third event occurs at timestamp = 20190107, and after 2 and 3 become friends, we have the following friendship groups \\[0,1\\], \\[2,3,4\\], \\[5\\].\nThe fourth event occurs at timestamp = 20190211, and after 1 and 5 become friends, we have the following friendship groups \\[0,1,5\\], \\[2,3,4\\].\nThe fifth event occurs at timestamp = 20190224, and as 2 and 4 are already friends, nothing happens.\nThe sixth event occurs at timestamp = 20190301, and after 0 and 3 become friends, we all become friends.\n\n**Example 2:**\n\n**Input:** logs = \\[\\[0,2,0\\],\\[1,0,1\\],\\[3,0,3\\],\\[4,1,2\\],\\[7,3,1\\]\\], n = 4\n**Output:** 3\n**Explanation:** At timestamp = 3, all the persons (i.e., 0, 1, 2, and 3) become friends.\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `1 <= logs.length <= 104`\n*   `logs[i].length == 3`\n*   `0 <= timestampi <= 109`\n*   `0 <= xi, yi <= n - 1`\n*   `xi != yi`\n*   All the values `timestampi` are **unique**.\n*   All the pairs `(xi, yi)` occur at most one time in the input.Sort the log items by their timestamp. How can we model this problem as a graph problem? Let's use a union-find data structure. At the beginning we have a graph with N nodes but no edges. Then we loop through the events and if unite each node until the number of connected components reach to 1. Notice that each time two different connected components are united the number of connected components decreases by 1.",
          "output": "def earliestAcq(logs, n):\n    def find(x):\n        if x != parents[x]:\n            parents[x] = find(parents[x])\n        return parents[x]\n\n    parents = list(range(n))\n    logs.sort()\n\n    group_count = n\n    for timestamp, x, y in logs:\n        root_x, root_y = find(x), find(y)\n        if root_x != root_y:\n            parents[root_x] = root_y\n            group_count -= 1\n        if group_count == 1:\n            return timestamp\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:\n\n*   Choosing any `x` with `0 < x < n` and `n % x == 0`.\n*   Replacing the number `n` on the chalkboard with `n - x`.\n\nAlso, if a player cannot make a move, they lose the game.\n\nReturn `true` _if and only if Alice wins the game, assuming both players play optimally_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** true\n**Explanation:** Alice chooses 1, and Bob has no more moves.\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** false\n**Explanation:** Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`If the current number is even, we can always subtract a 1 to make it odd.  If the current number is odd, we must subtract an odd number to make it even.",
          "output": "def mincostTickets(days, costs):\n  travel_days = set(days)\n  dp = [0] * 366\n\n  for i in range(1, 366):\n    if i not in travel_days:\n      dp[i] = dp[i - 1]\n    else:\n      dp[i] = min(dp[i - 1] + costs[0],\n                  dp[max(0, i - 7)] + costs[1],\n                  dp[max(0, i - 30)] + costs[2])\n\n  return dp[365]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of integers, return _the length of the longest arithmetic subsequence in_ `nums`.\n\n**Note** that:\n\n*   A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n*   A sequence `seq` is arithmetic if `seq[i + 1] - seq[i]` are all the same value (for `0 <= i < seq.length - 1`).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,6,9,12\\]\n**Output:** 4\n**Explanation: ** The whole array is an arithmetic sequence with steps of length = 3.\n\n**Example 2:**\n\n**Input:** nums = \\[9,4,7,2,10\\]\n**Output:** 3\n**Explanation: ** The longest arithmetic subsequence is \\[4,7,10\\].\n\n**Example 3:**\n\n**Input:** nums = \\[20,1,15,3,10,5,8\\]\n**Output:** 4\n**Explanation: ** The longest arithmetic subsequence is \\[20,15,10,5\\].\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `0 <= nums[i] <= 500`",
          "output": "def sumEvenAfterQueries(nums, queries):\n    answer = []\n    even_sum = sum(num for num in nums if num % 2 == 0)\n\n    for value, index in queries:\n        if nums[index] % 2 == 0:\n            even_sum -= nums[index]\n        nums[index] += value\n        if nums[index] % 2 == 0:\n            even_sum += nums[index]\n        answer.append(even_sum)\n\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: Given a year `year` and a month `month`, return _the number of days of that month_.\n\n",
          "input": "**Example 1:**\n\n**Input:** year = 1992, month = 7\n**Output:** 31\n\n**Example 2:**\n\n**Input:** year = 2000, month = 2\n**Output:** 29\n\n**Example 3:**\n\n**Input:** year = 1900, month = 2\n**Output:** 28\n\n**Constraints:**\n\n*   `1583 <= year <= 2100`\n*   `1 <= month <= 12`Does February have 28 days or 29 days? Think of Leap years.",
          "output": "def number_of_days(year, month):\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return 29\n        return 28\n    if month in [4, 6, 9, 11]:\n        return 30\n    return 31\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leetcodeisacommunityforcoders \"\n**Output:**  \"ltcdscmmntyfrcdrs \"\n\n**Example 2:**\n\n**Input:** s =  \"aeiou \"\n**Output:**  \" \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of only lowercase English letters.How to erase vowels in a string? Loop over the string and check every character, if it is a vowel ignore it otherwise add it to the answer.",
          "output": "def is_robot_bounded(instructions: str) -> bool:\n    x, y, dir = 0, 0, 0\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    for c in instructions:\n        if c == 'G':\n            x += moves[dir][0]\n            y += moves[dir][1]\n        elif c == 'L':\n            dir = (dir + 3) % 4\n        else:\n            dir = (dir + 1) % 4\n\n    return (x == 0 and y == 0) or dir != 0\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return `true` _if and only if it is an **Armstrong number**_.\n\nThe `k`\\-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 153\n**Output:** true\n**Explanation:** 153 is a 3-digit number, and 153 = 13 + 53 + 33.\n\n**Example 2:**\n\n**Input:** n = 123\n**Output:** false\n**Explanation:** 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36.\n\n**Constraints:**\n\n*   `1 <= n <= 108`Check if the given k-digit number equals the sum of the k-th power of it's digits. How to compute the sum of the k-th power of the digits of a number ? Can you divide the number into digits using division and modulus operations ? You can find the least significant digit of a number by taking it modulus 10. And you can remove it by dividing the number by 10 (integer division). Once you have a digit, you can raise it to the power of k and add it to the sum.",
          "output": "def is_armstrong(n: int) -> bool:\n    power_sum = 0\n    original = n\n    k = len(str(n))\n    while n > 0:\n        digit = n % 10\n        power_sum += digit ** k\n        n //= 10\n    return power_sum == original\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the maximum **average** value of a **subtree** of that tree_. Answers within `10-5` of the actual answer will be accepted.\n\nA **subtree** of a tree is any node of that tree plus all its descendants.\n\nThe **average** value of a tree is the sum of its values, divided by the number of nodes.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,6,1\\]\n**Output:** 6.00000\n**Explanation:** \nFor the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.\nFor the node with value = 6 we have an average of 6 / 1 = 6.\nFor the node with value = 1 we have an average of 1 / 1 = 1.\nSo the answer is 6 which is the maximum.\n\n**Example 2:**\n\n**Input:** root = \\[0,null,1\\]\n**Output:** 1.00000\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `0 <= Node.val <= 105`Can you find the sum of values and the number of nodes for every sub-tree ? Can you find the sum of values and the number of nodes for a sub-tree given the sum of values and the number of nodes of it's left and right sub-trees ? Use depth first search to recursively find the solution for the children of a node then use their solutions to compute the current node's solution.",
          "output": "from collections import defaultdict\n\ndef gardenNoAdj(n, paths):\n    graph = defaultdict(set)\n    for x, y in paths:\n        graph[x - 1].add(y - 1)\n        graph[y - 1].add(x - 1)\n    \n    result = [0] * n\n    for i in range(n):\n        used_flowers = {result[neighbor] for neighbor in graph[i]}\n        for flower in range(1, 5):\n            if flower not in used_flowers:\n                result[i] = flower\n                break\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, find the maximum value `v` for which there exist **different** nodes `a` and `b` where `v = |a.val - b.val|` and `a` is an ancestor of `b`.\n\nA node `a` is an ancestor of `b` if either: any child of `a` is equal to `b` or any child of `a` is an ancestor of `b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[8,3,10,1,6,null,14,null,null,4,7,13\\]\n**Output:** 7\n**Explanation:** We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,null,0,3\\]\n**Output:** 3\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 5000]`.\n*   `0 <= Node.val <= 105`For each subtree, find the minimum value and maximum value of its descendants.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef maxAncestorDiff(root: TreeNode) -> int:\n    def helper(node, mn, mx):\n        if node is None:\n            return mx - mn\n\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n\n        left_diff = helper(node.left, mn, mx)\n        right_diff = helper(node.right, mn, mx)\n\n        return max(left_diff, right_diff)\n\n    return helper(root, root.val, root.val)\n"
     },
     {
          "instruction": "Write python code for this problem: We run a preorder depth-first search (DFS) on the `root` of a binary tree.\n\nAt each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node. If the depth of a node is `D`, the depth of its immediate child is `D + 1`. The depth of the `root` node is `0`.\n\nIf a node has only one child, that child is guaranteed to be **the left child**.\n\nGiven the output `traversal` of this traversal, recover the tree and return _its_ `root`.\n\n",
          "input": "**Example 1:**\n\n**Input:** traversal =  \"1-2--3--4-5--6--7 \"\n**Output:** \\[1,2,5,3,4,6,7\\]\n\n**Example 2:**\n\n**Input:** traversal =  \"1-2--3---4-5--6---7 \"\n**Output:** \\[1,2,5,3,null,6,null,4,null,7\\]\n\n**Example 3:**\n\n**Input:** traversal =  \"1-401--349---90--88 \"\n**Output:** \\[1,401,null,349,88,90\\]\n\n**Constraints:**\n\n*   The number of nodes in the original tree is in the range `[1, 1000]`.\n*   `1 <= Node.val <= 109`Do an iterative depth first search, parsing dashes from the string to inform you how to link the nodes together.",
          "output": "def interval_intersection(firstList, secondList):\n    result = []\n    i, j = 0, 0\n\n    while i < len(firstList) and j < len(secondList):\n        start = max(firstList[i][0], secondList[j][0])\n        end = min(firstList[i][1], secondList[j][1])\n\n        if start <= end:\n            result.append([start, end])\n\n        if firstList[i][1] < secondList[j][1]:\n            i += 1\n        else:\n            j += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given four integers `row`, `cols`, `rCenter`, and `cCenter`. There is a `rows x cols` matrix and you are on the cell with the coordinates `(rCenter, cCenter)`.\n\nReturn _the coordinates of all cells in the matrix, sorted by their **distance** from_ `(rCenter, cCenter)` _from the smallest distance to the largest distance_. You may return the answer in **any order** that satisfies this condition.\n\nThe **distance** between two cells `(r1, c1)` and `(r2, c2)` is `|r1 - r2| + |c1 - c2|`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rows = 1, cols = 2, rCenter = 0, cCenter = 0\n**Output:** \\[\\[0,0\\],\\[0,1\\]\\]\n**Explanation:** The distances from (0, 0) to other cells are: \\[0,1\\]\n\n**Example 2:**\n\n**Input:** rows = 2, cols = 2, rCenter = 0, cCenter = 1\n**Output:** \\[\\[0,1\\],\\[0,0\\],\\[1,1\\],\\[1,0\\]\\]\n**Explanation:** The distances from (0, 1) to other cells are: \\[0,1,1,2\\]\nThe answer \\[\\[0,1\\],\\[1,1\\],\\[0,0\\],\\[1,0\\]\\] would also be accepted as correct.\n\n**Example 3:**\n\n**Input:** rows = 2, cols = 3, rCenter = 1, cCenter = 2\n**Output:** \\[\\[1,2\\],\\[0,2\\],\\[1,1\\],\\[0,1\\],\\[1,0\\],\\[0,0\\]\\]\n**Explanation:** The distances from (1, 2) to other cells are: \\[0,1,1,2,2,3\\]\nThere are other answers that would also be accepted as correct, such as \\[\\[1,2\\],\\[1,1\\],\\[0,2\\],\\[1,0\\],\\[0,1\\],\\[0,0\\]\\].\n\n**Constraints:**\n\n*   `1 <= rows, cols <= 100`\n*   `0 <= rCenter < rows`\n*   `0 <= cCenter < cols`",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def smallestFromLeaf(self, root: TreeNode) -> str:\n        if not root:\n            return \"|\"\n        s = chr(root.val + 97)\n        if not root.left and not root.right:\n            return s\n        left = self.smallestFromLeaf(root.left)\n        right = self.smallestFromLeaf(root.right)\n        return min(left, right) + s\n"
     },
     {
          "instruction": "Write python code for this problem: A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.\n\nReturn _the minimum cost to fly every person to a city_ such that exactly `n` people arrive in each city.\n\n",
          "input": "**Example 1:**\n\n**Input:** costs = \\[\\[10,20\\],\\[30,200\\],\\[400,50\\],\\[30,20\\]\\]\n**Output:** 110\n**Explanation:** \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n\n**Example 2:**\n\n**Input:** costs = \\[\\[259,770\\],\\[448,54\\],\\[926,667\\],\\[184,139\\],\\[840,118\\],\\[577,469\\]\\]\n**Output:** 1859\n\n**Example 3:**\n\n**Input:** costs = \\[\\[515,563\\],\\[451,713\\],\\[537,709\\],\\[343,819\\],\\[855,779\\],\\[457,60\\],\\[650,359\\],\\[631,42\\]\\]\n**Output:** 3086\n\n**Constraints:**\n\n*   `2 * n == costs.length`\n*   `2 <= costs.length <= 100`\n*   `costs.length` is even.\n*   `1 <= aCosti, bCosti <= 1000`",
          "output": "from collections import defaultdict, deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef verticalTraversal(root):\n    if not root:\n        return []\n\n    columns = defaultdict(lambda: defaultdict(list))\n    q = deque([(root, 0, 0)])\n\n    while q:\n        node, row, col = q.popleft()\n        columns[col][row].append(node.val)\n        columns[col][row].sort()\n\n        if node.left:\n            q.append((node.left, row + 1, col - 1))\n        if node.right:\n            q.append((node.right, row + 1, col + 1))\n\n    return [[val for row in column_data.values() for val in row] for column_data in sorted(columns.values())]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and two integers `firstLen` and `secondLen`, return _the maximum sum of elements in two non-overlapping **subarrays** with lengths_ `firstLen` _and_ `secondLen`.\n\nThe array with length `firstLen` could occur before or after the array with length `secondLen`, but they have to be non-overlapping.\n\nA **subarray** is a **contiguous** part of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,6,5,2,2,5,1,9,4\\], firstLen = 1, secondLen = 2\n**Output:** 20\n**Explanation:** One choice of subarrays is \\[9\\] with length 1, and \\[6,5\\] with length 2.\n\n**Example 2:**\n\n**Input:** nums = \\[3,8,1,3,2,1,8,9,0\\], firstLen = 3, secondLen = 2\n**Output:** 29\n**Explanation:** One choice of subarrays is \\[3,8,1\\] with length 3, and \\[8,9\\] with length 2.\n\n**Example 3:**\n\n**Input:** nums = \\[2,1,5,6,0,9,5,0,3,8\\], firstLen = 4, secondLen = 3\n**Output:** 31\n**Explanation:** One choice of subarrays is \\[5,6,0,9\\] with length 4, and \\[0,3,8\\] with length 3.\n\n**Constraints:**\n\n*   `1 <= firstLen, secondLen <= 1000`\n*   `2 <= firstLen + secondLen <= 1000`\n*   `firstLen + secondLen <= nums.length <= 1000`\n*   `0 <= nums[i] <= 1000`We can use prefix sums to calculate any subarray sum quickly.\r\nFor each L length subarray, find the best possible M length subarray that occurs before and after it.",
          "output": "def add_to_array_form(num, k):\n    for i in range(len(num) - 1, -1, -1):\n        k, num[i] = divmod(num[i] + k, 10)\n        if k == 0:\n            break\n    while k:\n        k, digit = divmod(k, 10)\n        num.insert(0, digit)\n    return num\n"
     },
     {
          "instruction": "Write python code for this problem: Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings `words`.\n\nFor example, if `words = [ \"abc \", \"xyz \"]` and the stream added the four characters (one by one) `'a'`, `'x'`, `'y'`, and `'z'`, your algorithm should detect that the suffix `\"xyz \"` of the characters `\"axyz \"` matches `\"xyz \"` from `words`.\n\nImplement the `StreamChecker` class:\n\n*   `StreamChecker(String[] words)` Initializes the object with the strings array `words`.\n*   `boolean query(char letter)` Accepts a new character from the stream and returns `true` if any non-empty suffix from the stream forms a word that is in `words`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"StreamChecker \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \",  \"query \"\\]\n\\[\\[\\[ \"cd \",  \"f \",  \"kl \"\\]\\], \\[ \"a \"\\], \\[ \"b \"\\], \\[ \"c \"\\], \\[ \"d \"\\], \\[ \"e \"\\], \\[ \"f \"\\], \\[ \"g \"\\], \\[ \"h \"\\], \\[ \"i \"\\], \\[ \"j \"\\], \\[ \"k \"\\], \\[ \"l \"\\]\\]\n**Output**\n\\[null, false, false, false, true, false, true, false, false, false, false, false, true\\]\n\n**Explanation**\nStreamChecker streamChecker = new StreamChecker(\\[ \"cd \",  \"f \",  \"kl \"\\]);\nstreamChecker.query( \"a \"); // return False\nstreamChecker.query( \"b \"); // return False\nstreamChecker.query( \"c \"); // return False\nstreamChecker.query( \"d \"); // return True, because 'cd' is in the wordlist\nstreamChecker.query( \"e \"); // return False\nstreamChecker.query( \"f \"); // return True, because 'f' is in the wordlist\nstreamChecker.query( \"g \"); // return False\nstreamChecker.query( \"h \"); // return False\nstreamChecker.query( \"i \"); // return False\nstreamChecker.query( \"j \"); // return False\nstreamChecker.query( \"k \"); // return False\nstreamChecker.query( \"l \"); // return True, because 'kl' is in the wordlist\n\n**Constraints:**\n\n*   `1 <= words.length <= 2000`\n*   `1 <= words[i].length <= 200`\n*   `words[i]` consists of lowercase English letters.\n*   `letter` is a lowercase English letter.\n*   At most `4 * 104` calls will be made to query.Put the words into a trie, and manage a set of pointers within that trie.",
          "output": "def equationsPossible(equations):\n    parent = [i for i in range(26)]\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    for e in equations:\n        if e[1] == '=':\n            x = ord(e[0]) - ord('a')\n            y = ord(e[3]) - ord('a')\n            parent[find(x)] = find(y)\n\n    for e in equations:\n        if e[1] == '!' and find(ord(e[0]) - ord('a')) == find(ord(e[3]) - ord('a')):\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the largest integer that only occurs once_. If no integer occurs once, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,7,3,9,4,9,8,3,1\\]\n**Output:** 8\n**Explanation:** The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it is the answer.\n\n**Example 2:**\n\n**Input:** nums = \\[9,9,8,8\\]\n**Output:** -1\n**Explanation:** There is no number that occurs only once.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2000`\n*   `0 <= nums[i] <= 1000`Find the number of occurrences of each value. Use an array or a hash table to do that. Look for the largest value with number of occurrences = 1.",
          "output": "def last_substring(s: str) -> str:\n    i, j, k, n = 0, 1, 0, len(s)\n    while j + k < n:\n        if s[i + k] == s[j + k]:\n            k += 1\n        elif s[i + k] < s[j + k]:\n            i = j\n            j += 1\n            k = 0\n        else:\n            j += 1\n            k = 0\n    return s[i:]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` integer matrix `grid`, return _the maximum **score** of a path starting at_ `(0, 0)` _and ending at_ `(m - 1, n - 1)` moving in the 4 cardinal directions.\n\nThe **score** of a path is the minimum value in that path.\n\n*   For example, the score of the path `8 -> 4 -> 5 -> 9` is `4`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[5,4,5\\],\\[1,2,6\\],\\[7,4,6\\]\\]\n**Output:** 4\n**Explanation:** The path with the maximum score is highlighted in yellow. \n\n**Example 2:**\n\n**Input:** grid = \\[\\[2,2,1,2,2,2\\],\\[1,2,2,2,1,2\\]\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** grid = \\[\\[3,4,6,3,4\\],\\[0,2,1,1,7\\],\\[8,8,3,2,7\\],\\[3,2,4,9,8\\],\\[4,1,2,0,0\\],\\[4,6,5,4,3\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 100`\n*   `0 <= grid[i][j] <= 109`What if we sort each cell of the matrix by the value? Don't include small values in your path if you can only include large values. Let's keep adding a possible cell to use in the path incrementally with decreasing values. If the start and end cells are connected then we don't need to add more cells. Use union-find data structure to check connectivity and return as answer the value of the given cell that makes start and end cells connected.",
          "output": "def maxScore(grid):\n    m, n = len(grid), len(grid[0])\n\n    for i in range(1, n):\n        grid[0][i] = min(grid[0][i], grid[0][i - 1])\n\n    for i in range(1, m):\n        grid[i][0] = min(grid[i][0], grid[i - 1][0])\n\n        for j in range(1, n):\n            grid[i][j] = max(min(grid[i - 1][j], grid[i][j]), min(grid[i][j - 1], grid[i][j]))\n\n    return grid[m - 1][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cities labeled from `1` to `n`. You are given the integer `n` and an array `connections` where `connections[i] = [xi, yi, costi]` indicates that the cost of connecting city `xi` and city `yi` (bidirectional connection) is `costi`.\n\nReturn _the minimum **cost** to connect all the_ `n` _cities such that there is at least one path between each pair of cities_. If it is impossible to connect all the `n` cities, return `-1`,\n\nThe **cost** is the sum of the connections' costs used.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, connections = \\[\\[1,2,5\\],\\[1,3,6\\],\\[2,3,1\\]\\]\n**Output:** 6\n**Explanation:** Choosing any 2 edges will connect all cities so we choose the minimum 2.\n\n**Example 2:**\n\n**Input:** n = 4, connections = \\[\\[1,2,3\\],\\[3,4,4\\]\\]\n**Output:** -1\n**Explanation:** There is no way to connect all cities even if all edges are used.\n\n**Constraints:**\n\n*   `1 <= n <= 104`\n*   `1 <= connections.length <= 104`\n*   `connections[i].length == 3`\n*   `1 <= xi, yi <= n`\n*   `xi != yi`\n*   `0 <= costi <= 105`What if we model the cities as a graph? Build a graph of cities and find the minimum spanning tree. You can use a variation of the Kruskal's algorithm for that. Sort the edges by their cost and use a union-find data structure. How to check all cities are connected? At the beginning we have n connected components, each time we connect two components the number of connected components is reduced by one. At the end we should end with only a single component otherwise return -1.",
          "output": "def find(parent, x):\n    if parent[x] != x:\n        parent[x] = find(parent, parent[x])\n    return parent[x]\n\ndef minimumCost(n, connections):\n    connections.sort(key=lambda x: x[2])\n\n    parent = list(range(n + 1))\n\n    cost = 0\n    edges = 0\n    for c in connections:\n        root_x = find(parent, c[0])\n        root_y = find(parent, c[1])\n\n        if root_x != root_y:\n            parent[root_y] = root_x\n            cost += c[2]\n            edges += 1\n\n        if edges == n - 1:\n            break\n\n    return cost if edges == n - 1 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`.\n\nIn one semester, you can take **any number** of courses as long as you have taken all the prerequisites in the **previous** semester for the courses you are taking.\n\nReturn _the **minimum** number of semesters needed to take all courses_. If there is no way to take all the courses, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, relations = \\[\\[1,3\\],\\[2,3\\]\\]\n**Output:** 2\n**Explanation:** The figure above represents the given graph.\nIn the first semester, you can take courses 1 and 2.\nIn the second semester, you can take course 3.\n\n**Example 2:**\n\n**Input:** n = 3, relations = \\[\\[1,2\\],\\[2,3\\],\\[3,1\\]\\]\n**Output:** -1\n**Explanation:** No course can be studied because they are prerequisites of each other.\n\n**Constraints:**\n\n*   `1 <= n <= 5000`\n*   `1 <= relations.length <= 5000`\n*   `relations[i].length == 2`\n*   `1 <= prevCoursei, nextCoursei <= n`\n*   `prevCoursei != nextCoursei`\n*   All the pairs `[prevCoursei, nextCoursei]` are **unique**.Try to think of it as a graph problem. It will be impossible to study all the courses if the graph had a cycle. The graph is a directed acyclic graph (DAG). The answer is the longes path in this DAG. You can use DP to find the longest path in the DAG.",
          "output": "def minimum_semesters(n: int, relations: List[List[int]]) -> int:\n    in_degree = [0] * (n + 1)\n    graph = [[] for _ in range(n + 1)]\n\n    for prev, next in relations:\n        graph[prev].append(next)\n        in_degree[next] += 1\n\n    q = [i for i in range(1, n + 1) if in_degree[i] == 0]\n    semesters = 0\n\n    while q:\n        next_q = []\n        semesters += 1\n        for course in q:\n            n -= 1\n            for next_course in graph[course]:\n                in_degree[next_course] -= 1\n                if in_degree[next_course] == 0:\n                    next_q.append(next_course)\n        q = next_q\n\n    return semesters if n == 0 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` sorted in non-decreasing order and an integer `target`, return `true` _if_ `target` _is a **majority** element, or_ `false` _otherwise_.\n\nA **majority** element in an array `nums` is an element that appears more than `nums.length / 2` times in the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,4,5,5,5,5,5,6,6\\], target = 5\n**Output:** true\n**Explanation:** The value 5 appears 5 times and the length of the array is 9.\nThus, 5 is a majority element because 5 > 9/2 is true.\n\n**Example 2:**\n\n**Input:** nums = \\[10,100,101,101\\], target = 101\n**Output:** false\n**Explanation:** The value 101 appears 2 times and the length of the array is 4.\nThus, 101 is not a majority element because 2 > 4/2 is false.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i], target <= 109`\n*   `nums` is sorted in non-decreasing order.How to check if a given number target is a majority element?. Find the frequency of target and compare it to the length of the array. You can find the frequency of an element using Binary Search since the array is sorted. Using Binary Search, find the first and last occurrences of A. Then just calculate the difference between the indexes of these occurrences.",
          "output": "def is_majority_element(nums, target):\n    count = 0\n    for num in nums:\n        if num == target: count += 1\n        if count > len(nums) / 2: return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: There are three stones in different positions on the X-axis. You are given three integers `a`, `b`, and `c`, the positions of the stones.\n\nIn one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions `x`, `y`, and `z` with `x < y < z`. You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`.\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\n\nReturn _an integer array_ `answer` _of length_ `2` _where_:\n\n*   `answer[0]` _is the minimum number of moves you can play, and_\n*   `answer[1]` _is the maximum number of moves you can play_.\n\n",
          "input": "**Example 1:**\n\n**Input:** a = 1, b = 2, c = 5\n**Output:** \\[1,2\\]\n**Explanation:** Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.\n\n**Example 2:**\n\n**Input:** a = 4, b = 3, c = 2\n**Output:** \\[0,0\\]\n**Explanation:** We cannot make any moves.\n\n**Example 3:**\n\n**Input:** a = 3, b = 5, c = 1\n**Output:** \\[1,2\\]\n**Explanation:** Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.\n\n**Constraints:**\n\n*   `1 <= a, b, c <= 100`\n*   `a`, `b`, and `c` have different values.For the minimum:  We can always do it in at most 2 moves, by moving one stone next to another, then the third stone next to the other two.  When can we do it in 1 move?  0 moves?\r\n\r\nFor the maximum:  Every move, the maximum position minus the minimum position must decrease by at least 1.",
          "output": "def broken_calc(startValue: int, target: int) -> int:\n    operations = 0\n    while target > startValue:\n        target = target // 2 if target % 2 == 0 else target + 1\n        operations += 1\n    return operations + startValue - target\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer matrix `grid`, and three integers `row`, `col`, and `color`. Each value in the grid represents the color of the grid square at that location.\n\nTwo squares belong to the same **connected component** if they have the same color and are next to each other in any of the 4 directions.\n\nThe **border of a connected component** is all the squares in the connected component that are either **4-directionally** adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).\n\nYou should color the **border** of the **connected component** that contains the square `grid[row][col]` with `color`.\n\nReturn _the final grid_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1\\],\\[1,2\\]\\], row = 0, col = 0, color = 3\n**Output:** \\[\\[3,3\\],\\[3,2\\]\\]\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,2,2\\],\\[2,3,2\\]\\], row = 0, col = 1, color = 3\n**Output:** \\[\\[1,3,3\\],\\[2,3,3\\]\\]\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\], row = 1, col = 1, color = 2\n**Output:** \\[\\[2,2,2\\],\\[2,1,2\\],\\[2,2,2\\]\\]\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `1 <= grid[i][j], color <= 1000`\n*   `0 <= row < m`\n*   `0 <= col < n`Use a DFS to find every square in the component.  Then for each square, color it if it has a neighbor that is outside the grid or a different color.",
          "output": "def good_subarrays(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        frequency = {}\n        for j in range(i, len(nums)):\n            frequency[nums[j]] = frequency.get(nums[j], 0) + 1\n            if len(frequency) > k:\n                break\n            if len(frequency) == k:\n                count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2`. We write the integers of `nums1` and `nums2` (in the order they are given) on two separate horizontal lines.\n\nWe may draw connecting lines: a straight line connecting two numbers `nums1[i]` and `nums2[j]` such that:\n\n*   `nums1[i] == nums2[j]`, and\n*   the line we draw does not intersect any other connecting (non-horizontal) line.\n\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\n\nReturn _the maximum number of connecting lines we can draw in this way_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,4,2\\], nums2 = \\[1,2,4\\]\n**Output:** 2\n**Explanation:** We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1\\[1\\] = 4 to nums2\\[2\\] = 4 will intersect the line from nums1\\[2\\]=2 to nums2\\[1\\]=2.\n\n**Example 2:**\n\n**Input:** nums1 = \\[2,5,1,2,5\\], nums2 = \\[10,5,2,1,5,2\\]\n**Output:** 3\n\n**Example 3:**\n\n**Input:** nums1 = \\[1,3,7,1,7,5\\], nums2 = \\[1,9,2,5,1\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 500`\n*   `1 <= nums1[i], nums2[j] <= 2000`Think dynamic programming.  Given an oracle dp(i,j) that tells us how many lines A[i:], B[j:]  [the sequence A[i], A[i+1], ... and B[j], B[j+1], ...] are uncrossed, can we write this as a recursion?",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isCousins(self, root, x, y):\n        def findDepth(node, search_val, depth):\n            if not node:\n                return -1\n            if node.val == search_val:\n                return depth\n            left_depth = findDepth(node.left, search_val, depth + 1)\n            if left_depth != -1:\n                return left_depth\n            return findDepth(node.right, search_val, depth + 1)\n\n        def findParent(node, search_val):\n            if not node or not (node.left or node.right):\n                return None\n            if (node.left and node.left.val == search_val) or (node.right and node.right.val == search_val):\n                return node\n            left_parent = findParent(node.left, search_val)\n            if left_parent:\n                return left_parent\n            return findParent(node.right, search_val)\n\n        x_depth = findDepth(root, x, 0)\n        y_depth = findDepth(root, y, 0)\n        x_parent = findParent(root, x)\n        y_parent = findParent(root, y)\n        return (x_depth == y_depth) and (x_parent != y_parent)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`.\n\nWe start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`.\n\nEach move, we can walk one square north, east, south, or west if the square is **not** in the array of `blocked` squares. We are also not allowed to walk outside of the grid.\n\nReturn `true` _if and only if it is possible to reach the_ `target` _square from the_ `source` _square through a sequence of valid moves_.\n\n",
          "input": "**Example 1:**\n\n**Input:** blocked = \\[\\[0,1\\],\\[1,0\\]\\], source = \\[0,0\\], target = \\[0,2\\]\n**Output:** false\n**Explanation:** The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid.\n\n**Example 2:**\n\n**Input:** blocked = \\[\\], source = \\[0,0\\], target = \\[999999,999999\\]\n**Output:** true\n**Explanation:** Because there are no blocked cells, it is possible to reach the target square.\n\n**Constraints:**\n\n*   `0 <= blocked.length <= 200`\n*   `blocked[i].length == 2`\n*   `0 <= xi, yi < 106`\n*   `source.length == target.length == 2`\n*   `0 <= sx, sy, tx, ty < 106`\n*   `source != target`\n*   It is guaranteed that `source` and `target` are not blocked.If we become stuck, there's either a loop around the source or around the target. If there is a loop around say, the source, what is the maximum number of squares it can have?",
          "output": "from collections import deque\n\ndef orangesRotting(grid):\n    m, n = len(grid), len(grid[0])\n    fresh_oranges = sum(row.count(1) for row in grid)\n    rotten = deque([(i, j) for i, row in enumerate(grid) for j, value in enumerate(row) if value == 2])\n    \n    minutes = 0\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    while rotten and fresh_oranges:\n        for _ in range(len(rotten)):\n            x, y = rotten.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1:\n                    grid[nx][ny] = 2\n                    fresh_oranges -= 1\n                    rotten.append((nx, ny))\n        minutes += 1\n\n    return minutes if fresh_oranges == 0 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary array `data`, return the minimum number of swaps required to group all `1`'s present in the array together in **any place** in the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** data = \\[1,0,1,0,1\\]\n**Output:** 1\n**Explanation:** There are 3 ways to group all 1's together:\n\\[1,1,1,0,0\\] using 1 swap.\n\\[0,1,1,1,0\\] using 2 swaps.\n\\[0,0,1,1,1\\] using 1 swap.\nThe minimum is 1.\n\n**Example 2:**\n\n**Input:** data = \\[0,0,0,1,0\\]\n**Output:** 0\n**Explanation:** Since there is only one 1 in the array, no swaps are needed.\n\n**Example 3:**\n\n**Input:** data = \\[1,0,1,0,1,0,0,1,1,0,1\\]\n**Output:** 3\n**Explanation:** One possible solution that uses 3 swaps is \\[0,0,0,0,0,1,1,1,1,1,1\\].\n\n**Constraints:**\n\n*   `1 <= data.length <= 105`\n*   `data[i]` is either `0` or `1`.How many 1's should be grouped together ? Is not a fixed number? Yeah it's just the number of 1's the whole array has. Let's name this number as ones Every subarray of size of ones, needs some number of swaps to reach, Can you find the number of swaps needed to group all 1's in this subarray? It's the number of zeros in that subarray. Do you need to count the number of zeros all over again for every position ? Use Sliding Window technique.",
          "output": "def minSwaps(data):\n    ones = sum(data)\n    cur_ones, max_ones = 0, 0\n    for i, d in enumerate(data):\n        cur_ones += d\n        if i >= ones:\n            cur_ones -= data[i - ones]\n        max_ones = max(max_ones, cur_ones)\n    return ones - max_ones\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two string arrays `username` and `website` and an integer array `timestamp`. All the given arrays are of the same length and the tuple `[username[i], website[i], timestamp[i]]` indicates that the user `username[i]` visited the website `website[i]` at time `timestamp[i]`.\n\nA **pattern** is a list of three websites (not necessarily distinct).\n\n*   For example, `[ \"home \", \"away \", \"love \"]`, `[ \"leetcode \", \"love \", \"leetcode \"]`, and `[ \"luffy \", \"luffy \", \"luffy \"]` are all patterns.\n\nThe **score** of a **pattern** is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern.\n\n*   For example, if the pattern is `[ \"home \", \"away \", \"love \"]`, the score is the number of users `x` such that `x` visited `\"home \"` then visited `\"away \"` and visited `\"love \"` after that.\n*   Similarly, if the pattern is `[ \"leetcode \", \"love \", \"leetcode \"]`, the score is the number of users `x` such that `x` visited `\"leetcode \"` then visited `\"love \"` and visited `\"leetcode \"` **one more time** after that.\n*   Also, if the pattern is `[ \"luffy \", \"luffy \", \"luffy \"]`, the score is the number of users `x` such that `x` visited `\"luffy \"` three different times at different timestamps.\n\nReturn _the **pattern** with the largest **score**_. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.\n\n",
          "input": "**Example 1:**\n\n**Input:** username = \\[ \"joe \", \"joe \", \"joe \", \"james \", \"james \", \"james \", \"james \", \"mary \", \"mary \", \"mary \"\\], timestamp = \\[1,2,3,4,5,6,7,8,9,10\\], website = \\[ \"home \", \"about \", \"career \", \"home \", \"cart \", \"maps \", \"home \", \"home \", \"about \", \"career \"\\]\n**Output:** \\[ \"home \", \"about \", \"career \"\\]\n**Explanation:** The tuples in this example are:\n\\[ \"joe \", \"home \",1\\],\\[ \"joe \", \"about \",2\\],\\[ \"joe \", \"career \",3\\],\\[ \"james \", \"home \",4\\],\\[ \"james \", \"cart \",5\\],\\[ \"james \", \"maps \",6\\],\\[ \"james \", \"home \",7\\],\\[ \"mary \", \"home \",8\\],\\[ \"mary \", \"about \",9\\], and \\[ \"mary \", \"career \",10\\].\nThe pattern ( \"home \",  \"about \",  \"career \") has score 2 (joe and mary).\nThe pattern ( \"home \",  \"cart \",  \"maps \") has score 1 (james).\nThe pattern ( \"home \",  \"cart \",  \"home \") has score 1 (james).\nThe pattern ( \"home \",  \"maps \",  \"home \") has score 1 (james).\nThe pattern ( \"cart \",  \"maps \",  \"home \") has score 1 (james).\nThe pattern ( \"home \",  \"home \",  \"home \") has score 0 (no user visited home 3 times).\n\n**Example 2:**\n\n**Input:** username = \\[ \"ua \", \"ua \", \"ua \", \"ub \", \"ub \", \"ub \"\\], timestamp = \\[1,2,3,4,5,6\\], website = \\[ \"a \", \"b \", \"a \", \"a \", \"b \", \"c \"\\]\n**Output:** \\[ \"a \", \"b \", \"a \"\\]\n\n**Constraints:**\n\n*   `3 <= username.length <= 50`\n*   `1 <= username[i].length <= 10`\n*   `timestamp.length == username.length`\n*   `1 <= timestamp[i] <= 109`\n*   `website.length == username.length`\n*   `1 <= website[i].length <= 10`\n*   `username[i]` and `website[i]` consist of lowercase English letters.\n*   It is guaranteed that there is at least one user who visited at least three websites.\n*   All the tuples `[username[i], timestamp[i], website[i]]` are **unique**.Let's find for every user separately the websites he visited. Consider all possible 3-sequences, find the number of distinct users who visited each of them. How to check if some user visited some 3-sequence ? Store for every user all the 3-sequence he visited.",
          "output": "from typing import List\nfrom collections import defaultdict\nfrom itertools import combinations\n\nclass Solution:\n    def mostVisitedPattern(self, username: List[str], timestamp: List[int], website: List[str]) -> List[str]:\n        n = len(username)\n        visits = defaultdict(list)\n        \n        # user_visits: {user: [(timestamp, website),...]}\n        for i in range(n):\n            visits[username[i]].append((timestamp[i], website[i]))\n\n\n        for user in visits:\n            visits[user].sort()\n        \n        patterns = defaultdict(int)\n        \n        for user in visits:\n            websites = [web for _, web in visits[user]]\n            patterns_set = set(combinations(websites, 3))\n\n            for pattern in patterns_set:\n                patterns[pattern] += 1\n                \n        patterns = sorted(patterns.items(), key=lambda x: (-x[1], x[0]))\n        \n        return list(patterns[0][0])\n"
     },
     {
          "instruction": "Write python code for this problem: You have a convex `n`\\-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., **clockwise order**).\n\nYou will **triangulate** the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.\n\nReturn _the smallest possible total score that you can achieve with some triangulation of the polygon_.\n\n",
          "input": "**Example 1:**\n\n**Input:** values = \\[1,2,3\\]\n**Output:** 6\n**Explanation:** The polygon is already triangulated, and the score of the only triangle is 6.\n\n**Example 2:**\n\n**Input:** values = \\[3,7,4,5\\]\n**Output:** 144\n**Explanation:** There are two triangulations, with possible scores: 3\\*7\\*5 + 4\\*5\\*7 = 245, or 3\\*4\\*5 + 3\\*4\\*7 = 144.\nThe minimum score is 144.\n\n**Example 3:**\n\n**Input:** values = \\[1,3,1,4,1,5\\]\n**Output:** 13\n**Explanation:** The minimum score triangulation has score 1\\*1\\*3 + 1\\*1\\*4 + 1\\*1\\*5 + 1\\*1\\*1 = 13.\n\n**Constraints:**\n\n*   `n == values.length`\n*   `3 <= n <= 50`\n*   `1 <= values[i] <= 100`Without loss of generality, there is a triangle that uses adjacent vertices A[0] and A[N-1] (where N = A.length).  Depending on your choice K of it, this breaks down the triangulation into two subproblems A[1:K] and A[K+1:N-1].",
          "output": "def find_judge(n, trust):\n    trustCounts = [0] * (n + 1)\n    for a, b in trust:\n        trustCounts[a] -= 1\n        trustCounts[b] += 1\n\n    for i in range(1, n + 1):\n        if trustCounts[i] == n - 1:\n            return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `words` and a string `chars`.\n\nA string is **good** if it can be formed by characters from chars (each character can only be used once).\n\nReturn _the sum of lengths of all good strings in words_.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"cat \", \"bt \", \"hat \", \"tree \"\\], chars =  \"atach \"\n**Output:** 6\n**Explanation:** The strings that can be formed are  \"cat \" and  \"hat \" so the answer is 3 + 3 = 6.\n\n**Example 2:**\n\n**Input:** words = \\[ \"hello \", \"world \", \"leetcode \"\\], chars =  \"welldonehoneyr \"\n**Output:** 10\n**Explanation:** The strings that can be formed are  \"hello \" and  \"world \" so the answer is 5 + 5 = 10.\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length, chars.length <= 100`\n*   `words[i]` and `chars` consist of lowercase English letters.Solve the problem for each string in words independently. Now try to think in frequency of letters. Count how many times each character occurs in string chars. To form a string using characters from chars, the frequency of each character in chars must be greater than or equal the frequency of that character in the string to be formed.",
          "output": "def num_tile_possibilities(tiles: str) -> int:\n    freq = [0] * 26\n    for c in tiles:\n        freq[ord(c) - ord('A')] += 1\n\n    def dfs(freq):\n        result = 0\n        for i in range(26):\n            if freq[i] > 0:\n                freq[i] -= 1\n                result += 1 + dfs(freq)\n                freq[i] += 1\n        return result\n\n    return dfs(freq)\n"
     },
     {
          "instruction": "Write python code for this problem: There are some stones in different positions on the X-axis. You are given an integer array `stones`, the positions of the stones.\n\nCall a stone an **endpoint stone** if it has the smallest or largest position. In one move, you pick up an **endpoint stone** and move it to an unoccupied position so that it is no longer an **endpoint stone**.\n\n*   In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position `5`, since moving it to any position (such as `0`, or `3`) will still keep that stone as an endpoint stone.\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\n\nReturn _an integer array_ `answer` _of length_ `2` _where_:\n\n*   `answer[0]` _is the minimum number of moves you can play, and_\n*   `answer[1]` _is the maximum number of moves you can play_.\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[7,4,9\\]\n**Output:** \\[1,2\\]\n**Explanation:** We can move 4 -> 8 for one move to finish the game.\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.\n\n**Example 2:**\n\n**Input:** stones = \\[6,5,4,3,10\\]\n**Output:** \\[2,3\\]\n**Explanation:** We can move 3 -> 8 then 10 -> 7 to finish the game.\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.\n\n**Constraints:**\n\n*   `3 <= stones.length <= 104`\n*   `1 <= stones[i] <= 109`\n*   All the values of `stones` are **unique**.For the minimum, how many cows are already in place?\r\nFor the maximum, we have to lose either the gap A[1] - A[0] or A[N-1] - A[N-2]  (where N = A.length), but every other space can be occupied.",
          "output": "def insertIntoMaxTree(self, root: TreeNode, val: int) -> TreeNode:\n    if root is None or val > root.val:\n        newNode = TreeNode(val)\n        newNode.left = root\n        return newNode\n    root.right = self.insertIntoMaxTree(root.right, val)\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\nAs a reminder, a _binary search tree_ is a tree that satisfies these constraints:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8\\]\n**Output:** \\[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8\\]\n\n**Example 2:**\n\n**Input:** root = \\[0,null,1\\]\n**Output:** \\[1,null,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `0 <= Node.val <= 100`\n*   All the values in the tree are **unique**.\n\n**Note:** This question is the same as 538: [https://leetcode.com/problems/convert-bst-to-greater-tree/](https://leetcode.com/problems/convert-bst-to-greater-tree/)What traversal method organizes all nodes in sorted order?",
          "output": "from math import sqrt\nfrom itertools import permutations\n\ndef is_squareful(x, int_y):\n    s = int(sqrt(x + y))\n    return s * s == x + y\n\ndef squareful_perms(nums):\n    count = 0\n    for p in permutations(nums):\n        if all(is_squareful(p[i], p[i + 1]) for i in range(len(p) - 1)):\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return `true` _if these points are a **boomerang**_.\n\nA **boomerang** is a set of three points that are **all distinct** and **not in a straight line**.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[2,3\\],\\[3,2\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\]\n**Output:** false\n\n**Constraints:**\n\n*   `points.length == 3`\n*   `points[i].length == 2`\n*   `0 <= xi, yi <= 100`3 points form a boomerang if and only if the triangle formed from them has non-zero area.",
          "output": "def min_k_bit_flips(nums, k):\n    n, res, flipped = len(nums), 0, 0\n    change = [0] * n\n    for i in range(n - k + 1):\n        flipped ^= change[i]\n        if nums[i] == flipped:\n            res += 1\n            flipped ^= 1\n            if i + k < n:\n                change[i + k] ^= 1\n    for i in range(n - k + 1, n):\n        flipped ^= change[i]\n        if nums[i] == flipped:\n            return -1\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.\n\nReturn the **smallest** level `x` such that the sum of all the values of nodes at level `x` is **maximal**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,7,0,7,-8,null,null\\]\n**Output:** 2\n**Explanation:** \nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2.\n\n**Example 2:**\n\n**Input:** root = \\[989,null,10250,98693,-89388,null,null,null,-32127\\]\n**Output:** 2\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-105 <= Node.val <= 105`Calculate the sum for each level then find the level with the maximum sum. How can you traverse the tree ? How can you sum up the values for every level ? Use DFS or BFS to traverse the tree keeping the level of each node, and sum up those values with a map or a frequency array.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef maxLevelSum(root):\n    if not root: return 0\n\n    q = [root]\n    level, max_sum, result_level = 0, float('-inf'), 0\n    \n    while q:\n        qlen, sum = len(q), 0\n        level += 1\n\n        for i in range(qlen):\n            temp = q.pop(0)\n            sum += temp.val\n\n            if temp.left: q.append(temp.left)\n            if temp.right: q.append(temp.right)\n\n        if sum > max_sum:\n            max_sum = sum\n            result_level = level\n    \n    return result_level\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`.\n\nThe distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0,1\\],\\[0,0,0\\],\\[1,0,1\\]\\]\n**Output:** 2\n**Explanation:** The cell (1, 1) is as far as possible from all the land with distance 2.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]\n**Output:** 4\n**Explanation:** The cell (2, 2) is as far as possible from all the land with distance 4.\n\n**Constraints:**\n\n*   `n == grid.length`\n*   `n == grid[i].length`\n*   `1 <= n <= 100`\n*   `grid[i][j]` is `0` or `1`Can you think of this problem in a backwards way ? Imagine expanding outward from each land cell. What kind of search does that ? Use BFS starting from all land cells in the same time. When do you reach the furthest water cell?",
          "output": "from collections import deque\n\ndef maxDistance(grid):\n    distance = -1\n    water_cells = deque()\n    n = len(grid)\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                water_cells.append((i, j))\n\n    if not water_cells or len(water_cells) == n * n:\n        return distance\n\n    directions = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n    while water_cells:\n        size = len(water_cells)\n        for _ in range(size):\n            x, y = water_cells.popleft()\n            for dx, dy in directions:\n                newX, newY = x + dx, y + dy\n                if 0 <= newX < n and 0 <= newY < n and grid[newX][newY] == 0:\n                    grid[newX][newY] = 1\n                    water_cells.append((newX, newY))\n        distance += 1\n        \n    return distance - 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` sorted in non-decreasing order and an integer `k`, return `true` _if this array can be divided into one or more disjoint increasing subsequences of length at least_ `k`_, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,2,3,3,4,4\\], k = 3\n**Output:** true\n**Explanation:** The array can be divided into two subsequences \\[1,2,3,4\\] and \\[2,3,4\\] with lengths at least 3 each.\n\n**Example 2:**\n\n**Input:** nums = \\[5,6,6,7,8\\], k = 3\n**Output:** false\n**Explanation:** There is no way to divide the array using the conditions required.\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`\n*   `nums` is sorted in non-decreasing order.Think in the frequency of the numbers and how this affects the number of sequences needed. What is the minimum number of sequences we need to form? Considering frequency of the numbers. Think about the least number of sequences to maximize the lengths. The number of sequences needed is equal to the maximum frequency of an element. How to put the other elements into sequences ? Think in a greedy approach.",
          "output": "def maxSumAfterPartitioning(arr: list, k: int) -> int:\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        current_max = 0\n        for j in range(1, k + 1):\n            if i - j < 0:\n                break\n            current_max = max(current_max, arr[i - j])\n            dp[i] = max(dp[i], dp[i - j] + current_max * j)\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: On an infinite plane, a robot initially stands at `(0, 0)` and faces north. Note that:\n\n*   The **north direction** is the positive direction of the y-axis.\n*   The **south direction** is the negative direction of the y-axis.\n*   The **east direction** is the positive direction of the x-axis.\n*   The **west direction** is the negative direction of the x-axis.\n\nThe robot can receive one of three instructions:\n\n*   `\"G \"`: go straight 1 unit.\n*   `\"L \"`: turn 90 degrees to the left (i.e., anti-clockwise direction).\n*   `\"R \"`: turn 90 degrees to the right (i.e., clockwise direction).\n\nThe robot performs the `instructions` given in order, and repeats them forever.\n\nReturn `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.\n\n",
          "input": "**Example 1:**\n\n**Input:** instructions =  \"GGLLGG \"\n**Output:** true\n**Explanation:** The robot is initially at (0, 0) facing the north direction.\n \"G \": move one step. Position: (0, 1). Direction: North.\n \"G \": move one step. Position: (0, 2). Direction: North.\n \"L \": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n \"L \": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n \"G \": move one step. Position: (0, 1). Direction: South.\n \"G \": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).\nBased on that, we return true.\n\n**Example 2:**\n\n**Input:** instructions =  \"GG \"\n**Output:** false\n**Explanation:** The robot is initially at (0, 0) facing the north direction.\n \"G \": move one step. Position: (0, 1). Direction: North.\n \"G \": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false.\n\n**Example 3:**\n\n**Input:** instructions =  \"GL \"\n**Output:** true\n**Explanation:** The robot is initially at (0, 0) facing the north direction.\n \"G \": move one step. Position: (0, 1). Direction: North.\n \"L \": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n \"G \": move one step. Position: (-1, 1). Direction: West.\n \"L \": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n \"G \": move one step. Position: (-1, 0). Direction: South.\n \"L \": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n \"G \": move one step. Position: (0, 0). Direction: East.\n \"L \": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).\nBased on that, we return true.\n\n**Constraints:**\n\n*   `1 <= instructions.length <= 100`\n*   `instructions[i]` is `'G'`, `'L'` or, `'R'`.Calculate the final vector of how the robot travels after executing all instructions once - it consists of a change in position plus a change in direction. The robot stays in the circle if and only if (looking at the final vector) it changes direction (ie. doesn't stay pointing north), or it moves 0.",
          "output": "def numRookCaptures(board):\n    x, y, captures = 0, 0, 0\n\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'R':\n                x, y = i, j\n                break\n        if board[x][y] == 'R':\n            break\n\n    dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    for dx, dy in dirs:\n        nx, ny = x + dx, y + dy\n        while 0 <= nx < 8 and 0 <= ny < 8:\n            if board[nx][ny] == 'p':\n                captures += 1\n                break\n            elif board[nx][ny] == 'B':\n                break\n            nx += dx\n            ny += dy\n\n    return captures\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers.\n\nAll gardens have **at most 3** paths coming into or leaving it.\n\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\n\nReturn _**any** such a choice as an array_ `answer`_, where_ `answer[i]` _is the type of flower planted in the_ `(i+1)th` _garden. The flower types are denoted_ `1`_,_ `2`_,_ `3`_, or_ `4`_. It is guaranteed an answer exists._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, paths = \\[\\[1,2\\],\\[2,3\\],\\[3,1\\]\\]\n**Output:** \\[1,2,3\\]\n**Explanation:**\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, \\[1,2,3\\] is a valid answer. Other valid answers include \\[1,2,4\\], \\[1,4,2\\], and \\[3,2,1\\].\n\n**Example 2:**\n\n**Input:** n = 4, paths = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** \\[1,2,1,2\\]\n\n**Example 3:**\n\n**Input:** n = 4, paths = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,1\\],\\[1,3\\],\\[2,4\\]\\]\n**Output:** \\[1,2,3,4\\]\n\n**Constraints:**\n\n*   `1 <= n <= 104`\n*   `0 <= paths.length <= 2 * 104`\n*   `paths[i].length == 2`\n*   `1 <= xi, yi <= n`\n*   `xi != yi`\n*   Every garden has **at most 3** paths coming into or leaving it.Since each garden is connected to at most 3 gardens, there's always an available color for each garden.  For example, if one garden is next to gardens with colors 1, 3, 4,  then color #2 is available.",
          "output": "def mergeStones(stones, k):\n    n = len(stones)\n    if (n - 1) % (k - 1) != 0:\n        return -1\n    prefixSum = [0] * (n + 1)\n    dp = [[[-1] * (k + 1) for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        prefixSum[i + 1] = prefixSum[i] + stones[i]\n\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            for m in range(2, k + 1):\n                for p in range(i, j + 1 - m + 1, k - 1):\n                    dp[i][j][m] = (dp[i][p][1] + dp[p + 1][j][m - 1]) % (1e9 + 7)\n            if (j - i) % (k - 1) == 0:\n                dp[i][j][1] = (dp[i][j][k] + prefixSum[j + 1] - prefixSum[i]) % (1e9 + 7)\n\n    return dp[0][n - 1][1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, partition the array into (contiguous) subarrays of length **at most** `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n\nReturn _the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a **32-bit** integer._\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,15,7,9,2,5,10\\], k = 3\n**Output:** 84\n**Explanation:** arr becomes \\[15,15,15,9,10,10,10\\]\n\n**Example 2:**\n\n**Input:** arr = \\[1,4,1,5,7,3,6,1,9,9,3\\], k = 4\n**Output:** 83\n\n**Example 3:**\n\n**Input:** arr = \\[1\\], k = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= arr.length <= 500`\n*   `0 <= arr[i] <= 109`\n*   `1 <= k <= arr.length`Think dynamic programming:  dp[i] will be the answer for array A[0], ..., A[i-1]. For j = 1 .. k that keeps everything in bounds, dp[i] is the maximum of dp[i-j] + max(A[i-1], ..., A[i-j]) * j .",
          "output": "def grid_illumination(n, lamps, queries):\n    lamp_rows = set()\n    lamp_cols = set()\n    lamp_left_diag = set()\n    lamp_right_diag = set()\n\n    for lamp in lamps:\n        row, col = lamp\n        lamp_rows.add(row)\n        lamp_cols.add(col)\n        lamp_left_diag.add(row - col)\n        lamp_right_diag.add(row + col)\n\n    ans = []\n\n    for query in queries:\n        row, col = query\n        if row in lamp_rows or col in lamp_cols or (row - col) in lamp_left_diag or (row + col) in lamp_right_diag:\n            ans.append(1)\n        else:\n            ans.append(0)\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                newRow, newCol = row + i, col + j\n                lamp_rows.discard(newRow)\n                lamp_cols.discard(newCol)\n                lamp_left_diag.discard(newRow - newCol)\n                lamp_right_diag.discard(newRow + newCol)\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, consider all _duplicated substrings_: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.\n\nReturn **any** duplicated substring that has the longest possible length. If `s` does not have a duplicated substring, the answer is `\" \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \"banana\"\n**Output:** \"ana\"\n\n**Example 2:**\n\n**Input:** s = \"abcd\"\n**Output:** \"\"\n\n**Constraints:**\n\n*   `2 <= s.length <= 3 * 104`\n*   `s` consists of lowercase English letters.Binary search for the length of the answer.  (If there's an answer of length 10, then there are answers of length 9, 8, 7, ...) To check whether an answer of length K exists, we can use Rabin-Karp 's algorithm.",
          "output": "from collections import Counter\n\ndef commonChars(words):\n    merged = Counter()\n    for word in words:\n        word_count = Counter(word)\n        if not merged:\n            merged = word_count\n        else:\n            for char in merged:\n                merged[char] = min(merged[char], word_count[char])\n\n    result = []\n    for char, count in merged.items():\n        result.extend([char] * count)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There is a special keyboard with **all keys in a single row**.\n\nGiven a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`.\n\nYou want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.\n\n",
          "input": "**Example 1:**\n\n**Input:** keyboard =  \"abcdefghijklmnopqrstuvwxyz \", word =  \"cba \"\n**Output:** 4\n**Explanation:** The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.\nTotal time = 2 + 1 + 1 = 4. \n\n**Example 2:**\n\n**Input:** keyboard =  \"pqrstuvwxyzabcdefghijklmno \", word =  \"leetcode \"\n**Output:** 73\n\n**Constraints:**\n\n*   `keyboard.length == 26`\n*   `keyboard` contains each English lowercase letter exactly once in some order.\n*   `1 <= word.length <= 104`\n*   `word[i]` is an English lowercase letter.Can be the problem divided in parts, so solving each part and sum their solutions it should return the answer? Yes, you only need to divide the problem in finger jumps. In each finger jump you need to move your finger from one character to another, you need to know its index. Map each character to it's index. Use a hash table to do that.",
          "output": "def calculate_time(keyboard: str, word: str) -> int:\n    time = 0\n    prev_index = 0\n    char_to_index = {char: i for i, char in enumerate(keyboard)}\n\n    for c in word:\n        time += abs(char_to_index[c] - prev_index)\n        prev_index = char_to_index[c]\n\n    return time\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `str1` and `str2` of the same length, determine whether you can transform `str1` into `str2` by doing **zero or more** _conversions_.\n\nIn one conversion you can convert **all** occurrences of one character in `str1` to **any** other lowercase English character.\n\nReturn `true` if and only if you can transform `str1` into `str2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** str1 =  \"aabcc \", str2 =  \"ccdee \"\n**Output:** true\n**Explanation:** Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter.\n\n**Example 2:**\n\n**Input:** str1 =  \"leetcode \", str2 =  \"codeleet \"\n**Output:** false\n**Explanation:** There is no way to transform str1 to str2.\n\n**Constraints:**\n\n*   `1 <= str1.length == str2.length <= 104`\n*   `str1` and `str2` contain only lowercase English letters.Model the problem as a graph problem. Add an edge from one character to another if you need to convert between them. What if one character needs to be converted into more than one character? There would be no solution. Thus, every node can have at most one outgoing edge. How to process a linked list? How to process a cycle? What if there is a character with no outgoing edge? You can use it to break all cycles!",
          "output": "def canConvert(str1, str2):\n    if str1 == str2: return True;\n    conversion = {}\n    for c1, c2 in zip(str1, str2):\n        if c1 in conversion and conversion[c1] != c2: return False\n        conversion[c1] = c2\n    return len(set(str2)) < 26\n"
     },
     {
          "instruction": "Write python code for this problem: You are asked to design a file system that allows you to create new paths and associate them with different values.\n\nThe format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, \"`/leetcode \"` and \"`/leetcode/problems \"` are valid paths while an empty string `\" \"` and `\"/ \"` are not.\n\nImplement the `FileSystem` class:\n\n*   `bool createPath(string path, int value)` Creates a new `path` and associates a `value` to it if possible and returns `true`. Returns `false` if the path **already exists** or its parent path **doesn't exist**.\n*   `int get(string path)` Returns the value associated with `path` or returns `-1` if the path doesn't exist.\n\n",
          "input": "**Example 1:**\n\n**Input:** \n\\[ \"FileSystem \", \"createPath \", \"get \"\\]\n\\[\\[\\],\\[ \"/a \",1\\],\\[ \"/a \"\\]\\]\n**Output:** \n\\[null,true,1\\]\n**Explanation:** \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath( \"/a \", 1); // return true\nfileSystem.get( \"/a \"); // return 1\n\n**Example 2:**\n\n**Input:** \n\\[ \"FileSystem \", \"createPath \", \"createPath \", \"get \", \"createPath \", \"get \"\\]\n\\[\\[\\],\\[ \"/leet \",1\\],\\[ \"/leet/code \",2\\],\\[ \"/leet/code \"\\],\\[ \"/c/d \",1\\],\\[ \"/c \"\\]\\]\n**Output:** \n\\[null,true,true,2,false,-1\\]\n**Explanation:** \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath( \"/leet \", 1); // return true\nfileSystem.createPath( \"/leet/code \", 2); // return true\nfileSystem.get( \"/leet/code \"); // return 2\nfileSystem.createPath( \"/c/d \", 1); // return false because the parent path  \"/c \" doesn't exist.\nfileSystem.get( \"/c \"); // return -1 because this path doesn't exist.\n\n**Constraints:**\n\n*   `2 <= path.length <= 100`\n*   `1 <= value <= 109`\n*   Each `path` is **valid** and consists of lowercase English letters and `'/'`.\n*   At most `104` calls **in total** will be made to `createPath` and `get`.What if you think of a tree hierarchy for the files?. A path is a node in the tree. Use a hash table to store the valid paths along with their values.",
          "output": "class FileSystem:\n    def __init__(self):\n        self.path_map = {}\n\n    def create_path(self, path: str, value: int) -> bool:\n        if path in self.path_map:\n            return False\n        parent_path = path[:path.rfind('/')]\n        if parent_path and parent_path not in self.path_map:\n            return False\n        self.path_map[path] = value\n        return True\n\n    def get(self, path: str) -> int:\n        return self.path_map.get(path, -1)\n"
     },
     {
          "instruction": "Write python code for this problem: You have some number of sticks with positive integer lengths. These lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick.\n\nYou can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. You must connect all the sticks until there is only one stick remaining.\n\nReturn _the minimum cost of connecting all the given sticks into one stick in this way_.\n\n",
          "input": "**Example 1:**\n\n**Input:** sticks = \\[2,4,3\\]\n**Output:** 14\n**Explanation:** You start with sticks = \\[2,4,3\\].\n1. Combine sticks 2 and 3 for a cost of 2 + 3 = 5. Now you have sticks = \\[5,4\\].\n2. Combine sticks 5 and 4 for a cost of 5 + 4 = 9. Now you have sticks = \\[9\\].\nThere is only one stick left, so you are done. The total cost is 5 + 9 = 14.\n\n**Example 2:**\n\n**Input:** sticks = \\[1,8,3,5\\]\n**Output:** 30\n**Explanation:** You start with sticks = \\[1,8,3,5\\].\n1. Combine sticks 1 and 3 for a cost of 1 + 3 = 4. Now you have sticks = \\[4,8,5\\].\n2. Combine sticks 4 and 5 for a cost of 4 + 5 = 9. Now you have sticks = \\[9,8\\].\n3. Combine sticks 9 and 8 for a cost of 9 + 8 = 17. Now you have sticks = \\[17\\].\nThere is only one stick left, so you are done. The total cost is 4 + 9 + 17 = 30.\n\n**Example 3:**\n\n**Input:** sticks = \\[5\\]\n**Output:** 0\n**Explanation:** There is only one stick, so you don't need to do anything. The total cost is 0.\n\n**Constraints:**\n\n*   `1 <= sticks.length <= 104`\n*   `1 <= sticks[i] <= 104`How many times does every stick contribute to the answer? Some of the sticks will be used more than the others. Which sticks should be used the most/least? The sticks with long lengths cost a lot so we should use these the least. What if we keep merging the two shortest sticks?",
          "output": "import heapq\n\ndef connectSticks(sticks):\n    heapq.heapify(sticks)\n    cost = 0\n    while len(sticks) > 1:\n        first = heapq.heappop(sticks)\n        second = heapq.heappop(sticks)\n        cost += first + second\n        heapq.heappush(sticks, first + second)\n    return cost\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\nWe are playing a game with the stones. On each turn, we choose the **heaviest two stones** and smash them together. Suppose the heaviest two stones have weights `x` and `y` with `x <= y`. The result of this smash is:\n\n*   If `x == y`, both stones are destroyed, and\n*   If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\nAt the end of the game, there is **at most one** stone left.\n\nReturn _the weight of the last remaining stone_. If there are no stones left, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[2,7,4,1,8,1\\]\n**Output:** 1\n**Explanation:** \nWe combine 7 and 8 to get 1 so the array converts to \\[2,4,1,1,1\\] then,\nwe combine 2 and 4 to get 2 so the array converts to \\[2,1,1,1\\] then,\nwe combine 2 and 1 to get 1 so the array converts to \\[1,1,1\\] then,\nwe combine 1 and 1 to get 0 so the array converts to \\[1\\] then that's the value of the last stone.\n\n**Example 2:**\n\n**Input:** stones = \\[1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= stones.length <= 30`\n*   `1 <= stones[i] <= 1000`Simulate the process.  We can do it with a heap, or by sorting some list of stones every time we take a turn.",
          "output": "def longestOnes(nums, k):\n    left, right, max_ones, zero_count = 0, 0, 0, 0\n    while right < len(nums):\n        if nums[right] == 0:\n            zero_count += 1\n        while zero_count > k:\n            if nums[left] == 0:\n                zero_count -= 1\n            left += 1\n        max_ones = max(max_ones, right - left + 1)\n        right += 1\n    return max_ones\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` consisting of lowercase English letters. A **duplicate removal** consists of choosing two **adjacent** and **equal** letters and removing them.\n\nWe repeatedly make **duplicate removals** on `s` until we no longer can.\n\nReturn _the final string after all such duplicate removals have been made_. It can be proven that the answer is **unique**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abbaca \"\n**Output:**  \"ca \"\n**Explanation:** \nFor example, in  \"abbaca \" we could remove  \"bb \" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is  \"aaca \", of which only  \"aa \" is possible, so the final string is  \"ca \".\n\n**Example 2:**\n\n**Input:** s =  \"azxxzy \"\n**Output:**  \"ay \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.Use a stack to process everything greedily.",
          "output": "import heapq\n\ndef maxSumAfterKOperations(nums, k):\n    heapq.heapify(nums)\n    for _ in range(k):\n        current = heapq.heappop(nums)\n        heapq.heappush(nums, -current)\n    return sum(nums)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `words` where each word consists of lowercase English letters.\n\n`wordA` is a **predecessor** of `wordB` if and only if we can insert **exactly one** letter anywhere in `wordA` **without changing the order of the other characters** to make it equal to `wordB`.\n\n*   For example, `\"abc \"` is a **predecessor** of `\"abac \"`, while `\"cba \"` is not a **predecessor** of `\"bcad \"`.\n\nA **word chain** is a sequence of words `[word1, word2, ..., wordk]` with `k >= 1`, where `word1` is a **predecessor** of `word2`, `word2` is a **predecessor** of `word3`, and so on. A single word is trivially a **word chain** with `k == 1`.\n\nReturn _the **length** of the **longest possible word chain** with words chosen from the given list of_ `words`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"a \", \"b \", \"ba \", \"bca \", \"bda \", \"bdca \"\\]\n**Output:** 4\n**Explanation**: One of the longest word chains is \\[ \"a \", \"ba \", \"bda \", \"bdca \"\\].\n\n**Example 2:**\n\n**Input:** words = \\[ \"xbc \", \"pcxbcf \", \"xb \", \"cxbc \", \"pcxbc \"\\]\n**Output:** 5\n**Explanation:** All the words can be put in a word chain \\[ \"xb \",  \"xbc \",  \"cxbc \",  \"pcxbc \",  \"pcxbcf \"\\].\n\n**Example 3:**\n\n**Input:** words = \\[ \"abcd \", \"dbqca \"\\]\n**Output:** 1\n**Explanation:** The trivial word chain \\[ \"abcd \"\\] is one of the longest word chains.\n\\[ \"abcd \", \"dbqca \"\\] is not a valid word chain because the ordering of the letters is changed.\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 16`\n*   `words[i]` only consists of lowercase English letters.Instead of adding a character, try deleting a character to form a chain in reverse. For each word in order of length, for each word2 which is word with one character removed, length[word2] = max(length[word2], length[word] + 1).",
          "output": "def clumsy(n: int) -> int:\n    if n <= 2:\n        return n\n    if n == 3:\n        return 6\n    result = n * (n - 1) // (n - 2) + (n - 3)\n    n -= 4\n    while n >= 4:\n        result = result - (n * (n - 1) // (n - 2)) + (n - 3)\n        n -= 4\n    return result - clumsy(n)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:\n\n*   If `x == y`, both stones are destroyed, and\n*   If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\nAt the end of the game, there is **at most one** stone left.\n\nReturn _the smallest possible weight of the left stone_. If there are no stones left, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[2,7,4,1,8,1\\]\n**Output:** 1\n**Explanation:**\nWe can combine 2 and 4 to get 2, so the array converts to \\[2,7,1,8,1\\] then,\nwe can combine 7 and 8 to get 1, so the array converts to \\[2,1,1,1\\] then,\nwe can combine 2 and 1 to get 1, so the array converts to \\[1,1,1\\] then,\nwe can combine 1 and 1 to get 0, so the array converts to \\[1\\], then that's the optimal value.\n\n**Example 2:**\n\n**Input:** stones = \\[31,26,33,21,40\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `1 <= stones.length <= 30`\n*   `1 <= stones[i] <= 100`Think of the final answer as a sum of weights with + or - sign symbols infront of each weight.  Actually, all sums with 1 of each sign symbol are possible. Use dynamic programming: for every possible sum with N stones, those sums +x or -x is possible with N+1 stones, where x is the value of the newest stone.  (This overcounts sums that are all positive or all negative, but those don't matter.)",
          "output": "def min_rotations(tops, bottoms):\n    res = float('inf')\n\n    for target in (tops[0], bottoms[0]):\n        top_rot, bot_rot = 0, 0\n        for ti, bi in zip(tops, bottoms):\n            if ti != target and bi != target:\n                top_rot = bot_rot = float('inf')\n                break\n            top_rot += ti != target\n            bot_rot += bi != target\n\n        res = min(res, top_rot, bot_rot)\n\n    return -1 if res == float('inf') else res\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the number of substrings that have only **one distinct** letter_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaaba \"\n**Output:** 8\n**Explanation:** The substrings with one distinct letter are  \"aaa \",  \"aa \",  \"a \",  \"b \".\n \"aaa \" occurs 1 time.\n \"aa \" occurs 2 times.\n \"a \" occurs 4 times.\n \"b \" occurs 1 time.\nSo the answer is 1 + 2 + 4 + 1 = 8.\n\n**Example 2:**\n\n**Input:** s =  \"aaaaaaaaaa \"\n**Output:** 55\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` consists of only lowercase English letters.What if we divide the string into substrings containing only one distinct character with maximal lengths? Now that you have sub-strings with only one distinct character, Try to come up with a formula that counts the number of its sub-strings. Alternatively, Observe that the constraints are small so you can use brute force.",
          "output": "def count_letters(s: str) -> int:\n    count = 0\n    current = 1\n\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            current += 1\n        else:\n            count += (current * (current + 1)) // 2\n            current = 1\n\n    count += (current * (current + 1)) // 2\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of `phrases`, generate a list of Before and After puzzles.\n\nA _phrase_ is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase.\n\n_Before and After puzzles_ are phrases that are formed by merging two phrases where the **last word of the first phrase** is the same as the **first word of the second phrase**.\n\nReturn the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders.\n\nYou should return a list of **distinct** strings **sorted lexicographically**.\n\n",
          "input": "**Example 1:**\n\n**Input:** phrases = \\[ \"writing code \", \"code rocks \"\\]\n**Output:** \\[ \"writing code rocks \"\\]\n\n**Example 2:**\n\n**Input:** phrases = \\[ \"mission statement \",\n                   \"a quick bite to eat \",\n                   \"a chip off the old block \",\n                   \"chocolate bar \",\n                   \"mission impossible \",\n                   \"a man on a mission \",\n                   \"block party \",\n                   \"eat my words \",\n                   \"bar of soap \"\\]\n**Output:** \\[ \"a chip off the old block party \",\n          \"a man on a mission impossible \",\n          \"a man on a mission statement \",\n          \"a quick bite to eat my words \",\n          \"chocolate bar of soap \"\\]\n\n**Example 3:**\n\n**Input:** phrases = \\[ \"a \", \"b \", \"a \"\\]\n**Output:** \\[ \"a \"\\]\n\n**Constraints:**\n\n*   `1 <= phrases.length <= 100`\n*   `1 <= phrases[i].length <= 100`What if you check every pair of strings (bruteforce)? For every two strings, check if they can form a puzzle by comparing their last and first words.",
          "output": "from collections import defaultdict\n\ndef beforeAndAfterPuzzles(phrases):\n    first_word_map = defaultdict(set)\n    result = set()\n\n    for phrase in phrases:\n        first_word = phrase.split(' ')[0]\n        first_word_map[first_word].add(phrase)\n\n    for phrase in phrases:\n        last_word = phrase.split(' ')[-1]\n        if last_word in first_word_map:\n            for cur_phrase in first_word_map[last_word]:\n                if phrase != cur_phrase:\n                    result.add(phrase + cur_phrase[cur_phrase.index(' '):])\n\n    return sorted(list(result))\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the last substring of_ `s` _in lexicographical order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abab \"\n**Output:**  \"bab \"\n**Explanation:** The substrings are \\[ \"a \",  \"ab \",  \"aba \",  \"abab \",  \"b \",  \"ba \",  \"bab \"\\]. The lexicographically maximum substring is  \"bab \".\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \"\n**Output:**  \"tcode \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 4 * 105`\n*   `s` contains only lowercase English letters.Assume that the answer is a sub-string from index i to j. If you add the character at index j+1 you get a better answer. The answer is always a suffix of the given string. Since the limits are high, we need an efficient data structure. Use suffix array.",
          "output": "def lastSubstring(s: str) -> str:\n    maxIndex = 0\n    curIndex = 1\n    while curIndex < len(s):\n        i = 0\n        while curIndex + i < len(s) and s[maxIndex + i] == s[curIndex + i]:\n            i += 1\n        if curIndex + i == len(s):\n            break\n        if s[maxIndex + i] < s[curIndex + i]:\n            maxIndex = curIndex\n        curIndex += 1\n    return s[maxIndex:]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `colors`, in which there are three colors: `1`, `2` and `3`.\n\nYou are also given some queries. Each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. If there is no solution return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** colors = \\[1,1,2,1,3,2,2,3,3\\], queries = \\[\\[1,3\\],\\[2,2\\],\\[6,1\\]\\]\n**Output:** \\[3,0,3\\]\n**Explanation:** \nThe nearest 3 from index 1 is at index 4 (3 steps away).\nThe nearest 2 from index 2 is at index 2 itself (0 steps away).\nThe nearest 1 from index 6 is at index 3 (3 steps away).\n\n**Example 2:**\n\n**Input:** colors = \\[1,2\\], queries = \\[\\[0,3\\]\\]\n**Output:** \\[-1\\]\n**Explanation:** There is no 3 in the array.\n\n**Constraints:**\n\n*   `1 <= colors.length <= 5*10^4`\n*   `1 <= colors[i] <= 3`\n*   `1 <= queries.length <= 5*10^4`\n*   `queries[i].length == 2`\n*   `0 <= queries[i][0] < colors.length`\n*   `1 <= queries[i][1] <= 3`Greedy solution is too slow because of the limits. Can you solve this problem offline by doing some pre-processing? Calculate the answers for all indexes moving to their left and to their right.",
          "output": "def shortestDistance(colors, queries):\n    result = []\n    positions = [[] for _ in range(3)]\n\n    for i, color in enumerate(colors):\n        positions[color - 1].append(i)\n\n    for query in queries:\n        index_positions = positions[query[1] - 1]\n\n        if not index_positions:\n            result.append(-1)\n        else:\n            dist = float('inf')\n\n            for pos in index_positions:\n                dist = min(dist, abs(pos - query[0]))\n\n            result.append(dist)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in **non-decreasing order** by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line.\n\nYou are given an integer array `heights` representing the **current order** that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (**0-indexed**).\n\nReturn _the **number of indices** where_ `heights[i] != expected[i]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[1,1,4,2,1,3\\]\n**Output:** 3\n**Explanation:** \nheights:  \\[1,1,4,2,1,3\\]\nexpected: \\[1,1,1,2,3,4\\]\nIndices 2, 4, and 5 do not match.\n\n**Example 2:**\n\n**Input:** heights = \\[5,1,2,3,4\\]\n**Output:** 5\n**Explanation:**\nheights:  \\[5,1,2,3,4\\]\nexpected: \\[1,2,3,4,5\\]\nAll indices do not match.\n\n**Example 3:**\n\n**Input:** heights = \\[1,2,3,4,5\\]\n**Output:** 0\n**Explanation:**\nheights:  \\[1,2,3,4,5\\]\nexpected: \\[1,2,3,4,5\\]\nAll indices match.\n\n**Constraints:**\n\n*   `1 <= heights.length <= 100`\n*   `1 <= heights[i] <= 100`Build the correct order of heights by sorting another array, then compare the two arrays.",
          "output": "def height_checker(heights):\n    expected = sorted(heights)\n    \n    count = 0\n    for i in range(len(heights)):\n        if heights[i] != expected[i]:\n            count += 1\n            \n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: There is a bookstore owner that has a store open for `n` minutes. Every minute, some number of customers enter the store. You are given an integer array `customers` of length `n` where `customers[i]` is the number of the customer that enters the store at the start of the `ith` minute and all those customers leave after the end of that minute.\n\nOn some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where `grumpy[i]` is `1` if the bookstore owner is grumpy during the `ith` minute, and is `0` otherwise.\n\nWhen the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.\n\nThe bookstore owner knows a secret technique to keep themselves not grumpy for `minutes` consecutive minutes, but can only use it once.\n\nReturn _the maximum number of customers that can be satisfied throughout the day_.\n\n",
          "input": "**Example 1:**\n\n**Input:** customers = \\[1,0,1,2,1,1,7,5\\], grumpy = \\[0,1,0,1,0,1,0,1\\], minutes = 3\n**Output:** 16\n**Explanation:** The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\n**Example 2:**\n\n**Input:** customers = \\[1\\], grumpy = \\[0\\], minutes = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `n == customers.length == grumpy.length`\n*   `1 <= minutes <= n <= 2 * 104`\n*   `0 <= customers[i] <= 1000`\n*   `grumpy[i]` is either `0` or `1`.Say the store owner uses their power in minute 1 to X and we have some answer A.  If they instead use their power from minute 2 to X+1, we only have to use data from minutes 1, 2, X and X+1 to update our answer A.",
          "output": "def maxSatisfied(customers, grumpy, minutes):\n    total_customers = 0\n    max_extra_customers = 0\n    extra_customers = 0\n    for i in range(len(customers)):\n        if grumpy[i] == 0:\n            total_customers += customers[i]\n        if i < minutes:\n            extra_customers += customers[i] * grumpy[i]\n        else:\n            extra_customers += (customers[i] * grumpy[i]) - (customers[i - minutes] * grumpy[i - minutes])\n        max_extra_customers = max(max_extra_customers, extra_customers)\n    return total_customers + max_extra_customers\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of positive integers `arr` (not necessarily distinct), return _the_ _lexicographically_ _largest permutation that is smaller than_ `arr`, that can be **made with exactly one swap**. If it cannot be done, then return the same array.\n\n**Note** that a _swap_ exchanges the positions of two numbers `arr[i]` and `arr[j]`\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,2,1\\]\n**Output:** \\[3,1,2\\]\n**Explanation:** Swapping 2 and 1.\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,5\\]\n**Output:** \\[1,1,5\\]\n**Explanation:** This is already the smallest permutation.\n\n**Example 3:**\n\n**Input:** arr = \\[1,9,4,6,7\\]\n**Output:** \\[1,7,4,6,9\\]\n**Explanation:** Swapping 9 and 7.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `1 <= arr[i] <= 104`You need to swap two values, one larger than the other.  Where is the larger one located?",
          "output": "def prevPermOpt1(arr):\n    n = len(arr)\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            j = i + 1\n            while j < n and arr[j] < arr[i]:\n                j += 1\n            arr[i], arr[j - 1] = arr[j - 1], arr[i]\n            break\n    return arr\n"
     },
     {
          "instruction": "Write python code for this problem: In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`.\n\nRearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** barcodes = \\[1,1,1,2,2,2\\]\n**Output:** \\[2,1,2,1,2,1\\]\n\n**Example 2:**\n\n**Input:** barcodes = \\[1,1,1,1,2,2,3,3\\]\n**Output:** \\[1,3,1,3,1,2,1,2\\]\n\n**Constraints:**\n\n*   `1 <= barcodes.length <= 10000`\n*   `1 <= barcodes[i] <= 10000`We want to always choose the most common or second most common element to write next.  What data structure allows us to query this effectively?",
          "output": "def bitwise_complement(n):\n    x = 1\n    while n > x:\n        x = x * 2 + 1\n    return x - n\n"
     },
     {
          "instruction": "Write python code for this problem: You have some apples and a basket that can carry up to `5000` units of weight.\n\nGiven an integer array `weight` where `weight[i]` is the weight of the `ith` apple, return _the maximum number of apples you can put in the basket_.\n\n",
          "input": "**Example 1:**\n\n**Input:** weight = \\[100,200,150,1000\\]\n**Output:** 4\n**Explanation:** All 4 apples can be carried by the basket since their sum of weights is 1450.\n\n**Example 2:**\n\n**Input:** weight = \\[900,950,800,1000,700,800\\]\n**Output:** 5\n**Explanation:** The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.\n\n**Constraints:**\n\n*   `1 <= weight.length <= 103`\n*   `1 <= weight[i] <= 103`What if you think in a greedy approach? The best apple to take in one step is the one with the smallest weight. Sort the array and take apples with smaller weight first.",
          "output": "def minHeightShelves(books, shelfWidth):\n    n = len(books)\n    dp = [1000000] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        width = 0\n        height = 0\n        j = i\n        while j >= 1:\n            width += books[j - 1][0]\n            height = max(height, books[j - 1][1])\n            \n            if width <= shelfWidth:\n                dp[i] = min(dp[i], dp[j - 1] + height)\n            j -= 1\n    \n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: In an **infinite** chess board with coordinates from `-infinity` to `+infinity`, you have a **knight** at square `[0, 0]`.\n\nA knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.\n\nReturn _the minimum number of steps needed to move the knight to the square_ `[x, y]`. It is guaranteed the answer exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 2, y = 1\n**Output:** 1\n**Explanation:** \\[0, 0\\] -> \\[2, 1\\]\n\n**Example 2:**\n\n**Input:** x = 5, y = 5\n**Output:** 4\n**Explanation:** \\[0, 0\\] -> \\[2, 1\\] -> \\[4, 2\\] -> \\[3, 4\\] -> \\[5, 5\\]\n\n**Constraints:**\n\n*   `-300 <= x, y <= 300`\n*   `0 <= |x| + |y| <= 300`\n\n\"t\", evaluating to True; \"f\", evaluating to False; \"!(expression)\", evaluating to the logical NOT of the expression inside the parentheses; \"&(expression1,expression2,...)\", evaluating to the logical AND of 2 or more expressions; \"|(expression1,expression2,...)\", evaluating to the logical OR of 2 or more expressions.You can simulate the movements since the limits are low. Is there a search algorithm applicable to this problem? Since we want the minimum number of moves, we can use Breadth First Search.",
          "output": "def parse_bool_expr(expression, pos=None):\n    if pos is None:\n        pos = [0]\n    current = expression[pos[0]]\n    pos[0] += 1\n    if current == 't': return True\n    if current == 'f': return False\n    if current == '!':\n        pos[0] += 1\n        return not parse_bool_expr(expression, pos)\n    if current == '&':\n        pos[0] += 1\n        result = True\n        while expression[pos[0]] != ')':\n            result &= parse_bool_expr(expression, pos)\n            if expression[pos[0]] == ',': pos[0] += 1\n    elif current == '|':\n        pos[0] += 1\n        result = False\n        while expression[pos[0]] != ')':\n            result |= parse_bool_expr(expression, pos)\n            if expression[pos[0]] == ',': pos[0] += 1\n    pos[0] += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` matrix `mat` where every row is sorted in **strictly** **increasing** order, return _the **smallest common element** in all rows_.\n\nIf there is no common element, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,2,3,4,5\\],\\[2,4,5,8,10\\],\\[3,5,7,9,11\\],\\[1,3,5,7,9\\]\\]\n**Output:** 5\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,2,3\\],\\[2,3,4\\],\\[2,3,5\\]\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 500`\n*   `1 <= mat[i][j] <= 104`\n*   `mat[i]` is sorted in strictly increasing order.Notice that each row has no duplicates. Is counting the frequency of elements enough to find the answer? Use a data structure to count the frequency of elements. Find an element whose frequency equals the number of rows.",
          "output": "def smallest_common_element(mat):\n    counts = {}\n    for row in mat:\n        for num in row:\n            counts[num] = counts.get(num, 0) + 1\n            if counts[num] == len(mat):\n                return num\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` houses in a village. We want to supply water for all the houses by building wells and laying pipes.\n\nFor each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to **0-indexing**), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array `pipes` where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. Connections are bidirectional, and there could be multiple valid connections between the same two houses with different costs.\n\nReturn _the minimum total cost to supply water to all houses_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, wells = \\[1,2,2\\], pipes = \\[\\[1,2,1\\],\\[2,3,1\\]\\]\n**Output:** 3\n**Explanation:** The image shows the costs of connecting houses using pipes.\nThe best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.\n\n**Example 2:**\n\n**Input:** n = 2, wells = \\[1,1\\], pipes = \\[\\[1,2,1\\],\\[1,2,2\\]\\]\n**Output:** 2\n**Explanation:** We can supply water with cost two using one of the three options:\nOption 1:\n  - Build a well inside house 1 with cost 1.\n  - Build a well inside house 2 with cost 1.\nThe total cost will be 2.\nOption 2:\n  - Build a well inside house 1 with cost 1.\n  - Connect house 2 with house 1 with cost 1.\nThe total cost will be 2.\nOption 3:\n  - Build a well inside house 2 with cost 1.\n  - Connect house 1 with house 2 with cost 1.\nThe total cost will be 2.\nNote that we can connect houses 1 and 2 with cost 1 or with cost 2 but we will always choose **the cheapest option**. \n\n**Constraints:**\n\n*   `2 <= n <= 104`\n*   `wells.length == n`\n*   `0 <= wells[i] <= 105`\n*   `1 <= pipes.length <= 104`\n*   `pipes[j].length == 3`\n*   `1 <= house1j, house2j <= n`\n*   `0 <= costj <= 105`\n*   `house1j != house2j`What if we model this problem as a graph problem? A house is a node and a pipe is a weighted edge. How to represent building wells in the graph model? Add a virtual node, connect it to houses with edges weighted by the costs to build wells in these houses. The problem is now reduced to a Minimum Spanning Tree problem.",
          "output": "def duplicateZeros(arr):\n    n = len(arr)\n    i = 0\n    while i < n - 1:\n        if arr[i] == 0:\n            for j in range(n - 2, i, -1):\n                arr[j + 1] = arr[j]\n            arr[i + 1] = 0\n            i += 2\n        else:\n            i += 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target.\n\nA submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`.\n\nTwo submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[0,1,0\\],\\[1,1,1\\],\\[0,1,0\\]\\], target = 0\n**Output:** 4\n**Explanation:** The four 1x1 submatrices that only contain 0.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,-1\\],\\[-1,1\\]\\], target = 0\n**Output:** 5\n**Explanation:** The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[904\\]\\], target = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= matrix.length <= 100`\n*   `1 <= matrix[0].length <= 100`\n*   `-1000 <= matrix[i] <= 1000`\n*   `-10^8 <= target <= 10^8`Using a 2D prefix sum, we can query the sum of any submatrix in O(1) time.\r\nNow for each (r1, r2), we can find the largest sum of a submatrix that uses every row in [r1, r2] in linear time using a sliding window.",
          "output": "def numSubmatrixSumTarget(matrix: List[List[int]], target: int) -> int:\n    rows, cols = len(matrix), len(matrix[0])\n    for row in range(rows):\n        for col in range(1, cols):\n            matrix[row][col] += matrix[row][col-1]\n    \n    count = 0\n    for col1 in range(cols):\n        for col2 in range(col1, cols):\n            counter = collections.defaultdict(int)\n            counter[0] = 1\n            cur_sum = 0\n            for row in range(rows):\n                cur_sum += matrix[row][col2] - (matrix[row][col1-1] if col1 > 0 else 0)\n                count += counter[cur_sum - target]\n                counter[cur_sum] += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: For two strings `s` and `t`, we say \"`t` divides `s` \" if and only if `s = t + ... + t` (i.e., `t` is concatenated with itself one or more times).\n\nGiven two strings `str1` and `str2`, return _the largest string_ `x` _such that_ `x` _divides both_ `str1` _and_ `str2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** str1 =  \"ABCABC \", str2 =  \"ABC \"\n**Output:**  \"ABC \"\n\n**Example 2:**\n\n**Input:** str1 =  \"ABABAB \", str2 =  \"ABAB \"\n**Output:**  \"AB \"\n\n**Example 3:**\n\n**Input:** str1 =  \"LEET \", str2 =  \"CODE \"\n**Output:**  \" \"\n\n**Constraints:**\n\n*   `1 <= str1.length, str2.length <= 1000`\n*   `str1` and `str2` consist of English uppercase letters.The greatest common divisor must be a prefix of each string, so we can try all prefixes.",
          "output": "def prefixesDivBy5(nums):\n    result = []\n    current = 0\n    for num in nums:\n        current = ((current << 1) | num) % 5\n        result.append(current == 0)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `matrix`.\n\nYou can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa).\n\nReturn _the maximum number of rows that have all values equal after some number of flips_.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[0,1\\],\\[1,1\\]\\]\n**Output:** 1\n**Explanation:** After flipping no values, 1 row has all values equal.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[0,1\\],\\[1,0\\]\\]\n**Output:** 2\n**Explanation:** After flipping values in the first column, both rows have equal values.\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[0,0,0\\],\\[0,0,1\\],\\[1,1,0\\]\\]\n**Output:** 2\n**Explanation:** After flipping values in the first two columns, the last two rows have equal values.\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 300`\n*   `matrix[i][j]` is either `0` or `1`.Flipping a subset of columns is like doing a bitwise XOR of some number K onto each row.  We want rows X with X ^ K = all 0s or all 1s.  This is the same as X = X^K ^K = (all 0s or all 1s) ^ K, so we want to count rows that have opposite bits set.  For example, if K = 1, then we count rows X = (00000...001, or 1111....110).",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef nextGreaterNodes(head):\n    result = []\n    stack = []\n    while head:\n        while stack and stack[-1] < head.val:\n            stack[-1] = head.val\n            stack.pop()\n        result.append(head.val)\n        stack.append(len(result) - 1)\n        head = head.next\n\n    while stack:\n        result[stack.pop()] = 0\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given two numbers `arr1` and `arr2` in base **\\-2**, return the result of adding them together.\n\nEach number is given in _array format_: as an array of 0s and 1s, from most significant bit to least significant bit. For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`. A number `arr` in _array, format_ is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`.\n\nReturn the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr1 = \\[1,1,1,1,1\\], arr2 = \\[1,0,1\\]\n**Output:** \\[1,0,0,0,0\\]\n**Explanation:** arr1 represents 11, arr2 represents 5, the output represents 16.\n\n**Example 2:**\n\n**Input:** arr1 = \\[0\\], arr2 = \\[0\\]\n**Output:** \\[0\\]\n\n**Example 3:**\n\n**Input:** arr1 = \\[0\\], arr2 = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length <= 1000`\n*   `arr1[i]` and `arr2[i]` are `0` or `1`\n*   `arr1` and `arr2` have no leading zerosWe can try to determine the last digit of the answer, then divide everything by 2 and repeat.",
          "output": "from collections import deque\n\ndef addNegabinary(arr1, arr2):\n    res = deque()\n    carry, i, j = 0, len(arr1) - 1, len(arr2) - 1\n    while i >= 0 or j >= 0 or carry:\n        if i >= 0: carry += arr1[i]; i -= 1\n        if j >= 0: carry += arr2[j]; j -= 1\n        res.appendleft(carry & 1)\n        carry = -(carry >> 1)\n    while len(res) > 1 and res[0] == 0: res.popleft()\n    return list(res)\n"
     },
     {
          "instruction": "Write python code for this problem: Given three integer arrays `arr1`, `arr2` and `arr3` **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr1 = \\[1,2,3,4,5\\], arr2 = \\[1,2,5,7,9\\], arr3 = \\[1,3,4,5,8\\]\n**Output:** \\[1,5\\]\n**Explanation:** Only 1 and 5 appeared in the three arrays.\n\n**Example 2:**\n\n**Input:** arr1 = \\[197,418,523,876,1356\\], arr2 = \\[501,880,1593,1710,1870\\], arr3 = \\[521,682,1337,1395,1764\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length, arr3.length <= 1000`\n*   `1 <= arr1[i], arr2[i], arr3[i] <= 2000`Count the frequency of all elements in the three arrays. The elements that appeared in all the arrays would have a frequency of 3.",
          "output": "def arraysIntersection(arr1, arr2, arr3):\n    i, j, k = 0, 0, 0\n    result = []\n    while i < len(arr1) and j < len(arr2) and k < len(arr3):\n        if arr1[i] == arr2[j] and arr2[j] == arr3[k]:\n            result.append(arr1[i])\n            i, j, k = i + 1, j + 1, k + 1\n        else:\n            if arr1[i] <= arr2[j] and arr1[i] <= arr3[k]:\n                i += 1\n            elif arr2[j] <= arr3[k]:\n                j += 1\n            else:\n                k += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root1 = \\[2,1,4\\], root2 = \\[1,0,3\\], target = 5\n**Output:** true\n**Explanation:** 2 and 3 sum up to 5.\n\n**Example 2:**\n\n**Input:** root1 = \\[0,-10,10\\], root2 = \\[5,1,7,0,2\\], target = 18\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in each tree is in the range `[1, 5000]`.\n*   `-109 <= Node.val, target <= 109`How can you reduce this problem to the classical Two Sum problem? Do an in-order traversal of each tree to convert them to sorted arrays. Solve the classical Two Sum problem.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef twoSumBSTs(root1, root2, target):\n    def build_set(node, s):\n        if node:\n            s.add(node.val)\n            build_set(node.left, s)\n            build_set(node.right, s)\n\n    def find_pair(node, target, s):\n        if node:\n            if target - node.val in s:\n                return True\n            return find_pair(node.left, target, s) or find_pair(node.right, target, s)\n        return False\n\n    s = set()\n    build_set(root1, s)\n    return find_pair(root2, target, s)\n"
     },
     {
          "instruction": "Write python code for this problem: A **stepping number** is an integer such that all of its adjacent digits have an absolute difference of exactly `1`.\n\n*   For example, `321` is a **stepping number** while `421` is not.\n\nGiven two integers `low` and `high`, return _a sorted list of all the **stepping numbers** in the inclusive range_ `[low, high]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** low = 0, high = 21\n**Output:** \\[0,1,2,3,4,5,6,7,8,9,10,12,21\\]\n\n**Example 2:**\n\n**Input:** low = 10, high = 15\n**Output:** \\[10,12\\]\n\n**Constraints:**\n\n*   `0 <= low <= high <= 2 * 109`Try to generate the numbers using recursion. In one step in the recursion, add a valid digit to the right of the current number. Save the number if it's in the range between low and high.",
          "output": "def countSteppingNumbers(low, high):\n    results = []\n    for i in range(low, high+1):\n        prev = -1\n        j = i\n        is_stepping = True\n        while j > 0:\n            digit = j % 10\n            if prev != -1 and abs(prev - digit) != 1:\n                is_stepping = False\n                break\n            prev = digit\n            j //= 10\n        if is_stepping:\n            results.append(i)\n    return results\n"
     },
     {
          "instruction": "Write python code for this problem: Consider a matrix `M` with dimensions `width * height`, such that every cell has value `0` or `1`, and any **square** sub-matrix of `M` of size `sideLength * sideLength` has at most `maxOnes` ones.\n\nReturn the maximum possible number of ones that the matrix `M` can have.\n\n",
          "input": "**Example 1:**\n\n**Input:** width = 3, height = 3, sideLength = 2, maxOnes = 1\n**Output:** 4\n**Explanation:**\nIn a 3\\*3 matrix, no 2\\*2 sub-matrix can have more than 1 one.\nThe best solution that has 4 ones is:\n\\[1,0,1\\]\n\\[0,0,0\\]\n\\[1,0,1\\]\n\n**Example 2:**\n\n**Input:** width = 3, height = 3, sideLength = 2, maxOnes = 2\n**Output:** 6\n**Explanation:**\n\\[1,0,1\\]\n\\[1,0,1\\]\n\\[1,0,1\\]\n\n**Constraints:**\n\n*   `1 <= width, height <= 100`\n*   `1 <= sideLength <= width, height`\n*   `0 <= maxOnes <= sideLength * sideLength`Think of a greedy mathematical solution. Say you choose to set some cell (i, j) to 1, all cells (x, y) such that i % sideLength == x % sideLength and j % sideLength == y % sideLength can also be set to 1 without increasing the max number of ones in a sub-matrix. In one move, choose to set all the cells with some modulus (i % sideLength, j % sideLength) to 1. Choose the cells with max frequency.",
          "output": "def sampleStats(count):\n    minVal, maxVal, mode, median, mean = -1, -1, 0, 0, 0\n    totalCount, modeCount, curCount = 0, 0, 0\n    sum = 0\n\n    for i in range(256):\n        if count[i] > 0:\n            if minVal == -1:\n                minVal = i\n            maxVal = i\n            sum += i * count[i]\n            totalCount += count[i]\n            if count[i] > modeCount:\n                modeCount = count[i]\n                mode = i\n\n    mean = sum / totalCount\n    isEven = (totalCount % 2 == 0)\n    mid1 = totalCount // 2\n    mid2 = mid1 - 1\n    if isEven:\n        mid2 += 1\n\n    for i in range(256):\n        curCount += count[i]\n        if isEven and curCount >= mid2:\n            median += i\n            mid2 = totalCount\n            isEven = False\n\n        if curCount >= mid1:\n            median += i\n            break\n\n    if not isEven:\n        median /= 2\n    return [minVal, maxVal, mean, median, mode]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `first` and `second`, consider occurrences in some text of the form `\"first second third \"`, where `second` comes immediately after `first`, and `third` comes immediately after `second`.\n\nReturn _an array of all the words_ `third` _for each occurrence of_ `\"first second third \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\n**Output:** \\[\"girl\",\"student\"\\]\n\n**Example 2:**\n\n**Input:** text = \"we will we will rock you\", first = \"we\", second = \"will\"\n**Output:** \\[\"we\",\"rock\"\\]\n\n**Constraints:**\n\n*   `1 <= text.length <= 1000`\n*   `text` consists of lowercase English letters and spaces.\n*   All the words in `text` a separated by **a single space**.\n*   `1 <= first.length, second.length <= 10`\n*   `first` and `second` consist of lowercase English letters.Split the string into words, then look at adjacent triples of words.",
          "output": "def remove_outer_parentheses(s: str) -> str:\n    result = []\n    opened = 0\n\n    for c in s:\n        if c == '(':\n            if opened > 0:\n                result.append(c)\n            opened += 1\n        elif c == ')':\n            if opened > 1:\n                result.append(c)\n            opened -= 1\n\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and an integer `limit`, delete all **insufficient nodes** in the tree simultaneously, and return _the root of the resulting binary tree_.\n\nA node is **insufficient** if every root to **leaf** path intersecting this node has a sum strictly less than `limit`.\n\nA **leaf** is a node with no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14\\], limit = 1\n**Output:** \\[1,2,3,4,null,null,7,8,9,null,14\\]\n\n**Example 2:**\n\n**Input:** root = \\[5,4,8,11,null,17,4,7,1,null,null,5,3\\], limit = 22\n**Output:** \\[5,4,8,11,null,17,4,7,null,null,null,5\\]\n\n**Example 3:**\n\n**Input:** root = \\[1,2,-3,-5,null,4,null\\], limit = -1\n**Output:** \\[1,null,-3,4\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 5000]`.\n*   `-105 <= Node.val <= 105`\n*   `-109 <= limit <= 109`Consider a DFS traversal of the tree.  You can keep track of the current path sum from root to this node, and you can also use DFS to return the minimum value of any path from this node to the leaf.  This will tell you if this node is insufficient.",
          "output": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sufficientSubset(self, root: TreeNode, limit: int) -> TreeNode:\n        if not root:\n            return None\n        if not root.left and not root.right:\n            if root.val < limit:\n                return None\n            return root\n        root.left = self.sufficientSubset(root.left, limit - root.val)\n        root.right = self.sufficientSubset(root.right, limit - root.val)\n        if not root.left and not root.right:\n            return None\n\n        return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the_ _lexicographically smallest_ _subsequence_ _of_ `s` _that contains all the distinct characters of_ `s` _exactly once_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"bcabc \"\n**Output:**  \"abc \"\n\n**Example 2:**\n\n**Input:** s =  \"cbacdcbc \"\n**Output:**  \"acdb \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of lowercase English letters.\n\n**Note:** This question is the same as 316: [https://leetcode.com/problems/remove-duplicate-letters/](https://leetcode.com/problems/remove-duplicate-letters/)Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i.",
          "output": "def videoStitching(clips, time):\n    dp = [float('inf')] * (time + 1)\n    dp[0] = 0\n    for i in range(1, time + 1):\n        for clip in clips:\n            if clip[0] < i and i <= clip[1]:\n                dp[i] = min(dp[i], dp[clip[0]] + 1)\n    return -1 if dp[time] == float('inf') else dp[time]\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` `tiles`, where each tile has one letter `tiles[i]` printed on it.\n\nReturn _the number of possible non-empty sequences of letters_ you can make using the letters printed on those `tiles`.\n\n",
          "input": "**Example 1:**\n\n**Input:** tiles =  \"AAB \"\n**Output:** 8\n**Explanation:** The possible sequences are  \"A \",  \"B \",  \"AA \",  \"AB \",  \"BA \",  \"AAB \",  \"ABA \",  \"BAA \".\n\n**Example 2:**\n\n**Input:** tiles =  \"AAABBC \"\n**Output:** 188\n\n**Example 3:**\n\n**Input:** tiles =  \"V \"\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= tiles.length <= 7`\n*   `tiles` consists of uppercase English letters.Try to build the string with a backtracking DFS by considering what you can put in every position.",
          "output": "def sumRootToLeaf(root, path_value=0):\n    if not root:\n        return 0\n    path_value = path_value * 2 + root.val\n    if not root.left and not root.right:\n        return path_value\n    return sumRootToLeaf(root.left, path_value) + sumRootToLeaf(root.right, path_value)\n"
     },
     {
          "instruction": "Write python code for this problem: In some array `arr`, the values were in arithmetic progression: the values `arr[i + 1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`.\n\nA value from `arr` was removed that **was not the first or last value in the array**.\n\nGiven `arr`, return _the removed value_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[5,7,11,13\\]\n**Output:** 9\n**Explanation:** The previous array was \\[5,7,**9**,11,13\\].\n\n**Example 2:**\n\n**Input:** arr = \\[15,13,12\\]\n**Output:** 14\n**Explanation:** The previous array was \\[15,**14**,13,12\\].\n\n**Constraints:**\n\n*   `3 <= arr.length <= 1000`\n*   `0 <= arr[i] <= 105`\n*   The given array is **guaranteed** to be a valid array.Assume the sequence is increasing, what if we find the largest consecutive difference? Is the missing element in the middle of the segment with the largest consecutive difference? For decreasing sequences, just reverse the array and do a similar process.",
          "output": "def mctFromLeafValues(arr: List[int]) -> int:\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    maxs = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            maxs[i][j] = max(arr[i:j+1])\n\n    for len_ in range(1, n):\n        for i in range(n - len_):\n            j = i + len_\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j])\n\n    return dp[0][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the **earliest time slot** that works for both of them and is of duration `duration`.\n\nIf there is no common time slot that satisfies the requirements, return an **empty array**.\n\nThe format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`.\n\nIt is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** slots1 = \\[\\[10,50\\],\\[60,120\\],\\[140,210\\]\\], slots2 = \\[\\[0,15\\],\\[60,70\\]\\], duration = 8\n**Output:** \\[60,68\\]\n\n**Example 2:**\n\n**Input:** slots1 = \\[\\[10,50\\],\\[60,120\\],\\[140,210\\]\\], slots2 = \\[\\[0,15\\],\\[60,70\\]\\], duration = 12\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= slots1.length, slots2.length <= 104`\n*   `slots1[i].length, slots2[i].length == 2`\n*   `slots1[i][0] < slots1[i][1]`\n*   `slots2[i][0] < slots2[i][1]`\n*   `0 <= slots1[i][j], slots2[i][j] <= 109`\n*   `1 <= duration <= 106`Assume that in the solution, the selected slot from slotsA is bigger than the respectively selected slot from slotsB. Use two pointers in order to try all the possible intersections, and check the length. Do the same in step N\u00b0 1 but now assume that the selected slot from slotsB is bigger, return the minimum of the two options.",
          "output": "from collections import defaultdict, deque\n\ndef shortestAlternatingPaths(n, redEdges, blueEdges):\n    adj_list = defaultdict(lambda: defaultdict(set))\n    \n    for u, v in redEdges:\n        adj_list[u][0].add(v)\n        \n    for u, v in blueEdges:\n        adj_list[u][1].add(v)\n        \n    dist = [[-1] * 2 for _ in range(n)]\n    dist[0] = [0, 0]\n    \n    q = deque([(0,0), (0,1)])\n\n    while q:\n        node, color = q.popleft()\n        next_color = color ^ 1\n        \n        for neighbor in adj_list[node][next_color]:\n            if dist[neighbor][next_color] == -1:\n                dist[neighbor][next_color] = dist[node][color] + 1\n                q.append((neighbor, next_color))\n                \n    result = []\n    for a, b in dist:\n        result.append(min(a, b) if a != -1 and b != -1 else max(a, b))\n        \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You have some coins. The `i`\\-th coin has a probability `prob[i]` of facing heads when tossed.\n\nReturn the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.\n\n",
          "input": "**Example 1:**\n\n**Input:** prob = \\[0.4\\], target = 1\n**Output:** 0.40000\n\n**Example 2:**\n\n**Input:** prob = \\[0.5,0.5,0.5,0.5,0.5\\], target = 0\n**Output:** 0.03125\n\n**Constraints:**\n\n*   `1 <= prob.length <= 1000`\n*   `0 <= prob[i] <= 1`\n*   `0 <= target` `<= prob.length`\n*   Answers will be accepted as correct if they are within `10^-5` of the correct answer.What about solving the problem with DP? Use DP with two states dp[pos][cnt], where pos represents the pos-th coin and cnt is the number of heads seen so far. You can do the transitions with a little bit math. For the base case, when pos == n return (cnt == target) to filter out the invalid scenarios.",
          "output": "def max_value(arr1, arr2):\n    n = len(arr1)\n    max1 = max2 = max3 = max4 = float('-inf')\n    min1 = min2 = min3 = min4 = float('inf')\n\n    for i in range(n):\n        max1 = max(max1, arr1[i] - arr2[i] + i)\n        max2 = max(max2, arr1[i] + arr2[i] + i)\n        max3 = max(max3, -arr1[i] + arr2[i] + i)\n        max4 = max(max4, -arr1[i] - arr2[i] + i)\n\n        min1 = min(min1, arr1[i] - arr2[i] + i)\n        min2 = min(min2, arr1[i] + arr2[i] + i)\n        min3 = min(min3, -arr1[i] + arr2[i] + i)\n        min4 = min(min4, -arr1[i] - arr2[i] + i)\n\n    return max(max1 - min1, max2 - min2, max3 - min3, max4 - min4)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a list of blocks, where `blocks[i] = t` means that the `i`\\-th block needs `t` units of time to be built. A block can only be built by exactly one worker.\n\nA worker can either split into two workers (number of workers increases by one) or build a block then go home. Both decisions cost some time.\n\nThe time cost of spliting one worker into two workers is given as an integer `split`. Note that if two workers split at the same time, they split in parallel so the cost would be `split`.\n\nOutput the minimum time needed to build all blocks.\n\nInitially, there is only **one** worker.\n\n",
          "input": "**Example 1:**\n\n**Input:** blocks = \\[1\\], split = 1\n**Output:** 1\n**Explanation:** We use 1 worker to build 1 block in 1 time unit.\n\n**Example 2:**\n\n**Input:** blocks = \\[1,2\\], split = 5\n**Output:** 7\n**Explanation:** We split the worker into 2 workers in 5 time units then assign each of them to a block so the cost is 5 + max(1, 2) = 7.\n\n**Example 3:**\n\n**Input:** blocks = \\[1,2,3\\], split = 1\n**Output:** 4\n**Explanation:** Split 1 worker into 2, then assign the first worker to the last block and split the second worker into 2.\nThen, use the two unassigned workers to build the first two blocks.\nThe cost is 1 + max(3, 1 + max(1, 2)) = 4.\n\n**Constraints:**\n\n*   `1 <= blocks.length <= 1000`\n*   `1 <= blocks[i] <= 10^5`\n*   `1 <= split <= 100`A greedy approach will not work as the examples show. Try all possible moves using DP. For the DP state, dp[i][j] is the minimum time cost to build the first i blocks using j workers. In one step you can either assign a worker to a block or choose a number of workers to split. If you choose to assign a worker to a block it is always better to assign him to the block with the maximum time so we sort the array before using DP. To optimize the solution from O(n^3) to O(n^2) notice that if you choose to split, it is always better to split all the workers you have.",
          "output": "import heapq\n\ndef min_build_time(blocks, split):\n    heapq.heapify(blocks)\n    \n    while len(blocks) > 1:\n        a = heapq.heappop(blocks)\n        b = heapq.heappop(blocks)\n        heapq.heappush(blocks, b + split)\n    \n    return blocks[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a fixed-length integer array `arr`, duplicate each occurrence of zero, shifting the remaining elements to the right.\n\n**Note** that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,0,2,3,0,4,5,0\\]\n**Output:** \\[1,0,0,2,3,0,0,4\\]\n**Explanation:** After calling your function, the input array is modified to: \\[1,0,0,2,3,0,0,4\\]\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,3\\]\n**Output:** \\[1,2,3\\]\n**Explanation:** After calling your function, the input array is modified to: \\[1,2,3\\]\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `0 <= arr[i] <= 9`This is a great introductory problem for understanding and working with the concept of in-place operations. The problem statement clearly states that we are to modify the array in-place. That does not mean we cannot use another array. We just don't have to return anything. A better way to solve this would be without using additional space. The only reason the problem statement allows you to make modifications in place is that it hints at avoiding any additional memory. The main problem with not using additional memory is that we might override elements due to the zero duplication requirement of the problem statement. How do we get around that? If we had enough space available, we would be able to accommodate all the elements properly. The new length would be the original length of the array plus the number of zeros. Can we use this information somehow to solve the problem?",
          "output": "def duplicateZeros(arr):\n    n = len(arr)\n    i = 0\n    while i < n - 1:\n        if arr[i] == 0:\n            for j in range(n - 1, i + 1, -1):\n                arr[j] = arr[j - 1]\n            arr[i + 1] = 0\n            i += 1\n        i += 1\n"
     },
     {
          "instruction": "Write python code for this problem: There is a set of `n` items. You are given two integer arrays `values` and `labels` where the value and the label of the `ith` element are `values[i]` and `labels[i]` respectively. You are also given two integers `numWanted` and `useLimit`.\n\nChoose a subset `s` of the `n` elements such that:\n\n*   The size of the subset `s` is **less than or equal to** `numWanted`.\n*   There are **at most** `useLimit` items with the same label in `s`.\n\nThe **score** of a subset is the sum of the values in the subset.\n\nReturn _the maximum **score** of a subset_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** values = \\[5,4,3,2,1\\], labels = \\[1,1,2,2,3\\], numWanted = 3, useLimit = 1\n**Output:** 9\n**Explanation:** The subset chosen is the first, third, and fifth items.\n\n**Example 2:**\n\n**Input:** values = \\[5,4,3,2,1\\], labels = \\[1,3,3,3,2\\], numWanted = 3, useLimit = 2\n**Output:** 12\n**Explanation:** The subset chosen is the first, second, and third items.\n\n**Example 3:**\n\n**Input:** values = \\[9,8,8,7,6\\], labels = \\[0,0,0,1,1\\], numWanted = 3, useLimit = 1\n**Output:** 16\n**Explanation:** The subset chosen is the first and fourth items.\n\n**Constraints:**\n\n*   `n == values.length == labels.length`\n*   `1 <= n <= 2 * 104`\n*   `0 <= values[i], labels[i] <= 2 * 104`\n*   `1 <= numWanted, useLimit <= n`Consider the items in order from largest to smallest value, and greedily take the items if they fall under the use_limit.  We can keep track of how many items of each label are used by using a hash table.",
          "output": "from typing import List\n\ndef largestValsFromLabels(values: List[int], labels: List[int], numWanted: int, useLimit: int) -> int:\n    items = list(zip(values, labels))\n    items.sort(key=lambda x: x[0], reverse=True)\n\n    label_count = {}\n    ans = 0\n\n    for value, label in items:\n        if label not in label_count:\n            label_count[label] = 0\n        if label_count[label] < useLimit:\n            ans += value\n            label_count[label] += 1\n            numWanted -= 1\n            if numWanted == 0:\n                break\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `str1` and `str2`, return _the shortest string that has both_ `str1` _and_ `str2` _as **subsequences**_. If there are multiple valid strings, return **any** of them.\n\nA string `s` is a **subsequence** of string `t` if deleting some number of characters from `t` (possibly `0`) results in the string `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** str1 =  \"abac \", str2 =  \"cab \"\n**Output:**  \"cabac \"\n**Explanation:** \nstr1 =  \"abac \" is a subsequence of  \"cabac \" because we can delete the first  \"c \".\nstr2 =  \"cab \" is a subsequence of  \"cabac \" because we can delete the last  \"ac \".\nThe answer provided is the shortest such string that satisfies these properties.\n\n**Example 2:**\n\n**Input:** str1 =  \"aaaaaaaa \", str2 =  \"aaaaaaaa \"\n**Output:**  \"aaaaaaaa \"\n\n**Constraints:**\n\n*   `1 <= str1.length, str2.length <= 1000`\n*   `str1` and `str2` consist of lowercase English letters.We can find the length of the longest common subsequence between str1[i:] and str2[j:] (for all (i, j)) by using dynamic programming.  We can use this information to recover the longest common supersequence.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef dfs(node):\n    if not node:\n        return 0, float('inf'), float('-inf')\n    left_diff, left_min, left_max = dfs(node.left)\n    right_diff, right_min, right_max = dfs(node.right)\n    mn = min(node.val, left_min, right_min)\n    mx = max(node.val, left_max, right_max)\n    return max(max(left_diff, right_diff), max(abs(node.val - left_min), abs(node.val - right_max))), mn, mx\n\ndef maxAncestorDiff(root):\n    diff, _, _ = dfs(root)\n    return diff\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `n x n` binary matrix `grid`, return _the length of the shortest **clear path** in the matrix_. If there is no clear path, return `-1`.\n\nA **clear path** in a binary matrix is a path from the **top-left** cell (i.e., `(0, 0)`) to the **bottom-right** cell (i.e., `(n - 1, n - 1)`) such that:\n\n*   All the visited cells of the path are `0`.\n*   All the adjacent cells of the path are **8-directionally** connected (i.e., they are different and they share an edge or a corner).\n\nThe **length of a clear path** is the number of visited cells of this path.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1\\],\\[1,0\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,0,0\\],\\[1,1,0\\],\\[1,1,0\\]\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,0,0\\],\\[1,1,0\\],\\[1,1,0\\]\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `n == grid.length`\n*   `n == grid[i].length`\n*   `1 <= n <= 100`\n*   `grid[i][j] is 0 or 1`Do a breadth first search to find the shortest path.",
          "output": "from collections import deque\n\ndef shortestPathBinaryMatrix(grid):\n    n = len(grid)\n    if grid[0][0] or grid[n - 1][n - 1]: return -1\n\n    dir = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\n    q = deque([(0, 0)])\n    grid[0][0] = 1\n\n    pathLength = 1\n\n    while q:\n        qlen = len(q)\n        for _ in range(qlen):\n            x, y = q.popleft()\n\n            if x == n - 1 and y == n - 1: return pathLength\n\n            for d in dir:\n                newX, newY = x + d[0], y + d[1]\n\n                if 0 <= newX < n and 0 <= newY < n and grid[newX][newY] == 0:\n                    q.append((newX, newY))\n                    grid[newX][newY] = 1\n        pathLength += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an initial array `arr`, every day you produce a new array using the array of the previous day.\n\nOn the `i`\\-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`:\n\n1.  If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.\n2.  If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.\n3.  The first and last elements never change.\n\nAfter some days, the array does not change. Return that final array.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[6,2,3,4\\]\n**Output:** \\[6,3,3,4\\]\n**Explanation:** \nOn the first day, the array is changed from \\[6,2,3,4\\] to \\[6,3,3,4\\].\nNo more operations can be done to this array.\n\n**Example 2:**\n\n**Input:** arr = \\[1,6,3,4,3,5\\]\n**Output:** \\[1,4,4,4,4,5\\]\n**Explanation:** \nOn the first day, the array is changed from \\[1,6,3,4,3,5\\] to \\[1,5,4,3,4,5\\].\nOn the second day, the array is changed from \\[1,5,4,3,4,5\\] to \\[1,4,4,4,4,5\\].\nNo more operations can be done to this array.\n\n**Constraints:**\n\n*   `3 <= arr.length <= 100`\n*   `1 <= arr[i] <= 100`Try to simulate the process. For every iteration, find the new array using the old one and the given rules.",
          "output": "def sumEvenGrandparent(root, parent=None, grandparent=None):\n    if not root:\n        return 0\n    sum = 0\n    if grandparent and grandparent.val % 2 == 0:\n        sum += root.val\n    sum += sumEvenGrandparent(root.left, root, parent) + sumEvenGrandparent(root.right, root, parent)\n    return sum\n"
     },
     {
          "instruction": "Write python code for this problem: Design a Leaderboard class, which has 3 functions:\n\n1.  `addScore(playerId, score)`: Update the leaderboard by adding `score` to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`.\n2.  `top(K)`: Return the score sum of the top `K` players.\n3.  `reset(playerId)`: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.\n\nInitially, the leaderboard is empty.\n\n",
          "input": "**Example 1:**\n\n**Input:** \n\\[ \"Leaderboard \", \"addScore \", \"addScore \", \"addScore \", \"addScore \", \"addScore \", \"top \", \"reset \", \"reset \", \"addScore \", \"top \"\\]\n\\[\\[\\],\\[1,73\\],\\[2,56\\],\\[3,39\\],\\[4,51\\],\\[5,4\\],\\[1\\],\\[1\\],\\[2\\],\\[2,51\\],\\[3\\]\\]\n**Output:** \n\\[null,null,null,null,null,null,73,null,null,null,141\\]\n\n**Explanation:** \nLeaderboard leaderboard = new Leaderboard ();\nleaderboard.addScore(1,73);   // leaderboard = \\[\\[1,73\\]\\];\nleaderboard.addScore(2,56);   // leaderboard = \\[\\[1,73\\],\\[2,56\\]\\];\nleaderboard.addScore(3,39);   // leaderboard = \\[\\[1,73\\],\\[2,56\\],\\[3,39\\]\\];\nleaderboard.addScore(4,51);   // leaderboard = \\[\\[1,73\\],\\[2,56\\],\\[3,39\\],\\[4,51\\]\\];\nleaderboard.addScore(5,4);    // leaderboard = \\[\\[1,73\\],\\[2,56\\],\\[3,39\\],\\[4,51\\],\\[5,4\\]\\];\nleaderboard.top(1);           // returns 73;\nleaderboard.reset(1);         // leaderboard = \\[\\[2,56\\],\\[3,39\\],\\[4,51\\],\\[5,4\\]\\];\nleaderboard.reset(2);         // leaderboard = \\[\\[3,39\\],\\[4,51\\],\\[5,4\\]\\];\nleaderboard.addScore(2,51);   // leaderboard = \\[\\[2,51\\],\\[3,39\\],\\[4,51\\],\\[5,4\\]\\];\nleaderboard.top(3);           // returns 141 = 51 + 51 + 39;\n\n**Constraints:**\n\n*   `1 <= playerId, K <= 10000`\n*   It's guaranteed that `K` is less than or equal to the current number of players.\n*   `1 <= score <= 100`\n*   There will be at most `1000` function calls.What data structure can we use to keep the players' data? Keep a map (dictionary) of player scores. For each top(K) function call, find the maximum K scores and add them.",
          "output": "def num_distinct_repeated_substrings(s):\n    seen = set()\n    for length in range(len(s) // 2, 0, -1):\n        for i in range(len(s) - 2 * length + 1):\n            substr = s[i:i + length]\n            if substr in s[i + length:]:\n                seen.add(substr)\n    return len(seen)\n"
     },
     {
          "instruction": "Write python code for this problem: The **diameter** of a tree is **the number of edges** in the longest path in that tree.\n\nThere is an undirected tree of `n` nodes labeled from `0` to `n - 1`. You are given a 2D array `edges` where `edges.length == n - 1` and `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the tree.\n\nReturn _the **diameter** of the tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** edges = \\[\\[0,1\\],\\[0,2\\]\\]\n**Output:** 2\n**Explanation:** The longest path of the tree is the path 1 - 0 - 2.\n\n**Example 2:**\n\n**Input:** edges = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[1,4\\],\\[4,5\\]\\]\n**Output:** 4\n**Explanation:** The longest path of the tree is the path 3 - 2 - 1 - 4 - 5.\n\n**Constraints:**\n\n*   `n == edges.length + 1`\n*   `1 <= n <= 104`\n*   `0 <= ai, bi < n`\n*   `ai != bi`Start at any node A and traverse the tree to find the furthest node from it, let's call it B. Having found the furthest node B, traverse the tree from B to find the furthest node from it, lets call it C. The distance between B and C is the tree diameter.",
          "output": "from collections import deque, defaultdict\n\ndef tree_diameter(edges):\n    tree = defaultdict(list)\n    for edge in edges:\n        tree[edge[0]].append(edge[1])\n        tree[edge[1]].append(edge[0])\n\n    queue = deque([(0, 0)])\n    furthest, max_distance = 0, 0\n    while queue:\n        node, distance = queue.popleft()\n        if distance > max_distance:\n            max_distance = distance\n            furthest = node\n        for neighbor in tree[node]:\n            tree[neighbor].remove(node)\n            queue.append((neighbor, distance + 1))\n\n    queue.append((furthest, 0))\n    max_distance = 0\n    while queue:\n        node, distance = queue.popleft()\n        if distance > max_distance:\n            max_distance = distance\n        for neighbor in tree[node]:\n            tree[neighbor].remove(node)\n            queue.append((neighbor, distance + 1))\n\n    return max_distance\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, return `true` if `s` is a `k`**\\-palindrome**.\n\nA string is `k`**\\-palindrome** if it can be transformed into a palindrome by removing at most `k` characters from it.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcdeca \", k = 2\n**Output:** true\n**Explanation:** Remove 'b' and 'e' characters.\n\n**Example 2:**\n\n**Input:** s =  \"abbababa \", k = 1\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of only lowercase English letters.\n*   `1 <= k <= s.length`Can you reduce this problem to a classic problem? The problem is equivalent to finding any palindromic subsequence of length at least N-K where N is the length of the string. Try to find the longest palindromic subsequence. Use DP to do that.",
          "output": "from threading import Lock\n\nclass ZeroEvenOdd:\n    def __init__(self, n):\n        self.n = n\n        self.cnt = 1\n        self.lock = Lock()\n\n    def zero(self, printNumber):\n        for i in range(1, self.n + 1):\n            with self.lock:\n                while self.cnt % 2 == 0:\n                    self.lock.wait()\n                printNumber(0)\n                self.cnt += 1\n                self.lock.notify_all()\n\n    def even(self, printNumber):\n        for i in range(2, self.n + 1, 2):\n            with self.lock:\n                while self.cnt != 2 * i:\n                    self.lock.wait()\n                printNumber(i)\n                self.cnt += 1\n                self.lock.notify_all()\n\n    def odd(self, printNumber):\n        for i in range(1, self.n + 1, 2):\n            with self.lock:\n                while self.cnt != 2 * i - 1:\n                    self.lock.wait()\n                printNumber(i)\n                self.cnt += 1\n                self.lock.notify_all()\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the **number of times** that `k` appears in the sample.\n\nCalculate the following statistics:\n\n*   `minimum`: The minimum element in the sample.\n*   `maximum`: The maximum element in the sample.\n*   `mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.\n*   `median`:\n    *   If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.\n    *   If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.\n*   `mode`: The number that appears the most in the sample. It is guaranteed to be **unique**.\n\nReturn _the statistics of the sample as an array of floating-point numbers_ `[minimum, maximum, mean, median, mode]`_. Answers within_ `10-5` _of the actual answer will be accepted._\n\n",
          "input": "**Example 1:**\n\n**Input:** count = \\[0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]\n**Output:** \\[1.00000,3.00000,2.37500,2.50000,3.00000\\]\n**Explanation:** The sample represented by count is \\[1,2,2,2,3,3,3,3\\].\nThe minimum and maximum are 1 and 3 respectively.\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\nThe mode is 3 as it appears the most in the sample.\n\n**Example 2:**\n\n**Input:** count = \\[0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]\n**Output:** \\[1.00000,4.00000,2.18182,2.00000,1.00000\\]\n**Explanation:** The sample represented by count is \\[1,1,1,1,2,2,2,3,3,4,4\\].\nThe minimum and maximum are 1 and 4 respectively.\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\nSince the size of the sample is odd, the median is the middle element 2.\nThe mode is 1 as it appears the most in the sample.\n\n**Constraints:**\n\n*   `count.length == 256`\n*   `0 <= count[i] <= 109`\n*   `1 <= sum(count) <= 109`\n*   The mode of the sample that `count` represents is **unique**.The hard part is the median.  Write a helper function which finds the k-th element from the sample.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef recoverFromPreorder(S: str) -> TreeNode:\n    def helper() -> TreeNode:\n        nonlocal depth, index\n        num_dashes = 0\n        while index < len(S) and S[index] == '-':\n            num_dashes += 1\n            index += 1\n        if num_dashes != depth:\n            index -= num_dashes\n            return None\n        val = 0\n        while index < len(S) and S[index].isdigit():\n            val = val * 10 + int(S[index])\n            index += 1\n        node = TreeNode(val)\n        depth += 1\n        node.left = helper()\n        node.right = helper()\n        depth -= 1\n        return node\n\n    depth, index = 0, 0\n    return helper()\n"
     },
     {
          "instruction": "Write python code for this problem: There is a car with `capacity` empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).\n\nYou are given the integer `capacity` and an array `trips` where `trips[i] = [numPassengersi, fromi, toi]` indicates that the `ith` trip has `numPassengersi` passengers and the locations to pick them up and drop them off are `fromi` and `toi` respectively. The locations are given as the number of kilometers due east from the car's initial location.\n\nReturn `true` _if it is possible to pick up and drop off all passengers for all the given trips, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** trips = \\[\\[2,1,5\\],\\[3,3,7\\]\\], capacity = 4\n**Output:** false\n\n**Example 2:**\n\n**Input:** trips = \\[\\[2,1,5\\],\\[3,3,7\\]\\], capacity = 5\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= trips.length <= 1000`\n*   `trips[i].length == 3`\n*   `1 <= numPassengersi <= 100`\n*   `0 <= fromi < toi <= 1000`\n*   `1 <= capacity <= 105`Sort the pickup and dropoff events by location, then process them in order.",
          "output": "def allCellsDistOrder(rows, cols, rCenter, cCenter):\n    coordinates = [[i, j] for i in range(rows) for j in range(cols)]\n\n    coordinates.sort(key=lambda x: abs(x[0] - rCenter) + abs(x[1] - cCenter))\n\n    return coordinates\n"
     },
     {
          "instruction": "Write python code for this problem: _(This problem is an **interactive problem**.)_\n\nYou may recall that an array `arr` is a **mountain array** if and only if:\n\n*   `arr.length >= 3`\n*   There exists some `i` with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven a mountain array `mountainArr`, return the **minimum** `index` such that `mountainArr.get(index) == target`. If such an `index` does not exist, return `-1`.\n\n**You cannot access the mountain array directly.** You may only access the array using a `MountainArray` interface:\n\n*   `MountainArray.get(k)` returns the element of the array at index `k` (0-indexed).\n*   `MountainArray.length()` returns the length of the array.\n\nSubmissions making more than `100` calls to `MountainArray.get` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\n",
          "input": "**Example 1:**\n\n**Input:** array = \\[1,2,3,4,5,3,1\\], target = 3\n**Output:** 2\n**Explanation:** 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.\n\n**Example 2:**\n\n**Input:** array = \\[0,1,2,4,2,1\\], target = 3\n**Output:** -1\n**Explanation:** 3 does not exist in `the array,` so we return -1.\n\n**Constraints:**\n\n*   `3 <= mountain_arr.length() <= 104`\n*   `0 <= target <= 109`\n*   `0 <= mountain_arr.get(index) <= 109`Based on whether A[i-1] < A[i] < A[i+1], A[i-1] < A[i] > A[i+1], or A[i-1] > A[i] > A[i+1], we are either at the left side, peak, or right side of the mountain.  We can binary search to find the peak.\r\nAfter finding the peak, we can binary search two more times to find whether the value occurs on either side of the peak.",
          "output": "def twoCitySchedCost(costs):\n    costs.sort(key=lambda x: x[0] - x[1])\n\n    totalCost = 0\n    n = len(costs) // 2\n\n    for i in range(n):\n        totalCost += costs[i][0] + costs[i + n][1]\n\n    return totalCost\n"
     },
     {
          "instruction": "Write python code for this problem: Under the grammar given below, strings can represent a set of lowercase words. Let `R(expr)` denote the set of words the expression represents.\n\nThe grammar can best be understood through simple examples:\n\n*   Single letters represent a singleton set containing that word.\n    *   `R( \"a \") = { \"a \"}`\n    *   `R( \"w \") = { \"w \"}`\n*   When we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n    *   `R( \"{a,b,c} \") = { \"a \", \"b \", \"c \"}`\n    *   `R( \"{{a,b},{b,c}} \") = { \"a \", \"b \", \"c \"}` (notice the final set only contains each word at most once)\n*   When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n    *   `R( \"{a,b}{c,d} \") = { \"ac \", \"ad \", \"bc \", \"bd \"}`\n    *   `R( \"a{b,c}{d,e}f{g,h} \") = { \"abdfg \", \"abdfh \", \"abefg \", \"abefh \", \"acdfg \", \"acdfh \", \"acefg \", \"acefh \"}`\n\nFormally, the three rules for our grammar:\n\n*   For every lowercase letter `x`, we have `R(x) = {x}`.\n*   For expressions `e1, e2, ... , ek` with `k >= 2`, we have `R({e1, e2, ...}) = R(e1) \u222a R(e2) \u222a ...`\n*   For expressions `e1` and `e2`, we have `R(e1 + e2) = {a + b for (a, b) in R(e1) * R(e2)}`, where `+` denotes concatenation, and `*` denotes the cartesian product.\n\nGiven an expression representing a set of words under the given grammar, return _the sorted list of words that the expression represents_.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"{a,b}{c,{d,e}} \"\n**Output:** \\[ \"ac \", \"ad \", \"ae \", \"bc \", \"bd \", \"be \"\\]\n\n**Example 2:**\n\n**Input:** expression =  \"{{a,z},a{b,c},{ab,z}} \"\n**Output:** \\[ \"a \", \"ab \", \"ac \", \"z \"\\]\n**Explanation:** Each distinct word is written only once in the final answer.\n\n**Constraints:**\n\n*   `1 <= expression.length <= 60`\n*   `expression[i]` consists of `'{'`, `'}'`, `','`or lowercase English letters.\n*   The given `expression` represents a set of words based on the grammar given in the description.You can write helper methods to parse the next \"chunk\" of the expression.  If you see eg. \"a\", the answer is just the set {a}.  If you see \"{\", you parse until you complete the \"}\" (the number of { and } seen are equal) and that becomes a chunk that you find where the appropriate commas are, and parse each individual expression between the commas.",
          "output": "class Solution:\n    def braceExpansionII(self, expression: str) -> List[str]:\n        def parse(expr: str, i: int) -> Set[str]:\n            result, current = set(), {\"\"}\n            while i < len(expr):\n                if expr[i] == '{':\n                    update = set()\n                    for postfix in parse(expr, i + 1):\n                        for prefix in current:\n                            update.add(prefix + postfix)\n                    current = update\n                    i = expr.index('}', i)\n                elif expr[i] == '}':\n                    break\n                elif expr[i] == ',':\n                    result |= current\n                    current = {\"\"}\n                else:\n                    current = {s + expr[i] for s in current}\n                i += 1\n            return result | current\n        \n        return sorted(parse(expression, 0))\n"
     },
     {
          "instruction": "Write python code for this problem: Given a non-negative integer `num`, Return its _encoding_ string.\n\nThe encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 23\n**Output:**  \"1000 \"\n\n**Example 2:**\n\n**Input:** num = 107\n**Output:**  \"101100 \"\n\n**Constraints:**\n\n*   `0 <= num <= 10^9`\n\n\\- Rank is an integer starting from 1. - The larger the element, the larger the rank. If two elements are the same, their rank must be the same. - Rank should be as small as possible. Function signature: \\`int\\[\\] arrayRankTransform(int\\[\\] arr)\\`Try to find the number of binary digits returned by the function. The pattern is to start counting from zero after determining the number of binary digits.",
          "output": "def arrayRankTransform(arr):\n    sorted_arr = sorted(arr)\n    rank_map = {}\n    rank = 1\n\n    for num in sorted_arr:\n        if num not in rank_map:\n            rank_map[num] = rank\n            rank += 1\n\n    return [rank_map[num] for num in arr]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given some lists of `regions` where the first region of each list includes all other regions in that list.\n\nNaturally, if a region `x` contains another region `y` then `x` is bigger than `y`. Also, by definition, a region `x` contains itself.\n\nGiven two regions: `region1` and `region2`, return _the smallest region that contains both of them_.\n\nIf you are given regions `r1`, `r2`, and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`.\n\nIt is guaranteed the smallest region exists.\n\n",
          "input": "**Example 1:**\n\n**Input:**\nregions = \\[\\[ \"Earth \", \"North America \", \"South America \"\\],\n\\[ \"North America \", \"United States \", \"Canada \"\\],\n\\[ \"United States \", \"New York \", \"Boston \"\\],\n\\[ \"Canada \", \"Ontario \", \"Quebec \"\\],\n\\[ \"South America \", \"Brazil \"\\]\\],\nregion1 =  \"Quebec \",\nregion2 =  \"New York \"\n**Output:**  \"North America \"\n\n**Example 2:**\n\n**Input:** regions = \\[\\[ \"Earth \",  \"North America \",  \"South America \"\\],\\[ \"North America \",  \"United States \",  \"Canada \"\\],\\[ \"United States \",  \"New York \",  \"Boston \"\\],\\[ \"Canada \",  \"Ontario \",  \"Quebec \"\\],\\[ \"South America \",  \"Brazil \"\\]\\], region1 =  \"Canada \", region2 =  \"South America \"\n**Output:**  \"Earth \"\n\n**Constraints:**\n\n*   `2 <= regions.length <= 104`\n*   `2 <= regions[i].length <= 20`\n*   `1 <= regions[i][j].length, region1.length, region2.length <= 20`\n*   `region1 != region2`\n*   `regions[i][j]`, `region1`, and `region2` consist of English letters.Try to model the problem as a graph problem. The given graph is a tree. The problem is reduced to finding the lowest common ancestor of two nodes in a tree.",
          "output": "from collections import deque\nfrom itertools import chain\n\ndef matrix_rank_transform(matrix):\n    def neighbours(r, c):\n        for i in range(m):\n            if i != r:\n                yield i, c\n        for i in range(n):\n            if i != c:\n                yield r, i\n\n    m, n = len(matrix), len(matrix[0])\n    rank = [[0] * n for _ in range(m)]\n    sorted_row = [0] * m\n    sorted_col = [0] * n\n\n    for bound in range(200001):\n        q = deque((r, c) for r in range(m) for c in range(n) if matrix[r][c] == bound and rank[r][c] == 0)\n        if not q:\n            break\n        while q:\n            r, c = rc = q.popleft()\n            potential_rank = sorted_row[r] + 1\n            for row, col in neighbours(r, c):\n                if matrix[row][col] <= matrix[r][c]:\n                    potential_rank = max(potential_rank, rank[row][col] + (matrix[row][col] < matrix[r][c]))\n            if potential_rank == sorted_col[c] + 1:\n                rank[r][c] = sorted_row[r] = sorted_col[c] = potential_rank\n            else:\n                q.append(rc)\n    return rank\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a list of equivalent string pairs `synonyms` where `synonyms[i] = [si, ti]` indicates that `si` and `ti` are equivalent strings. You are also given a sentence `text`.\n\nReturn _all possible synonymous sentences **sorted lexicographically**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** synonyms = \\[\\[ \"happy \", \"joy \"\\],\\[ \"sad \", \"sorrow \"\\],\\[ \"joy \", \"cheerful \"\\]\\], text =  \"I am happy today but was sad yesterday \"\n**Output:** \\[ \"I am cheerful today but was sad yesterday \", \"I am cheerful today but was sorrow yesterday \", \"I am happy today but was sad yesterday \", \"I am happy today but was sorrow yesterday \", \"I am joy today but was sad yesterday \", \"I am joy today but was sorrow yesterday \"\\]\n\n**Example 2:**\n\n**Input:** synonyms = \\[\\[ \"happy \", \"joy \"\\],\\[ \"cheerful \", \"glad \"\\]\\], text =  \"I am happy today but was sad yesterday \"\n**Output:** \\[ \"I am happy today but was sad yesterday \", \"I am joy today but was sad yesterday \"\\]\n\n**Constraints:**\n\n*   `0 <= synonyms.length <= 10`\n*   `synonyms[i].length == 2`\n*   `1 <= si.length, ti.length <= 10`\n*   `si != ti`\n*   `text` consists of at most `10` words.\n*   All the pairs of `synonyms` are **unique**.\n*   The words of `text` are separated by single spaces.Find all synonymous groups of words. Use union-find data structure. By backtracking, generate all possible statements.",
          "output": "from typing import List\n\n\ndef generateSentences(synonyms: List[List[str]], text: str) -> List[str]:\n    synonym_map = {}\n\n    for s, t in synonyms:\n        if s not in synonym_map:\n            synonym_map[s] = {s}\n        if t not in synonym_map:\n            synonym_map[t] = {t}\n        synonym_map[s].add(t)\n        synonym_map[t].add(s)\n\n    words = text.split()\n    results = []\n\n    def helper(index: int, cur_sentence: List[str]) -> None:\n        if index == len(words):\n            results.append(\" \".join(cur_sentence))\n            return\n        for w in synonym_map.get(words[index], {words[index]}):\n            cur_sentence.append(w)\n            helper(index + 1, cur_sentence)\n            cur_sentence.pop()\n\n    helper(0, [])\n\n    return sorted(results)\n"
     },
     {
          "instruction": "Write python code for this problem: You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`.\n\nYou want to share the chocolate with your `k` friends so you start cutting the chocolate bar into `k + 1` pieces using `k` cuts, each piece consists of some **consecutive** chunks.\n\nBeing generous, you will eat the piece with the **minimum total sweetness** and give the other pieces to your friends.\n\nFind the **maximum total sweetness** of the piece you can get by cutting the chocolate bar optimally.\n\n",
          "input": "**Example 1:**\n\n**Input:** sweetness = \\[1,2,3,4,5,6,7,8,9\\], k = 5\n**Output:** 6\n**Explanation:** You can divide the chocolate to \\[1,2,3\\], \\[4,5\\], \\[6\\], \\[7\\], \\[8\\], \\[9\\]\n\n**Example 2:**\n\n**Input:** sweetness = \\[5,6,7,8,9,1,2,3,4\\], k = 8\n**Output:** 1\n**Explanation:** There is only one way to cut the bar into 9 pieces.\n\n**Example 3:**\n\n**Input:** sweetness = \\[1,2,2,1,2,2,1,2,2\\], k = 2\n**Output:** 5\n**Explanation:** You can divide the chocolate to \\[1,2,2\\], \\[1,2,2\\], \\[1,2,2\\]\n\n**Constraints:**\n\n*   `0 <= k < sweetness.length <= 104`\n*   `1 <= sweetness[i] <= 105`After dividing the array into K+1 sub-arrays, you will pick the sub-array with the minimum sum. Divide the sub-array into K+1 sub-arrays such that the minimum sub-array sum is as maximum as possible. Use binary search with greedy check.",
          "output": "def replaceElements(arr):\n    n = len(arr)\n    maxElement = -1\n    for i in range(n - 1, -1, -1):\n        temp = arr[i]\n        arr[i] = maxElement\n        maxElement = max(maxElement, temp)\n    return arr\n"
     },
     {
          "instruction": "Write python code for this problem: In an infinite binary tree where every node has two children, the nodes are labelled in row order.\n\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\n\nGiven the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.\n\n",
          "input": "**Example 1:**\n\n**Input:** label = 14\n**Output:** \\[1,3,4,14\\]\n\n**Example 2:**\n\n**Input:** label = 26\n**Output:** \\[1,2,6,10,26\\]\n\n**Constraints:**\n\n*   `1 <= label <= 10^6`Based on the label of the current node, find what the label must be for the parent of that node.",
          "output": "def colorBorder(grid, row, col, color):\n    def dfs(grid, row, col, current, color):\n        if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] != current:\n            return\n\n        grid[row][col] = color\n        dfs(grid, row - 1, col, current, color)\n        dfs(grid, row + 1, col, current, color)\n        dfs(grid, row, col - 1, current, color)\n        dfs(grid, row, col + 1, current, color)\n\n    current = grid[row][col]\n    if current == color:\n        return grid\n\n    dfs(grid, row, col, current, color + 1000)\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] > 1000:\n                grid[i][j] -= 1000\n\n    return grid\n"
     },
     {
          "instruction": "Write python code for this problem: We distribute some number of `candies`, to a row of **`n = num_people`** people in the following way:\n\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person.\n\nThen, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person.\n\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\n\nReturn an array (of length `num_people` and sum `candies`) that represents the final distribution of candies.\n\n",
          "input": "**Example 1:**\n\n**Input:** candies = 7, num\\_people = 4\n**Output:** \\[1,2,3,1\\]\n**Explanation:**\nOn the first turn, ans\\[0\\] += 1, and the array is \\[1,0,0,0\\].\nOn the second turn, ans\\[1\\] += 2, and the array is \\[1,2,0,0\\].\nOn the third turn, ans\\[2\\] += 3, and the array is \\[1,2,3,0\\].\nOn the fourth turn, ans\\[3\\] += 1 (because there is only one candy left), and the final array is \\[1,2,3,1\\].\n\n**Example 2:**\n\n**Input:** candies = 10, num\\_people = 3\n**Output:** \\[5,2,3\\]\n**Explanation:** \nOn the first turn, ans\\[0\\] += 1, and the array is \\[1,0,0\\].\nOn the second turn, ans\\[1\\] += 2, and the array is \\[1,2,0\\].\nOn the third turn, ans\\[2\\] += 3, and the array is \\[1,2,3\\].\nOn the fourth turn, ans\\[0\\] += 4, and the final array is \\[5,2,3\\].\n\n**Constraints:**\n\n*   1 <= candies <= 10^9\n*   1 <= num\\_people <= 1000Give candy to everyone each \"turn\" first [until you can't], then give candy to one person per turn.",
          "output": "def distribute_candies(candies, num_people):\n    result = [0] * num_people\n    i = 0\n    count = 1\n\n    while candies > 0:\n        result[i % num_people] += min(candies, count)\n        candies -= count\n        count += 1\n        i += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `books` where `books[i] = [thicknessi, heighti]` indicates the thickness and height of the `ith` book. You are also given an integer `shelfWidth`.\n\nWe want to place these books in order onto bookcase shelves that have a total width `shelfWidth`.\n\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to `shelfWidth`, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.\n\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\n\n*   For example, if we have an ordered list of `5` books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.\n\nReturn _the minimum possible height that the total bookshelf can be after placing shelves in this manner_.\n\n",
          "input": "**Example 1:**\n\n**Input:** books = \\[\\[1,1\\],\\[2,3\\],\\[2,3\\],\\[1,1\\],\\[1,1\\],\\[1,1\\],\\[1,2\\]\\], shelfWidth = 4\n**Output:** 6\n**Explanation:**\nThe sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf.\n\n**Example 2:**\n\n**Input:** books = \\[\\[1,3\\],\\[2,4\\],\\[3,2\\]\\], shelfWidth = 6\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= books.length <= 1000`\n*   `1 <= thicknessi <= shelfWidth <= 1000`\n*   `1 <= heighti <= 1000`Use dynamic programming:  dp(i) will be the answer to the problem for books[i:].",
          "output": "def max_uncrossed_lines(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if nums1[i - 1] == nums2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: A **boolean expression** is an expression that evaluates to either `true` or `false`. It can be in one of the following shapes:\n\n*   `'t'` that evaluates to `true`.\n*   `'f'` that evaluates to `false`.\n*   `'!(subExpr)'` that evaluates to **the logical NOT** of the inner expression `subExpr`.\n*   `'&(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical AND** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`.\n*   `'|(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical OR** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`.\n\nGiven a string `expression` that represents a **boolean expression**, return _the evaluation of that expression_.\n\nIt is **guaranteed** that the given expression is valid and follows the given rules.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"&(|(f)) \"\n**Output:** false\n**Explanation:** \nFirst, evaluate |(f) --> f. The expression is now  \"&(f) \".\nThen, evaluate &(f) --> f. The expression is now  \"f \".\nFinally, return false.\n\n**Example 2:**\n\n**Input:** expression =  \"|(f,f,f,t) \"\n**Output:** true\n**Explanation:** The evaluation of (false OR false OR false OR true) is true.\n\n**Example 3:**\n\n**Input:** expression =  \"!(&(f,t)) \"\n**Output:** true\n**Explanation:** \nFirst, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now  \"!(f) \".\nThen, evaluate !(f) --> NOT false --> true. We return true.\n\n**Constraints:**\n\n*   `1 <= expression.length <= 2 * 104`\n*   expression\\[i\\] is one following characters: `'('`, `')'`, `'&'`, `'|'`, `'!'`, `'t'`, `'f'`, and `','`.Write a function \"parse\" which calls helper functions \"parse_or\", \"parse_and\", \"parse_not\".",
          "output": "MAX_STEPS = 200\n\ndef isEscapePossible(blocked, source, target):\n    blockedSet = set([\"{}_{}\".format(block[0], block[1]) for block in blocked])\n    visited = set()\n\n    def dfs(x, y, tx, ty, steps):\n        pos = \"{}_{}\".format(x, y)\n        if x < 0 or x >= 1000000 or y < 0 or y >= 1000000 or steps >= MAX_STEPS or pos in blockedSet or pos in visited:\n            return False\n\n        if x == tx and y == ty:\n            return True\n\n        visited.add(pos)\n\n        return (dfs(x + 1, y, tx, ty, steps + 1) or dfs(x, y + 1, tx, ty, steps + 1)\n                or dfs(x - 1, y, tx, ty, steps + 1) or dfs(x, y - 1, tx, ty, steps + 1))\n\n    return dfs(source[0], source[1], target[0], target[1], 0)\n"
     },
     {
          "instruction": "Write python code for this problem: A decimal number can be converted to its **Hexspeak representation** by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `'0'` with the letter `'O'`, and the digit `'1'` with the letter `'I'`. Such a representation is valid if and only if it consists only of the letters in the set `{'A', 'B', 'C', 'D', 'E', 'F', 'I', 'O'}`.\n\nGiven a string `num` representing a decimal integer `n`, _return the **Hexspeak representation** of_ `n` _if it is valid, otherwise return_ `\"ERROR \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"257 \"\n**Output:**  \"IOI \"\n**Explanation:** 257 is 101 in hexadecimal.\n\n**Example 2:**\n\n**Input:** num =  \"3 \"\n**Output:**  \"ERROR \"\n\n**Constraints:**\n\n*   `1 <= num.length <= 12`\n*   `num` does not contain leading zeros.\n*   num represents an integer in the range `[1, 1012]`.Convert the given number to hexadecimal. Replace all 0 and 1 with 'O' and 'I'. Check if the final string has any numerical digits.",
          "output": "def to_hexspeak(num: str) -> str:\n    n = int(num)\n    hex_str = []\n    while n:\n        rem = n % 16\n        if rem == 1: hex_str.insert(0, 'I')\n        elif rem == 0: hex_str.insert(0, 'O')\n        elif rem > 9: hex_str.insert(0, chr(rem - 10 + ord('A')))\n        else: return 'ERROR'\n        n //= 16\n    return ''.join(hex_str)\n"
     },
     {
          "instruction": "Write python code for this problem: A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`).\n\nYou are given a **sorted** list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. You are also given another interval `toBeRemoved`.\n\nReturn _the set of real numbers with the interval_ `toBeRemoved` _**removed** from_ `intervals`_. In other words, return the set of real numbers such that every_ `x` _in the set is in_ `intervals` _but **not** in_ `toBeRemoved`_. Your answer should be a **sorted** list of disjoint intervals as described above._\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[0,2\\],\\[3,4\\],\\[5,7\\]\\], toBeRemoved = \\[1,6\\]\n**Output:** \\[\\[0,1\\],\\[6,7\\]\\]\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[0,5\\]\\], toBeRemoved = \\[2,3\\]\n**Output:** \\[\\[0,2\\],\\[3,5\\]\\]\n\n**Example 3:**\n\n**Input:** intervals = \\[\\[-5,-4\\],\\[-3,-2\\],\\[1,2\\],\\[3,5\\],\\[8,9\\]\\], toBeRemoved = \\[-1,4\\]\n**Output:** \\[\\[-5,-4\\],\\[-3,-2\\],\\[4,5\\],\\[8,9\\]\\]\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 104`\n*   `-109 <= ai < bi <= 109`Solve the problem for every interval alone. Divide the problem into cases according to the position of the two intervals.",
          "output": "def invalid_transactions(transactions):\n    trans_map = {}\n    \n    for trans in transactions:\n        temp = trans.split(\",\")\n        trans_map.setdefault(temp[0], []).append(temp)\n    \n    ans = []\n\n    for trans in transactions:\n        temp = trans.split(\",\")\n\n        if int(temp[2]) > 1000:\n            ans.append(trans)\n            continue\n\n        for other in trans_map[temp[0]]:\n            if other[3] != temp[3] and abs(int(other[1]) - int(temp[1])) <= 60:\n                ans.append(trans)\n                break\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: A tree rooted at node 0 is given as follows:\n\n*   The number of nodes is `nodes`;\n*   The value of the `ith` node is `value[i]`;\n*   The parent of the `ith` node is `parent[i]`.\n\nRemove every subtree whose sum of values of nodes is zero.\n\nReturn _the number of the remaining nodes in the tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nodes = 7, parent = \\[-1,0,0,1,2,2,2\\], value = \\[1,-2,4,0,-2,-1,-1\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** nodes = 7, parent = \\[-1,0,0,1,2,2,2\\], value = \\[1,-2,4,0,-2,-1,-2\\]\n**Output:** 6\n\n**Constraints:**\n\n*   `1 <= nodes <= 104`\n*   `parent.length == nodes`\n*   `0 <= parent[i] <= nodes - 1`\n*   `parent[0] == -1` which indicates that `0` is the root.\n*   `value.length == nodes`\n*   `-105 <= value[i] <= 105`\n*   The given input is **guaranteed** to represent a **valid tree**.Traverse the tree using depth first search. Find for every node the sum of values of its sub-tree. Traverse the tree again from the root and return once you reach a node with zero sum of values in its sub-tree.",
          "output": "def countSmallerFrequencies(words, queries):\n    freqWords = [word.count(min(word)) for word in words]\n    \n    ans = []\n    for query in queries:\n        freqQuery = query.count(min(query))\n        ans.append(sum(f > freqQuery for f in freqWords))\n        \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `arr`.\n\nIn one move, you can select a **palindromic** subarray `arr[i], arr[i + 1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.\n\nReturn _the minimum number of moves needed to remove all numbers from the array_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** arr = \\[1,3,4,1,5\\]\n**Output:** 3\n**Explanation:** Remove \\[4\\] then remove \\[1,3,1\\] then remove \\[5\\].\n\n**Constraints:**\n\n*   `1 <= arr.length <= 100`\n*   `1 <= arr[i] <= 20`Use dynamic programming. Let dp[i][j] be the solution for the sub-array from index i to index j. Notice that if we have S[i] == S[j] one transition could be just dp(i + 1, j + 1) because in the last turn we would have a palindrome and we can extend this palindrome from both sides, the other transitions are not too difficult to deduce.",
          "output": "def minimumMoves(arr):\n    def minRemovals(i, j):\n        if i > j:\n            return 0\n        if i == j:\n            return 1\n        if dp[i][j] != -1:\n            return dp[i][j]\n\n        ans = minRemovals(i + 1, j) + 1\n        for k in range(i + 1, j + 1):\n            if arr[i] == arr[k]:\n                ans = min(ans, minRemovals(i + 1, k - 1) + minRemovals(k + 1, j))\n        dp[i][j] = ans\n        return ans\n\n    dp = [[-1] * len(arr) for _ in range(len(arr))]\n    return minRemovals(0, len(arr) - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a valid (IPv4) IP `address`, return a defanged version of that IP address.\n\nA _defanged IP address_ replaces every period `\". \"` with `\"[.] \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** address = \"1.1.1.1\"\n**Output:** \"1\\[.\\]1\\[.\\]1\\[.\\]1\"\n\n**Example 2:**\n\n**Input:** address = \"255.100.50.0\"\n**Output:** \"255\\[.\\]100\\[.\\]50\\[.\\]0\"\n\n**Constraints:**\n\n*   The given `address` is a valid IPv4 address.",
          "output": "def defangIPaddr(address: str) -> str:\n    return address.replace('.', '[.]')\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` flights that are labeled from `1` to `n`.\n\nYou are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (**inclusive**) with `seatsi` seats reserved for **each flight** in the range.\n\nReturn _an array_ `answer` _of length_ `n`_, where_ `answer[i]` _is the total number of seats reserved for flight_ `i`.\n\n",
          "input": "**Example 1:**\n\n**Input:** bookings = \\[\\[1,2,10\\],\\[2,3,20\\],\\[2,5,25\\]\\], n = 5\n**Output:** \\[10,55,45,25,25\\]\n**Explanation:**\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = \\[10,55,45,25,25\\]\n\n**Example 2:**\n\n**Input:** bookings = \\[\\[1,2,10\\],\\[2,2,15\\]\\], n = 2\n**Output:** \\[10,25\\]\n**Explanation:**\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = \\[10,25\\]\n\n**Constraints:**\n\n*   `1 <= n <= 2 * 104`\n*   `1 <= bookings.length <= 2 * 104`\n*   `bookings[i].length == 3`\n*   `1 <= firsti <= lasti <= n`\n*   `1 <= seatsi <= 104`",
          "output": "def corpFlightBookings(bookings, n):\n    seats = [0] * n\n    for booking in bookings:\n        seats[booking[0] - 1] += booking[2]\n        if booking[1] < n:\n            seats[booking[1]] -= booking[2]\n    for i in range(1, n):\n        seats[i] += seats[i - 1]\n    return seats\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, each node in the tree has a distinct value.\n\nAfter deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).\n\nReturn the roots of the trees in the remaining forest. You may return the result in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,6,7\\], to\\_delete = \\[3,5\\]\n**Output:** \\[\\[1,2,null,4\\],\\[6\\],\\[7\\]\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,2,4,null,3\\], to\\_delete = \\[3\\]\n**Output:** \\[\\[1,2,4\\]\\]\n\n**Constraints:**\n\n*   The number of nodes in the given tree is at most `1000`.\n*   Each node has a distinct value between `1` and `1000`.\n*   `to_delete.length <= 1000`\n*   `to_delete` contains distinct values between `1` and `1000`.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef delNodes(root: TreeNode, to_delete):\n    to_delete_set = set(to_delete)\n    remaining_trees = []\n\n    def removeNodes(node):\n        if node is None:\n            return None\n        node.left = removeNodes(node.left)\n        node.right = removeNodes(node.right)\n        if node.val in to_delete_set:\n            if node.left:\n                remaining_trees.append(node.left)\n            if node.right:\n                remaining_trees.append(node.right)\n            return None\n        return node\n\n    if removeNodes(root):\n        remaining_trees.append(root)\n    return remaining_trees\n"
     },
     {
          "instruction": "Write python code for this problem: A string is a _valid parentheses string_ (denoted VPS) if and only if it consists of `\"( \"` and `\") \"` characters only, and:\n\n*   It is the empty string, or\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or\n*   It can be written as `(A)`, where `A` is a VPS.\n\nWe can similarly define the _nesting depth_ `depth(S)` of any VPS `S` as follows:\n\n*   `depth( \" \") = 0`\n*   `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's\n*   `depth( \"( \" + A + \") \") = 1 + depth(A)`, where `A` is a VPS.\n\nFor example, `\" \"`, `\"()() \"`, and `\"()(()()) \"` are VPS's (with nesting depths 0, 1, and 2), and `\")( \"` and `\"(() \"` are not VPS's.\n\nGiven a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS's (and `A.length + B.length = seq.length`).\n\nNow choose **any** such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value.\n\nReturn an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`: `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`. Note that even though multiple answers may exist, you may return any of them.\n\n",
          "input": "**Example 1:**\n\n**Input:** seq =  \"(()()) \"\n**Output:** \\[0,1,1,1,1,0\\]\n\n**Example 2:**\n\n**Input:** seq =  \"()(())() \"\n**Output:** \\[0,0,0,1,1,0,1,1\\]\n\n**Constraints:**\n\n*   `1 <= seq.size <= 10000`",
          "output": "def minScoreTriangulation(values):\n    n = len(values)\n    dp = [[0] * n for _ in range(n)]\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], values[i] * values[j] * values[k] + dp[i][k] + dp[k][j])\n\n    return dp[0][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, return _the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements._\n\nAnswers within `10-5` of the **actual answer** will be considered accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3\\]\n**Output:** 2.00000\n**Explanation:** After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.\n\n**Example 2:**\n\n**Input:** arr = \\[6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0\\]\n**Output:** 4.00000\n\n**Example 3:**\n\n**Input:** arr = \\[6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4\\]\n**Output:** 4.77778\n\n**Constraints:**\n\n*   `20 <= arr.length <= 1000`\n*   `arr.length` **is a multiple** of `20`.\n*   `0 <= arr[i] <= 105`Sort the given array. Remove the first and last 5% of the sorted array.",
          "output": "def is_path_crossing(path: str) -> bool:\n    visited = {(0, 0)}\n    x, y = 0, 0\n    for dir in path:\n        if dir == 'N': y += 1\n        elif dir == 'S': y -= 1\n        elif dir == 'E': x += 1\n        elif dir == 'W': x -= 1\n        if (x, y) in visited: return True\n        visited.add((x, y))\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Design the `CombinationIterator` class:\n\n*   `CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of **sorted distinct** lowercase English letters and a number `combinationLength` as arguments.\n*   `next()` Returns the next combination of length `combinationLength` in **lexicographical order**.\n*   `hasNext()` Returns `true` if and only if there exists a next combination.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"CombinationIterator \",  \"next \",  \"hasNext \",  \"next \",  \"hasNext \",  \"next \",  \"hasNext \"\\]\n\\[\\[ \"abc \", 2\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null,  \"ab \", true,  \"ac \", true,  \"bc \", false\\]\n\n**Explanation**\nCombinationIterator itr = new CombinationIterator( \"abc \", 2);\nitr.next();    // return  \"ab \"\nitr.hasNext(); // return True\nitr.next();    // return  \"ac \"\nitr.hasNext(); // return True\nitr.next();    // return  \"bc \"\nitr.hasNext(); // return False\n\n**Constraints:**\n\n*   `1 <= combinationLength <= characters.length <= 15`\n*   All the characters of `characters` are **unique**.\n*   At most `104` calls will be made to `next` and `hasNext`.\n*   It is guaranteed that all calls of the function `next` are valid.Generate all combinations as a preprocessing. Use bit masking to generate all the combinations.",
          "output": "def max_sum_subsequence(nums: List[int], k: int) -> int:\n    n = len(nums)\n    dp = [0] * n\n    result = 0\n\n    for i in range(n):\n        dp[i] = nums[i]\n        for j in range(max(0, i - k), i):\n            dp[i] = max(dp[i], dp[j] + nums[i])\n        result = max(result, dp[i])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: An integer has _sequential digits_ if and only if each digit in the number is one more than the previous digit.\n\nReturn a **sorted** list of all the integers in the range `[low, high]` inclusive that have sequential digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** low = 100, high = 300\n**Output:** \\[123,234\\]\n\n**Example 2:**\n\n**Input:** low = 1000, high = 13000\n**Output:** \\[1234,2345,3456,4567,5678,6789,12345\\]\n\n**Constraints:**\n\n*   `10 <= low <= high <= 10^9`Generate all numbers with sequential digits and check if they are in the given range. Fix the starting digit then do a recursion that tries to append all valid digits.",
          "output": "def sequential_digits(low, high):\n    result = []\n    for i in range(1, 10):\n        number = i\n        for j in range(i + 1, 10):\n            number = number * 10 + j\n            if low <= number <= high:\n                result.append(number)\n    return sorted(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an **even** number of people `numPeople` that stand around a circle and each person shakes hands with someone else so that there are `numPeople / 2` handshakes total.\n\nReturn _the number of ways these handshakes could occur such that none of the handshakes cross_.\n\nSince the answer could be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** numPeople = 4\n**Output:** 2\n**Explanation:** There are two ways to do it, the first way is \\[(1,2),(3,4)\\] and the second one is \\[(2,3),(4,1)\\].\n\n**Example 2:**\n\n**Input:** numPeople = 6\n**Output:** 5\n\n**Constraints:**\n\n*   `2 <= numPeople <= 1000`\n*   `numPeople` is even.Use dynamic programming. Let dp[n] be the number of ways that n people can handshake. Then fix a person as a pivot and turn for every other person who will have a handshake, the answer is the sum of the products of the new two subproblems.",
          "output": "def numberOfWays(numPeople: int) -> int:\n    MOD = 1000000007\n    dp = [0] * (numPeople // 2 + 1)\n    dp[0] = 1\n    for i in range(1, numPeople // 2 + 1):\n        for j in range(1, i + 1):\n            dp[i] = (dp[i] + dp[i - j] * dp[j - 1]) % MOD\n    return dp[numPeople // 2]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.\n\nSort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`. Elements that do not appear in `arr2` should be placed at the end of `arr1` in **ascending** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr1 = \\[2,3,1,3,2,4,6,7,9,2,19\\], arr2 = \\[2,1,4,3,9,6\\]\n**Output:** \\[2,2,2,1,4,3,3,9,6,7,19\\]\n\n**Example 2:**\n\n**Input:** arr1 = \\[28,6,22,8,44,17\\], arr2 = \\[22,28,8,6\\]\n**Output:** \\[22,28,8,6,17,44\\]\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length <= 1000`\n*   `0 <= arr1[i], arr2[i] <= 1000`\n*   All the elements of `arr2` are **distinct**.\n*   Each `arr2[i]` is in `arr1`.Using a hashmap, we can map the values of arr2 to their position in arr2. After, we can use a custom sorting function.",
          "output": "def longest_dup_substring(s):\n    n = len(s)\n    longest_duplicate = \"\"\n    for length in range(n - 1, 0, -1):\n        for i in range(n - length + 1):\n            substring = s[i:i + length]\n            if s.find(substring, i + 1) != -1:\n                longest_duplicate = substring\n                return longest_duplicate\n    return longest_duplicate\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the lowest common ancestor of its deepest leaves_.\n\nRecall that:\n\n*   The node of a binary tree is a leaf if and only if it has no children\n*   The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.\n*   The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\]\n**Output:** \\[2,7,4\\]\n**Explanation:** We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n**Explanation:** The root is the deepest node in the tree, and it's the lca of itself.\n\n**Example 3:**\n\n**Input:** root = \\[0,1,3,null,2\\]\n**Output:** \\[2\\]\n**Explanation:** The deepest leaf node in the tree is 2, the lca of one node is itself.\n\n**Constraints:**\n\n*   The number of nodes in the tree will be in the range `[1, 1000]`.\n*   `0 <= Node.val <= 1000`\n*   The values of the nodes in the tree are **unique**.\n\n**Note:** This question is the same as 865: [https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/](https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/)Do a postorder traversal. Then, if both subtrees contain a deepest leaf, you can mark this node as the answer (so far). The final node marked will be the correct answer.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_lca_util(root):\n    if root is None:\n        return None, 0\n\n    left_lca, left_depth = find_lca_util(root.left)\n    right_lca, right_depth = find_lca_util(root.right)\n\n    if left_depth > right_depth:\n        return left_lca, left_depth + 1\n    elif left_depth < right_depth:\n        return right_lca, right_depth + 1\n    else:\n        return root, left_depth + 1\n\ndef lca_deepest_leaves(root):\n    return find_lca_util(root)[0]\n"
     },
     {
          "instruction": "Write python code for this problem: We are given `hours`, a list of the number of hours worked per day for a given employee.\n\nA day is considered to be a _tiring day_ if and only if the number of hours worked is (strictly) greater than `8`.\n\nA _well-performing interval_ is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\n\nReturn the length of the longest well-performing interval.\n\n",
          "input": "**Example 1:**\n\n**Input:** hours = \\[9,9,6,0,6,6,9\\]\n**Output:** 3\n**Explanation:** The longest well-performing interval is \\[9,9,6\\].\n\n**Example 2:**\n\n**Input:** hours = \\[6,6,6\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= hours.length <= 104`\n*   `0 <= hours[i] <= 16`Make a new array A of +1/-1s corresponding to if hours[i] is > 8 or not. The goal is to find the longest subarray with positive sum. Using prefix sums (PrefixSum[i+1] = A[0] + A[1] + ... + A[i]), you need to find for each j, the smallest i < j with PrefixSum[i] + 1 == PrefixSum[j].",
          "output": "def longestWellPerformingInterval(hours):\n    sum = 0\n    longest = 0\n    first_sum_index = {}\n\n    for i, hour in enumerate(hours):\n        sum += 1 if hour > 8 else -1\n        if sum > 0:\n            longest = i + 1\n        else:\n            if sum - 1 in first_sum_index:\n                longest = max(longest, i - first_sum_index[sum - 1])\n            if sum not in first_sum_index:\n                first_sum_index[sum] = i\n\n    return longest\n"
     },
     {
          "instruction": "Write python code for this problem: In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has.\n\nConsider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.\n\n*   For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`.\n\nReturn _any sufficient team of the smallest possible size, represented by the index of each person_. You may return the answer in **any order**.\n\nIt is **guaranteed** an answer exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** req\\_skills = \\[\"java\",\"nodejs\",\"reactjs\"\\], people = \\[\\[\"java\"\\],\\[\"nodejs\"\\],\\[\"nodejs\",\"reactjs\"\\]\\]\n**Output:** \\[0,2\\]\n\n**Example 2:**\n\n**Input:** req\\_skills = \\[\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"\\], people = \\[\\[\"algorithms\",\"math\",\"java\"\\],\\[\"algorithms\",\"math\",\"reactjs\"\\],\\[\"java\",\"csharp\",\"aws\"\\],\\[\"reactjs\",\"csharp\"\\],\\[\"csharp\",\"math\"\\],\\[\"aws\",\"java\"\\]\\]\n**Output:** \\[1,2\\]\n\n**Constraints:**\n\n*   `1 <= req_skills.length <= 16`\n*   `1 <= req_skills[i].length <= 16`\n*   `req_skills[i]` consists of lowercase English letters.\n*   All the strings of `req_skills` are **unique**.\n*   `1 <= people.length <= 60`\n*   `0 <= people[i].length <= 16`\n*   `1 <= people[i][j].length <= 16`\n*   `people[i][j]` consists of lowercase English letters.\n*   All the strings of `people[i]` are **unique**.\n*   Every skill in `people[i]` is a skill in `req_skills`.\n*   It is guaranteed a sufficient team exists.Do a bitmask DP. For each person, for each set of skills, we can update our understanding of a minimum set of people needed to perform this set of skills.",
          "output": "from collections import defaultdict\nfrom math import log2\n\ndef smallestSufficientTeam(req_skills, people):\n    skill_to_id = {skill: idx for idx, skill in enumerate(req_skills)}\n\n    n, m = len(people), len(req_skills)\n    dp = [float(\"inf\")] * (1 << m)\n    pre = [0] * (1 << m)\n    skill_set = [0] * (1 << m)\n\n    dp[0] = 0\n\n    for i, skills in enumerate(people):\n        skill_mask = sum(1 << skill_to_id[skill] for skill in skills)\n        for j in range((1 << m) - 1, -1, -1):\n            if dp[j | skill_mask] > dp[j] + 1:\n                dp[j | skill_mask] = dp[j] + 1\n                pre[j | skill_mask] = j\n                skill_set[j | skill_mask] = i\n\n    res = []\n    mask = (1 << m) - 1\n    while mask:\n        res.append(skill_set[mask])\n        mask = pre[mask]\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array **sorted** in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,2,6,6,6,6,7,10\\]\n**Output:** 6\n\n**Example 2:**\n\n**Input:** arr = \\[1,1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `0 <= arr[i] <= 105`Divide the array in four parts [1 - 25%] [25 - 50 %] [50 - 75 %] [75% - 100%] The answer should be in one of the ends of the intervals. In order to check which is element is the answer we can count the frequency with binarySearch.",
          "output": "def shortest_distance(distance, start, destination):\n    total_distance = sum(distance)\n    clockwise_distance = sum(distance[start:destination])\n    \n    return min(clockwise_distance, total_distance - clockwise_distance)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list.\n\nThe interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`.\n\nReturn _the number of remaining intervals_.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[1,4\\],\\[3,6\\],\\[2,8\\]\\]\n**Output:** 2\n**Explanation:** Interval \\[3,6\\] is covered by \\[2,8\\], therefore it is removed.\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[1,4\\],\\[2,3\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 1000`\n*   `intervals[i].length == 2`\n*   `0 <= li < ri <= 105`\n*   All the given intervals are **unique**.How to check if an interval is covered by another? Compare each interval to all others and check if it is covered by any interval.",
          "output": "def maximum_sum(arr):\n    n = len(arr)\n    sum_without_deletion = [0] * n\n    sum_with_deletion = [0] * n\n    sum_without_deletion[0] = arr[0]\n    sum_with_deletion[0] = 0\n    max_sum = arr[0]\n\n    for i in range(1, n):\n        sum_without_deletion[i] = max(arr[i], sum_without_deletion[i - 1] + arr[i])\n        sum_with_deletion[i] = max(sum_with_deletion[i - 1] + arr[i], sum_without_deletion[i - 1])\n        max_sum = max(max_sum, max(sum_without_deletion[i], sum_with_deletion[i]))\n    return max_sum\n"
     },
     {
          "instruction": "Write python code for this problem: We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor **strictly greater** than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true:\n\n*   `x % z == 0`,\n*   `y % z == 0`, and\n*   `z > threshold`.\n\nGiven the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them).\n\nReturn _an array_ `answer`_, where_ `answer.length == queries.length` _and_ `answer[i]` _is_ `true` _if for the_ `ith` _query, there is a path between_ `ai` _and_ `bi`_, or_ `answer[i]` _is_ `false` _if there is no path._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, threshold = 2, queries = \\[\\[1,4\\],\\[2,5\\],\\[3,6\\]\\]\n**Output:** \\[false,false,true\\]\n**Explanation:** The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, 3\n4:   1, 2, 4\n5:   1, 5\n6:   1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n\\[1,4\\]   1 is not connected to 4\n\\[2,5\\]   2 is not connected to 5\n\\[3,6\\]   3 is connected to 6 through path 3--6\n\n**Example 2:**\n\n**Input:** n = 6, threshold = 0, queries = \\[\\[4,5\\],\\[3,4\\],\\[3,2\\],\\[2,6\\],\\[1,3\\]\\]\n**Output:** \\[true,true,true,true,true\\]\n**Explanation:** The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.\n\n**Example 3:**\n\n**Input:** n = 5, threshold = 1, queries = \\[\\[4,5\\],\\[4,5\\],\\[3,2\\],\\[2,3\\],\\[3,4\\]\\]\n**Output:** \\[false,false,false,false,false\\]\n**Explanation:** Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes \\[x, y\\], and that the query \\[x, y\\] is equivalent to the query \\[y, x\\].\n\n**Constraints:**\n\n*   `2 <= n <= 104`\n*   `0 <= threshold <= n`\n*   `1 <= queries.length <= 105`\n*   `queries[i].length == 2`\n*   `1 <= ai, bi <= cities`\n*   `ai != bi`How to build the graph of the cities? Connect city i with all its multiples 2*i, 3*i, ... Answer the queries using union-find data structure.",
          "output": "def lastMoment(n, left, right):\n    max_left = max(left, default=0)\n    min_right = min(right, default=n)\n\n    return max(max_left, n - min_right)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `n x n` integer matrix `grid`, return _the minimum sum of a **falling path with non-zero shifts**_.\n\nA **falling path with non-zero shifts** is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** 13\n**Explanation:** \nThe possible falling paths are:\n\\[1,5,9\\], \\[1,5,7\\], \\[1,6,7\\], \\[1,6,8\\],\n\\[2,4,8\\], \\[2,4,9\\], \\[2,6,7\\], \\[2,6,8\\],\n\\[3,4,8\\], \\[3,4,9\\], \\[3,5,7\\], \\[3,5,9\\]\nThe falling path with the smallest sum is \\[1,5,7\\], so the answer is 13.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[7\\]\\]\n**Output:** 7\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `1 <= n <= 200`\n*   `-99 <= grid[i][j] <= 99`Use dynamic programming. Let dp[i][j] be the answer for the first i rows such that column j is chosen from row i. Use the concept of cumulative array to optimize the complexity of the solution.",
          "output": "def day_of_the_week(day, month, year):\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    if month < 3:\n        month += 12\n        year -= 1\n    k = year % 100\n    j = year // 100\n    day_of_week = (day + 13 * (month + 1) // 5 + k + k // 4 + 5 * j + j // 4) % 7\n    return days[day_of_week]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of `dominoes`, `dominoes[i] = [a, b]` is **equivalent to** `dominoes[j] = [c, d]` if and only if either (`a == c` and `b == d`), or (`a == d` and `b == c`) - that is, one domino can be rotated to be equal to another domino.\n\nReturn _the number of pairs_ `(i, j)` _for which_ `0 <= i < j < dominoes.length`_, and_ `dominoes[i]` _is **equivalent to**_ `dominoes[j]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** dominoes = \\[\\[1,2\\],\\[2,1\\],\\[3,4\\],\\[5,6\\]\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** dominoes = \\[\\[1,2\\],\\[1,2\\],\\[1,1\\],\\[1,2\\],\\[2,2\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= dominoes.length <= 4 * 104`\n*   `dominoes[i].length == 2`\n*   `1 <= dominoes[i][j] <= 9`For each domino j, find the number of dominoes you've already seen (dominoes i with i < j) that are equivalent. You can keep track of what you've seen using a hashmap.",
          "output": "def remove_duplicates(s: str) -> str:\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return \"\".join(stack)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `arr` of positive integers, consider all binary trees such that:\n\n*   Each node has either `0` or `2` children;\n*   The values of `arr` correspond to the values of each **leaf** in an in-order traversal of the tree.\n*   The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.\n\nAmong all possible binary trees considered, return _the smallest possible sum of the values of each non-leaf node_. It is guaranteed this sum fits into a **32-bit** integer.\n\nA node is a **leaf** if and only if it has zero children.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[6,2,4\\]\n**Output:** 32\n**Explanation:** There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.\n\n**Example 2:**\n\n**Input:** arr = \\[4,11\\]\n**Output:** 44\n\n**Constraints:**\n\n*   `2 <= arr.length <= 40`\n*   `1 <= arr[i] <= 15`\n*   It is guaranteed that the answer fits into a **32-bit** signed integer (i.e., it is less than 231).Do a DP, where dp(i, j) is the answer for the subarray arr[i]..arr[j]. For each possible way to partition the subarray i <= k < j, the answer is max(arr[i]..arr[k]) * max(arr[k+1]..arr[j]) + dp(i, k) + dp(k+1, j).",
          "output": "import heapq\n\ndef lastStoneWeight(stones):\n    stones = [-stone for stone in stones]\n    heapq.heapify(stones)\n    while len(stones) > 1:\n        y = -heapq.heappop(stones)\n        x = -heapq.heappop(stones)\n        if x != y:\n            heapq.heappush(stones, -(y - x))\n    return -stones[0] if stones else 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`, the number of nodes in a directed graph where the nodes are labeled from `0` to `n - 1`. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.\n\nYou are given two arrays `redEdges` and `blueEdges` where:\n\n*   `redEdges[i] = [ai, bi]` indicates that there is a directed red edge from node `ai` to node `bi` in the graph, and\n*   `blueEdges[j] = [uj, vj]` indicates that there is a directed blue edge from node `uj` to node `vj` in the graph.\n\nReturn an array `answer` of length `n`, where each `answer[x]` is the length of the shortest path from node `0` to node `x` such that the edge colors alternate along the path, or `-1` if such a path does not exist.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, redEdges = \\[\\[0,1\\],\\[1,2\\]\\], blueEdges = \\[\\]\n**Output:** \\[0,1,-1\\]\n\n**Example 2:**\n\n**Input:** n = 3, redEdges = \\[\\[0,1\\]\\], blueEdges = \\[\\[2,1\\]\\]\n**Output:** \\[0,1,-1\\]\n\n**Constraints:**\n\n*   `1 <= n <= 100`\n*   `0 <= redEdges.length, blueEdges.length <= 400`\n*   `redEdges[i].length == blueEdges[j].length == 2`\n*   `0 <= ai, bi, uj, vj < n`Do a breadth-first search, where the \"nodes\" are actually (Node, color of last edge taken).",
          "output": "def longestStrChain(words):\n    words.sort(key=lambda x: len(x))\n    dp = {}\n\n    max_len = 0\n    for word in words:\n        for i in range(len(word)):\n            pre = word[:i] + word[i + 1:]\n            dp[word] = max(dp.get(word, 0), dp.get(pre, 0) + 1)\n        max_len = max(max_len, dp[word])\n\n    return max_len\n"
     },
     {
          "instruction": "Write python code for this problem: Given two arrays of integers with equal lengths, return the maximum value of:\n\n`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`\n\nwhere the maximum is taken over all `0 <= i, j < arr1.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr1 = \\[1,2,3,4\\], arr2 = \\[-1,4,5,6\\]\n**Output:** 13\n\n**Example 2:**\n\n**Input:** arr1 = \\[1,-2,-5,0,10\\], arr2 = \\[0,-2,-1,-7,-4\\]\n**Output:** 20\n\n**Constraints:**\n\n*   `2 <= arr1.length == arr2.length <= 40000`\n*   `-10^6 <= arr1[i], arr2[i] <= 10^6`Use the idea that abs(A) + abs(B) = max(A+B, A-B, -A+B, -A-B).",
          "output": "def maxAbsValExpr(arr1, arr2):\n    result = 0\n    max_sum = [float('-inf')] * 4\n\n    for i in range(len(arr1)):\n        max_sum[0] = max(max_sum[0], arr1[i] + arr2[i] + i)\n        max_sum[1] = max(max_sum[1], arr1[i] - arr2[i] + i)\n        max_sum[2] = max(max_sum[2], -arr1[i] + arr2[i] + i)\n        max_sum[3] = max(max_sum[3], -arr1[i] - arr2[i] + i)\n\n    for i in range(len(arr1)):\n        result = max(result, max_sum[0] - arr1[i] - arr2[i] - i)\n        result = max(result, max_sum[1] - arr1[i] + arr2[i] - i)\n        result = max(result, max_sum[2] + arr1[i] - arr2[i] - i)\n        result = max(result, max_sum[3] + arr1[i] + arr2[i] - i)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`.\n\nAfter doing so, return the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[17,18,5,4,6,1\\]\n**Output:** \\[18,6,6,6,1,-1\\]\n**Explanation:** \n- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n- index 5 --> there are no elements to the right of index 5, so we put -1.\n\n**Example 2:**\n\n**Input:** arr = \\[400\\]\n**Output:** \\[-1\\]\n**Explanation:** There are no elements to the right of index 0.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `1 <= arr[i] <= 105`Loop through the array starting from the end. Keep the maximum value seen so far.",
          "output": "def kConcatenationMaxSum(arr, k):\n    M = 10**9 + 7\n    s = sum(arr)\n    max_sum = max_ending_here = 0\n    for i in range(len(arr) * min(2, k)):\n        max_ending_here = max(arr[i % len(arr)], max_ending_here + arr[i % len(arr)])\n        max_sum = max(max_sum, max_ending_here)\n    return 0 if k == 1 else (((max_sum - max_ending_here) % M) * (k - 2) % M + max_ending_here) % M\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.\n\nIn case of a tie, return the minimum such integer.\n\nNotice that the answer is not neccesarilly a number from `arr`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[4,9,3\\], target = 10\n**Output:** 3\n**Explanation:** When using 3 arr converts to \\[3, 3, 3\\] which sums 9 and that's the optimal answer.\n\n**Example 2:**\n\n**Input:** arr = \\[2,3,5\\], target = 10\n**Output:** 5\n\n**Example 3:**\n\n**Input:** arr = \\[60864,25176,27249,21296,20204\\], target = 56803\n**Output:** 11361\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `1 <= arr[i], target <= 105`If you draw a graph with the value on one axis and the absolute difference between the target and the array sum, what will you get? That graph is uni-modal. Use ternary search on that graph to find the best value.",
          "output": "from collections import defaultdict\n\ndef criticalConnections(n, connections):\n    graph = defaultdict(list)\n    for u, v in connections:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    ans = []\n    low, disc = [-1] * n, [-1] * n\n    time = [0]\n\n    def dfs(u, parent):\n        low[u] = disc[u] = time[0]\n        time[0] += 1\n        for v in graph[u]:\n            if v == parent:\n                continue\n            if disc[v] == -1:\n                dfs(v, u)\n                low[u] = min(low[u], low[v])\n                if low[v] > disc[u]:\n                    ans.append([u, v])\n            else:\n                low[u] = min(low[u], disc[v])\n\n    dfs(0, -1)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: _(This problem is an **interactive problem**.)_\n\nEach ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship.\n\nYou have a function `Sea.hasShips(topRight, bottomLeft)` which takes two points as arguments and returns `true` If there is at least one ship in the rectangle represented by the two points, including on the boundary.\n\nGiven two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are **at most 10 ships** in that rectangle.\n\nSubmissions making **more than 400 calls** to `hasShips` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\n**Example :**\n\n**Input:** \nships = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[5,5\\]\\], topRight = \\[4,4\\], bottomLeft = \\[0,0\\]\n**Output:** 3\n**Explanation:** From \\[0,0\\] to \\[4,4\\] we can count 3 ships within the range.\n\n**Example 2:**\n\n**Input:** ans = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\], topRight = \\[1000,1000\\], bottomLeft = \\[0,0\\]\n**Output:** 3\n\n**Constraints:**\n\n*   On the input `ships` is only given to initialize the map internally. You must solve this problem \"blindfolded \". In other words, you must find the answer using the given `hasShips` API, without knowing the `ships` position.\n*   `0 <= bottomLeft[0] <= topRight[0] <= 1000`\n*   `0 <= bottomLeft[1] <= topRight[1] <= 1000`\n*   `topRight != bottomLeft",
          "input": "`Use divide and conquer technique. Divide the query rectangle into 4 rectangles. Use recursion to continue with the rectangles that has ships only.",
          "output": "from datetime import datetime\n\ndef countDaysBetweenDates(date1, date2):\n    d1 = datetime.strptime(date1, \"%Y-%m-%d\")\n    d2 = datetime.strptime(date2, \"%Y-%m-%d\")\n    return abs((d2 - d1).days)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character `'S'`.\n\nYou need to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\n\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, **taken modulo `10^9 + 7`**.\n\nIn case there is no path, return `[0, 0]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\"E23\",\"2X2\",\"12S\"\\]\n**Output:** \\[7,1\\]\n\n**Example 2:**\n\n**Input:** board = \\[\"E12\",\"1X1\",\"21S\"\\]\n**Output:** \\[4,2\\]\n\n**Example 3:**\n\n**Input:** board = \\[\"E11\",\"XXX\",\"11S\"\\]\n**Output:** \\[0,0\\]\n\n**Constraints:**\n\n*   `2 <= board.length == board[i].length <= 100`Use dynamic programming to find the path with the max score. Use another dynamic programming array to count the number of paths with max score.",
          "output": "from typing import List\n\nMOD = 10**9 + 7\n\ndef pathsWithMaxScore(board: List[str]) -> List[int]:\n    n = len(board)\n    dp = [[0] * n for _ in range(n)]\n    cnt = [[0] * n for _ in range(n)]\n\n    board[0] = list(board[0])\n    board[0][0] = '0'\n    board[n-1] = list(board[n-1])\n    board[n-1][n-1] = '0'\n    cnt[n-1][n-1] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if board[i][j] != 'X':\n                neighbors = [(i-1, j), (i, j-1), (i-1, j-1)]\n                for x, y in neighbors:\n                    if x >= 0 and y >= 0:\n                        if dp[i][j] < dp[x][y] + int(board[i][j]):\n                            dp[i][j] = dp[x][y] + int(board[i][j])\n                            cnt[i][j] = cnt[x][y]\n                        elif dp[i][j] == dp[x][y] + int(board[i][j]):\n                            cnt[i][j] = (cnt[i][j] + cnt[x][y]) % MOD\n\n    return [dp[0][0], cnt[0][0]]\n"
     },
     {
          "instruction": "Write python code for this problem: The Tribonacci sequence Tn is defined as follows:\n\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n\nGiven `n`, return the value of Tn.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:** 4\n**Explanation:**\nT\\_3 = 0 + 1 + 1 = 2\nT\\_4 = 1 + 1 + 2 = 4\n\n**Example 2:**\n\n**Input:** n = 25\n**Output:** 1389537\n\n**Constraints:**\n\n*   `0 <= n <= 37`\n*   The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`.Make an array F of length 38, and set F[0] = 0, F[1] = F[2] = 1. Now write a loop where you set F[n+3] = F[n] + F[n+1] + F[n+2], and return F[n].",
          "output": "def height_checker(heights):\n    expected = sorted(heights)\n    count = 0\n    for i in range(len(heights)):\n        if heights[i] != expected[i]:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`.\n\nHere, `board = [ \"abcde \", \"fghij \", \"klmno \", \"pqrst \", \"uvwxy \", \"z \"]`, as shown in the diagram below.\n\nWe may make the following moves:\n\n*   `'U'` moves our position up one row, if the position exists on the board;\n*   `'D'` moves our position down one row, if the position exists on the board;\n*   `'L'` moves our position left one column, if the position exists on the board;\n*   `'R'` moves our position right one column, if the position exists on the board;\n*   `'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.\n\n(Here, the only positions that exist on the board are positions with letters on them.)\n\nReturn a sequence of moves that makes our answer equal to `target` in the minimum number of moves. You may return any path that does so.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = \"leet\"\n**Output:** \"DDR!UURRR!!DDD!\"\n\n**Example 2:**\n\n**Input:** target = \"code\"\n**Output:** \"RR!DDRR!UUL!R!\"\n\n**Constraints:**\n\n*   `1 <= target.length <= 100`\n*   `target` consists only of English lowercase letters.Create a hashmap from letter to position on the board. Now for each letter, try moving there in steps, where at each step you check if it is inside the boundaries of the board.",
          "output": "def maxSatisfied(customers, grumpy, minutes):\n    total, max_increase, window_increase = 0, 0, 0\n    i, j = 0, 0\n    while i < len(customers):\n        if i - j == minutes:\n            window_increase -= customers[j] * grumpy[j]\n            j += 1\n        window_increase += customers[i] * grumpy[i]\n        total += customers[i] * (1 - grumpy[i])\n        max_increase = max(max_increase, window_increase)\n        i += 1\n    return total + max_increase\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest **square** subgrid that has all `1`s on its **border**, or `0` if such a subgrid doesn't exist in the `grid`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** 9\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,0,0\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= grid.length <= 100`\n*   `1 <= grid[0].length <= 100`\n*   `grid[i][j]` is `0` or `1`For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming. Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1).",
          "output": "def prev_perm_opt1(arr):\n    n = len(arr)\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            j = i + 1\n            while j < n and arr[j] < arr[i]:\n                j += 1\n            arr[i], arr[j - 1] = arr[j - 1], arr[i]\n            return arr\n    return arr\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob continue their games with piles of stones. There are a number of piles **arranged in a row**, and each pile has a positive integer number of stones `piles[i]`. The objective of the game is to end with the most stones.\n\nAlice and Bob take turns, with Alice starting first. Initially, `M = 1`.\n\nOn each player's turn, that player can take **all the stones** in the **first** `X` remaining piles, where `1 <= X <= 2M`. Then, we set `M = max(M, X)`.\n\nThe game continues until all the stones have been taken.\n\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice can get.\n\n",
          "input": "**Example 1:**\n\n**Input:** piles = \\[2,7,9,4,4\\]\n**Output:** 10\n**Explanation:**  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. \n\n**Example 2:**\n\n**Input:** piles = \\[1,2,3,4,5,100\\]\n**Output:** 104\n\n**Constraints:**\n\n*   `1 <= piles.length <= 100`\n*   `1 <= piles[i] <= 104`Use dynamic programming: the states are (i, m) for the answer of piles[i:] and that given m.",
          "output": "from heapq import heappush, heappop\n\ndef rearrange_barcodes(barcodes):\n    count = {}\n    for barcode in barcodes:\n        if barcode not in count:\n            count[barcode] = 0\n        count[barcode] += 1\n\n    pq = []\n    for key, value in count.items():\n        heappush(pq, (-value, key))\n\n    idx = 0\n    while pq:\n        curr = heappop(pq)\n        while curr[0] < 0:\n            barcodes[idx] = curr[1]\n            curr = (curr[0] + 1, curr[1])\n            idx += 2\n            if idx >= len(barcodes):\n                idx = 1\n    return barcodes\n"
     },
     {
          "instruction": "Write python code for this problem: We are given a list `nums` of integers representing a list compressed with run-length encoding.\n\nConsider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`). For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\n\nReturn the decompressed list.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** \\[2,4,4,4\\]\n**Explanation:** The first pair \\[1,2\\] means we have freq = 1 and val = 2 so we generate the array \\[2\\].\nThe second pair \\[3,4\\] means we have freq = 3 and val = 4 so we generate \\[4,4,4\\].\nAt the end the concatenation \\[2\\] + \\[4,4,4\\] is \\[2,4,4,4\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,2,3\\]\n**Output:** \\[1,3,3\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 100`\n*   `nums.length % 2 == 0`\n*   `1 <= nums[i] <= 100`Decompress the given array by repeating nums[2*i+1] a number of times equal to nums[2*i].",
          "output": "MOD = 10**9 + 7\n\ndef add_rooms(idx, children, memo):\n    if not children[idx]:\n        return 1\n    if memo[idx] != -1:\n        return memo[idx]\n\n    res = 1\n    cnt = 0\n    for child in children[idx]:\n        cnt += 1\n        res = (res * add_rooms(child, children, memo)) % MOD\n    \n    for i in range(2, cnt + 1):\n        res = (res * i) % MOD\n    \n    memo[idx] = res\n    return res\n\ndef num_of_ways(prev_room):\n    n = len(prev_room)\n    children = [[] for _ in range(n)]\n    for i in range(1, n):\n        children[prev_room[i]].append(i)\n\n    memo = [-1] * n\n    return add_rooms(0, children, memo)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `m x n` matrix `mat` and an integer `k`, return _a matrix_ `answer` _where each_ `answer[i][j]` _is the sum of all elements_ `mat[r][c]` _for_:\n\n*   `i - k <= r <= i + k,`\n*   `j - k <= c <= j + k`, and\n*   `(r, c)` is a valid position in the matrix.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 1\n**Output:** \\[\\[12,21,16\\],\\[27,45,33\\],\\[24,39,28\\]\\]\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 2\n**Output:** \\[\\[45,45,45\\],\\[45,45,45\\],\\[45,45,45\\]\\]\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n, k <= 100`\n*   `1 <= mat[i][j] <= 100`How to calculate the required sum for a cell (i,j) fast ? Use the concept of cumulative sum array. Create a cumulative sum matrix where dp[i][j] is the sum of all cells in the rectangle from (0,0) to (i,j), use inclusion-exclusion idea.",
          "output": "def matrix_block_sum(mat, k):\n    m, n = len(mat), len(mat[0])\n    answer = [[0 for _ in range(n)] for _ in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            for r in range(max(0, i - k), min(m, i + k + 1)):\n                for c in range(max(0, j - k), min(n, j + k + 1)):\n                    answer[i][j] += mat[r][c]\n                    \n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the sum of values of nodes with an **even-valued grandparent**_. If there are no nodes with an **even-valued grandparent**, return `0`.\n\nA **grandparent** of a node is the parent of its parent if it exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5\\]\n**Output:** 18\n**Explanation:** The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `1 <= Node.val <= 100`Traverse the tree keeping the parent and the grandparent. If the grandparent of the current node is even-valued, add the value of this node to the answer.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef sumEvenGrandparent(root, parent=None, grandparent=None):\n    if root is None:\n        return 0\n    sum = root.val if grandparent and grandparent.val % 2 == 0 else 0\n    return sum + sumEvenGrandparent(root.left, root, parent) + sumEvenGrandparent(root.right, root, parent)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of integers, a _move_ consists of choosing any element and **decreasing it by 1**.\n\nAn array `A` is a _zigzag array_ if either:\n\n*   Every even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`\n*   OR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`\n\nReturn the minimum number of moves to transform the given array `nums` into a zigzag array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 2\n**Explanation:** We can decrease 2 to 0 or 3 to 1.\n\n**Example 2:**\n\n**Input:** nums = \\[9,6,1,6,2\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`Do each case (even indexed is greater, odd indexed is greater) separately. In say the even case, you should decrease each even-indexed element until it is lower than its immediate neighbors.",
          "output": "def movesToMakeZigzag(nums):\n    even_moves, odd_moves = 0, 0\n    for i in range(len(nums)):\n        left = nums[i - 1] if i > 0 else 1001\n        right = nums[i + 1] if i < len(nums) - 1 else 1001\n        min_value = min(left, right)\n        if nums[i] >= min_value:\n            if i % 2 == 0:\n                even_moves += nums[i] - min_value + 1\n            else:\n                odd_moves += nums[i] - min_value + 1\n    return min(even_moves, odd_moves)\n"
     },
     {
          "instruction": "Write python code for this problem: Two players play a turn based game on a binary tree. We are given the `root` of this binary tree, and the number of nodes `n` in the tree. `n` is odd, and each node has a distinct value from `1` to `n`.\n\nInitially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`. The first player colors the node with value `x` red, and the second player colors the node with value `y` blue.\n\nThen, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an **uncolored** neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\n\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\n\nYou are the second player. If it is possible to choose such a `y` to ensure you win the game, return `true`. If it is not possible, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,6,7,8,9,10,11\\], n = 11, x = 3\n**Output:** true\n**Explanation:** The second player can choose the node with value 2.\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3\\], n = 3, x = 1\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is `n`.\n*   `1 <= x <= n <= 100`\n*   `n` is odd.\n*   1 <= Node.val <= n\n*   All the values of the tree are **unique**.The best move y must be immediately adjacent to x, since it locks out that subtree. Can you count each of (up to) 3 different subtrees neighboring x?",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef btree_game_winning_move(root: TreeNode, n: int, x: int) -> bool:\n    def count_nodes(node: TreeNode) -> int:\n        if not node:\n            return 0\n        return count_nodes(node.left) + count_nodes(node.right) + 1\n\n    def find_node(node: TreeNode, x: int) -> TreeNode:\n        if not node:\n            return None\n        if node.val == x:\n            return node\n        left_search = find_node(node.left, x)\n        if left_search:\n            return left_search\n        return find_node(node.right, x)\n\n    x_node = find_node(root, x)\n    left_nodes = count_nodes(x_node.left)\n    right_nodes = count_nodes(x_node.right)\n    parent_nodes = n - left_nodes - right_nodes - 1\n\n    return max(max(left_nodes, right_nodes), parent_nodes) > n // 2\n"
     },
     {
          "instruction": "Write python code for this problem: Implement a SnapshotArray that supports the following interface:\n\n*   `SnapshotArray(int length)` initializes an array-like data structure with the given length. **Initially, each element equals 0**.\n*   `void set(index, val)` sets the element at the given `index` to be equal to `val`.\n*   `int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.\n*   `int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`\n\n",
          "input": "**Example 1:**\n\n**Input:** \\[ \"SnapshotArray \", \"set \", \"snap \", \"set \", \"get \"\\]\n\\[\\[3\\],\\[0,5\\],\\[\\],\\[0,6\\],\\[0,0\\]\\]\n**Output:** \\[null,null,0,null,5\\]\n**Explanation:** \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array\\[0\\] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap\\_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array\\[0\\] with snap\\_id = 0, return 5\n\n**Constraints:**\n\n*   `1 <= length <= 5 * 104`\n*   `0 <= index < length`\n*   `0 <= val <= 109`\n*   `0 <= snap_id <` (the total number of times we call `snap()`)\n*   At most `5 * 104` calls will be made to `set`, `snap`, and `get`.Use a list of lists, adding both the element and the snap_id to each index.",
          "output": "def gcd_of_strings(str1: str, str2: str) -> str:\n    if str1 + str2 != str2 + str1:\n        return ''\n    gcd = lambda a, b: a if not b else gcd(b, a % b)\n    return str1[:gcd(len(str1), len(str2))]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `text1` and `text2`, return _the length of their longest **common subsequence**._ If there is no **common subsequence**, return `0`.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n*   For example, `\"ace \"` is a subsequence of `\"abcde \"`.\n\nA **common subsequence** of two strings is a subsequence that is common to both strings.\n\n",
          "input": "**Example 1:**\n\n**Input:** text1 =  \"abcde \", text2 =  \"ace \" \n**Output:** 3  \n**Explanation:** The longest common subsequence is  \"ace \" and its length is 3.\n\n**Example 2:**\n\n**Input:** text1 =  \"abc \", text2 =  \"abc \"\n**Output:** 3\n**Explanation:** The longest common subsequence is  \"abc \" and its length is 3.\n\n**Example 3:**\n\n**Input:** text1 =  \"abc \", text2 =  \"def \"\n**Output:** 0\n**Explanation:** There is no such common subsequence, so the result is 0.\n\n**Constraints:**\n\n*   `1 <= text1.length, text2.length <= 1000`\n*   `text1` and `text2` consist of only lowercase English characters.Try dynamic programming. \r\nDP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j]. DP[i][j] = DP[i - 1][j - 1] + 1 , if text1[i] == text2[j]\r\nDP[i][j] = max(DP[i - 1][j], DP[i][j - 1]) , otherwise",
          "output": "def longestCommonSubsequence(text1: str, text2: str) -> int:\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that:\n\n*   `subtexti` is a **non-empty** string.\n*   The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`).\n*   `subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`).\n\nReturn the largest possible value of `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"ghiabcdefhelloadamhelloabcdefghi \"\n**Output:** 7\n**Explanation:** We can split the string on  \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi) \".\n\n**Example 2:**\n\n**Input:** text =  \"merchant \"\n**Output:** 1\n**Explanation:** We can split the string on  \"(merchant) \".\n\n**Example 3:**\n\n**Input:** text =  \"antaprezatepzapreanta \"\n**Output:** 11\n**Explanation:** We can split the string on  \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a) \".\n\n**Constraints:**\n\n*   `1 <= text.length <= 1000`\n*   `text` consists only of lowercase English characters.Using a rolling hash, we can quickly check whether two strings are equal. Use that as the basis of a dp.",
          "output": "from collections import defaultdict\n\ndef maxEqualRowsAfterFlips(matrix):\n    count = defaultdict(int)\n    for row in matrix:\n        row_str = \"\".join(str(row[0] ^ val) for val in row)\n        count[row_str] += 1\n    return max(count.values())\n"
     },
     {
          "instruction": "Write python code for this problem: Given a palindromic string of lowercase English letters `palindrome`, replace **exactly one** character with any lowercase English letter so that the resulting string is **not** a palindrome and that it is the **lexicographically smallest** one possible.\n\nReturn _the resulting string. If there is no way to replace a character to make it not a palindrome, return an **empty string**._\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `\"abcc \"` is lexicographically smaller than `\"abcd \"` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** palindrome =  \"abccba \"\n**Output:**  \"aaccba \"\n**Explanation:** There are many ways to make  \"abccba \" not a palindrome, such as  \"zbccba \",  \"aaccba \", and  \"abacba \".\nOf all the ways,  \"aaccba \" is the lexicographically smallest.\n\n**Example 2:**\n\n**Input:** palindrome =  \"a \"\n**Output:**  \" \"\n**Explanation:** There is no way to replace a single character to make  \"a \" not a palindrome, so return an empty string.\n\n**Constraints:**\n\n*   `1 <= palindrome.length <= 1000`\n*   `palindrome` consists of only lowercase English letters.How to detect if there is impossible to perform the replacement? Only when the length = 1. Change the first non 'a' character to 'a'. What if the string has only 'a'? Change the last character to 'b'.",
          "output": "def breakPalindrome(palindrome: str) -> str:\n    length = len(palindrome)\n    if length == 1:\n        return \"\"\n    \n    chars = list(palindrome)\n    for i in range(length // 2):\n        if chars[i] != 'a':\n            chars[i] = 'a'\n            return \"\".join(chars)\n    \n    chars[length - 1] = 'b'\n    return \"\".join(chars)\n"
     },
     {
          "instruction": "Write python code for this problem: A **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the **matrix diagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.\n\nGiven an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in ascending order and return _the resulting matrix_.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[3,3,1,1\\],\\[2,2,1,2\\],\\[1,1,1,2\\]\\]\n**Output:** \\[\\[1,1,1,1\\],\\[1,2,2,2\\],\\[1,2,3,3\\]\\]\n\n**Example 2:**\n\n**Input:** mat = \\[\\[11,25,66,1,69,7\\],\\[23,55,17,45,15,52\\],\\[75,31,36,44,58,8\\],\\[22,27,33,25,68,4\\],\\[84,28,14,11,5,50\\]\\]\n**Output:** \\[\\[5,17,4,1,52,7\\],\\[11,11,25,45,8,69\\],\\[14,23,25,44,58,15\\],\\[22,27,31,36,50,66\\],\\[84,28,75,33,55,68\\]\\]\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 100`\n*   `1 <= mat[i][j] <= 100`Use a data structure to store all values of each diagonal. How to index the data structure with the id of the diagonal? All cells in the same diagonal (i,j) have the same difference so we can get the diagonal of a cell using the difference i-j.",
          "output": "def minCostToMoveChips(position):\n    evenCount, oddCount = 0, 0\n    for i in position:\n        if i % 2 == 0:\n            evenCount += 1\n        else:\n            oddCount += 1\n    return min(evenCount, oddCount)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the sum of values of its deepest leaves_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,null,6,7,null,null,null,null,8\\]\n**Output:** 15\n\n**Example 2:**\n\n**Input:** root = \\[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5\\]\n**Output:** 19\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `1 <= Node.val <= 100`Traverse the tree to find the max depth. Traverse the tree again to compute the sum required.",
          "output": "def make_fancy_string(s: str) -> str:\n    result = [s[0]]\n    count = 1\n\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count < 3:\n            result.append(s[i])\n\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`.\n\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**.\n\nFind maximum possible value of the final array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,1,5,4\\]\n**Output:** 10\n**Explanation:** By reversing the subarray \\[3,1,5\\] the array becomes \\[2,5,1,3,4\\] whose value is 10.\n\n**Example 2:**\n\n**Input:** nums = \\[2,4,9,24,2,1,10\\]\n**Output:** 68\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-105 <= nums[i] <= 105`What's the score after reversing a sub-array [L, R] ? It's the score without reversing it + abs(a[R] - a[L-1]) + abs(a[L] - a[R+1]) - abs(a[L] - a[L-1]) - abs(a[R] - a[R+1]) How to maximize that formula given that abs(x - y) = max(x - y, y - x) ? This can be written as max(max(a[R] - a[L - 1], a[L - 1] - a[R]) + max(a[R + 1] - a[L], a[L] - a[R + 1]) - value(L) - value(R + 1)) over all L < R where value(i) = abs(a[i] - a[i-1]) This can be divided into 4 cases.",
          "output": "def longestSubsequence(arr, difference):\n    dp = {}\n    maxLength = 0\n    for num in arr:\n        dp[num] = dp.get(num - difference, 0) + 1\n        maxLength = max(maxLength, dp[num])\n    return maxLength\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, replace each element with its rank.\n\nThe rank represents how large the element is. The rank has the following rules:\n\n*   Rank is an integer starting from 1.\n*   The larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n*   Rank should be as small as possible.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[40,10,20,30\\]\n**Output:** \\[4,1,2,3\\]\n**Explanation**: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.\n\n**Example 2:**\n\n**Input:** arr = \\[100,100,100\\]\n**Output:** \\[1,1,1\\]\n**Explanation**: Same elements share the same rank.\n\n**Example 3:**\n\n**Input:** arr = \\[37,12,28,9,100,56,80,5,12\\]\n**Output:** \\[5,3,4,2,8,6,7,1,3\\]\n\n**Constraints:**\n\n*   `0 <= arr.length <= 105`\n*   `-109 <= arr[i] <= 109`\n\n\\- Every time you are in a cell you will collect all the gold in that cell. - From your position, you can walk one step to the left, right, up, or down. - You can't visit the same cell more than once. - Never visit a cell with 0 gold. - You can start and stop collecting gold from any position in the grid that has some gold.Use a temporary array to copy the array and sort it. The rank of each element is the number of elements smaller than it in the sorted array plus one.",
          "output": "def getMaximumGold(grid):\n    m, n, max_gold = len(grid), len(grid[0]), 0\n\n    def getMaximumGoldHelper(x, y):\n        if not (0 <= x < m) or not (0 <= y < n) or grid[x][y] == 0:\n            return 0\n\n        original_gold = grid[x][y]\n        grid[x][y] = 0\n\n        max_gold = 0\n        max_gold = max(max_gold, getMaximumGoldHelper(x + 1, y))\n        max_gold = max(max_gold, getMaximumGoldHelper(x - 1, y))\n        max_gold = max(max_gold, getMaximumGoldHelper(x, y + 1))\n        max_gold = max(max_gold, getMaximumGoldHelper(x, y - 1))\n\n        grid[x][y] = original_gold\n        return max_gold + original_gold\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] != 0:\n                max_gold = max(max_gold, getMaximumGoldHelper(i, j))\n\n    return max_gold\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` `matrix`, return _a new matrix_ `answer` _where_ `answer[row][col]` _is the_ _**rank** of_ `matrix[row][col]`.\n\nThe **rank** is an **integer** that represents how large an element is compared to other elements. It is calculated using the following rules:\n\n*   The rank is an integer starting from `1`.\n*   If two elements `p` and `q` are in the **same row or column**, then:\n    *   If `p < q` then `rank(p) < rank(q)`\n    *   If `p == q` then `rank(p) == rank(q)`\n    *   If `p > q` then `rank(p) > rank(q)`\n*   The **rank** should be as **small** as possible.\n\nThe test cases are generated so that `answer` is unique under the given rules.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** \\[\\[1,2\\],\\[2,3\\]\\]\n**Explanation:**\nThe rank of matrix\\[0\\]\\[0\\] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix\\[0\\]\\[1\\] is 2 because matrix\\[0\\]\\[1\\] > matrix\\[0\\]\\[0\\] and matrix\\[0\\]\\[0\\] is rank 1.\nThe rank of matrix\\[1\\]\\[0\\] is 2 because matrix\\[1\\]\\[0\\] > matrix\\[0\\]\\[0\\] and matrix\\[0\\]\\[0\\] is rank 1.\nThe rank of matrix\\[1\\]\\[1\\] is 3 because matrix\\[1\\]\\[1\\] > matrix\\[0\\]\\[1\\], matrix\\[1\\]\\[1\\] > matrix\\[1\\]\\[0\\], and both matrix\\[0\\]\\[1\\] and matrix\\[1\\]\\[0\\] are rank 2.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[7,7\\],\\[7,7\\]\\]\n**Output:** \\[\\[1,1\\],\\[1,1\\]\\]\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[20,-21,14\\],\\[-19,4,19\\],\\[22,-47,24\\],\\[-19,4,19\\]\\]\n**Output:** \\[\\[4,2,3\\],\\[1,3,4\\],\\[5,1,6\\],\\[1,3,4\\]\\]\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 500`\n*   `-109 <= matrix[row][col] <= 109`Sort the cells by value and process them in increasing order. The rank of a cell is the maximum rank in its row and column plus one. Handle the equal cells by treating them as components using a union-find data structure.",
          "output": "def numSplits(s: str) -> int:\n    left_set, right_set = set(), set()\n    left, right = [0] * len(s), [0] * len(s)\n    count = 0\n\n    for i, char in enumerate(s):\n        left_set.add(char)\n        left[i] = len(left_set)\n\n    for i in range(len(s) - 1, 0, -1):\n        right_set.add(s[i])\n        right[i] = len(right_set)\n\n    for i in range(len(s) - 1):\n        if left[i] == right[i + 1]:\n            count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `date` representing a [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar) date formatted as `YYYY-MM-DD`, return _the day number of the year_.\n\n",
          "input": "**Example 1:**\n\n**Input:** date =  \"2019-01-09 \"\n**Output:** 9\n**Explanation:** Given date is the 9th day of the year in 2019.\n\n**Example 2:**\n\n**Input:** date =  \"2019-02-10 \"\n**Output:** 41\n\n**Constraints:**\n\n*   `date.length == 10`\n*   `date[4] == date[7] == '-'`, and all other `date[i]`'s are digits\n*   `date` represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019.Have a integer array of how many days there are per month.  February gets one extra day if its a leap year.  Then, we can manually count the ordinal as day + (number of days in months before this one).",
          "output": "def is_leap_year(year: int) -> bool:\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\ndef day_of_year(date: str) -> int:\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    year, month, day = int(date[:4]), int(date[5:7]), int(date[8:])\n\n    if is_leap_year(year):\n        days_in_month[1] = 29\n\n    return sum(days_in_month[:month-1]) + day\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `text`. You can swap two of the characters in the `text`.\n\nReturn _the length of the longest substring with repeated characters_.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"ababa \"\n**Output:** 3\n**Explanation:** We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is  \"aaa \" with length 3.\n\n**Example 2:**\n\n**Input:** text =  \"aaabaaa \"\n**Output:** 6\n**Explanation:** Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring  \"aaaaaa \" with length 6.\n\n**Example 3:**\n\n**Input:** text =  \"aaaaa \"\n**Output:** 5\n**Explanation:** No need to swap, longest repeated character substring is  \"aaaaa \" with length is 5.\n\n**Constraints:**\n\n*   `1 <= text.length <= 2 * 104`\n*   `text` consist of lowercase English characters only.There are two cases:  a block of characters, or two blocks of characters between one different character. \r\n By keeping a run-length encoded version of the string, we can easily check these cases.",
          "output": "def find_third_words(text, first, second):\n    words = text.split()\n    result = []\n    \n    for i in range(len(words) - 2):\n        if words[i] == first and words[i + 1] == second:\n            result.append(words[i + 2])\n            \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure that efficiently finds the **majority element** of a given subarray.\n\nThe **majority element** of a subarray is an element that occurs `threshold` times or more in the subarray.\n\nImplementing the `MajorityChecker` class:\n\n*   `MajorityChecker(int[] arr)` Initializes the instance of the class with the given array `arr`.\n*   `int query(int left, int right, int threshold)` returns the element in the subarray `arr[left...right]` that occurs at least `threshold` times, or `-1` if no such element exists.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MajorityChecker \",  \"query \",  \"query \",  \"query \"\\]\n\\[\\[\\[1, 1, 2, 2, 1, 1\\]\\], \\[0, 5, 4\\], \\[0, 3, 3\\], \\[2, 3, 2\\]\\]\n**Output**\n\\[null, 1, -1, 2\\]\n\n**Explanation**\nMajorityChecker majorityChecker = new MajorityChecker(\\[1, 1, 2, 2, 1, 1\\]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2\n\n**Constraints:**\n\n*   `1 <= arr.length <= 2 * 104`\n*   `1 <= arr[i] <= 2 * 104`\n*   `0 <= left <= right < arr.length`\n*   `threshold <= right - left + 1`\n*   `2 * threshold > right - left + 1`\n*   At most `104` calls will be made to `query`.What's special about a majority element ? A majority element appears more than half the length of the array number of times. If we tried a random index of the array, what's the probability that this index has a majority element ? It's more than 50% if that array has a majority element. Try a random index for a proper number of times so that the probability of not finding the answer tends to zero.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_insufficient(node, limit, current_sum):\n    if not node:\n        return True\n\n    current_sum += node.val\n    if not node.left and not node.right:\n        return current_sum < limit\n\n    left_insufficient = is_insufficient(node.left, limit, current_sum)\n    right_insufficient = is_insufficient(node.right, limit, current_sum)\n\n    if left_insufficient:\n        node.left = None\n    if right_insufficient:\n        node.right = None\n\n    return left_insufficient and right_insufficient\n\ndef sufficient_subset(root, limit):\n    if is_insufficient(root, limit, 0):\n        return None\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` dice, and each die has `k` faces numbered from `1` to `k`.\n\nGiven three integers `n`, `k`, and `target`, return _the number of possible ways (out of the_ `kn` _total ways)_ _to roll the dice, so the sum of the face-up numbers equals_ `target`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1, k = 6, target = 3\n**Output:** 1\n**Explanation:** You throw one die with 6 faces.\nThere is only one way to get a sum of 3.\n\n**Example 2:**\n\n**Input:** n = 2, k = 6, target = 7\n**Output:** 6\n**Explanation:** You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.\n\n**Example 3:**\n\n**Input:** n = 30, k = 30, target = 500\n**Output:** 222616187\n**Explanation:** The answer must be returned modulo 109 + 7.\n\n**Constraints:**\n\n*   `1 <= n, k <= 30`\n*   `1 <= target <= 1000`Use dynamic programming.  The states are how many dice are remaining, and what sum total you have rolled so far.",
          "output": "def numRollsToTarget(n, k, target):\n    MOD = 1000000007\n    dp = [[0 for _ in range(target + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, target + 1):\n            for d in range(1, k + 1):\n                if j - d >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - d]) % MOD\n    return dp[n][target]\n"
     },
     {
          "instruction": "Write python code for this problem: There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\n\nGiven a string `text` of words separated by a single space (no leading or trailing spaces) and a string `brokenLetters` of all **distinct** letter keys that are broken, return _the **number of words** in_ `text` _you can fully type using this keyboard_.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"hello world \", brokenLetters =  \"ad \"\n**Output:** 1\n**Explanation:** We cannot type  \"world \" because the 'd' key is broken.\n\n**Example 2:**\n\n**Input:** text =  \"leet code \", brokenLetters =  \"lt \"\n**Output:** 1\n**Explanation:** We cannot type  \"leet \" because the 'l' and 't' keys are broken.\n\n**Example 3:**\n\n**Input:** text =  \"leet code \", brokenLetters =  \"e \"\n**Output:** 0\n**Explanation:** We cannot type either word because the 'e' key is broken.\n\n**Constraints:**\n\n*   `1 <= text.length <= 104`\n*   `0 <= brokenLetters.length <= 26`\n*   `text` consists of words separated by a single space without any leading or trailing spaces.\n*   Each word only consists of lowercase English letters.\n*   `brokenLetters` consists of **distinct** lowercase English letters.Check each word separately if it can be typed. A word can be typed if all its letters are not broken.",
          "output": "def min_operations(n):\n    count = 1\n    temp = 1\n\n    while temp % n != 0:\n        temp = (temp * 2) % n\n        count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.\n\nAfter doing so, return the head of the final linked list. You may return any such answer.\n\n(Note that in the examples below, all sequences are serializations of `ListNode` objects.)\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,-3,3,1\\]\n**Output:** \\[3,1\\]\n**Note:** The answer \\[1,2,1\\] would also be accepted.\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,-3,4\\]\n**Output:** \\[1,2,4\\]\n\n**Example 3:**\n\n**Input:** head = \\[1,2,3,-3,-2\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The given linked list will contain between `1` and `1000` nodes.\n*   Each node in the linked list has `-1000 <= node.val <= 1000`.Convert the linked list into an array. While you can find a non-empty subarray with sum = 0, erase it. Convert the array into a linked list.",
          "output": "from collections import deque\n\ndef shortestPathBinaryMatrix(grid):\n    n = len(grid)\n    if grid[0][0] == 1 or grid[n - 1][n - 1] == 1:\n        return -1\n    q = deque([(0, 0)])\n    dirs = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    grid[0][0] = 1\n    steps = 1\n\n    while q:\n        size = len(q)\n        for _ in range(size):\n            x, y = q.popleft()\n\n            if x == n - 1 and y == n - 1:\n                return steps\n\n            for dx, dy in dirs:\n                newX, newY = x + dx, y + dy\n\n                if 0 <= newX < n and 0 <= newY < n and grid[newX][newY] == 0:\n                    q.append((newX, newY))\n                    grid[newX][newY] = 1\n\n        steps += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You have an infinite number of stacks arranged in a row and numbered (left to right) from `0`, each of the stacks has the same maximum capacity.\n\nImplement the `DinnerPlates` class:\n\n*   `DinnerPlates(int capacity)` Initializes the object with the maximum capacity of the stacks `capacity`.\n*   `void push(int val)` Pushes the given integer `val` into the leftmost stack with a size less than `capacity`.\n*   `int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all the stacks are empty.\n*   `int popAtStack(int index)` Returns the value at the top of the stack with the given index `index` and removes it from that stack or returns `-1` if the stack with that given index is empty.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"DinnerPlates \",  \"push \",  \"push \",  \"push \",  \"push \",  \"push \",  \"popAtStack \",  \"push \",  \"push \",  \"popAtStack \",  \"popAtStack \",  \"pop \",  \"pop \",  \"pop \",  \"pop \",  \"pop \"\\]\n\\[\\[2\\], \\[1\\], \\[2\\], \\[3\\], \\[4\\], \\[5\\], \\[0\\], \\[20\\], \\[21\\], \\[0\\], \\[2\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1\\]\n\n**Explanation:** \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 2.  The stacks are now:     4\n                                                       1  3  5\n                                                       \ufe48 \ufe48 \ufe48\nD.push(20);        // The stacks are now: 20  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.push(21);        // The stacks are now: 20  4 21\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48 \nD.pop()            // Returns 5.  The stacks are now:      4\n                                                        1  3 \n                                                        \ufe48 \ufe48  \nD.pop()            // Returns 4.  The stacks are now:   1  3 \n                                                        \ufe48 \ufe48   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        \ufe48   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks.\n\n**Constraints:**\n\n*   `1 <= capacity <= 2 * 104`\n*   `1 <= val <= 2 * 104`\n*   `0 <= index <= 105`\n*   At most `2 * 105` calls will be made to `push`, `pop`, and `popAtStack`.Use a data structure to save the plate status. You may need to operate the exact index. Maintain the leftmost vacant stack and the rightmost non-empty stack. Use a list of stack to store the plate status. Use heap to maintain the leftmost and rightmost valid stack.",
          "output": "class DinnerPlates:\n\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.stacks = []\n\n    def push(self, val: int) -> None:\n        for stack in self.stacks:\n            if len(stack) < self.capacity:\n                stack.append(val)\n                return\n        self.stacks.append([val])\n\n    def pop(self) -> int:\n        while self.stacks and not self.stacks[-1]:\n            self.stacks.pop()\n        if not self.stacks:\n            return -1\n        return self.stacks[-1].pop()\n\n    def popAtStack(self, index: int) -> int:\n        if index >= len(self.stacks) or not self.stacks[index]:\n            return -1\n        return self.stacks[index].pop()\n"
     },
     {
          "instruction": "Write python code for this problem: Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links that are under the **same hostname** as `startUrl`.\n\nReturn all urls obtained by your web crawler in **any** order.\n\nYour crawler should:\n\n*   Start from the page: `startUrl`\n*   Call `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.\n*   Do not crawl the same link twice.\n*   Explore only the links that are under the **same hostname** as `startUrl`.\n\nAs shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use **http protocol** without any **port** specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.\n\nThe `HtmlParser` interface is defined as such:\n\ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given _url_.\n  public List getUrls(String url);\n}\n\nBelow are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables `urls`, `edges` and `startUrl`. Notice that you will only have access to `startUrl` in your code, while `urls` and `edges` are not directly accessible to you in code.\n\nNote: Consider the same URL with the trailing slash \"/ \" as a different URL. For example, \"http://news.yahoo.com \", and \"http://news.yahoo.com/ \" are different urls.\n\n",
          "input": "**Example 1:**\n\n**Input:**\nurls = \\[\n   \"http://news.yahoo.com \",\n   \"http://news.yahoo.com/news \",\n   \"http://news.yahoo.com/news/topics/ \",\n   \"http://news.google.com \",\n   \"http://news.yahoo.com/us \"\n\\]\nedges = \\[\\[2,0\\],\\[2,1\\],\\[3,2\\],\\[3,1\\],\\[0,4\\]\\]\nstartUrl =  \"http://news.yahoo.com/news/topics/ \"\n**Output:** \\[\n   \"http://news.yahoo.com \",\n   \"http://news.yahoo.com/news \",\n   \"http://news.yahoo.com/news/topics/ \",\n   \"http://news.yahoo.com/us \"\n\\]\n\n**Example 2:**\n\n**Input:** \nurls = \\[\n   \"http://news.yahoo.com \",\n   \"http://news.yahoo.com/news \",\n   \"http://news.yahoo.com/news/topics/ \",\n   \"http://news.google.com \"\n\\]\nedges = \\[\\[0,2\\],\\[2,1\\],\\[3,2\\],\\[3,1\\],\\[3,0\\]\\]\nstartUrl =  \"http://news.google.com \"\n**Output:** \\[ \"http://news.google.com \"\\]\n**Explanation:** The startUrl links to all other pages that do not share the same hostname.\n\n**Constraints:**\n\n*   `1 <= urls.length <= 1000`\n*   `1 <= urls[i].length <= 300`\n*   `startUrl` is one of the `urls`.\n*   Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-').\n*   The hostname may not start or end with the hyphen-minus character ('-').\n*   See: [https://en.wikipedia.org/wiki/Hostname#Restrictions\\_on\\_valid\\_hostnames](https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames)\n*   You may assume there're no duplicates in url library.Use DFS/BFS to search start from the startURL. Remember to get rid of duplicate URLs.",
          "output": "def tribonacci(n: int) -> int:\n    if n == 0: return 0\n    if n == 1 or n == 2: return 1\n    a, b, c = 0, 1, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n"
     },
     {
          "instruction": "Write python code for this problem: A transaction is possibly invalid if:\n\n*   the amount exceeds `$1000`, or;\n*   if it occurs within (and including) `60` minutes of another transaction with the **same name** in a **different city**.\n\nYou are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\n\nReturn a list of `transactions` that are possibly invalid. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** transactions = \\[ \"alice,20,800,mtv \", \"alice,50,100,beijing \"\\]\n**Output:** \\[ \"alice,20,800,mtv \", \"alice,50,100,beijing \"\\]\n**Explanation:** The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.\n\n**Example 2:**\n\n**Input:** transactions = \\[ \"alice,20,800,mtv \", \"alice,50,1200,mtv \"\\]\n**Output:** \\[ \"alice,50,1200,mtv \"\\]\n\n**Example 3:**\n\n**Input:** transactions = \\[ \"alice,20,800,mtv \", \"bob,50,1200,mtv \"\\]\n**Output:** \\[ \"bob,50,1200,mtv \"\\]\n\n**Constraints:**\n\n*   `transactions.length <= 1000`\n*   Each `transactions[i]` takes the form `\"{name},{time},{amount},{city} \"`\n*   Each `{name}` and `{city}` consist of lowercase English letters, and have lengths between `1` and `10`.\n*   Each `{time}` consist of digits, and represent an integer between `0` and `1000`.\n*   Each `{amount}` consist of digits, and represent an integer between `0` and `2000`.Split each string into four arrays. For each transaction check if it's invalid, you can do this with just a loop with help of the four arrays generated on step 1. At the end you perform O(N ^ 2) operations.",
          "output": "from typing import List\n\ndef largestValsFromLabels(values: List[int], labels: List[int], numWanted: int, useLimit: int) -> int:\n    items = sorted(zip(values, labels), reverse=True)\n    label_count = {}\n    result = 0\n    \n    for value, label in items:\n        if numWanted > 0 and label_count.get(label, 0) < useLimit:\n            result += value\n            label_count[label] = label_count.get(label, 0) + 1\n            numWanted -= 1\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Let the function `f(s)` be the **frequency of the lexicographically smallest character** in a non-empty string `s`. For example, if `s = \"dcce \"` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2.\n\nYou are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the **number of words** in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.\n\nReturn _an integer array_ `answer`_, where each_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** queries = \\[ \"cbd \"\\], words = \\[ \"zaaaz \"\\]\n**Output:** \\[1\\]\n**Explanation:** On the first query we have f( \"cbd \") = 1, f( \"zaaaz \") = 3 so f( \"cbd \") < f( \"zaaaz \").\n\n**Example 2:**\n\n**Input:** queries = \\[ \"bbb \", \"cc \"\\], words = \\[ \"a \", \"aa \", \"aaa \", \"aaaa \"\\]\n**Output:** \\[1,2\\]\n**Explanation:** On the first query only f( \"bbb \") < f( \"aaaa \"). On the second query both f( \"aaa \") and f( \"aaaa \") are both > f( \"cc \").\n\n**Constraints:**\n\n*   `1 <= queries.length <= 2000`\n*   `1 <= words.length <= 2000`\n*   `1 <= queries[i].length, words[i].length <= 10`\n*   `queries[i][j]`, `words[i][j]` consist of lowercase English letters.For each string from words calculate the leading count and store it in an array, then sort the integer array. For each string from queries calculate the leading count \"p\" and in base of the sorted array calculated on the step 1 do a binary search to count the number of items greater than \"p\".",
          "output": "def shortest_common_supersequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n\n    i, j = m, n\n    result = []\n\n    while i > 0 and j > 0:\n        if str1[i - 1] == str2[j - 1]:\n            result.append(str1[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            j -= 1\n            result.append(str2[j])\n        else:\n            i -= 1\n            result.append(str1[i])\n\n    while i > 0:\n        i -= 1\n        result.append(str1[i])\n\n    while j > 0:\n        j -= 1\n        result.append(str2[j])\n\n    return \"\".join(result[::-1])\n"
     },
     {
          "instruction": "Write python code for this problem: Write a program to count the number of days between two dates.\n\nThe two dates are given as strings, their format is `YYYY-MM-DD` as shown in the examples.\n\n",
          "input": "**Example 1:**\n\n**Input:** date1 = \"2019-06-29\", date2 = \"2019-06-30\"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** date1 = \"2020-01-15\", date2 = \"2019-12-31\"\n**Output:** 15\n\n**Constraints:**\n\n*   The given dates are valid dates between the years `1971` and `2100`.Create a function f(date) that counts the number of days from 1900-01-01 to date. How can we calculate the answer ? The answer is just |f(date1) - f(date2)|. How to construct f(date) ? For each year from 1900 to year - 1 sum up 365 or 366 in case of leap years. Then sum up for each month the number of days, consider the case when the current year is leap, finally sum up the days.",
          "output": "def maxLength(arr):\n    dp = ['']\n    maxLen = 0\n\n    for s in arr:\n        if len(set(s)) < len(s): continue\n        for i in range(len(dp) - 1, -1, -1):\n            tmp = dp[i] + s\n            if len(set(tmp)) == len(tmp):\n                dp.append(tmp)\n                maxLen = max(maxLen, len(tmp))\n                \n    return maxLen\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if **all** the given nodes form **exactly one** valid binary tree.\n\nIf node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.\n\nNote that the nodes have no values and that we only use the node numbers in this problem.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, leftChild = \\[1,-1,3,-1\\], rightChild = \\[2,-1,-1,-1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** n = 4, leftChild = \\[1,-1,3,-1\\], rightChild = \\[2,3,-1,-1\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** n = 2, leftChild = \\[1,0\\], rightChild = \\[-1,-1\\]\n**Output:** false\n\n**Constraints:**\n\n*   `n == leftChild.length == rightChild.length`\n*   `1 <= n <= 104`\n*   `-1 <= leftChild[i], rightChild[i] <= n - 1`Find the parent of each node. A valid tree must have nodes with only one parent and exactly one node with no parent.",
          "output": "def tilingRectangle(n, m):\n    if n > m:\n        n, m = m, n\n    if n == 1:\n        return m\n    if n == m:\n        return 1\n\n    res = float('inf')\n    for a in range(1, n // 2 + 1):\n        res = min(res, tilingRectangle(a, m) + tilingRectangle(n - a, m))\n\n    for b in range(1, m // 2 + 1):\n        res = min(res, tilingRectangle(n, b) + tilingRectangle(n, m - b))\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`.\n\nReturn the two integers in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 8\n**Output:** \\[3,3\\]\n**Explanation:** For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.\n\n**Example 2:**\n\n**Input:** num = 123\n**Output:** \\[5,25\\]\n\n**Example 3:**\n\n**Input:** num = 999\n**Output:** \\[40,25\\]\n\n**Constraints:**\n\n*   `1 <= num <= 10^9`Find the divisors of n+1 and n+2. To find the divisors of a number, you only need to iterate to the square root of that number.",
          "output": "def findClosestDivisors(num):\n    for i in range(int((num + 2) ** 0.5), 0, -1):\n        if (num + 1) % i == 0:\n            return [i, (num + 1) // i]\n        if (num + 2) % i == 0:\n            return [i, (num + 2) // i]\n    return []\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of digits `digits`, return _the largest multiple of **three** that can be formed by concatenating some of the given digits in **any order**_. If there is no answer return an empty string.\n\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.\n\n",
          "input": "**Example 1:**\n\n**Input:** digits = \\[8,1,9\\]\n**Output:**  \"981 \"\n\n**Example 2:**\n\n**Input:** digits = \\[8,6,7,1,0\\]\n**Output:**  \"8760 \"\n\n**Example 3:**\n\n**Input:** digits = \\[1\\]\n**Output:**  \" \"\n\n**Constraints:**\n\n*   `1 <= digits.length <= 104`\n*   `0 <= digits[i] <= 9`A number is a multiple of three if and only if its sum of digits is a multiple of three. Use dynamic programming. To find the maximum number, try to maximize the number of digits of the number. Sort the digits in descending order to find the maximum number.",
          "output": "from collections import defaultdict\n\ndef largest_multiple_of_three(digits):\n    digits.sort(reverse=True)\n    sum_digits = sum(digits)\n\n    if sum_digits % 3 == 0:\n        return '0' if digits[-1] == 0 else ''.join(map(str, digits))\n\n    mod = defaultdict(list)\n    for digit in digits:\n        mod[digit % 3].append(digit)\n\n    if sum_digits % 3 == 1:\n        if mod[1]:\n            mod[1].pop()\n        else:\n            mod[2].pop(), mod[2].pop()\n    else:\n        if mod[2]:\n            mod[2].pop()\n        else:\n            mod[1].pop(), mod[1].pop()\n\n    result = \"\".join(str(digit) for value in mod.values() for digit in value)\n    result = \"\".join(sorted(result, reverse=True))\n\n    return '0' if not result or result[0] == '0' else result\n"
     },
     {
          "instruction": "Write python code for this problem: Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)\n\n_(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)_\n\nSince the answer may be large, return the answer **modulo `10^9 + 7`**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** 12\n**Explanation:** For example \\[1,2,5,4,3\\] is a valid permutation, but \\[5,2,3,4,1\\] is not because the prime number 5 is at index 1.\n\n**Example 2:**\n\n**Input:** n = 100\n**Output:** 682289015\n\n**Constraints:**\n\n*   `1 <= n <= 100`Solve the problem for prime numbers and composite numbers separately. Multiply the number of permutations of prime numbers over prime indices with the number of permutations of composite numbers over composite indices. The number of permutations equals the factorial.",
          "output": "def numPrimeArrangements(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_count = sum(1 for i in range(2, n + 1) if is_prime(i))\n    composite_count = n - prime_count\n\n    MOD = 10**9 + 7\n    res = 1\n    for i in range(1, prime_count + 1):\n        res = res * i % MOD\n    for i in range(1, composite_count + 1):\n        res = res * i % MOD\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: A dieter consumes `calories[i]` calories on the `i`\\-th day.\n\nGiven an integer `k`, for **every** consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at _T_, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`):\n\n*   If `T < lower`, they performed poorly on their diet and lose 1 point;\n*   If `T > upper`, they performed well on their diet and gain 1 point;\n*   Otherwise, they performed normally and there is no change in points.\n\nInitially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length` days.\n\nNote that the total points can be negative.\n\n",
          "input": "**Example 1:**\n\n**Input:** calories = \\[1,2,3,4,5\\], k = 1, lower = 3, upper = 3\n**Output:** 0\n**Explanation**: Since k = 1, we consider each element of the array separately and compare it to lower and upper.\ncalories\\[0\\] and calories\\[1\\] are less than lower so 2 points are lost.\ncalories\\[3\\] and calories\\[4\\] are greater than upper so 2 points are gained.\n\n**Example 2:**\n\n**Input:** calories = \\[3,2\\], k = 2, lower = 0, upper = 1\n**Output:** 1\n**Explanation**: Since k = 2, we consider subarrays of length 2.\ncalories\\[0\\] + calories\\[1\\] > upper so 1 point is gained.\n\n**Example 3:**\n\n**Input:** calories = \\[6,5,0,0\\], k = 2, lower = 1, upper = 5\n**Output:** 0\n**Explanation**:\ncalories\\[0\\] + calories\\[1\\] > upper so 1 point is gained.\nlower <= calories\\[1\\] + calories\\[2\\] <= upper so no change in points.\ncalories\\[2\\] + calories\\[3\\] < lower so 1 point is lost.\n\n**Constraints:**\n\n*   `1 <= k <= calories.length <= 10^5`\n*   `0 <= calories[i] <= 20000`\n*   `0 <= lower <= upper`Use sliding window technique (aka two pointers).",
          "output": "def dietPlanPerformance(calories, k, lower, upper):\n    points = 0\n    T = 0\n\n    for i in range(len(calories)):\n        T += calories[i]\n        if i >= k:\n            T -= calories[i-k]\n        if i >= k-1:\n            if T < lower: points -= 1\n            if T > upper: points += 1\n\n    return points\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and array `queries` where `queries[i] = [lefti, righti, ki]`. We may rearrange the substring `s[lefti...righti]` for each query and then choose up to `ki` of them to replace with any lowercase English letter.\n\nIf the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.\n\nReturn a boolean array `answer` where `answer[i]` is the result of the `ith` query `queries[i]`.\n\nNote that each letter is counted individually for replacement, so if, for example `s[lefti...righti] = \"aaa \"`, and `ki = 2`, we can only replace two of the letters. Also, note that no query modifies the initial string `s`.\n\n**Example :**\n\n**Input:** s =  \"abcda \", queries = \\[\\[3,3,0\\],\\[1,2,0\\],\\[0,3,1\\],\\[0,3,2\\],\\[0,4,1\\]\\]\n**Output:** \\[true,false,false,true,true\\]\n**Explanation:**\nqueries\\[0\\]: substring =  \"d \", is palidrome.\nqueries\\[1\\]: substring =  \"bc \", is not palidrome.\nqueries\\[2\\]: substring =  \"abcd \", is not palidrome after replacing only 1 character.\nqueries\\[3\\]: substring =  \"abcd \", could be changed to  \"abba \" which is palidrome. Also this can be changed to  \"baab \" first rearrange it  \"bacd \" then replace  \"cd \" with  \"ab \".\nqueries\\[4\\]: substring =  \"abcda \", could be changed to  \"abcba \" which is palidrome.\n\n**Example 2:**\n\n**Input:** s =  \"lyb \", queries = \\[\\[0,1,0\\],\\[2,2,1\\]\\]\n**Output:** \\[false,true\\]\n\n**Constraints:**\n\n*   `1 <= s.length, queries.length <= 105`\n*   `0 <= lefti <= righti < s.length`\n*   `0 <= ki <= s.length`\n*   `s` consists of lowercase English letters",
          "input": ".Since we can rearrange the substring, all we care about is the frequency of each character in that substring. How to find the character frequencies efficiently ? As a preprocess, calculate the accumulate frequency of all characters for all prefixes of the string. How to check if a substring can be changed to a palindrome given its characters frequency ? Count the number of odd frequencies, there can be at most one odd frequency in a palindrome.",
          "output": "def canMakePaliQueries(s, queries):\n    answer = []\n    prefixSum = [0] * (len(s) + 1)\n\n    for i in range(len(s)):\n        prefixSum[i + 1] = prefixSum[i] ^ (1 << (ord(s[i]) - ord('a')))\n\n    for query in queries:\n        left, right, k = query\n        diffCount = bin(prefixSum[right + 1] ^ prefixSum[left]).count('1')\n        answer.append((diffCount // 2) <= k)\n\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: With respect to a given `puzzle` string, a `word` is _valid_ if both the following conditions are satisfied:\n\n*   `word` contains the first letter of `puzzle`.\n*   For each letter in `word`, that letter is in `puzzle`.\n    *   For example, if the puzzle is `\"abcdefg \"`, then valid words are `\"faced \"`, `\"cabbage \"`, and `\"baggage \"`, while\n    *   invalid words are `\"beefed \"` (does not include `'a'`) and `\"based \"` (includes `'s'` which is not in the puzzle).\n\nReturn _an array_ `answer`_, where_ `answer[i]` _is the number of words in the given word list_ `words` _that is valid with respect to the puzzle_ `puzzles[i]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"aaaa \", \"asas \", \"able \", \"ability \", \"actt \", \"actor \", \"access \"\\], puzzles = \\[ \"aboveyz \", \"abrodyz \", \"abslute \", \"absoryz \", \"actresz \", \"gaswxyz \"\\]\n**Output:** \\[1,1,3,2,4,0\\]\n**Explanation:** \n1 valid word for  \"aboveyz \" :  \"aaaa \" \n1 valid word for  \"abrodyz \" :  \"aaaa \"\n3 valid words for  \"abslute \" :  \"aaaa \",  \"asas \",  \"able \"\n2 valid words for  \"absoryz \" :  \"aaaa \",  \"asas \"\n4 valid words for  \"actresz \" :  \"aaaa \",  \"asas \",  \"actt \",  \"access \"\nThere are no valid words for  \"gaswxyz \" cause none of the words in the list contains letter 'g'.\n\n**Example 2:**\n\n**Input:** words = \\[ \"apple \", \"pleas \", \"please \"\\], puzzles = \\[ \"aelwxyz \", \"aelpxyz \", \"aelpsxy \", \"saelpxy \", \"xaelpsy \"\\]\n**Output:** \\[0,1,3,2,0\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 105`\n*   `4 <= words[i].length <= 50`\n*   `1 <= puzzles.length <= 104`\n*   `puzzles[i].length == 7`\n*   `words[i]` and `puzzles[i]` consist of lowercase English letters.\n*   Each `puzzles[i]` does not contain repeated characters.Exploit the fact that the length of the puzzle is only 7. Use bit-masks to represent the word and puzzle strings. For each puzzle, count the number of words whose bit-mask is a sub-mask of the puzzle's bit-mask.",
          "output": "def find_num_of_valid_words(words, puzzles):\n    result = []\n    for puzzle in puzzles:\n        count = 0\n        puzzle_set = set(puzzle)\n        for word in words:\n            if puzzle[0] in word:\n                if all(c in puzzle_set for c in word):\n                    count += 1\n        result.append(count)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `date` string in the form `Day Month Year`, where:\n\n*   `Day` is in the set `{ \"1st \", \"2nd \", \"3rd \", \"4th \", ..., \"30th \", \"31st \"}`.\n*   `Month` is in the set `{ \"Jan \", \"Feb \", \"Mar \", \"Apr \", \"May \", \"Jun \", \"Jul \", \"Aug \", \"Sep \", \"Oct \", \"Nov \", \"Dec \"}`.\n*   `Year` is in the range `[1900, 2100]`.\n\nConvert the date string to the format `YYYY-MM-DD`, where:\n\n*   `YYYY` denotes the 4 digit year.\n*   `MM` denotes the 2 digit month.\n*   `DD` denotes the 2 digit day.\n\n",
          "input": "**Example 1:**\n\n**Input:** date =  \"20th Oct 2052 \"\n**Output:**  \"2052-10-20 \"\n\n**Example 2:**\n\n**Input:** date =  \"6th Jun 1933 \"\n**Output:**  \"1933-06-06 \"\n\n**Example 3:**\n\n**Input:** date =  \"26th May 1960 \"\n**Output:**  \"1960-05-26 \"\n\n**Constraints:**\n\n*   The given dates are guaranteed to be valid, so no error handling is necessary.Handle the conversions of day, month and year separately. Notice that days always have a two-word ending, so if you erase the last two characters of this days you'll get the number.",
          "output": "def hasValidPath(grid):\n    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n\n    return dfs(grid, 0, 0, m, n, visited)\n\ndef dfs(grid, x, y, m, n, visited):\n    if x < 0 or y < 0 or x >= m or y >= n or visited[x][y]:\n        return False\n    if x == m - 1 and y == n - 1:\n        return True\n    \n    visited[x][y] = True\n\n    next_x = [-1, 0, 1, 0]\n    next_y = [0, 1, 0, -1]\n\n    for i in range(4):\n        dx = x + next_x[i]\n        dy = y + next_y[i]\n\n        if dfs(grid, dx, dy, m, n, visited):\n            return True\n\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the sum of divisors of the integers in that array that have exactly four divisors_. If there is no such integer in the array, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[21,4,7\\]\n**Output:** 32\n**Explanation:** \n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only.\n\n**Example 2:**\n\n**Input:** nums = \\[21,21\\]\n**Output:** 64\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `1 <= nums[i] <= 105`Find the divisors of each element in the array. You only need to loop to the square root of a number to find its divisors.",
          "output": "def sum_of_four_divisors(nums):\n    total_sum = 0\n    for num in nums:\n        count = 0\n        div_sum = 0\n        i = 1\n        while i * i <= num:\n            if num % i == 0:\n                count += 1 if i * i == num else 2\n                div_sum += i + (num // i)\n                if count > 4:\n                    break\n            i += 1\n        if count == 4:\n            total_sum += div_sum\n    return total_sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary search tree, return _a **balanced** binary search tree with the same node values_. If there is more than one answer, return **any of them**.\n\nA binary search tree is **balanced** if the depth of the two subtrees of every node never differs by more than `1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,null,3,null,4,null,null\\]\n**Output:** \\[2,1,3,null,null,null,4\\]\n**Explanation:** This is not the only correct answer, \\[3,1,4,null,2\\] is also correct.\n\n**Example 2:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** \\[2,1,3\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `1 <= Node.val <= 105`Convert the tree to a sorted array using an in-order traversal. Construct a new balanced tree from the sorted array recursively.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        sortedNodes = []\n        self.inorderTraversal(root, sortedNodes)\n        return self.sortedArrayToBST(sortedNodes, 0, len(sortedNodes) - 1)\n\n    def inorderTraversal(self, node: TreeNode, sortedNodes: list):\n        if node is None: return\n        self.inorderTraversal(node.left, sortedNodes)\n        sortedNodes.append(node)\n        self.inorderTraversal(node.right, sortedNodes)\n\n    def sortedArrayToBST(self, sortedNodes: list, start: int, end: int) -> TreeNode:\n        if start > end: return None\n        mid = start + (end - start) // 2\n        newNode = sortedNodes[mid]\n        newNode.left = self.sortedArrayToBST(sortedNodes, start, mid - 1)\n        newNode.right = self.sortedArrayToBST(sortedNodes, mid + 1, end)\n        return newNode\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return the maximum sum of a **non-empty** subsequence of that array such that for every two **consecutive** integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied.\n\nA _subsequence_ of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[10,2,-10,5,20\\], k = 2\n**Output:** 37\n**Explanation:** The subsequence is \\[10, 2, 5, 20\\].\n\n**Example 2:**\n\n**Input:** nums = \\[-1,-2,-3\\], k = 1\n**Output:** -1\n**Explanation:** The subsequence must be non-empty, so we choose the largest number.\n\n**Example 3:**\n\n**Input:** nums = \\[10,-2,-10,-5,20\\], k = 2\n**Output:** 23\n**Explanation:** The subsequence is \\[10, -2, -5, 20\\].\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`Use dynamic programming. Let dp[i] be the solution for the prefix of the array that ends at index i, if the element at index i is in the subsequence. dp[i] = nums[i] + max(0, dp[i-k], dp[i-k+1], ..., dp[i-1]) Use a heap with the sliding window technique to optimize the dp.",
          "output": "def maxSum(nums, k):\n    n = len(nums)\n    dp = [0] * (n + 1)\n    pq = []\n    sum_ = 0\n\n    for i in range(n):\n        if i >= k:\n            pq.remove(-(dp[i] - nums[i]))  # Remove element from pq\n        heapq.heappush(pq, -(dp[i] - nums[i]))  # Push in the negative for max heap\n        dp[i + 1] = max(dp[i], nums[i] - pq[0])\n        sum_ = max(sum_, dp[i + 1])\n\n    return sum_\n"
     },
     {
          "instruction": "Write python code for this problem: A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`.\n\nThe bus goes along both directions i.e. clockwise and counterclockwise.\n\nReturn the shortest distance between the given `start` and `destination` stops.\n\n",
          "input": "**Example 1:**\n\n**Input:** distance = \\[1,2,3,4\\], start = 0, destination = 1\n**Output:** 1\n**Explanation:** Distance between 0 and 1 is 1 or 9, minimum is 1.\n\n**Example 2:**\n\n**Input:** distance = \\[1,2,3,4\\], start = 0, destination = 2\n**Output:** 3\n**Explanation:** Distance between 0 and 2 is 3 or 7, minimum is 3.\n\n**Example 3:**\n\n**Input:** distance = \\[1,2,3,4\\], start = 0, destination = 3\n**Output:** 4\n**Explanation:** Distance between 0 and 3 is 6 or 4, minimum is 4.\n\n**Constraints:**\n\n*   `1 <= n <= 10^4`\n*   `distance.length == n`\n*   `0 <= start, destination < n`\n*   `0 <= distance[i] <= 10^4`Find the distance between the two stops if the bus moved in clockwise or counterclockwise directions.",
          "output": "def carPooling(trips, capacity):\n    stops = [0] * 1001\n    for num, start, end in trips:\n        stops[start] += num\n        stops[end] -= num\n    for i in stops:\n        capacity -= i\n        if capacity < 0:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers, return the maximum sum for a **non-empty** subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.\n\nNote that the subarray needs to be **non-empty** after deleting one element.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,-2,0,3\\]\n**Output:** 4\n**Explanation:** Because we can choose \\[1, -2, 0, 3\\] and drop -2, thus the subarray \\[1, 0, 3\\] becomes the maximum value.\n\n**Example 2:**\n\n**Input:** arr = \\[1,-2,-2,3\\]\n**Output:** 3\n**Explanation:** We just choose \\[3\\] and it's the maximum sum.\n\n**Example 3:**\n\n**Input:** arr = \\[-1,-1,-1,-1\\]\n**Output:** -1\n**Explanation:** The final subarray needs to be non-empty. You can't choose \\[-1\\] and delete -1 from it, then get an empty subarray to make the sum equals to 0.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `-104 <= arr[i] <= 104`How to solve this problem if no deletions are allowed ? Try deleting each element and find the maximum subarray sum to both sides of that element. To do that efficiently, use the idea of Kadane's algorithm.",
          "output": "from threading import Semaphore\n\nclass H2O:\n    def __init__(self):\n        self.hydrogenSemaphore = Semaphore(2)\n        self.oxygenSemaphore = Semaphore(1)\n\n    def hydrogen(self, releaseHydrogen):\n        self.hydrogenSemaphore.acquire()\n        releaseHydrogen()\n        self.oxygenSemaphore.release()\n\n    def oxygen(self, releaseOxygen):\n        self.oxygenSemaphore.acquire()\n        releaseOxygen()\n        self.hydrogenSemaphore.release(2)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a date, return the corresponding day of the week for that date.\n\nThe input is given as three integers representing the `day`, `month` and `year` respectively.\n\nReturn the answer as one of the following values `{ \"Sunday \", \"Monday \", \"Tuesday \", \"Wednesday \", \"Thursday \", \"Friday \", \"Saturday \"}`.\n\n",
          "input": "**Example 1:**\n\n**Input:** day = 31, month = 8, year = 2019\n**Output:**  \"Saturday \"\n\n**Example 2:**\n\n**Input:** day = 18, month = 7, year = 1999\n**Output:**  \"Sunday \"\n\n**Example 3:**\n\n**Input:** day = 15, month = 8, year = 1993\n**Output:**  \"Sunday \"\n\n**Constraints:**\n\n*   The given dates are valid dates between the years `1971` and `2100`.Sum up the number of days for the years before the given year. Handle the case of a leap year. Find the number of days for each month of the given year.",
          "output": "def day_of_the_week(day, month, year):\n    from datetime import date\n    days = [\"Sunday \", \"Monday \", \"Tuesday \", \"Wednesday \", \"Thursday \", \"Friday \", \"Saturday \"]\n    return days[date(year, month, day).weekday()]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `arr1` and `arr2`, return the minimum number of operations (possibly zero) needed to make `arr1` strictly increasing.\n\nIn one operation, you can choose two indices `0 <= i < arr1.length` and `0 <= j < arr2.length` and do the assignment `arr1[i] = arr2[j]`.\n\nIf there is no way to make `arr1` strictly increasing, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr1 = \\[1,5,3,6,7\\], arr2 = \\[1,3,2,4\\]\n**Output:** 1\n**Explanation:** Replace `5` with `2`, then `arr1 = [1, 2, 3, 6, 7]`.\n\n**Example 2:**\n\n**Input:** arr1 = \\[1,5,3,6,7\\], arr2 = \\[4,3,1\\]\n**Output:** 2\n**Explanation:** Replace `5` with `3` and then replace `3` with `4`. `arr1 = [1, 3, 4, 6, 7]`.\n\n**Example 3:**\n\n**Input:** arr1 = \\[1,5,3,6,7\\], arr2 = \\[1,6,3,3\\]\n**Output:** -1\n**Explanation:** You can't make `arr1` strictly increasing.\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length <= 2000`\n*   `0 <= arr1[i], arr2[i] <= 10^9`Use dynamic programming. The state would be the index in arr1 and the index of the previous element in arr2 after sorting it and removing duplicates.",
          "output": "from threading import Lock\n\nclass FooBar:\n    def __init__(self, n: int):\n        self.n = n\n        self.foo_lock = Lock()\n        self.bar_lock = Lock()\n        self.bar_lock.acquire()\n\n    def foo(self, printFoo) -> None:\n        for _ in range(self.n):\n            self.foo_lock.acquire()\n            printFoo()\n            self.bar_lock.release()\n\n    def bar(self, printBar) -> None:\n        for _ in range(self.n):\n            self.bar_lock.acquire()\n            printBar()\n            self.foo_lock.release()\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,6,4,1\\]\n**Output:** false\n**Explanation:** There are no three consecutive odds.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,34,3,4,5,7,23,12\\]\n**Output:** true\n**Explanation:** \\[5,7,23\\] are three consecutive odds.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `1 <= arr[i] <= 1000`Check every three consecutive numbers in the array for parity.",
          "output": "import heapq\n\ndef kthSmallest(mat, k):\n    m, n = len(mat), len(mat[0])\n    \n    minHeap = [(mat[0][0], 0, 0)]\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    visited[0][0] = True\n    \n    for _ in range(k):\n        res, i, j = heapq.heappop(minHeap)\n        \n        if i < m - 1 and not visited[i+1][j]:\n            heapq.heappush(minHeap, (res - mat[i][j] + mat[i + 1][j], i + 1, j))\n            visited[i+1][j] = True\n        if j < n - 1 and not visited[i][j+1]:\n            heapq.heappush(minHeap, (res - mat[i][j] + mat[i][j + 1], i, j + 1))\n            visited[i][j+1] = True\n            \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Design a data structure to find the **frequency** of a given value in a given subarray.\n\nThe **frequency** of a value in a subarray is the number of occurrences of that value in the subarray.\n\nImplement the `RangeFreqQuery` class:\n\n*   `RangeFreqQuery(int[] arr)` Constructs an instance of the class with the given **0-indexed** integer array `arr`.\n*   `int query(int left, int right, int value)` Returns the **frequency** of `value` in the subarray `arr[left...right]`.\n\nA **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"RangeFreqQuery \",  \"query \",  \"query \"\\]\n\\[\\[\\[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56\\]\\], \\[1, 2, 4\\], \\[0, 11, 33\\]\\]\n**Output**\n\\[null, 1, 2\\]\n\n**Explanation**\nRangeFreqQuery rangeFreqQuery = new RangeFreqQuery(\\[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56\\]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray \\[33, 4\\]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= arr[i], value <= 104`\n*   `0 <= left <= right < arr.length`\n*   At most `105` calls will be made to `query`The queries must be answered efficiently to avoid time limit exceeded verdict. Store the elements of the array in a data structure that helps answering the queries efficiently. Use a hash table that stored for each value, the indices where that value appeared. Use binary search over the indices of a value to find its range frequency.",
          "output": "def check_good_line(board, r, c, color, dr, dc):\n    opp_color = 'B' if color == 'W' else 'W'\n    count = 0\n    r += dr\n    c += dc\n    while 0 <= r < 8 and 0 <= c < 8 and board[r][c] == opp_color:\n        count += 1\n        r += dr\n        c += dc\n    return 0 <= r < 8 and 0 <= c < 8 and board[r][c] == color and count >= 2\n\ndef is_legal_move(board, r_move, c_move, color):\n    if board[r_move][c_move] != '.':\n        return False\n    board[r_move][c_move] = color\n    for dr in range(-1, 2):\n        for dc in range(-1, 2):\n            if not (dr == 0 and dc == 0) and check_good_line(board, r_move, c_move, color, dr, dc):\n                return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: In a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it.\n\nYou will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`.\n\nGiven an integer `neededApples`, return _the **minimum perimeter** of a plot such that **at least**_ `neededApples` _apples are **inside or on** the perimeter of that plot_.\n\nThe value of `|x|` is defined as:\n\n*   `x` if `x >= 0`\n*   `-x` if `x < 0`\n\n",
          "input": "**Example 1:**\n\n**Input:** neededApples = 1\n**Output:** 8\n**Explanation:** A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 \\* 4 = 8.\n\n**Example 2:**\n\n**Input:** neededApples = 13\n**Output:** 16\n\n**Example 3:**\n\n**Input:** neededApples = 1000000000\n**Output:** 5040\n\n**Constraints:**\n\n*   `1 <= neededApples <= 1015`Find a formula for the number of apples inside a square with a side length L. Iterate over the possible lengths of the square until enough apples are collected.",
          "output": "def replace_digits(s: str) -> str:\n    s = list(s)\n    for i in range(1, len(s), 2):\n        s[i] = chr(ord(s[i - 1]) + int(s[i]))\n    return ''.join(s)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of `ith` node. The root of the tree is node `0`. Find the `kth` ancestor of a given node.\n\nThe `kth` ancestor of a tree node is the `kth` node in the path from that node to the root node.\n\nImplement the `TreeAncestor` class:\n\n*   `TreeAncestor(int n, int[] parent)` Initializes the object with the number of nodes in the tree and the parent array.\n*   `int getKthAncestor(int node, int k)` return the `kth` ancestor of the given node `node`. If there is no such ancestor, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"TreeAncestor \",  \"getKthAncestor \",  \"getKthAncestor \",  \"getKthAncestor \"\\]\n\\[\\[7, \\[-1, 0, 0, 1, 1, 2, 2\\]\\], \\[3, 1\\], \\[5, 2\\], \\[6, 3\\]\\]\n**Output**\n\\[null, 1, 0, -1\\]\n\n**Explanation**\nTreeAncestor treeAncestor = new TreeAncestor(7, \\[-1, 0, 0, 1, 1, 2, 2\\]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor\n\n**Constraints:**\n\n*   `1 <= k <= n <= 5 * 104`\n*   `parent.length == n`\n*   `parent[0] == -1`\n*   `0 <= parent[i] < n` for all `0 < i < n`\n*   `0 <= node < n`\n*   There will be at most `5 * 104` queries.The queries must be answered efficiently to avoid time limit exceeded verdict. Use sparse table (dynamic programming application) to travel the tree upwards in a fast way.",
          "output": "def rank_teams(votes):\n    teams = len(votes[0])\n    ranks = [[0] * teams for _ in range(26)]\n\n    for vote in votes:\n        for i in range(teams):\n            ranks[ord(vote[i]) - ord('A')][i] += 1\n\n    result = list(votes[0])\n    result.sort(key=lambda ch: tuple([-ranks[ord(ch) - ord('A')][i] for i in range(teams)] + [ch]))\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"balloon \"** as possible.\n\nYou can use each character in `text` **at most once**. Return the maximum number of instances that can be formed.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"nlaebolko \"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** text =  \"loonbalxballpoon \"\n**Output:** 2\n\n**Example 3:**\n\n**Input:** text =  \"leetcode \"\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= text.length <= 104`\n*   `text` consists of lower case English letters only.Count the frequency of letters in the given string. Find the letter than can make the minimum number of instances of the word \"balloon\".",
          "output": "def max_number_of_balloons(text: str) -> int:\n    letter_count = [0] * 5\n    for c in text:\n        if c == 'b': letter_count[0] += 1\n        if c == 'a': letter_count[1] += 1\n        if c == 'l': letter_count[2] += 1\n        if c == 'o': letter_count[3] += 1\n        if c == 'n': letter_count[4] += 1\n    letter_count[2] //= 2\n    letter_count[3] //= 2\n    return min(letter_count)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` that consists of lower case English letters and brackets.\n\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\n\nYour result should **not** contain any brackets.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"(abcd) \"\n**Output:**  \"dcba \"\n\n**Example 2:**\n\n**Input:** s =  \"(u(love)i) \"\n**Output:**  \"iloveu \"\n**Explanation:** The substring  \"love \" is reversed first, then the whole string is reversed.\n\n**Example 3:**\n\n**Input:** s =  \"(ed(et(oc))el) \"\n**Output:**  \"leetcode \"\n**Explanation:** First, we reverse the substring  \"oc \", then  \"etco \", and finally, the whole string.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2000`\n*   `s` only contains lower case English characters and parentheses.\n*   It is guaranteed that all parentheses are balanced.Find all brackets in the string. Does the order of the reverse matter ? The order does not matter.",
          "output": "def reverseParentheses(s: str) -> str:\n    stack = []\n    for i, c in enumerate(s):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            start, end = stack.pop(), i\n            # reversal of the substring\n            s = s[:start] + s[start+1:end][::-1] + s[end+1:]\n    return ''.join(c for c in s if c.isalpha())\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.\n\nFor example, if `arr = [1, 2]` and `k = 3` then the modified array will be `[1, 2, 1, 2, 1, 2]`.\n\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.\n\nAs the answer can be very large, return the answer **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2\\], k = 3\n**Output:** 9\n\n**Example 2:**\n\n**Input:** arr = \\[1,-2,1\\], k = 5\n**Output:** 2\n\n**Example 3:**\n\n**Input:** arr = \\[-1,-2\\], k = 7\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= k <= 105`\n*   `-104 <= arr[i] <= 104`How to solve the problem for k=1 ? Use Kadane's algorithm for k=1. What are the possible cases for the answer ? The answer is the maximum between, the answer for k=1, the sum of the whole array multiplied by k, or the maximum suffix sum plus the maximum prefix sum plus (k-2) multiplied by the whole array sum for k > 1.",
          "output": "def kConcatenationMaxSum(arr, k):\n    mod = 10**9 + 7\n    n = len(arr)\n    max_sum, max_left, max_right = 0, 0, 0\n    total_sum = sum(arr)\n    temp_sum = 0\n\n    for i in range(n):\n        temp_sum += arr[i]\n        max_sum = max(max_sum, temp_sum)\n        temp_sum = max(0, temp_sum)\n        max_left = max(max_left, temp_sum)\n\n    temp = total_sum\n    for i in range(n - 1, -1, -1):\n        temp -= arr[i]\n        max_right = max(max_right, temp)\n\n    ans = max(max_sum, max_left + max_right + total_sum * (k - 2), 0)\n    return ans % mod\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` servers numbered from `0` to `n - 1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between servers `ai` and `bi`. Any server can reach other servers directly or indirectly through the network.\n\nA _critical connection_ is a connection that, if removed, will make some servers unable to reach some other server.\n\nReturn all critical connections in the network in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, connections = \\[\\[0,1\\],\\[1,2\\],\\[2,0\\],\\[1,3\\]\\]\n**Output:** \\[\\[1,3\\]\\]\n**Explanation:** \\[\\[3,1\\]\\] is also accepted.\n\n**Example 2:**\n\n**Input:** n = 2, connections = \\[\\[0,1\\]\\]\n**Output:** \\[\\[0,1\\]\\]\n\n**Constraints:**\n\n*   `2 <= n <= 105`\n*   `n - 1 <= connections.length <= 105`\n*   `0 <= ai, bi <= n - 1`\n*   `ai != bi`\n*   There are no repeated connections.Use Tarjan's algorithm.",
          "output": "from collections import defaultdict\n\ndef criticalConnections(n, connections):\n    def dfs(node, parent, depth, rank, graph, result):\n        rank[node] = depth\n        for neighbor in graph[node]:\n            if neighbor == parent:\n                continue\n            if rank[neighbor] == -1:\n                dfs(neighbor, node, depth + 1, rank, graph, result)\n            rank[node] = min(rank[node], rank[neighbor])\n            if rank[neighbor] == depth + 1:\n                result.append((node, neighbor))\n\n    graph = defaultdict(list)\n    for fr, to in connections:\n        graph[fr].append(to)\n        graph[to].append(fr)\n\n    rank = [-1] * n\n    result = []\n    dfs(0, -1, 0, rank, graph, result)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A **fancy string** is a string where no **three** **consecutive** characters are equal.\n\nGiven a string `s`, delete the **minimum** possible number of characters from `s` to make it **fancy**.\n\nReturn _the final string after the deletion_. It can be shown that the answer will always be **unique**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leeetcode \"\n**Output:**  \"leetcode \"\n**Explanation:**\nRemove an 'e' from the first group of 'e's to create  \"leetcode \".\nNo three consecutive characters are equal, so return  \"leetcode \".\n\n**Example 2:**\n\n**Input:** s =  \"aaabaaaa \"\n**Output:**  \"aabaa \"\n**Explanation:**\nRemove an 'a' from the first group of 'a's to create  \"aabaaaa \".\nRemove two 'a's from the second group of 'a's to create  \"aabaa \".\nNo three consecutive characters are equal, so return  \"aabaa \".\n\n**Example 3:**\n\n**Input:** s =  \"aab \"\n**Output:**  \"aab \"\n**Explanation:** No three consecutive characters are equal, so return  \"aab \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists only of lowercase English letters.What's the optimal way to delete characters if three or more consecutive characters are equal? If three or more consecutive characters are equal, keep two of them and delete the rest.",
          "output": "def smallest_difference_room(rooms, queries):\n    n = len(rooms)\n    k = len(queries)\n    rooms.sort(key=lambda x: x[0])\n    results = []\n\n    for i in range(k):\n        preferred, minSize = queries[i]\n        diff = float(\"inf\")\n        room_idx = -1\n\n        for j in range(n):\n            if rooms[j][1] >= minSize:\n                tmp_diff = abs(preferred - rooms[j][0])\n                if tmp_diff < diff:\n                    diff = tmp_diff\n                    room_idx = rooms[j][0]\n\n        results.append(room_idx)\n\n    return results\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a game with integers. You start with the integer `1` and you want to reach the integer `target`.\n\nIn one move, you can either:\n\n*   **Increment** the current integer by one (i.e., `x = x + 1`).\n*   **Double** the current integer (i.e., `x = 2 * x`).\n\nYou can use the **increment** operation **any** number of times, however, you can only use the **double** operation **at most** `maxDoubles` times.\n\nGiven the two integers `target` and `maxDoubles`, return _the minimum number of moves needed to reach_ `target` _starting with_ `1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = 5, maxDoubles = 0\n**Output:** 4\n**Explanation:** Keep incrementing by 1 until you reach target.\n\n**Example 2:**\n\n**Input:** target = 19, maxDoubles = 2\n**Output:** 7\n**Explanation:** Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19\n\n**Example 3:**\n\n**Input:** target = 10, maxDoubles = 4\n**Output:** 4\n**Explanation:** Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10\n\n**Constraints:**\n\n*   `1 <= target <= 109`\n*   `0 <= maxDoubles <= 100`Solve the opposite problem: start at the given score and move to 1. It is better to use the move of the second type once we can to lose more scores fast.",
          "output": "class DetectSquares:\n\n    def __init__(self):\n        self.points = collections.defaultdict(lambda: collections.defaultdict(int))\n\n    def add(self, point):\n        self.points[point[0]][point[1]] += 1\n\n    def count(self, point):\n        ans = 0\n        for x2 in self.points[point[0]]:\n            if x2 == point[1]:\n                continue\n            for y2 in self.points[x2]:\n                if y2 == point[1] or abs(x2 - point[1]) != abs(y2 - point[0]):\n                    continue\n                ans += self.points[point[0]][x2] * self.points[x2][y2] * self.points[point[0]][y2]\n        return ans\n"
     },
     {
          "instruction": "Write python code for this problem: A string `s` is called **happy** if it satisfies the following conditions:\n\n*   `s` only contains the letters `'a'`, `'b'`, and `'c'`.\n*   `s` does not contain any of `\"aaa \"`, `\"bbb \"`, or `\"ccc \"` as a substring.\n*   `s` contains **at most** `a` occurrences of the letter `'a'`.\n*   `s` contains **at most** `b` occurrences of the letter `'b'`.\n*   `s` contains **at most** `c` occurrences of the letter `'c'`.\n\nGiven three integers `a`, `b`, and `c`, return _the **longest possible happy** string_. If there are multiple longest happy strings, return _any of them_. If there is no such string, return _the empty string_ `\" \"`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** a = 1, b = 1, c = 7\n**Output:**  \"ccaccbcc \"\n**Explanation:**  \"ccbccacc \" would also be a correct answer.\n\n**Example 2:**\n\n**Input:** a = 7, b = 1, c = 0\n**Output:**  \"aabaa \"\n**Explanation:** It is the only correct answer in this case.\n\n**Constraints:**\n\n*   `0 <= a, b, c <= 100`\n*   `a + b + c > 0`Use a greedy approach. Use the letter with the maximum current limit that can be added without breaking the condition.",
          "output": "import heapq\n\ndef longest_diverse_string(a: int, b: int, c: int) -> str:\n    result = \"\"\n    pq = [(-a, 'a'), (-b, 'b'), (-c, 'c')]\n    heapq.heapify(pq)\n    \n    while pq:\n        first = heapq.heappop(pq)\n        if not result or result[-1] != first[1]:\n            result += first[1]\n            first = (first[0] + 1, first[1])\n            if first[0] < 0:\n                heapq.heappush(pq, first)\n        elif pq:\n            second = heapq.heappop(pq)\n            result += second[1]\n            second = (second[0] + 1, second[1])\n            if second[0] < 0:\n                heapq.heappush(pq, second)\n            if first[0] < 0:\n                heapq.heappush(pq, first)\n        else:\n            break\n            \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` people standing in a queue, and they numbered from `0` to `n - 1` in **left to right** order. You are given an array `heights` of **distinct** integers where `heights[i]` represents the height of the `ith` person.\n\nA person can **see** another person to their right in the queue if everybody in between is **shorter** than both of them. More formally, the `ith` person can see the `jth` person if `i < j` and `min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1])`.\n\nReturn _an array_ `answer` _of length_ `n` _where_ `answer[i]` _is the **number of people** the_ `ith` _person can **see** to their right in the queue_.\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[10,6,8,5,11,9\\]\n**Output:** \\[3,1,2,1,1,0\\]\n**Explanation:**\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them.\n\n**Example 2:**\n\n**Input:** heights = \\[5,1,2,3,10\\]\n**Output:** \\[4,1,1,1,0\\]\n\n**Constraints:**\n\n*   `n == heights.length`\n*   `1 <= n <= 105`\n*   `1 <= heights[i] <= 105`\n*   All the values of `heights` are **unique**.How to solve this problem in quadratic complexity ? For every subarray start at index i, keep finding new maximum values until a value larger than arr[i] is found. Since the limits are high, you need a linear solution. Use a stack to keep the values of the array sorted as you iterate the array from the end to the start. Keep popping from the stack the elements in sorted order until a value larger than arr[i] is found, these are the ones that person i can see.",
          "output": "def truncate_sentence(s, k):\n    words = s.split(' ')\n    return ' '.join(words[:k])\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of **distinct** integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements.\n\nReturn a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows\n\n*   `a, b` are from `arr`\n*   `a < b`\n*   `b - a` equals to the minimum absolute difference of any two elements in `arr`\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[4,2,1,3\\]\n**Output:** \\[\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]\n**Explanation:** The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.\n\n**Example 2:**\n\n**Input:** arr = \\[1,3,6,10,15\\]\n**Output:** \\[\\[1,3\\]\\]\n\n**Example 3:**\n\n**Input:** arr = \\[3,8,-10,23,19,-4,-14,27\\]\n**Output:** \\[\\[-14,-10\\],\\[19,23\\],\\[23,27\\]\\]\n\n**Constraints:**\n\n*   `2 <= arr.length <= 105`\n*   `-106 <= arr[i] <= 106`Find the minimum absolute difference between two elements in the array. The minimum absolute difference must be a difference between two consecutive elements in the sorted array.",
          "output": "from typing import List\n\ndef minimumAbsDifference(arr: List[int]) -> List[List[int]]:\n    arr.sort()\n    min_diff = min(arr[i] - arr[i - 1] for i in range(1, len(arr)))\n\n    result = []\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == min_diff:\n            result.append([arr[i - 1], arr[i]])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: An **ugly number** is a positive integer that is divisible by `a`, `b`, or `c`.\n\nGiven four integers `n`, `a`, `b`, and `c`, return the `nth` **ugly number**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, a = 2, b = 3, c = 5\n**Output:** 4\n**Explanation:** The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.\n\n**Example 2:**\n\n**Input:** n = 4, a = 2, b = 3, c = 4\n**Output:** 6\n**Explanation:** The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.\n\n**Example 3:**\n\n**Input:** n = 5, a = 2, b = 11, c = 13\n**Output:** 10\n**Explanation:** The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.\n\n**Constraints:**\n\n*   `1 <= n, a, b, c <= 109`\n*   `1 <= a * b * c <= 1018`\n*   It is guaranteed that the result will be in range `[1, 2 * 109]`.Write a function f(k) to determine how many ugly numbers smaller than k. As f(k) is non-decreasing, try binary search. Find all ugly numbers in [1, LCM(a, b, c)] (LCM is Least Common Multiple). Use inclusion-exclusion principle to expand the result.",
          "output": "import math\n\ndef nthUglyNumber(n, a, b, c):\n    left, right = 1, int(2e9)\n    lcm_ab, lcm_ac, lcm_bc = a * b // math.gcd(a, b), a * c // math.gcd(a, c), b * c // math.gcd(b, c)\n    lcm_abc = a * lcm_bc // math.gcd(a, lcm_bc)\n\n    while left < right:\n        mid = left + (right - left) // 2\n        count = mid // a + mid // b + mid // c - mid // lcm_ab - mid // lcm_ac - mid // lcm_bc + mid // lcm_abc\n        if count < n:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string.\n\nYou can swap the characters at any pair of indices in the given `pairs` **any number of times**.\n\nReturn the lexicographically smallest string that `s` can be changed to after using the swaps.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"dcab \", pairs = \\[\\[0,3\\],\\[1,2\\]\\]\n**Output:**  \"bacd \"\n**Explaination:** \nSwap s\\[0\\] and s\\[3\\], s =  \"bcad \"\nSwap s\\[1\\] and s\\[2\\], s =  \"bacd \"\n\n**Example 2:**\n\n**Input:** s =  \"dcab \", pairs = \\[\\[0,3\\],\\[1,2\\],\\[0,2\\]\\]\n**Output:**  \"abcd \"\n**Explaination:** \nSwap s\\[0\\] and s\\[3\\], s =  \"bcad \"\nSwap s\\[0\\] and s\\[2\\], s =  \"acbd \"\nSwap s\\[1\\] and s\\[2\\], s =  \"abcd \"\n\n**Example 3:**\n\n**Input:** s =  \"cba \", pairs = \\[\\[0,1\\],\\[1,2\\]\\]\n**Output:**  \"abc \"\n**Explaination:** \nSwap s\\[0\\] and s\\[1\\], s =  \"bca \"\nSwap s\\[1\\] and s\\[2\\], s =  \"bac \"\nSwap s\\[0\\] and s\\[1\\], s =  \"abc \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 10^5`\n*   `0 <= pairs.length <= 10^5`\n*   `0 <= pairs[i][0], pairs[i][1] < s.length`\n*   `s` only contains lower case English letters.Think of it as a graph problem. Consider the pairs as connected nodes in the graph, what can you do with a connected component of indices ? We can sort each connected component alone to get the lexicographically minimum string.",
          "output": "from collections import defaultdict\n\nclass Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n        n = len(s)\n\n        # Initialize the parents array\n        p = list(range(n))\n\n        # Helper function to find the parent of an index\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        # Union-find, grouping connected indices together\n        for pair in pairs:\n            root1 = find(pair[0])\n            root2 = find(pair[1])\n            if root1 != root2:\n                p[root2] = root1\n                \n        # Group all the characters together according to their representatives (parent)\n        groups = defaultdict(list)\n        for i in range(n):\n            root = find(i)\n            groups[root].append(s[i])\n\n        # Sort each group\n        for group in groups.values():\n            group.sort(reverse=True)\n\n        # Build the result string\n        res = []\n        for i in range(n):\n            root = find(i)\n            res.append(groups[root].pop())\n\n        return \"\".join(res)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` items each belonging to zero or one of `m` groups where `group[i]` is the group that the `i`\\-th item belongs to and it's equal to `-1` if the `i`\\-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.\n\nReturn a sorted list of the items such that:\n\n*   The items that belong to the same group are next to each other in the sorted list.\n*   There are some relations between these items where `beforeItems[i]` is a list containing all the items that should come before the `i`\\-th item in the sorted array (to the left of the `i`\\-th item).\n\nReturn any solution if there is more than one solution and return an **empty list** if there is no solution.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 8, m = 2, group = \\[-1,-1,1,0,0,1,0,-1\\], beforeItems = \\[\\[\\],\\[6\\],\\[5\\],\\[6\\],\\[3,6\\],\\[\\],\\[\\],\\[\\]\\]\n**Output:** \\[6,3,4,1,5,2,0,7\\]\n\n**Example 2:**\n\n**Input:** n = 8, m = 2, group = \\[-1,-1,1,0,0,1,0,-1\\], beforeItems = \\[\\[\\],\\[6\\],\\[5\\],\\[6\\],\\[3\\],\\[\\],\\[4\\],\\[\\]\\]\n**Output:** \\[\\]\n**Explanation:** This is the same as example 1 except that 4 needs to be before 6 in the sorted list.\n\n**Constraints:**\n\n*   `1 <= m <= n <= 3 * 104`\n*   `group.length == beforeItems.length == n`\n*   `-1 <= group[i] <= m - 1`\n*   `0 <= beforeItems[i].length <= n - 1`\n*   `0 <= beforeItems[i][j] <= n - 1`\n*   `i != beforeItems[i][j]`\n*   `beforeItems[i]` does not contain duplicates elements.Think of it as a graph problem. We need to find a topological order on the dependency graph. Build two graphs, one for the groups and another for the items.",
          "output": "from threading import Condition\n\nclass Foo:\n    def __init__(self):\n        self.order = 1\n        self.cv = Condition()\n\n    def first(self):\n        with self.cv:\n            # printFirst() outputs \"first\". Do not change or remove this line.\n            printFirst()\n            self.order = 2\n            self.cv.notify_all()\n\n    def second(self):\n        with self.cv:\n            self.cv.wait_for(lambda: self.order == 2)\n            # printSecond() outputs \"second\". Do not change or remove this line.\n            printSecond()\n            self.order = 3\n            self.cv.notify_all()\n\n    def third(self):\n        with self.cv:\n            self.cv.wait_for(lambda: self.order == 3)\n            # printThird() outputs \"third\". Do not change or remove this line.\n            printThird()\n"
     },
     {
          "instruction": "Write python code for this problem: You want to water `n` plants in your garden with a watering can. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`. There is a river at `x = -1` that you can refill your watering can at.\n\nEach plant needs a specific amount of water. You will water the plants in the following way:\n\n*   Water the plants in order from left to right.\n*   After watering the current plant, if you do not have enough water to **completely** water the next plant, return to the river to fully refill the watering can.\n*   You **cannot** refill the watering can early.\n\nYou are initially at the river (i.e., `x = -1`). It takes **one step** to move **one unit** on the x-axis.\n\nGiven a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and an integer `capacity` representing the watering can capacity, return _the **number of steps** needed to water all the plants_.\n\n",
          "input": "**Example 1:**\n\n**Input:** plants = \\[2,2,3,3\\], capacity = 5\n**Output:** 14\n**Explanation:** Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.\n\n**Example 2:**\n\n**Input:** plants = \\[1,1,1,4,2,3\\], capacity = 4\n**Output:** 30\n**Explanation:** Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.\n\n**Example 3:**\n\n**Input:** plants = \\[7,7,7,7,7,7,7\\], capacity = 8\n**Output:** 49\n**Explanation:** You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.\n\n**Constraints:**\n\n*   `n == plants.length`\n*   `1 <= n <= 1000`\n*   `1 <= plants[i] <= 106`\n*   `max(plants[i]) <= capacity <= 109`Simulate the process. Return to refill the container once you meet a plant that needs more water than you have.",
          "output": "from collections import defaultdict\n\ndef deleteDuplicateFolder(paths):\n    graph = defaultdict(set)\n    count = defaultdict(int)\n\n    for path in paths:\n        serialized_path = \"\"\n        for folder in path:\n            serialized_path += \"/\" + folder\n            graph[serialized_path].add(folder)\n\n    for value in graph.values():\n        count[str(value)] += 1\n\n    ans = []\n    for path in paths:\n        serialized_path = \"\"\n        duplicate = False\n        for folder in path:\n            serialized_path += \"/\" + folder\n            if count[str(graph[serialized_path])] > 1:\n                duplicate = True\n                break\n        if not duplicate:\n            ans.append(path)\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: A `k x k` **magic square** is a `k x k` grid filled with integers such that every row sum, every column sum, and both diagonal sums are **all equal**. The integers in the magic square **do not have to be distinct**. Every `1 x 1` grid is trivially a **magic square**.\n\nGiven an `m x n` integer `grid`, return _the **size** (i.e., the side length_ `k`_) of the **largest magic square** that can be found within this grid_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[7,1,4,5,6\\],\\[2,5,1,6,4\\],\\[1,5,4,3,2\\],\\[1,2,7,3,4\\]\\]\n**Output:** 3\n**Explanation:** The largest magic square has a size of 3.\nEvery row sum, column sum, and diagonal sum of this magic square is equal to 12.\n- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12\n- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12\n- Diagonal sums: 5+4+3 = 6+4+2 = 12\n\n**Example 2:**\n\n**Input:** grid = \\[\\[5,1,3,1\\],\\[9,3,3,1\\],\\[1,3,3,8\\]\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `1 <= grid[i][j] <= 106`Check all squares in the matrix and find the largest one.",
          "output": "def min_operations(boxes: str):\n    result = [0] * len(boxes)\n    count, total = 0, 0\n\n    for i in range(len(boxes)):\n        total += count\n        result[i] = total\n        if boxes[i] == '1':\n            count += 1\n\n    count, total = 0, 0\n    for i in range(len(boxes) - 1, -1, -1):\n        total += count\n        result[i] += total\n        if boxes[i] == '1':\n            count += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `n x n` **0-indexed** grid with some artifacts buried in it. You are given the integer `n` and a **0-indexed** 2D integer array `artifacts` describing the positions of the rectangular artifacts where `artifacts[i] = [r1i, c1i, r2i, c2i]` denotes that the `ith` artifact is buried in the subgrid where:\n\n*   `(r1i, c1i)` is the coordinate of the **top-left** cell of the `ith` artifact and\n*   `(r2i, c2i)` is the coordinate of the **bottom-right** cell of the `ith` artifact.\n\nYou will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.\n\nGiven a **0-indexed** 2D integer array `dig` where `dig[i] = [ri, ci]` indicates that you will excavate the cell `(ri, ci)`, return _the number of artifacts that you can extract_.\n\nThe test cases are generated such that:\n\n*   No two artifacts overlap.\n*   Each artifact only covers at most `4` cells.\n*   The entries of `dig` are unique.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, artifacts = \\[\\[0,0,0,0\\],\\[0,1,1,1\\]\\], dig = \\[\\[0,0\\],\\[0,1\\]\\]\n**Output:** 1\n**Explanation:** \nThe different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.\nThere is 1 artifact that can be extracted, namely the red artifact.\nThe blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.\nThus, we return 1.\n\n**Example 2:**\n\n**Input:** n = 2, artifacts = \\[\\[0,0,0,0\\],\\[0,1,1,1\\]\\], dig = \\[\\[0,0\\],\\[0,1\\],\\[1,1\\]\\]\n**Output:** 2\n**Explanation:** Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2. \n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `1 <= artifacts.length, dig.length <= min(n2, 105)`\n*   `artifacts[i].length == 4`\n*   `dig[i].length == 2`\n*   `0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1`\n*   `r1i <= r2i`\n*   `c1i <= c2i`\n*   No two artifacts will overlap.\n*   The number of cells covered by an artifact is **at most** `4`.\n*   The entries of `dig` are unique.Check if each coordinate of each artifact has been excavated. How can we do this quickly without iterating over the dig array every time? Consider marking all excavated cells in a 2D boolean array.",
          "output": "def arrange_pairs(pairs):\n    adj = {pair[0]: pair for pair in pairs}\n    result = []\n    start = pairs[0][0]\n\n    while adj:\n        pair = adj.pop(start)\n        result.append(pair)\n        start = pair[1]\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are an ant tasked with adding `n` new rooms numbered `0` to `n-1` to your colony. You are given the expansion plan as a **0-indexed** integer array of length `n`, `prevRoom`, where `prevRoom[i]` indicates that you must build room `prevRoom[i]` before building room `i`, and these two rooms must be connected **directly**. Room `0` is already built, so `prevRoom[0] = -1`. The expansion plan is given such that once all the rooms are built, every room will be reachable from room `0`.\n\nYou can only build **one room** at a time, and you can travel freely between rooms you have **already built** only if they are **connected**. You can choose to build **any room** as long as its **previous room** is already built.\n\nReturn _the **number of different orders** you can build all the rooms in_. Since the answer may be large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** prevRoom = \\[-1,0,1\\]\n**Output:** 1\n**Explanation:** There is only one way to build the additional rooms: 0 -> 1 -> 2\n\n**Example 2:**\n\n**Input:** prevRoom = \\[-1,0,0,1,2\\]\n**Output:** 6\n**Explanation:**\nThe 6 ways are:\n0 -> 1 -> 3 -> 2 -> 4\n0 -> 2 -> 4 -> 1 -> 3\n0 -> 1 -> 2 -> 3 -> 4\n0 -> 1 -> 2 -> 4 -> 3\n0 -> 2 -> 1 -> 3 -> 4\n0 -> 2 -> 1 -> 4 -> 3\n\n**Constraints:**\n\n*   `n == prevRoom.length`\n*   `2 <= n <= 105`\n*   `prevRoom[0] == -1`\n*   `0 <= prevRoom[i] < n` for all `1 <= i < n`\n*   Every room is reachable from room `0` once all the rooms are built.Use dynamic programming. Let dp[i] be the number of ways to solve the problem for the subtree of node i. Imagine you are trying to fill an array with the order of traversal, dp[i] equals the multiplications of the number of ways to distribute the subtrees of the children of i on the array using combinatorics, multiplied bu their dp values.",
          "output": "def findCenter(edges):\n    if edges[0][0] == edges[1][0] or edges[0][0] == edges[1][1]:\n        return edges[0][0]\n    return edges[0][1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, return `true` _if the number of occurrences of each value in the array is **unique** or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,2,1,1,3\\]\n**Output:** true\n**Explanation:** The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** arr = \\[-3,0,1,-3,1,1,1,-3,10,0\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `-1000 <= arr[i] <= 1000`Find the number of occurrences of each element in the array using a hash map. Iterate through the hash map and check if there is a repeated value.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef delNodes(root, to_delete):\n    forest = []\n    to_delete_set = set(to_delete)\n    helper(root, True, to_delete_set, forest)\n    return forest\n\ndef helper(node, isRoot, to_delete, forest):\n    if not node:\n        return None\n    deleted = node.val in to_delete\n    if isRoot and not deleted:\n        forest.append(node)\n    node.left = helper(node.left, deleted, to_delete, forest)\n    node.right = helper(node.right, deleted, to_delete, forest)\n    return None if deleted else node\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and an integer `k`, a `k` **duplicate removal** consists of choosing `k` adjacent and equal letters from `s` and removing them, causing the left and the right side of the deleted substring to concatenate together.\n\nWe repeatedly make `k` **duplicate removals** on `s` until we no longer can.\n\nReturn _the final string after all such duplicate removals have been made_. It is guaranteed that the answer is **unique**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcd \", k = 2\n**Output:**  \"abcd \"\n**Explanation:** There's nothing to delete.\n\n**Example 2:**\n\n**Input:** s =  \"deeedbbcccbdaa \", k = 3\n**Output:**  \"aa \"\n**Explanation:** \nFirst delete  \"eee \" and  \"ccc \", get  \"ddbbbdaa \"\nThen delete  \"bbb \", get  \"dddaa \"\nFinally delete  \"ddd \", get  \"aa \"\n\n**Example 3:**\n\n**Input:** s =  \"pbbcggttciiippooaais \", k = 2\n**Output:**  \"ps \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `2 <= k <= 104`\n*   `s` only contains lowercase English letters.Use a stack to store the characters, when there are k same characters, delete them. To make it more efficient, use a pair to store the value and the count of each character.",
          "output": "def removeDuplicates(s: str, k: int) -> str:\n    stack = []\n    for c in s:\n        if not stack or stack[-1][0] != c:\n            stack.append((c, 1))\n        elif stack[-1][1] + 1 != k:\n            stack[-1] = (c, stack[-1][1] + 1)\n        else:\n            stack.pop()\n    return ''.join(c * count for c, count in stack)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `s` and `t` of the same length and an integer `maxCost`.\n\nYou want to change `s` to `t`. Changing the `ith` character of `s` to `ith` character of `t` costs `|s[i] - t[i]|` (i.e., the absolute difference between the ASCII values of the characters).\n\nReturn _the maximum length of a substring of_ `s` _that can be changed to be the same as the corresponding substring of_ `t` _with a cost less than or equal to_ `maxCost`. If there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcd \", t =  \"bcdf \", maxCost = 3\n**Output:** 3\n**Explanation:**  \"abc \" of s can change to  \"bcd \".\nThat costs 3, so the maximum length is 3.\n\n**Example 2:**\n\n**Input:** s =  \"abcd \", t =  \"cdef \", maxCost = 3\n**Output:** 1\n**Explanation:** Each character in s costs 2 to change to character in t,  so the maximum length is 1.\n\n**Example 3:**\n\n**Input:** s =  \"abcd \", t =  \"acde \", maxCost = 0\n**Output:** 1\n**Explanation:** You cannot make any change, so the maximum length is 1.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `t.length == s.length`\n*   `0 <= maxCost <= 106`\n*   `s` and `t` consist of only lowercase English letters.Calculate the differences between a[i] and b[i]. Use a sliding window to track the longest valid substring.",
          "output": "def split_string(seq: str):\n    result = [0] * len(seq)\n    count = 0\n\n    for i in range(len(seq)):\n        if seq[i] == '(':\n            result[i] = count % 2\n            count += 1\n        else:\n            count -= 1\n            result[i] = count % 2\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: In an `n*n` grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`.\n\nIn one move the snake can:\n\n*   Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n*   Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n*   Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`.  \n    \n*   Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`.  \n    \n\nReturn the minimum number of moves to reach the target.\n\nIf there is no way to reach the target, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,0,0,0,0,1\\],\n               \\[1,1,0,0,1,0\\],\n               \\[0,0,0,0,1,1\\],\n               \\[0,0,1,0,1,0\\],\n               \\[0,1,1,0,0,0\\],\n               \\[0,1,1,0,0,0\\]\\]\n**Output:** 11\n**Explanation:**\nOne possible solution is \\[right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down\\].\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,0,1,1,1,1\\],\n               \\[0,0,0,0,1,1\\],\n               \\[1,1,0,0,0,1\\],\n               \\[1,1,1,0,0,1\\],\n               \\[1,1,1,0,0,1\\],\n               \\[1,1,1,0,0,0\\]\\]\n**Output:** 9\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `0 <= grid[i][j] <= 1`\n*   It is guaranteed that the snake starts at empty cells.Use BFS to find the answer. The state of the BFS is the position (x, y) along with a binary value that specifies if the position is horizontal or vertical.",
          "output": "def trimmed_mean(arr):\n    n = len(arr)\n    remove = int(n * 0.05)\n    arr.sort()\n    return sum(arr[remove:n - remove]) / (n - 2 * remove)\n"
     },
     {
          "instruction": "Write python code for this problem: You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.\n\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\n\n*   A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.\n*   A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V \" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\n\nReturn _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the column that the ball falls out of at the bottom after dropping the ball from the_ `ith` _column at the top, or `-1` _if the ball gets stuck in the box_._\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,1,-1,-1\\],\\[1,1,1,-1,-1\\],\\[-1,-1,-1,1,1\\],\\[1,1,1,1,-1\\],\\[-1,-1,-1,-1,-1\\]\\]\n**Output:** \\[1,-1,-1,-1,-1\\]\n**Explanation:** This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[-1\\]\\]\n**Output:** \\[-1\\]\n**Explanation:** The ball gets stuck against the left wall.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,1,1,1,1\\],\\[-1,-1,-1,-1,-1,-1\\],\\[1,1,1,1,1,1\\],\\[-1,-1,-1,-1,-1,-1\\]\\]\n**Output:** \\[0,1,2,3,4,-1\\]\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 100`\n*   `grid[i][j]` is `1` or `-1`.Use DFS. Traverse the path of the ball downwards until you reach the bottom or get stuck.",
          "output": "def minCostConnectPoints(points):\n    n = len(points)\n    cost = [float('inf')] * n\n    visited = [False] * n\n    cost[0] = 0\n\n    ans = 0\n\n    for _ in range(n):\n        min_cost = float('inf')\n        cur_point = -1\n        for j in range(n):\n            if not visited[j] and cost[j] < min_cost:\n                min_cost = cost[j]\n                cur_point = j\n\n        visited[cur_point] = True\n        ans += min_cost\n\n        for j in range(n):\n            if not visited[j]:\n                new_cost = abs(points[cur_point][0] - points[j][0]) + abs(points[cur_point][1] - points[j][1])\n                cost[j] = min(cost[j], new_cost)\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succProb[i]`.\n\nGiven two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability.\n\nIf there is no path from `start` to `end`, **return 0**. Your answer will be accepted if it differs from the correct answer by at most **1e-5**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,2\\]\\], succProb = \\[0.5,0.5,0.2\\], start = 0, end = 2\n**Output:** 0.25000\n**Explanation:** There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 \\* 0.5 = 0.25.\n\n**Example 2:**\n\n**Input:** n = 3, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,2\\]\\], succProb = \\[0.5,0.5,0.3\\], start = 0, end = 2\n**Output:** 0.30000\n\n**Example 3:**\n\n**Input:** n = 3, edges = \\[\\[0,1\\]\\], succProb = \\[0.5\\], start = 0, end = 2\n**Output:** 0.00000\n**Explanation:** There is no path between 0 and 2.\n\n**Constraints:**\n\n*   `2 <= n <= 10^4`\n*   `0 <= start, end < n`\n*   `start != end`\n*   `0 <= a, b < n`\n*   `a != b`\n*   `0 <= succProb.length == edges.length <= 2*10^4`\n*   `0 <= succProb[i] <= 1`\n*   There is at most one edge between every two nodes.Multiplying probabilities will result in precision errors. Take log probabilities to sum up numbers instead of multiplying them. Use Dijkstra's algorithm to find the minimum path between the two nodes after negating all costs.",
          "output": "def min_start_value(nums):\n    min_sum, sum = 0, 0\n    for num in nums:\n        sum += num\n        min_sum = min(min_sum, sum)\n    return 1 - min_sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return the sum of `floor(nums[i] / nums[j])` for all pairs of indices `0 <= i, j < nums.length` in the array. Since the answer may be too large, return it **modulo** `109 + 7`.\n\nThe `floor()` function returns the integer part of the division.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,5,9\\]\n**Output:** 10\n**Explanation:**\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.\n\n**Example 2:**\n\n**Input:** nums = \\[7,7,7,7,7,7,7\\]\n**Output:** 49\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`Find the frequency (number of occurrences) of all elements in the array. For each element, iterate through its multiples and multiply frequencies to find the answer.",
          "output": "def sum_of_floored_pairs(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    max_element = max(nums)\n    cnt = [0] * (max_element + 1)\n    for num in nums:\n        cnt[num] += 1\n    for i in range(1, max_element + 1):\n        cnt[i] += cnt[i - 1]\n\n    res = 0\n    for num in nums:\n        j, k = 1, 1\n        while k <= max_element:\n            res += j * (cnt[min(k + num - 1, max_element)] - cnt[k - 1])\n            res %= MOD\n            j += 1\n            k += num\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: We have `n` chips, where the position of the `ith` chip is `position[i]`.\n\nWe need to move all the chips to **the same position**. In one step, we can change the position of the `ith` chip from `position[i]` to:\n\n*   `position[i] + 2` or `position[i] - 2` with `cost = 0`.\n*   `position[i] + 1` or `position[i] - 1` with `cost = 1`.\n\nReturn _the minimum cost_ needed to move all the chips to the same position.\n\n",
          "input": "**Example 1:**\n\n**Input:** position = \\[1,2,3\\]\n**Output:** 1\n**Explanation:** First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n\n**Example 2:**\n\n**Input:** position = \\[2,2,2,3,3\\]\n**Output:** 2\n**Explanation:** We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.\n\n**Example 3:**\n\n**Input:** position = \\[1,1000000000\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= position.length <= 100`\n*   `1 <= position[i] <= 10^9`The first move keeps the parity of the element as it is. The second move changes the parity of the element. Since the first move is free, if all the numbers have the same parity, the answer would be zero. Find the minimum cost to make all the numbers have the same parity.",
          "output": "def sort_array(arr1, arr2):\n    counts = {}\n    result = []\n\n    for num in arr1:\n        counts[num] = counts.get(num, 0) + 1\n\n    for num in arr2:\n        if num in counts:\n            result.extend([num] * counts[num])\n            del counts[num]\n\n    for num in sorted(counts.keys()):\n        result.extend([num] * counts[num])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\nA **subsequence** is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3,4\\], difference = 1\n**Output:** 4\n**Explanation:** The longest arithmetic subsequence is \\[1,2,3,4\\].\n\n**Example 2:**\n\n**Input:** arr = \\[1,3,5,7\\], difference = 1\n**Output:** 1\n**Explanation:** The longest arithmetic subsequence is any single element.\n\n**Example 3:**\n\n**Input:** arr = \\[1,5,7,8,5,3,4,2,1\\], difference = -2\n**Output:** 4\n**Explanation:** The longest arithmetic subsequence is \\[7,5,3,1\\].\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `-104 <= arr[i], difference <= 104`\n\nThe node of a binary tree is a leaf if and only if it has no children. The depth of the node of a binary tree is the number of nodes along the path from the root node down to the node itself.Use dynamic programming. Let dp[i] be the maximum length of a subsequence of the given difference whose last element is i. dp[i] = 1 + dp[i-k]",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:\n        def dfs(node):\n            if not node:\n                return (None, 0)\n            left, right = dfs(node.left), dfs(node.right)\n            if left[1] > right[1]:\n                return (left[0], left[1] + 1)\n            elif left[1] < right[1]:\n                return (right[0], right[1] + 1)\n            else:\n                return (node, left[1] + 1)\n        \n        return dfs(root)[0]\n"
     },
     {
          "instruction": "Write python code for this problem: In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n*   Every time you are located in a cell you will collect all the gold in that cell.\n*   From your position, you can walk one step to the left, right, up, or down.\n*   You can't visit the same cell more than once.\n*   Never visit a cell with `0` gold.\n*   You can start and stop collecting gold from **any** position in the grid that has some gold.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,6,0\\],\\[5,8,7\\],\\[0,9,0\\]\\]\n**Output:** 24\n**Explanation:**\n\\[\\[0,6,0\\],\n \\[5,8,7\\],\n \\[0,9,0\\]\\]\nPath to get the maximum gold, 9 -> 8 -> 7.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0,7\\],\\[2,0,6\\],\\[3,4,5\\],\\[0,3,0\\],\\[9,0,20\\]\\]\n**Output:** 28\n**Explanation:**\n\\[\\[1,0,7\\],\n \\[2,0,6\\],\n \\[3,4,5\\],\n \\[0,3,0\\],\n \\[9,0,20\\]\\]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 15`\n*   `0 <= grid[i][j] <= 100`\n*   There are at most **25** cells containing gold.Use recursion to try all such paths and find the one with the maximum value.",
          "output": "def longest_wpi(hours):\n    score = 0\n    max_length = 0\n    first_occurrence = {}\n\n    for i, h in enumerate(hours):\n        score += 1 if h > 8 else -1\n        if score > 0:\n            max_length = i + 1\n        else:\n            if score not in first_occurrence:\n                first_occurrence[score] = i\n            if score - 1 in first_occurrence:\n                max_length = max(max_length, i - first_occurrence[score - 1])\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n*   Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n*   Each vowel `'a'` may only be followed by an `'e'`.\n*   Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n*   Each vowel `'i'` **may not** be followed by another `'i'`.\n*   Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n*   Each vowel `'u'` may only be followed by an `'a'.`\n\nSince the answer may be too large, return it modulo `10^9 + 7.`\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 5\n**Explanation:** All possible strings are:  \"a \",  \"e \",  \"i \" ,  \"o \" and  \"u \".\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 10\n**Explanation:** All possible strings are:  \"ae \",  \"ea \",  \"ei \",  \"ia \",  \"ie \",  \"io \",  \"iu \",  \"oi \",  \"ou \" and  \"ua \".\n\n**Example 3:**\n\n**Input:** n = 5\n**Output:** 68\n\n**Constraints:**\n\n*   `1 <= n <= 2 * 10^4`Use dynamic programming. Let dp[i][j] be the number of strings of length i that ends with the j-th vowel. Deduce the recurrence from the given relations between vowels.",
          "output": "from typing import List\n\ndef smallestSufficientTeam(req_skills: List[str], people: List[List[str]]) -> List[int]:\n    skill_to_int = {s: i for i, s in enumerate(req_skills)}\n    people_skills = [sum(1 << skill_to_int[skill] for skill in person) for person in people]\n        \n    n = len(req_skills)\n    INF = 64\n    dp = [INF] * (1 << n)\n    dp[0] = 0\n    parent = [None] * (1 << n)\n        \n    for i, person_skills in enumerate(people_skills):\n        for completed_skills in range((1 << n) - 1, -1, -1):\n            with_person_skills = completed_skills | person_skills\n            if dp[with_person_skills] > dp[completed_skills] + 1:\n                dp[with_person_skills] = dp[completed_skills] + 1\n                parent[with_person_skills] = completed_skills\n                \n    ans = [0] * dp[-1]\n    cur = (1 << n) - 1\n    t = dp[-1] - 1\n        \n    for i in range(len(people) - 1, -1, -1):\n        old = parent[cur]\n        diff = cur ^ old\n        is_essential = (people_skills[i] & diff) > 0\n        if is_essential:\n            ans[t] = i\n            t -= 1\n        cur = old\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `mapping` which represents the mapping rule of a shuffled decimal system. `mapping[i] = j` means digit `i` should be mapped to digit `j` in this system.\n\nThe **mapped value** of an integer is the new integer obtained by replacing each occurrence of digit `i` in the integer with `mapping[i]` for all `0 <= i <= 9`.\n\nYou are also given another integer array `nums`. Return _the array_ `nums` _sorted in **non-decreasing** order based on the **mapped values** of its elements._\n\n**Notes:**\n\n*   Elements with the same mapped values should appear in the **same relative order** as in the input.\n*   The elements of `nums` should only be sorted based on their mapped values and **not be replaced** by them.\n\n",
          "input": "**Example 1:**\n\n**Input:** mapping = \\[8,9,4,0,2,1,3,5,7,6\\], nums = \\[991,338,38\\]\n**Output:** \\[338,38,991\\]\n**Explanation:** \nMap the number 991 as follows:\n1. mapping\\[9\\] = 6, so all occurrences of the digit 9 will become 6.\n2. mapping\\[1\\] = 9, so all occurrences of the digit 1 will become 9.\nTherefore, the mapped value of 991 is 669.\n338 maps to 007, or 7 after removing the leading zeros.\n38 maps to 07, which is also 7 after removing leading zeros.\nSince 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.\nThus, the sorted array is \\[338,38,991\\].\n\n**Example 2:**\n\n**Input:** mapping = \\[0,1,2,3,4,5,6,7,8,9\\], nums = \\[789,456,123\\]\n**Output:** \\[123,456,789\\]\n**Explanation:** 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is \\[123,456,789\\].\n\n**Constraints:**\n\n*   `mapping.length == 10`\n*   `0 <= mapping[i] <= 9`\n*   All the values of `mapping[i]` are **unique**.\n*   `1 <= nums.length <= 3 * 104`\n*   `0 <= nums[i] < 109`Map the original numbers to new numbers by the mapping rule and sort the new numbers. To maintain the same relative order for equal mapped values, use the index in the original input array as a tiebreaker.",
          "output": "def min_buckets(street):\n    buckets = 0\n    i = 0\n    n = len(street)\n    while i < n:\n        if street[i] == 'H':\n            if i + 1 < n and street[i + 1] == '.':\n                buckets += 1\n                i += 2\n            elif i + 2 < n and street[i + 2] == '.':\n                buckets += 1\n                i += 3\n            else:\n                return -1\n        else:\n            i += 1\n    return buckets\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `candies`. Each element in the array denotes a pile of candies of size `candies[i]`. You can divide each pile into any number of **sub piles**, but you **cannot** merge two piles together.\n\nYou are also given an integer `k`. You should allocate piles of candies to `k` children such that each child gets the **same** number of candies. Each child can take **at most one** pile of candies and some piles of candies may go unused.\n\nReturn _the **maximum number of candies** each child can get._\n\n",
          "input": "**Example 1:**\n\n**Input:** candies = \\[5,8,6\\], k = 3\n**Output:** 5\n**Explanation:** We can divide candies\\[1\\] into 2 piles of size 5 and 3, and candies\\[2\\] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.\n\n**Example 2:**\n\n**Input:** candies = \\[2,5\\], k = 11\n**Output:** 0\n**Explanation:** There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.\n\n**Constraints:**\n\n*   `1 <= candies.length <= 105`\n*   `1 <= candies[i] <= 107`\n*   `1 <= k <= 1012`For a fixed number of candies c, how can you check if each child can get c candies? Use binary search to find the maximum c as the answer.",
          "output": "def count_rods_with_all_colors(rings: str) -> int:\n    rod_colors = [0] * 10\n\n    for i in range(0, len(rings), 2):\n        color = ord(rings[i]) - ord('A')\n        rod = int(rings[i + 1])\n\n        rod_colors[rod] |= (1 << color)\n\n    return rod_colors.count(7)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s` and are tasked with finding two **non-intersecting palindromic** substrings of **odd** length such that the product of their lengths is maximized.\n\nMore formally, you want to choose four integers `i`, `j`, `k`, `l` such that `0 <= i <= j < k <= l < s.length` and both the substrings `s[i...j]` and `s[k...l]` are palindromes and have odd lengths. `s[i...j]` denotes a substring from index `i` to index `j` **inclusive**.\n\nReturn _the **maximum** possible product of the lengths of the two non-intersecting palindromic substrings._\n\nA **palindrome** is a string that is the same forward and backward. A **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ababbb \"\n**Output:** 9\n**Explanation:** Substrings  \"aba \" and  \"bbb \" are palindromes with odd length. product = 3 \\* 3 = 9.\n\n**Example 2:**\n\n**Input:** s =  \"zaaaxbbby \"\n**Output:** 9\n**Explanation:** Substrings  \"aaa \" and  \"bbb \" are palindromes with odd length. product = 3 \\* 3 = 9.\n\n**Constraints:**\n\n*   `2 <= s.length <= 105`\n*   `s` consists of lowercase English letters.You can use Manacher's algorithm to get the maximum palindromic substring centered at each index After using Manacher's for each center use a line sweep from the center to the left and from the center to the right to find for each index the farthest center to it with distance \u2264 palin[center] After that, find the maximum palindrome size for each prefix in the string and for each suffix and the answer would be max(prefix[i] * suffix[i + 1])",
          "output": "def is_pangram(sentence):\n    alphabet = [False] * 26\n    for c in sentence:\n        alphabet[ord(c) - ord('a')] = True\n    return all(alphabet)\n"
     },
     {
          "instruction": "Write python code for this problem: Design a **Skiplist** without using any built-in libraries.\n\nA **skiplist** is a data structure that takes `O(log(n))` time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.\n\nFor example, we have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. The Skiplist works this way:\n\n  \nArtyom Kalinin \\[CC BY-SA 3.0\\], via [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Skip_list_add_element-en.gif \"Artyom Kalinin [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons\")\n\nYou can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than `O(n)`. It can be proven that the average time complexity for each operation is `O(log(n))` and space complexity is `O(n)`.\n\nSee more about Skiplist: [https://en.wikipedia.org/wiki/Skip\\_list](https://en.wikipedia.org/wiki/Skip_list)\n\nImplement the `Skiplist` class:\n\n*   `Skiplist()` Initializes the object of the skiplist.\n*   `bool search(int target)` Returns `true` if the integer `target` exists in the Skiplist or `false` otherwise.\n*   `void add(int num)` Inserts the value `num` into the SkipList.\n*   `bool erase(int num)` Removes the value `num` from the Skiplist and returns `true`. If `num` does not exist in the Skiplist, do nothing and return `false`. If there exist multiple `num` values, removing any one of them is fine.\n\nNote that duplicates may exist in the Skiplist, your code needs to handle this situation.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Skiplist \",  \"add \",  \"add \",  \"add \",  \"search \",  \"add \",  \"search \",  \"erase \",  \"erase \",  \"search \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[3\\], \\[0\\], \\[4\\], \\[1\\], \\[0\\], \\[1\\], \\[1\\]\\]\n**Output**\n\\[null, null, null, null, false, null, true, false, true, false\\]\n\n**Explanation**\nSkiplist skiplist = new Skiplist();\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0); // return False\nskiplist.add(4);\nskiplist.search(1); // return True\nskiplist.erase(0);  // return False, 0 is not in skiplist.\nskiplist.erase(1);  // return True\nskiplist.search(1); // return False, 1 has already been erased.\n\n**Constraints:**\n\n*   `0 <= num, target <= 2 * 104`\n*   At most `5 * 104` calls will be made to `search`, `add`, and `erase`.",
          "output": "def corp_flight_bookings(bookings, n):\n    answer = [0] * n\n    for start, end, seats in bookings:\n        answer[start - 1] += seats\n        if end < n:\n            answer[end] -= seats\n    for i in range(1, n):\n        answer[i] += answer[i - 1]\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: **Balanced** strings are those that have an equal quantity of `'L'` and `'R'` characters.\n\nGiven a **balanced** string `s`, split it into some number of substrings such that:\n\n*   Each substring is balanced.\n\nReturn _the **maximum** number of balanced strings you can obtain._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"RLRRLLRLRL \"\n**Output:** 4\n**Explanation:** s can be split into  \"RL \",  \"RRLL \",  \"RL \",  \"RL \", each substring contains same number of 'L' and 'R'.\n\n**Example 2:**\n\n**Input:** s =  \"RLRRRLLRLL \"\n**Output:** 2\n**Explanation:** s can be split into  \"RL \",  \"RRRLLRLL \", each substring contains same number of 'L' and 'R'.\nNote that s cannot be split into  \"RL \",  \"RR \",  \"RL \",  \"LR \",  \"LL \", because the 2nd and 5th substrings are not balanced.\n\n**Example 3:**\n\n**Input:** s =  \"LLLLRRRR \"\n**Output:** 1\n**Explanation:** s can be split into  \"LLLLRRRR \".\n\n**Constraints:**\n\n*   `2 <= s.length <= 1000`\n*   `s[i]` is either `'L'` or `'R'`.\n*   `s` is a **balanced** string.Loop from left to right maintaining a balance variable when it gets an L increase it by one otherwise decrease it by one. Whenever the balance variable reaches zero then we increase the answer by one.",
          "output": "def find_special_integer(arr):\n    n = len(arr)\n    required_count = n // 4\n    for i in range(n):\n        if arr[i] == arr[i + required_count]:\n            return arr[i]\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: On a **0-indexed** `8 x 8` chessboard, there can be multiple black queens ad one white king.\n\nYou are given a 2D integer array `queens` where `queens[i] = [xQueeni, yQueeni]` represents the position of the `ith` black queen on the chessboard. You are also given an integer array `king` of length `2` where `king = [xKing, yKing]` represents the position of the white king.\n\nReturn _the coordinates of the black queens that can directly attack the king_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** queens = \\[\\[0,1\\],\\[1,0\\],\\[4,0\\],\\[0,4\\],\\[3,3\\],\\[2,4\\]\\], king = \\[0,0\\]\n**Output:** \\[\\[0,1\\],\\[1,0\\],\\[3,3\\]\\]\n**Explanation:** The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).\n\n**Example 2:**\n\n**Input:** queens = \\[\\[0,0\\],\\[1,1\\],\\[2,2\\],\\[3,4\\],\\[3,5\\],\\[4,4\\],\\[4,5\\]\\], king = \\[3,3\\]\n**Output:** \\[\\[2,2\\],\\[3,4\\],\\[4,4\\]\\]\n**Explanation:** The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).\n\n**Constraints:**\n\n*   `1 <= queens.length < 64`\n*   `queens[i].length == king.length == 2`\n*   `0 <= xQueeni, yQueeni, xKing, yKing < 8`\n*   All the given positions are **unique**.Check 8 directions around the King. Find the nearest queen in each direction.",
          "output": "def remove_covered_intervals(intervals):\n    intervals.sort(key=lambda x: (x[0], -x[1]))\n    \n    count = 0\n    end = 0\n    for i in intervals:\n        if i[1] > end:\n            count += 1\n            end = i[1]\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: A die simulator generates a random number from `1` to `6` for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (**1-indexed**) consecutive times.\n\nGiven an array of integers `rollMax` and an integer `n`, return _the number of distinct sequences that can be obtained with exact_ `n` _rolls_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\nTwo sequences are considered different if at least one element differs from each other.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, rollMax = \\[1,1,2,2,2,3\\]\n**Output:** 34\n**Explanation:** There will be 2 rolls of die, if there are no constraints on the die, there are 6 \\* 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n\n**Example 2:**\n\n**Input:** n = 2, rollMax = \\[1,1,1,1,1,1\\]\n**Output:** 30\n\n**Example 3:**\n\n**Input:** n = 3, rollMax = \\[1,1,1,2,2,3\\]\n**Output:** 181\n\n**Constraints:**\n\n*   `1 <= n <= 5000`\n*   `rollMax.length == 6`\n*   `1 <= rollMax[i] <= 15`Think on Dynamic Programming. DP(pos, last) which means we are at the position pos having as last the last character seen.",
          "output": "def areConnected(n, threshold, queries):\n    answer = [False] * len(queries)\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def unite(x, y):\n        rootx = find(x)\n        rooty = find(y)\n        if rootx != rooty:\n            if rank[rootx] > rank[rooty]:\n                rootx, rooty = rooty, rootx\n            parent[rootx] = rooty\n            if rank[rootx] == rank[rooty]:\n                rank[rooty] += 1\n\n    for i in range(threshold + 1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            unite(i, j)\n\n    for i, query in enumerate(queries):\n        answer[i] = find(query[0]) == find(query[1])\n\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove **exactly one** element from this prefix so that every number that has appeared in it will have the same number of occurrences.\n\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,2,1,1,5,3,3,5\\]\n**Output:** 7\n**Explanation:** For the subarray \\[2,2,1,1,5,3,3\\] of length 7, if we remove nums\\[4\\] = 5, we will get \\[2,2,1,1,3,3\\], so that each number will appear exactly twice.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,2,2,2,3,3,3,4,4,4,5\\]\n**Output:** 13\n\n**Constraints:**\n\n*   `2 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`Keep track of the min and max frequencies. The number to be eliminated must have a frequency of 1, same as the others or the same +1.",
          "output": "def minFallingPathSum(grid):\n    n = len(grid)\n    for i in range(1, n):\n        for j in range(n):\n            minVal = float('inf')\n            for k in range(n):\n                if k == j:\n                    continue\n                minVal = min(minVal, grid[i - 1][k])\n            grid[i][j] += minVal\n    return min(grid[n - 1])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [directioni, amounti]`:\n\n*   `directioni` can be `0` (for left shift) or `1` (for right shift).\n*   `amounti` is the amount by which string `s` is to be shifted.\n*   A left shift by 1 means remove the first character of `s` and append it to the end.\n*   Similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning.\n\nReturn the final string after all operations.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abc \", shift = \\[\\[0,1\\],\\[1,2\\]\\]\n**Output:**  \"cab \"\n**Explanation:** \n\\[0,1\\] means shift to left by 1.  \"abc \" ->  \"bca \"\n\\[1,2\\] means shift to right by 2.  \"bca \" ->  \"cab \"\n\n**Example 2:**\n\n**Input:** s =  \"abcdefg \", shift = \\[\\[1,1\\],\\[1,1\\],\\[0,2\\],\\[1,3\\]\\]\n**Output:**  \"efgabcd \"\n**Explanation:**  \n\\[1,1\\] means shift to right by 1.  \"abcdefg \" ->  \"gabcdef \"\n\\[1,1\\] means shift to right by 1.  \"gabcdef \" ->  \"fgabcde \"\n\\[0,2\\] means shift to left by 2.  \"fgabcde \" ->  \"abcdefg \"\n\\[1,3\\] means shift to right by 3.  \"abcdefg \" ->  \"efgabcd \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` only contains lower case English letters.\n*   `1 <= shift.length <= 100`\n*   `shift[i].length == 2`\n*   `directioni` is either `0` or `1`.\n*   `0 <= amounti <= 100`Intuitively performing all shift operations is acceptable due to the constraints. You may notice that left shift cancels the right shift, so count the total left shift times (may be negative if the final result is right shift), and perform it once.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorder(root):\n    output = []\n    stack = []\n    current = root\n\n    while current or stack:\n        while current:\n            stack.append(current)\n            current = current.left\n        current = stack.pop()\n        output.append(current.val)\n        current = current.right\n\n    return output\n\ndef getAllElements(root1, root2):\n    tree1 = inorder(root1)\n    tree2 = inorder(root2)\n    result = []\n    i, j = 0, 0\n\n    while i < len(tree1) or j < len(tree2):\n        if i < len(tree1) and (j >= len(tree2) or tree1[i] <= tree2[j]):\n            result.append(tree1[i])\n            i += 1\n        else:\n            result.append(tree2[j])\n            j += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` representing the contents of a **pile**, where `nums[0]` is the topmost element of the pile.\n\nIn one move, you can perform **either** of the following:\n\n*   If the pile is not empty, **remove** the topmost element of the pile.\n*   If there are one or more removed elements, **add** any one of them back onto the pile. This element becomes the new topmost element.\n\nYou are also given an integer `k`, which denotes the total number of moves to be made.\n\nReturn _the **maximum value** of the topmost element of the pile possible after **exactly**_ `k` _moves_. In case it is not possible to obtain a non-empty pile after `k` moves, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,2,2,4,0,6\\], k = 4\n**Output:** 5\n**Explanation:**\nOne of the ways we can end with 5 at the top of the pile after 4 moves is as follows:\n- Step 1: Remove the topmost element = 5. The pile becomes \\[2,2,4,0,6\\].\n- Step 2: Remove the topmost element = 2. The pile becomes \\[2,4,0,6\\].\n- Step 3: Remove the topmost element = 2. The pile becomes \\[4,0,6\\].\n- Step 4: Add 5 back onto the pile. The pile becomes \\[5,4,0,6\\].\nNote that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves.\n\n**Example 2:**\n\n**Input:** nums = \\[2\\], k = 1\n**Output:** -1\n**Explanation:** \nIn the first move, our only option is to pop the topmost element of the pile.\nSince it is not possible to obtain a non-empty pile after one move, we return -1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i], k <= 109`For each index i, how can we check if nums[i] can be present at the top of the pile or not after k moves? For which conditions will we end up with an empty pile?",
          "output": "def to_base_k(num, k):\n    base_k_num = ''\n    while num:\n        base_k_num = str(num % k) + base_k_num\n        num //= k\n    return base_k_num\n\ndef is_k_mirror(num, k):\n    base_10_num = str(num)\n    base_k_num = to_base_k(num, k)\n    return base_10_num == base_10_num[::-1] and base_k_num == base_k_num[::-1]\n\ndef sum_k_mirror_numbers(k, n):\n    total = 0\n    num = 0\n    while n:\n        if is_k_mirror(num, k):\n            total += num\n            n -= 1\n        num += 1\n    return total\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a positive integer `n` representing the number of nodes in a **connected undirected graph** containing **exactly one** cycle. The nodes are numbered from `0` to `n - 1` (**inclusive**).\n\nYou are also given a 2D integer array `edges`, where `edges[i] = [node1i, node2i]` denotes that there is a **bidirectional** edge connecting `node1i` and `node2i` in the graph.\n\nThe distance between two nodes `a` and `b` is defined to be the **minimum** number of edges that are needed to go from `a` to `b`.\n\nReturn _an integer array `answer`_ _of size_ `n`_, where_ `answer[i]` _is the **minimum** distance between the_ `ith` _node and **any** node in the cycle._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7, edges = \\[\\[1,2\\],\\[2,4\\],\\[4,3\\],\\[3,1\\],\\[0,1\\],\\[5,2\\],\\[6,5\\]\\]\n**Output:** \\[1,0,0,0,0,1,2\\]\n**Explanation:**\nThe nodes 1, 2, 3, and 4 form the cycle.\nThe distance from 0 to 1 is 1.\nThe distance from 1 to 1 is 0.\nThe distance from 2 to 2 is 0.\nThe distance from 3 to 3 is 0.\nThe distance from 4 to 4 is 0.\nThe distance from 5 to 2 is 1.\nThe distance from 6 to 2 is 2.\n\n**Example 2:**\n\n**Input:** n = 9, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,2\\],\\[2,6\\],\\[6,7\\],\\[6,8\\],\\[0,3\\],\\[3,4\\],\\[3,5\\]\\]\n**Output:** \\[0,0,0,1,2,2,1,2,2\\]\n**Explanation:**\nThe nodes 0, 1, and 2 form the cycle.\nThe distance from 0 to 0 is 0.\nThe distance from 1 to 1 is 0.\nThe distance from 2 to 2 is 0.\nThe distance from 3 to 1 is 1.\nThe distance from 4 to 1 is 2.\nThe distance from 5 to 1 is 2.\nThe distance from 6 to 2 is 1.\nThe distance from 7 to 2 is 2.\nThe distance from 8 to 2 is 2.\n\n**Constraints:**\n\n*   `3 <= n <= 105`\n*   `edges.length == n`\n*   `edges[i].length == 2`\n*   `0 <= node1i, node2i <= n - 1`\n*   `node1i != node2i`\n*   The graph is connected.\n*   The graph has exactly one cycle.\n*   There is at most one edge between any pair of vertices.This problem can be broken down into two parts: finding the cycle, and finding the distance between each node and the cycle. How can we find the cycle? We can use DFS and keep track of the nodes we\u2019ve seen, and the order that we see them in. Once we see a node we\u2019ve already visited, we know that the cycle contains the node that was seen twice and all the nodes that we visited in between. Now that we know which nodes are part of the cycle, how can we find the distances? We can run a multi-source BFS starting from the nodes in the cycle and expanding outward.",
          "output": "import heapq\n\ndef largest_sum_sequence(nums, k):\n    min_heap = []\n    \n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    result = [0] * k\n    for i in range(k-1, -1, -1):\n        result[i] = heapq.heappop(min_heap)\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.\n\n",
          "input": "**Example 1:**\n\n**Input:** coordinates = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\],\\[5,6\\],\\[6,7\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** coordinates = \\[\\[1,1\\],\\[2,2\\],\\[3,4\\],\\[4,5\\],\\[5,6\\],\\[7,7\\]\\]\n**Output:** false\n\n**Constraints:**\n\n*   `2 <= coordinates.length <= 1000`\n*   `coordinates[i].length == 2`\n*   `-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`\n*   `coordinates` contains no duplicate point.If there're only 2 points, return true. Check if all other points lie on the line defined by the first 2 points. Use cross product to check collinearity.",
          "output": "def findBestValue(arr, target):\n    left = 0\n    right = max(arr)\n    result = -1\n    min_diff = float('inf')\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        total_sum = sum(min(x, mid) for x in arr)\n        if total_sum == target:\n            return mid\n        elif total_sum > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n        if abs(target - total_sum) < min_diff or (\n                abs(target - total_sum) == min_diff and mid < result):\n            min_diff = abs(target - total_sum)\n            result = mid\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of folders `folder`, return _the folders after removing all **sub-folders** in those folders_. You may return the answer in **any order**.\n\nIf a `folder[i]` is located within another `folder[j]`, it is called a **sub-folder** of it.\n\nThe format of a path is one or more concatenated strings of the form: `'/'` followed by one or more lowercase English letters.\n\n*   For example, `\"/leetcode \"` and `\"/leetcode/problems \"` are valid paths while an empty string and `\"/ \"` are not.\n\n",
          "input": "**Example 1:**\n\n**Input:** folder = \\[ \"/a \", \"/a/b \", \"/c/d \", \"/c/d/e \", \"/c/f \"\\]\n**Output:** \\[ \"/a \", \"/c/d \", \"/c/f \"\\]\n**Explanation:** Folders  \"/a/b \" is a subfolder of  \"/a \" and  \"/c/d/e \" is inside of folder  \"/c/d \" in our filesystem.\n\n**Example 2:**\n\n**Input:** folder = \\[ \"/a \", \"/a/b/c \", \"/a/b/d \"\\]\n**Output:** \\[ \"/a \"\\]\n**Explanation:** Folders  \"/a/b/c \" and  \"/a/b/d \" will be removed because they are subfolders of  \"/a \".\n\n**Example 3:**\n\n**Input:** folder = \\[ \"/a/b/c \", \"/a/b/ca \", \"/a/b/d \"\\]\n**Output:** \\[ \"/a/b/c \", \"/a/b/ca \", \"/a/b/d \"\\]\n\n**Constraints:**\n\n*   `1 <= folder.length <= 4 * 104`\n*   `2 <= folder[i].length <= 100`\n*   `folder[i]` contains only lowercase letters and `'/'`.\n*   `folder[i]` always starts with the character `'/'`.\n*   Each folder name is **unique**.Sort the folders lexicographically. Insert the current element in an array and then loop until we get rid of all of their subfolders, repeat this until no element is left.",
          "output": "from typing import List\n\ndef removeSubfolders(folder: List[str]) -> List[str]:\n    result = []\n    folder.sort()\n    prefix = \"/\"\n    \n    for path in folder:\n        if not path.startswith(prefix):\n            result.append(path)\n            prefix = path + \"/\"\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string s of length `n` containing only four kinds of characters: `'Q'`, `'W'`, `'E'`, and `'R'`.\n\nA string is said to be **balanced** if each of its characters appears `n / 4` times where `n` is the length of the string.\n\nReturn _the minimum length of the substring that can be replaced with **any** other string of the same length to make_ `s` _**balanced**_. If s is already **balanced**, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"QWER \"\n**Output:** 0\n**Explanation:** s is already balanced.\n\n**Example 2:**\n\n**Input:** s =  \"QQWE \"\n**Output:** 1\n**Explanation:** We need to replace a 'Q' to 'R', so that  \"RQWE \" (or  \"QRWE \") is balanced.\n\n**Example 3:**\n\n**Input:** s =  \"QQQW \"\n**Output:** 2\n**Explanation:** We can replace the first  \"QQ \" to  \"ER \". \n\n**Constraints:**\n\n*   `n == s.length`\n*   `4 <= n <= 105`\n*   `n` is a multiple of `4`.\n*   `s` contains only `'Q'`, `'W'`, `'E'`, and `'R'`.Use 2-pointers algorithm to make sure all amount of characters outside the 2 pointers are smaller or equal to n/4. That means you need to count the amount of each letter and make sure the amount is enough.",
          "output": "def getMaxSumAndCount(board):\n    mod = 1000000007\n    n = len(board)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    dp[n - 1][n - 1] = (0, 1)\n\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if board[i][j] == 'X' or (i == n - 1 and j == n - 1):\n                continue\n            currVal = 0 if board[i][j] == 'E' else int(board[i][j])\n            up = dp[i - 1][j] if i > 0 else (-1, 0)\n            left = dp[i][j - 1] if j > 0 else (-1, 0)\n            diag = dp[i - 1][j - 1] if i > 0 and j > 0 else (-1, 0)\n\n            maxTuple = max(up, left, diag)\n            if maxTuple[0] == -1:\n                continue\n\n            dp[i][j] = (maxTuple[0] + currVal, dp[i][j][1])\n\n            if up == maxTuple:\n                dp[i][j] = (dp[i][j][0], (dp[i][j][1] + up[1]) % mod)\n            if left == maxTuple:\n                dp[i][j] = (dp[i][j][0], (dp[i][j][1] + left[1]) % mod)\n            if diag == maxTuple:\n                dp[i][j] = (dp[i][j][0], (dp[i][j][1] + diag[1]) % mod)\n\n    return dp[0][0]\n"
     },
     {
          "instruction": "Write python code for this problem: We have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`.\n\nYou're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\n\nIf you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.\n\n",
          "input": "**Example 1:**\n\n**Input:** startTime = \\[1,2,3,3\\], endTime = \\[3,4,5,6\\], profit = \\[50,10,40,70\\]\n**Output:** 120\n**Explanation:** The subset chosen is the first and fourth job. \nTime range \\[1-3\\]+\\[3-6\\] , we get profit of 120 = 50 + 70.\n\n**Example 2:**\n\n**Input:** startTime = \\[1,2,3,4,6\\], endTime = \\[3,5,10,6,9\\], profit = \\[20,20,100,70,60\\]\n**Output:** 150\n**Explanation:** The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n\n**Example 3:**\n\n**Input:** startTime = \\[1,1,1\\], endTime = \\[2,3,4\\], profit = \\[5,6,4\\]\n**Output:** 6\n\n**Constraints:**\n\n*   `1 <= startTime.length == endTime.length == profit.length <= 5 * 104`\n*   `1 <= startTime[i] < endTime[i] <= 109`\n*   `1 <= profit[i] <= 104`Think on DP. Sort the elements by starting time, then define the dp[i] as the maximum profit taking elements from the suffix starting at i. Use binarySearch (lower_bound/upper_bound on C++) to get the next index for the DP transition.",
          "output": "from bisect import bisect_left\n\ndef jobScheduling(startTime, endTime, profit):\n    jobs = sorted(zip(endTime, startTime, profit))\n    dp = [jobs[0][2]]\n    \n    def latestNonConflict(index):\n        startTimeToFind = jobs[index][1]\n        index = bisect_left([job[0] for job in jobs], startTimeToFind)\n        if index:\n            return index - 1\n        return -1\n\n    for i in range(1, len(jobs)):\n        L = latestNonConflict(i)\n        dp.append(max(dp[-1], (0 if L == -1 else dp[L]) + jobs[i][2]))\n\n    return dp[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `matches` where `matches[i] = [winneri, loseri]` indicates that the player `winneri` defeated player `loseri` in a match.\n\nReturn _a list_ `answer` _of size_ `2` _where:_\n\n*   `answer[0]` is a list of all players that have **not** lost any matches.\n*   `answer[1]` is a list of all players that have lost exactly **one** match.\n\nThe values in the two lists should be returned in **increasing** order.\n\n**Note:**\n\n*   You should only consider the players that have played **at least one** match.\n*   The testcases will be generated such that **no** two matches will have the **same** outcome.\n\n",
          "input": "**Example 1:**\n\n**Input:** matches = \\[\\[1,3\\],\\[2,3\\],\\[3,6\\],\\[5,6\\],\\[5,7\\],\\[4,5\\],\\[4,8\\],\\[4,9\\],\\[10,4\\],\\[10,9\\]\\]\n**Output:** \\[\\[1,2,10\\],\\[4,5,7,8\\]\\]\n**Explanation:**\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer\\[0\\] = \\[1,2,10\\] and answer\\[1\\] = \\[4,5,7,8\\].\n\n**Example 2:**\n\n**Input:** matches = \\[\\[2,3\\],\\[1,3\\],\\[5,4\\],\\[6,4\\]\\]\n**Output:** \\[\\[1,2,5,6\\],\\[\\]\\]\n**Explanation:**\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer\\[0\\] = \\[1,2,5,6\\] and answer\\[1\\] = \\[\\].\n\n**Constraints:**\n\n*   `1 <= matches.length <= 105`\n*   `matches[i].length == 2`\n*   `1 <= winneri, loseri <= 105`\n*   `winneri != loseri`\n*   All `matches[i]` are **unique**.Count the number of times a player loses while iterating through the matches.",
          "output": "from collections import defaultdict\nfrom typing import List, Set\n\ndef twoLists(matches: List[List[int]]) -> List[Set[int]]:\n    loss_count = defaultdict(int)\n    participants = set()\n    \n    for winner, loser in matches:\n        loss_count[loser] += 1\n        participants.add(winner)\n        participants.add(loser)\n    \n    no_losses = {participant for participant in participants if loss_count[participant] == 0}\n    one_loss = {participant for participant in participants if loss_count[participant] == 1}\n    \n    return [no_losses, one_loss]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`. The array `nums` is **beautiful** if:\n\n*   `nums.length` is even.\n*   `nums[i] != nums[i + 1]` for all `i % 2 == 0`.\n\nNote that an empty array is considered beautiful.\n\nYou can delete any number of elements from `nums`. When you delete an element, all the elements to the right of the deleted element will be **shifted one unit to the left** to fill the gap created and all the elements to the left of the deleted element will remain **unchanged**.\n\nReturn _the **minimum** number of elements to delete from_ `nums` _to make it_ _beautiful._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,2,3,5\\]\n**Output:** 1\n**Explanation:** You can delete either `nums[0]` or `nums[1]` to make `nums` = \\[1,2,3,5\\] which is beautiful. It can be proven you need at least 1 deletion to make `nums` beautiful.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,2,2,3,3\\]\n**Output:** 2\n**Explanation:** You can delete `nums[0]` and `nums[5]` to make nums = \\[1,2,2,3\\] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 105`Delete as many adjacent equal elements as necessary. If the length of nums is odd after the entire process, delete the last element.",
          "output": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef delete_middle(head):\n    if not head or not head.next:\n        return head\n    slow = head\n    fast = head\n    prev = None\n\n    while fast and fast.next:\n        prev = slow\n        slow = slow.next\n        fast = fast.next.next\n\n    prev.next = slow.next\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` consisting only of lowercase English letters.\n\nIn one **move**, you can select any two **adjacent** characters of `s` and swap them.\n\nReturn _the **minimum number of moves** needed to make_ `s` _a palindrome_.\n\n**Note** that the input will be generated such that `s` can always be converted to a palindrome.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aabb \"\n**Output:** 2\n**Explanation:**\nWe can obtain two palindromes from s,  \"abba \" and  \"baab \". \n- We can obtain  \"abba \" from s in 2 moves:  \"a**ab**b \" ->  \"ab**ab** \" ->  \"abba \".\n- We can obtain  \"baab \" from s in 2 moves:  \"a**ab**b \" ->  \"**ab**ab \" ->  \"baab \".\nThus, the minimum number of moves needed to make s a palindrome is 2.\n\n**Example 2:**\n\n**Input:** s =  \"letelt \"\n**Output:** 2\n**Explanation:**\nOne of the palindromes we can obtain from s in 2 moves is  \"lettel \".\nOne of the ways we can obtain it is  \"lete**lt** \" ->  \"let**et**l \" ->  \"lettel \".\nOther palindromes such as  \"tleelt \" can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2000`\n*   `s` consists only of lowercase English letters.\n*   `s` can be converted to a palindrome using a finite number of moves.Consider a greedy strategy. Let\u2019s start by making the leftmost and rightmost characters match with some number of swaps. If we figure out how to do that using the minimum number of swaps, then we can delete the leftmost and rightmost characters and solve the problem recursively.",
          "output": "def count_pyramids(grid):\n    m, n, count = len(grid), len(grid[0]), 0\n    for i in range(1, m - 1):\n        for j in range(1, n - 1):\n            if grid[i][j] == grid[i - 1][j] + grid[i][j - 1] - grid[i - 1][j - 1] \\\n                and grid[i][j] == grid[i + 1][j] + grid[i][j + 1] - grid[i + 1][j + 1]:\n                count += grid[i][j]\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given a callable function `f(x, y)` **with a hidden formula** and a value `z`, reverse engineer the formula and return _all positive integer pairs_ `x` _and_ `y` _where_ `f(x,y) == z`. You may return the pairs in any order.\n\nWhile the exact formula is hidden, the function is monotonically increasing, i.e.:\n\n*   `f(x, y) < f(x + 1, y)`\n*   `f(x, y) < f(x, y + 1)`\n\nThe function interface is defined like this:\n\ninterface CustomFunction {\npublic:\n  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n  int f(int x, int y);\n};\n\nWe will judge your solution as follows:\n\n*   The judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an **answer key** of all valid pairs for a specific `z`.\n*   The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.\n*   The judge will call your `findSolution` and compare your results with the **answer key**.\n*   If your results match the **answer key**, your solution will be `Accepted`.\n\n",
          "input": "**Example 1:**\n\n**Input:** function\\_id = 1, z = 5\n**Output:** \\[\\[1,4\\],\\[2,3\\],\\[3,2\\],\\[4,1\\]\\]\n**Explanation:** The hidden formula for function\\_id = 1 is f(x, y) = x + y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=4 -> f(1, 4) = 1 + 4 = 5.\nx=2, y=3 -> f(2, 3) = 2 + 3 = 5.\nx=3, y=2 -> f(3, 2) = 3 + 2 = 5.\nx=4, y=1 -> f(4, 1) = 4 + 1 = 5.\n\n**Example 2:**\n\n**Input:** function\\_id = 2, z = 5\n**Output:** \\[\\[1,5\\],\\[5,1\\]\\]\n**Explanation:** The hidden formula for function\\_id = 2 is f(x, y) = x \\* y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=5 -> f(1, 5) = 1 \\* 5 = 5.\nx=5, y=1 -> f(5, 1) = 5 \\* 1 = 5.\n\n**Constraints:**\n\n*   `1 <= function_id <= 9`\n*   `1 <= z <= 100`\n*   It is guaranteed that the solutions of `f(x, y) == z` will be in the range `1 <= x, y <= 1000`.\n*   It is also guaranteed that `f(x, y)` will fit in 32 bit signed integer if `1 <= x, y <= 1000`.Loop over 1 \u2264 x,y \u2264 1000 and check if f(x,y) == z.",
          "output": "def findSolution(customfunction: 'CustomFunction', z: int) -> List[List[int]]:\n    results = []\n    for x in range(1, 1001):\n        for y in range(1, 1001):\n            if customfunction.f(x, y) == z:\n                results.append([x, y])\n            elif customfunction.f(x, y) > z:\n                break\n    return results\n"
     },
     {
          "instruction": "Write python code for this problem: Given 2 integers `n` and `start`. Your task is return **any** permutation `p` of `(0,1,2.....,2^n -1)` such that :\n\n*   `p[0] = start`\n*   `p[i]` and `p[i+1]` differ by only one bit in their binary representation.\n*   `p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, start = 3\n**Output:** \\[3,2,0,1\\]\n**Explanation:** The binary representation of the permutation is (11,10,00,01). \nAll the adjacent element differ by one bit. Another valid permutation is \\[3,1,0,2\\]\n\n**Example 2:**\n\n**Input:** n = 3, start = 2\n**Output:** \\[2,6,7,5,4,0,1,3\\]\n**Explanation:** The binary representation of the permutation is (010,110,111,101,100,000,001,011).\n\n**Constraints:**\n\n*   `1 <= n <= 16`\n*   `0 <= start < 2 ^ n`Use gray code to generate a n-bit sequence. Rotate the sequence such that its first element is start.",
          "output": "def alphabet_board_path(target: str) -> str:\n    startX, startY = 0, 0\n    result = []\n\n    for t in target:\n        targetX, targetY = divmod(ord(t) - ord('a'), 5)\n        while startX > targetX:\n            result.append('U')\n            startX -= 1\n        while startY > targetY:\n            result.append('L')\n            startY -= 1\n        while startX < targetX:\n            result.append('D')\n            startX += 1\n        while startY < targetY:\n            result.append('R')\n            startY += 1\n        result.append('!')\n\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `arr`. A string `s` is formed by the **concatenation** of a **subsequence** of `arr` that has **unique characters**.\n\nReturn _the **maximum** possible length_ of `s`.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[ \"un \", \"iq \", \"ue \"\\]\n**Output:** 4\n**Explanation:** All the valid concatenations are:\n-  \" \"\n-  \"un \"\n-  \"iq \"\n-  \"ue \"\n-  \"uniq \" ( \"un \" +  \"iq \")\n-  \"ique \" ( \"iq \" +  \"ue \")\nMaximum length is 4.\n\n**Example 2:**\n\n**Input:** arr = \\[ \"cha \", \"r \", \"act \", \"ers \"\\]\n**Output:** 6\n**Explanation:** Possible longest valid concatenations are  \"chaers \" ( \"cha \" +  \"ers \") and  \"acters \" ( \"act \" +  \"ers \").\n\n**Example 3:**\n\n**Input:** arr = \\[ \"abcdefghijklmnopqrstuvwxyz \"\\]\n**Output:** 26\n**Explanation:** The only string in arr has all 26 characters.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 16`\n*   `1 <= arr[i].length <= 26`\n*   `arr[i]` contains only lowercase English letters.You can try all combinations and keep mask of characters you have. You can use DP.",
          "output": "def largest1BorderedSquare(grid):\n    m, n = len(grid), len(grid[0])\n    horizontal, vertical = [[0] * n for _ in range(m)], [[0] * n for _ in range(m)]\n\n    max_square_size = 0\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                horizontal[i][j] = 1 if j == 0 else horizontal[i][j - 1] + 1\n                vertical[i][j] = 1 if i == 0 else vertical[i - 1][j] + 1\n\n                min_size = min(horizontal[i][j], vertical[i][j])\n                while min_size > max_square_size:\n                    if (horizontal[i - min_size + 1][j] >= min_size and\n                        vertical[i][j - min_size + 1] >= min_size):\n                        max_square_size = min_size\n                    min_size -= 1\n\n    return max_square_size * max_square_size\n"
     },
     {
          "instruction": "Write python code for this problem: Given a rectangle of size `n` x `m`, return _the minimum number of integer-sided squares that tile the rectangle_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, m = 3\n**Output:** 3\n**Explanation:** `3` squares are necessary to cover the rectangle.\n`2` (squares of `1x1`)\n`1` (square of `2x2`)\n\n**Example 2:**\n\n**Input:** n = 5, m = 8\n**Output:** 5\n\n**Example 3:**\n\n**Input:** n = 11, m = 13\n**Output:** 6\n\n**Constraints:**\n\n*   `1 <= n, m <= 13`Can you use backtracking to solve this problem ?. Suppose you've placed a bunch of squares. Where is the natural spot to place the next square ?. The maximum number of squares to be placed will be \u2264 max(n,m).",
          "output": "from functools import lru_cache\n\ndef stoneGameII(piles):\n    n = len(piles)\n    for i in range(n - 2, -1, -1):\n        piles[i] += piles[i + 1]\n\n    @lru_cache(None)\n    def search(idx, M):\n        if idx + 2 * M >= n:\n            return piles[idx]\n        return max(piles[idx] - search(idx + x, max(M, x)) for x in range(1, 2 * M + 1))\n\n    return search(0, 1)\n"
     },
     {
          "instruction": "Write python code for this problem: `n` passengers board an airplane with exactly `n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\n\n*   Take their own seat if it is still available, and\n*   Pick other seats randomly when they find their seat occupied\n\nReturn _the probability that the_ `nth` _person gets his own seat_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 1.00000\n**Explanation:** The first person can only get the first seat.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 0.50000\n**Explanation:** The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).\n\n**Constraints:**\n\n*   `1 <= n <= 105`Let f(n) denote the probability of the n-th person getting correct seat in n-person case, then:\r\n\r\nf(1) = 1 (base case, trivial)\r\nf(2) = 1/2 (also trivial) Try to calculate f(3), f(4), and f(5) using the base cases. What if the value of them?\r\nf(i) for i >= 2 will also be 1/2. Try to proof why f(i) = 1/2 for i >= 2.",
          "output": "from collections import defaultdict\n\ndef num_equiv_domino_pairs(dominoes):\n    freq = defaultdict(int)\n    result = 0\n    for domino in dominoes:\n        key = min(domino[0], domino[1]) * 10 + max(domino[0], domino[1])\n        result += freq[key]\n        freq[key] += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of **distinct** positive integers, return _the number of tuples_ `(a, b, c, d)` _such that_ `a * b = c * d` _where_ `a`_,_ `b`_,_ `c`_, and_ `d` _are elements of_ `nums`_, and_ `a != b != c != d`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,4,6\\]\n**Output:** 8\n**Explanation:** There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,4,5,10\\]\n**Output:** 16\n**Explanation:** There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 104`\n*   All elements in `nums` are **distinct**.Note that all of the integers are distinct. This means that each time a product is formed it must be formed by two unique integers. Count the frequency of each product of 2 distinct numbers. Then calculate the permutations formed.",
          "output": "from math import sqrt\n\ndef best_coordinate(towers, radius):\n    max_quality = 0\n    best_x, best_y = 0, 0\n\n    for x in range(51):\n        for y in range(51):\n            sum_quality = 0\n            for tower in towers:\n                dist = sqrt((x - tower[0])**2 + (y - tower[1])**2)\n                if dist <= radius:\n                    sum_quality += tower[2] // (1 + dist)\n            if sum_quality > max_quality:\n                max_quality = sum_quality\n                best_x, best_y = x, y\n\n    return [best_x, best_y]\n"
     },
     {
          "instruction": "Write python code for this problem: You have a queue of integers, you need to retrieve the first unique integer in the queue.\n\nImplement the `FirstUnique` class:\n\n*   `FirstUnique(int[] nums)` Initializes the object with the numbers in the queue.\n*   `int showFirstUnique()` returns the value of **the first unique** integer of the queue, and returns **\\-1** if there is no such integer.\n*   `void add(int value)` insert value to the queue.\n\n",
          "input": "**Example 1:**\n\n**Input:** \n\\[ \"FirstUnique \", \"showFirstUnique \", \"add \", \"showFirstUnique \", \"add \", \"showFirstUnique \", \"add \", \"showFirstUnique \"\\]\n\\[\\[\\[2,3,5\\]\\],\\[\\],\\[5\\],\\[\\],\\[2\\],\\[\\],\\[3\\],\\[\\]\\]\n**Output:** \n\\[null,2,null,2,null,3,null,-1\\]\n**Explanation:** \nFirstUnique firstUnique = new FirstUnique(\\[2,3,5\\]);\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(5);            // the queue is now \\[2,3,5,5\\]\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(2);            // the queue is now \\[2,3,5,5,2\\]\nfirstUnique.showFirstUnique(); // return 3\nfirstUnique.add(3);            // the queue is now \\[2,3,5,5,2,3\\]\nfirstUnique.showFirstUnique(); // return -1\n\n**Example 2:**\n\n**Input:** \n\\[ \"FirstUnique \", \"showFirstUnique \", \"add \", \"add \", \"add \", \"add \", \"add \", \"showFirstUnique \"\\]\n\\[\\[\\[7,7,7,7,7,7\\]\\],\\[\\],\\[7\\],\\[3\\],\\[3\\],\\[7\\],\\[17\\],\\[\\]\\]\n**Output:** \n\\[null,-1,null,null,null,null,null,17\\]\n**Explanation:** \nFirstUnique firstUnique = new FirstUnique(\\[7,7,7,7,7,7\\]);\nfirstUnique.showFirstUnique(); // return -1\nfirstUnique.add(7);            // the queue is now \\[7,7,7,7,7,7,7\\]\nfirstUnique.add(3);            // the queue is now \\[7,7,7,7,7,7,7,3\\]\nfirstUnique.add(3);            // the queue is now \\[7,7,7,7,7,7,7,3,3\\]\nfirstUnique.add(7);            // the queue is now \\[7,7,7,7,7,7,7,3,3,7\\]\nfirstUnique.add(17);           // the queue is now \\[7,7,7,7,7,7,7,3,3,7,17\\]\nfirstUnique.showFirstUnique(); // return 17\n\n**Example 3:**\n\n**Input:** \n\\[ \"FirstUnique \", \"showFirstUnique \", \"add \", \"showFirstUnique \"\\]\n\\[\\[\\[809\\]\\],\\[\\],\\[809\\],\\[\\]\\]\n**Output:** \n\\[null,809,null,-1\\]\n**Explanation:** \nFirstUnique firstUnique = new FirstUnique(\\[809\\]);\nfirstUnique.showFirstUnique(); // return 809\nfirstUnique.add(809);          // the queue is now \\[809,809\\]\nfirstUnique.showFirstUnique(); // return -1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 10^5`\n*   `1 <= nums[i] <= 10^8`\n*   `1 <= value <= 10^8`\n*   At most `50000` calls will be made to `showFirstUnique` and `add`.Use doubly Linked list with hashmap of pointers to linked list nodes. add unique number to the linked list. When add is called check if the added number is unique then it have to be added to the linked list and if it is repeated remove it from the linked list if exists. When showFirstUnique is called retrieve the head of the linked list. Use queue and check that first element of the queue is always unique. Use set or heap to make running time of each function O(logn).",
          "output": "def is_solvable(words, result):\n    return sum(words.values()) % 10 == result % 10\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `s1` and `s2` of equal length consisting of letters `\"x \"` and `\"y \"` **only**. Your task is to make these two strings equal to each other. You can swap any two characters that belong to **different** strings, which means: swap `s1[i]` and `s2[j]`.\n\nReturn the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"xx \", s2 =  \"yy \"\n**Output:** 1\n**Explanation:** Swap s1\\[0\\] and s2\\[1\\], s1 =  \"yx \", s2 =  \"yx \".\n\n**Example 2:**\n\n**Input:** s1 =  \"xy \", s2 =  \"yx \"\n**Output:** 2\n**Explanation:** Swap s1\\[0\\] and s2\\[0\\], s1 =  \"yy \", s2 =  \"xx \".\nSwap s1\\[0\\] and s2\\[1\\], s1 =  \"xy \", s2 =  \"xy \".\nNote that you cannot swap s1\\[0\\] and s1\\[1\\] to make s1 equal to  \"yx \", cause we can only swap chars in different strings.\n\n**Example 3:**\n\n**Input:** s1 =  \"xx \", s2 =  \"xy \"\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 1000`\n*   `s1.length == s2.length`\n*   `s1, s2` only contain `'x'` or `'y'`.First, ignore all the already matched positions, they don't affect the answer at all. For the unmatched positions, there are three basic cases (already given in the examples): (\"xx\", \"yy\") => 1 swap, (\"xy\", \"yx\") => 2 swaps So the strategy is, apply case 1 as much as possible, then apply case 2 if the last two unmatched are in this case, or fall into impossible if only one pair of unmatched left. This can be done via a simple math.",
          "output": "def moves_to_make_zigzag(nums):\n    moves1, moves2 = 0, 0\n    for i in range(len(nums)):\n        left = nums[i - 1] if i > 0 else float('inf')\n        right = nums[i + 1] if i + 1 < len(nums) else float('inf')\n        diff1 = nums[i] - min(left, right) + 1\n        diff2 = nums[i] - min(left, right) + 1\n        if i % 2 == 0:\n            moves1 += max(0, diff1)\n        else:\n            moves2 += max(0, diff2)\n    return min(moves1, moves2)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and an integer `k`. A continuous subarray is called **nice** if there are `k` odd numbers on it.\n\nReturn _the number of **nice** sub-arrays_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,2,1,1\\], k = 3\n**Output:** 2\n**Explanation:** The only sub-arrays with 3 odd numbers are \\[1,1,2,1\\] and \\[1,2,1,1\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,4,6\\], k = 1\n**Output:** 0\n**Explanation:** There is no odd numbers in the array.\n\n**Example 3:**\n\n**Input:** nums = \\[2,2,2,1,2,2,1,2,2,2\\], k = 2\n**Output:** 16\n\n**Constraints:**\n\n*   `1 <= nums.length <= 50000`\n*   `1 <= nums[i] <= 10^5`\n*   `1 <= k <= nums.length`After replacing each even by zero and every odd by one can we use prefix sum to find answer ? Can we use two pointers to count number of sub-arrays ? Can we store indices of odd numbers and for each k indices count number of sub-arrays contains them ?",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef can_win(root, x):\n    if not root:\n        return False\n    if root.val == x:\n        left_nodes = 1 + can_win(root.left, x) if root.left else 0\n        right_nodes = 1 + can_win(root.right, x) if root.right else 0\n        return left_nodes % 2 != 0 or right_nodes % 2 != 0\n    return can_win(root.left, x) or can_win(root.right, x)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be **good** if you can obtain a sum of `1` from the array by any possible subset and multiplicand.\n\nReturn `True` if the array is **good** otherwise return `False`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[12,5,7,23\\]\n**Output:** true\n**Explanation:** Pick numbers 5 and 7.\n5\\*3 + 7\\*(-2) = 1\n\n**Example 2:**\n\n**Input:** nums = \\[29,6,10\\]\n**Output:** true\n**Explanation:** Pick numbers 29, 6 and 10.\n29\\*1 + 6\\*(-3) + 10\\*(-1) = 1\n\n**Example 3:**\n\n**Input:** nums = \\[3,6\\]\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 10^5`\n*   `1 <= nums[i] <= 10^9`Eq.  ax+by=1 has solution x, y if gcd(a,b) = 1. Can you generalize the formula?.  Check B\u00e9zout's lemma.",
          "output": "from math import gcd\nfrom functools import reduce\n\ndef isGoodArray(nums):\n    return reduce(gcd, nums) == 1\n"
     },
     {
          "instruction": "Write python code for this problem: A **row-sorted binary matrix** means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order.\n\nGiven a **row-sorted binary matrix** `binaryMatrix`, return _the index (0-indexed) of the **leftmost column** with a 1 in it_. If such an index does not exist, return `-1`.\n\n**You can't access the Binary Matrix directly.** You may only access the matrix using a `BinaryMatrix` interface:\n\n*   `BinaryMatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed).\n*   `BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`.\n\nSubmissions making more than `1000` calls to `BinaryMatrix.get` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\nFor custom testing purposes, the input will be the entire binary matrix `mat`. You will not have access to the binary matrix directly.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[0,0\\],\\[1,1\\]\\]\n**Output:** 0\n\n**Example 2:**\n\n**Input:** mat = \\[\\[0,0\\],\\[0,1\\]\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** mat = \\[\\[0,0\\],\\[0,0\\]\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `rows == mat.length`\n*   `cols == mat[i].length`\n*   `1 <= rows, cols <= 100`\n*   `mat[i][j]` is either `0` or `1`.\n*   `mat[i]` is sorted in non-decreasing order.1. (Binary Search) For each row do a binary search to find the leftmost one on that row and update the answer. 2. (Optimal Approach) Imagine there is a pointer p(x, y) starting from top right corner. p can only move left or down. If the value at p is 0, move down. If the value at p is 1, move left. Try to figure out the correctness and time complexity of this algorithm.",
          "output": "def canReach(arr: List[int], start: int) -> bool:\n    if 0 <= start < len(arr) and arr[start] >= 0:\n        if arr[start] == 0:\n            return True\n        \n        jump = arr[start]\n        arr[start] = -arr[start]\n        return canReach(arr, start + jump) or canReach(arr, start - jump)\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `queries` and a **positive** integer `intLength`, return _an array_ `answer` _where_ `answer[i]` _is either the_ `queries[i]th` _smallest **positive palindrome** of length_ `intLength` _or_ `-1` _if no such palindrome exists_.\n\nA **palindrome** is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.\n\n",
          "input": "**Example 1:**\n\n**Input:** queries = \\[1,2,3,4,5,90\\], intLength = 3\n**Output:** \\[101,111,121,131,141,999\\]\n**Explanation:**\nThe first few palindromes of length 3 are:\n101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...\nThe 90th palindrome of length 3 is 999.\n\n**Example 2:**\n\n**Input:** queries = \\[2,4,6\\], intLength = 4\n**Output:** \\[1111,1331,1551\\]\n**Explanation:**\nThe first six palindromes of length 4 are:\n1001, 1111, 1221, 1331, 1441, and 1551.\n\n**Constraints:**\n\n*   `1 <= queries.length <= 5 * 104`\n*   `1 <= queries[i] <= 109`\n*   `1 <= intLength <= 15`For any value of queries[i] and intLength, how can you check if there exists at least queries[i] palindromes of length intLength? Since a palindrome reads the same forwards and backwards, consider how you can efficiently find the first half (ceil(intLength/2) digits) of the palindrome.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_path(root, target, path):\n    if not root: return \"\"\n    if root.val == target: return path\n    left = find_path(root.left, target, path + \"L\")\n    right = find_path(root.right, target, path + \"R\")\n    return left if left else right\n\ndef shortest_path(root, start_value, dest_value):\n    s_path = find_path(root, start_value, \"\")\n    t_path = find_path(root, dest_value, \"\")\n    i = 0\n    while i < len(s_path) and i < len(t_path) and s_path[i] == t_path[i]: i += 1\n    res = \"U\" * (len(s_path) - i) + t_path[i:]\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a **0-indexed location** to perform some increment operations on the matrix.\n\nFor each location `indices[i]`, do **both** of the following:\n\n1.  Increment **all** the cells on row `ri`.\n2.  Increment **all** the cells on column `ci`.\n\nGiven `m`, `n`, and `indices`, return _the **number of odd-valued cells** in the matrix after applying the increment to all locations in_ `indices`.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 2, n = 3, indices = \\[\\[0,1\\],\\[1,1\\]\\]\n**Output:** 6\n**Explanation:** Initial matrix = \\[\\[0,0,0\\],\\[0,0,0\\]\\].\nAfter applying first increment it becomes \\[\\[1,2,1\\],\\[0,1,0\\]\\].\nThe final matrix is \\[\\[1,3,1\\],\\[1,3,1\\]\\], which contains 6 odd numbers.\n\n**Example 2:**\n\n**Input:** m = 2, n = 2, indices = \\[\\[1,1\\],\\[0,0\\]\\]\n**Output:** 0\n**Explanation:** Final matrix = \\[\\[2,2\\],\\[2,2\\]\\]. There are no odd numbers in the final matrix.\n\n**Constraints:**\n\n*   `1 <= m, n <= 50`\n*   `1 <= indices.length <= 100`\n*   `0 <= ri < m`\n*   `0 <= ci < n`\n\n**Follow up:** Could you solve this in `O(n + m + indices.length)` time with only `O(n + m)` extra space?Simulation : With small constraints, it is possible to apply changes to each row and column and count odd cells after applying it. You can accumulate the number you should add to each row and column and then you can count the number of odd cells.",
          "output": "def break_palindrome(palindrome: str) -> str:\n    n = len(palindrome)\n    if n < 2:\n        return \"\"\n    \n    palindrome = list(palindrome)\n    for i in range(n // 2):\n        if palindrome[i] != 'a':\n            palindrome[i] = 'a'\n            return \"\".join(palindrome)\n    \n    palindrome[-1] = 'b'\n    return \"\".join(palindrome)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the following details of a matrix with `n` columns and `2` rows :\n\n*   The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.\n*   The sum of elements of the 0-th(upper) row is given as `upper`.\n*   The sum of elements of the 1-st(lower) row is given as `lower`.\n*   The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.\n\nYour task is to reconstruct the matrix with `upper`, `lower` and `colsum`.\n\nReturn it as a 2-D integer array.\n\nIf there are more than one valid solution, any of them will be accepted.\n\nIf no valid solution exists, return an empty 2-D array.\n\n",
          "input": "**Example 1:**\n\n**Input:** upper = 2, lower = 1, colsum = \\[1,1,1\\]\n**Output:** \\[\\[1,1,0\\],\\[0,0,1\\]\\]\n**Explanation:** \\[\\[1,0,1\\],\\[0,1,0\\]\\], and \\[\\[0,1,1\\],\\[1,0,0\\]\\] are also correct answers.\n\n**Example 2:**\n\n**Input:** upper = 2, lower = 3, colsum = \\[2,2,1,1\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** upper = 5, lower = 5, colsum = \\[2,1,2,0,1,0,1,2,0,1\\]\n**Output:** \\[\\[1,1,1,0,1,0,0,1,0,0\\],\\[1,0,1,0,0,0,1,1,0,1\\]\\]\n\n**Constraints:**\n\n*   `1 <= colsum.length <= 10^5`\n*   `0 <= upper, lower <= colsum.length`\n*   `0 <= colsum[i] <= 2`You cannot do anything about colsum[i] = 2 case or colsum[i] = 0 case. Then you put colsum[i] = 1 case to the upper row until upper has reached. Then put the rest into lower row. Fill 0 and 2 first, then fill 1 in the upper row or lower row in turn but be careful about exhausting permitted 1s in each row.",
          "output": "from heapq import heappush, heappop\n\ndef diagonalSort(mat):\n    m, n = len(mat), len(mat[0])\n    for i in range(m):\n        pq = []\n        row, col = i, 0\n        while row < m and col < n:\n            heappush(pq, mat[row][col])\n            row += 1\n            col += 1\n        row, col = i, 0\n        while row < m and col < n:\n            mat[row][col] = heappop(pq)\n            row += 1\n            col += 1\n        \n    for i in range(1, n):\n        pq = []\n        row, col = 0, i\n        while row < m and col < n:\n            heappush(pq, mat[row][col])\n            row += 1\n            col += 1\n        row, col = 0, i\n        while row < m and col < n:\n            mat[row][col] = heappop(pq)\n            row += 1\n            col += 1\n    return mat\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D `grid` consists of `0s` (land) and `1s` (water). An _island_ is a maximal 4-directionally connected group of `0s` and a _closed island_ is an island **totally** (all left, top, right, bottom) surrounded by `1s.`\n\nReturn the number of _closed islands_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,1,1,1,1,1,0\\],\\[1,0,0,0,0,1,1,0\\],\\[1,0,1,0,1,1,1,0\\],\\[1,0,0,0,0,1,0,1\\],\\[1,1,1,1,1,1,1,0\\]\\]\n**Output:** 2\n**Explanation:** \nIslands in gray are closed because they are completely surrounded by water (group of 1s).\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,0,1,0,0\\],\\[0,1,0,1,0\\],\\[0,1,1,1,0\\]\\]\n**Output:** 1\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,1,1,1,1,1\\],\n               \\[1,0,0,0,0,0,1\\],\n               \\[1,0,1,1,1,0,1\\],\n               \\[1,0,1,0,1,0,1\\],\n               \\[1,0,1,1,1,0,1\\],\n               \\[1,0,0,0,0,0,1\\],\n               \\[1,1,1,1,1,1,1\\]\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= grid.length, grid[0].length <= 100`\n*   `0 <= grid[i][j] <=1`Exclude connected group of 0s on the corners because they are not closed island. Return number of connected component of 0s on the grid.",
          "output": "def closedIsland(grid):\n    def dfs(grid, i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]):\n            return False\n\n        if grid[i][j] == 1:\n            return True\n\n        grid[i][j] = 1\n\n        up = dfs(grid, i - 1, j)\n        down = dfs(grid, i + 1, j)\n        left = dfs(grid, i, j - 1)\n        right = dfs(grid, i, j + 1)\n\n        return up and down and left and right\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0 and dfs(grid, i, j):\n                count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of `words`, list of single `letters` (might be repeating) and `score` of every character.\n\nReturn the maximum score of **any** valid set of words formed by using the given letters (`words[i]` cannot be used two or more times).\n\nIt is not necessary to use all characters in `letters` and each letter can only be used once. Score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given by `score[0]`, `score[1]`, ... , `score[25]` respectively.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"dog \", \"cat \", \"dad \", \"good \"\\], letters = \\[ \"a \", \"a \", \"c \", \"d \", \"d \", \"d \", \"g \", \"o \", \"o \"\\], score = \\[1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0\\]\n**Output:** 23\n**Explanation:**\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words  \"dad \" (5+1+5) and  \"good \" (3+2+2+5) with a score of 23.\nWords  \"dad \" and  \"dog \" only get a score of 21.\n\n**Example 2:**\n\n**Input:** words = \\[ \"xxxz \", \"ax \", \"bx \", \"cx \"\\], letters = \\[ \"z \", \"a \", \"b \", \"c \", \"x \", \"x \", \"x \"\\], score = \\[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10\\]\n**Output:** 27\n**Explanation:**\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words  \"ax \" (4+5),  \"bx \" (4+5) and  \"cx \" (4+5) with a score of 27.\nWord  \"xxxz \" only get a score of 25.\n\n**Example 3:**\n\n**Input:** words = \\[ \"leetcode \"\\], letters = \\[ \"l \", \"e \", \"t \", \"c \", \"o \", \"d \"\\], score = \\[0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0\\]\n**Output:** 0\n**Explanation:**\nLetter  \"e \" can only be used once.\n\n**Constraints:**\n\n*   `1 <= words.length <= 14`\n*   `1 <= words[i].length <= 15`\n*   `1 <= letters.length <= 100`\n*   `letters[i].length == 1`\n*   `score.length == 26`\n*   `0 <= score[i] <= 10`\n*   `words[i]`, `letters[i]` contains only lower case English letters.Note that words.length is small. This means you can iterate over every subset of words (2^N).",
          "output": "def maxValueAfterReverse(nums):\n    total, diff = 0, 0\n    min2, max2 = float('inf'), float('-inf')\n    for i in range(len(nums) - 1):\n        total += abs(nums[i] - nums[i + 1])\n        min2 = min(min2, max(nums[i], nums[i + 1]))\n        max2 = max(max2, min(nums[i], nums[i + 1]))\n        diff = max(diff, abs(nums[i + 1] - nums[0]) - abs(nums[i + 1] - nums[i]))\n        diff = max(diff, abs(nums[i] - nums[-1]) - abs(nums[i] - nums[i + 1]))\n    return total + max(diff, 2 * (max2 - min2))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of positive integers `nums`. A triplet of three **distinct** indices `(i, j, k)` is called a **single divisor triplet** of `nums` if `nums[i] + nums[j] + nums[k]` is divisible by **exactly one** of `nums[i]`, `nums[j]`, or `nums[k]`.\n\nReturn _the number of **single divisor triplets** of_ `nums`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,6,7,3,2\\]\n**Output:** 12\n**Explanation:**\nThe triplets (0, 3, 4), (0, 4, 3), (3, 0, 4), (3, 4, 0), (4, 0, 3), and (4, 3, 0) have the values of \\[4, 3, 2\\] (or a permutation of \\[4, 3, 2\\]).\n4 + 3 + 2 = 9 which is only divisible by 3, so all such triplets are single divisor triplets.\nThe triplets (0, 2, 3), (0, 3, 2), (2, 0, 3), (2, 3, 0), (3, 0, 2), and (3, 2, 0) have the values of \\[4, 7, 3\\] (or a permutation of \\[4, 7, 3\\]).\n4 + 7 + 3 = 14 which is only divisible by 7, so all such triplets are single divisor triplets.\nThere are 12 single divisor triplets in total.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,2\\]\n**Output:** 6\n**Explanation:**\nThe triplets (0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), and (2, 1, 0) have the values of \\[1, 2, 2\\] (or a permutation of \\[1, 2, 2\\]).\n1 + 2 + 2 = 5 which is only divisible by 1, so all such triplets are single divisor triplets.\nThere are 6 single divisor triplets in total.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 0\n**Explanation:**\nThere are no single divisor triplets.\nNote that (0, 1, 2) is not a single divisor triplet because nums\\[0\\] + nums\\[1\\] + nums\\[2\\] = 3 and 3 is divisible by nums\\[0\\], nums\\[1\\], and nums\\[2\\].\n\n**Constraints:**\n\n*   `3 <= nums.length <= 105`\n*   `1 <= nums[i] <= 100`The maximum value of nums.length is very large, but the maximum value of nums[i] is not. Count the number of times each value appears in nums. Brute force through every possible combination of values and count how many single divisor triplets can be made with that combination of values.",
          "output": "from collections import defaultdict\n\ndef check_friends(n, restrictions, requests):\n    friends = defaultdict(set)\n    for a, b in restrictions:\n        friends[a].add(b)\n        friends[b].add(a)\n\n    result = []\n    for a, b in requests:\n        if b not in friends[a] and a not in friends[b]:\n            friends[a].add(b)\n            friends[b].add(a)\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `text`. We want to display `text` on a screen of width `w` and height `h`. You can choose any font size from array `fonts`, which contains the available font sizes **in ascending order**.\n\nYou can use the `FontInfo` interface to get the width and height of any character at any available font size.\n\nThe `FontInfo` interface is defined as such:\n\ninterface FontInfo {\n  // Returns the width of character ch on the screen using font size fontSize.\n  // O(1) per call\n  public int getWidth(int fontSize, char ch);\n\n  // Returns the height of any character on the screen using font size fontSize.\n  // O(1) per call\n  public int getHeight(int fontSize);\n}\n\nThe calculated width of `text` for some `fontSize` is the **sum** of every `getWidth(fontSize, text[i])` call for each `0 <= i < text.length` (**0-indexed**). The calculated height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on a **single line**.\n\nIt is guaranteed that `FontInfo` will return the same value if you call `getHeight` or `getWidth` with the same parameters.\n\nIt is also guaranteed that for any font size `fontSize` and any character `ch`:\n\n*   `getHeight(fontSize) <= getHeight(fontSize+1)`\n*   `getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)`\n\nReturn _the maximum font size you can use to display_ `text` _on the screen_. If `text` cannot fit on the display with any font size, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"helloworld \", w = 80, h = 20, fonts = \\[6,8,10,12,14,16,18,24,36\\]\n**Output:** 6\n\n**Example 2:**\n\n**Input:** text =  \"leetcode \", w = 1000, h = 50, fonts = \\[1,2,4\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** text =  \"easyquestion \", w = 100, h = 100, fonts = \\[10,15,20,25\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= text.length <= 50000`\n*   `text` contains only lowercase English letters.\n*   `1 <= w <= 107`\n*   `1 <= h <= 104`\n*   `1 <= fonts.length <= 105`\n*   `1 <= fonts[i] <= 105`\n*   `fonts` is sorted in ascending order and does not contain duplicates.Use binary search  to find the last valid font.",
          "output": "def max_font_size(text: str, w: int, h: int, fonts: List[int], font_info) -> int:\n    left, right, ans = 0, len(fonts) - 1, -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        font_size = fonts[mid]\n        width, height = sum(font_info.getWidth(font_size, ch) for ch in text), font_info.getHeight(font_size)\n        if width <= w and height <= h:\n            ans = font_size\n            left = mid + 1\n        else:\n            right = mid - 1\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` representing the number of playing cards you have. A **house of cards** meets the following conditions:\n\n*   A **house of cards** consists of one or more rows of **triangles** and horizontal cards.\n*   **Triangles** are created by leaning two cards against each other.\n*   One card must be placed horizontally between **all adjacent** triangles in a row.\n*   Any triangle on a row higher than the first must be placed on a horizontal card from the previous row.\n*   Each triangle is placed in the **leftmost** available spot in the row.\n\nReturn _the number of **distinct** **house of cards** you can build using **all**_ `n` _cards._ Two houses of cards are considered distinct if there exists a row where the two houses contain a different number of cards.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 16\n**Output:** 2\n**Explanation:** The two valid houses of cards are shown.\nThe third house of cards in the diagram is not valid because the rightmost triangle on the top row is not placed on top of a horizontal card.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** The one valid house of cards is shown.\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:** 0\n**Explanation:** The three houses of cards in the diagram are not valid.\nThe first house of cards needs a horizontal card placed between the two triangles.\nThe second house of cards uses 5 cards.\nThe third house of cards uses 2 cards.\n\n**Constraints:**\n\n*   `1 <= n <= 500`If a row has k triangles, how many cards does it take to build that row? It takes 3 * k - 1 cards. If you still have i cards left, and on the previous row there were k triangles, what are the possible ways to build the current row? You can start at 1 triangle and continue adding more until you run out of cards or reach k - 1 triangles.",
          "output": "from collections import defaultdict\n\ndef maxQualityRec(adjDict, values, node, timeLeft, visited):\n    if timeLeft < 0:\n        return float('-inf')\n\n    maxQuality = 0\n    visited.add(node)\n    for neighbor, time in adjDict[node]:\n        adjDict[neighbor].remove((node, time))\n        maxQuality = max(maxQuality, maxQualityRec(adjDict, values, neighbor, timeLeft - time, visited))\n        adjDict[neighbor].append((node, time))\n    \n    visited.remove(node)\n    return maxQuality + (values[node] if node not in visited else 0)\n\ndef maxQuality(n, values, edges, maxTime):\n    adjDict = defaultdict(list)\n    for u, v, time in edges:\n        adjDict[u].append((v, time))\n        adjDict[v].append((u, time))\n\n    visited = set()\n    return maxQualityRec(adjDict, values, 0, maxTime, visited)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the `grid` `k` times.\n\nIn one shift operation:\n\n*   Element at `grid[i][j]` moves to `grid[i][j + 1]`.\n*   Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`.\n*   Element at `grid[m - 1][n - 1]` moves to `grid[0][0]`.\n\nReturn the _2D grid_ after applying shift operation `k` times.\n\n",
          "input": "**Example 1:**\n\n**Input:** `grid` = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 1\n**Output:** \\[\\[9,1,2\\],\\[3,4,5\\],\\[6,7,8\\]\\]\n\n**Example 2:**\n\n**Input:** `grid` = \\[\\[3,8,1,9\\],\\[19,7,2,5\\],\\[4,6,11,10\\],\\[12,0,21,13\\]\\], k = 4\n**Output:** \\[\\[12,0,21,13\\],\\[3,8,1,9\\],\\[19,7,2,5\\],\\[4,6,11,10\\]\\]\n\n**Example 3:**\n\n**Input:** `grid` = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 9\n**Output:** \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m <= 50`\n*   `1 <= n <= 50`\n*   `-1000 <= grid[i][j] <= 1000`\n*   `0 <= k <= 100`Simulate step by step. move grid[i][j] to grid[i][j+1]. handle last column of the grid. Put the matrix row by row to a vector. take k % vector.length and move last k of the vector to the beginning. put the vector to the matrix back the same way.",
          "output": "def dayOfYear(date: str) -> int:\n    year, month, day = map(int, date.split('-'))\n\n    daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        daysInMonth[2] = 29\n\n    dayOfYear = sum(daysInMonth[:month]) + day\n    return dayOfYear\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree with the following rules:\n\n1.  `root.val == 0`\n2.  If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`\n3.  If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`\n\nNow the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`.\n\nImplement the `FindElements` class:\n\n*   `FindElements(TreeNode* root)` Initializes the object with a contaminated binary tree and recovers it.\n*   `bool find(int target)` Returns `true` if the `target` value exists in the recovered binary tree.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"FindElements \", \"find \", \"find \"\\]\n\\[\\[\\[-1,null,-1\\]\\],\\[1\\],\\[2\\]\\]\n**Output**\n\\[null,false,true\\]\n**Explanation**\nFindElements findElements = new FindElements(\\[-1,null,-1\\]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True \n\n**Example 2:**\n\n**Input**\n\\[ \"FindElements \", \"find \", \"find \", \"find \"\\]\n\\[\\[\\[-1,-1,-1,-1,-1\\]\\],\\[1\\],\\[3\\],\\[5\\]\\]\n**Output**\n\\[null,true,true,false\\]\n**Explanation**\nFindElements findElements = new FindElements(\\[-1,-1,-1,-1,-1\\]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False\n\n**Example 3:**\n\n**Input**\n\\[ \"FindElements \", \"find \", \"find \", \"find \", \"find \"\\]\n\\[\\[\\[-1,null,-1,-1,null,-1\\]\\],\\[2\\],\\[3\\],\\[4\\],\\[5\\]\\]\n**Output**\n\\[null,true,false,false,true\\]\n**Explanation**\nFindElements findElements = new FindElements(\\[-1,null,-1,-1,null,-1\\]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True\n\n**Constraints:**\n\n*   `TreeNode.val == -1`\n*   The height of the binary tree is less than or equal to `20`\n*   The total number of nodes is between `[1, 104]`\n*   Total calls of `find()` is between `[1, 104]`\n*   `0 <= target <= 106`Use DFS to traverse the binary tree and recover it. Use a hashset to store TreeNode.val for finding.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass FindElements:\n    def __init__(self, root: TreeNode):\n        self.values = set()\n        self.recoverTree(root, 0)\n\n    def find(self, target: int) -> bool:\n        return target in self.values\n\n    def recoverTree(self, node: TreeNode, val: int):\n        if node is None:\n            return\n\n        node.val = val\n        self.values.add(val)\n\n        self.recoverTree(node.left, val * 2 + 1)\n        self.recoverTree(node.right, val * 2 + 2)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the **maximum possible sum** of elements of the array such that it is divisible by three_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,6,5,1,8\\]\n**Output:** 18\n**Explanation:** Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).\n\n**Example 2:**\n\n**Input:** nums = \\[4\\]\n**Output:** 0\n**Explanation:** Since 4 is not divisible by 3, do not pick any number.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,4\\]\n**Output:** 12\n**Explanation:** Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 4 * 104`\n*   `1 <= nums[i] <= 104`Represent the state as DP[pos][mod]: maximum possible sum starting in the position \"pos\" in the array where the current sum modulo 3 is equal to mod.",
          "output": "from collections import defaultdict\nfrom random import randint\n\nclass MajorityChecker:\n    def __init__(self, arr: List[int]):\n        self.arr = arr\n        self.positions = defaultdict(list)\n        for i, num in enumerate(arr):\n            self.positions[num].append(i)\n\n    def query(self, left: int, right: int, threshold: int) -> int:\n        for _ in range(20):\n            randomIndex = randint(left, right)\n            num = self.arr[randomIndex]\n            lb = self.lower_bound(self.positions[num], left)\n            ub = self.upper_bound(self.positions[num], right)\n            if ub - lb >= threshold:\n                return num\n        return -1\n\n    def lower_bound(self, nums, target):\n        l, r = 0, len(nums)\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    def upper_bound(self, nums, target):\n        l, r = 0, len(nums)\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] <= target:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n"
     },
     {
          "instruction": "Write python code for this problem: A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.\n\nThe game is represented by an `m x n` grid of characters `grid` where each element is a wall, floor, or box.\n\nYour task is to move the box `'B'` to the target position `'T'` under the following rules:\n\n*   The character `'S'` represents the player. The player can move up, down, left, right in `grid` if it is a floor (empty cell).\n*   The character `'.'` represents the floor which means a free cell to walk.\n*   The character `'#'` represents the wall which means an obstacle (impossible to walk there).\n*   There is only one box `'B'` and one target cell `'T'` in the `grid`.\n*   The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a **push**.\n*   The player cannot walk through the box.\n\nReturn _the minimum number of **pushes** to move the box to the target_. If there is no way to reach the target, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\],\n               \\[ \"# \", \"T \", \"# \", \"# \", \"# \", \"# \"\\],\n               \\[ \"# \", \". \", \". \", \"B \", \". \", \"# \"\\],\n               \\[ \"# \", \". \", \"# \", \"# \", \". \", \"# \"\\],\n               \\[ \"# \", \". \", \". \", \". \", \"S \", \"# \"\\],\n               \\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\]\\]\n**Output:** 3\n**Explanation:** We return only the number of times the box is pushed.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\],\n               \\[ \"# \", \"T \", \"# \", \"# \", \"# \", \"# \"\\],\n               \\[ \"# \", \". \", \". \", \"B \", \". \", \"# \"\\],\n               \\[ \"# \", \"# \", \"# \", \"# \", \". \", \"# \"\\],\n               \\[ \"# \", \". \", \". \", \". \", \"S \", \"# \"\\],\n               \\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\]\\]\n**Output:** -1\n\n**Example 3:**\n\n**Input:** grid = \\[\\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\],\n               \\[ \"# \", \"T \", \". \", \". \", \"# \", \"# \"\\],\n               \\[ \"# \", \". \", \"# \", \"B \", \". \", \"# \"\\],\n               \\[ \"# \", \". \", \". \", \". \", \". \", \"# \"\\],\n               \\[ \"# \", \". \", \". \", \". \", \"S \", \"# \"\\],\n               \\[ \"# \", \"# \", \"# \", \"# \", \"# \", \"# \"\\]\\]\n**Output:** 5\n**Explanation:** push the box down, left, left, up and up.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 20`\n*   `grid` contains only characters `'.'`, `'#'`, `'S'`, `'T'`, or `'B'`.\n*   There is only one character `'S'`, `'B'`, and `'T'` in the `grid`.We represent the search state as (player_row, player_col, box_row, box_col). You need to count only the number of pushes. Then inside of your BFS check if the box could be pushed (in any direction) given the current position of the player.",
          "output": "def numRollsToTarget(n, k, target):\n    MOD = 10**9 + 7\n    dp = [[0] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            for l in range(1, k + 1):\n                if j >= l:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - l]) % MOD\n    return dp[n][target]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3\\]\n**Output:** 2\n**Explanation:** 1 and 2 are counted cause 2 and 3 are in arr.\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,3,3,5,5,7,7\\]\n**Output:** 0\n**Explanation:** No numbers are counted, cause there is no 2, 4, 6, or 8 in arr.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `0 <= arr[i] <= 1000`Use hashset to store all elements. Loop again to count all valid elements.",
          "output": "def sum_zero(n):\n    res = []\n    for i in range(1, (n // 2) + 1):\n        res.append(i)\n        res.append(-i)\n    if n % 2 != 0:\n        res.append(0)\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given two **0-indexed** integer arrays `nums1` and `nums2`, return _a list_ `answer` _of size_ `2` _where:_\n\n*   `answer[0]` _is a list of all **distinct** integers in_ `nums1` _which are **not** present in_ `nums2`_._\n*   `answer[1]` _is a list of all **distinct** integers in_ `nums2` _which are **not** present in_ `nums1`.\n\n**Note** that the integers in the lists may be returned in **any** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2,3\\], nums2 = \\[2,4,6\\]\n**Output:** \\[\\[1,3\\],\\[4,6\\]\\]\n**Explanation:**\nFor nums1, nums1\\[1\\] = 2 is present at index 0 of nums2, whereas nums1\\[0\\] = 1 and nums1\\[2\\] = 3 are not present in nums2. Therefore, answer\\[0\\] = \\[1,3\\].\nFor nums2, nums2\\[0\\] = 2 is present at index 1 of nums1, whereas nums2\\[1\\] = 4 and nums2\\[2\\] = 6 are not present in nums2. Therefore, answer\\[1\\] = \\[4,6\\].\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,2,3,3\\], nums2 = \\[1,1,2,2\\]\n**Output:** \\[\\[3\\],\\[\\]\\]\n**Explanation:**\nFor nums1, nums1\\[2\\] and nums1\\[3\\] are not present in nums2. Since nums1\\[2\\] == nums1\\[3\\], their value is only included once and answer\\[0\\] = \\[3\\].\nEvery integer in nums2 is present in nums1. Therefore, answer\\[1\\] = \\[\\].\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `-1000 <= nums1[i], nums2[i] <= 1000`For each integer in nums1, check if it exists in nums2. Do the same for each integer in nums2.",
          "output": "from itertools import permutations\n\ndef unique_permutations(digits):\n    unique_perms = set(permutations(digits))\n    unique_ints = sorted({int(''.join(map(str, perm))) for perm in unique_perms})\n    \n    return unique_ints\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` **piles** of coins on a table. Each pile consists of a **positive number** of coins of assorted denominations.\n\nIn one move, you can choose any coin on **top** of any pile, remove it, and add it to your wallet.\n\nGiven a list `piles`, where `piles[i]` is a list of integers denoting the composition of the `ith` pile from **top to bottom**, and a positive integer `k`, return _the **maximum total value** of coins you can have in your wallet if you choose **exactly**_ `k` _coins optimally_.\n\n",
          "input": "**Example 1:**\n\n**Input:** piles = \\[\\[1,100,3\\],\\[7,8,9\\]\\], k = 2\n**Output:** 101\n**Explanation:**\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101.\n\n**Example 2:**\n\n**Input:** piles = \\[\\[100\\],\\[100\\],\\[100\\],\\[100\\],\\[100\\],\\[100\\],\\[1,1,1,1,1,1,700\\]\\], k = 7\n**Output:** 706\n**Explanation:**\nThe maximum total can be obtained if we choose all coins from the last pile.\n\n**Constraints:**\n\n*   `n == piles.length`\n*   `1 <= n <= 1000`\n*   `1 <= piles[i][j] <= 105`\n*   `1 <= k <= sum(piles[i].length) <= 2000`For each pile i, what will be the total value of coins we can collect if we choose the first j coins? How can we use dynamic programming to combine the results from different piles to find the most optimal answer?",
          "output": "import heapq\n\ndef maxCoins(piles, k):\n    pq = []\n    for pile in piles:\n        for coin in pile:\n            heapq.heappush(pq, -coin)\n    \n    max_value = 0\n    while k > 0:\n        max_value += -heapq.heappop(pq)\n        k -= 1\n    return max_value\n"
     },
     {
          "instruction": "Write python code for this problem: On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return _the **minimum time** in seconds to visit all the points in the order given by_ `points`.\n\nYou can move according to these rules:\n\n*   In `1` second, you can either:\n    *   move vertically by one unit,\n    *   move horizontally by one unit, or\n    *   move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).\n*   You have to visit the points in the same order as they appear in the array.\n*   You are allowed to pass through points that appear later in the order, but these do not count as visits.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[3,4\\],\\[-1,0\\]\\]\n**Output:** 7\n**Explanation:** One optimal path is **\\[1,1\\]** -> \\[2,2\\] -> \\[3,3\\] -> **\\[3,4\\]** \\-> \\[2,3\\] -> \\[1,2\\] -> \\[0,1\\] -> **\\[-1,0\\]**   \nTime from \\[1,1\\] to \\[3,4\\] = 3 seconds \nTime from \\[3,4\\] to \\[-1,0\\] = 4 seconds\nTotal time = 7 seconds\n\n**Example 2:**\n\n**Input:** points = \\[\\[3,2\\],\\[-2,2\\]\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `points.length == n`\n*   `1 <= n <= 100`\n*   `points[i].length == 2`\n*   `-1000 <= points[i][0], points[i][1] <= 1000`To walk from point A to point B there will be an optimal strategy to walk ? Advance in diagonal as possible then after that go in straight line. Repeat the process until visiting all the points.",
          "output": "def minTimeToVisitAllPoints(points):\n    time = 0\n    for i in range(1, len(points)):\n        dx = abs(points[i][0] - points[i - 1][0])\n        dy = abs(points[i][1] - points[i - 1][1])\n        time += max(dx, dy)\n    return time\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.  \n  \nReturn the number of servers that communicate with any other server.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** 0\n**Explanation:** No servers can communicate with others.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0\\],\\[1,1\\]\\]\n**Output:** 3\n**Explanation:** All three servers can communicate with at least one other server.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,0,0\\],\\[0,0,1,0\\],\\[0,0,1,0\\],\\[0,0,0,1\\]\\]\n**Output:** 4\n**Explanation:** The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m <= 250`\n*   `1 <= n <= 250`\n*   `grid[i][j] == 0 or 1`Store number of computer in each row and column. Count all servers that are not isolated.",
          "output": "def remove_zero_sum_sublists(head):\n    dummy = ListNode(0)\n    dummy.next = head\n    current = dummy\n\n    while current:\n        sum = 0\n        while head:\n            sum += head.val\n            if sum == 0:\n                current.next = head.next\n            head = head.next\n        current = current.next\n        if current:\n            head = current.next\n\n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `products` and a string `searchWord`.\n\nDesign a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with `searchWord`. If there are more than three products with a common prefix return the three lexicographically minimums products.\n\nReturn _a list of lists of the suggested products after each character of_ `searchWord` _is typed_.\n\n",
          "input": "**Example 1:**\n\n**Input:** products = \\[ \"mobile \", \"mouse \", \"moneypot \", \"monitor \", \"mousepad \"\\], searchWord =  \"mouse \"\n**Output:** \\[\\[ \"mobile \", \"moneypot \", \"monitor \"\\],\\[ \"mobile \", \"moneypot \", \"monitor \"\\],\\[ \"mouse \", \"mousepad \"\\],\\[ \"mouse \", \"mousepad \"\\],\\[ \"mouse \", \"mousepad \"\\]\\]\n**Explanation:** products sorted lexicographically = \\[ \"mobile \", \"moneypot \", \"monitor \", \"mouse \", \"mousepad \"\\].\nAfter typing m and mo all products match and we show user \\[ \"mobile \", \"moneypot \", \"monitor \"\\].\nAfter typing mou, mous and mouse the system suggests \\[ \"mouse \", \"mousepad \"\\].\n\n**Example 2:**\n\n**Input:** products = \\[ \"havana \"\\], searchWord =  \"havana \"\n**Output:** \\[\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\],\\[ \"havana \"\\]\\]\n**Explanation:** The only word  \"havana \" will be always suggested while typing the search word.\n\n**Constraints:**\n\n*   `1 <= products.length <= 1000`\n*   `1 <= products[i].length <= 3000`\n*   `1 <= sum(products[i].length) <= 2 * 104`\n*   All the strings of `products` are **unique**.\n*   `products[i]` consists of lowercase English letters.\n*   `1 <= searchWord.length <= 1000`\n*   `searchWord` consists of lowercase English letters.Brute force is a good choice because length of the string is \u2264 1000. Binary search the answer. Use Trie data structure to store the best three matching. Traverse the Trie.",
          "output": "def suggestedProducts(products, searchWord):\n    result = []\n    products.sort()\n    \n    for i in range(len(searchWord)):\n        suggestions = []\n        for product in products:\n            if len(product) > i and product[i] == searchWord[i]:\n                suggestions.append(product)\n                if len(suggestions) == 3:\n                    break\n        result.append(suggestions)\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\n\nGiven two integers `steps` and `arrLen`, return the number of ways such that your pointer is still at index `0` after **exactly** `steps` steps. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** steps = 3, arrLen = 2\n**Output:** 4\n**Explanation:** There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n\n**Example 2:**\n\n**Input:** steps = 2, arrLen = 4\n**Output:** 2\n**Explanation:** There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n\n**Example 3:**\n\n**Input:** steps = 4, arrLen = 2\n**Output:** 8\n\n**Constraints:**\n\n*   `1 <= steps <= 500`\n*   `1 <= arrLen <= 106`Try with Dynamic programming, dp(pos,steps): number of ways to back pos = 0 using exactly \"steps\" moves. Notice that the computational complexity does not depend of \"arrlen\".",
          "output": "from functools import lru_cache\n\nmod = 10**9 + 7\n\ndef numOfWays(steps: int, arrLen: int) -> int:\n    @lru_cache(None)\n    def dp(s, p):\n        if p < 0 or p >= arrLen or p > steps - p:\n            return 0\n        if s == 0:\n            return p == 0\n        return (dp(s - 1, p - 1) + dp(s - 1, p) + dp(s - 1, p + 1)) % mod\n\n    return dp(steps, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: **Tic-tac-toe** is played by two players `A` and `B` on a `3 x 3` grid. The rules of Tic-Tac-Toe are:\n\n*   Players take turns placing characters into empty squares `' '`.\n*   The first player `A` always places `'X'` characters, while the second player `B` always places `'O'` characters.\n*   `'X'` and `'O'` characters are always placed into empty squares, never on filled ones.\n*   The game ends when there are **three** of the same (non-empty) character filling any row, column, or diagonal.\n*   The game also ends if all squares are non-empty.\n*   No more moves can be played if the game is over.\n\nGiven a 2D integer array `moves` where `moves[i] = [rowi, coli]` indicates that the `ith` move will be played on `grid[rowi][coli]`. return _the winner of the game if it exists_ (`A` or `B`). In case the game ends in a draw return `\"Draw \"`. If there are still movements to play return `\"Pending \"`.\n\nYou can assume that `moves` is valid (i.e., it follows the rules of **Tic-Tac-Toe**), the grid is initially empty, and `A` will play first.\n\n",
          "input": "**Example 1:**\n\n**Input:** moves = \\[\\[0,0\\],\\[2,0\\],\\[1,1\\],\\[2,1\\],\\[2,2\\]\\]\n**Output:**  \"A \"\n**Explanation:** A wins, they always play first.\n\n**Example 2:**\n\n**Input:** moves = \\[\\[0,0\\],\\[1,1\\],\\[0,1\\],\\[0,2\\],\\[1,0\\],\\[2,0\\]\\]\n**Output:**  \"B \"\n**Explanation:** B wins.\n\n**Example 3:**\n\n**Input:** moves = \\[\\[0,0\\],\\[1,1\\],\\[2,0\\],\\[1,0\\],\\[1,2\\],\\[2,1\\],\\[0,1\\],\\[0,2\\],\\[2,2\\]\\]\n**Output:**  \"Draw \"\n**Explanation:** The game ends in a draw since there are no moves to make.\n\n**Constraints:**\n\n*   `1 <= moves.length <= 9`\n*   `moves[i].length == 2`\n*   `0 <= rowi, coli <= 2`\n*   There are no repeated elements on `moves`.\n*   `moves` follow the rules of tic tac toe.It's straightforward to check if A or B won or not, check for each row/column/diag if all the three are the same. Then if no one wins, the game is a draw iff the board is full, i.e. moves.length = 9 otherwise is pending.",
          "output": "def validateBinaryTreeNodes(n, leftChild, rightChild):\n    parent = [-1] * n\n    for i in range(n):\n        if leftChild[i] != -1:\n            if parent[leftChild[i]] != -1:\n                return False\n            parent[leftChild[i]] = i\n        if rightChild[i] != -1:\n            if parent[rightChild[i]] != -1:\n                return False\n            parent[rightChild[i]] = i\n    \n    root = -1\n    for i in range(n):\n        if parent[i] == -1:\n            if root != -1:\n                return False\n            root = i\n\n    return root != -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows:\n\n*   **Jumbo Burger:** `4` tomato slices and `1` cheese slice.\n*   **Small Burger:** `2` Tomato slices and `1` cheese slice.\n\nReturn `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to `0` and the number of remaining `cheeseSlices` equal to `0`. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to `0` return `[]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** tomatoSlices = 16, cheeseSlices = 7\n**Output:** \\[1,6\\]\n**Explantion:** To make one jumbo burger and 6 small burgers we need 4\\*1 + 2\\*6 = 16 tomato and 1 + 6 = 7 cheese.\nThere will be no remaining ingredients.\n\n**Example 2:**\n\n**Input:** tomatoSlices = 17, cheeseSlices = 4\n**Output:** \\[\\]\n**Explantion:** There will be no way to use all ingredients to make small and jumbo burgers.\n\n**Example 3:**\n\n**Input:** tomatoSlices = 4, cheeseSlices = 17\n**Output:** \\[\\]\n**Explantion:** Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.\n\n**Constraints:**\n\n*   `0 <= tomatoSlices, cheeseSlices <= 107`Can we have an answer if the number of tomatoes is odd ? If we have answer will be there multiple answers or just one answer ? Let us define number of jumbo burgers as X and number of small burgers as Y\r\nWe have to find an x and y in this equation 1. 4X + 2Y = tomato 2. X + Y = cheese",
          "output": "def closest_factors(num):\n    factor1 = int((num + 2) ** 0.5)\n    while True:\n        factor2 = (num + 2) // factor1\n        if factor1 * factor2 == num + 2:\n            return factor1, factor2\n        factor2 = (num + 1) // factor1\n        if factor1 * factor2 == num + 1:\n            return factor1, factor2\n        factor1 -= 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `m * n` matrix of ones and zeros, return how many **square** submatrices have all ones.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix =\n\\[\n  \\[0,1,1,1\\],\n  \\[1,1,1,1\\],\n  \\[0,1,1,1\\]\n\\]\n**Output:** 15\n**Explanation:** \nThere are **10** squares of side 1.\nThere are **4** squares of side 2.\nThere is  **1** square of side 3.\nTotal number of squares = 10 + 4 + 1 = **15**.\n\n**Example 2:**\n\n**Input:** matrix = \n\\[\n  \\[1,0,1\\],\n  \\[1,1,0\\],\n  \\[1,1,0\\]\n\\]\n**Output:** 7\n**Explanation:** \nThere are **6** squares of side 1.  \nThere is **1** square of side 2. \nTotal number of squares = 6 + 1 = **7**.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 300`\n*   `1 <= arr[0].length <= 300`\n*   `0 <= arr[i][j] <= 1`Create an additive table that counts the sum of elements of submatrix with the superior corner at (0,0). Loop over all subsquares in O(n^3) and check if the sum make the whole array to be ones, if it checks then add 1 to the answer.",
          "output": "def largest_multiple_of_three(digits):\n    count = [0] * 3\n    num_sum = sum(digits)\n    \n    for d in digits:\n        count[d % 3] += 1\n\n    if num_sum % 3 == 1:\n        if count[1] >= 1:\n            count[1] -= 1\n        else:\n            count[2] -= 2\n    elif num_sum % 3 == 2:\n        if count[2] >= 1:\n            count[2] -= 1\n        else:\n            count[1] -= 2\n\n    res = \"\"\n    for i in range(10):\n        res += str(i) * count[i % 3]\n    \n    if res and res[-1] == \"0\":\n        return \"0\"\n    return res[::-1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` containing lowercase letters and an integer `k`. You need to :\n\n*   First, change some characters of `s` to other lowercase English letters.\n*   Then divide `s` into `k` non-empty disjoint substrings such that each substring is a palindrome.\n\nReturn _the minimal number of characters that you need to change to divide the string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abc \", k = 2\n**Output:** 1\n**Explanation:** You can split the string into  \"ab \" and  \"c \", and change 1 character in  \"ab \" to make it palindrome.\n\n**Example 2:**\n\n**Input:** s =  \"aabbc \", k = 3\n**Output:** 0\n**Explanation:** You can split the string into  \"aa \",  \"bb \" and  \"c \", all of them are palindrome.\n\n**Example 3:**\n\n**Input:** s =  \"leetcode \", k = 8\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= k <= s.length <= 100`.\n*   `s` only contains lowercase English letters.For each substring calculate the minimum number of steps to make it palindrome and store it in a table. Create a dp(pos, cnt) which means the minimum number of characters changed for the suffix of s starting on pos splitting the suffix on cnt chunks.",
          "output": "def palindromePartition(s: str, k: int) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for len in range(2, n + 1):\n        for i in range(n - len + 1):\n            j = i + len - 1\n            dp[i][j] = dp[i + 1][j - 1] + (s[i] != s[j])\n\n    memo = [float('inf')] * n\n    for i in range(n):\n        if dp[0][i] == 0:\n            memo[i] = 0\n        else:\n            for j in range(i):\n                memo[i] = min(memo[i], memo[j] + dp[j + 1][i])\n\n    return memo[-1] + k\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:\n\n*   `ImmutableListNode`: An interface of immutable linked list, you are given the head of the list.\n\nYou need to use the following functions to access the linked list (you **can't** access the `ImmutableListNode` directly):\n\n*   `ImmutableListNode.printValue()`: Print value of the current node.\n*   `ImmutableListNode.getNext()`: Return the next node.\n\nThe input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4\\]\n**Output:** \\[4,3,2,1\\]\n\n**Example 2:**\n\n**Input:** head = \\[0,-4,-1,3,-5\\]\n**Output:** \\[-5,3,-1,-4,0\\]\n\n**Example 3:**\n\n**Input:** head = \\[-2,0,6,4,4,-6\\]\n**Output:** \\[-6,4,4,6,0,-2\\]\n\n**Constraints:**\n\n*   The length of the linked list is between `[1, 1000]`.\n*   The value of each node in the linked list is between `[-1000, 1000]`.\n\n**Follow up:**\n\nCould you solve this problem in:\n\n*   Constant space complexity?\n*   Linear time complexity and less than linear space complexity?",
          "output": "def printLinkedListInReverse(head: 'ImmutableListNode') -> None:\n    if head is not None:\n        printLinkedListInReverse(head.getNext())\n        head.printValue()\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 234\n**Output:** 15 \n**Explanation:** \nProduct of digits = 2 \\* 3 \\* 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15\n\n**Example 2:**\n\n**Input:** n = 4421\n**Output:** 21\n**Explanation:** \nProduct of digits = 4 \\* 4 \\* 2 \\* 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21\n\n**Constraints:**\n\n*   `1 <= n <= 10^5`How to compute all digits of the number ? Use modulus operator (%) to compute the last digit. Generalise modulus operator idea to compute all digits.",
          "output": "def can_make_pali_queries(s, queries):\n    result = []\n    for left, right, k in queries:\n        count = [0] * 26\n        for i in range(left, right + 1):\n            count[ord(s[i]) - ord('a')] += 1\n        odd_count = sum(c % 2 for c in count)\n        result.append(odd_count // 2 <= k)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` people that are split into some unknown number of groups. Each person is labeled with a **unique ID** from `0` to `n - 1`.\n\nYou are given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, then person `1` must be in a group of size `3`.\n\nReturn _a list of groups such that each person `i` is in a group of size `groupSizes[i]`_.\n\nEach person should appear in **exactly one group**, and every person must be in a group. If there are multiple answers, **return any of them**. It is **guaranteed** that there will be **at least one** valid solution for the given input.\n\n",
          "input": "**Example 1:**\n\n**Input:** groupSizes = \\[3,3,3,3,3,1,3\\]\n**Output:** \\[\\[5\\],\\[0,1,2\\],\\[3,4,6\\]\\]\n**Explanation:** \nThe first group is \\[5\\]. The size is 1, and groupSizes\\[5\\] = 1.\nThe second group is \\[0,1,2\\]. The size is 3, and groupSizes\\[0\\] = groupSizes\\[1\\] = groupSizes\\[2\\] = 3.\nThe third group is \\[3,4,6\\]. The size is 3, and groupSizes\\[3\\] = groupSizes\\[4\\] = groupSizes\\[6\\] = 3.\nOther possible solutions are \\[\\[2,1,6\\],\\[5\\],\\[0,4,3\\]\\] and \\[\\[5\\],\\[0,6,2\\],\\[4,3,1\\]\\].\n\n**Example 2:**\n\n**Input:** groupSizes = \\[2,1,3,3,3,2\\]\n**Output:** \\[\\[1\\],\\[0,5\\],\\[2,3,4\\]\\]\n\n**Constraints:**\n\n*   `groupSizes.length == n`\n*   `1 <= n <= 500`\n*   `1 <= groupSizes[i] <= n`Put people's IDs with same groupSize into buckets, then split each bucket into groups. Greedy fill until you need a new group.",
          "output": "from collections import defaultdict\n\ndef groupThePeople(groupSizes):\n    groups = defaultdict(list)\n    result = []\n\n    for i, size in enumerate(groupSizes):\n        groups[size].append(i)\n        if len(groups[size]) == size:\n            result.append(groups[size])\n            groups[size] = []\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the **smallest** `divisor` such that the result mentioned above is less than or equal to `threshold`.\n\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).\n\nThe test cases are generated so that there will be an answer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,5,9\\], threshold = 6\n**Output:** 5\n**Explanation:** We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \n\n**Example 2:**\n\n**Input:** nums = \\[44,22,33,11,1\\], threshold = 5\n**Output:** 44\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `1 <= nums[i] <= 106`\n*   `nums.length <= threshold <= 106`Examine every possible number for solution. Choose the largest of them. Use binary search to reduce the time complexity.",
          "output": "def format_date(date):\n    months = {\n        \"Jan\": \"01\",\n        \"Feb\": \"02\",\n        \"Mar\": \"03\",\n        \"Apr\": \"04\",\n        \"May\": \"05\",\n        \"Jun\": \"06\",\n        \"Jul\": \"07\",\n        \"Aug\": \"08\",\n        \"Sep\": \"09\",\n        \"Oct\": \"10\",\n        \"Nov\": \"11\",\n        \"Dec\": \"12\",\n    }\n\n    day, month, year = date.split()\n    return f\"{year}-{months[month]}-{day}\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing `1` to `0` and `0` to `1`). A pair of cells are called neighbors if they share one edge.\n\nReturn the _minimum number of steps_ required to convert `mat` to a zero matrix or `-1` if you cannot.\n\nA **binary matrix** is a matrix with all cells equal to `0` or `1` only.\n\nA **zero matrix** is a matrix with all cells equal to `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[0,0\\],\\[0,1\\]\\]\n**Output:** 3\n**Explanation:** One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[0\\]\\]\n**Output:** 0\n**Explanation:** Given matrix is a zero matrix. We do not need to change it.\n\n**Example 3:**\n\n**Input:** mat = \\[\\[1,0,0\\],\\[1,0,0\\]\\]\n**Output:** -1\n**Explanation:** Given matrix cannot be a zero matrix.\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 3`\n*   `mat[i][j]` is either `0` or `1`.Flipping same index two times is like not flipping it at all. Each index can be flipped one time. Try all possible combinations. O(2^(n*m)).",
          "output": "def sum_of_divisors_with_four_divisors(nums):\n    total_sum = 0\n\n    for num in nums:\n        div_count = 0\n        div_sum = 0\n\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                div_sum += i\n                div_count += 1\n\n                if num // i != i:\n                    div_sum += num // i\n                    div_count += 1\n\n            if div_count > 4:\n                break\n\n        if div_count == 4:\n            total_sum += div_sum\n\n    return total_sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either `0` or `1`. The linked list holds the binary representation of a number.\n\nReturn the _decimal value_ of the number in the linked list.\n\nThe **most significant bit** is at the head of the linked list.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,0,1\\]\n**Output:** 5\n**Explanation:** (101) in base 2 = (5) in base 10\n\n**Example 2:**\n\n**Input:** head = \\[0\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The Linked List is not empty.\n*   Number of nodes will not exceed `30`.\n*   Each node's value is either `0` or `1`.Traverse the linked list and store all values in a string or array. convert the values obtained to decimal value. You can solve the problem in O(1) memory using bits operation. use shift left operation ( << ) and or operation ( | ) to get the decimal value in one operation.",
          "output": "def min_operations(arr1, arr2):\n    n = len(arr1)\n    dp = [float('inf')] * n\n    for a in arr2:\n        new_dp = [float('inf')] * n\n        p = 0\n        for i in range(n):\n            if a < arr1[i]:\n                new_dp[i] = p\n            if i > 0 and dp[i - 1] < p:\n                p = dp[i - 1]\n            if arr1[i] > arr1[i + 1]:\n                return -1\n        dp = new_dp\n    return dp[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `m x n` matrix `mat` and an integer `threshold`, return _the maximum side-length of a square with a sum less than or equal to_ `threshold` _or return_ `0` _if there is no such square_.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,1,3,2,4,3,2\\],\\[1,1,3,2,4,3,2\\],\\[1,1,3,2,4,3,2\\]\\], threshold = 4\n**Output:** 2\n**Explanation:** The maximum side length of square with sum less than 4 is 2 as shown.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[2,2,2,2,2\\],\\[2,2,2,2,2\\],\\[2,2,2,2,2\\],\\[2,2,2,2,2\\],\\[2,2,2,2,2\\]\\], threshold = 1\n**Output:** 0\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 300`\n*   `0 <= mat[i][j] <= 104`\n*   `0 <= threshold <= 105`Store prefix sum of all grids in another 2D array. Try all possible solutions and if you cannot find one return -1. If x is a valid answer then any y < x is also valid answer. Use binary search to find answer.",
          "output": "def maxSideLength(mat: List[List[int]], threshold: int) -> int:\n    m, n = len(mat), len(mat[0])\n    preSum = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            preSum[i][j] = mat[i - 1][j - 1] + preSum[i - 1][j] + preSum[i][j - 1] - preSum[i - 1][j - 1]\n\n    maxSide = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, min(m, n) + 1):\n                endX, endY = i + k - 1, j + k - 1\n                if endX <= m and endY <= n:\n                    sum = preSum[endX][endY] - preSum[endX][j - 1] - preSum[i - 1][endY] + preSum[i - 1][j - 1]\n                    if sum <= threshold:\n                        maxSide = max(maxSide, k)\n                else:\n                    break\n    return maxSide\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer matrix `grid` where each cell is either `0` (empty) or `1` (obstacle). You can move up, down, left, or right from and to an empty cell in **one step**.\n\nReturn _the minimum number of **steps** to walk from the upper left corner_ `(0, 0)` _to the lower right corner_ `(m - 1, n - 1)` _given that you can eliminate **at most**_ `k` _obstacles_. If it is not possible to find such walk return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,0,0\\],\\[1,1,0\\],\\[0,0,0\\],\\[0,1,1\\],\\[0,0,0\\]\\], k = 1\n**Output:** 6\n**Explanation:** \nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> **(3,2)** -> (4,2).\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,1,1\\],\\[1,1,1\\],\\[1,0,0\\]\\], k = 1\n**Output:** -1\n**Explanation:** We need to eliminate at least two obstacles to find such a walk.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 40`\n*   `1 <= k <= m * n`\n*   `grid[i][j]` is either `0` **or** `1`.\n*   `grid[0][0] == grid[m - 1][n - 1] == 0`Use BFS. BFS on (x,y,r) x,y is coordinate, r is remain number of obstacles you can remove.",
          "output": "from collections import deque\n\ndef shortestPath(grid, k):\n    m, n = len(grid), len(grid[0])\n    visited = [[[False for _ in range(k + 1)] for _ in range(n)] for _ in range(m)]\n    q = deque([(0, 0, 0, k)])\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    steps = 0\n\n    while q:\n        for _ in range(len(q)):\n            x, y, steps, k_remaining = q.popleft()\n            if x == m - 1 and y == n - 1:\n                return steps\n            for dx, dy in moves:\n                new_x, new_y, = x + dx, y + dy\n                if 0 <= new_x < m and 0 <= new_y < n:\n                    new_k_remaining = k_remaining - grid[new_x][new_y]\n                    if new_k_remaining >= 0 and not visited[new_x][new_y][new_k_remaining]:\n                        visited[new_x][new_y][new_k_remaining] = True\n                        q.append((new_x, new_y, steps + 1, new_k_remaining))\n        steps += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return `true` _if_ `nums` _is **consecutive**, otherwise return_ `false`_._\n\nAn array is **consecutive** if it contains every number in the range `[x, x + n - 1]` (**inclusive**), where `x` is the minimum number in the array and `n` is the length of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,4,2\\]\n**Output:** true\n**Explanation:**\nThe minimum value is 1 and the length of nums is 4.\nAll of the values in the range \\[x, x + n - 1\\] = \\[1, 1 + 4 - 1\\] = \\[1, 4\\] = (1, 2, 3, 4) occur in nums.\nTherefore, nums is consecutive.\n\n**Example 2:**\n\n**Input:** nums = \\[1,3\\]\n**Output:** false\n**Explanation:**\nThe minimum value is 1 and the length of nums is 2.\nThe value 2 in the range \\[x, x + n - 1\\] = \\[1, 1 + 2 - 1\\], = \\[1, 2\\] = (1, 2) does not occur in nums.\nTherefore, nums is not consecutive.\n\n**Example 3:**\n\n**Input:** nums = \\[3,5,4\\]\n**Output:** true\n**Explanation:**\nThe minimum value is 3 and the length of nums is 3.\nAll of the values in the range \\[x, x + n - 1\\] = \\[3, 3 + 3 - 1\\] = \\[3, 5\\] = (3, 4, 5) occur in nums.\nTherefore, nums is consecutive.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 105`Try sorting nums. If nums is consecutive and sorted in ascending order, then nums[i] + 1 = nums[i + 1] for every i in the range 0 \u2264 i < nums.length - 1.",
          "output": "from bisect import bisect_left\n\ndef maxFruits(fruits, startPos, k):\n    n = len(fruits)\n    left, right = [0] * (n + 1), [0] * (n + 1)\n    j = 0\n\n    for i in range(n):\n        while j < n and fruits[j][0] - fruits[i][0] <= k:\n            right[i + 1] += fruits[j][1]\n            j += 1\n        right[i + 1] += right[i]\n        if j < n and fruits[j][0] - startPos <= k:\n            right[0] += fruits[j][1]\n            j += 1\n\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while j >= 0 and fruits[j][0] - fruits[i][0] <= k:\n            left[i] += fruits[j][1]\n            j -= 1\n        left[i] += left[i + 1]\n\n    ans = 0\n    for i in range(n):\n        rest = max(0, k - abs(fruits[i][0] - startPos))\n        idx = bisect_left(fruits, [fruits[i][0] + rest, 0])\n        ans = max(ans, left[i] + right[idx])\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` of integers, return how many of them contain an **even number** of digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[12,345,2,6,7896\\]\n**Output:** 2\n**Explanation:** \n12 contains 2 digits (even number of digits). \n345 contains 3 digits (odd number of digits). \n2 contains 1 digit (odd number of digits). \n6 contains 1 digit (odd number of digits). \n7896 contains 4 digits (even number of digits). \nTherefore only 12 and 7896 contain an even number of digits.\n\n**Example 2:**\n\n**Input:** nums = \\[555,901,482,1771\\]\n**Output:** 1 \n**Explanation:** \nOnly 1771 contains an even number of digits.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 500`\n*   `1 <= nums[i] <= 105`How to compute the number of digits of a number ? Divide the number by 10 again and again to get the number of digits.",
          "output": "def min_perimeter(neededApples):\n    layer = 0\n    apples = 0\n\n    while apples < neededApples:\n        layer += 1\n        apples += 12 * layer\n\n    return 8 * layer\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and a positive integer `k`, check whether it is possible to divide this array into sets of `k` consecutive numbers.\n\nReturn `true` _if it is possible_. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,3,4,4,5,6\\], k = 4\n**Output:** true\n**Explanation:** Array can be divided into \\[1,2,3,4\\] and \\[3,4,5,6\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,1,2,3,4,3,4,5,9,10,11\\], k = 3\n**Output:** true\n**Explanation:** Array can be divided into \\[1,2,3\\] , \\[2,3,4\\] , \\[3,4,5\\] and \\[9,10,11\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4\\], k = 3\n**Output:** false\n**Explanation:** Each array should be divided in subarrays of size 3.\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`\n\n**Note:** This question is the same as 846: [https://leetcode.com/problems/hand-of-straights/](https://leetcode.com/problems/hand-of-straights/)If the smallest number in the possible-to-split array is V, then numbers V+1, V+2, ... V+k-1 must contain there as well. You can iteratively find k sets and remove them from array until it becomes empty. Failure to do so would mean that array is unsplittable.",
          "output": "class TreeAncestor:\n\n    def __init__(self, n: int, parent: List[int]):\n        self.dp = [[0] * 20 for _ in range(n)]\n        for i in range(n):\n            self.dp[i][0] = parent[i]\n        for k in range(1, 20):\n            for i in range(n):\n                if self.dp[i][k - 1] != -1:\n                    self.dp[i][k] = self.dp[self.dp[i][k - 1]][k - 1]\n                else:\n                    self.dp[i][k] = -1\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n        for i in range(20):\n            if k & (1 << i):\n                node = self.dp[node][i]\n                if node == -1:\n                    return -1\n        return node\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return the maximum number of ocurrences of **any** substring under the following rules:\n\n*   The number of unique characters in the substring must be less than or equal to `maxLetters`.\n*   The substring size must be between `minSize` and `maxSize` inclusive.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aababcaab \", maxLetters = 2, minSize = 3, maxSize = 4\n**Output:** 2\n**Explanation:** Substring  \"aab \" has 2 ocurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).\n\n**Example 2:**\n\n**Input:** s =  \"aaaa \", maxLetters = 1, minSize = 3, maxSize = 3\n**Output:** 2\n**Explanation:** Substring  \"aaa \" occur 2 times in the string. It can overlap.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `1 <= maxLetters <= 26`\n*   `1 <= minSize <= maxSize <= min(26, s.length)`\n*   `s` consists of only lowercase English letters.Check out the constraints, (maxSize <=26). This means you can explore all substrings in O(n * 26). Find the Maximum Number of Occurrences of a Substring with bruteforce.",
          "output": "def maxNumberOfBalloons(text):\n    freqs = [0] * 26\n    for c in text:\n        freqs[ord(c) - ord('a')] += 1\n    subs = [freqs[ord('b') - ord('a')], freqs[ord('a') - ord('a')], freqs[ord('l') - ord('a')] // 2, freqs[ord('o') - ord('a')] // 2, freqs[ord('n') - ord('a')]]\n    return min(subs)\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes` where:\n\n*   `status[i]` is `1` if the `ith` box is open and `0` if the `ith` box is closed,\n*   `candies[i]` is the number of candies in the `ith` box,\n*   `keys[i]` is a list of the labels of the boxes you can open after opening the `ith` box.\n*   `containedBoxes[i]` is a list of the boxes you found inside the `ith` box.\n\nYou are given an integer array `initialBoxes` that contains the labels of the boxes you initially have. You can take all the candies in **any open box** and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\nReturn _the maximum number of candies you can get following the rules above_.\n\n",
          "input": "**Example 1:**\n\n**Input:** status = \\[1,0,1,0\\], candies = \\[7,5,4,100\\], keys = \\[\\[\\],\\[\\],\\[1\\],\\[\\]\\], containedBoxes = \\[\\[1,2\\],\\[3\\],\\[\\],\\[\\]\\], initialBoxes = \\[0\\]\n**Output:** 16\n**Explanation:** You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\n\n**Example 2:**\n\n**Input:** status = \\[1,0,0,0,0,0\\], candies = \\[1,1,1,1,1,1\\], keys = \\[\\[1,2,3,4,5\\],\\[\\],\\[\\],\\[\\],\\[\\],\\[\\]\\], containedBoxes = \\[\\[1,2,3,4,5\\],\\[\\],\\[\\],\\[\\],\\[\\],\\[\\]\\], initialBoxes = \\[0\\]\n**Output:** 6\n**Explanation:** You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6.\n\n**Constraints:**\n\n*   `n == status.length == candies.length == keys.length == containedBoxes.length`\n*   `1 <= n <= 1000`\n*   `status[i]` is either `0` or `1`.\n*   `1 <= candies[i] <= 1000`\n*   `0 <= keys[i].length <= n`\n*   `0 <= keys[i][j] < n`\n*   All values of `keys[i]` are **unique**.\n*   `0 <= containedBoxes[i].length <= n`\n*   `0 <= containedBoxes[i][j] < n`\n*   All values of `containedBoxes[i]` are unique.\n*   Each box is contained in one box at most.\n*   `0 <= initialBoxes.length <= n`\n*   `0 <= initialBoxes[i] < n`Use Breadth First Search (BFS) to traverse all possible boxes you can open. Only push to the queue the boxes the you have with their keys.",
          "output": "def reverseParentheses(s: str) -> str:\n    st = []\n    result = []\n\n    for c in s:\n        if c != ')':\n            st.append(c)\n        else:\n            temp = []\n            while st and st[-1] != '(':\n                temp.append(st.pop())\n            if st: st.pop()  # Remove '('\n            st.extend(temp)\n\n    result = \"\".join(st)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return **any** array containing `n` **unique** integers such that they add up to `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** \\[-7,-1,1,3,4\\]\n**Explanation:** These arrays also are accepted \\[-5,-1,1,2,3\\] , \\[-3,-1,2,-2,4\\].\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** \\[-1,0,1\\]\n\n**Example 3:**\n\n**Input:** n = 1\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= n <= 1000`Return an array where the values are symmetric. (+x , -x). If n is odd, append value 0 in your returned array.",
          "output": "from heapq import heappush, heappop\n\ndef longestHappyString(a, b, c):\n    res = \"\"\n    pq = []\n    if a: heappush(pq, (-a, 'a'))\n    if b: heappush(pq, (-b, 'b'))\n    if c: heappush(pq, (-c, 'c'))\n\n    while pq:\n        curr = heappop(pq)\n        if len(res) >= 2 and res[-1] == curr[1] and res[-2] == curr[1]:\n            if not pq: break\n            next = heappop(pq)\n            res += next[1]\n            if next[0] < -1: heappush(pq, (next[0] + 1, next[1]))\n            heappush(pq, curr)\n        else:\n            res += curr[1]\n            if curr[0] < -1: heappush(pq, (curr[0] + 1, curr[1]))\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given two binary search trees `root1` and `root2`, return _a list containing all the integers from both trees sorted in **ascending** order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root1 = \\[2,1,4\\], root2 = \\[1,0,3\\]\n**Output:** \\[0,1,1,2,3,4\\]\n\n**Example 2:**\n\n**Input:** root1 = \\[1,null,8\\], root2 = \\[8,1\\]\n**Output:** \\[1,1,8,8\\]\n\n**Constraints:**\n\n*   The number of nodes in each tree is in the range `[0, 5000]`.\n*   `-105 <= Node.val <= 105`Traverse the first tree in list1 and the second tree in list2. Merge the two trees in one list and sort it.",
          "output": "def people_can_see(heights):\n    n = len(heights)\n    ans = [0] * n\n    st = []\n\n    for i in range(n - 1, -1, -1):\n        while st and heights[st[-1]] < heights[i]:\n            idx = st.pop()\n            ans[i] += 1\n            ans[i] += ans[idx]\n        st.append(i)\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to **any** index with value 0.\n\nNotice that you can not jump outside of the array at any time.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[4,2,3,0,3,1,2\\], start = 5\n**Output:** true\n**Explanation:** \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -> index 4 -> index 1 -> index 3 \nindex 5 -> index 6 -> index 4 -> index 1 -> index 3 \n\n**Example 2:**\n\n**Input:** arr = \\[4,2,3,0,3,1,2\\], start = 0\n**Output:** true \n**Explanation:** \nOne possible way to reach at index 3 with value 0 is: \nindex 0 -> index 4 -> index 1 -> index 3\n\n**Example 3:**\n\n**Input:** arr = \\[3,0,2,1,2\\], start = 2\n**Output:** false\n**Explanation:** There is no way to reach at index 1 with value 0.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 5 * 104`\n*   `0 <= arr[i] < arr.length`\n*   `0 <= start < arr.length`\n\na, b are from arr a < b b - a equals to the minimum absolute difference of any two elements in arrThink of BFS to solve the problem. When you reach a position with a value = 0 then return true.",
          "output": "def minimumAbsDifference(arr):\n    arr.sort()\n    min_difference = float('inf')\n    result = []\n\n    for i in range(1, len(arr)):\n        difference = arr[i] - arr[i - 1]\n        if difference < min_difference:\n            min_difference = difference\n            result = [[arr[i - 1], arr[i]]]\n        elif difference == min_difference:\n            result.append([arr[i - 1], arr[i]])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an equation, represented by `words` on the left side and the `result` on the right side.\n\nYou need to check if the equation is solvable under the following rules:\n\n*   Each character is decoded as one digit (0 - 9).\n*   No two characters can map to the same digit.\n*   Each `words[i]` and `result` are decoded as one number **without** leading zeros.\n*   Sum of numbers on the left side (`words`) will equal to the number on the right side (`result`).\n\nReturn `true` _if the equation is solvable, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"SEND \", \"MORE \"\\], result =  \"MONEY \"\n**Output:** true\n**Explanation:** Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that:  \"SEND \" +  \"MORE \" =  \"MONEY \" ,  9567 + 1085 = 10652\n\n**Example 2:**\n\n**Input:** words = \\[ \"SIX \", \"SEVEN \", \"SEVEN \"\\], result =  \"TWENTY \"\n**Output:** true\n**Explanation:** Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that:  \"SIX \" +  \"SEVEN \" +  \"SEVEN \" =  \"TWENTY \" ,  650 + 68782 + 68782 = 138214\n\n**Example 3:**\n\n**Input:** words = \\[ \"LEET \", \"CODE \"\\], result =  \"POINT \"\n**Output:** false\n**Explanation:** There is no possible mapping to satisfy the equation, so we return false.\nNote that two different characters cannot map to the same digit.\n\n**Constraints:**\n\n*   `2 <= words.length <= 5`\n*   `1 <= words[i].length, result.length <= 7`\n*   `words[i], result` contain only uppercase English letters.\n*   The number of different characters used in the expression is at most `10`.Use Backtracking and pruning to solve this problem. If you set the values of some digits (from right to left), the other digits will be constrained.",
          "output": "def nthUglyNumber(n, a, b, c):\n    from math import gcd\n\n    ab = a * b // gcd(a, b)\n    ac = a * c // gcd(a, c)\n    bc = b * c // gcd(b, c)\n    abc = a * bc // gcd(a, bc)\n\n    left, right = 0, 2 * 10**9\n    while left < right:\n        mid = left + (right - left) // 2\n        cnt = mid // a + mid // b + mid // c - mid // ab - mid // ac - mid // bc + mid // abc\n        if cnt < n:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a positive integer `n` representing the number of nodes of a **Directed Acyclic Graph** (DAG). The nodes are numbered from `0` to `n - 1` (**inclusive**).\n\nYou are also given a 2D integer array `edges`, where `edges[i] = [fromi, toi]` denotes that there is a **unidirectional** edge from `fromi` to `toi` in the graph.\n\nReturn _a list_ `answer`_, where_ `answer[i]` _is the **list of ancestors** of the_ `ith` _node, sorted in **ascending order**_.\n\nA node `u` is an **ancestor** of another node `v` if `u` can reach `v` via a set of edges.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 8, edgeList = \\[\\[0,3\\],\\[0,4\\],\\[1,3\\],\\[2,4\\],\\[2,7\\],\\[3,5\\],\\[3,6\\],\\[3,7\\],\\[4,6\\]\\]\n**Output:** \\[\\[\\],\\[\\],\\[\\],\\[0,1\\],\\[0,2\\],\\[0,1,3\\],\\[0,1,2,3,4\\],\\[0,1,2,3\\]\\]\n**Explanation:**\nThe above diagram represents the input graph.\n- Nodes 0, 1, and 2 do not have any ancestors.\n- Node 3 has two ancestors 0 and 1.\n- Node 4 has two ancestors 0 and 2.\n- Node 5 has three ancestors 0, 1, and 3.\n- Node 6 has five ancestors 0, 1, 2, 3, and 4.\n- Node 7 has four ancestors 0, 1, 2, and 3.\n\n**Example 2:**\n\n**Input:** n = 5, edgeList = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[0,4\\],\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[2,3\\],\\[2,4\\],\\[3,4\\]\\]\n**Output:** \\[\\[\\],\\[0\\],\\[0,1\\],\\[0,1,2\\],\\[0,1,2,3\\]\\]\n**Explanation:**\nThe above diagram represents the input graph.\n- Node 0 does not have any ancestor.\n- Node 1 has one ancestor 0.\n- Node 2 has two ancestors 0 and 1.\n- Node 3 has three ancestors 0, 1, and 2.\n- Node 4 has four ancestors 0, 1, 2, and 3.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `0 <= edges.length <= min(2000, n * (n - 1) / 2)`\n*   `edges[i].length == 2`\n*   `0 <= fromi, toi <= n - 1`\n*   `fromi != toi`\n*   There are no duplicate edges.\n*   The graph is **directed** and **acyclic**.Consider how reversing each edge of the graph can help us. How can performing BFS/DFS on the reversed graph help us find the ancestors of every node?",
          "output": "def min_cost(grid, start_pos, home_pos, row_costs, col_costs):\n    return abs(row_costs[start_pos[0]] - row_costs[home_pos[0]]) + abs(col_costs[start_pos[1]] - col_costs[home_pos[1]])\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree where each path going from the root to any leaf form a **valid sequence**, check if a given string is a **valid sequence** in such binary tree.\n\nWe get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a **sequence** in the given binary tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[0,1,0,0,1,0,null,null,1,0,0\\], arr = \\[0,1,0,1\\]\n**Output:** true\n**Explanation:** \nThe path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). \nOther valid sequences are: \n0 -> 1 -> 1 -> 0 \n0 -> 0 -> 0\n\n**Example 2:**\n\n**Input:** root = \\[0,1,0,0,1,0,null,null,1,0,0\\], arr = \\[0,0,1\\]\n**Output:** false \n**Explanation:** The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence.\n\n**Example 3:**\n\n**Input:** root = \\[0,1,0,0,1,0,null,null,1,0,0\\], arr = \\[0,1,1\\]\n**Output:** false\n**Explanation:** The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 5000`\n*   `0 <= arr[i] <= 9`\n*   Each node's value is between \\[0 - 9\\].Depth-first search (DFS) with the parameters: current node in the binary tree and current position in the array of integers. When reaching at final position check if it is a leaf node.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef isValidSequence(root, arr, index=0):\n    if not root or index >= len(arr) or arr[index] != root.val:\n        return False\n    if not root.left and not root.right:\n        return index == len(arr) - 1\n    return isValidSequence(root.left, arr, index + 1) or isValidSequence(root.right, arr, index + 1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a character array `keys` containing **unique** characters and a string array `values` containing strings of length 2. You are also given another string array `dictionary` that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a **0-indexed** string.\n\nA string is **encrypted** with the following process:\n\n1.  For each character `c` in the string, we find the index `i` satisfying `keys[i] == c` in `keys`.\n2.  Replace `c` with `values[i]` in the string.\n\nNote that in case a character of the string is **not present** in `keys`, the encryption process cannot be carried out, and an empty string `\" \"` is returned.\n\nA string is **decrypted** with the following process:\n\n1.  For each substring `s` of length 2 occurring at an even index in the string, we find an `i` such that `values[i] == s`. If there are multiple valid `i`, we choose **any** one of them. This means a string could have multiple possible strings it can decrypt to.\n2.  Replace `s` with `keys[i]` in the string.\n\nImplement the `Encrypter` class:\n\n*   `Encrypter(char[] keys, String[] values, String[] dictionary)` Initializes the `Encrypter` class with `keys, values`, and `dictionary`.\n*   `String encrypt(String word1)` Encrypts `word1` with the encryption process described above and returns the encrypted string.\n*   `int decrypt(String word2)` Returns the number of possible strings `word2` could decrypt to that also appear in `dictionary`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Encrypter \",  \"encrypt \",  \"decrypt \"\\]\n\\[\\[\\['a', 'b', 'c', 'd'\\], \\[ \"ei \",  \"zf \",  \"ei \",  \"am \"\\], \\[ \"abcd \",  \"acbd \",  \"adbc \",  \"badc \",  \"dacb \",  \"cadb \",  \"cbda \",  \"abad \"\\]\\], \\[ \"abcd \"\\], \\[ \"eizfeiam \"\\]\\]\n**Output**\n\\[null,  \"eizfeiam \", 2\\]\n\n**Explanation**\nEncrypter encrypter = new Encrypter(\\[\\['a', 'b', 'c', 'd'\\], \\[ \"ei \",  \"zf \",  \"ei \",  \"am \"\\], \\[ \"abcd \",  \"acbd \",  \"adbc \",  \"badc \",  \"dacb \",  \"cadb \",  \"cbda \",  \"abad \"\\]);\nencrypter.encrypt( \"abcd \"); // return  \"eizfeiam \". \n                           // 'a' maps to  \"ei \", 'b' maps to  \"zf \", 'c' maps to  \"ei \", and 'd' maps to  \"am \".\nencrypter.decrypt( \"eizfeiam \"); // return 2. \n                              //  \"ei \" can map to 'a' or 'c',  \"zf \" maps to 'b', and  \"am \" maps to 'd'. \n                              // Thus, the possible strings after decryption are  \"abad \",  \"cbad \",  \"abcd \", and  \"cbcd \". \n                              // 2 of those strings,  \"abad \" and  \"abcd \", appear in dictionary, so the answer is 2.\n\n**Constraints:**\n\n*   `1 <= keys.length == values.length <= 26`\n*   `values[i].length == 2`\n*   `1 <= dictionary.length <= 100`\n*   `1 <= dictionary[i].length <= 100`\n*   All `keys[i]` and `dictionary[i]` are **unique**.\n*   `1 <= word1.length <= 2000`\n*   `1 <= word2.length <= 200`\n*   All `word1[i]` appear in `keys`.\n*   `word2.length` is even.\n*   `keys`, `values[i]`, `dictionary[i]`, `word1`, and `word2` only contain lowercase English letters.\n*   At most `200` calls will be made to `encrypt` and `decrypt` **in total**.For encryption, use hashmap to map each char of word1 to its value. For decryption, use trie to prune when necessary.",
          "output": "def sum_of_subarray_ranges(nums):\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += max(nums[i:j+1]) - min(nums[i:j+1])\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` formed by digits and `'#'`. We want to map `s` to English lowercase characters as follows:\n\n*   Characters (`'a'` to `'i'`) are represented by (`'1'` to `'9'`) respectively.\n*   Characters (`'j'` to `'z'`) are represented by (`'10#'` to `'26#'`) respectively.\n\nReturn _the string formed after mapping_.\n\nThe test cases are generated so that a unique mapping will always exist.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"10#11#12 \"\n**Output:**  \"jkab \"\n**Explanation:**  \"j \" ->  \"10# \" ,  \"k \" ->  \"11# \" ,  \"a \" ->  \"1 \" ,  \"b \" ->  \"2 \".\n\n**Example 2:**\n\n**Input:** s =  \"1326# \"\n**Output:**  \"acz \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of digits and the `'#'` letter.\n*   `s` will be a valid string such that mapping is always possible.Scan from right to left, in each step of the scanning check whether there is a trailing \"#\" 2 indexes away.",
          "output": "from collections import defaultdict, deque\n\ndef sortItems(n, m, group, beforeItems):\n    def topological_sort(outdegree, edges):\n        res = []\n        q = deque([i for i in range(len(outdegree)) if outdegree[i] == 0])\n        while q:\n            u = q.pop()\n            res.append(u)\n            for v in edges[u]:\n                outdegree[v] -= 1\n                if outdegree[v] == 0:\n                    q.append(v)\n        return res\n\n    # Calculate outdegrees and dependencies for groups and items\n    group_outdegree = [0] * m\n    group_edges = defaultdict(list)\n\n    item_outdegree = [0] * n\n    item_edges = defaultdict(list)\n\n    for i in range(n):\n        for dep in beforeItems[i]:\n            a, b = group[i], group[dep]\n            if a != -1 and a != b and not (group_edges[b] and group_edges[b][-1] == a):\n                group_edges[b].append(a)\n                group_outdegree[a] += 1\n            if a != b:\n                item_edges[dep].append(i)\n                item_outdegree[i] += 1\n\n    group_order = topological_sort(group_outdegree, group_edges)\n    if len(group_order) < m:\n        return []\n\n    item_order = topological_sort(item_outdegree, item_edges)\n    if len(item_order) < n:\n        return []\n\n    # Combine orders\n    res = [0] * n\n    idx = 0\n    for gi in group_order:\n        for item_idx in item_order:\n            if group[item_idx] == gi:\n                res[idx] = item_idx\n                idx += 1\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `arr` of positive integers. You are also given the array `queries` where `queries[i] = [lefti, righti]`.\n\nFor each query `i` compute the **XOR** of elements from `lefti` to `righti` (that is, `arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti]` ).\n\nReturn an array `answer` where `answer[i]` is the answer to the `ith` query.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,3,4,8\\], queries = \\[\\[0,1\\],\\[1,2\\],\\[0,3\\],\\[3,3\\]\\]\n**Output:** \\[2,7,14,8\\] \n**Explanation:** \nThe binary representation of the elements in the array are:\n1 = 0001 \n3 = 0011 \n4 = 0100 \n8 = 1000 \nThe XOR values for queries are:\n\\[0,1\\] = 1 xor 3 = 2 \n\\[1,2\\] = 3 xor 4 = 7 \n\\[0,3\\] = 1 xor 3 xor 4 xor 8 = 14 \n\\[3,3\\] = 8\n\n**Example 2:**\n\n**Input:** arr = \\[4,8,2,10\\], queries = \\[\\[2,3\\],\\[1,3\\],\\[0,0\\],\\[0,3\\]\\]\n**Output:** \\[8,0,4,4\\]\n\n**Constraints:**\n\n*   `1 <= arr.length, queries.length <= 3 * 104`\n*   `1 <= arr[i] <= 109`\n*   `queries[i].length == 2`\n*   `0 <= lefti <= righti < arr.length`What is the result of x ^ y ^ x ? Compute the prefix sum for XOR. Process the queries with the prefix sum values.",
          "output": "def water_plants(plants, capacity):\n    steps = 0\n    water_left = 0\n\n    for i, plant in enumerate(plants):\n        if water_left < plant:\n            steps += 2 * i + 1  # Refill the watering can\n            water_left = capacity\n        water_left -= plant\n        steps += 1  # Move to the next plant\n\n    return steps\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` people, each person has a unique _id_ between `0` and `n-1`. Given the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`.\n\nLevel **1** of videos are all watched videos by your friends, level **2** of videos are all watched videos by the friends of your friends and so on. In general, the level `k` of videos are all watched videos by people with the shortest path **exactly** equal to `k` with you. Given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.\n\n",
          "input": "**Example 1:**\n\n**Input:** watchedVideos = \\[\\[ \"A \", \"B \"\\],\\[ \"C \"\\],\\[ \"B \", \"C \"\\],\\[ \"D \"\\]\\], friends = \\[\\[1,2\\],\\[0,3\\],\\[0,3\\],\\[1,2\\]\\], id = 0, level = 1\n**Output:** \\[ \"B \", \"C \"\\] \n**Explanation:** \nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -> watchedVideos = \\[ \"C \"\\] \nPerson with id = 2 -> watchedVideos = \\[ \"B \", \"C \"\\] \nThe frequencies of watchedVideos by your friends are: \nB -> 1 \nC -> 2\n\n**Example 2:**\n\n**Input:** watchedVideos = \\[\\[ \"A \", \"B \"\\],\\[ \"C \"\\],\\[ \"B \", \"C \"\\],\\[ \"D \"\\]\\], friends = \\[\\[1,2\\],\\[0,3\\],\\[0,3\\],\\[1,2\\]\\], id = 0, level = 2\n**Output:** \\[ \"D \"\\]\n**Explanation:** \nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).\n\n**Constraints:**\n\n*   `n == watchedVideos.length == friends.length`\n*   `2 <= n <= 100`\n*   `1 <= watchedVideos[i].length <= 100`\n*   `1 <= watchedVideos[i][j].length <= 8`\n*   `0 <= friends[i].length < n`\n*   `0 <= friends[i][j] < n`\n*   `0 <= id < n`\n*   `1 <= level < n`\n*   if `friends[i]` contains `j`, then `friends[j]` contains `i`Do BFS to find the kth level friends. Then collect movies saw by kth level friends and sort them accordingly.",
          "output": "def largestMagicSquare(grid):\n    m, n = len(grid), len(grid[0])\n    row = [[0] * (n + 1) for _ in range(m)]\n    col = [[0] * n for _ in range(m + 1)]\n\n    for i in range(m):\n        for j in range(n):\n            row[i][j + 1] = row[i][j] + grid[i][j]\n            col[i + 1][j] = col[i][j] + grid[i][j]\n\n    for k in reversed(range(2, min(m, n) + 1)):\n        for i in range(m - k + 1):\n            for j in range(n - k + 1):\n                _sum = row[i][j + k] - row[i][j]\n                ok = all(row[i + t][j + k] - row[i + t][j] == _sum for t in range(1, k)) and all(\n                    col[i + k][j + t] - col[i][j + t] == _sum for t in range(1, k))\n\n                if not ok: continue\n                \n                diag1 = sum(grid[i + t][j + t] for t in range(k))\n                diag2 = sum(grid[i + t][j + k - 1 - t] for t in range(k))\n                \n                if diag1 == _sum and diag2 == _sum: return k\n\n    return 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`. In one step you can insert any character at any index of the string.\n\nReturn _the minimum number of steps_ to make `s` palindrome.\n\nA **Palindrome String** is one that reads the same backward as well as forward.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"zzazz \"\n**Output:** 0\n**Explanation:** The string  \"zzazz \" is already palindrome we do not need any insertions.\n\n**Example 2:**\n\n**Input:** s =  \"mbadm \"\n**Output:** 2\n**Explanation:** String can be  \"mbdadbm \" or  \"mdbabdm \".\n\n**Example 3:**\n\n**Input:** s =  \"leetcode \"\n**Output:** 5\n**Explanation:** Inserting 5 characters the string becomes  \"leetcodocteel \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of lowercase English letters.Is dynamic programming suitable for this problem ? If we know the longest palindromic sub-sequence is x and the length of the string is n then, what is the answer to this problem? It is n - x as we need n - x insertions to make the remaining characters also palindrome.",
          "output": "def extract_artifacts(n, artifacts, dig):\n    artifact_cells = {}\n    artifact_count = {}\n\n    for i, (r1, c1, r2, c2) in enumerate(artifacts):\n        for r in range(r1, r2 + 1):\n            for c in range(c1, c2 + 1):\n                cell = r * n + c\n                if cell not in artifact_cells:\n                    artifact_cells[cell] = set()\n                artifact_cells[cell].add(i)\n                artifact_count[i] = artifact_count.get(i, 0) + 1\n\n    ans = 0\n    for r, c in dig:\n        cell = r * n + c\n        if cell in artifact_cells:\n            for artifact_id in artifact_cells[cell]:\n                artifact_count[artifact_id] -= 1\n                if artifact_count[artifact_id] == 0:\n                    ans += 1\n            del artifact_cells[cell]\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: **No-Zero integer** is a positive integer that **does not contain any `0`** in its decimal representation.\n\nGiven an integer `n`, return _a list of two integers_ `[a, b]` _where_:\n\n*   `a` and `b` are **No-Zero integers**.\n*   `a + b = n`\n\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** \\[1,1\\]\n**Explanation:** Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n.\n\n**Example 2:**\n\n**Input:** n = 11\n**Output:** \\[2,9\\]\n**Explanation:** Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as \\[8, 3\\] that can be accepted.\n\n**Constraints:**\n\n*   `2 <= n <= 104`Loop through all elements from 1 to n. Choose A = i and B = n - i then check if A and B are both No-Zero integers.",
          "output": "def no_zero_integers(n: int):\n    for a in range(1, n):\n        if '0' not in str(a) and '0' not in str(n - a):\n            return [a, n - a]\n    return [0, 0]  # never gets here\n"
     },
     {
          "instruction": "Write python code for this problem: Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR operation).  \nFlip operation consists of change **any** single bit 1 to 0 or change the bit 0 to 1 in their binary representation.\n\n",
          "input": "**Example 1:**\n\n**Input:** a = 2, b = 6, c = 5\n**Output:** 3\n**Explanation:** After flips a = 1 , b = 4 , c = 5 such that (`a` OR `b` == `c`)\n\n**Example 2:**\n\n**Input:** a = 4, b = 2, c = 7\n**Output:** 1\n\n**Example 3:**\n\n**Input:** a = 1, b = 2, c = 3\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= a <= 10^9`\n*   `1 <= b <= 10^9`\n*   `1 <= c <= 10^9`Check the bits one by one whether they need to be flipped.",
          "output": "def minFlips(a: int, b: int, c: int) -> int:\n    count = 0\n    for i in range(32):\n        bitA = (a >> i) & 1\n        bitB = (b >> i) & 1\n        bitC = (c >> i) & 1\n        if bitC == 0:\n            count += bitA + bitB\n        else:\n            count += 1 - (bitA | bitB)\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` computers numbered from `0` to `n - 1` connected by ethernet cables `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between computers `ai` and `bi`. Any computer can reach any other computer directly or indirectly through the network.\n\nYou are given an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\n\nReturn _the minimum number of times you need to do this in order to make all the computers connected_. If it is not possible, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, connections = \\[\\[0,1\\],\\[0,2\\],\\[1,2\\]\\]\n**Output:** 1\n**Explanation:** Remove cable between computer 1 and 2 and place between computers 1 and 3.\n\n**Example 2:**\n\n**Input:** n = 6, connections = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[1,2\\],\\[1,3\\]\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** n = 6, connections = \\[\\[0,1\\],\\[0,2\\],\\[0,3\\],\\[1,2\\]\\]\n**Output:** -1\n**Explanation:** There are not enough cables.\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `1 <= connections.length <= min(n * (n - 1) / 2, 105)`\n*   `connections[i].length == 2`\n*   `0 <= ai, bi < n`\n*   `ai != bi`\n*   There are no repeated connections.\n*   No two computers are connected by more than one cable.As long as there are at least (n - 1) connections, there is definitely a way to connect all computers. Use DFS to determine the number of isolated computer clusters.",
          "output": "def unique_occurrences(arr):\n    counts = {}\n    for num in arr:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_counts = set()\n    for count in counts.values():\n        if count in unique_counts:\n            return False\n        unique_counts.add(count)\n    \n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You have a keyboard layout as shown above in the **X-Y** plane, where each English uppercase letter is located at some coordinate.\n\n*   For example, the letter `'A'` is located at coordinate `(0, 0)`, the letter `'B'` is located at coordinate `(0, 1)`, the letter `'P'` is located at coordinate `(2, 3)` and the letter `'Z'` is located at coordinate `(4, 1)`.\n\nGiven the string `word`, return _the minimum total **distance** to type such string using only two fingers_.\n\nThe **distance** between coordinates `(x1, y1)` and `(x2, y2)` is `|x1 - x2| + |y1 - y2|`.\n\n**Note** that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"CAKE \"\n**Output:** 3\n**Explanation:** Using two fingers, one optimal way to type  \"CAKE \" is: \nFinger 1 on letter 'C' -> cost = 0 \nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 \nFinger 2 on letter 'K' -> cost = 0 \nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 \nTotal distance = 3\n\n**Example 2:**\n\n**Input:** word =  \"HAPPY \"\n**Output:** 6\n**Explanation:** Using two fingers, one optimal way to type  \"HAPPY \" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6\n\n**Constraints:**\n\n*   `2 <= word.length <= 300`\n*   `word` consists of uppercase English letters.Use dynamic programming. dp[i][j][k]: smallest movements when you have one finger on i-th char and the other one on j-th char already having written k first characters from word.",
          "output": "def removeDuplicates(s: str, k: int) -> str:\n    stack = []\n    for c in s:\n        if stack and stack[-1][0] == c:\n            stack[-1][1] += 1\n            if stack[-1][1] == k:\n                stack.pop()\n        else:\n            stack.append([c, 1])\n    return ''.join(c * n for c, n in stack)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `num`, return _the number of steps to reduce it to zero_.\n\nIn one step, if the current number is even, you have to divide it by `2`, otherwise, you have to subtract `1` from it.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 14\n**Output:** 6\n**Explanation:** \nStep 1) 14 is even; divide by 2 and obtain 7. \nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3. \nStep 4) 3 is odd; subtract 1 and obtain 2. \nStep 5) 2 is even; divide by 2 and obtain 1. \nStep 6) 1 is odd; subtract 1 and obtain 0.\n\n**Example 2:**\n\n**Input:** num = 8\n**Output:** 4\n**Explanation:** \nStep 1) 8 is even; divide by 2 and obtain 4. \nStep 2) 4 is even; divide by 2 and obtain 2. \nStep 3) 2 is even; divide by 2 and obtain 1. \nStep 4) 1 is odd; subtract 1 and obtain 0.\n\n**Example 3:**\n\n**Input:** num = 123\n**Output:** 12\n\n**Constraints:**\n\n*   `0 <= num <= 106`Simulate the process to get the final answer.",
          "output": "def queensAttacktheKing(queens, king):\n    result = []\n    for x in range(-1, 2):\n        for y in range(-1, 2):\n            if x == 0 and y == 0:\n                continue\n            posX, posY = king[0] + x, king[1] + y\n            while 0 <= posX < 8 and 0 <= posY < 8:\n                for queen in queens:\n                    if posX == queen[0] and posY == queen[1]:\n                        result.append([queen[0], queen[1]])\n                        break\n                posX += x\n                posY += y\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr` and two integers `k` and `threshold`, return _the number of sub-arrays of size_ `k` _and average greater than or equal to_ `threshold`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,2,2,2,5,5,5,8\\], k = 3, threshold = 4\n**Output:** 3\n**Explanation:** Sub-arrays \\[2,5,5\\],\\[5,5,5\\] and \\[5,5,8\\] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n\n**Example 2:**\n\n**Input:** arr = \\[11,13,17,23,29,31,7,5,2,3\\], k = 3, threshold = 5\n**Output:** 6\n**Explanation:** The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= arr[i] <= 104`\n*   `1 <= k <= arr.length`\n*   `0 <= threshold <= 104`Start with a window of size K and test its average against the threshold. Keep moving the window by one element maintaining its size k until you cover the whole array. count number of windows that satisfy that its average is greater than the threshold.",
          "output": "def dieSimulator(n, rollMax):\n    MOD = 10**9 + 7\n    dp = [[0] * (n + 1) for _ in range(6)]\n    sum_dp = [0] * (n + 1)\n\n    for i in range(6):\n        dp[i][1] = 1\n    sum_dp[1] = 6\n\n    for j in range(2, n + 1):\n        cur_sum = 0\n        for i in range(6):\n            dp[i][j] = sum_dp[j - 1]\n            if j - rollMax[i] - 1 >= 0:\n                dp[i][j] = (dp[i][j] - sum_dp[j - rollMax[i] - 1] + MOD) % MOD\n                if j - rollMax[i] - 1 >= 1:\n                    dp[i][j] = (dp[i][j] + dp[i][j - rollMax[i] - 1]) % MOD\n            cur_sum = (cur_sum + dp[i][j]) % MOD\n        sum_dp[j] = cur_sum\n\n    return sum_dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two numbers, `hour` and `minutes`, return _the smaller angle (in degrees) formed between the_ `hour` _and the_ `minute` _hand_.\n\nAnswers within `10-5` of the actual value will be accepted as correct.\n\n",
          "input": "**Example 1:**\n\n**Input:** hour = 12, minutes = 30\n**Output:** 165\n\n**Example 2:**\n\n**Input:** hour = 3, minutes = 30\n**Output:** 75\n\n**Example 3:**\n\n**Input:** hour = 3, minutes = 15\n**Output:** 7.5\n\n**Constraints:**\n\n*   `1 <= hour <= 12`\n*   `0 <= minutes <= 59`The tricky part is determining how the minute hand affects the position of the hour hand. Calculate the angles separately then find the difference.",
          "output": "def maxEqualFreq(nums):\n    count, freq = {}, {}\n    max_len, max_freq = 0, 0\n    for i, num in enumerate(nums):\n        count[num] = count.get(num, 0) + 1\n        freq[count[num] - 1] = freq.get(count[num] - 1, 0) - 1\n        freq[count[num]] = freq.get(count[num], 0) + 1\n\n        max_freq = max(max_freq, count[num])\n        if max_freq * (i + 1) == i or max_freq * (freq.get(max_freq - 1, 0) + 1) + (max_freq - 1) * freq.get(max_freq - 1, 0) == i:\n            max_len = i + 1\n    return max_len\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, you are initially positioned at the first index of the array.\n\nIn one step you can jump from index `i` to index:\n\n*   `i + 1` where: `i + 1 < arr.length`.\n*   `i - 1` where: `i - 1 >= 0`.\n*   `j` where: `arr[i] == arr[j]` and `i != j`.\n\nReturn _the minimum number of steps_ to reach the **last index** of the array.\n\nNotice that you can not jump outside of the array at any time.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[100,-23,-23,404,100,23,23,23,3,404\\]\n**Output:** 3\n**Explanation:** You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n\n**Example 2:**\n\n**Input:** arr = \\[7\\]\n**Output:** 0\n**Explanation:** Start index is the last index. You do not need to jump.\n\n**Example 3:**\n\n**Input:** arr = \\[7,6,9,6,9,6,9,7\\]\n**Output:** 1\n**Explanation:** You can jump directly from index 0 to index 7 which is last index of the array.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 5 * 104`\n*   `-108 <= arr[i] <= 108`Build a graph of n nodes where nodes are the indices of the array and edges for node i are nodes i+1, i-1, j where arr[i] == arr[j]. Start bfs from node 0 and keep distance. The answer is the distance when you reach node n-1.",
          "output": "from collections import defaultdict\n\ndef minJumps(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    value_indices = defaultdict(list)\n    \n    for i, value in enumerate(arr):\n        value_indices[value].append(i)\n\n    q = [0]\n    visited = [False] * n\n    visited[0] = True\n    steps = 0\n\n    while q:\n        size = len(q)\n        for _ in range(size):\n            index = q.pop(0)\n            \n            if index == n - 1:\n                return steps\n            \n            if index > 0 and not visited[index - 1]:\n                q.append(index - 1)\n                visited[index - 1] = True\n                \n            if index < n - 1 and not visited[index + 1]:\n                q.append(index + 1)\n                visited[index + 1] = True\n\n            for neighbor in value_indices[arr[index]]:\n                if not visited[neighbor]:\n                    q.append(neighbor)\n                    visited[neighbor] = True\n            \n            value_indices[arr[index]] = []\n\n        steps += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a positive integer `num` consisting only of digits `6` and `9`.\n\nReturn _the maximum number you can get by changing **at most** one digit (_`6` _becomes_ `9`_, and_ `9` _becomes_ `6`_)_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 9669\n**Output:** 9969\n**Explanation:** \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969.\n\n**Example 2:**\n\n**Input:** num = 9996\n**Output:** 9999\n**Explanation:** Changing the last digit 6 to 9 results in the maximum number.\n\n**Example 3:**\n\n**Input:** num = 9999\n**Output:** 9999\n**Explanation:** It is better not to apply any change.\n\n**Constraints:**\n\n*   `1 <= num <= 104`\n*   `num` consists of only `6` and `9` digits.Convert the number in an array of its digits. Brute force on every digit to get the maximum number.",
          "output": "def maximum69Number(num: int) -> int:\n    num_str = list(str(num))\n    for i in range(len(num_str)):\n        if num_str[i] == '6':\n            num_str[i] = '9'\n            break\n    return int(''.join(num_str))\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`. Return all the words vertically in the same order in which they appear in `s`.  \nWords are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).  \nEach word would be put on only one column and that in one column there will be only one word.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"HOW ARE YOU \"\n**Output:** \\[ \"HAY \", \"ORO \", \"WEU \"\\]\n**Explanation:** Each word is printed vertically. \n  \"HAY \"\n  \"ORO \"\n  \"WEU \"\n\n**Example 2:**\n\n**Input:** s =  \"TO BE OR NOT TO BE \"\n**Output:** \\[ \"TBONTB \", \"OEROOE \", \"   T \"\\]\n**Explanation:** Trailing spaces is not allowed. \n \"TBONTB \"\n \"OEROOE \"\n \"   T \"\n\n**Example 3:**\n\n**Input:** s =  \"CONTEST IS COMING \"\n**Output:** \\[ \"CIC \", \"OSO \", \"N M \", \"T I \", \"E N \", \"S G \", \"T \"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 200`\n*   `s` contains only upper case English letters.\n*   It's guaranteed that there is only one space between 2 words.Use the maximum length of words to determine the length of the returned answer. However, don't forget to remove trailing spaces.",
          "output": "def findBall(grid):\n    m, n = len(grid), len(grid[0])\n    result = [-1] * n\n\n    for i in range(n):\n        x, y = 0, i\n\n        while x < m:\n            nx, ny = x + 1, y + grid[x][y]\n            if ny < 0 or ny >= n or grid[x][ny] != grid[x][y]:\n                break\n            x, y = nx, ny\n\n        if x == m:\n            result[i] = y\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree `root` and an integer `target`, delete all the **leaf nodes** with value `target`.\n\nNote that once you delete a leaf node with value `target`**,** if its parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you cannot).\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,2,null,2,4\\], target = 2\n**Output:** \\[1,null,3,null,4\\]\n**Explanation:** Leaf nodes in green with value (target = 2) are removed (Picture in left). \nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center).\n\n**Example 2:**\n\n**Input:** root = \\[1,3,3,3,2\\], target = 3\n**Output:** \\[1,3,null,null,2\\]\n\n**Example 3:**\n\n**Input:** root = \\[1,2,null,2,null,2\\], target = 2\n**Output:** \\[1\\]\n**Explanation:** Leaf nodes in green with value (target = 2) are removed at each step.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 3000]`.\n*   `1 <= Node.val, target <= 1000`Use the DFS to reconstruct the tree such that no leaf node is equal to the target. If the leaf node is equal to the target, return an empty object instead.",
          "output": "from heapq import heappush, heappop\n\ndef maxProbability(n, edges, succProb, start, end):\n    graph = [[] for _ in range(n)]\n    for i in range(len(edges)):\n        a, b = edges[i]\n        graph[a].append((b, succProb[i]))\n        graph[b].append((a, succProb[i]))\n\n    max_prob = [0] * n\n    max_prob[start] = 1\n\n    pq = [(-1, start)]\n    \n    while pq:\n        prob, node = heappop(pq)\n\n        if node == end:\n            return -prob\n\n        if -prob < max_prob[node]:\n            continue\n\n        for neighbor, edge_prob in graph[node]:\n            new_prob = -prob * edge_prob\n            if new_prob > max_prob[neighbor]:\n                max_prob[neighbor] = new_prob\n                heappush(pq, (-new_prob, neighbor))\n\n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: There is a one-dimensional garden on the x-axis. The garden starts at the point `0` and ends at the point `n`. (i.e The length of the garden is `n`).\n\nThere are `n + 1` taps located at points `[0, 1, ..., n]` in the garden.\n\nGiven an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open.\n\nReturn _the minimum number of taps_ that should be open to water the whole garden, If the garden cannot be watered return **\\-1**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, ranges = \\[3,4,1,1,0,0\\]\n**Output:** 1\n**Explanation:** The tap at point 0 can cover the interval \\[-3,3\\]\nThe tap at point 1 can cover the interval \\[-3,5\\]\nThe tap at point 2 can cover the interval \\[1,3\\]\nThe tap at point 3 can cover the interval \\[2,4\\]\nThe tap at point 4 can cover the interval \\[4,4\\]\nThe tap at point 5 can cover the interval \\[5,5\\]\nOpening Only the second tap will water the whole garden \\[0,5\\]\n\n**Example 2:**\n\n**Input:** n = 3, ranges = \\[0,0,0,0\\]\n**Output:** -1\n**Explanation:** Even if you activate all the four taps you cannot water the whole garden.\n\n**Constraints:**\n\n*   `1 <= n <= 104`\n*   `ranges.length == n + 1`\n*   `0 <= ranges[i] <= 100`Create intervals of the area covered by each tap, sort intervals by the left end. We need to cover the interval [0, n]. we can start with the first interval and out of all intervals that intersect with it we choose the one that covers the farthest point to the right. What if there is a gap between intervals that is not covered ? we should stop and return -1 as there is some interval that cannot be covered.",
          "output": "def sum_of_floored_pairs(nums):\n    mod = 10**9 + 7\n    max_val = max(nums)\n    count = [0] * (max_val + 1)\n    pref_sum = [0] * (max_val + 1)\n\n    for num in nums:\n        count[num] += 1\n\n    for i in range(1, max_val + 1):\n        pref_sum[i] = (pref_sum[i - 1] + count[i]) % mod\n\n    res = 0\n    for x in range(1, max_val + 1):\n        nx = x\n        k = 1\n        while nx <= max_val:\n            res = (res + ((pref_sum[nx] - pref_sum[nx - x] + mod) % mod) * k % mod * count[x] % mod) % mod\n            k += 1\n            nx += x\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` consisting **only** of letters `'a'` and `'b'`. In a single step you can remove one **palindromic subsequence** from `s`.\n\nReturn _the **minimum** number of steps to make the given string empty_.\n\nA string is a **subsequence** of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does **not** necessarily need to be contiguous.\n\nA string is called **palindrome** if is one that reads the same backward as well as forward.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ababa \"\n**Output:** 1\n**Explanation:** s is already a palindrome, so its entirety can be removed in a single step.\n\n**Example 2:**\n\n**Input:** s =  \"abb \"\n**Output:** 2\n**Explanation:**  \"abb \" ->  \"bb \" ->  \" \". \nRemove palindromic subsequence  \"a \" then  \"bb \".\n\n**Example 3:**\n\n**Input:** s =  \"baabb \"\n**Output:** 2\n**Explanation:**  \"baabb \" ->  \"b \" ->  \" \". \nRemove palindromic subsequence  \"baab \" then  \"b \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'a'` or `'b'`.Use the fact that string contains only 2 characters. Are subsequences composed of only one type of letter always palindrome strings ?",
          "output": "def countStrings(n):\n    mod = 10**9 + 7\n    a, b = 1, 1\n    for _ in range(n):\n        a = (a * 2) % mod\n        b = (b * 3) % mod\n    return (b - a + mod) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `restaurants` where `restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.\n\nThe `veganFriendly` filter will be either _true_ (meaning you should only include restaurants with `veganFriendlyi` set to true) or _false_ (meaning you can include any restaurant). In addition, you have the filters `maxPrice` and `maxDistance` which are the maximum value for price and distance of restaurants you should consider respectively.\n\nReturn the array of restaurant _**IDs**_ after filtering, ordered by **rating** from highest to lowest. For restaurants with the same rating, order them by _**id**_ from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value _1_ when it is _true_, and _0_ when it is _false_.\n\n",
          "input": "**Example 1:**\n\n**Input:** restaurants = \\[\\[1,4,1,40,10\\],\\[2,8,0,50,5\\],\\[3,8,1,30,4\\],\\[4,10,0,10,3\\],\\[5,1,1,15,1\\]\\], veganFriendly = 1, maxPrice = 50, maxDistance = 10\n**Output:** \\[3,1,5\\] \n**Explanation:** \nThe restaurants are:\nRestaurant 1 \\[id=1, rating=4, veganFriendly=1, price=40, distance=10\\]\nRestaurant 2 \\[id=2, rating=8, veganFriendly=0, price=50, distance=5\\]\nRestaurant 3 \\[id=3, rating=8, veganFriendly=1, price=30, distance=4\\]\nRestaurant 4 \\[id=4, rating=10, veganFriendly=0, price=10, distance=3\\]\nRestaurant 5 \\[id=5, rating=1, veganFriendly=1, price=15, distance=1\\] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). \n\n**Example 2:**\n\n**Input:** restaurants = \\[\\[1,4,1,40,10\\],\\[2,8,0,50,5\\],\\[3,8,1,30,4\\],\\[4,10,0,10,3\\],\\[5,1,1,15,1\\]\\], veganFriendly = 0, maxPrice = 50, maxDistance = 10\n**Output:** \\[4,3,2,1,5\\]\n**Explanation:** The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.\n\n**Example 3:**\n\n**Input:** restaurants = \\[\\[1,4,1,40,10\\],\\[2,8,0,50,5\\],\\[3,8,1,30,4\\],\\[4,10,0,10,3\\],\\[5,1,1,15,1\\]\\], veganFriendly = 0, maxPrice = 30, maxDistance = 3\n**Output:** \\[4,5\\]\n\n**Constraints:**\n\n*   `1 <= restaurants.length <= 10^4`\n*   `restaurants[i].length == 5`\n*   `1 <= idi, ratingi, pricei, distancei <= 10^5`\n*   `1 <= maxPrice, maxDistance <= 10^5`\n*   `veganFriendlyi` and `veganFriendly` are 0 or 1.\n*   All `idi` are distinct.Do the filtering and sort as said. Note that the id may not be the index in the array.",
          "output": "def sort_based_on_mapping(mapping, nums):\n    def mapped_value(num):\n        return int(''.join(str(mapping[int(d)]) for d in str(num)))\n    \n    return sorted(nums, key=mapped_value)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.\n\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is **at most** `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.\n\nNotice that the distance of a path connecting cities _**i**_ and _**j**_ is equal to the sum of the edges' weights along that path.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, edges = \\[\\[0,1,3\\],\\[1,2,1\\],\\[1,3,4\\],\\[2,3,1\\]\\], distanceThreshold = 4\n**Output:** 3\n**Explanation:** The figure above describes the graph. \nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> \\[City 1, City 2\\] \nCity 1 -> \\[City 0, City 2, City 3\\] \nCity 2 -> \\[City 0, City 1, City 3\\] \nCity 3 -> \\[City 1, City 2\\] \nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.\n\n**Example 2:**\n\n**Input:** n = 5, edges = \\[\\[0,1,2\\],\\[0,4,8\\],\\[1,2,3\\],\\[1,4,2\\],\\[2,3,1\\],\\[3,4,1\\]\\], distanceThreshold = 2\n**Output:** 0\n**Explanation:** The figure above describes the graph. \nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -> \\[City 1\\] \nCity 1 -> \\[City 0, City 4\\] \nCity 2 -> \\[City 3, City 4\\] \nCity 3 -> \\[City 2, City 4\\]\nCity 4 -> \\[City 1, City 2, City 3\\] \nThe city 0 has 1 neighboring city at a distanceThreshold = 2.\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `1 <= edges.length <= n * (n - 1) / 2`\n*   `edges[i].length == 3`\n*   `0 <= fromi < toi < n`\n*   `1 <= weighti, distanceThreshold <= 10^4`\n*   All pairs `(fromi, toi)` are distinct.Use Floyd-Warshall's algorithm to compute any-point to any-point distances. (Or can also do Dijkstra from every node due to the weights are non-negative). For each city calculate the number of reachable cities within the threshold, then search for the optimal city.",
          "output": "def findTheCity(n, edges, distanceThreshold):\n    distance = [[1e5] * n for _ in range(n)]\n\n    for edge in edges:\n        distance[edge[0]][edge[1]] = edge[2]\n        distance[edge[1]][edge[0]] = edge[2]\n\n    for i in range(n):\n        distance[i][i] = 0\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j])\n\n    res, minReachable = 0, n\n    for i in range(n):\n        reachable = sum(1 for j in range(n) if distance[i][j] <= distanceThreshold)\n        if reachable <= minReachable:\n            minReachable = reachable\n            res = i\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `ith` job, you have to finish all the jobs `j` where `0 <= j < i`).\n\nYou have to finish **at least** one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done on that day.\n\nYou are given an integer array `jobDifficulty` and an integer `d`. The difficulty of the `ith` job is `jobDifficulty[i]`.\n\nReturn _the minimum difficulty of a job schedule_. If you cannot find a schedule for the jobs return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** jobDifficulty = \\[6,5,4,3,2,1\\], d = 2\n**Output:** 7\n**Explanation:** First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7 \n\n**Example 2:**\n\n**Input:** jobDifficulty = \\[9,9,9\\], d = 4\n**Output:** -1\n**Explanation:** If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\n\n**Example 3:**\n\n**Input:** jobDifficulty = \\[1,1,1\\], d = 3\n**Output:** 3\n**Explanation:** The schedule is one job per day. total difficulty will be 3.\n\n**Constraints:**\n\n*   `1 <= jobDifficulty.length <= 300`\n*   `0 <= jobDifficulty[i] <= 1000`\n*   `1 <= d <= 10`Use DP. Try to cut the array into d non-empty sub-arrays. Try all possible cuts for the array. Use dp[i][j] where DP states are i the index of the last cut and j the number of remaining cuts. Complexity is O(n * n * d).",
          "output": "def max_candies(candies, k):\n    left, right = 1, max(candies)\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        count = sum(candy // mid for candy in candies)\n        if count >= k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `arr`. Sort the integers in the array in ascending order by the number of `1`'s in their binary representation and in case of two or more integers have the same number of `1`'s you have to sort them in ascending order.\n\nReturn _the array after sorting it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[0,1,2,3,4,5,6,7,8\\]\n**Output:** \\[0,1,2,4,8,3,5,6,7\\]\n**Explantion:** \\[0\\] is the only integer with 0 bits.\n\\[1,2,4,8\\] all have 1 bit.\n\\[3,5,6\\] have 2 bits.\n\\[7\\] has 3 bits.\nThe sorted array by bits is \\[0,1,2,4,8,3,5,6,7\\]\n\n**Example 2:**\n\n**Input:** arr = \\[1024,512,256,128,64,32,16,8,4,2,1\\]\n**Output:** \\[1,2,4,8,16,32,64,128,256,512,1024\\]\n**Explantion:** All integers have 1 bit in the binary representation, you should just sort them in ascending order.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 500`\n*   `0 <= arr[i] <= 104`Simulate the problem. Count the number of 1's in the binary representation of each integer. Sort by the number of 1's ascending and by the value in case of tie.",
          "output": "def min_moves_to_palindrome(s: str) -> int:\n    moves = 0\n    s = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            temp_right = right\n\n            while s[left] != s[temp_right]:\n                temp_right -= 1\n            s.insert(right, s.pop(temp_right))\n            moves += right - temp_right\n        left += 1\n        right -= 1\n\n    return moves\n"
     },
     {
          "instruction": "Write python code for this problem: There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays `products` and `prices`, where the `ith` product has an ID of `products[i]` and a price of `prices[i]`.\n\nWhen a customer is paying, their bill is represented as two parallel integer arrays `product` and `amount`, where the `jth` product they purchased has an ID of `product[j]`, and `amount[j]` is how much of the product they bought. Their subtotal is calculated as the sum of each `amount[j] * (price of the jth product)`.\n\nThe supermarket decided to have a sale. Every `nth` customer paying for their groceries will be given a **percentage discount**. The discount amount is given by `discount`, where they will be given `discount` percent off their subtotal. More formally, if their subtotal is `bill`, then they would actually pay `bill * ((100 - discount) / 100)`.\n\nImplement the `Cashier` class:\n\n*   `Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, and the `products` and their `prices`.\n*   `double getBill(int[] product, int[] amount)` Returns the final total of the bill with the discount applied (if any). Answers within `10-5` of the actual value will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Cashier \", \"getBill \", \"getBill \", \"getBill \", \"getBill \", \"getBill \", \"getBill \", \"getBill \"\\]\n\\[\\[3,50,\\[1,2,3,4,5,6,7\\],\\[100,200,300,400,300,200,100\\]\\],\\[\\[1,2\\],\\[1,2\\]\\],\\[\\[3,7\\],\\[10,10\\]\\],\\[\\[1,2,3,4,5,6,7\\],\\[1,1,1,1,1,1,1\\]\\],\\[\\[4\\],\\[10\\]\\],\\[\\[7,3\\],\\[10,10\\]\\],\\[\\[7,5,3,1,6,4,2\\],\\[10,10,10,9,9,9,7\\]\\],\\[\\[2,3,5\\],\\[5,3,2\\]\\]\\]\n**Output**\n\\[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0\\]\n**Explanation**\nCashier cashier = new Cashier(3,50,\\[1,2,3,4,5,6,7\\],\\[100,200,300,400,300,200,100\\]);\ncashier.getBill(\\[1,2\\],\\[1,2\\]);                        // return 500.0. 1st customer, no discount.\n                                                     // bill = 1 \\* 100 + 2 \\* 200 = 500.\ncashier.getBill(\\[3,7\\],\\[10,10\\]);                      // return 4000.0. 2nd customer, no discount.\n                                                     // bill = 10 \\* 300 + 10 \\* 100 = 4000.\ncashier.getBill(\\[1,2,3,4,5,6,7\\],\\[1,1,1,1,1,1,1\\]);    // return 800.0. 3rd customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 \\* ((100 - 50) / 100) = 800.\ncashier.getBill(\\[4\\],\\[10\\]);                           // return 4000.0. 4th customer, no discount.\ncashier.getBill(\\[7,3\\],\\[10,10\\]);                      // return 4000.0. 5th customer, no discount.\ncashier.getBill(\\[7,5,3,1,6,4,2\\],\\[10,10,10,9,9,9,7\\]); // return 7350.0. 6th customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 \\* ((100 - 50) / 100) = 7350.\ncashier.getBill(\\[2,3,5\\],\\[5,3,2\\]);                    // return 2500.0.  6th customer, no discount.\n\n**Constraints:**\n\n*   `1 <= n <= 104`\n*   `0 <= discount <= 100`\n*   `1 <= products.length <= 200`\n*   `prices.length == products.length`\n*   `1 <= products[i] <= 200`\n*   `1 <= prices[i] <= 1000`\n*   The elements in `products` are **unique**.\n*   `1 <= product.length <= products.length`\n*   `amount.length == product.length`\n*   `product[j]` exists in `products`.\n*   `1 <= amount[j] <= 1000`\n*   The elements of `product` are **unique**.\n*   At most `1000` calls will be made to `getBill`.\n*   Answers within `10-5` of the actual value will be accepted.Keep track of the count of the customers. Check if the count of the customers is divisible by n then apply the discount formula.",
          "output": "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.customer_count = 0\n        self.prices_map = {products[i]: prices[i] for i in range(len(products))}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.customer_count += 1\n        total = sum(self.prices_map[product[i]] * amount[i] for i in range(len(product)))\n        if self.customer_count % self.n == 0:\n            total *= (100 - self.discount) / 100\n        return total\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` consisting only of characters _a_, _b_ and _c_.\n\nReturn the number of substrings containing **at least** one occurrence of all these characters _a_, _b_ and _c_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcabc \"\n**Output:** 10\n**Explanation:** The substrings containing at least one occurrence of the characters _a_, _b_ and _c are  \"_abc _\",  \"_abca _\",  \"_abcab _\",  \"_abcabc _\",  \"_bca _\",  \"_bcab _\",  \"_bcabc _\",  \"_cab _\",  \"_cabc _\"_ and  _\"_abc _\"_ (**again**)_._ \n\n**Example 2:**\n\n**Input:** s =  \"aaacb \"\n**Output:** 3\n**Explanation:** The substrings containing at least one occurrence of the characters _a_, _b_ and _c are  \"_aaacb _\",  \"_aacb _\"_ and  _\"_acb _\"._ \n\n**Example 3:**\n\n**Input:** s =  \"abc \"\n**Output:** 1\n\n**Constraints:**\n\n*   `3 <= s.length <= 5 x 10^4`\n*   `s` only consists of _a_, _b_ or _c_ characters.For each position we simply need to find the first occurrence of a/b/c on or after this position. So we can pre-compute three link-list of indices of each a, b, and c.",
          "output": "def find_pairs(z):\n    pairs = []\n    \n    def f(x, y):\n        return x + y\n    \n    for x in range(1, z+1):\n        for y in range(1, z+1):\n            if f(x, y) == z:\n                pairs.append((x, y))\n    return pairs\n"
     },
     {
          "instruction": "Write python code for this problem: Given `n` orders, each order consist in pickup and delivery services.\n\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i).\n\nSince the answer may be too large, return it modulo 10^9 + 7.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 1\n**Explanation:** Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 6\n**Explanation:** All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n\n**Example 3:**\n\n**Input:** n = 3\n**Output:** 90\n\n**Constraints:**\n\n*   `1 <= n <= 500`\n\nGiven 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that : p\\[0\\] = start, p\\[i\\] and p\\[i+1\\] differ by only one bit for all 0 <= i < 2^n - 1.Use the permutation and combination theory to add one (P, D) pair each time until n pairs.",
          "output": "def circular_permutation(n, start):\n    result = [start ^ (i ^ (i >> 1)) for i in range(1 << n)]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned **in front** of the civilians. That is, all the `1`'s will appear to the **left** of all the `0`'s in each row.\n\nA row `i` is **weaker** than a row `j` if one of the following is true:\n\n*   The number of soldiers in row `i` is less than the number of soldiers in row `j`.\n*   Both rows have the same number of soldiers and `i < j`.\n\nReturn _the indices of the_ `k` _**weakest** rows in the matrix ordered from weakest to strongest_.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \n\\[\\[1,1,0,0,0\\],\n \\[1,1,1,1,0\\],\n \\[1,0,0,0,0\\],\n \\[1,1,0,0,0\\],\n \\[1,1,1,1,1\\]\\], \nk = 3\n**Output:** \\[2,0,3\\]\n**Explanation:** \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are \\[2,0,3,1,4\\].\n\n**Example 2:**\n\n**Input:** mat = \n\\[\\[1,0,0,0\\],\n \\[1,1,1,1\\],\n \\[1,0,0,0\\],\n \\[1,0,0,0\\]\\], \nk = 2\n**Output:** \\[0,2\\]\n**Explanation:** \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are \\[0,2,3,1\\].\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `2 <= n, m <= 100`\n*   `1 <= k <= m`\n*   `matrix[i][j]` is either 0 or 1.Sort the matrix row indexes by the number of soldiers and then row indexes.",
          "output": "from typing import List\n\ndef kWeakestRows(mat: List[List[int]], k: int) -> List[int]:\n    soldiers_count = [(sum(row), idx) for idx, row in enumerate(mat)]\n    soldiers_count.sort()\n    return [x[1] for x in soldiers_count[:k]]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `arr`. You can choose a set of integers and remove all the occurrences of these integers in the array.\n\nReturn _the minimum size of the set so that **at least** half of the integers of the array are removed_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,3,3,3,5,5,5,2,2,7\\]\n**Output:** 2\n**Explanation:** Choosing {3,7} will make the new array \\[5,5,5,2,2\\] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array \\[3,3,3,3,5,5,5\\] which has a size greater than half of the size of the old array.\n\n**Example 2:**\n\n**Input:** arr = \\[7,7,7,7,7,7\\]\n**Output:** 1\n**Explanation:** The only possible set you can choose is {7}. This will make the new array empty.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 105`\n*   `arr.length` is even.\n*   `1 <= arr[i] <= 105`Count the frequency of each integer in the array. Start with an empty set, add to the set the integer with the maximum frequency. Keep Adding the integer with the max frequency until you remove at least half of the integers.",
          "output": "from collections import Counter\nimport heapq\n\ndef minSetSize(arr):\n    freq_map = Counter(arr)\n    max_heap = [-cnt for cnt in freq_map.values()]\n    heapq.heapify(max_heap)\n    half = len(arr) // 2\n    cnt = 0\n    size = 0\n    while size < half:\n        size -= heapq.heappop(max_heap)\n        cnt += 1\n    return cnt\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\n\nReturn _the maximum product of the sums of the two subtrees_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n**Note** that you need to maximize the answer before taking the mod and not after taking it.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5,6\\]\n**Output:** 110\n**Explanation:** Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11\\*10)\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,null,null,5,6\\]\n**Output:** 90\n**Explanation:** Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15\\*6)\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 5 * 104]`.\n*   `1 <= Node.val <= 104`If we know the sum of a subtree, the answer is max( (total_sum - subtree_sum) * subtree_sum) in each node.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sum_subtrees(self, root, sums):\n        if not root: return 0\n        s = root.val + self.sum_subtrees(root.left, sums) + self.sum_subtrees(root.right, sums)\n        sums.append(s)\n        return s\n\n    def maxProduct(self, root):\n        sums = []\n        total = self.sum_subtrees(root, sums)\n        max_product = max(s * (total - s) for s in sums)\n        return max_product % 1000000007\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr` and an integer `d`. In one step you can jump from index `i` to index:\n\n*   `i + x` where: `i + x < arr.length` and `0 < x <= d`.\n*   `i - x` where: `i - x >= 0` and `0 < x <= d`.\n\nIn addition, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i, j) < k < max(i, j)`).\n\nYou can choose any index of the array and start jumping. Return _the maximum number of indices_ you can visit.\n\nNotice that you can not jump outside of the array at any time.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[6,4,14,6,8,13,9,7,10,6,12\\], d = 2\n**Output:** 4\n**Explanation:** You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.\n\n**Example 2:**\n\n**Input:** arr = \\[3,3,3,3,3\\], d = 3\n**Output:** 1\n**Explanation:** You can start at any index. You always cannot jump to any index.\n\n**Example 3:**\n\n**Input:** arr = \\[7,6,5,4,3,2,1\\], d = 1\n**Output:** 7\n**Explanation:** Start at index 0. You can visit all the indicies. \n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `1 <= arr[i] <= 105`\n*   `1 <= d <= arr.length`Use dynamic programming. dp[i] is max jumps you can do starting from index i. Answer is max(dp[i]). dp[i] = 1 + max (dp[j]) where j is all indices you can reach from i.",
          "output": "import threading\n\nclass DiningPhilosophers:\n    def __init__(self):\n        self.forks = [threading.Lock() for _ in range(5)]\n        self.not_busy = [threading.Condition(self.forks[i]) for i in range(5)]\n\n    def wantsToEat(self, philosopher: int, pickLeftFork: 'Callable[[], None]', pickRightFork: 'Callable[[], None]', eat: 'Callable[[], None]', putLeftFork: 'Callable[[], None]', putRightFork: 'Callable[[], None]') -> None:\n        left_fork = philosopher\n        right_fork = (philosopher + 1) % 5\n\n        with self.forks[left_fork]:\n            with self.not_busy[left_fork]:\n                while not self.forks[right_fork].acquire(blocking=False):\n                    self.not_busy[left_fork].wait()\n            pickLeftFork()\n\n            with self.forks[right_fork]:\n                pickRightFork()\n                eat()\n                putRightFork()\n                self.forks[right_fork].release()\n                with self.not_busy[right_fork]:\n                    self.not_busy[right_fork].notify_all()\n\n            putLeftFork()\n            self.not_busy[left_fork].notify_all()\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `arr` of integers, check if there exist two indices `i` and `j` such that :\n\n*   `i != j`\n*   `0 <= i, j < arr.length`\n*   `arr[i] == 2 * arr[j]`\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[10,2,5,3\\]\n**Output:** true\n**Explanation:** For i = 0 and j = 2, arr\\[i\\] == 10 == 2 \\* 5 == 2 \\* arr\\[j\\]\n\n**Example 2:**\n\n**Input:** arr = \\[3,1,7,11\\]\n**Output:** false\n**Explanation:** There is no i and j that satisfy the conditions.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 500`\n*   `-103 <= arr[i] <= 103`Loop from i = 0 to arr.length, maintaining in a hashTable the array elements from [0, i - 1]. On each step of the loop check if we have seen the element 2 * arr[i] so far or arr[i] / 2 was seen if arr[i] % 2 == 0.",
          "output": "def maxValueInStack(nums, k):\n    n = len(nums)\n    if k >= n:\n        return -1\n\n    max_val = float('-inf')\n    for i in range(k+1):\n        max_val = max(max_val, nums[i])\n    return max_val\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings of the same length `s` and `t`. In one step you can choose **any character** of `t` and replace it with **another character**.\n\nReturn _the minimum number of steps_ to make `t` an anagram of `s`.\n\nAn **Anagram** of a string is a string that contains the same characters with a different (or the same) ordering.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"bab \", t =  \"aba \"\n**Output:** 1\n**Explanation:** Replace the first 'a' in t with b, t =  \"bba \" which is anagram of s.\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \", t =  \"practice \"\n**Output:** 5\n**Explanation:** Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.\n\n**Example 3:**\n\n**Input:** s =  \"anagram \", t =  \"mangaar \"\n**Output:** 0\n**Explanation:**  \"anagram \" and  \"mangaar \" are anagrams. \n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `s.length == t.length`\n*   `s` and `t` consist of lowercase English letters only.Count the frequency of characters of each string. Loop over all characters if the frequency of a character in t is less than the frequency of the same character in s then add the difference between the frequencies to the answer.",
          "output": "def minSteps(s, t):\n    s_Count = [0] * 26\n    t_Count = [0] * 26\n    for c in s: s_Count[ord(c) - ord('a')] += 1\n    for c in t: t_Count[ord(c) - ord('a')] += 1\n    res = 0\n    for i in range(26):\n        res += abs(s_Count[i] - t_Count[i])\n    return res // 2\n"
     },
     {
          "instruction": "Write python code for this problem: A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller **time chunks** based on a certain frequency (every **minute**, **hour**, or **day**).\n\nFor example, the period `[10, 10000]` (in **seconds**) would be partitioned into the following **time chunks** with these frequencies:\n\n*   Every **minute** (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`\n*   Every **hour** (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`\n*   Every **day** (86400-second chunks): `[10,10000]`\n\nNotice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example).\n\nDesign and implement an API to help the company with their analysis.\n\nImplement the `TweetCounts` class:\n\n*   `TweetCounts()` Initializes the `TweetCounts` object.\n*   `void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in **seconds**).\n*   `List getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each **time chunk** for the given period of time `[startTime, endTime]` (in **seconds**) and frequency `freq`.\n    *   `freq` is one of `\"minute \"`, `\"hour \"`, or `\"day \"` representing a frequency of every **minute**, **hour**, or **day** respectively.\n\n**Example:**\n\n**Input**\n\\[ \"TweetCounts \", \"recordTweet \", \"recordTweet \", \"recordTweet \", \"getTweetCountsPerFrequency \", \"getTweetCountsPerFrequency \", \"recordTweet \", \"getTweetCountsPerFrequency \"\\]\n\\[\\[\\],\\[ \"tweet3 \",0\\],\\[ \"tweet3 \",60\\],\\[ \"tweet3 \",10\\],\\[ \"minute \", \"tweet3 \",0,59\\],\\[ \"minute \", \"tweet3 \",0,60\\],\\[ \"tweet3 \",120\\],\\[ \"hour \", \"tweet3 \",0,210\\]\\]\n\n**Output**\n\\[null,null,null,null,\\[2\\],\\[2,1\\],null,\\[4\\]\\]\n\n**Explanation**\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet( \"tweet3 \", 0);                              // New tweet  \"tweet3 \" at time 0\ntweetCounts.recordTweet( \"tweet3 \", 60);                             // New tweet  \"tweet3 \" at time 60\ntweetCounts.recordTweet( \"tweet3 \", 10);                             // New tweet  \"tweet3 \" at time 10\ntweetCounts.getTweetCountsPerFrequency( \"minute \",  \"tweet3 \", 0, 59); // return \\[2\\]; chunk \\[0,59\\] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency( \"minute \",  \"tweet3 \", 0, 60); // return \\[2,1\\]; chunk \\[0,59\\] had 2 tweets, chunk \\[60,60\\] had 1 tweet\ntweetCounts.recordTweet( \"tweet3 \", 120);                            // New tweet  \"tweet3 \" at time 120\ntweetCounts.getTweetCountsPerFrequency( \"hour \",  \"tweet3 \", 0, 210);  // return \\[4\\]; chunk \\[0,210\\] had 4 tweets\n\n**Constraints:**\n\n*   `0 <= time, startTime, endTime <= 109`\n*   `0 <= endTime - startTime <= 104`\n*   There will be at most `104` calls **in total** to `recordTweet` and `getTweetCountsPerFrequency`",
          "input": ".",
          "output": "from collections import defaultdict\nfrom typing import List\n\nclass TweetCounts:\n\n    def __init__(self):\n        self.data = defaultdict(dict)\n\n    def recordTweet(self, tweetName: str, time: int) -> None:\n        if time not in self.data[tweetName]:\n            self.data[tweetName][time] = 1\n        else:\n            self.data[tweetName][time] += 1\n\n    def getTweetCountsPerFrequency(self, freq: str, tweetName: str, startTime: int, endTime: int) -> List[int]:\n        step = 60 if freq == \"minute\" else 3600 if freq == \"hour\" else 86400\n        chunks = [0] * ((endTime - startTime) // step + 1)\n\n        if tweetName in self.data:\n            for time, count in self.data[tweetName].items():\n                chunk_index = (time - startTime) // step\n                if 0 <= chunk_index < len(chunks):\n                    chunks[chunk_index] += count\n\n        return chunks\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `m * n` matrix `seats` that represent seats distributions in a classroom. If a seat is broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character.\n\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the **maximum** number of students that can take the exam together without any cheating being possible..\n\nStudents must be placed in seats in good condition.\n\n",
          "input": "**Example 1:**\n\n**Input:** seats = \\[\\[ \"# \", \". \", \"# \", \"# \", \". \", \"# \"\\],\n                \\[ \". \", \"# \", \"# \", \"# \", \"# \", \". \"\\],\n                \\[ \"# \", \". \", \"# \", \"# \", \". \", \"# \"\\]\\]\n**Output:** 4\n**Explanation:** Teacher can place 4 students in available seats so they don't cheat on the exam. \n\n**Example 2:**\n\n**Input:** seats = \\[\\[ \". \", \"# \"\\],\n                \\[ \"# \", \"# \"\\],\n                \\[ \"# \", \". \"\\],\n                \\[ \"# \", \"# \"\\],\n                \\[ \". \", \"# \"\\]\\]\n**Output:** 3\n**Explanation:** Place all students in available seats. \n\n**Example 3:**\n\n**Input:** seats = \\[\\[ \"# \", \". \", \"**.** \", \". \", \"# \"\\],\n                \\[ \"**.** \", \"# \", \"**.** \", \"# \", \"**.** \"\\],\n                \\[ \"**.** \", \". \", \"# \", \". \", \"**.** \"\\],\n                \\[ \"**.** \", \"# \", \"**.** \", \"# \", \"**.** \"\\],\n                \\[ \"# \", \". \", \"**.** \", \". \", \"# \"\\]\\]\n**Output:** 10\n**Explanation:** Place students in available seats in column 1, 3 and 5.\n\n**Constraints:**\n\n*   `seats` contains only characters `'.' and``'#'.`\n*   `m == seats.length`\n*   `n == seats[i].length`\n*   `1 <= m <= 8`\n*   `1 <= n <= 8`Students in row i only can see exams in row i+1. Use Dynamic programming to compute the result given a (current row, bitmask people seated in previous row).",
          "output": "from typing import List\n\ndef checkStraightLine(coordinates: List[List[int]]) -> bool:\n    dx = coordinates[1][0] - coordinates[0][0]\n    dy = coordinates[1][1] - coordinates[0][1]\n\n    for x, y in coordinates[2:]:\n        if dx * (y - coordinates[0][1]) != dy * (x - coordinates[0][0]):\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s`. Reorder the string using the following algorithm:\n\n1.  Pick the **smallest** character from `s` and **append** it to the result.\n2.  Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it.\n3.  Repeat step 2 until you cannot pick more characters.\n4.  Pick the **largest** character from `s` and **append** it to the result.\n5.  Pick the **largest** character from `s` which is smaller than the last appended character to the result and **append** it.\n6.  Repeat step 5 until you cannot pick more characters.\n7.  Repeat the steps from 1 to 6 until you pick all characters from `s`.\n\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\n\nReturn _the result string after sorting_ `s` _with this algorithm_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaaabbbbcccc \"\n**Output:**  \"abccbaabccba \"\n**Explanation:** After steps 1, 2 and 3 of the first iteration, result =  \"abc \"\nAfter steps 4, 5 and 6 of the first iteration, result =  \"abccba \"\nFirst iteration is done. Now s =  \"aabbcc \" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result =  \"abccbaabc \"\nAfter steps 4, 5 and 6 of the second iteration, result =  \"abccbaabccba \"\n\n**Example 2:**\n\n**Input:** s =  \"rat \"\n**Output:**  \"art \"\n**Explanation:** The word  \"rat \" becomes  \"art \" after re-ordering it with the mentioned algorithm.\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters.Count the frequency of each character. Loop over all character from 'a' to 'z' and append the character if it exists and decrease frequency by 1. Do the same from 'z' to 'a'. Keep repeating until the frequency of all characters is zero.",
          "output": "def numberOfSubarrays(nums, k):\n    n = len(nums)\n    result = count = 0\n    odd_count = [0] * (n + 1)\n\n    odd_count[0] = 1\n    for num in nums:\n        count += num % 2\n        if count >= k:\n            result += odd_count[count - k]\n        odd_count[count] += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"eleetminicoworoep \"\n**Output:** 13\n**Explanation:** The longest substring is  \"leetminicowor \" which contains two each of the vowels: **e**, **i** and **o** and zero of the vowels: **a** and **u**.\n\n**Example 2:**\n\n**Input:** s =  \"leetcodeisgreat \"\n**Output:** 5\n**Explanation:** The longest substring is  \"leetc \" which contains two e's.\n\n**Example 3:**\n\n**Input:** s =  \"bcbcbc \"\n**Output:** 6\n**Explanation:** In this case, the given string  \"bcbcbc \" is the longest because all vowels: **a**, **e**, **i**, **o** and **u** appear zero times.\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 x 10^5`\n*   `s` contains only lowercase English letters.\n\nIt is the empty string, or It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string.Represent the counts (odd or even) of vowels with a bitmask. Precompute the prefix xor for the bitmask of vowels and then get the longest valid substring.",
          "output": "def min_remove_to_make_valid(s: str) -> str:\n    stk = []\n    result = list(s)\n\n    for i, ch in enumerate(s):\n        if ch == '(':\n            stk.append(i)\n        elif ch == ')':\n            if stk:\n                stk.pop()\n            else:\n                result[i] = ''\n\n    for i in stk:\n        result[i] = ''\n\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree.\n\nA ZigZag path for a binary tree is defined as follow:\n\n*   Choose **any** node in the binary tree and a direction (right or left).\n*   If the current direction is right, move to the right child of the current node; otherwise, move to the left child.\n*   Change the direction from right to left or from left to right.\n*   Repeat the second and third steps until you can't move in the tree.\n\nZigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).\n\nReturn _the longest **ZigZag** path contained in that tree_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1\\]\n**Output:** 3\n**Explanation:** Longest ZigZag path in blue nodes (right -> left -> right).\n\n**Example 2:**\n\n**Input:** root = \\[1,1,1,null,1,null,null,1,1,null,1\\]\n**Output:** 4\n**Explanation:** Longest ZigZag path in blue nodes (left -> right -> left -> right).\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 5 * 104]`.\n*   `1 <= Node.val <= 100`Create this function maxZigZag(node, direction) maximum zigzag given a node and direction (right or left).",
          "output": "from math import gcd\nfrom functools import reduce\n\ndef is_good_array(nums):\n    gcd_value = reduce(gcd, nums)\n    return gcd_value == 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **binary tree** `root`, return _the maximum sum of all keys of **any** sub-tree which is also a Binary Search Tree (BST)_.\n\nAssume a BST is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6\\]\n**Output:** 20\n**Explanation:** Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.\n\n**Example 2:**\n\n**Input:** root = \\[4,3,null,1,2\\]\n**Output:** 2\n**Explanation:** Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.\n\n**Example 3:**\n\n**Input:** root = \\[-4,-2,-5\\]\n**Output:** 0\n**Explanation:** All values are negatives. Return an empty BST.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 4 * 104]`.\n*   `-4 * 104 <= Node.val <= 4 * 104`Create a datastructure with 4 parameters:  (sum, isBST, maxLeft, minLeft). In each node compute theses parameters, following the conditions of a Binary Search Tree.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def maxSumBST(self, root: TreeNode) -> int:\n        max_sum = [0]\n\n        def dfs(node):\n            if not node:\n                return 1, 0, float(\"inf\"), float(\"-inf\")\n\n            l = dfs(node.left)\n            r = dfs(node.right)\n\n            if not l[0] or not r[0] or node.val <= l[3] or node.val >= r[2]:\n                return 0, 0, 0, 0\n\n            curr_sum = node.val + l[1] + r[1]\n            max_sum[0] = max(max_sum[0], curr_sum)\n\n            return 1, curr_sum, min(node.val, l[2]), max(node.val, r[3])\n\n        dfs(root)\n        return max_sum[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return _the number of **negative** numbers in_ `grid`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[4,3,2,-1\\],\\[3,2,1,-1\\],\\[1,1,-1,-2\\],\\[-1,-1,-2,-3\\]\\]\n**Output:** 8\n**Explanation:** There are 8 negatives number in the matrix.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[3,2\\],\\[1,0\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 100`\n*   `-100 <= grid[i][j] <= 100`\n\n**Follow up:** Could you find an `O(n + m)` solution?Use binary search for optimization or simply brute force.",
          "output": "def balanced_string(s):\n    n = len(s)\n    freq_map = {}\n    for c in s:\n        freq_map[c] = freq_map.get(c, 0) + 1\n    \n    i = 0\n    result = n\n    for j in range(n):\n        freq_map[s[j]] -= 1\n        while i < n and all(freq_map.get(c, 0) <= n // 4 for c in \"QWER\"):\n            result = min(result, j - i + 1)\n            freq_map[s[i]] += 1\n            i += 1\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Design an algorithm that accepts a stream of integers and retrieves the product of the last `k` integers of the stream.\n\nImplement the `ProductOfNumbers` class:\n\n*   `ProductOfNumbers()` Initializes the object with an empty stream.\n*   `void add(int num)` Appends the integer `num` to the stream.\n*   `int getProduct(int k)` Returns the product of the last `k` numbers in the current list. You can assume that always the current list has at least `k` numbers.\n\nThe test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\n\n**Example:**\n\n**Input**\n\\[ \"ProductOfNumbers \", \"add \", \"add \", \"add \", \"add \", \"add \", \"getProduct \", \"getProduct \", \"getProduct \", \"add \", \"getProduct \"\\]\n\\[\\[\\],\\[3\\],\\[0\\],\\[2\\],\\[5\\],\\[4\\],\\[2\\],\\[3\\],\\[4\\],\\[8\\],\\[2\\]\\]\n\n**Output**\n\\[null,null,null,null,null,null,20,40,0,null,32\\]\n\n**Explanation**\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // \\[3\\]\nproductOfNumbers.add(0);        // \\[3,0\\]\nproductOfNumbers.add(2);        // \\[3,0,2\\]\nproductOfNumbers.add(5);        // \\[3,0,2,5\\]\nproductOfNumbers.add(4);        // \\[3,0,2,5,4\\]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 \\* 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 \\* 5 \\* 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 \\* 2 \\* 5 \\* 4 = 0\nproductOfNumbers.add(8);        // \\[3,0,2,5,4,8\\]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 \\* 8 = 32 \n\n**Constraints:**\n\n*   `0 <= num <= 100`\n*   `1 <= k <= 4 * 104`\n*   At most `4 * 104` calls will be made to `add` and `getProduct`.\n*   The product of the stream at any point in time will fit in a **32-bit** integer",
          "input": ".Keep all prefix products of numbers in an array, then calculate the product of last K elements in O(1) complexity. When a zero number is added, clean the array of prefix products.",
          "output": "from functools import lru_cache\n\nclass Job:\n    def __init__(self, start, end, profit):\n        self.start = start\n        self.end = end\n        self.profit = profit\n\ndef find_next_job(jobs, i):\n    for j in range(i + 1, len(jobs)):\n        if jobs[j].start >= jobs[i].end:\n            return j\n    return -1\n\n@lru_cache(None)\ndef max_profit_helper(jobs, i):\n    if i == -1:\n        return 0\n\n    next_job = find_next_job(jobs, i)\n    incl_curr_job = jobs[i].profit + max_profit_helper(jobs, next_job)\n    excl_curr_job = max_profit_helper(jobs, i - 1)\n    \n    return max(incl_curr_job, excl_curr_job)\n\ndef max_profit(startTime, endTime, profit):\n    n = len(startTime)\n    jobs = [Job(startTime[i], endTime[i], profit[i]) for i in range(n)]\n\n    jobs.sort(key=lambda job: job.end)\n    \n    return max_profit_helper(tuple(jobs), n - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`.\n\nYou can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. You can only attend one event at any time `d`.\n\nReturn _the maximum number of events you can attend_.\n\n",
          "input": "**Example 1:**\n\n**Input:** events = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]\n**Output:** 3\n**Explanation:** You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3.\n\n**Example 2:**\n\n**Input:** events= \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[1,2\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= events.length <= 105`\n*   `events[i].length == 2`\n*   `1 <= startDayi <= endDayi <= 105`Sort the events by the start time and in case of tie by the end time in ascending order. Loop over the sorted events. Attend as much as you can and keep the last day occupied. When you try to attend new event keep in mind the first day you can attend a new event in.",
          "output": "import heapq\n\ndef maxEvents(events: List[List[int]]) -> int:\n    events.sort(key=lambda x: x[0])\n    min_heap = []\n    event_count, day = 0, 0\n\n    for event in events:\n        while min_heap and min_heap[0] < event[0]:\n            heapq.heappop(min_heap)\n        heapq.heappush(min_heap, event[1])\n        event_count += 1\n        day += 1\n\n    return event_count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `target` of n integers. From a starting array `arr` consisting of `n` 1's, you may perform the following procedure :\n\n*   let `x` be the sum of all elements currently in your array.\n*   choose index `i`, such that `0 <= i < n` and set the value of `arr` at index `i` to `x`.\n*   You may repeat this procedure as many times as needed.\n\nReturn `true` _if it is possible to construct the_ `target` _array from_ `arr`_, otherwise, return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = \\[9,3,5\\]\n**Output:** true\n**Explanation:** Start with arr = \\[1, 1, 1\\] \n\\[1, 1, 1\\], sum = 3 choose index 1\n\\[1, 3, 1\\], sum = 5 choose index 2\n\\[1, 3, 5\\], sum = 9 choose index 0\n\\[9, 3, 5\\] Done\n\n**Example 2:**\n\n**Input:** target = \\[1,1,1,2\\]\n**Output:** false\n**Explanation:** Impossible to create target array from \\[1,1,1,1\\].\n\n**Example 3:**\n\n**Input:** target = \\[8,5\\]\n**Output:** true\n\n**Constraints:**\n\n*   `n == target.length`\n*   `1 <= n <= 5 * 104`\n*   `1 <= target[i] <= 109`Given that the sum is strictly increasing, the largest element in the target must be formed in the last step by adding the total sum in the previous step. Thus, we can simulate the process in a reversed way. Subtract the largest with the rest of the array, and put the new element into the array. Repeat until all elements become one",
          "output": "from sortedcontainers import SortedSet\n\ndef winners_and_losers(matches):\n    winners, losers = SortedSet(), SortedSet()\n\n    for winner, loser in matches:\n        winners.add(winner)\n        losers.add(loser)\n\n    return [list(winners), list(losers)]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` **and** `nums[j] < nums[i]`.\n\nReturn the answer in an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[8,1,2,2,3\\]\n**Output:** \\[4,0,1,1,3\\]\n**Explanation:** \nFor nums\\[0\\]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums\\[1\\]=1 does not exist any smaller number than it.\nFor nums\\[2\\]=2 there exist one smaller number than it (1). \nFor nums\\[3\\]=2 there exist one smaller number than it (1). \nFor nums\\[4\\]=3 there exist three smaller numbers than it (1, 2 and 2).\n\n**Example 2:**\n\n**Input:** nums = \\[6,5,4,8\\]\n**Output:** \\[2,1,0,3\\]\n\n**Example 3:**\n\n**Input:** nums = \\[7,7,7,7\\]\n**Output:** \\[0,0,0,0\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 500`\n*   `0 <= nums[i] <= 100`Brute force for each array element. In order to improve the time complexity, we can sort the array and get the answer for each array element.",
          "output": "def smallerNumbersThanCurrent(nums):\n    result = []\n    for i in range(len(nums)):\n        count = 0\n        for j in range(len(nums)):\n            if i != j and nums[j] < nums[i]:\n                count += 1\n        result.append(count)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.\n\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\n\nYou are given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\n\nReturn _a string of all teams **sorted** by the ranking system_.\n\n",
          "input": "**Example 1:**\n\n**Input:** votes = \\[ \"ABC \", \"ACB \", \"ABC \", \"ACB \", \"ACB \"\\]\n**Output:**  \"ACB \"\n**Explanation:** \nTeam A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team.\nTeam B was ranked second by 2 voters and ranked third by 3 voters.\nTeam C was ranked second by 3 voters and ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team, and team B is the third.\n\n**Example 2:**\n\n**Input:** votes = \\[ \"WXYZ \", \"XYZW \"\\]\n**Output:**  \"XWYZ \"\n**Explanation:**\nX is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position. \n\n**Example 3:**\n\n**Input:** votes = \\[ \"ZMNAGUEDSJYLBOPHRQICWFXTVK \"\\]\n**Output:**  \"ZMNAGUEDSJYLBOPHRQICWFXTVK \"\n**Explanation:** Only one voter, so their votes are used for the ranking.\n\n**Constraints:**\n\n*   `1 <= votes.length <= 1000`\n*   `1 <= votes[i].length <= 26`\n*   `votes[i].length == votes[j].length` for `0 <= i, j < votes.length`.\n*   `votes[i][j]` is an English **uppercase** letter.\n*   All characters of `votes[i]` are unique.\n*   All the characters that occur in `votes[0]` **also occur** in `votes[j]` where `1 <= j < votes.length`.Build array rank where rank[i][j] is the number of votes for team i to be the j-th rank. Sort the trams by rank array. if rank array is the same for two or more teams, sort them by the ID in ascending order.",
          "output": "def rankTeams(votes):\n    n, m = len(votes), len(votes[0])\n    count = [[0] * m for _ in range(26)]\n    res = votes[0]\n\n    for vote in votes:\n        for j, team in enumerate(vote):\n            count[ord(team) - ord('A')][j] += 1\n\n    return ''.join(sorted(res, key=lambda x: (-count[ord(x) - ord('A')][:m], x)))\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree `root` and a linked list with `head` as the first node.\n\nReturn True if all the elements in the linked list starting from the `head` correspond to some _downward path_ connected in the binary tree otherwise return False.\n\nIn this context downward path means a path that starts at some node and goes downwards.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[4,2,8\\], root = \\[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3\\]\n**Output:** true\n**Explanation:** Nodes in blue form a subpath in the binary Tree.  \n\n**Example 2:**\n\n**Input:** head = \\[1,4,2,6\\], root = \\[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3\\]\n**Output:** true\n\n**Example 3:**\n\n**Input:** head = \\[1,4,2,6,8\\], root = \\[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3\\]\n**Output:** false\n**Explanation:** There is no path in the binary tree that contains all the elements of the linked list from `head`.\n\n**Constraints:**\n\n*   The number of nodes in the tree will be in the range `[1, 2500]`.\n*   The number of nodes in the list will be in the range `[1, 100]`.\n*   `1 <= Node.val <= 100` for each node in the linked list and binary tree.Create recursive function, given a pointer in a Linked List and any node in the Binary Tree. Check if all the elements in the linked list starting from the head correspond to some downward path in the binary tree.",
          "output": "def maxHeight(cuboids):\n    cuboids = [sorted(cuboid) for cuboid in cuboids]\n    cuboids.sort()\n\n    n = len(cuboids)\n    dp = [0] * n\n    ans = 0\n\n    for i, cuboid in enumerate(cuboids):\n        dp[i] = cuboid[2]\n        for j in range(i):\n            if all(cuboids[j][k] <= cuboid[k] for k in range(3)):\n                dp[i] = max(dp[i], dp[j] + cuboid[2])\n\n        ans = max(ans, dp[i])\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be:\n\n*   `1` which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)\n*   `2` which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)\n*   `3` which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)\n*   `4` which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)\n\nNotice that there could be some signs on the cells of the grid that point outside the grid.\n\nYou will initially start at the upper left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path does not have to be the shortest.\n\nYou can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell **one time only**.\n\nReturn _the minimum cost to make the grid have at least one valid path_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,1,1\\],\\[2,2,2,2\\],\\[1,1,1,1\\],\\[2,2,2,2\\]\\]\n**Output:** 3\n**Explanation:** You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\nThe total cost = 3.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,3\\],\\[3,2,2\\],\\[1,1,4\\]\\]\n**Output:** 0\n**Explanation:** You can follow the path from (0, 0) to (2, 2).\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,2\\],\\[4,3\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 100`\n*   `1 <= grid[i][j] <= 4`Build a graph where grid[i][j] is connected to all the four side-adjacent cells with weighted edge. the weight is 0 if the sign is pointing to the adjacent cell or 1 otherwise. Do BFS from (0, 0) visit all edges with weight = 0 first. the answer is the distance to (m -1, n - 1).",
          "output": "from collections import deque\n\ndef minCost(grid):\n    m, n = len(grid), len(grid[0])\n    cost = 0\n\n    visited = [[1000000] * n for _ in range(m)]\n    q = deque([(0, 0)])\n    visited[0][0] = 0\n\n    while q:\n        y, x = q.popleft()\n        if y == m - 1 and x == n - 1:\n            cost = visited[y][x]\n            break\n\n        dx = [1, 0, -1, 0]\n        dy = [0, 1, 0, -1]\n\n        for dir in range(4):\n            newY, newX = y + dy[dir], x + dx[dir]\n            if 0 <= newY < m and 0 <= newX < n:\n                newCost = visited[y][x] + (1 if dir + 1 != grid[y][x] else 0)\n                if newCost < visited[newY][newX]:\n                    visited[newY][newX] = newCost\n                    q.append((newY, newX))\n\n    return cost\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `arr1` and `arr2`, and the integer `d`, _return the distance value between the two arrays_.\n\nThe distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr1 = \\[4,5,8\\], arr2 = \\[10,9,1,8\\], d = 2\n**Output:** 2\n**Explanation:** \nFor arr1\\[0\\]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1\\[1\\]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1\\[2\\]=8 we have:\n**|8-10|=2 <= d=2**\n**|8-9|=1 <= d=2**\n|8-1|=7 > d=2\n**|8-8|=0 <= d=2**\n\n**Example 2:**\n\n**Input:** arr1 = \\[1,4,2,3\\], arr2 = \\[-4,-3,6,10,20,30\\], d = 3\n**Output:** 2\n\n**Example 3:**\n\n**Input:** arr1 = \\[2,1,100,3\\], arr2 = \\[-5,-2,10,-3,7\\], d = 6\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length <= 500`\n*   `-1000 <= arr1[i], arr2[j] <= 1000`\n*   `0 <= d <= 100`Sort 'arr2' and use binary search to get the closest element for each 'arr1[i]', it gives a time complexity of O(nlogn).",
          "output": "def findTheDistanceValue(arr1, arr2, d):\n    distance = 0\n    for a in arr1:\n        found = True\n        for b in arr2:\n            if abs(a - b) <= d:\n                found = False\n                break\n        if found:\n            distance += 1\n    return distance\n"
     },
     {
          "instruction": "Write python code for this problem: A cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.\n\nGiven the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]` means the seat located in row **3** and labelled with **8** is already reserved.\n\n_Return the maximum number of four-person groups you can assign on the cinema seats._ A four-person group occupies four adjacent seats **in one single row**. Seats across an aisle (such as \\[3,3\\] and \\[3,4\\]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, reservedSeats = \\[\\[1,2\\],\\[1,3\\],\\[1,8\\],\\[2,6\\],\\[3,1\\],\\[3,10\\]\\]\n**Output:** 4\n**Explanation:** The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n\n**Example 2:**\n\n**Input:** n = 2, reservedSeats = \\[\\[2,1\\],\\[1,8\\],\\[2,6\\]\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** n = 4, reservedSeats = \\[\\[4,3\\],\\[1,4\\],\\[4,6\\],\\[1,7\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= n <= 10^9`\n*   `1 <= reservedSeats.length <= min(10*n, 10^4)`\n*   `reservedSeats[i].length == 2`\n*   `1 <= reservedSeats[i][0] <= n`\n*   `1 <= reservedSeats[i][1] <= 10`\n*   All `reservedSeats[i]` are distinct.Note you can allocate at most two families in one row. Greedily check if you can allocate seats for two families, one family or none. Process only rows that appear in the input, for other rows you can always allocate seats for two families.",
          "output": "def shiftGrid(grid, k):\n    m, n = len(grid), len(grid[0])\n    k %= (m * n)\n    res = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            idx = (i * n + j + k) % (m * n)\n            res[idx // n][idx % n] = grid[i][j]\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: There is a pizza with `3n` slices of varying size, you and your friends will take slices of pizza as follows:\n\n*   You will pick **any** pizza slice.\n*   Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.\n*   Your friend Bob will pick the next slice in the clockwise direction of your pick.\n*   Repeat until there are no more slices of pizzas.\n\nGiven an integer array `slices` that represent the sizes of the pizza slices in a clockwise direction, return _the maximum possible sum of slice sizes that you can pick_.\n\n",
          "input": "**Example 1:**\n\n**Input:** slices = \\[1,2,3,4,5,6\\]\n**Output:** 10\n**Explanation:** Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n\n**Example 2:**\n\n**Input:** slices = \\[8,9,8,6,1,1\\]\n**Output:** 16\n**Explanation:** Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.\n\n**Constraints:**\n\n*   `3 * n == slices.length`\n*   `1 <= slices.length <= 500`\n*   `1 <= slices[i] <= 1000`By studying the pattern of the operations, we can find out that the problem is equivalent to: Given an integer array with size 3N, select N integers with maximum sum and any selected integers are not next to each other in the array. The first one in the array is considered next to the last one in the array. Use Dynamic Programming to solve it.",
          "output": "def maxSumDivThree(nums):\n    dp = [0, 0, 0]\n    for num in nums:\n        temp = dp[:]\n        for s in temp:\n            dp[(s + num) % 3] = max(dp[(s + num) % 3], s + num)\n    return dp[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, _return a string with `n` characters such that each character in such string occurs **an odd number of times**_.\n\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return **any** of them.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:**  \"pppz \"\n**Explanation:**  \"pppz \" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as  \"ohhh \" and  \"love \".\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:**  \"xy \"\n**Explanation:**  \"xy \" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as  \"ag \" and  \"ur \".\n\n**Example 3:**\n\n**Input:** n = 7\n**Output:**  \"holasss \"\n\n**Constraints:**\n\n*   `1 <= n <= 500`If n is odd, return a string of size n formed only by 'a', else return string formed with n-1 'a' and 1 'b''.",
          "output": "def generateTheString(n: int) -> str:\n    result = 'a' * n\n    if n % 2 == 0:\n        result = result[:-1] + 'b'\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You have a **1-indexed** binary string of length `n` where all the bits are `0` initially. We will flip all the bits of this binary string (i.e., change them from `0` to `1`) one by one. You are given a **1-indexed** integer array `flips` where `flips[i]` indicates that the bit at index `i` will be flipped in the `ith` step.\n\nA binary string is **prefix-aligned** if, after the `ith` step, all the bits in the **inclusive** range `[1, i]` are ones and all the other bits are zeros.\n\nReturn _the number of times the binary string is **prefix-aligned** during the flipping process_.\n\n",
          "input": "**Example 1:**\n\n**Input:** flips = \\[3,2,4,1,5\\]\n**Output:** 2\n**Explanation:** The binary string is initially  \"00000 \".\nAfter applying step 1: The string becomes  \"00100 \", which is not prefix-aligned.\nAfter applying step 2: The string becomes  \"01100 \", which is not prefix-aligned.\nAfter applying step 3: The string becomes  \"01110 \", which is not prefix-aligned.\nAfter applying step 4: The string becomes  \"11110 \", which is prefix-aligned.\nAfter applying step 5: The string becomes  \"11111 \", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.\n\n**Example 2:**\n\n**Input:** flips = \\[4,1,2,3\\]\n**Output:** 1\n**Explanation:** The binary string is initially  \"0000 \".\nAfter applying step 1: The string becomes  \"0001 \", which is not prefix-aligned.\nAfter applying step 2: The string becomes  \"1001 \", which is not prefix-aligned.\nAfter applying step 3: The string becomes  \"1101 \", which is not prefix-aligned.\nAfter applying step 4: The string becomes  \"1111 \", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1.\n\n**Constraints:**\n\n*   `n == flips.length`\n*   `1 <= n <= 5 * 104`\n*   `flips` is a permutation of the integers in the range `[1, n]`.If in the step x all bulb shines then bulbs 1,2,3,..,x should shines too.",
          "output": "def find_kth_palindrome(k, int_length):\n    mid = (int_length + 1) // 2\n    limit = 10 ** mid - 1\n\n    i = 0\n    while i <= limit:\n        num = str(i)\n        rev = num[::-1]\n        if int_length % 2 != 0:\n            rev = rev[1:]\n        palindrome = int(num + rev)\n        if palindrome > 0:\n            k -= 1\n        if k == 0:\n            return palindrome\n        i += 1\n    return -1\n\ndef palindrome_queries(queries, int_length):\n    return [find_kth_palindrome(query, int_length) for query in queries]\n"
     },
     {
          "instruction": "Write python code for this problem: A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`.\n\nEach employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure.\n\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\n\nThe `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime\\[i\\] minutes, all his direct subordinates can start spreading the news).\n\nReturn _the number of minutes_ needed to inform all the employees about the urgent news.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1, headID = 0, manager = \\[-1\\], informTime = \\[0\\]\n**Output:** 0\n**Explanation:** The head of the company is the only employee in the company.\n\n**Example 2:**\n\n**Input:** n = 6, headID = 2, manager = \\[2,2,-1,2,2,2\\], informTime = \\[0,0,1,0,0,0\\]\n**Output:** 1\n**Explanation:** The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `0 <= headID < n`\n*   `manager.length == n`\n*   `0 <= manager[i] < n`\n*   `manager[headID] == -1`\n*   `informTime.length == n`\n*   `0 <= informTime[i] <= 1000`\n*   `informTime[i] == 0` if employee `i` has no subordinates.\n*   It is **guaranteed** that all the employees can be informed.The company can be represented as a tree, headID is always the root. Store for each node the time needed to be informed of the news. Answer is the max time a leaf node needs to be informed.",
          "output": "def numOfMinutes(n, headID, manager, informTime):\n    subordinates = [[] for _ in range(n)]\n    for i in range(n):\n        if manager[i] != -1:\n            subordinates[manager[i]].append(i)\n    return dfs(headID, subordinates, informTime)\n\ndef dfs(employee, subordinates, informTime):\n    if informTime[employee] == 0:\n        return 0\n    max_time = 0\n    for i in subordinates[employee]:\n        max_time = max(max_time, dfs(i, subordinates, informTime))\n    return max_time + informTime[employee]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from **vertex 1**. In one second, the frog jumps from its current vertex to another **unvisited** vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.\n\n_Return the probability that after `t` seconds the frog is on the vertex `target`._ Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7, edges = \\[\\[1,2\\],\\[1,3\\],\\[1,7\\],\\[2,4\\],\\[2,6\\],\\[3,5\\]\\], t = 2, target = 4\n**Output:** 0.16666666666666666 \n**Explanation:** The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after **second 1** and then jumping with 1/2 probability to vertex 4 after **second 2**. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 \\* 1/2 = 1/6 = 0.16666666666666666. \n\n**Example 2:**\n\n**Input:** n = 7, edges = \\[\\[1,2\\],\\[1,3\\],\\[1,7\\],\\[2,4\\],\\[2,6\\],\\[3,5\\]\\], t = 1, target = 7\n**Output:** 0.3333333333333333\n**Explanation:** The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after **second 1**. \n\n**Constraints:**\n\n*   `1 <= n <= 100`\n*   `edges.length == n - 1`\n*   `edges[i].length == 2`\n*   `1 <= ai, bi <= n`\n*   `1 <= t <= 50`\n*   `1 <= target <= n`Use a variation of DFS with parameters 'curent_vertex' and 'current_time'. Update the probability considering to jump to one of the children vertices.",
          "output": "from collections import defaultdict\n\ndef dfs(node, parent, t, target, graph, prob, ans):\n    if t == 0:\n        if node == target:\n            ans[0] += prob\n        return\n\n    has_child = False\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            has_child = True\n            dfs(neighbor, node, t - 1, target, graph, prob / (len(graph[node]) - (1 if node != 1 else 0)), ans)\n\n    if not has_child and node == target:\n        ans[0] += prob\n\ndef frogPosition(n, edges, t, target):\n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    ans = [0.0]\n    dfs(1, -1, t, target, graph, 1.0, ans)\n    return ans[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` matrix of **distinct** numbers, return _all **lucky numbers** in the matrix in **any** order_.\n\nA **lucky number** is an element of the matrix such that it is the minimum element in its row and maximum in its column.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[3,7,8\\],\\[9,11,13\\],\\[15,16,17\\]\\]\n**Output:** \\[15\\]\n**Explanation:** 15 is the only lucky number since it is the minimum in its row and the maximum in its column.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,10,4,2\\],\\[9,3,8,7\\],\\[15,16,17,12\\]\\]\n**Output:** \\[12\\]\n**Explanation:** 12 is the only lucky number since it is the minimum in its row and the maximum in its column.\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[7,8\\],\\[1,2\\]\\]\n**Output:** \\[7\\]\n**Explanation:** 7 is the only lucky number since it is the minimum in its row and the maximum in its column.\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= n, m <= 50`\n*   `1 <= matrix[i][j] <= 105`.\n*   All elements in the matrix are distinct.Find out and save the minimum of each row and maximum of each column in two lists. Then scan through the whole matrix to identify the elements that satisfy the criteria.",
          "output": "dx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]\n\ndef dfs(grid, x, y):\n    n, m = len(grid), len(grid[0])\n    grid[x][y] = 1\n    for i in range(4):\n        nx, ny = x + dx[i], y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0:\n            dfs(grid, nx, ny)\n\ndef closedIsland(grid):\n    n, m = len(grid), len(grid[0])\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or i == n - 1 or j == 0 or j == m - 1:\n                if grid[i][j] == 0:\n                    dfs(grid, i, j)\n    res = 0\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if grid[i][j] == 0:\n                dfs(grid, i, j)\n                res += 1\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Design a stack that supports increment operations on its elements.\n\nImplement the `CustomStack` class:\n\n*   `CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack.\n*   `void push(int x)` Adds `x` to the top of the stack if the stack has not reached the `maxSize`.\n*   `int pop()` Pops and returns the top of the stack or `-1` if the stack is empty.\n*   `void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, increment all the elements in the stack.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"CustomStack \", \"push \", \"push \", \"pop \", \"push \", \"push \", \"push \", \"increment \", \"increment \", \"pop \", \"pop \", \"pop \", \"pop \"\\]\n\\[\\[3\\],\\[1\\],\\[2\\],\\[\\],\\[2\\],\\[3\\],\\[4\\],\\[5,100\\],\\[2,100\\],\\[\\],\\[\\],\\[\\],\\[\\]\\]\n**Output**\n\\[null,null,null,2,null,null,null,null,null,103,202,201,-1\\]\n**Explanation**\nCustomStack stk = new CustomStack(3); // Stack is Empty \\[\\]\nstk.push(1);                          // stack becomes \\[1\\]\nstk.push(2);                          // stack becomes \\[1, 2\\]\nstk.pop();                            // return 2 --> Return top of the stack 2, stack becomes \\[1\\]\nstk.push(2);                          // stack becomes \\[1, 2\\]\nstk.push(3);                          // stack becomes \\[1, 2, 3\\]\nstk.push(4);                          // stack still \\[1, 2, 3\\], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes \\[101, 102, 103\\]\nstk.increment(2, 100);                // stack becomes \\[201, 202, 103\\]\nstk.pop();                            // return 103 --> Return top of the stack 103, stack becomes \\[201, 202\\]\nstk.pop();                            // return 202 --> Return top of the stack 202, stack becomes \\[201\\]\nstk.pop();                            // return 201 --> Return top of the stack 201, stack becomes \\[\\]\nstk.pop();                            // return -1 --> Stack is empty return -1.\n\n**Constraints:**\n\n*   `1 <= maxSize, x, k <= 1000`\n*   `0 <= val <= 100`\n*   At most `1000` calls will be made to each method of `increment`, `push` and `pop` each separately.Use an array to represent the stack. Push will add new integer to the array. Pop removes the last element in the array and increment will add val to the first k elements of the array. This solution run in O(1) per push and pop and O(k) per increment.",
          "output": "def get_max_score(word, score):\n    return sum(score[ord(c) - ord('a')] for c in word)\n\ndef get_max_score_helper(words, score, letters, i):\n    if i == len(words):\n        return 0\n    letters_copy = letters.copy()\n    for c in words[i]:\n        if letters_copy[c] == 0:\n            return get_max_score_helper(words, score, letters, i + 1)\n        letters_copy[c] -= 1\n    return max(get_max_score(words[i], score) + get_max_score_helper(words, score, letters_copy, i + 1),\n               get_max_score_helper(words, score, letters, i + 1))\n\ndef max_score_words(words, letters, score):\n    letters_count = {}\n    for letter in letters:\n        letters_count[letter] = letters_count.get(letter, 0) + 1\n    return get_max_score_helper(words, score, letters_count, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.\n\nThe `cloned` tree is a **copy of** the `original` tree.\n\nReturn _a reference to the same node_ in the `cloned` tree.\n\n**Note** that you are **not allowed** to change any of the two trees or the `target` node and the answer **must be** a reference to a node in the `cloned` tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** tree = \\[7,4,3,null,null,6,19\\], target = 3\n**Output:** 3\n**Explanation:** In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.\n\n**Example 2:**\n\n**Input:** tree = \\[7\\], target =  7\n**Output:** 7\n\n**Example 3:**\n\n**Input:** tree = \\[8,null,6,null,5,null,4,null,3,null,2,null,1\\], target = 4\n**Output:** 4\n\n**Constraints:**\n\n*   The number of nodes in the `tree` is in the range `[1, 104]`.\n*   The values of the nodes of the `tree` are unique.\n*   `target` node is a node from the `original` tree and is not `null`.\n\n**Follow up:** Could you solve the problem if repeated values on the tree are allowed?",
          "output": "def reconstructMatrix(upper, lower, colsum):\n    result = [[0] * len(colsum) for _ in range(2)]\n    \n    for i in range(len(colsum)):\n        if colsum[i] == 2:\n            result[0][i] = 1\n            result[1][i] = 1\n            upper -= 1\n            lower -= 1\n        elif colsum[i] == 1:\n            if upper > lower:\n                result[0][i] = 1\n                upper -= 1\n            else:\n                result[1][i] = 1\n                lower -= 1\n        \n        if upper < 0 or lower < 0:\n            return []\n    \n    if upper > 0 or lower > 0:\n        return []\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively.\n\nChoose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**.\n\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.\n\nReturn _the maximum performance of this team_. Since the answer can be a huge number, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, speed = \\[2,10,3,1,5,8\\], efficiency = \\[5,4,3,9,7,2\\], k = 2\n**Output:** 60\n**Explanation:** \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) \\* min(4, 7) = 60.\n\n**Example 2:**\n\n**Input:** n = 6, speed = \\[2,10,3,1,5,8\\], efficiency = \\[5,4,3,9,7,2\\], k = 3\n**Output:** 68\n**Explanation:**\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) \\* min(5, 4, 7) = 68.\n\n**Example 3:**\n\n**Input:** n = 6, speed = \\[2,10,3,1,5,8\\], efficiency = \\[5,4,3,9,7,2\\], k = 4\n**Output:** 72\n\n**Constraints:**\n\n*   `1 <= k <= n <= 105`\n*   `speed.length == n`\n*   `efficiency.length == n`\n*   `1 <= speed[i] <= 105`\n*   `1 <= efficiency[i] <= 108`Keep track of the engineers by their efficiency in decreasing order. Starting from one engineer, to build a team, it suffices to bring K-1 more engineers who have higher efficiencies as well as high speeds.",
          "output": "import heapq\nfrom typing import List\n\ndef max_performance(n: int, k: int, speed: List[int], efficiency: List[int]) -> int:\n    engineers = sorted(zip(efficiency, speed), reverse=True)\n    min_heap = []\n    speed_sum = 0\n    max_performance = 0\n\n    for e, s in engineers:\n        speed_sum += s\n        heapq.heappush(min_heap, s)\n\n        if len(min_heap) > k:\n            speed_sum -= heapq.heappop(min_heap)\n\n        max_performance = max(max_performance, speed_sum * e)\n\n    return max_performance % (10**9 + 7)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`.\n\nEach number from `1` to `n` is grouped according to the sum of its digits.\n\nReturn _the number of groups that have the largest size_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 13\n**Output:** 4\n**Explanation:** There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n\\[1,10\\], \\[2,11\\], \\[3,12\\], \\[4,13\\], \\[5\\], \\[6\\], \\[7\\], \\[8\\], \\[9\\].\nThere are 4 groups with largest size.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 2\n**Explanation:** There are 2 groups \\[1\\], \\[2\\] of size 1.\n\n**Constraints:**\n\n*   `1 <= n <= 104`Count the digit sum for each integer in the range and find out the largest groups.",
          "output": "def countLargestGroup(n: int) -> int:\n    groups = [0] * 37\n    largest_group_size = 0\n    count_largest_groups = 0\n\n    for i in range(1, n + 1):\n        sum_of_digits = sum(map(int, str(i)))\n        groups[sum_of_digits] += 1\n        if groups[sum_of_digits] > largest_group_size:\n            largest_group_size = groups[sum_of_digits]\n            count_largest_groups = 1\n        elif groups[sum_of_digits] == largest_group_size:\n            count_largest_groups += 1\n\n    return count_largest_groups\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a circle represented as `(radius, xCenter, yCenter)` and an axis-aligned rectangle represented as `(x1, y1, x2, y2)`, where `(x1, y1)` are the coordinates of the bottom-left corner, and `(x2, y2)` are the coordinates of the top-right corner of the rectangle.\n\nReturn `true` _if the circle and rectangle are overlapped otherwise return_ `false`. In other words, check if there is **any** point `(xi, yi)` that belongs to the circle and the rectangle at the same time.\n\n",
          "input": "**Example 1:**\n\n**Input:** radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\n**Output:** true\n**Explanation:** Circle and rectangle share the point (1,0).\n\n**Example 2:**\n\n**Input:** radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1\n**Output:** false\n\n**Example 3:**\n\n**Input:** radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= radius <= 2000`\n*   `-104 <= xCenter, yCenter <= 104`\n*   `-104 <= x1 < x2 <= 104`\n*   `-104 <= y1 < y2 <= 104`Locate the closest point of the square to the circle, you can then find the distance from this point to the center of the circle and check if this is less than or equal to the radius.",
          "output": "def checkOverlap(radius, xCenter, yCenter, x1, y1, x2, y2):\n    xClosest = max(x1, min(xCenter, x2))\n    yClosest = max(y1, min(yCenter, y2))\n    return (xCenter - xClosest) ** 2 + (yCenter - yClosest) ** 2 <= radius ** 2\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, return `true` _if you can use all the characters in_ `s` _to construct_ `k` _palindrome strings or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"annabelle \", k = 2\n**Output:** true\n**Explanation:** You can construct two palindromes using all characters in s.\nSome possible constructions  \"anna \" +  \"elble \",  \"anbna \" +  \"elle \",  \"anellena \" +  \"b \"\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \", k = 3\n**Output:** false\n**Explanation:** It is impossible to construct 3 palindromes using all the characters of s.\n\n**Example 3:**\n\n**Input:** s =  \"true \", k = 4\n**Output:** true\n**Explanation:** The only possible solution is to put each character in a separate string.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.\n*   `1 <= k <= 105`If the s.length < k we cannot construct k strings from s and answer is false. If the number of characters that have odd counts is > k then the minimum number of palindrome strings we can construct is > k and answer is false. Otherwise you can construct exactly k palindrome strings and answer is true (why ?).",
          "output": "def tictactoe(moves):\n    grid = [[0] * 3 for _ in range(3)]\n    player = 1\n    for move in moves:\n        r, c = move\n        grid[r][c] = player\n        if (all(grid[i][c] == player for i in range(3)) or\n            all(grid[r][i] == player for i in range(3)) or\n            (r == c and all(grid[i][i] == player for i in range(3))) or\n            (r + c == 2 and all(grid[i][2 - i] == player for i in range(3)))):\n            return 'A' if player == 1 else 'B'\n        player = 3 - player\n    \n    return 'Draw' if len(moves) == 9 else 'Pending'\n"
     },
     {
          "instruction": "Write python code for this problem: A chef has collected data on the `satisfaction` level of his `n` dishes. Chef can cook any dish in 1 unit of time.\n\n**Like-time coefficient** of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. `time[i] * satisfaction[i]`.\n\nReturn _the maximum sum of **like-time coefficient** that the chef can obtain after dishes preparation_.\n\nDishes can be prepared in **any** order and the chef can discard some dishes to get this maximum value.\n\n",
          "input": "**Example 1:**\n\n**Input:** satisfaction = \\[-1,-8,0,5,-9\\]\n**Output:** 14\n**Explanation:** After Removing the second and last dish, the maximum total **like-time coefficient** will be equal to (-1\\*1 + 0\\*2 + 5\\*3 = 14).\nEach dish is prepared in one unit of time.\n\n**Example 2:**\n\n**Input:** satisfaction = \\[4,3,2\\]\n**Output:** 20\n**Explanation:** Dishes can be prepared in any order, (2\\*1 + 3\\*2 + 4\\*3 = 20)\n\n**Example 3:**\n\n**Input:** satisfaction = \\[-1,-4,-5\\]\n**Output:** 0\n**Explanation:** People do not like the dishes. No dish is prepared.\n\n**Constraints:**\n\n*   `n == satisfaction.length`\n*   `1 <= n <= 500`\n*   `-1000 <= satisfaction[i] <= 1000`Use dynamic programming to find the optimal solution by saving the previous best like-time coefficient and its corresponding element sum. If adding the current element to the previous best like-time coefficient and its corresponding element sum would increase the best like-time coefficient, then go ahead and add it. Otherwise, keep the previous best like-time coefficient.",
          "output": "def countSquares(matrix: List[List[int]]) -> int:\n    m, n, ans = len(matrix), len(matrix[0]), 0\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = matrix[i][j]\n            elif matrix[i][j]:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n            ans += dp[i][j]\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` `grid`. Each cell of `grid` represents a street. The street of `grid[i][j]` can be:\n\n*   `1` which means a street connecting the left cell and the right cell.\n*   `2` which means a street connecting the upper cell and the lower cell.\n*   `3` which means a street connecting the left cell and the lower cell.\n*   `4` which means a street connecting the right cell and the lower cell.\n*   `5` which means a street connecting the left cell and the upper cell.\n*   `6` which means a street connecting the right cell and the upper cell.\n\nYou will initially start at the street of the upper-left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)`. **The path should only follow the streets**.\n\n**Notice** that you are **not allowed** to change any street.\n\nReturn `true` _if there is a valid path in the grid or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[2,4,3\\],\\[6,5,2\\]\\]\n**Output:** true\n**Explanation:** As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,2,1\\],\\[1,2,1\\]\\]\n**Output:** false\n**Explanation:** As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,2\\]\\]\n**Output:** false\n**Explanation:** You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 300`\n*   `1 <= grid[i][j] <= 6`Start DFS from the node (0, 0) and follow the path till you stop. When you reach a cell and cannot move anymore check that this cell is (m - 1, n - 1) or not.",
          "output": "def hasValidPath(grid):\n    m, n = len(grid), len(grid[0])\n\n    directions = [(0, -1), (-1, 0), (0, 1), (1, 0)]\n    allowed = [[], [0, 2], [1, 3], [0, 1], [0, 3], [1, 2], [1, 0]]\n\n    visited = [[False] * n for _ in range(m)]\n\n    def dfs(i, j):\n        if i == m - 1 and j == n - 1:\n            return True\n\n        visited[i][j] = True\n        for dir in allowed[grid[i][j]]:\n            x, y = i + directions[dir][0], j + directions[dir][1]\n            if 0 <= x < m and 0 <= y < n and not visited[x][y] and (dir + 2) % 4 in allowed[grid[x][y]]:\n                if dfs(x, y):\n                    return True\n        return False\n\n    return dfs(0, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, a **lucky integer** is an integer that has a frequency in the array equal to its value.\n\nReturn _the largest **lucky integer** in the array_. If there is no **lucky integer** return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,2,3,4\\]\n**Output:** 2\n**Explanation:** The only lucky number in the array is 2 because frequency\\[2\\] == 2.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,2,3,3,3\\]\n**Output:** 3\n**Explanation:** 1, 2 and 3 are all lucky numbers, return the largest of them.\n\n**Example 3:**\n\n**Input:** arr = \\[2,2,2,3,3\\]\n**Output:** -1\n**Explanation:** There are no lucky numbers in the array.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 500`\n*   `1 <= arr[i] <= 500`Count the frequency of each integer in the array. Get all lucky numbers and return the largest of them.",
          "output": "def find_lucky(arr):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    max_lucky = -1\n    for num, count in freq.items():\n        if num == count:\n            max_lucky = max(max_lucky, num)\n    return max_lucky\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` soldiers standing in a line. Each soldier is assigned a **unique** `rating` value.\n\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\n*   Choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).\n*   A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n\n",
          "input": "**Example 1:**\n\n**Input:** rating = \\[2,5,3,4,1\\]\n**Output:** 3\n**Explanation:** We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n\n**Example 2:**\n\n**Input:** rating = \\[2,1,3\\]\n**Output:** 0\n**Explanation:** We can't form any team given the conditions.\n\n**Example 3:**\n\n**Input:** rating = \\[1,2,3,4\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `n == rating.length`\n*   `3 <= n <= 1000`\n*   `1 <= rating[i] <= 105`\n*   All the integers in `rating` are **unique**.\n\nIn one second, you can either: - Move vertically by one unit, - Move horizontally by one unit, or - Move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in one second). You have to visit the points in the same order as they appear in the array. You are allowed to pass through points, but they do not count as visited unless you stop on them.BruteForce, check all possibilities.",
          "output": "def minTimeToVisitAllPoints(points: List[List[int]]) -> int:\n    time = 0\n    for i in range(1, len(points)):\n        dx = abs(points[i][0] - points[i-1][0])\n        dy = abs(points[i][1] - points[i-1][1])\n        time += max(dx, dy)\n    return time\n"
     },
     {
          "instruction": "Write python code for this problem: An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\n\nImplement the `UndergroundSystem` class:\n\n*   `void checkIn(int id, string stationName, int t)`\n    *   A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.\n    *   A customer can only be checked into one place at a time.\n*   `void checkOut(int id, string stationName, int t)`\n    *   A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.\n*   `double getAverageTime(string startStation, string endStation)`\n    *   Returns the average time it takes to travel from `startStation` to `endStation`.\n    *   The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened **directly**, meaning a check in at `startStation` followed by a check out from `endStation`.\n    *   The time it takes to travel from `startStation` to `endStation` **may be different** from the time it takes to travel from `endStation` to `startStation`.\n    *   There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.\n\nYou may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"UndergroundSystem \", \"checkIn \", \"checkIn \", \"checkIn \", \"checkOut \", \"checkOut \", \"checkOut \", \"getAverageTime \", \"getAverageTime \", \"checkIn \", \"getAverageTime \", \"checkOut \", \"getAverageTime \"\\]\n\\[\\[\\],\\[45, \"Leyton \",3\\],\\[32, \"Paradise \",8\\],\\[27, \"Leyton \",10\\],\\[45, \"Waterloo \",15\\],\\[27, \"Waterloo \",20\\],\\[32, \"Cambridge \",22\\],\\[ \"Paradise \", \"Cambridge \"\\],\\[ \"Leyton \", \"Waterloo \"\\],\\[10, \"Leyton \",24\\],\\[ \"Leyton \", \"Waterloo \"\\],\\[10, \"Waterloo \",38\\],\\[ \"Leyton \", \"Waterloo \"\\]\\]\n\n**Output**\n\\[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000\\]\n\n**Explanation**\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45,  \"Leyton \", 3);\nundergroundSystem.checkIn(32,  \"Paradise \", 8);\nundergroundSystem.checkIn(27,  \"Leyton \", 10);\nundergroundSystem.checkOut(45,  \"Waterloo \", 15);  // Customer 45  \"Leyton \" ->  \"Waterloo \" in 15-3 = 12\nundergroundSystem.checkOut(27,  \"Waterloo \", 20);  // Customer 27  \"Leyton \" ->  \"Waterloo \" in 20-10 = 10\nundergroundSystem.checkOut(32,  \"Cambridge \", 22); // Customer 32  \"Paradise \" ->  \"Cambridge \" in 22-8 = 14\nundergroundSystem.getAverageTime( \"Paradise \",  \"Cambridge \"); // return 14.00000. One trip  \"Paradise \" ->  \"Cambridge \", (14) / 1 = 14\nundergroundSystem.getAverageTime( \"Leyton \",  \"Waterloo \");    // return 11.00000. Two trips  \"Leyton \" ->  \"Waterloo \", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10,  \"Leyton \", 24);\nundergroundSystem.getAverageTime( \"Leyton \",  \"Waterloo \");    // return 11.00000\nundergroundSystem.checkOut(10,  \"Waterloo \", 38);  // Customer 10  \"Leyton \" ->  \"Waterloo \" in 38-24 = 14\nundergroundSystem.getAverageTime( \"Leyton \",  \"Waterloo \");    // return 12.00000. Three trips  \"Leyton \" ->  \"Waterloo \", (10 + 12 + 14) / 3 = 12\n\n**Example 2:**\n\n**Input**\n\\[ \"UndergroundSystem \", \"checkIn \", \"checkOut \", \"getAverageTime \", \"checkIn \", \"checkOut \", \"getAverageTime \", \"checkIn \", \"checkOut \", \"getAverageTime \"\\]\n\\[\\[\\],\\[10, \"Leyton \",3\\],\\[10, \"Paradise \",8\\],\\[ \"Leyton \", \"Paradise \"\\],\\[5, \"Leyton \",10\\],\\[5, \"Paradise \",16\\],\\[ \"Leyton \", \"Paradise \"\\],\\[2, \"Leyton \",21\\],\\[2, \"Paradise \",30\\],\\[ \"Leyton \", \"Paradise \"\\]\\]\n\n**Output**\n\\[null,null,null,5.00000,null,null,5.50000,null,null,6.66667\\]\n\n**Explanation**\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10,  \"Leyton \", 3);\nundergroundSystem.checkOut(10,  \"Paradise \", 8); // Customer 10  \"Leyton \" ->  \"Paradise \" in 8-3 = 5\nundergroundSystem.getAverageTime( \"Leyton \",  \"Paradise \"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5,  \"Leyton \", 10);\nundergroundSystem.checkOut(5,  \"Paradise \", 16); // Customer 5  \"Leyton \" ->  \"Paradise \" in 16-10 = 6\nundergroundSystem.getAverageTime( \"Leyton \",  \"Paradise \"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2,  \"Leyton \", 21);\nundergroundSystem.checkOut(2,  \"Paradise \", 30); // Customer 2  \"Leyton \" ->  \"Paradise \" in 30-21 = 9\nundergroundSystem.getAverageTime( \"Leyton \",  \"Paradise \"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667\n\n**Constraints:**\n\n*   `1 <= id, t <= 106`\n*   `1 <= stationName.length, startStation.length, endStation.length <= 10`\n*   All strings consist of uppercase and lowercase English letters and digits.\n*   There will be at most `2 * 104` calls **in total** to `checkIn`, `checkOut`, and `getAverageTime`.\n*   Answers within `10-5` of the actual value will be accepted.Use two hash tables. The first to save the check-in time for a customer and the second to update the total time between two stations.",
          "output": "class UndergroundSystem:\n\n    def __init__(self):\n        self.check_in_info = dict()\n        self.journey_data = dict()\n\n    def check_in(self, id: int, station_name: str, t: int) -> None:\n        self.check_in_info[id] = (station_name, t)\n\n    def check_out(self, id: int, station_name: str, t: int) -> None:\n        start_station, start_time = self.check_in_info[id]\n        route = (start_station, station_name)\n        duration = t - start_time\n        if route not in self.journey_data:\n            self.journey_data[route] = (0, 0)\n        prev_duration, count = self.journey_data[route]\n        self.journey_data[route] = (prev_duration + duration, count + 1)\n\n    def get_average_time(self, start_station: str, end_station: str) -> float:\n        route = (start_station, end_station)\n        duration, count = self.journey_data[route]\n        return duration / count\n"
     },
     {
          "instruction": "Write python code for this problem: Given the strings `s1` and `s2` of size `n` and the string `evil`, return _the number of **good** strings_.\n\nA **good** string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, s1 =  \"aa \", s2 =  \"da \", evil =  \"b \"\n**Output:** 51 \n**Explanation:** There are 25 good strings starting with 'a':  \"aa \", \"ac \", \"ad \",..., \"az \". Then there are 25 good strings starting with 'c':  \"ca \", \"cc \", \"cd \",..., \"cz \" and finally there is one good string starting with 'd':  \"da \". \n\n**Example 2:**\n\n**Input:** n = 8, s1 =  \"leetcode \", s2 =  \"leetgoes \", evil =  \"leet \"\n**Output:** 0 \n**Explanation:** All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix  \"leet \", therefore, there is not any good string.\n\n**Example 3:**\n\n**Input:** n = 2, s1 =  \"gx \", s2 =  \"gz \", evil =  \"x \"\n**Output:** 2\n\n**Constraints:**\n\n*   `s1.length == n`\n*   `s2.length == n`\n*   `s1 <= s2`\n*   `1 <= n <= 500`\n*   `1 <= evil.length <= 50`\n*   All strings consist of lowercase English letters.Use DP with 4 states (pos: Int, posEvil: Int, equalToS1: Bool, equalToS2: Bool) which compute the number of valid strings of size \"pos\" where the maximum common suffix with string \"evil\" has size \"posEvil\". When \"equalToS1\" is \"true\", the current valid string is equal to \"S1\" otherwise it is greater. In a similar way when equalToS2 is \"true\" the current valid string is equal to \"S2\" otherwise it is smaller. To update the maximum common suffix with string \"evil\" use KMP preprocessing.",
          "output": "from bisect import bisect_left\n\ndef suggestedProducts(products, searchWord):\n    products.sort()\n    result = []\n    current_prefix = \"\"\n    \n    for letter in searchWord:\n        current_prefix += letter\n        index = bisect_left(products, current_prefix)\n        suggestions = []\n        \n        for i in range(3):\n            if index < len(products) and products[index].startswith(current_prefix):\n                suggestions.append(products[index])\n                index += 1\n            else:\n                break\n        \n        result.append(suggestions)\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums`, you start with an initial **positive** value _startValue__._\n\nIn each iteration, you calculate the step by step sum of _startValue_ plus elements in `nums` (from left to right).\n\nReturn the minimum **positive** value of _startValue_ such that the step by step sum is never less than 1.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-3,2,-3,4,2\\]\n**Output:** 5\n**Explanation:** If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\n**step by step sum**\n**startValue = 4 | startValue = 5 | nums**\n  (4 **\\-3** ) = 1  | (5 **\\-3** ) = 2    |  -3\n  (1 **+2** ) = 3  | (2 **+2** ) = 4    |   2\n  (3 **\\-3** ) = 0  | (4 **\\-3** ) = 1    |  -3\n  (0 **+4** ) = 4  | (1 **+4** ) = 5    |   4\n  (4 **+2** ) = 6  | (5 **+2** ) = 7    |   2\n\n**Example 2:**\n\n**Input:** nums = \\[1,2\\]\n**Output:** 1\n**Explanation:** Minimum start value should be positive. \n\n**Example 3:**\n\n**Input:** nums = \\[1,-2,-3\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-100 <= nums[i] <= 100`Find the minimum prefix sum.",
          "output": "def maxSideLength(mat, threshold):\n    m, n = len(mat), len(mat[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    ans = 0\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = mat[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1]\n            k = ans + 1\n            if i >= k and j >= k and dp[i][j] - dp[i][j - k] - dp[i - k][j] + dp[i - k][j - k] <= threshold:\n                ans += 1\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `k`, _return the minimum number of Fibonacci numbers whose sum is equal to_ `k`. The same Fibonacci number can be used multiple times.\n\nThe Fibonacci numbers are defined as:\n\n*   `F1 = 1`\n*   `F2 = 1`\n*   `Fn = Fn-1 + Fn-2` for `n > 2.`\n\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 7\n**Output:** 2 \n**Explanation:** The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7.\n\n**Example 2:**\n\n**Input:** k = 10\n**Output:** 2 \n**Explanation:** For k = 10 we can use 2 + 8 = 10.\n\n**Example 3:**\n\n**Input:** k = 19\n**Output:** 3 \n**Explanation:** For k = 19 we can use 1 + 5 + 13 = 19.\n\n**Constraints:**\n\n*   `1 <= k <= 109`Generate all Fibonacci numbers up to the limit (they are few). Use greedy solution, taking at every time the greatest Fibonacci number which is smaller than or equal to the current number. Subtract this Fibonacci number from the current number and repeat again the process.",
          "output": "from collections import deque\n\ndef shortestPath(grid, k):\n    m, n = len(grid), len(grid[0])\n    queue = deque([(0, 0, 0, k)])\n    visited = [[[False] * (k + 1) for _ in range(n)] for _ in range(m)]\n\n    while queue:\n        x, y, step, remaining_k = queue.popleft()\n\n        if x == m - 1 and y == n - 1:\n            return step\n        if visited[x][y][remaining_k]:\n            continue\n        visited[x][y][remaining_k] = True\n\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n\n            if 0 <= nx < m and 0 <= ny < n:\n                if grid[nx][ny] == 1 and remaining_k > 0:\n                    queue.append((nx, ny, step + 1, remaining_k - 1))\n                elif grid[nx][ny] == 0:\n                    queue.append((nx, ny, step + 1, remaining_k))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: A **happy string** is a string that:\n\n*   consists only of letters of the set `['a', 'b', 'c']`.\n*   `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).\n\nFor example, strings **\"abc \", \"ac \", \"b \"** and **\"abcbabcbcb \"** are all happy strings and strings **\"aa \", \"baa \"** and **\"ababbc \"** are not happy strings.\n\nGiven two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.\n\nReturn _the kth string_ of this list or return an **empty string** if there are less than `k` happy strings of length `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1, k = 3\n**Output:**  \"c \"\n**Explanation:** The list \\[ \"a \",  \"b \",  \"c \"\\] contains all happy strings of length 1. The third string is  \"c \".\n\n**Example 2:**\n\n**Input:** n = 1, k = 4\n**Output:**  \" \"\n**Explanation:** There are only 3 happy strings of length 1.\n\n**Example 3:**\n\n**Input:** n = 3, k = 9\n**Output:**  \"cab \"\n**Explanation:** There are 12 different happy string of length 3 \\[ \"aba \",  \"abc \",  \"aca \",  \"acb \",  \"bab \",  \"bac \",  \"bca \",  \"bcb \",  \"cab \",  \"cac \",  \"cba \",  \"cbc \"\\]. You will find the 9th string =  \"cab \"\n\n**Constraints:**\n\n*   `1 <= n <= 10`\n*   `1 <= k <= 100`Generate recursively all the happy strings of length n. Sort them in lexicographical order and return the kth string if it exists.",
          "output": "class Solution:\n    def generate_strings(self, n: int, current: str, strings: list) -> None:\n        if n == 0:\n            strings.append(current)\n            return\n        for c in \"abc\":\n            if not current or current[-1] != c:\n                self.generate_strings(n - 1, current + c, strings)\n\n    def getHappyString(self, n: int, k: int) -> str:\n        strings = []\n        self.generate_strings(n, \"\", strings)\n        return strings[k - 1] if k <= len(strings) else \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits `s` and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array.\n\nGiven the string `s` and the integer `k`, return _the number of the possible arrays that can be printed as_ `s` _using the mentioned program_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1000 \", k = 10000\n**Output:** 1\n**Explanation:** The only possible array is \\[1000\\]\n\n**Example 2:**\n\n**Input:** s =  \"1000 \", k = 10\n**Output:** 0\n**Explanation:** There cannot be an array that was printed this way and has all integer >= 1 and <= 10.\n\n**Example 3:**\n\n**Input:** s =  \"1317 \", k = 2000\n**Output:** 8\n**Explanation:** Possible arrays are \\[1317\\],\\[131,7\\],\\[13,17\\],\\[1,317\\],\\[13,1,7\\],\\[1,31,7\\],\\[1,3,17\\],\\[1,3,1,7\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of only digits and does not contain leading zeros.\n*   `1 <= k <= 109`Use dynamic programming. Build an array dp where dp[i] is the number of ways you can divide the string starting from index i to the end. Keep in mind that the answer is modulo 10^9 + 7 and take the mod for each operation.",
          "output": "def numDecodings(s: str, k: int) -> int:\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[n] = 1\n    MOD = 1000000007\n\n    for i in range(n - 1, -1, -1):\n        num = 0\n        for j in range(i, n):\n            num = num * 10 + int(s[j])\n            if num >= 1 and num <= k:\n                dp[i] = (dp[i] + dp[j + 1]) % MOD\n            if num > k:\n                break\n\n    return dp[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `nums`, obtain a subsequence of the array whose sum of elements is **strictly greater** than the sum of the non included elements in such subsequence.\n\nIf there are multiple solutions, return the subsequence with **minimum size** and if there still exist multiple solutions, return the subsequence with the **maximum total sum** of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\n\nNote that the solution with the given constraints is guaranteed to be **unique**. Also return the answer sorted in **non-increasing** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,3,10,9,8\\]\n**Output:** \\[10,9\\] \n**Explanation:** The subsequences \\[10,9\\] and \\[10,8\\] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence \\[10,9\\] has the maximum total sum of its elements. \n\n**Example 2:**\n\n**Input:** nums = \\[4,4,7,6,7\\]\n**Output:** \\[7,7,6\\] \n**Explanation:** The subsequence \\[7,7\\] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence \\[7,6,7\\] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-decreasing order.  \n\n**Constraints:**\n\n*   `1 <= nums.length <= 500`\n*   `1 <= nums[i] <= 100`Sort elements and take each element from the largest until accomplish the conditions.",
          "output": "def min_changes_to_divide_string(s, k):\n    n = len(s)\n    if n % k != 0:\n        return -1\n    chunk_count = n // k\n    res = 0\n    for i in range(k):\n        counts = [0] * 26\n        for j in range(i, n, k):\n            counts[ord(s[j]) - ord('a')] += 1\n        max_count = max(counts)\n        res += chunk_count - max_count\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given the binary representation of an integer as a string `s`, return _the number of steps to reduce it to_ `1` _under the following rules_:\n\n*   If the current number is even, you have to divide it by `2`.\n    \n*   If the current number is odd, you have to add `1` to it.\n    \n\nIt is guaranteed that you can always reach one for all test cases.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1101 \"\n**Output:** 6\n**Explanation:**  \"1101 \" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14. \nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.  \nStep 5) 4 is even, divide by 2 and obtain 2. \nStep 6) 2 is even, divide by 2 and obtain 1.  \n\n**Example 2:**\n\n**Input:** s =  \"10 \"\n**Output:** 1\n**Explanation:**  \"10 \" corressponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1.  \n\n**Example 3:**\n\n**Input:** s =  \"1 \"\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of characters '0' or '1'\n*   `s[0] == '1'`Read the string from right to left, if the string ends in '0' then the number is even otherwise it is odd. Simulate the steps described in the binary string.",
          "output": "def num_steps(s: str) -> int:\n    steps = 0\n    carry = 0\n    \n    for c in reversed(s[1:]):\n        bit = int(c)\n        if bit and carry:\n            carry = 1\n            steps += 2\n        elif bit or carry:\n            carry ^= 1\n            steps += 2\n        else:\n            steps += 1\n            \n    return steps + carry\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob continue their games with piles of stones. There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take `1`, `2`, or `3` stones from the **first** remaining stones in the row.\n\nThe score of each player is the sum of the values of the stones taken. The score of each player is `0` initially.\n\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\n\nAssume Alice and Bob **play optimally**.\n\nReturn `\"Alice \"` _if Alice will win,_ `\"Bob \"` _if Bob will win, or_ `\"Tie \"` _if they will end the game with the same score_.\n\n",
          "input": "**Example 1:**\n\n**Input:** values = \\[1,2,3,7\\]\n**Output:**  \"Bob \"\n**Explanation:** Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.\n\n**Example 2:**\n\n**Input:** values = \\[1,2,3,-9\\]\n**Output:**  \"Alice \"\n**Explanation:** Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win.\n\n**Example 3:**\n\n**Input:** values = \\[1,2,3,6\\]\n**Output:**  \"Tie \"\n**Explanation:** Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.\n\n**Constraints:**\n\n*   `1 <= stoneValue.length <= 5 * 104`\n*   `-1000 <= stoneValue[i] <= 1000`The game can be mapped to minmax game. Alice tries to maximize the total score and Bob tries to minimize it. Use dynamic programming to simulate the game. If the total score was 0 the game is \"Tie\", and if it has positive value then \"Alice\" wins, otherwise \"Bob\" wins.",
          "output": "def stoneGameIII(stoneValue):\n    n = len(stoneValue)\n    dp = [float(\"-inf\")] * (n + 1)\n    dp[n] = 0\n    \n    for i in range(n - 1, -1, -1):\n        curr = 0\n        for j in range(3):\n            if i + j < n:\n                curr += stoneValue[i + j]\n                dp[i] = max(dp[i], curr - dp[i + j + 1])\n                \n    return \"Tie \" if dp[0] == 0 else \"Alice \" if dp[0] > 0 else \"Bob \"\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of string `words`, return _all strings in_ `words` _that is a **substring** of another word_. You can return the answer in **any order**.\n\nA **substring** is a contiguous sequence of characters within a string\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"mass \", \"as \", \"hero \", \"superhero \"\\]\n**Output:** \\[ \"as \", \"hero \"\\]\n**Explanation:**  \"as \" is substring of  \"mass \" and  \"hero \" is substring of  \"superhero \".\n\\[ \"hero \", \"as \"\\] is also a valid answer.\n\n**Example 2:**\n\n**Input:** words = \\[ \"leetcode \", \"et \", \"code \"\\]\n**Output:** \\[ \"et \", \"code \"\\]\n**Explanation:**  \"et \",  \"code \" are substring of  \"leetcode \".\n\n**Example 3:**\n\n**Input:** words = \\[ \"blue \", \"green \", \"bu \"\\]\n**Output:** \\[\\]\n**Explanation:** No string of words is substring of another string.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 30`\n*   `words[i]` contains only lowercase English letters.\n*   All the strings of `words` are **unique**.Bruteforce to find if one string is substring of another or use KMP algorithm.",
          "output": "import math\n\ndef smallest_divisor(nums, threshold):\n    left, right = 1, 10**6\n    while left < right:\n        mid = (left + right) // 2\n        total = sum(math.ceil(n / mid) for n in nums)\n        if total > threshold:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules:\n\n*   In the beginning, you have the permutation `P=[1,2,3,...,m]`.\n*   For the current `i`, find the position of `queries[i]` in the permutation `P` (**indexing from 0**) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.\n\nReturn an array containing the result for the given `queries`.\n\n",
          "input": "**Example 1:**\n\n**Input:** queries = \\[3,1,2,1\\], m = 5\n**Output:** \\[2,1,2,1\\] \n**Explanation:** The queries are processed as follow: \nFor i=0: queries\\[i\\]=3, P=\\[1,2,3,4,5\\], position of 3 in P is **2**, then we move 3 to the beginning of P resulting in P=\\[3,1,2,4,5\\]. \nFor i=1: queries\\[i\\]=1, P=\\[3,1,2,4,5\\], position of 1 in P is **1**, then we move 1 to the beginning of P resulting in P=\\[1,3,2,4,5\\]. \nFor i=2: queries\\[i\\]=2, P=\\[1,3,2,4,5\\], position of 2 in P is **2**, then we move 2 to the beginning of P resulting in P=\\[2,1,3,4,5\\]. \nFor i=3: queries\\[i\\]=1, P=\\[2,1,3,4,5\\], position of 1 in P is **1**, then we move 1 to the beginning of P resulting in P=\\[1,2,3,4,5\\]. \nTherefore, the array containing the result is \\[2,1,2,1\\].  \n\n**Example 2:**\n\n**Input:** queries = \\[4,1,2,2\\], m = 4\n**Output:** \\[3,1,2,0\\]\n\n**Example 3:**\n\n**Input:** queries = \\[7,5,5,8,3\\], m = 8\n**Output:** \\[6,5,0,7,5\\]\n\n**Constraints:**\n\n*   `1 <= m <= 10^3`\n*   `1 <= queries.length <= m`\n*   `1 <= queries[i] <= m`Create the permutation P=[1,2,...,m], it could be a list for example. For each i, find the position of queries[i] with a simple scan over P and then move this to the beginning.",
          "output": "from collections import deque\n\ndef minNumberOfFlips(mat):\n    m, n = len(mat), len(mat[0])\n    steps = 0\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0), (0, 0)]\n\n    def encode(i, j):\n        return i * n + j\n\n    while True:\n        flipped = 0\n        que = deque()\n\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    que.append(encode(i, j))\n\n        while que:\n            cur = que.popleft()\n            cur_i, cur_j = divmod(cur, n)\n\n            for dx, dy in dirs:\n                ni, nj = cur_i + dx, cur_j + dy\n                if 0 <= ni < m and 0 <= nj < n:\n                    mat[ni][nj] ^= 1\n                    flipped += 1\n\n        if flipped == 0:\n            break\n        steps += flipped\n\n    for row in mat:\n        if any(cell == 1 for cell in row):\n            return -1\n\n    return steps\n"
     },
     {
          "instruction": "Write python code for this problem: **HTML entity parser** is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\n\nThe special characters and their entities for HTML are:\n\n*   **Quotation Mark:** the entity is `&quot;` and symbol character is `\"`.\n*   **Single Quote Mark:** the entity is `&apos;` and symbol character is `'`.\n*   **Ampersand:** the entity is `&amp;` and symbol character is `&`.\n*   **Greater Than Sign:** the entity is `&gt;` and symbol character is `>`.\n*   **Less Than Sign:** the entity is `&lt;` and symbol character is `<`.\n*   **Slash:** the entity is `&frasl;` and symbol character is `/`.\n\nGiven the input `text` string to the HTML parser, you have to implement the entity parser.\n\nReturn _the text after replacing the entities by the special characters_.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"&amp; is an HTML entity but &ambassador; is not. \"\n**Output:**  \"& is an HTML entity but &ambassador; is not. \"\n**Explanation:** The parser will replace the &amp; entity by &\n\n**Example 2:**\n\n**Input:** text =  \"and I quote: &quot;...&quot; \"\n**Output:**  \"and I quote: \\\\ \"...\\\\ \" \"\n\n**Constraints:**\n\n*   `1 <= text.length <= 105`\n*   The string may contain any possible characters out of all the 256 ASCII characters.Search the string for all the occurrences of the character '&'. For every '&' check if it matches an HTML entity by checking the ';' character and if entity found replace it in the answer.",
          "output": "def entity_parser(text: str) -> str:\n    entities = {\n        \"&quot;\": \"\\\"\",\n        \"&apos;\": \"'\",\n        \"&amp;\": \"&\",\n        \"&gt;\": \">\",\n        \"&lt;\": \"<\",\n        \"&frasl;\": \"/\",\n    }\n    \n    result = []\n    current_entity = []\n    in_entity = False\n    \n    for c in text:\n        if in_entity:\n            current_entity.append(c)\n            if c == ';':\n                entity = ''.join(current_entity)\n                if entity in entities:\n                    result.append(entities[entity])\n                else:\n                    result.extend(current_entity)\n                in_entity = False\n                current_entity.clear()\n        else:\n            if c == '&':\n                in_entity = True\n                current_entity.append(c)\n            else:\n                result.append(c)\n\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: **Red**, **Yellow,** or **Green** while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\n\nGiven `n` the number of rows of the grid, return _the number of ways_ you can paint this `grid`. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 12\n**Explanation:** There are 12 possible way to paint the grid as shown.\n\n**Example 2:**\n\n**Input:** n = 5000\n**Output:** 30228214\n\n**Constraints:**\n\n*   `n == grid.length`\n*   `1 <= n <= 5000`We will use Dynamic programming approach. we will try all possible configuration. Let dp[idx][prev1col][prev2col][prev3col] be the number of ways to color the rows of the grid from idx to n-1 keeping in mind that the previous row (idx - 1) has colors prev1col, prev2col and prev3col. Build the dp array to get the answer.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef getDecimalValue(head: ListNode) -> int:\n    num = 0\n    while head:\n        num = (num << 1) | head.val\n        head = head.next\n    return num\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` kids with candies. You are given an integer array `candies`, where each `candies[i]` represents the number of candies the `ith` kid has, and an integer `extraCandies`, denoting the number of extra candies that you have.\n\nReturn _a boolean array_ `result` _of length_ `n`_, where_ `result[i]` _is_ `true` _if, after giving the_ `ith` _kid all the_ `extraCandies`_, they will have the **greatest** number of candies among all the kids__, or_ `false` _otherwise_.\n\nNote that **multiple** kids can have the **greatest** number of candies.\n\n",
          "input": "**Example 1:**\n\n**Input:** candies = \\[2,3,5,1,3\\], extraCandies = 3\n**Output:** \\[true,true,true,false,true\\] \n**Explanation:** If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n\n**Example 2:**\n\n**Input:** candies = \\[4,2,1,1,2\\], extraCandies = 1\n**Output:** \\[true,false,false,false,false\\] \n**Explanation:** There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n\n**Example 3:**\n\n**Input:** candies = \\[12,1,12\\], extraCandies = 10\n**Output:** \\[true,false,true\\]\n\n**Constraints:**\n\n*   `n == candies.length`\n*   `2 <= n <= 100`\n*   `1 <= candies[i] <= 100`\n*   `1 <= extraCandies <= 50`Use greedy approach. For each kid check if candies[i] + extraCandies \u2265 maximum in Candies[i].",
          "output": "from collections import defaultdict\n\ndef find_ancestors(node, adj_list, visited, ans):\n    if visited[node]:\n        return\n    visited[node] = True\n    for ancestor in adj_list[node]:\n        ans.append(ancestor)\n        find_ancestors(ancestor, adj_list, visited, ans)\n\ndef find_ancestors_in_dag(n, edges):\n    adj_list = defaultdict(list)\n    for edge in edges:\n        adj_list[edge[1]].append(edge[0])\n    ans = []\n    for i in range(n):\n        visited = [False] * n\n        ancestors = []\n        find_ancestors(i, adj_list, visited, ancestors)\n        ans.append(sorted(ancestors))\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `num`. You will apply the following steps exactly **two** times:\n\n*   Pick a digit `x (0 <= x <= 9)`.\n*   Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n*   Replace all the occurrences of `x` in the decimal representation of `num` by `y`.\n*   The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0.\n\nLet `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.\n\nReturn _the max difference_ between `a` and `b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 555\n**Output:** 888\n**Explanation:** The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888\n\n**Example 2:**\n\n**Input:** num = 9\n**Output:** 8\n**Explanation:** The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8\n\n**Constraints:**\n\n*   `1 <= num <= 10`8We need to get the max and min value after changing num and the answer is max - min. Use brute force, try all possible changes and keep the minimum and maximum values.",
          "output": "def max_diff(num):\n    a, b = -1, -1\n    num_str = str(num)\n    for c in num_str:\n        if a == -1 and c != '9':\n            a = int(c)\n        if b == -1 and c > '1':\n            b = int(c)\n        if a != -1 and b != -1:\n            break\n            \n    result = 0\n    for c in num_str:\n        if int(c) == a:\n            result = result * 10 + 9\n        elif int(c) == b:\n            result = result * 10 + (1 if c == num_str[0] else 0)\n        else:\n            result = result * 10 + int(c)\n    return result - num\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.\n\nA string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"abc \", s2 =  \"xya \"\n**Output:** true\n**Explanation:**  \"ayx \" is a permutation of s2= \"xya \" which can break to string  \"abc \" which is a permutation of s1= \"abc \".\n\n**Example 2:**\n\n**Input:** s1 =  \"abe \", s2 =  \"acd \"\n**Output:** false \n**Explanation:** All permutations for s1= \"abe \" are:  \"abe \",  \"aeb \",  \"bae \",  \"bea \",  \"eab \" and  \"eba \" and all permutation for s2= \"acd \" are:  \"acd \",  \"adc \",  \"cad \",  \"cda \",  \"dac \" and  \"dca \". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n\n**Example 3:**\n\n**Input:** s1 =  \"leetcodee \", s2 =  \"interview \"\n**Output:** true\n\n**Constraints:**\n\n*   `s1.length == n`\n*   `s2.length == n`\n*   `1 <= n <= 10^5`\n*   All strings consist of lowercase English letters.Sort both strings and then check if one of them can break the other.",
          "output": "class Encrypter:\n    def __init__(self, keys, values, dictionary):\n        self.encrypt_map = dict(zip(keys, values))\n        self.decrypt_map = dict(zip(values, keys))\n        self.dictionary = set(dictionary)\n    \n    def encrypt(self, original):\n        result = []\n        for c in original:\n            if c not in self.encrypt_map:\n                return \"\"\n            result.append(self.encrypt_map[c])\n        return \"\".join(result)\n\n    def decrypt(self, encrypted):\n        result = []\n        for i in range(0, len(encrypted), 2):\n            temp = encrypted[i:i+2]\n            if temp not in self.decrypt_map:\n                return \"\"\n            result.append(self.decrypt_map[temp])\n        \n        decrypted = \"\".join(result)\n        if decrypted not in self.dictionary:\n            return \"\"\n        return decrypted\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` people and `40` types of hats labeled from `1` to `40`.\n\nGiven a 2D integer array `hats`, where `hats[i]` is a list of all hats preferred by the `ith` person.\n\nReturn _the number of ways that the `n` people wear different hats to each other_.\n\nSince the answer may be too large, return it modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** hats = \\[\\[3,4\\],\\[4,5\\],\\[5\\]\\]\n**Output:** 1\n**Explanation:** There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.\n\n**Example 2:**\n\n**Input:** hats = \\[\\[3,5,1\\],\\[3,5\\]\\]\n**Output:** 4\n**Explanation:** There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)\n\n**Example 3:**\n\n**Input:** hats = \\[\\[1,2,3,4\\],\\[1,2,3,4\\],\\[1,2,3,4\\],\\[1,2,3,4\\]\\]\n**Output:** 24\n**Explanation:** Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24.\n\n**Constraints:**\n\n*   `n == hats.length`\n*   `1 <= n <= 10`\n*   `1 <= hats[i].length <= 40`\n*   `1 <= hats[i][j] <= 40`\n*   `hats[i]` contains a list of **unique** integers.Dynamic programming + bitmask. dp(peopleMask, idHat) number of ways to wear different hats given a bitmask (people visited) and used hats from 1 to idHat-1.",
          "output": "def freqAlphabets(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if i + 2 < len(s) and s[i + 2] == '#':\n            result.append(chr(ord('a') + int(s[i:i + 2]) - 1))\n            i += 3\n        else:\n            result.append(chr(ord('a') + int(s[i]) - 1))\n            i += 1\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an alphanumeric string `s`. (**Alphanumeric string** is a string consisting of lowercase English letters and digits).\n\nYou have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.\n\nReturn _the reformatted string_ or return **an empty string** if it is impossible to reformat the string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"a0b1c2 \"\n**Output:**  \"0a1b2c \"\n**Explanation:** No two adjacent characters have the same type in  \"0a1b2c \".  \"a0b1c2 \",  \"0a1b2c \",  \"0c2a1b \" are also valid permutations.\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \"\n**Output:**  \" \"\n**Explanation:**  \"leetcode \" has only characters so we cannot separate them by digits.\n\n**Example 3:**\n\n**Input:** s =  \"1229857369 \"\n**Output:**  \" \"\n**Explanation:**  \"1229857369 \" has only digits so we cannot separate them by characters.\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters and/or digits.Count the number of letters and digits in the string. if cntLetters - cntDigits has any of the values [-1, 0, 1] we have an answer, otherwise we don't have any answer. Build the string anyway as you wish. Keep in mind that you need to start with the type that have more characters if cntLetters \u2260 cntDigits.",
          "output": "from collections import deque\n\ndef reformat(s: str) -> str:\n    letters, digits = deque(), deque()\n\n    for c in s:\n        if c.isalpha():\n            letters.append(c)\n        else:\n            digits.append(c)\n\n    if abs(len(letters) - len(digits)) > 1:\n        return \"\"\n\n    result = []\n    use_letter = len(letters) > len(digits)\n\n    while letters or digits:\n        if use_letter:\n            result.append(letters.popleft())\n        else:\n            result.append(digits.popleft())\n        use_letter = not use_letter\n\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `orders`, which represents the orders that customers have done in a restaurant. More specifically `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table customer sit at, and `foodItemi` is the item customer orders.\n\n_Return the restaurant's \"**display table**\"_. The \"**display table**\" is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \"Table\", followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.\n\n",
          "input": "**Example 1:**\n\n**Input:** orders = \\[\\[ \"David \", \"3 \", \"Ceviche \"\\],\\[ \"Corina \", \"10 \", \"Beef Burrito \"\\],\\[ \"David \", \"3 \", \"Fried Chicken \"\\],\\[ \"Carla \", \"5 \", \"Water \"\\],\\[ \"Carla \", \"5 \", \"Ceviche \"\\],\\[ \"Rous \", \"3 \", \"Ceviche \"\\]\\]\n**Output:** \\[\\[ \"Table \", \"Beef Burrito \", \"Ceviche \", \"Fried Chicken \", \"Water \"\\],\\[ \"3 \", \"0 \", \"2 \", \"1 \", \"0 \"\\],\\[ \"5 \", \"0 \", \"1 \", \"0 \", \"1 \"\\],\\[ \"10 \", \"1 \", \"0 \", \"0 \", \"0 \"\\]\\] \n**Explanation:**\nThe displaying table looks like:\n**Table,Beef Burrito,Ceviche,Fried Chicken,Water**\n3    ,0           ,2      ,1            ,0\n5    ,0           ,1      ,0            ,1\n10   ,1           ,0      ,0            ,0\nFor the table 3: David orders  \"Ceviche \" and  \"Fried Chicken \", and Rous orders  \"Ceviche \".\nFor the table 5: Carla orders  \"Water \" and  \"Ceviche \".\nFor the table 10: Corina orders  \"Beef Burrito \". \n\n**Example 2:**\n\n**Input:** orders = \\[\\[ \"James \", \"12 \", \"Fried Chicken \"\\],\\[ \"Ratesh \", \"12 \", \"Fried Chicken \"\\],\\[ \"Amadeus \", \"12 \", \"Fried Chicken \"\\],\\[ \"Adam \", \"1 \", \"Canadian Waffles \"\\],\\[ \"Brianna \", \"1 \", \"Canadian Waffles \"\\]\\]\n**Output:** \\[\\[ \"Table \", \"Canadian Waffles \", \"Fried Chicken \"\\],\\[ \"1 \", \"2 \", \"0 \"\\],\\[ \"12 \", \"0 \", \"3 \"\\]\\] \n**Explanation:** \nFor the table 1: Adam and Brianna order  \"Canadian Waffles \".\nFor the table 12: James, Ratesh and Amadeus order  \"Fried Chicken \".\n\n**Example 3:**\n\n**Input:** orders = \\[\\[ \"Laura \", \"2 \", \"Bean Burrito \"\\],\\[ \"Jhon \", \"2 \", \"Beef Burrito \"\\],\\[ \"Melissa \", \"2 \", \"Soda \"\\]\\]\n**Output:** \\[\\[ \"Table \", \"Bean Burrito \", \"Beef Burrito \", \"Soda \"\\],\\[ \"2 \", \"1 \", \"1 \", \"1 \"\\]\\]\n\n**Constraints:**\n\n*   `1 <= orders.length <= 5 * 10^4`\n*   `orders[i].length == 3`\n*   `1 <= customerNamei.length, foodItemi.length <= 20`\n*   `customerNamei` and `foodItemi` consist of lowercase and uppercase English letters and the space character.\n*   `tableNumberi` is a valid integer between `1` and `500`.Keep the frequency of all pairs (tableNumber, foodItem) using a hashmap. Sort rows by tableNumber and columns by foodItem, then process the resulted table.",
          "output": "from collections import defaultdict\nfrom typing import List\n\ndef displayTable(orders: List[List[str]]) -> List[List[str]]:\n    tables = defaultdict(lambda: defaultdict(int))\n    foodSet = set()\n\n    for order in orders:\n        tableNumber = int(order[1])\n        foodItem = order[2]\n        tables[tableNumber][foodItem] += 1\n        foodSet.add(foodItem)\n\n    foodList = sorted(foodSet)\n    result = [[\"Table\"] + foodList]\n\n    for tableNumber, table in sorted(tables.items()):\n        row = [str(tableNumber)]\n        row.extend(str(table[foodItem]) for foodItem in foodList)\n        result.append(row)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the string `croakOfFrogs`, which represents a combination of the string `\"croak \"` from different frogs, that is, multiple frogs can croak at the same time, so multiple `\"croak \"` are mixed.\n\n_Return the minimum number of_ different _frogs to finish all the croaks in the given string._\n\nA valid `\"croak \"` means a frog is printing five letters `'c'`, `'r'`, `'o'`, `'a'`, and `'k'` **sequentially**. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid `\"croak \"` return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** croakOfFrogs =  \"croakcroak \"\n**Output:** 1 \n**Explanation:** One frog yelling  \"croak **\"** twice.\n\n**Example 2:**\n\n**Input:** croakOfFrogs =  \"crcoakroak \"\n**Output:** 2 \n**Explanation:** The minimum number of frogs is two. \nThe first frog could yell  \"**cr**c**oak**roak \".\nThe second frog could yell later  \"cr**c**oak**roak** \".\n\n**Example 3:**\n\n**Input:** croakOfFrogs =  \"croakcrook \"\n**Output:** -1\n**Explanation:** The given string is an invalid combination of  \"croak **\"** from different frogs.\n\n**Constraints:**\n\n*   `1 <= croakOfFrogs.length <= 105`\n*   `croakOfFrogs` is either `'c'`, `'r'`, `'o'`, `'a'`, or `'k'`.keep the frequency of all characters from \"croak\" using a hashmap. For each character in the given string, greedily match it to a possible \"croak\".",
          "output": "def minNumberOfFrogs(croakOfFrogs: str) -> int:\n    counter = [0] * 5\n    frogs = max_frogs = 0\n    for ch in croakOfFrogs:\n        idx = 'croak'.index(ch)\n        counter[idx] += 1\n        if idx == 0:\n            max_frogs = max(max_frogs, frogs + 1)\n            frogs += 1\n        else:\n            counter[idx - 1] -= 1\n            if counter[idx - 1] < 0:\n                return -1\n            if idx == 4:\n                frogs -= 1\n    return max_frogs if all(count == counter[0] for count in counter) else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:\n\nYou should build the array arr which has the following properties:\n\n*   `arr` has exactly `n` integers.\n*   `1 <= arr[i] <= m` where `(0 <= i < n)`.\n*   After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.\n\nReturn _the number of ways_ to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, m = 3, k = 1\n**Output:** 6\n**Explanation:** The possible arrays are \\[1, 1\\], \\[2, 1\\], \\[2, 2\\], \\[3, 1\\], \\[3, 2\\] \\[3, 3\\]\n\n**Example 2:**\n\n**Input:** n = 5, m = 2, k = 3\n**Output:** 0\n**Explanation:** There are no possible arrays that satisify the mentioned conditions.\n\n**Example 3:**\n\n**Input:** n = 9, m = 1, k = 1\n**Output:** 1\n**Explanation:** The only possible array is \\[1, 1, 1, 1, 1, 1, 1, 1, 1\\]\n\n**Constraints:**\n\n*   `1 <= n <= 50`\n*   `1 <= m <= 100`\n*   `0 <= k <= n`Use dynamic programming approach. Build dp table where dp[a][b][c] is the number of ways you can start building the array starting from index a where the search_cost = c and the maximum used integer was b. Recursively, solve the small sub-problems first. Optimize your answer by stopping the search if you exceeded k changes.",
          "output": "def waysToBuildArray(n, m, k):\n    mod = 10**9 + 7\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            for x in range(1, m+1):\n                if j < i * (x-1):\n                    dp[i][j] = (dp[i][j] + dp[i-1][j-(i-1)*(x-1)]) % mod\n    return dp[n][k]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` of zeros and ones, _return the maximum score after splitting the string into two **non-empty** substrings_ (i.e. **left** substring and **right** substring).\n\nThe score after splitting a string is the number of **zeros** in the **left** substring plus the number of **ones** in the **right** substring.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"011101 \"\n**Output:** 5 \n**Explanation:** \nAll possible ways of splitting s into two non-empty substrings are:\nleft =  \"0 \" and right =  \"11101 \", score = 1 + 4 = 5 \nleft =  \"01 \" and right =  \"1101 \", score = 1 + 3 = 4 \nleft =  \"011 \" and right =  \"101 \", score = 1 + 2 = 3 \nleft =  \"0111 \" and right =  \"01 \", score = 1 + 1 = 2 \nleft =  \"01110 \" and right =  \"1 \", score = 2 + 1 = 3\n\n**Example 2:**\n\n**Input:** s =  \"00111 \"\n**Output:** 5\n**Explanation:** When left =  \"00 \" and right =  \"111 \", we get the maximum score = 2 + 3 = 5\n\n**Example 3:**\n\n**Input:** s =  \"1111 \"\n**Output:** 3\n\n**Constraints:**\n\n*   `2 <= s.length <= 500`\n*   The string `s` consists of characters `'0'` and `'1'` only.Precompute a prefix sum of ones ('1'). Iterate from left to right counting the number of zeros ('0'), then use the precomputed prefix sum for counting ones ('1'). Update the answer.",
          "output": "from collections import Counter\n\ndef is_possible_divide(nums: List[int], k: int) -> bool:\n    counts = Counter(nums)\n    \n    for key in sorted(counts):\n        if counts[key] > 0:\n            for i in range(k-1, -1, -1):\n                if counts[key+i] < counts[key]:\n                    return False\n                counts[key+i] -= counts[key]\n    \n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: There are several cards **arranged in a row**, and each card has an associated number of points. The points are given in the integer array `cardPoints`.\n\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards.\n\nYour score is the sum of the points of the cards you have taken.\n\nGiven the integer array `cardPoints` and the integer `k`, return the _maximum score_ you can obtain.\n\n",
          "input": "**Example 1:**\n\n**Input:** cardPoints = \\[1,2,3,4,5,6,1\\], k = 3\n**Output:** 12\n**Explanation:** After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.\n\n**Example 2:**\n\n**Input:** cardPoints = \\[2,2,2\\], k = 2\n**Output:** 4\n**Explanation:** Regardless of which two cards you take, your score will always be 4.\n\n**Example 3:**\n\n**Input:** cardPoints = \\[9,7,7,9,7,7,9\\], k = 7\n**Output:** 55\n**Explanation:** You have to take all the cards. Your score is the sum of points of all cards.\n\n**Constraints:**\n\n*   `1 <= cardPoints.length <= 105`\n*   `1 <= cardPoints[i] <= 104`\n*   `1 <= k <= cardPoints.length`\n\n1\\. The number of unique characters in the substring must not exceed k. 2. The substring must not contain more than one instance of the same character. 3. The length of the substring must not exceed the length of the original string.Let the sum of all points be total_pts. You need to remove a sub-array from cardPoints with length n - k. Keep a window of size n - k over the array. The answer is max(answer, total_pts - sumOfCurrentWindow)",
          "output": "def max_substring_occurrences(s: str, k: int) -> int:\n    freq = {}\n    res = 0\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n        if len(freq) <= k:\n            res = max(res, freq[c])\n    return 0 if len(freq) > k else res\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D integer array `nums`, return _all elements of_ `nums` _in diagonal order as shown in the below images_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** \\[1,4,2,7,5,3,8,6,9\\]\n\n**Example 2:**\n\n**Input:** nums = \\[\\[1,2,3,4,5\\],\\[6,7\\],\\[8\\],\\[9,10,11\\],\\[12,13,14,15,16\\]\\]\n**Output:** \\[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i].length <= 105`\n*   `1 <= sum(nums[i].length) <= 105`\n*   `1 <= nums[i][j] <= 105`Notice that numbers with equal sums of row and column indexes belong to the same diagonal. Store them in tuples (sum, row, val), sort them, and then regroup the answer.",
          "output": "from collections import deque\n\ndef maxCandies(status, candies, keys, containedBoxes, initialBoxes):\n    max_candies = 0\n    visited = set()\n    to_process = deque(initialBoxes)\n\n    while to_process:\n        box = to_process.popleft()\n\n        if box in visited:\n            continue\n\n        visited.add(box)\n\n        if status[box]:\n            max_candies += candies[box]\n            for key in keys[box]:\n                status[key] = 1\n                if key in visited:\n                    to_process.append(key)\n            for contained in containedBoxes[box]:\n                to_process.append(contained)\n        else:\n            to_process.append(box)\n\n    return max_candies\n"
     },
     {
          "instruction": "Write python code for this problem: The **power** of the string is the maximum length of a non-empty substring that contains only one unique character.\n\nGiven a string `s`, return _the **power** of_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leetcode \"\n**Output:** 2\n**Explanation:** The substring  \"ee \" is of length 2 with the character 'e' only.\n\n**Example 2:**\n\n**Input:** s =  \"abbcccddddeeeeedcba \"\n**Output:** 5\n**Explanation:** The substring  \"eeeee \" is of length 5 with the character 'e' only.\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters.Keep an array power where power[i] is the maximum power of the i-th character. The answer is max(power[i]).",
          "output": "def angleClock(hour: int, minutes: int) -> float:\n    minute_angle = 6 * minutes\n    hour_angle = 30 * hour + 0.5 * minutes\n    angle = abs(hour_angle - minute_angle)\n    return min(angle, 360 - angle)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _a list of all **simplified** fractions between_ `0` _and_ `1` _(exclusive) such that the denominator is less-than-or-equal-to_ `n`. You can return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** \\[ \"1/2 \"\\]\n**Explanation:**  \"1/2 \" is the only unique fraction with a denominator less-than-or-equal-to 2.\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** \\[ \"1/2 \", \"1/3 \", \"2/3 \"\\]\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:** \\[ \"1/2 \", \"1/3 \", \"1/4 \", \"2/3 \", \"3/4 \"\\]\n**Explanation:**  \"2/4 \" is not a simplified fraction because it can be simplified to  \"1/2 \".\n\n**Constraints:**\n\n*   `1 <= n <= 100`A fraction is fully simplified if there is no integer that divides cleanly into the numerator and denominator. In other words the greatest common divisor of the numerator and the denominator of a simplified fraction is 1.",
          "output": "def minJumps(arr):\n    n = len(arr)\n    maxReach = arr[0]\n    step = arr[0]\n    jumps = 1\n\n    if n == 1:\n        return 0\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n\n        maxReach = max(maxReach, i + arr[i])\n\n        step -= 1\n\n        if step == 0:\n            jumps += 1\n            step = maxReach - i\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree `root`, a node _X_ in the tree is named **good** if in the path from root to _X_ there are no nodes with a value _greater than_ X.\n\nReturn the number of **good** nodes in the binary tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,1,4,3,null,1,5\\]\n**Output:** 4\n**Explanation:** Nodes in blue are **good**.\nRoot Node (3) is always a good node.\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\nNode 5 -> (3,4,5) is the maximum value in the path\nNode 3 -> (3,1,3) is the maximum value in the path.\n\n**Example 2:**\n\n**Input:** root = \\[3,3,null,4,2\\]\n**Output:** 3\n**Explanation:** Node 2 -> (3, 3, 2) is not good, because  \"3 \" is higher than it.\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** 1\n**Explanation:** Root is considered as **good**.\n\n**Constraints:**\n\n*   The number of nodes in the binary tree is in the range `[1, 10^5]`.\n*   Each node's value is between `[-10^4, 10^4]`.Use DFS (Depth First Search) to traverse the tree, and constantly keep track of the current path maximum.",
          "output": "def maximum69Number(num: int) -> int:\n    num_str = list(str(num))\n    for i, c in enumerate(num_str):\n        if c == '6':\n            num_str[i] = '9'\n            break\n    return int(''.join(num_str))\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `cost` and an integer `target`, return _the **maximum** integer you can paint under the following rules_:\n\n*   The cost of painting a digit `(i + 1)` is given by `cost[i]` (**0-indexed**).\n*   The total cost used must be equal to `target`.\n*   The integer does not have `0` digits.\n\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return `\"0 \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** cost = \\[4,3,2,5,6,7,2,5,5\\], target = 9\n**Output:**  \"7772 \"\n**Explanation:** The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost( \"7772 \") = 2\\*3+ 3\\*1 = 9. You could also paint  \"977 \", but  \"7772 \" is the largest number.\n**Digit    cost**\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5\n\n**Example 2:**\n\n**Input:** cost = \\[7,6,5,5,5,6,8,7,8\\], target = 12\n**Output:**  \"85 \"\n**Explanation:** The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost( \"85 \") = 7 + 5 = 12.\n\n**Example 3:**\n\n**Input:** cost = \\[2,4,6,2,4,6,4,4,4\\], target = 5\n**Output:**  \"0 \"\n**Explanation:** It is impossible to paint any integer with total cost equal to target.\n\n**Constraints:**\n\n*   `cost.length == 9`\n*   `1 <= cost[i], target <= 5000`Use dynamic programming to find the maximum digits to paint given a total cost. Build the largest number possible using this DP table.",
          "output": "def largestNumber(cost, target):\n    dp = [\"\" for _ in range(target + 1)]\n    dp[0] = \"\"\n\n    for i in range(9):\n        for j in range(cost[i], target + 1):\n            if dp[j - cost[i]] != None and len(dp[j - cost[i]]) < j - cost[i] \\\n               and (dp[j] == None or len(dp[j - cost[i]]) + 1 > len(dp[j])):\n                dp[j] = dp[j - cost[i]] + str(i + 1)\n\n    return dp[target] if dp[target] else \"0\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. _Return the destination city, that is, the city without any path outgoing to another city._\n\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\n\n",
          "input": "**Example 1:**\n\n**Input:** paths = \\[\\[ \"London \", \"New York \"\\],\\[ \"New York \", \"Lima \"\\],\\[ \"Lima \", \"Sao Paulo \"\\]\\]\n**Output:**  \"Sao Paulo \" \n**Explanation:** Starting at  \"London \" city you will reach  \"Sao Paulo \" city which is the destination city. Your trip consist of:  \"London \" ->  \"New York \" ->  \"Lima \" ->  \"Sao Paulo \".\n\n**Example 2:**\n\n**Input:** paths = \\[\\[ \"B \", \"C \"\\],\\[ \"D \", \"B \"\\],\\[ \"C \", \"A \"\\]\\]\n**Output:**  \"A \"\n**Explanation:** All possible trips are: \n \"D \" ->  \"B \" ->  \"C \" ->  \"A \". \n \"B \" ->  \"C \" ->  \"A \". \n \"C \" ->  \"A \". \n \"A \". \nClearly the destination city is  \"A \".\n\n**Example 3:**\n\n**Input:** paths = \\[\\[ \"A \", \"Z \"\\]\\]\n**Output:**  \"Z \"\n\n**Constraints:**\n\n*   `1 <= paths.length <= 100`\n*   `paths[i].length == 2`\n*   `1 <= cityAi.length, cityBi.length <= 10`\n*   `cityAi != cityBi`\n*   All strings consist of lowercase and uppercase English letters and the space character.Start in any city and use the path to move to the next city. Eventually, you will reach a city with no path outgoing, this is the destination city.",
          "output": "from collections import deque\nfrom collections import defaultdict\n\ndef watched_videos_by_friends(watched_videos, friends, id, level):\n    visited = set()\n    q = deque([(id, 0)])\n    video_freq = defaultdict(int)\n\n    while q:\n        current_id, current_level = q.popleft()\n\n        if current_level == level:\n            for video in watched_videos[current_id]:\n                video_freq[video] += 1\n        elif current_level < level:\n            for friend_id in friends[current_id]:\n                if friend_id not in visited:\n                    visited.add(friend_id)\n                    q.append((friend_id, current_level + 1))\n\n    result = sorted(video_freq.keys(), key=lambda x: (video_freq[x], x))\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an binary array `nums` and an integer `k`, return `true` _if all_ `1`_'s are at least_ `k` _places away from each other, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,0,0,0,1,0,0,1\\], k = 2\n**Output:** true\n**Explanation:** Each of the 1s are at least 2 places away from each other.\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,0,1,0,1\\], k = 2\n**Output:** false\n**Explanation:** The second 1 and third 1 are only one apart from each other.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= k <= nums.length`\n*   `nums[i]` is `0` or `1`Each time you find a number 1, check whether or not it is K or more places away from the next one. If it's not, return false.",
          "output": "def min_steps_to_make_palindrome(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums` and an integer `limit`, return the size of the longest **non-empty** subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[8,2,4,7\\], limit = 4\n**Output:** 2 \n**Explanation:** All subarrays are: \n\\[8\\] with maximum absolute diff |8-8| = 0 <= 4.\n\\[8,2\\] with maximum absolute diff |8-2| = 6 > 4. \n\\[8,2,4\\] with maximum absolute diff |8-2| = 6 > 4.\n\\[8,2,4,7\\] with maximum absolute diff |8-2| = 6 > 4.\n\\[2\\] with maximum absolute diff |2-2| = 0 <= 4.\n\\[2,4\\] with maximum absolute diff |2-4| = 2 <= 4.\n\\[2,4,7\\] with maximum absolute diff |2-7| = 5 > 4.\n\\[4\\] with maximum absolute diff |4-4| = 0 <= 4.\n\\[4,7\\] with maximum absolute diff |4-7| = 3 <= 4.\n\\[7\\] with maximum absolute diff |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2.\n\n**Example 2:**\n\n**Input:** nums = \\[10,1,2,4,7,2\\], limit = 5\n**Output:** 4 \n**Explanation:** The subarray \\[2,4,7,2\\] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.\n\n**Example 3:**\n\n**Input:** nums = \\[4,2,2,2,4,4,2,2\\], limit = 0\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`\n*   `0 <= limit <= 109`Use a sliding window approach keeping the maximum and minimum value using a data structure like a multiset from STL in C++. More specifically, use the two pointer technique, moving the right pointer as far as possible to the right until the subarray is not valid (maxValue - minValue > limit), then moving the left pointer until the subarray is valid again (maxValue - minValue <= limit). Keep repeating this process.",
          "output": "from collections import deque\ndef longestSubarray(nums, limit):\n    max_deque = deque()\n    min_deque = deque()\n    left, right, longest = 0, 0, 0\n    \n    while right < len(nums):\n        while max_deque and nums[right] > max_deque[-1]: max_deque.pop()\n        while min_deque and nums[right] < min_deque[-1]: min_deque.pop()\n        \n        max_deque.append(nums[right])\n        min_deque.append(nums[right])\n        \n        while max_deque[0] - min_deque[0] > limit:\n            if max_deque[0] == nums[left]: max_deque.popleft()\n            if min_deque[0] == nums[left]: min_deque.popleft()\n            left += 1\n        \n        longest = max(longest, right - left + 1)\n        right += 1\n    \n    return longest\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` matrix `mat` that has its rows sorted in non-decreasing order and an integer `k`.\n\nYou are allowed to choose **exactly one element** from each row to form an array.\n\nReturn _the_ `kth` _smallest array sum among all possible arrays_.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,3,11\\],\\[2,4,6\\]\\], k = 5\n**Output:** 7\n**Explanation:** Choosing one element from each row, the first k smallest sum are:\n\\[1,2\\], \\[1,4\\], \\[3,2\\], \\[3,4\\], \\[1,6\\]. Where the 5th sum is 7.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,3,11\\],\\[2,4,6\\]\\], k = 9\n**Output:** 17\n\n**Example 3:**\n\n**Input:** mat = \\[\\[1,10,10\\],\\[1,4,5\\],\\[2,3,6\\]\\], k = 7\n**Output:** 9\n**Explanation:** Choosing one element from each row, the first k smallest sum are:\n\\[1,1,2\\], \\[1,1,3\\], \\[1,4,2\\], \\[1,4,3\\], \\[1,1,6\\], \\[1,5,2\\], \\[1,5,3\\]. Where the 7th sum is 9.  \n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat.length[i]`\n*   `1 <= m, n <= 40`\n*   `1 <= mat[i][j] <= 5000`\n*   `1 <= k <= min(200, nm)`\n*   `mat[i]` is a non-decreasing array.Save all visited sums and corresponding indexes in a priority queue. Then, once you pop the smallest sum so far, you can quickly identify the next m candidates for smallest sum by incrementing each row index by 1.",
          "output": "import heapq\n\ndef kthSmallest(mat, k):\n    m, n = len(mat), len(mat[0])\n    minHeap = [(mat[0][0], 0, 0)]\n\n    visited = set([(0, 0)])\n    count = 0\n\n    while minHeap:\n        cur = heapq.heappop(minHeap)\n        sum, row, col = cur\n\n        count += 1\n        if count == k:\n            return sum\n\n        if row + 1 < m and (row + 1, col) not in visited:\n            visited.add((row + 1, col))\n            heapq.heappush(minHeap, (sum - mat[row][col] + mat[row + 1][col], row + 1, col))\n        \n        if col + 1 < n and (row, col + 1) not in visited:\n            visited.add((row, col + 1))\n            heapq.heappush(minHeap, (sum - mat[row][col] + mat[row][col + 1], row, col + 1))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `target` and an integer `n`.\n\nYou have an empty stack with the two following operations:\n\n*   **`\"Push \"`**: pushes an integer to the top of the stack.\n*   **`\"Pop \"`**: removes the integer on the top of the stack.\n\nYou also have a stream of the integers in the range `[1, n]`.\n\nUse the two stack operations to make the numbers in the stack (from the bottom to the top) equal to `target`. You should follow the following rules:\n\n*   If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.\n*   If the stack is not empty, pop the integer at the top of the stack.\n*   If, at any moment, the elements in the stack (from the bottom to the top) are equal to `target`, do not read new integers from the stream and do not do more operations on the stack.\n\nReturn _the stack operations needed to build_ `target` following the mentioned rules. If there are multiple valid answers, return **any of them**.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = \\[1,3\\], n = 3\n**Output:** \\[ \"Push \", \"Push \", \"Pop \", \"Push \"\\]\n**Explanation:** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = \\[1\\].\nRead 2 from the stream and push it to the stack. s = \\[1,2\\].\nPop the integer on the top of the stack. s = \\[1\\].\nRead 3 from the stream and push it to the stack. s = \\[1,3\\].\n\n**Example 2:**\n\n**Input:** target = \\[1,2,3\\], n = 3\n**Output:** \\[ \"Push \", \"Push \", \"Push \"\\]\n**Explanation:** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = \\[1\\].\nRead 2 from the stream and push it to the stack. s = \\[1,2\\].\nRead 3 from the stream and push it to the stack. s = \\[1,2,3\\].\n\n**Example 3:**\n\n**Input:** target = \\[1,2\\], n = 4\n**Output:** \\[ \"Push \", \"Push \"\\]\n**Explanation:** Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = \\[1\\].\nRead 2 from the stream and push it to the stack. s = \\[1,2\\].\nSince the stack (from the bottom to the top) is equal to target, we stop the stack operations.\nThe answers that read integer 3 from the stream are not accepted.\n\n**Constraints:**\n\n*   `1 <= target.length <= 100`\n*   `1 <= n <= 100`\n*   `1 <= target[i] <= n`\n*   `target` is strictly increasing.Use \u201cPush\u201d for numbers to be kept in target array and [\u201cPush\u201d, \u201cPop\u201d] for numbers to be discarded.",
          "output": "def build_array(target, n):\n    result = []\n    current = 1\n    for num in target:\n        while current < num:\n            result.append(\"Push \")\n            result.append(\"Pop \")\n            current += 1\n        result.append(\"Push \")\n        current += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`.\n\nWe want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.\n\nLet's define `a` and `b` as follows:\n\n*   `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`\n*   `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`\n\nNote that **^** denotes the **bitwise-xor** operation.\n\nReturn _the number of triplets_ (`i`, `j` and `k`) Where `a == b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,3,1,6,7\\]\n**Output:** 4\n**Explanation:** The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,1,1,1\\]\n**Output:** 10\n\n**Constraints:**\n\n*   `1 <= arr.length <= 300`\n*   `1 <= arr[i] <= 108`We are searching for sub-array of length \u2265 2 and we need to split it to 2 non-empty arrays so that the xor of the first array is equal to the xor of the second array. This is equivalent to searching for sub-array with xor = 0. Keep the prefix xor of arr in another array, check the xor of all sub-arrays in O(n^2), if the xor of sub-array of length x is 0 add x-1 to the answer.",
          "output": "def make_connected(n, connections):\n    adj_list = [[] for _ in range(n)]\n    visited = [False] * n\n    components = 0\n    extra_edges = 0\n\n    for a, b in connections:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n\n    for i in range(n):\n        if not visited[i]:\n            components += 1\n            stack = [i]\n\n            while stack:\n                current = stack.pop()\n\n                if not visited[current]:\n                    visited[current] = True\n\n                    for neighbor in adj_list[current]:\n                        if not visited[neighbor]:\n                            stack.append(neighbor)\n                        else:\n                            extra_edges += 1\n\n    extra_needed = components - 1\n\n    if extra_edges >= extra_needed:\n        return extra_needed\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. _Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at **vertex 0** and coming back to this vertex._\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], hasApple = \\[false,false,true,false,true,true,false\\]\n**Output:** 8 \n**Explanation:** The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  \n\n**Example 2:**\n\n**Input:** n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], hasApple = \\[false,false,true,false,false,true,false\\]\n**Output:** 6\n**Explanation:** The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  \n\n**Example 3:**\n\n**Input:** n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], hasApple = \\[false,false,false,false,false,false,false\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `edges.length == n - 1`\n*   `edges[i].length == 2`\n*   `0 <= ai < bi <= n - 1`\n*   `hasApple.length == n`Note that if a node u contains an apple then all edges in the path from the root to the node u have to be used forward and backward (2 times). Therefore use a depth-first search (DFS) to check if an edge will be used or not.",
          "output": "def minimum_distance(word: str) -> int:\n    def dp(first: int, second: int, pos: int) -> int:\n        if pos == len(word): return 0\n        \n        ans = float('inf')\n        for i in [first, second]:\n            if i != -1:\n                dx = abs(ord(word[pos]) - ord(word[i])) % 6\n                dy = abs(ord(word[pos]) - ord(word[i])) // 6\n                ans = min(ans, min(dx, dy) * 2 + max(dx, dy))\n        ans += dp(first, second, pos + 1)\n\n        if first == -1 or second == -1:\n            ans = min(ans, dp(pos if first == -1 else first, ord(word[pos]), pos + 1))\n\n        return ans\n    \n    return dp(-1, -1, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts.\n\nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\n\n_Return the number of ways of cutting the pizza such that each piece contains **at least** one apple._ Since the answer can be a huge number, return this modulo 10^9 + 7.\n\n",
          "input": "**Example 1:**\n\n**Input:** pizza = \\[ \"A.. \", \"AAA \", \"... \"\\], k = 3\n**Output:** 3 \n**Explanation:** The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.\n\n**Example 2:**\n\n**Input:** pizza = \\[ \"A.. \", \"AA. \", \"... \"\\], k = 3\n**Output:** 1\n\n**Example 3:**\n\n**Input:** pizza = \\[ \"A.. \", \"A.. \", \"... \"\\], k = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= rows, cols <= 50`\n*   `rows == pizza.length`\n*   `cols == pizza[i].length`\n*   `1 <= k <= 10`\n*   `pizza` consists of characters `'A'` and `'.'` only.Note that after each cut the remaining piece of pizza always has the lower right coordinate at (rows-1,cols-1). Use dynamic programming approach with states (row1, col1, c) which computes the number of ways of cutting the pizza using \"c\" cuts where the current piece of pizza has upper left coordinate at (row1,col1) and lower right coordinate at (rows-1,cols-1). For the transitions try all vertical and horizontal cuts such that the piece of pizza you have to give a person must contain at least one apple. The base case is when c=k-1. Additionally use a 2D dynamic programming to respond in O(1) if a piece of pizza contains at least one apple.",
          "output": "def number_of_steps(num):\n    steps = 0\n    while num:\n        steps += 1 if num % 2 == 0 else 2\n        num >>= 1\n    return steps - 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s` and an integer `k`, return `true` _if every binary code of length_ `k` _is a substring of_ `s`. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"00110110 \", k = 2\n**Output:** true\n**Explanation:** The binary codes of length 2 are  \"00 \",  \"01 \",  \"10 \" and  \"11 \". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.\n\n**Example 2:**\n\n**Input:** s =  \"0110 \", k = 1\n**Output:** true\n**Explanation:** The binary codes of length 1 are  \"0 \" and  \"1 \", it is clear that both exist as a substring. \n\n**Example 3:**\n\n**Input:** s =  \"0110 \", k = 2\n**Output:** false\n**Explanation:** The binary code  \"00 \" is of length 2 and does not exist in the array.\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 105`\n*   `s[i]` is either `'0'` or `'1'`.\n*   `1 <= k <= 20`We need only to check all sub-strings of length k. The number of distinct sub-strings should be exactly 2^k.",
          "output": "def countOrders(n: int) -> int:\n    MOD = 10**9 + 7\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * (2 * i - 1) * i % MOD\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `ai` first if you want to take course `bi`.\n\n*   For example, the pair `[0, 1]` indicates that you have to take course `0` before you can take course `1`.\n\nPrerequisites can also be **indirect**. If course `a` is a prerequisite of course `b`, and course `b` is a prerequisite of course `c`, then course `a` is a prerequisite of course `c`.\n\nYou are also given an array `queries` where `queries[j] = [uj, vj]`. For the `jth` query, you should answer whether course `uj` is a prerequisite of course `vj` or not.\n\nReturn _a boolean array_ `answer`_, where_ `answer[j]` _is the answer to the_ `jth` _query._\n\n",
          "input": "**Example 1:**\n\n**Input:** numCourses = 2, prerequisites = \\[\\[1,0\\]\\], queries = \\[\\[0,1\\],\\[1,0\\]\\]\n**Output:** \\[false,true\\]\n**Explanation:** The pair \\[1, 0\\] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true.\n\n**Example 2:**\n\n**Input:** numCourses = 2, prerequisites = \\[\\], queries = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** \\[false,false\\]\n**Explanation:** There are no prerequisites, and each course is independent.\n\n**Example 3:**\n\n**Input:** numCourses = 3, prerequisites = \\[\\[1,2\\],\\[1,0\\],\\[2,0\\]\\], queries = \\[\\[1,0\\],\\[1,2\\]\\]\n**Output:** \\[true,true\\]\n\n**Constraints:**\n\n*   `2 <= numCourses <= 100`\n*   `0 <= prerequisites.length <= (numCourses * (numCourses - 1) / 2)`\n*   `prerequisites[i].length == 2`\n*   `0 <= ai, bi <= n - 1`\n*   `ai != bi`\n*   All the pairs `[ai, bi]` are **unique**.\n*   The prerequisites graph has no cycles.\n*   `1 <= queries.length <= 104`\n*   `0 <= ui, vi <= n - 1`\n*   `ui != vi`Imagine if the courses are nodes of a graph. We need to build an array isReachable[i][j]. Start a bfs from each course i and assign for each course j you visit isReachable[i][j] = True. Answer the queries from the isReachable array.",
          "output": "def checkIfPrerequisite(numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n    adj_matrix = [[False] * numCourses for _ in range(numCourses)]\n    for pre in prerequisites:\n        adj_matrix[pre[0]][pre[1]] = True\n\n    for k in range(numCourses):\n        for i in range(numCourses):\n            for j in range(numCourses):\n                adj_matrix[i][j] = adj_matrix[i][j] or (adj_matrix[i][k] and adj_matrix[k][j])\n\n    return [adj_matrix[query[0]][query[1]] for query in queries]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell.\n\nYou have two robots that can collect cherries for you:\n\n*   **Robot #1** is located at the **top-left corner** `(0, 0)`, and\n*   **Robot #2** is located at the **top-right corner** `(0, cols - 1)`.\n\nReturn _the maximum number of cherries collection using both robots by following the rules below_:\n\n*   From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`.\n*   When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n*   When both robots stay in the same cell, only one takes the cherries.\n*   Both robots cannot move outside of the grid at any moment.\n*   Both robots should reach the bottom row in `grid`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[3,1,1\\],\\[2,5,1\\],\\[1,5,5\\],\\[2,1,1\\]\\]\n**Output:** 24\n**Explanation:** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0,0,0,0,0,1\\],\\[2,0,0,0,0,3,0\\],\\[2,0,9,0,0,0,0\\],\\[0,3,0,5,4,0,0\\],\\[1,0,2,3,0,0,6\\]\\]\n**Output:** 28\n**Explanation:** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28.\n\n**Constraints:**\n\n*   `rows == grid.length`\n*   `cols == grid[i].length`\n*   `2 <= rows, cols <= 70`\n*   `0 <= grid[i][j] <= 100`Use dynammic programming, define DP[i][j][k]: The maximum cherries that both robots can take  starting on the ith row, and column j and k of Robot 1 and 2 respectively.",
          "output": "from typing import List\nimport heapq\n\ndef kWeakestRows(mat: List[List[int]], k: int) -> List[int]:\n    soldier_rows = [(row.count(1), i) for i, row in enumerate(mat)]\n    heapq.heapify(soldier_rows)\n    return [heapq.heappop(soldier_rows)[1] for _ in range(k)]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `startTime` and `endTime` and given an integer `queryTime`.\n\nThe `ith` student started doing their homework at the time `startTime[i]` and finished it at time `endTime[i]`.\n\nReturn _the number of students_ doing their homework at time `queryTime`. More formally, return the number of students where `queryTime` lays in the interval `[startTime[i], endTime[i]]` inclusive.\n\n",
          "input": "**Example 1:**\n\n**Input:** startTime = \\[1,2,3\\], endTime = \\[3,2,7\\], queryTime = 4\n**Output:** 1\n**Explanation:** We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.\n\n**Example 2:**\n\n**Input:** startTime = \\[4\\], endTime = \\[4\\], queryTime = 4\n**Output:** 1\n**Explanation:** The only student was doing their homework at the queryTime.\n\n**Constraints:**\n\n*   `startTime.length == endTime.length`\n*   `1 <= startTime.length <= 100`\n*   `1 <= startTime[i] <= endTime[i] <= 1000`\n*   `1 <= queryTime <= 1000`Imagine that startTime[i] and endTime[i] form an interval (i.e. [startTime[i], endTime[i]]). The answer is how many times the queryTime laid in those mentioned intervals.",
          "output": "def removeLeafNodes(root, target):\n    if not root:\n        return None\n    root.left = removeLeafNodes(root.left, target)\n    root.right = removeLeafNodes(root.right, target)\n    if not root.left and not root.right and root.val == target:\n        return None\n    return root\n"
     },
     {
          "instruction": "Write python code for this problem: Given a sentence `text` (A _sentence_ is a string of space-separated words) in the following format:\n\n*   First letter is in upper case.\n*   Each word in `text` are separated by a single space.\n\nYour task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\n\nReturn the new text following the format shown above.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"Leetcode is cool \"\n**Output:**  \"Is cool leetcode \"\n**Explanation:** There are 3 words,  \"Leetcode \" of length 8,  \"is \" of length 2 and  \"cool \" of length 4.\nOutput is ordered by length and the new first word starts with capital letter.\n\n**Example 2:**\n\n**Input:** text =  \"Keep calm and code on \"\n**Output:**  \"On and keep calm code \"\n**Explanation:** Output is ordered as follows:\n \"On \" 2 letters.\n \"and \" 3 letters.\n \"keep \" 4 letters in case of tie order by position in original text.\n \"calm \" 4 letters.\n \"code \" 4 letters.\n\n**Example 3:**\n\n**Input:** text =  \"To be or not to be \"\n**Output:**  \"To be or to be not \"\n\n**Constraints:**\n\n*   `text` begins with a capital letter and then contains lowercase letters and single space between words.\n*   `1 <= text.length <= 10^5`Store each word and their relative position. Then, sort them by length of words in case of tie by their original order.",
          "output": "def min_taps(n, ranges):\n    intervals = [0] * (n + 1)\n    for i in range(n + 1):\n        left = max(0, i - ranges[i])\n        right = min(n, i + ranges[i])\n        intervals[left] = max(intervals[left], right - left)\n\n    position, total_taps, max_reach = 0, 0, 0\n    while position < n:\n        max_reach = max(max_reach, position + intervals[position])\n        if max_reach == position:\n            return -1\n        position = max_reach\n        total_taps += 1\n\n    return total_taps\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (**indexed from 0**).\n\n_Return the indices of people whose list of favorite companies is not a **subset** of any other list of favorites companies_. You must return the indices in increasing order.\n\n",
          "input": "**Example 1:**\n\n**Input:** favoriteCompanies = \\[\\[ \"leetcode \", \"google \", \"facebook \"\\],\\[ \"google \", \"microsoft \"\\],\\[ \"google \", \"facebook \"\\],\\[ \"google \"\\],\\[ \"amazon \"\\]\\]\n**Output:** \\[0,1,4\\] \n**Explanation:** \nPerson with index=2 has favoriteCompanies\\[2\\]=\\[ \"google \", \"facebook \"\\] which is a subset of favoriteCompanies\\[0\\]=\\[ \"leetcode \", \"google \", \"facebook \"\\] corresponding to the person with index 0. \nPerson with index=3 has favoriteCompanies\\[3\\]=\\[ \"google \"\\] which is a subset of favoriteCompanies\\[0\\]=\\[ \"leetcode \", \"google \", \"facebook \"\\] and favoriteCompanies\\[1\\]=\\[ \"google \", \"microsoft \"\\]. \nOther lists of favorite companies are not a subset of another list, therefore, the answer is \\[0,1,4\\].\n\n**Example 2:**\n\n**Input:** favoriteCompanies = \\[\\[ \"leetcode \", \"google \", \"facebook \"\\],\\[ \"leetcode \", \"amazon \"\\],\\[ \"facebook \", \"google \"\\]\\]\n**Output:** \\[0,1\\] \n**Explanation:** In this case favoriteCompanies\\[2\\]=\\[ \"facebook \", \"google \"\\] is a subset of favoriteCompanies\\[0\\]=\\[ \"leetcode \", \"google \", \"facebook \"\\], therefore, the answer is \\[0,1\\].\n\n**Example 3:**\n\n**Input:** favoriteCompanies = \\[\\[ \"leetcode \"\\],\\[ \"google \"\\],\\[ \"facebook \"\\],\\[ \"amazon \"\\]\\]\n**Output:** \\[0,1,2,3\\]\n\n**Constraints:**\n\n*   `1 <= favoriteCompanies.length <= 100`\n*   `1 <= favoriteCompanies[i].length <= 500`\n*   `1 <= favoriteCompanies[i][j].length <= 20`\n*   All strings in `favoriteCompanies[i]` are **distinct**.\n*   All lists of favorite companies are **distinct**, that is, If we sort alphabetically each list then `favoriteCompanies[i] != favoriteCompanies[j].`\n*   All strings consist of lowercase English letters only.Use hashing to convert company names in numbers and then for each list check if this is a subset of any other list. In order to check if a list is a subset of another list, use two pointers technique to get a linear solution for this task. The total complexity will be O(n^2 * m) where n is the number of lists and m is the maximum number of elements in a list.",
          "output": "from typing import List\n\ndef peopleIndexes(favoriteCompanies: List[List[str]]) -> List[int]:\n    result = []\n    companySets = [set(companies) for companies in favoriteCompanies]\n\n    for i, companies in enumerate(companySets):\n        isSubset = False\n        for j, otherCompanies in enumerate(companySets):\n            if i != j and companies.issubset(otherCompanies):\n                isSubset = True\n                break\n        if not isSubset:\n            result.append(i)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Alice is throwing `n` darts on a very large wall. You are given an array `darts` where `darts[i] = [xi, yi]` is the position of the `ith` dart that Alice threw on the wall.\n\nBob knows the positions of the `n` darts on the wall. He wants to place a dartboard of radius `r` on the wall so that the maximum number of darts that Alice throws lies on the dartboard.\n\nGiven the integer `r`, return _the maximum number of darts that can lie on the dartboard_.\n\n",
          "input": "**Example 1:**\n\n**Input:** darts = \\[\\[-2,0\\],\\[2,0\\],\\[0,2\\],\\[0,-2\\]\\], r = 2\n**Output:** 4\n**Explanation:** Circle dartboard with center in (0,0) and radius = 2 contain all points.\n\n**Example 2:**\n\n**Input:** darts = \\[\\[-3,0\\],\\[3,0\\],\\[2,6\\],\\[5,4\\],\\[0,9\\],\\[7,8\\]\\], r = 5\n**Output:** 5\n**Explanation:** Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\n\n**Constraints:**\n\n*   `1 <= darts.length <= 100`\n*   `darts[i].length == 2`\n*   `-104 <= xi, yi <= 104`\n*   All the `darts` are unique\n*   `1 <= r <= 5000`If there is an optimal solution, you can always move the circle so that two points lie on the boundary of the circle. When the radius is fixed, you can find either 0 or 1 or 2 circles that pass two given points at the same time. Loop for each pair of points and find the center of the circle, after that count the number of points inside the circle.",
          "output": "def numPoints(darts, r):\n    n = len(darts)\n    result = 1\n    \n    for i in range(n):\n        for j in range(n):\n            cnt = 0\n            for k in range(n):\n                dx = darts[i][0] - darts[k][0]\n                dy = darts[i][1] - darts[k][1]\n                if (dx * dx + dy * dy) ** 0.5 <= r:\n                    cnt += 1\n                    \n            if cnt > result:\n                result = cnt\n                \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `sentence` that consists of some words separated by a **single space**, and a `searchWord`, check if `searchWord` is a prefix of any word in `sentence`.\n\nReturn _the index of the word in_ `sentence` _(**1-indexed**) where_ `searchWord` _is a prefix of this word_. If `searchWord` is a prefix of more than one word, return the index of the first word **(minimum index)**. If there is no such word return `-1`.\n\nA **prefix** of a string `s` is any leading contiguous substring of `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence =  \"i love eating burger \", searchWord =  \"burg \"\n**Output:** 4\n**Explanation:**  \"burg \" is prefix of  \"burger \" which is the 4th word in the sentence.\n\n**Example 2:**\n\n**Input:** sentence =  \"this problem is an easy problem \", searchWord =  \"pro \"\n**Output:** 2\n**Explanation:**  \"pro \" is prefix of  \"problem \" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.\n\n**Example 3:**\n\n**Input:** sentence =  \"i am tired \", searchWord =  \"you \"\n**Output:** -1\n**Explanation:**  \"you \" is not a prefix of any word in the sentence.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 100`\n*   `1 <= searchWord.length <= 10`\n*   `sentence` consists of lowercase English letters and spaces.\n*   `searchWord` consists of lowercase English letters.First extract the words of the sentence. Check for each word if searchWord occurs at index 0, if so return the index of this word (1-indexed) If searchWord doesn't exist as a prefix of any word return the default value (-1).",
          "output": "def filter_restaurants(restaurants, vegan_friendly, max_price, max_distance):\n    def custom_compare(a, b):\n        if a[1] == b[1]:\n            return b[0] - a[0]\n        return b[1] - a[1]\n\n    filtered_restaurants = [\n        r for r in restaurants\n        if (vegan_friendly == 0 or r[2] == vegan_friendly) and r[3] <= max_price and r[4] <= max_distance\n    ]\n\n    filtered_restaurants.sort(key=lambda r: (r[1], r[0]), reverse=True)\n\n    return [r[0] for r in filtered_restaurants]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an integer `k`, return _the maximum number of vowel letters in any substring of_ `s` _with length_ `k`.\n\n**Vowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abciiidef \", k = 3\n**Output:** 3\n**Explanation:** The substring  \"iii \" contains 3 vowel letters.\n\n**Example 2:**\n\n**Input:** s =  \"aeiou \", k = 2\n**Output:** 2\n**Explanation:** Any substring of length 2 contains 2 vowels.\n\n**Example 3:**\n\n**Input:** s =  \"leetcode \", k = 3\n**Output:** 2\n**Explanation:**  \"lee \",  \"eet \" and  \"ode \" contain 2 vowels.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.\n*   `1 <= k <= s.length`Keep a window of size k and maintain the number of vowels in it. Keep moving the window and update the number of vowels while moving. Answer is max number of vowels of any window.",
          "output": "def findTheCity(n, edges, distanceThreshold):\n    INF = float(\"inf\")\n    dist = [[INF] * n for _ in range(n)]\n\n    for i in range(n):\n        dist[i][i] = 0\n\n    for fr, to, w in edges:\n        dist[fr][to] = dist[to][fr] = w\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    res, minReachable = -1, n + 1\n    for i in range(n):\n        cnt = sum(1 for d in dist[i] if d <= distanceThreshold)\n        if cnt <= minReachable:\n            minReachable = cnt\n            res = i\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome.\n\n_Return the number of **pseudo-palindromic** paths going from the root node to leaf nodes._\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[2,3,1,3,1,null,1\\]\n**Output:** 2 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path \\[2,3,3\\], the green path \\[2,1,1\\], and the path \\[2,3,1\\]. Among these paths only red path and green path are pseudo-palindromic paths since the red path \\[2,3,3\\] can be rearranged in \\[3,2,3\\] (palindrome) and the green path \\[2,1,1\\] can be rearranged in \\[1,2,1\\] (palindrome).\n\n**Example 2:**\n\n**Input:** root = \\[2,1,1,1,3,null,null,null,null,null,1\\]\n**Output:** 1 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path \\[2,1,1\\], the path \\[2,1,3,1\\], and the path \\[2,1\\]. Among these paths only the green path is pseudo-palindromic since \\[2,1,1\\] can be rearranged in \\[1,2,1\\] (palindrome).\n\n**Example 3:**\n\n**Input:** root = \\[9\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 105]`.\n*   `1 <= Node.val <= 9`Note that the node values of a path form a palindrome if at most one digit has an odd frequency (parity). Use a Depth First Search (DFS) keeping the frequency (parity) of the digits. Once you are in a leaf node check if at most one digit has an odd frequency (parity).",
          "output": "def minDifficulty(jobDifficulty, d):\n    n = len(jobDifficulty)\n    if n < d: return -1\n    dp = [[float(\"inf\")] * n for _ in range(d)]\n\n    dp[0][0] = jobDifficulty[0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1], jobDifficulty[i])\n\n    for i in range(1, d):\n        for j in range(i, n):\n            maxD = jobDifficulty[j]\n            for k in range(j, i - 1, -1):\n                maxD = max(maxD, jobDifficulty[k])\n                dp[i][j] = min(dp[i][j], dp[i-1][k-1] + maxD)\n\n    return dp[d-1][n-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two arrays `nums1` and `nums2`.\n\nReturn the maximum dot product between **non-empty** subsequences of nums1 and nums2 with the same length.\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `[2,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[2,1,-2,5\\], nums2 = \\[3,0,-6\\]\n**Output:** 18\n**Explanation:** Take subsequence \\[2,-2\\] from nums1 and subsequence \\[3,-6\\] from nums2.\nTheir dot product is (2\\*3 + (-2)\\*(-6)) = 18.\n\n**Example 2:**\n\n**Input:** nums1 = \\[3,-2\\], nums2 = \\[2,-6,7\\]\n**Output:** 21\n**Explanation:** Take subsequence \\[3\\] from nums1 and subsequence \\[7\\] from nums2.\nTheir dot product is (3\\*7) = 21.\n\n**Example 3:**\n\n**Input:** nums1 = \\[-1,-1\\], nums2 = \\[1,1\\]\n**Output:** -1\n**Explanation:** Take subsequence \\[-1\\] from nums1 and subsequence \\[1\\] from nums2.\nTheir dot product is -1.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 500`\n*   `-1000 <= nums1[i], nums2[i] <= 1000`Use dynamic programming, define DP[i][j] as the maximum dot product of two subsequences starting in the position i of nums1 and position j of nums2.",
          "output": "def sortByBits(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `prices` where `prices[i]` is the price of the `ith` item in a shop.\n\nThere is a special discount for items in the shop. If you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`. Otherwise, you will not receive any discount at all.\n\nReturn an integer array `answer` where `answer[i]` is the final price you will pay for the `ith` item of the shop, considering the special discount.\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[8,4,6,2,3\\]\n**Output:** \\[4,2,4,2,3\\]\n**Explanation:** \nFor item 0 with price\\[0\\]=8 you will receive a discount equivalent to prices\\[1\\]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price\\[1\\]=4 you will receive a discount equivalent to prices\\[3\\]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price\\[2\\]=6 you will receive a discount equivalent to prices\\[3\\]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all.\n\n**Example 2:**\n\n**Input:** prices = \\[1,2,3,4,5\\]\n**Output:** \\[1,2,3,4,5\\]\n**Explanation:** In this case, for all items, you will not receive any discount at all.\n\n**Example 3:**\n\n**Input:** prices = \\[10,1,1,6\\]\n**Output:** \\[9,0,1,6\\]\n\n**Constraints:**\n\n*   `1 <= prices.length <= 500`\n*   `1 <= prices[i] <= 1000`\n\nThe left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.Use brute force: For the ith item in the shop with a loop find the first position j satisfying the conditions and apply the discount, otherwise, the discount is 0.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef maxSumBST(root):\n    def helper(node):\n        if not node:\n            return float('inf'), float('-inf'), 0, True\n\n        left_min, left_max, left_sum, is_left_bst = helper(node.left)\n        right_min, right_max, right_sum, is_right_bst = helper(node.right)\n\n        if is_left_bst and is_right_bst and node.val > left_max and node.val < right_min:\n            sum_ = node.val + left_sum + right_sum\n            max_sum[0] = max(max_sum[0], sum_)\n            return min(node.val, left_min), max(node.val, right_max), sum_, True\n\n        return 0, 0, 0, False\n\n    max_sum = [0]\n    helper(root)\n    return max_sum[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `houses` where `houses[i]` is the location of the `ith` house along a street and an integer `k`, allocate `k` mailboxes in the street.\n\nReturn _the **minimum** total distance between each house and its nearest mailbox_.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** houses = \\[1,4,8,10,20\\], k = 3\n**Output:** 5\n**Explanation:** Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 \n\n**Example 2:**\n\n**Input:** houses = \\[2,3,5,12,18\\], k = 2\n**Output:** 9\n**Explanation:** Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.\n\n**Constraints:**\n\n*   `1 <= k <= houses.length <= 100`\n*   `1 <= houses[i] <= 104`\n*   All the integers of `houses` are **unique**.If k =1, the minimum distance is obtained allocating the mailbox in the median of the array houses. Generalize this idea, using dynamic programming allocating k mailboxes.",
          "output": "def max_events(events):\n    events.sort(key=lambda x: x[1])\n\n    count = 0\n    last_day = -1\n\n    for event in events:\n        if event[0] > last_day:\n            count += 1\n            last_day = event[1]\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:\n\n1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n\n*   Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.\n\n2. `getValue(int row, int col)`\n\n*   Returns the current value of the coordinate `(row,col)` from the rectangle.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"SubrectangleQueries \", \"getValue \", \"updateSubrectangle \", \"getValue \", \"getValue \", \"updateSubrectangle \", \"getValue \", \"getValue \"\\]\n\\[\\[\\[\\[1,2,1\\],\\[4,3,4\\],\\[3,2,1\\],\\[1,1,1\\]\\]\\],\\[0,2\\],\\[0,0,3,2,5\\],\\[0,2\\],\\[3,1\\],\\[3,0,3,2,10\\],\\[3,1\\],\\[0,2\\]\\]\n**Output**\n\\[null,1,null,5,5,null,10,5\\]\n**Explanation**\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries(\\[\\[1,2,1\\],\\[4,3,4\\],\\[3,2,1\\],\\[1,1,1\\]\\]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5\n\n**Example 2:**\n\n**Input**\n\\[ \"SubrectangleQueries \", \"getValue \", \"updateSubrectangle \", \"getValue \", \"getValue \", \"updateSubrectangle \", \"getValue \"\\]\n\\[\\[\\[\\[1,1,1\\],\\[2,2,2\\],\\[3,3,3\\]\\]\\],\\[0,0\\],\\[0,0,2,2,100\\],\\[0,0\\],\\[2,2\\],\\[1,1,2,2,20\\],\\[2,2\\]\\]\n**Output**\n\\[null,1,null,100,100,null,20\\]\n**Explanation**\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries(\\[\\[1,1,1\\],\\[2,2,2\\],\\[3,3,3\\]\\]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20\n\n**Constraints:**\n\n*   There will be at most `500` operations considering both methods: `updateSubrectangle` and `getValue`.\n*   `1 <= rows, cols <= 100`\n*   `rows == rectangle.length`\n*   `cols == rectangle[i].length`\n*   `0 <= row1 <= row2 < rows`\n*   `0 <= col1 <= col2 < cols`\n*   `1 <= newValue, rectangle[i][j] <= 10^9`\n*   `0 <= row < rows`\n*   `0 <= col < cols`Use brute force to update a rectangle and, response to the queries in O(1).",
          "output": "def countNegatives(grid):\n    m, n, count, i, j = len(grid), len(grid[0]), 0, 0, len(grid[0]) - 1\n    while i < m and j >= 0:\n        if grid[i][j] < 0:\n            count += j + 1\n            i += 1\n        else:\n            j -= 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `arr` and an integer `target`.\n\nYou have to find **two non-overlapping sub-arrays** of `arr` each with a sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is **minimum**.\n\nReturn _the minimum sum of the lengths_ of the two required sub-arrays, or return `-1` if you cannot find such two sub-arrays.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,2,2,4,3\\], target = 3\n**Output:** 2\n**Explanation:** Only two sub-arrays have sum = 3 (\\[3\\] and \\[3\\]). The sum of their lengths is 2.\n\n**Example 2:**\n\n**Input:** arr = \\[7,3,4,7\\], target = 7\n**Output:** 2\n**Explanation:** Although we have three non-overlapping sub-arrays of sum = 7 (\\[7\\], \\[3,4\\] and \\[7\\]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\n\n**Example 3:**\n\n**Input:** arr = \\[4,3,2,6,2,3,4\\], target = 6\n**Output:** -1\n**Explanation:** We have only one sub-array of sum = 6.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= arr[i] <= 1000`\n*   `1 <= target <= 108`Let's create two arrays prefix and suffix where prefix[i] is the minimum length of sub-array ends before i and has sum = k, suffix[i] is the minimum length of sub-array starting at or after i and has sum = k. The answer we are searching for is min(prefix[i] + suffix[i]) for all values of i from 0 to n-1 where n == arr.length. If you are still stuck with how to build prefix and suffix, you can store for each index i the length of the sub-array starts at i and has sum = k or infinity otherwise, and you can use it to build both prefix and suffix.",
          "output": "class ProductOfNumbers:\n    def __init__(self):\n        self.products = [1]\n\n    def add(self, num: int) -> None:\n        if num == 0:\n            self.products = [1]\n        else:\n            self.products.append(self.products[-1] * num)\n\n    def getProduct(self, k: int) -> int:\n        if k >= len(self.products):\n            return 0\n        else:\n            return self.products[-1] // self.products[-k - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. _Return the maximum value of_ `(nums[i]-1)*(nums[j]-1)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,4,5,2\\]\n**Output:** 12 \n**Explanation:** If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums\\[1\\]-1)\\*(nums\\[2\\]-1) = (4-1)\\*(5-1) = 3\\*4 = 12. \n\n**Example 2:**\n\n**Input:** nums = \\[1,5,4,5\\]\n**Output:** 16\n**Explanation:** Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)\\*(5-1) = 16.\n\n**Example 3:**\n\n**Input:** nums = \\[3,7\\]\n**Output:** 12\n\n**Constraints:**\n\n*   `2 <= nums.length <= 500`\n*   `1 <= nums[i] <= 10^3`Use brute force: two loops to select i and j, then select the maximum value of (nums[i]-1)*(nums[j]-1).",
          "output": "from collections import Counter\n\ndef minSetSize(arr):\n    count = Counter(arr)\n    freq = list(count.values())\n    freq.sort(reverse=True)\n\n    removed, setSize = 0, 0\n    for f in freq:\n        removed += f\n        setSize += 1\n        if removed * 2 >= len(arr):\n            return setSize\n\n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a rectangular cake of size `h x w` and two arrays of integers `horizontalCuts` and `verticalCuts` where:\n\n*   `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, and\n*   `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.\n\nReturn _the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays_ `horizontalCuts` _and_ `verticalCuts`. Since the answer can be a large number, return this **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** h = 5, w = 4, horizontalCuts = \\[1,2,4\\], verticalCuts = \\[1,3\\]\n**Output:** 4 \n**Explanation:** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.\n\n**Example 2:**\n\n**Input:** h = 5, w = 4, horizontalCuts = \\[3,1\\], verticalCuts = \\[1\\]\n**Output:** 6\n**Explanation:** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.\n\n**Example 3:**\n\n**Input:** h = 5, w = 4, horizontalCuts = \\[3\\], verticalCuts = \\[3\\]\n**Output:** 9\n\n**Constraints:**\n\n*   `2 <= h, w <= 109`\n*   `1 <= horizontalCuts.length <= min(h - 1, 105)`\n*   `1 <= verticalCuts.length <= min(w - 1, 105)`\n*   `1 <= horizontalCuts[i] < h`\n*   `1 <= verticalCuts[i] < w`\n*   All the elements in `horizontalCuts` are distinct.\n*   All the elements in `verticalCuts` are distinct.Sort the arrays, then compute the maximum difference between two consecutive elements for horizontal cuts and vertical cuts. The answer is the product of these maximum values in horizontal cuts and vertical cuts.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def maxProduct(self, root: TreeNode) -> int:\n        def dfs(node):\n            if not node:\n                return 0\n            return node.val + dfs(node.left) + dfs(node.right)\n\n        def dfs2(node, half):\n            nonlocal result\n\n            if not node:\n                return 0\n            cur_sum = node.val + dfs2(node.left, half) + dfs2(node.right, half)\n            result = max(result, (total - cur_sum) * cur_sum)\n            return cur_sum\n\n        total = dfs(root)\n        result = 0\n        dfs2(root, total / 2)\n        return result % (10**9 + 7)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cities numbered from `0` to `n - 1` and `n - 1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\n\nRoads are represented by `connections` where `connections[i] = [ai, bi]` represents a road from city `ai` to city `bi`.\n\nThis year, there will be a big event in the capital (city `0`), and many people want to travel to this city.\n\nYour task consists of reorienting some roads such that each city can visit the city `0`. Return the **minimum** number of edges changed.\n\nIt's **guaranteed** that each city can reach city `0` after reorder.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, connections = \\[\\[0,1\\],\\[1,3\\],\\[2,3\\],\\[4,0\\],\\[4,5\\]\\]\n**Output:** 3\n**Explanation:** Change the direction of edges show in red such that each node can reach the node 0 (capital).\n\n**Example 2:**\n\n**Input:** n = 5, connections = \\[\\[1,0\\],\\[1,2\\],\\[3,2\\],\\[3,4\\]\\]\n**Output:** 2\n**Explanation:** Change the direction of edges show in red such that each node can reach the node 0 (capital).\n\n**Example 3:**\n\n**Input:** n = 3, connections = \\[\\[1,0\\],\\[2,0\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `2 <= n <= 5 * 104`\n*   `connections.length == n - 1`\n*   `connections[i].length == 2`\n*   `0 <= ai, bi <= n - 1`\n*   `ai != bi`Treat the graph as undirected. Start a dfs from the root, if you come across an edge in the forward direction, you need to reverse the edge.",
          "output": "def maxJumps(arr, d):\n    n = len(arr)\n    dp = [1] * n\n\n    def helper(idx):\n        if dp[idx] > 1:\n            return dp[idx]\n        maximum = 1\n        for i in range(1, d + 1):\n            if idx + i < n and arr[idx] <= arr[idx + i]:\n                break\n            if idx + i < n:\n                maximum = max(maximum, 1 + helper(idx + i))\n\n            if idx - i >= 0 and arr[idx] <= arr[idx - i]:\n                break\n            if idx - i >= 0:\n                maximum = max(maximum, 1 + helper(idx - i))\n        \n        dp[idx] = maximum\n        return maximum\n\n    for i in range(n):\n        helper(i)\n\n    return max(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: Given `2n` balls of `k` distinct colors. You will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`.\n\nAll the balls will be **shuffled uniformly at random**, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (Please read the explanation of the second example carefully).\n\nPlease note that the two boxes are considered different. For example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a)` (Please read the explanation of the first example carefully).\n\nReturn _the probability_ that the two boxes have the same number of distinct balls. Answers within `10-5` of the actual value will be accepted as correct.\n\n",
          "input": "**Example 1:**\n\n**Input:** balls = \\[1,1\\]\n**Output:** 1.00000\n**Explanation:** Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n\n**Example 2:**\n\n**Input:** balls = \\[2,1,1\\]\n**Output:** 0.66667\n**Explanation:** We have the set of balls \\[1, 1, 2, 3\\]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n\\[1,1 / 2,3\\], \\[1,1 / 3,2\\], \\[1,2 / 1,3\\], \\[1,2 / 3,1\\], \\[1,3 / 1,2\\], \\[1,3 / 2,1\\], \\[2,1 / 1,3\\], \\[2,1 / 3,1\\], \\[2,3 / 1,1\\], \\[3,1 / 1,2\\], \\[3,1 / 2,1\\], \\[3,2 / 1,1\\]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667\n\n**Example 3:**\n\n**Input:** balls = \\[1,2,1,2\\]\n**Output:** 0.60000\n**Explanation:** The set of balls is \\[1, 2, 2, 3, 4, 4\\]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6\n\n**Constraints:**\n\n*   `1 <= balls.length <= 8`\n*   `1 <= balls[i] <= 6`\n*   `sum(balls)` is even.Check how many ways you can distribute the balls between the boxes. Consider that one way you will use (x1, x2, x3, ..., xk) where xi is the number of balls from colour i. The probability of achieving this way randomly is ( (ball1 C x1) * (ball2 C x2) * (ball3 C x3) * ... * (ballk C xk)) / (2n C n). The probability of a draw is the sigma of probabilities of different ways to achieve draw. Can you use Dynamic programming to solve this problem in a better complexity ?",
          "output": "from math import factorial\n\ndef count_combinations(balls, combinations, curr_ball):\n    total_combinations = 1\n    for i in range(curr_ball):\n        total_combinations *= factorial(balls[i] + combinations[i]) / (factorial(balls[i]) * factorial(combinations[i]))\n\n    return total_combinations\n\ndef dfs(balls, combinations, curr_ball):\n    if curr_ball == len(balls):\n        if combinations[-1] == combinations[0]:\n            return count_combinations(balls, combinations, curr_ball)\n        else:\n            return 0\n\n    result = 0\n    for i in range(balls[curr_ball] + 1):\n        combinations.append(i)\n        result += dfs(balls, combinations, curr_ball + 1)\n        combinations.pop()\n\n    return result\n\ndef get_probability(balls):\n    sum_balls = sum(balls)\n\n    total_combinations = 1\n    for ball in balls:\n        total_combinations *= factorial(ball)\n\n    combinations = []\n    return dfs(balls, combinations, 0) / total_combinations\n"
     },
     {
          "instruction": "Write python code for this problem: Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.\n\n_Return the array in the form_ `[x1,y1,x2,y2,...,xn,yn]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,5,1,3,4,7\\], n = 3\n**Output:** \\[2,3,5,4,1,7\\] \n**Explanation:** Since x1\\=2, x2\\=5, x3\\=1, y1\\=3, y2\\=4, y3\\=7 then the answer is \\[2,3,5,4,1,7\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,4,3,2,1\\], n = 4\n**Output:** \\[1,4,2,3,3,2,4,1\\]\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,2,2\\], n = 2\n**Output:** \\[1,2,1,2\\]\n\n**Constraints:**\n\n*   `1 <= n <= 500`\n*   `nums.length == 2n`\n*   `1 <= nums[i] <= 10^3`Use two pointers to create the new array of 2n elements. The first starting at the beginning and the other starting at (n+1)th position. Alternate between them and create the new array.",
          "output": "from collections import defaultdict\nfrom typing import List\n\nclass TweetCounts:\n\n    def __init__(self):\n        self.tweet_records = defaultdict(lambda: defaultdict(int))\n\n    def recordTweet(self, tweetName: str, time: int) -> None:\n        self.tweet_records[tweetName][time] += 1\n\n    def getTweetCountsPerFrequency(self, freq: str, tweetName: str, startTime: int, endTime: int) -> List[int]:\n        if freq == \"minute\":\n            interval = 60\n        elif freq == \"hour\":\n            interval = 3600\n        else:\n            interval = 86400\n\n        result = [0] * ((endTime - startTime) // interval + 1)\n        for time, count in self.tweet_records[tweetName].items():\n            if startTime <= time <= endTime:\n                result[(time - startTime) // interval] += count\n\n        return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr` and an integer `k`.\n\nA value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the **median** of the array.  \nIf `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`.\n\nReturn _a list of the strongest `k`_ values in the array. return the answer **in any arbitrary order**.\n\n**Median** is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list **(0-indexed)**.\n\n*   For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.\n*   For `arr = [-7, 22, 17,\u20093]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3,4,5\\], k = 2\n**Output:** \\[5,1\\]\n**Explanation:** Median is 3, the elements of the array sorted by the strongest are \\[5,1,4,2,3\\]. The strongest 2 elements are \\[5, 1\\]. \\[1, 5\\] is also **accepted** answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,3,5,5\\], k = 2\n**Output:** \\[5,5\\]\n**Explanation:** Median is 3, the elements of the array sorted by the strongest are \\[5,5,1,1,3\\]. The strongest 2 elements are \\[5, 5\\].\n\n**Example 3:**\n\n**Input:** arr = \\[6,7,11,7,6,8\\], k = 5\n**Output:** \\[11,8,6,6,7\\]\n**Explanation:** Median is 7, the elements of the array sorted by the strongest are \\[11,8,6,6,7,7\\].\nAny permutation of \\[11,8,6,6,7\\] is **accepted**.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `-105 <= arr[i] <= 105`\n*   `1 <= k <= arr.length`Calculate the median of the array as defined in the statement. Use custom sort function to sort values (Strongest first), then slice the first k.",
          "output": "def maxStudents(seats):\n    m, n = len(seats), len(seats[0])\n    valid_rows = [0] * m\n    max_valid = (1 << n) - 1\n    for i in range(m):\n        state = 0\n        for j in range(n):\n            state |= (seats[i][j] == '.') << j\n        valid_rows[i] = state\n\n    memo = [[-1] * (1 << n) for _ in range(m)]\n    return dfs(0, 0, valid_rows, m, n, max_valid, memo)\n\ndef dfs(row_index, prev_state, valid_rows, m, n, max_valid, memo):\n    if row_index == m:\n        return 0\n\n    if memo[row_index][prev_state] != -1:\n        return memo[row_index][prev_state]\n\n    max_students = 0\n    for cur_state in range(max_valid + 1):\n        if (cur_state & valid_rows[row_index]) != cur_state:\n            continue\n        if cur_state & (cur_state << 1):\n            continue\n        if cur_state & (prev_state << 1) or prev_state & (cur_state << 1):\n            continue\n\n        max_students = max(max_students, dfs(row_index + 1, cur_state, valid_rows, m, n, max_valid, memo) + bin(cur_state).count('1'))\n\n    memo[row_index][prev_state] = max_students\n    return max_students\n"
     },
     {
          "instruction": "Write python code for this problem: You have a **browser** of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`.\n\nImplement the `BrowserHistory` class:\n\n*   `BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser.\n*   `void visit(string url)` Visits `url` from the current page. It clears up all the forward history.\n*   `string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history **at most** `steps`.\n*   `string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history **at most** `steps`.\n\n**Example:**\n\n**Input:**\n\\[ \"BrowserHistory \", \"visit \", \"visit \", \"visit \", \"back \", \"back \", \"forward \", \"visit \", \"forward \", \"back \", \"back \"\\]\n\\[\\[ \"leetcode.com \"\\],\\[ \"google.com \"\\],\\[ \"facebook.com \"\\],\\[ \"youtube.com \"\\],\\[1\\],\\[1\\],\\[1\\],\\[ \"linkedin.com \"\\],\\[2\\],\\[2\\],\\[7\\]\\]\n**Output:**\n\\[null,null,null,null, \"facebook.com \", \"google.com \", \"facebook.com \",null, \"linkedin.com \", \"google.com \", \"leetcode.com \"\\]\n\n**Explanation:**\nBrowserHistory browserHistory = new BrowserHistory( \"leetcode.com \");\nbrowserHistory.visit( \"google.com \");       // You are in  \"leetcode.com \". Visit  \"google.com \"\nbrowserHistory.visit( \"facebook.com \");     // You are in  \"google.com \". Visit  \"facebook.com \"\nbrowserHistory.visit( \"youtube.com \");      // You are in  \"facebook.com \". Visit  \"youtube.com \"\nbrowserHistory.back(1);                   // You are in  \"youtube.com \", move back to  \"facebook.com \" return  \"facebook.com \"\nbrowserHistory.back(1);                   // You are in  \"facebook.com \", move back to  \"google.com \" return  \"google.com \"\nbrowserHistory.forward(1);                // You are in  \"google.com \", move forward to  \"facebook.com \" return  \"facebook.com \"\nbrowserHistory.visit( \"linkedin.com \");     // You are in  \"facebook.com \". Visit  \"linkedin.com \"\nbrowserHistory.forward(2);                // You are in  \"linkedin.com \", you cannot move forward any steps.\nbrowserHistory.back(2);                   // You are in  \"linkedin.com \", move back two steps to  \"facebook.com \" then to  \"google.com \". return  \"google.com \"\nbrowserHistory.back(7);                   // You are in  \"google.com \", you can move back only one step to  \"leetcode.com \". return  \"leetcode.com \"\n\n**Constraints:**\n\n*   `1 <= homepage.length <= 20`\n*   `1 <= url.length <= 20`\n*   `1 <= steps <= 100`\n*   `homepage` and `url` consist of '.' or lower case English letters.\n*   At most `5000` calls will be made to `visit`, `back`, and `forward`",
          "input": ".Use two stack one for back history and one for forward history and simulate the functions. Can you do faster by using different data structure ?",
          "output": "from collections import OrderedDict\n\ndef sortString(s: str) -> str:\n    freq_map = OrderedDict(sorted({c: s.count(c) for c in set(s)}.items()))\n    result = []\n\n    while freq_map:\n        for key in list(freq_map.keys()):\n            result.append(key)\n            freq_map[key] -= 1\n\n            if freq_map[key] == 0:\n                del freq_map[key]\n\n        for key in list(reversed(freq_map.keys())):\n            result.append(key)\n            freq_map[key] -= 1\n\n            if freq_map[key] == 0:\n                del freq_map[key]\n\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again.\n\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\n\n*   For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.\n\nGiven an array `houses`, an `m x n` matrix `cost` and an integer `target` where:\n\n*   `houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet.\n*   `cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.\n\nReturn _the minimum cost of painting all the remaining houses in such a way that there are exactly_ `target` _neighborhoods_. If it is not possible, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** houses = \\[0,0,0,0,0\\], cost = \\[\\[1,10\\],\\[10,1\\],\\[10,1\\],\\[1,10\\],\\[5,1\\]\\], m = 5, n = 2, target = 3\n**Output:** 9\n**Explanation:** Paint houses of this way \\[1,2,2,1,1\\]\nThis array contains target = 3 neighborhoods, \\[{1}, {2,2}, {1,1}\\].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.\n\n**Example 2:**\n\n**Input:** houses = \\[0,2,1,2,0\\], cost = \\[\\[1,10\\],\\[10,1\\],\\[10,1\\],\\[1,10\\],\\[5,1\\]\\], m = 5, n = 2, target = 3\n**Output:** 11\n**Explanation:** Some houses are already painted, Paint the houses of this way \\[2,2,1,2,2\\]\nThis array contains target = 3 neighborhoods, \\[{2,2}, {1}, {2,2}\\]. \nCost of paint the first and last house (10 + 1) = 11.\n\n**Example 3:**\n\n**Input:** houses = \\[3,1,2,3\\], cost = \\[\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\],\\[1,1,1\\]\\], m = 4, n = 3, target = 3\n**Output:** -1\n**Explanation:** Houses are already painted with a total of 4 neighborhoods \\[{3},{1},{2},{3}\\] different of target = 3.\n\n**Constraints:**\n\n*   `m == houses.length == cost.length`\n*   `n == cost[i].length`\n*   `1 <= m <= 100`\n*   `1 <= n <= 20`\n*   `1 <= target <= m`\n*   `0 <= houses[i] <= n`\n*   `1 <= cost[i][j] <= 104`Use Dynamic programming. Define dp[i][j][k] as the minimum cost where we have k neighborhoods in the first i houses and the i-th house is painted with the color j.",
          "output": "def findTheLongestSubstring(s: str) -> int:\n    pos = {-1: 0}\n    ans = cur = 0\n    for i, c in enumerate(s):\n        cur ^= 1 << (\"aeiou\".find(c) + 1) >> 1\n        if cur not in pos:\n            pos[cur] = i + 1\n        ans = max(ans, i + 1 - pos[cur])\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of **unique** integers `salary` where `salary[i]` is the salary of the `ith` employee.\n\nReturn _the average salary of employees excluding the minimum and maximum salary_. Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** salary = \\[4000,3000,1000,2000\\]\n**Output:** 2500.00000\n**Explanation:** Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500\n\n**Example 2:**\n\n**Input:** salary = \\[1000,2000,3000\\]\n**Output:** 2000.00000\n**Explanation:** Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000\n\n**Constraints:**\n\n*   `3 <= salary.length <= 100`\n*   `1000 <= salary[i] <= 106`\n*   All the integers of `salary` are **unique**.Get the total sum and subtract the minimum and maximum value in the array.  Finally divide the result by n - 2.",
          "output": "def count_prefix_aligned(flips):\n    count = 0\n    for i in range(len(flips)):\n        if flips[i] == i + 1:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two positive integers `n` and `k`. A factor of an integer `n` is defined as an integer `i` where `n % i == 0`.\n\nConsider a list of all factors of `n` sorted in **ascending order**, return _the_ `kth` _factor_ in this list or return `-1` if `n` has less than `k` factors.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 12, k = 3\n**Output:** 3\n**Explanation:** Factors list is \\[1, 2, 3, 4, 6, 12\\], the 3rd factor is 3.\n\n**Example 2:**\n\n**Input:** n = 7, k = 2\n**Output:** 7\n**Explanation:** Factors list is \\[1, 7\\], the 2nd factor is 7.\n\n**Example 3:**\n\n**Input:** n = 4, k = 4\n**Output:** -1\n**Explanation:** Factors list is \\[1, 2, 4\\], there is only 3 factors. We should return -1.\n\n**Constraints:**\n\n*   `1 <= k <= n <= 1000`\n\n**Follow up:**\n\nCould you solve this problem in less than O(n) complexity?The factors of n will be always in the range [1, n]. Keep a list of all factors sorted.  Loop i from 1 to n and add i if n % i == 0. Return the kth factor if it exist in this list.",
          "output": "from collections import deque\n\ndef numOfMinutes(n, headID, manager, informTime):\n    subordinates = {i: [] for i in range(n)}\n    for i in range(n):\n        if manager[i] != -1:\n            subordinates[manager[i]].append(i)\n\n    queue = deque([(headID, 0)])\n    totalTime = 0\n\n    while queue:\n        current, time = queue.popleft()\n        totalTime = max(totalTime, time)\n        for sub in subordinates[current]:\n            queue.append((sub, time + informTime[current]))\n\n    return totalTime\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary array `nums`, you should delete one element from it.\n\nReturn _the size of the longest non-empty subarray containing only_ `1`_'s in the resulting array_. Return `0` if there is no such subarray.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,0,1\\]\n**Output:** 3\n**Explanation:** After deleting the number in position 2, \\[1,1,1\\] contains 3 numbers with value of 1's.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,1,1,0,1,1,0,1\\]\n**Output:** 5\n**Explanation:** After deleting the number in position 4, \\[0,1,1,1,1,1,0,1\\] longest subarray with value of 1's is \\[1,1,1,1,1\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 2\n**Explanation:** You must delete one element.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`.Maintain a sliding window where there is at most one zero on it.",
          "output": "from collections import defaultdict\n\ndef frogPosition(n, edges, t, target):\n    graph = defaultdict(list)\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    return dfs(1, -1, t, target, graph)\n\ndef dfs(node, parent, t, target, graph):\n    if t == 0:\n        return 1.0 if node == target else 0.0\n    probability = 0.0\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            probability += dfs(neighbor, node, t - 1, target, graph)\n    return probability / (len(graph[node]) - (0 if parent == -1 else 1))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`. Also, you are given the integer `k`.\n\nIn one semester, you can take **at most** `k` courses as long as you have taken all the prerequisites in the **previous** semesters for the courses you are taking.\n\nReturn _the **minimum** number of semesters needed to take all courses_. The testcases will be generated such that it is possible to take every course.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, relations = \\[\\[2,1\\],\\[3,1\\],\\[1,4\\]\\], k = 2\n**Output:** 3\n**Explanation:** The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4.\n\n**Example 2:**\n\n**Input:** n = 5, relations = \\[\\[2,1\\],\\[3,1\\],\\[4,1\\],\\[1,5\\]\\], k = 2\n**Output:** 4\n**Explanation:** The figure above represents the given graph.\nIn the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5.\n\n**Constraints:**\n\n*   `1 <= n <= 15`\n*   `1 <= k <= n`\n*   `0 <= relations.length <= n * (n-1) / 2`\n*   `relations[i].length == 2`\n*   `1 <= prevCoursei, nextCoursei <= n`\n*   `prevCoursei != nextCoursei`\n*   All the pairs `[prevCoursei, nextCoursei]` are **unique**.\n*   The given graph is a directed acyclic graph.Use backtracking with states (bitmask, degrees) where bitmask represents the set of courses, if the ith bit is 1 then the ith course was taken, otherwise, you can take the ith course. Degrees represent the degree for each course (nodes in the graph). Note that you can only take nodes (courses) with degree = 0 and it is optimal at every step in the backtracking take the maximum number of courses limited by k.",
          "output": "from collections import deque\n\ndef minNumberOfSemesters(n, relations, k):\n    indegree = [0] * (n + 1)\n    graph = [[] for _ in range(n + 1)]\n\n    for prev_course, next_course in relations:\n        graph[prev_course].append(next_course)\n        indegree[next_course] += 1\n\n    semesters = 0\n    while n > 0:\n        zero_indegree = deque()\n        for i in range(1, len(indegree)):\n            if indegree[i] == 0:\n                zero_indegree.append(i)\n                indegree[i] = -1\n\n        courses = 0\n        while zero_indegree and courses < k:\n            curr_course = zero_indegree.popleft()\n            n -= 1\n\n            for next_course in graph[curr_course]:\n                indegree[next_course] -= 1\n            courses += 1\n        semesters += 1\n    return semesters\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums`. We define a running sum of an array as `runningSum[i] = sum(nums[0]...nums[i])`.\n\nReturn the running sum of `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** \\[1,3,6,10\\]\n**Explanation:** Running sum is obtained as follows: \\[1, 1+2, 1+2+3, 1+2+3+4\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1,1\\]\n**Output:** \\[1,2,3,4,5\\]\n**Explanation:** Running sum is obtained as follows: \\[1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1\\].\n\n**Example 3:**\n\n**Input:** nums = \\[3,1,2,10,1\\]\n**Output:** \\[3,4,6,16,17\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-10^6 <= nums[i] <= 10^6`Think about how we can calculate the i-th number in the running sum from the (i-1)-th number.",
          "output": "def runningSum(nums):\n    for i in range(1, len(nums)):\n        nums[i] += nums[i - 1]\n    return nums\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr` and an integer `k`. Find the _least number of unique integers_ after removing **exactly** `k` elements**.**\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[5,5,4\\], k = 1\n**Output:** 1\n**Explanation**: Remove the single 4, only 5 is left.\n\n**Example 2:**\n\n**Input:** arr = \\[4,3,1,1,3,3,2\\], k = 3\n**Output:** 2\n**Explanation**: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 10^5`\n*   `1 <= arr[i] <= 10^9`\n*   `0 <= k <= arr.length`Use a map to count the frequencies of the numbers in the array. An optimal strategy is to remove the numbers with the smallest count first.",
          "output": "from collections import Counter\nimport heapq\n\ndef findLeastNumOfUniqueInts(arr, k):\n    count = Counter(arr)\n    pq = list(count.values())\n    heapq.heapify(pq)\n    while k > 0:\n        k -= heapq.heappop(pq)\n    return len(pq) if k == 0 else len(pq) + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `bloomDay`, an integer `m` and an integer `k`.\n\nYou want to make `m` bouquets. To make a bouquet, you need to use `k` **adjacent flowers** from the garden.\n\nThe garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in **exactly one** bouquet.\n\nReturn _the minimum number of days you need to wait to be able to make_ `m` _bouquets from the garden_. If it is impossible to make m bouquets return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** bloomDay = \\[1,10,3,10,2\\], m = 3, k = 1\n**Output:** 3\n**Explanation:** Let us see what happened in the first three days. x means flower bloomed and \\_ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: \\[x, \\_, \\_, \\_, \\_\\]   // we can only make one bouquet.\nAfter day 2: \\[x, \\_, \\_, \\_, x\\]   // we can only make two bouquets.\nAfter day 3: \\[x, \\_, x, \\_, x\\]   // we can make 3 bouquets. The answer is 3.\n\n**Example 2:**\n\n**Input:** bloomDay = \\[1,10,3,10,2\\], m = 3, k = 2\n**Output:** -1\n**Explanation:** We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.\n\n**Example 3:**\n\n**Input:** bloomDay = \\[7,7,7,7,12,7,7\\], m = 2, k = 3\n**Output:** 12\n**Explanation:** We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: \\[x, x, x, x, \\_, x, x\\]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: \\[x, x, x, x, x, x, x\\]\nIt is obvious that we can make two bouquets in different ways.\n\n**Constraints:**\n\n*   `bloomDay.length == n`\n*   `1 <= n <= 105`\n*   `1 <= bloomDay[i] <= 109`\n*   `1 <= m <= 106`\n*   `1 <= k <= n`If we can make m or more bouquets at day x, then we can still make m or more bouquets at any day y > x. We can check easily if we can make enough bouquets at day x if we can get group adjacent flowers at day x.",
          "output": "def smallerNumbersThanCurrent(nums):\n    result = [0] * len(nums)\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[j] < nums[i]:\n                result[i] += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: In a binary tree, a **lonely** node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.\n\nGiven the `root` of a binary tree, return _an array containing the values of all lonely nodes_ in the tree. Return the list **in any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,null,4\\]\n**Output:** \\[4\\]\n**Explanation:** Light blue node is the only lonely node.\nNode 1 is the root and is not lonely.\nNodes 2 and 3 have the same parent and are not lonely.\n\n**Example 2:**\n\n**Input:** root = \\[7,1,4,6,null,5,3,null,null,null,null,null,2\\]\n**Output:** \\[6,2\\]\n**Explanation:** Light blue nodes are lonely nodes.\nPlease remember that order doesn't matter, \\[2,6\\] is also an acceptable answer.\n\n**Example 3:**\n\n**Input:** root = \\[11,99,88,77,null,null,66,55,null,null,44,33,null,null,22\\]\n**Output:** \\[77,55,33,66,44,22\\]\n**Explanation:** Nodes 99 and 88 share the same parent. Node 11 is the root.\nAll other nodes are lonely.\n\n**Constraints:**\n\n*   The number of nodes in the `tree` is in the range `[1, 1000].`\n*   `1 <= Node.val <= 106`Do a simple tree traversal, try to check if the current node is lonely or not. Node is lonely if at least one of the left/right pointers is null.",
          "output": "def min_steps(s, t):\n    count_s = [0] * 26\n    count_t = [0] * 26\n    steps = 0\n    \n    for c in s:\n        count_s[ord(c) - ord('a')] += 1\n    for c in t:\n        count_t[ord(c) - ord('a')] += 1\n    \n    for i in range(26):\n        steps += abs(count_s[i] - count_t[i])\n    \n    return steps // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` and an integer `start`.\n\nDefine an array `nums` where `nums[i] = start + 2 * i` (**0-indexed**) and `n == nums.length`.\n\nReturn _the bitwise XOR of all elements of_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, start = 0\n**Output:** 8\n**Explanation:** Array nums is equal to \\[0, 2, 4, 6, 8\\] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere  \"^ \" corresponds to bitwise XOR operator.\n\n**Example 2:**\n\n**Input:** n = 4, start = 3\n**Output:** 8\n**Explanation:** Array nums is equal to \\[3, 5, 7, 9\\] where (3 ^ 5 ^ 7 ^ 9) = 8.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `0 <= start <= 1000`\n*   `n == nums.length`Simulate the process, create an array nums and return the Bitwise XOR of all elements of it.",
          "output": "def findTheDistanceValue(arr1, arr2, d):\n    count = 0\n    for i in arr1:\n        valid = True\n        for j in arr2:\n            if abs(i - j) <= d:\n                valid = False\n                break\n        if valid:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `names` of size `n`. You will create `n` folders in your file system **such that**, at the `ith` minute, you will create a folder with the name `names[i]`.\n\nSince two files **cannot** have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the **smallest positive integer** such that the obtained name remains unique.\n\nReturn _an array of strings of length_ `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.\n\n",
          "input": "**Example 1:**\n\n**Input:** names = \\[ \"pes \", \"fifa \", \"gta \", \"pes(2019) \"\\]\n**Output:** \\[ \"pes \", \"fifa \", \"gta \", \"pes(2019) \"\\]\n**Explanation:** Let's see how the file system creates folder names:\n \"pes \" --> not assigned before, remains  \"pes \"\n \"fifa \" --> not assigned before, remains  \"fifa \"\n \"gta \" --> not assigned before, remains  \"gta \"\n \"pes(2019) \" --> not assigned before, remains  \"pes(2019) \"\n\n**Example 2:**\n\n**Input:** names = \\[ \"gta \", \"gta(1) \", \"gta \", \"avalon \"\\]\n**Output:** \\[ \"gta \", \"gta(1) \", \"gta(2) \", \"avalon \"\\]\n**Explanation:** Let's see how the file system creates folder names:\n \"gta \" --> not assigned before, remains  \"gta \"\n \"gta(1) \" --> not assigned before, remains  \"gta(1) \"\n \"gta \" --> the name is reserved, system adds (k), since  \"gta(1) \" is also reserved, systems put k = 2. it becomes  \"gta(2) \"\n \"avalon \" --> not assigned before, remains  \"avalon \"\n\n**Example 3:**\n\n**Input:** names = \\[ \"onepiece \", \"onepiece(1) \", \"onepiece(2) \", \"onepiece(3) \", \"onepiece \"\\]\n**Output:** \\[ \"onepiece \", \"onepiece(1) \", \"onepiece(2) \", \"onepiece(3) \", \"onepiece(4) \"\\]\n**Explanation:** When the last folder is created, the smallest positive valid k is 4, and it becomes  \"onepiece(4) \".\n\n**Constraints:**\n\n*   `1 <= names.length <= 5 * 104`\n*   `1 <= names[i].length <= 20`\n*   `names[i]` consists of lowercase English letters, digits, and/or round brackets.Keep a map of each name and the smallest valid integer that can be appended as a suffix to it. If the name is not present in the map, you can use it without adding any suffixes. If the name is present in the map, append the smallest proper suffix, and add the new name to the map.",
          "output": "def maxNumberOfFamilies(n, reservedSeats):\n    rows = {}\n    for seat in reservedSeats:\n        rows[seat[0]] = rows.get(seat[0], 0) | (1 << (seat[1] - 1))\n    \n    max_groups = (n - len(rows)) * 2\n    for row_mask in rows.values():\n        seats = ~(row_mask | (row_mask >> 1) | (row_mask >> 2) | (row_mask >> 3)) & 0x3FF\n        max_groups += (seats & (seats >> 1) & (seats >> 2) & (seats >> 3)) != 0\n        \n    return max_groups\n"
     },
     {
          "instruction": "Write python code for this problem: Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake that is **full of water**, there will be a **flood**. Your goal is to avoid floods in any lake.\n\nGiven an integer array `rains` where:\n\n*   `rains[i] > 0` means there will be rains over the `rains[i]` lake.\n*   `rains[i] == 0` means there are no rains this day and you can choose **one lake** this day and **dry it**.\n\nReturn _an array `ans`_ where:\n\n*   `ans.length == rains.length`\n*   `ans[i] == -1` if `rains[i] > 0`.\n*   `ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.\n\nIf there are multiple valid answers return **any** of them. If it is impossible to avoid flood return **an empty array**.\n\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.\n\n",
          "input": "**Example 1:**\n\n**Input:** rains = \\[1,2,3,4\\]\n**Output:** \\[-1,-1,-1,-1\\]\n**Explanation:** After the first day full lakes are \\[1\\]\nAfter the second day full lakes are \\[1,2\\]\nAfter the third day full lakes are \\[1,2,3\\]\nAfter the fourth day full lakes are \\[1,2,3,4\\]\nThere's no day to dry any lake and there is no flood in any lake.\n\n**Example 2:**\n\n**Input:** rains = \\[1,2,0,0,2,1\\]\n**Output:** \\[-1,-1,2,1,-1,-1\\]\n**Explanation:** After the first day full lakes are \\[1\\]\nAfter the second day full lakes are \\[1,2\\]\nAfter the third day, we dry lake 2. Full lakes are \\[1\\]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are \\[2\\].\nAfter the sixth day, full lakes are \\[1,2\\].\nIt is easy that this scenario is flood-free. \\[-1,-1,1,2,-1,-1\\] is another acceptable scenario.\n\n**Example 3:**\n\n**Input:** rains = \\[1,2,0,1,2\\]\n**Output:** \\[\\]\n**Explanation:** After the second day, full lakes are  \\[1,2\\]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes \\[1,2\\]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.\n\n**Constraints:**\n\n*   `1 <= rains.length <= 105`\n*   `0 <= rains[i] <= 109`Keep An array of the last day there was rains over each city. Keep an array of the days you can dry a lake when you face one. When it rains over a lake, check the first possible day you can dry this lake and assign this day to this lake.",
          "output": "def get_power(x):\n    steps = 0\n    while x != 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = 3 * x + 1\n        steps += 1\n    return steps\n\ndef sort_by_power(lo, hi, k):\n    nums = [(get_power(i), i) for i in range(lo, hi + 1)]\n    nums.sort()\n    return nums[k - 1][1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes `ai` and `bi`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.\n\nFind _all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST)_. An MST edge whose deletion from the graph would cause the MST weight to increase is called a _critical edge_. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\n\nNote that you can return the indices of the edges in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, edges = \\[\\[0,1,1\\],\\[1,2,1\\],\\[2,3,2\\],\\[0,3,2\\],\\[0,4,3\\],\\[3,4,3\\],\\[1,4,6\\]\\]\n**Output:** \\[\\[0,1\\],\\[2,3,4,5\\]\\]\n**Explanation:** The figure above describes the graph.\nThe following figure shows all the possible MSTs:\n \nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.\n\n**Example 2:**\n\n**Input:** n = 4, edges = \\[\\[0,1,1\\],\\[1,2,1\\],\\[2,3,1\\],\\[0,3,1\\]\\]\n**Output:** \\[\\[\\],\\[0,1,2,3\\]\\]\n**Explanation:** We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `1 <= edges.length <= min(200, n * (n - 1) / 2)`\n*   `edges[i].length == 3`\n*   `0 <= ai < bi < n`\n*   `1 <= weighti <= 1000`\n*   All pairs `(ai, bi)` are **distinct**.Use the Kruskal algorithm to find the minimum spanning tree by sorting the edges and picking edges from ones with smaller weights. Use a disjoint set to avoid adding redundant edges that result in a cycle. To find if one edge is critical, delete that edge and re-run the MST algorithm and see if the weight of the new MST increases. To find if one edge is non-critical (in any MST), include that edge to the accepted edge list and continue the MST algorithm, then see if the resulting MST has the same weight of the initial MST of the entire graph.",
          "output": "def max_size_slices(slices):\n    def max_sum(slices, start, end, n, memo):\n        if n == 0:\n            return 0\n        if end - start + 1 < n * 2:\n            return float('-inf')\n        if memo[start][n] != -1:\n            return memo[start][n]\n\n        pick = max_sum(slices, start + 2, end, n - 1, memo) + slices[start]\n        not_pick = max_sum(slices, start + 1, end, n, memo)\n\n        memo[start][n] = max(pick, not_pick)\n        return memo[start][n]\n\n    n = len(slices) // 3\n    memo1 = [[-1] * (n + 1) for _ in range(len(slices))]\n    memo2 = [[-1] * (n + 1) for _ in range(len(slices))]\n\n    return max(max_sum(slices, 0, len(slices) - 1, n, memo1),\n               max_sum(slices, 1, len(slices), n, memo2))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.\n\n_Return the sum of the numbers from index_ `left` _to index_ `right` (**indexed from 1**)_, inclusive, in the new array._ Since the answer can be a huge number return it modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\], n = 4, left = 1, right = 5\n**Output:** 13 \n**Explanation:** All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array \\[1, 2, 3, 3, 4, 5, 6, 7, 9, 10\\]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. \n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\], n = 4, left = 3, right = 4\n**Output:** 6\n**Explanation:** The given array is the same as example 1. We have the new array \\[1, 2, 3, 3, 4, 5, 6, 7, 9, 10\\]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4\\], n = 4, left = 1, right = 10\n**Output:** 50\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 100`\n*   `1 <= left <= right <= n * (n + 1) / 2`Compute all sums and save it in array. Then just go from LEFT to RIGHT index and calculate answer modulo 1e9 + 7.",
          "output": "def longestHappyPrefix(s):\n    n = len(s)\n    lps = [0] * n\n    length = 0\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        elif length != 0:\n            length = lps[length - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return s[:lps[-1]]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`.\n\nIn one move, you can choose one element of `nums` and change it to **any value**.\n\nReturn _the minimum difference between the largest and smallest value of `nums` **after performing at most three moves**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,3,2,4\\]\n**Output:** 0\n**Explanation:** We can make at most 3 moves.\nIn the first move, change 2 to 3. nums becomes \\[5,3,3,4\\].\nIn the second move, change 4 to 3. nums becomes \\[5,3,3,3\\].\nIn the third move, change 5 to 3. nums becomes \\[3,3,3,3\\].\nAfter performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0.\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,0,10,14\\]\n**Output:** 1\n**Explanation:** We can make at most 3 moves.\nIn the first move, change 5 to 0. nums becomes \\[1,0,0,10,14\\].\nIn the second move, change 10 to 0. nums becomes \\[1,0,0,0,14\\].\nIn the third move, change 14 to 1. nums becomes \\[1,0,0,0,1\\].\nAfter performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 0.\nIt can be shown that there is no way to make the difference 0 in 3 moves.\n\n**Example 3:**\n\n**Input:** nums = \\[3,100,20\\]\n**Output:** 0\n**Explanation:** We can make at most 3 moves.\nIn the first move, change 100 to 7. nums becomes \\[4,7,20\\].\nIn the second move, change 20 to 7. nums becomes \\[4,7,7\\].\nIn the third move, change 4 to 3. nums becomes \\[7,7,7\\].\nAfter performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`The minimum difference possible is is obtained by removing 3 elements between the 3 smallest  and 3 largest values in the array.",
          "output": "def minDifference(nums):\n    n = len(nums)\n    if n <= 4: return 0\n    nums.sort()\n    res = float('inf')\n    for i in range(4):\n        res = min(res, nums[n - 4 + i] - nums[i])\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there are `n` stones in a pile. On each player's turn, that player makes a _move_ consisting of removing **any** non-zero **square number** of stones in the pile.\n\nAlso, if a player cannot make a move, he/she loses the game.\n\nGiven a positive integer `n`, return `true` if and only if Alice wins the game otherwise return `false`, assuming both players play optimally.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** true\n**Explanation:** Alice can remove 1 stone winning the game because Bob doesn't have any moves.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** false\n**Explanation:** Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:** true\n**Explanation:** n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).\n\n**Constraints:**\n\n*   `1 <= n <= 105`Use dynamic programming to keep track of winning and losing states. Given some number of stones, Alice can win if she can force Bob onto a losing state.",
          "output": "def find_lucky(arr):\n    freq = {}\n\n    for n in arr:\n        if n in freq:\n            freq[n] += 1\n        else:\n            freq[n] = 1\n\n    lucky = -1\n    for key, value in freq.items():\n        if key == value:\n            lucky = max(lucky, key)\n\n    return lucky\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `head` of a linked list and two integers `m` and `n`.\n\nTraverse the linked list and remove some nodes in the following way:\n\n*   Start with the head as the current node.\n*   Keep the first `m` nodes starting with the current node.\n*   Remove the next `n` nodes\n*   Keep repeating steps 2 and 3 until you reach the end of the list.\n\nReturn _the head of the modified list after removing the mentioned nodes_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5,6,7,8,9,10,11,12,13\\], m = 2, n = 3\n**Output:** \\[1,2,6,7,11,12\\]\n**Explanation:** Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes.\nDelete the next (n = 3) nodes (3 -> 4 -> 5) show in read nodes.\nContinue with the same procedure until reaching the tail of the Linked List.\nHead of the linked list after removing nodes is returned.\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4,5,6,7,8,9,10,11\\], m = 1, n = 3\n**Output:** \\[1,5,9\\]\n**Explanation:** Head of linked list after removing nodes is returned.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 104]`.\n*   `1 <= Node.val <= 106`\n*   `1 <= m, n <= 1000`\n\n**Follow up:** Could you solve this problem by modifying the list in-place?Traverse the Linked List, each time you need to delete the next n nodes connect the nodes previous deleting with the next node after deleting.",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef longestZigZag(root: TreeNode) -> int:\n    maxLen = [0]\n    \n    def longestZigZagUtil(root, left):\n        if not root:\n            return -1\n\n        leftZig = longestZigZagUtil(root.left, True)\n        rightZig = longestZigZagUtil(root.right, False)\n\n        maxLen[0] = max(maxLen[0], max(leftZig, rightZig) + 1)\n        return rightZig + 1 if left else leftZig + 1\n\n    longestZigZagUtil(root, True)\n    longestZigZagUtil(root, False)\n    return maxLen[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.\n\nReturn `true` _if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited_. Return `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** path =  \"NES \"\n**Output:** false \n**Explanation:** Notice that the path doesn't cross any point more than once.\n\n**Example 2:**\n\n**Input:** path =  \"NESWW \"\n**Output:** true\n**Explanation:** Notice that the path visits the origin twice.\n\n**Constraints:**\n\n*   `1 <= path.length <= 104`\n*   `path[i]` is either `'N'`, `'S'`, `'E'`, or `'W'`.Simulate the process while keeping track of visited points. Use a set to store previously visited points.",
          "output": "def lucky_numbers(matrix):\n    m, n = len(matrix), len(matrix[0])\n    lucky_numbers = []\n\n    for i in range(m):\n        min_row = min(matrix[i])\n        min_row_idx = matrix[i].index(min_row)\n        is_lucky = all(matrix[k][min_row_idx] <= min_row for k in range(m))\n\n        if is_lucky:\n            lucky_numbers.append(min_row)\n\n    return lucky_numbers\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `nums` and an integer `target`.\n\nReturn _the number of **non-empty** subsequences of_ `nums` _such that the sum of the minimum and maximum element on it is less or equal to_ `target`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,5,6,7\\], target = 9\n**Output:** 4\n**Explanation:** There are 4 subsequences that satisfy the condition.\n\\[3\\] -> Min value + max value <= target (3 + 3 <= 9)\n\\[3,5\\] -> (3 + 5 <= 9)\n\\[3,5,6\\] -> (3 + 6 <= 9)\n\\[3,6\\] -> (3 + 6 <= 9)\n\n**Example 2:**\n\n**Input:** nums = \\[3,3,6,8\\], target = 10\n**Output:** 6\n**Explanation:** There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n\\[3\\] , \\[3\\] , \\[3,3\\], \\[3,6\\] , \\[3,6\\] , \\[3,3,6\\]\n\n**Example 3:**\n\n**Input:** nums = \\[2,3,3,4,6,7\\], target = 12\n**Output:** 61\n**Explanation:** There are 63 non-empty subsequences, two of them do not satisfy the condition (\\[6,7\\], \\[7\\]).\nNumber of valid subsequences (63 - 2 = 61).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 106`\n*   `1 <= target <= 106`Sort the array nums. Use two pointers approach: Given an index i (choose it as the minimum in a subsequence) find the maximum j where j \u2265 i and nums[i] +nums[j] \u2264 target. Count the number of subsequences.",
          "output": "def getTargetCopy(self, original: TreeNode, cloned: TreeNode, target: TreeNode) -> TreeNode:\n    if original is None:\n        return None\n    if original is target:\n        return cloned\n\n    left = self.getTargetCopy(original.left, cloned.left, target)\n    return left if left else self.getTargetCopy(original.right, cloned.right, target)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `points` containing the coordinates of points on a 2D plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. You are also given an integer `k`.\n\nReturn _the maximum value of the equation_ `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`.\n\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,3\\],\\[2,0\\],\\[5,10\\],\\[6,-10\\]\\], k = 1\n**Output:** 4\n**Explanation:** The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1.\n\n**Example 2:**\n\n**Input:** points = \\[\\[0,0\\],\\[3,0\\],\\[9,2\\]\\], k = 3\n**Output:** 3\n**Explanation:** Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.\n\n**Constraints:**\n\n*   `2 <= points.length <= 105`\n*   `points[i].length == 2`\n*   `-108 <= xi, yi <= 108`\n*   `0 <= k <= 2 * 108`\n*   `xi < xj` for all `1 <= i < j <= points.length`\n*   `xi` form a strictly increasing sequence.Use a priority queue to store for each point i, the tuple [yi-xi, xi] Loop through the array and pop elements from the heap if the condition xj - xi > k, where j is the current index and i is the point on top the queue. After popping elements from the queue. If the queue is not empty, calculate the equation with the current point and the point on top of the queue and maximize the answer.",
          "output": "import heapq\n\ndef max_performance(n, k, speed, efficiency):\n    engineers = sorted(zip(efficiency, speed), reverse=True)\n\n    result = 0\n    sum_speed = 0\n    min_heap = []\n    for e, s in engineers:\n        if len(min_heap) >= k:\n            sum_speed -= heapq.heappop(min_heap)\n\n        heapq.heappush(min_heap, s)\n        sum_speed += s\n        result = max(result, e * sum_speed)\n\n    return result % (10**9 + 7)\n"
     },
     {
          "instruction": "Write python code for this problem: A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.\n\nReturn a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the tree.\n\nThe tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where:\n\n*   `val`: an integer representing `Node.val`\n*   `random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node.\n\nYou will be given the tree in class `Node` and you should return the cloned tree in class `NodeCopy`. `NodeCopy` class is just a clone of `Node` class with the same attributes and constructors.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[\\[1,null\\],null,\\[4,3\\],\\[7,0\\]\\]\n**Output:** \\[\\[1,null\\],null,\\[4,3\\],\\[7,0\\]\\]\n**Explanation:** The original binary tree is \\[1,null,4,7\\].\nThe random pointer of node one is null, so it is represented as \\[1, null\\].\nThe random pointer of node 4 is node 7, so it is represented as \\[4, 3\\] where 3 is the index of node 7 in the array representing the tree.\nThe random pointer of node 7 is node 1, so it is represented as \\[7, 0\\] where 0 is the index of node 1 in the array representing the tree.\n\n**Example 2:**\n\n**Input:** root = \\[\\[1,4\\],null,\\[1,0\\],null,\\[1,5\\],\\[1,5\\]\\]\n**Output:** \\[\\[1,4\\],null,\\[1,0\\],null,\\[1,5\\],\\[1,5\\]\\]\n**Explanation:** The random pointer of a node can be the node itself.\n\n**Example 3:**\n\n**Input:** root = \\[\\[1,6\\],\\[2,5\\],\\[3,4\\],\\[4,3\\],\\[5,2\\],\\[6,1\\],\\[7,0\\]\\]\n**Output:** \\[\\[1,6\\],\\[2,5\\],\\[3,4\\],\\[4,3\\],\\[5,2\\],\\[6,1\\],\\[7,0\\]\\]\n\n**Constraints:**\n\n*   The number of nodes in the `tree` is in the range `[0, 1000].`\n*   `1 <= Node.val <= 106`Traverse the tree, keep a hashtable with you and create a nodecopy for each node in the tree. Start traversing the original tree again and connect the left, right and random pointers in the cloned tree the same way as the original tree with the help of the hashtable.",
          "output": "from collections import deque\n\ndef minCost(grid):\n    def dfs(r, c, d):\n        if 0 <= r < m and 0 <= c < n and d < cost[r][c]:\n            cost[r][c] = d\n            q.append((r, c))\n\n    m, n = len(grid), len(grid[0])\n    cost = [[1e6] * n for _ in range(m)]\n\n    q = deque()\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    dfs(0, 0, 0)\n\n    while q:\n        r, c = q.popleft()\n        for i, (dr, dc) in enumerate(directions):\n            dfs(r + dr, c + dc, cost[r][c] + (grid[r][c] != i + 1))\n\n    return cost[-1][-1]\n"
     },
     {
          "instruction": "Write python code for this problem: A sequence of numbers is called an **arithmetic progression** if the difference between any two consecutive elements is the same.\n\nGiven an array of numbers `arr`, return `true` _if the array can be rearranged to form an **arithmetic progression**. Otherwise, return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,5,1\\]\n**Output:** true\n**Explanation:** We can reorder the elements as \\[1,3,5\\] or \\[5,3,1\\] with differences 2 and -2 respectively, between each consecutive elements.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,4\\]\n**Output:** false\n**Explanation:** There is no way to reorder the elements to obtain an arithmetic progression.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 1000`\n*   `-106 <= arr[i] <= 106`Consider that any valid arithmetic progression will be in sorted order. Sort the array, then check if the differences of all consecutive elements are equal.",
          "output": "def can_construct(s, k):\n    char_counts = [0] * 26\n\n    for c in s:\n        char_counts[ord(c) - ord('a')] += 1\n\n    odd_count = sum(count % 2 for count in char_counts)\n\n    return odd_count <= k <= len(s)\n"
     },
     {
          "instruction": "Write python code for this problem: We have a wooden plank of the length `n` **units**. Some ants are walking on the plank, each ant moves with a speed of **1 unit per second**. Some of the ants move to the **left**, the other move to the **right**.\n\nWhen two ants moving in two **different** directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.\n\nWhen an ant reaches **one end** of the plank at a time `t`, it falls out of the plank immediately.\n\nGiven an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right, return _the moment when the last ant(s) fall out of the plank_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, left = \\[4,3\\], right = \\[0,1\\]\n**Output:** 4\n**Explanation:** In the image above:\n-The ant at index 0 is named A and going to the right.\n-The ant at index 1 is named B and going to the right.\n-The ant at index 3 is named C and going to the left.\n-The ant at index 4 is named D and going to the left.\nThe last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank).\n\n**Example 2:**\n\n**Input:** n = 7, left = \\[\\], right = \\[0,1,2,3,4,5,6,7\\]\n**Output:** 7\n**Explanation:** All ants are going to the right, the ant at index 0 needs 7 seconds to fall.\n\n**Example 3:**\n\n**Input:** n = 7, left = \\[0,1,2,3,4,5,6,7\\], right = \\[\\]\n**Output:** 7\n**Explanation:** All ants are going to the left, the ant at index 7 needs 7 seconds to fall.\n\n**Constraints:**\n\n*   `1 <= n <= 104`\n*   `0 <= left.length <= n + 1`\n*   `0 <= left[i] <= n`\n*   `0 <= right.length <= n + 1`\n*   `0 <= right[i] <= n`\n*   `1 <= left.length + right.length <= n + 1`\n*   All values of `left` and `right` are unique, and each value can appear **only in one** of the two arrays.The ants change their way when they meet is equivalent to continue moving without changing their direction. Answer is the max distance for one ant to reach the end of the plank in the facing direction.",
          "output": "def max_satisfaction(satisfaction):\n    satisfaction.sort(reverse=True)\n    ans = total = sum = 0\n    for i in satisfaction:\n        total += i\n        if total > 0:\n            sum += total\n            ans = max(ans, sum)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` binary matrix `mat`, _return the number of **submatrices** that have all ones_.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,0,1\\],\\[1,1,0\\],\\[1,1,0\\]\\]\n**Output:** 13\n**Explanation:** \nThere are 6 rectangles of side 1x1.\nThere are 2 rectangles of side 1x2.\nThere are 3 rectangles of side 2x1.\nThere is 1 rectangle of side 2x2. \nThere is 1 rectangle of side 3x1.\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[0,1,1,0\\],\\[0,1,1,1\\],\\[1,1,1,0\\]\\]\n**Output:** 24\n**Explanation:** \nThere are 8 rectangles of side 1x1.\nThere are 5 rectangles of side 1x2.\nThere are 2 rectangles of side 1x3. \nThere are 4 rectangles of side 2x1.\nThere are 2 rectangles of side 2x2. \nThere are 2 rectangles of side 3x1. \nThere is 1 rectangle of side 3x2. \nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.\n\n**Constraints:**\n\n*   `1 <= m, n <= 150`\n*   `mat[i][j]` is either `0` or `1`.For each row i, create an array nums where:  if mat[i][j] == 0 then nums[j] = 0 else nums[j] = nums[j-1] +1. In the row i, number of rectangles between column j and k(inclusive) and ends in row i, is equal to SUM(min(nums[j, .. idx])) where idx go from j to k.  Expected solution is O(n^3).",
          "output": "def numSubmat(mat: List[List[int]]) -> int:\n    m, n = len(mat), len(mat[0])\n    dp = [[0] * n for _ in range(m)]\n    ans = 0\n    \n    for i in range(m):\n        for j in range(n):\n            if mat[i][j]:\n                dp[i][j] = 1 if j == 0 else dp[i][j-1] + 1\n                width = dp[i][j]\n                for k in range(i, -1, -1):\n                    width = min(width, dp[k][j])\n                    ans += width\n    \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `num` representing **the digits** of a very large integer and an integer `k`. You are allowed to swap any two adjacent digits of the integer **at most** `k` times.\n\nReturn _the minimum integer you can obtain also as a string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"4321 \", k = 4\n**Output:**  \"1342 \"\n**Explanation:** The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.\n\n**Example 2:**\n\n**Input:** num =  \"100 \", k = 1\n**Output:**  \"010 \"\n**Explanation:** It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.\n\n**Example 3:**\n\n**Input:** num =  \"36789 \", k = 1000\n**Output:**  \"36789 \"\n**Explanation:** We can keep the number without any swaps.\n\n**Constraints:**\n\n*   `1 <= num.length <= 3 * 104`\n*   `num` consists of only **digits** and does not contain **leading zeros**.\n*   `1 <= k <= 109`We want to make the smaller digits the most significant digits in the number. For each index i, check the smallest digit in a window of size k and append it to the answer. Update the indices of all digits in this range accordingly.",
          "output": "def createTargetArray(nums, index):\n    target = []\n    for i in range(len(nums)):\n        target.insert(index[i], nums[i])\n    return target\n"
     },
     {
          "instruction": "Write python code for this problem: Given two non-negative integers `low` and `high`. Return the _count of odd numbers between_ `low` _and_ `high` _(inclusive)_.\n\n",
          "input": "**Example 1:**\n\n**Input:** low = 3, high = 7\n**Output:** 3\n**Explanation:** The odd numbers between 3 and 7 are \\[3,5,7\\].\n\n**Example 2:**\n\n**Input:** low = 8, high = 10\n**Output:** 1\n**Explanation:** The odd numbers between 8 and 10 are \\[9\\].\n\n**Constraints:**\n\n*   `0 <= low <= high <= 10^9`If the range (high - low + 1) is even, the number of even and odd numbers in this range will be the same. If the range (high - low + 1) is odd, the solution will depend on the parity of high and low.",
          "output": "def count_odds(low, high):\n    return (high - low) // 2 + (1 if low % 2 == 1 or high % 2 == 1 else 0)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, return _the number of subarrays with an **odd** sum_.\n\nSince the answer can be very large, return it modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,3,5\\]\n**Output:** 4\n**Explanation:** All subarrays are \\[\\[1\\],\\[1,3\\],\\[1,3,5\\],\\[3\\],\\[3,5\\],\\[5\\]\\]\nAll sub-arrays sum are \\[1,4,9,3,8,5\\].\nOdd sums are \\[1,9,3,5\\] so the answer is 4.\n\n**Example 2:**\n\n**Input:** arr = \\[2,4,6\\]\n**Output:** 0\n**Explanation:** All subarrays are \\[\\[2\\],\\[2,4\\],\\[2,4,6\\],\\[4\\],\\[4,6\\],\\[6\\]\\]\nAll sub-arrays sum are \\[2,6,12,4,10,6\\].\nAll sub-arrays have even sum and the answer is 0.\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,3,4,5,6,7\\]\n**Output:** 16\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= arr[i] <= 100`Can we use the accumulative sum to keep track of all the odd-sum sub-arrays ? if the current accu sum is odd, we care only about previous even accu sums and vice versa.",
          "output": "def stringMatching(words):\n    result = []\n    for word1 in words:\n        for word2 in words:\n            if word1 != word2 and word1 in word2:\n                result.append(word1)\n                break\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s`.\n\nA split is called **good** if you can split `s` into two non-empty strings `sleft` and `sright` where their concatenation is equal to `s` (i.e., `sleft + sright = s`) and the number of distinct letters in `sleft` and `sright` is the same.\n\nReturn _the number of **good splits** you can make in `s`_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aacaba \"\n**Output:** 2\n**Explanation:** There are 5 ways to split ` \"aacaba \"` and 2 of them are good. \n( \"a \",  \"acaba \") Left string and right string contains 1 and 3 different letters respectively.\n( \"aa \",  \"caba \") Left string and right string contains 1 and 3 different letters respectively.\n( \"aac \",  \"aba \") Left string and right string contains 2 and 2 different letters respectively (good split).\n( \"aaca \",  \"ba \") Left string and right string contains 2 and 2 different letters respectively (good split).\n( \"aacab \",  \"a \") Left string and right string contains 3 and 1 different letters respectively.\n\n**Example 2:**\n\n**Input:** s =  \"abcd \"\n**Output:** 1\n**Explanation:** Split the string as follows ( \"ab \",  \"cd \").\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of only lowercase English letters.Use two HashMap to store the counts of distinct letters in the left and right substring divided by the current index.",
          "output": "def process_queries(queries, m):\n    nums = list(range(1, m+1))\n    result = []\n    for q in queries:\n        pos = nums.index(q)\n        result.append(pos)\n        del nums[pos]\n        nums.insert(0, q)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `target`. You have an integer array `initial` of the same size as `target` with all elements initially zeros.\n\nIn one operation you can choose **any** subarray from `initial` and increment each value by one.\n\nReturn _the minimum number of operations to form a_ `target` _array from_ `initial`.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = \\[1,2,3,2,1\\]\n**Output:** 3\n**Explanation:** We need at least 3 operations to form the target array from the initial array.\n\\[**0,0,0,0,0**\\] increment 1 from index 0 to 4 (inclusive).\n\\[1,**1,1,1**,1\\] increment 1 from index 1 to 3 (inclusive).\n\\[1,2,**2**,2,1\\] increment 1 at index 2.\n\\[1,2,3,2,1\\] target array is formed.\n\n**Example 2:**\n\n**Input:** target = \\[3,1,1,2\\]\n**Output:** 4\n**Explanation:** \\[**0,0,0,0**\\] -> \\[1,1,1,**1**\\] -> \\[**1**,1,1,2\\] -> \\[**2**,1,1,2\\] -> \\[3,1,1,2\\]\n\n**Example 3:**\n\n**Input:** target = \\[3,1,5,4,2\\]\n**Output:** 7\n**Explanation:** \\[**0,0,0,0,0**\\] -> \\[**1**,1,1,1,1\\] -> \\[**2**,1,1,1,1\\] -> \\[3,1,**1,1,1**\\] -> \\[3,1,**2,2**,2\\] -> \\[3,1,**3,3**,2\\] -> \\[3,1,**4**,4,2\\] -> \\[3,1,5,4,2\\].\n\n**Constraints:**\n\n*   `1 <= target.length <= 105`\n*   `1 <= target[i] <= 105`For a given range of values in target, an optimal strategy is to increment the entire range by the minimum value. The minimum in a range could be obtained with Range minimum query or Segment trees algorithm.",
          "output": "def entityParser(text: str) -> str:\n    entities = {\n        \"&quot;\": '\\\"',\n        \"&apos;\": '\\'',\n        \"&amp;\": '&',\n        \"&gt;\": '>',\n        \"&lt;\": '<',\n        \"&frasl;\": '/'\n    }\n\n    result, i = [], 0\n    while i < len(text):\n        if text[i] == '&':\n            temp = ''\n            for j in range(i, min(i+7, len(text))):\n                temp += text[j]\n                if temp in entities:\n                    result.append(entities[temp])\n                    i = j\n                    break\n            else:\n                result.append(text[i])\n        else:\n            result.append(text[i])\n        i += 1\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `root` of an N-ary tree, return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the tree.\n\nEach node in the n-ary tree contains a val (`int`) and a list (`List[Node]`) of its children.\n\nclass Node {\n    public int val;\n    public List children;\n}\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[1,null,3,2,4,null,5,6\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n\n**Constraints:**\n\n*   The depth of the n-ary tree is less than or equal to `1000`.\n*   The total number of nodes is between `[0, 104]`.\n\n**Follow up:** Can your solution work for the [graph problem](https://leetcode.com/problems/clone-graph/)?Traverse the tree, keep a hashtable with you and create a clone node for each node in the tree. Start traversing the original tree again and connect each child pointer in the cloned tree the same way as the original tree with the help of the hashtable.",
          "output": "def generate_the_string(n: int) -> str:\n    if n % 2 == 0:\n        return 'a' * (n - 1) + 'b'\n    else:\n        return 'a' * n\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums`, return _the number of **good pairs**_.\n\nA pair `(i, j)` is called _good_ if `nums[i] == nums[j]` and `i` < `j`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,1,1,3\\]\n**Output:** 4\n**Explanation:** There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1\\]\n**Output:** 6\n**Explanation:** Each pair in the array are _good_.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`Count how many times each number appears. If a number appears n times, then n * (n \u2013 1) // 2 good pairs can be made with this number.",
          "output": "class UndergroundSystem:\n    def __init__(self):\n        self.check_in_data = {}\n        self.travel_data = {}\n\n    def checkIn(self, id: int, stationName: str, t: int) -> None:\n        self.check_in_data[id] = (stationName, t)\n\n    def checkOut(self, id: int, stationName: str, t: int) -> None:\n        start_station, start_time = self.check_in_data[id]\n        route = (start_station, stationName)\n        if route not in self.travel_data:\n            self.travel_data[route] = [0, 0]\n        self.travel_data[route][0] += t - start_time\n        self.travel_data[route][1] += 1\n\n    def getAverageTime(self, startStation: str, endStation: str) -> float:\n        route = (startStation, endStation)\n        total_time, num_trips = self.travel_data[route]\n        return total_time / num_trips\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s`, return _the number of substrings with all characters_ `1`_'s_. Since the answer may be too large, return it modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"0110111 \"\n**Output:** 9\n**Explanation:** There are 9 substring in total with only 1's characters.\n \"1 \" -> 5 times.\n \"11 \" -> 3 times.\n \"111 \" -> 1 time.\n\n**Example 2:**\n\n**Input:** s =  \"101 \"\n**Output:** 2\n**Explanation:** Substring  \"1 \" is shown 2 times in s.\n\n**Example 3:**\n\n**Input:** s =  \"111111 \"\n**Output:** 21\n**Explanation:** Each substring contains only 1's characters.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`.Count number of 1s in each consecutive-1 group. For a group with n consecutive 1s, the total contribution of it to the final answer is (n + 1) * n // 2.",
          "output": "MOD = 10**9 + 7\n\ndef countGoodStrings(s1, s2, evil):\n    n = len(s1)\n    m = len(evil)\n    dp = [[0] * m for _ in range(n + 1)]\n\n    # Preprocess the KMP prefix function for the evil string\n    lps = [0] * m\n    len_ = 0\n    i = 1\n    while i < m:\n        if evil[i] == evil[len_]:\n            len_ += 1\n            lps[i] = len_\n            i += 1\n        elif len_:\n            len_ = lps[len_ - 1]\n        else:\n            i += 1\n\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            for k in range(2):\n                for c in range(ord('a'), ord(s2[i] if k else 'z') + 1):\n                    e = j\n                    while e and (chr(c) != evil[e]):\n                        e = lps[e - 1]\n\n                    if chr(c) != evil[e]:\n                        e += 1\n\n                    if e != m:\n                        dp[i + 1][k | (c < ord(s2[i]))] += dp[i][k]\n                        dp[i + 1][k | (c < ord(s2[i]))] %= MOD\n\n    return (dp[n][1] - dp[n][0] + MOD) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: [Run-length encoding](http://en.wikipedia.org/wiki/Run-length_encoding) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `\"aabccc \"` we replace `\"aa \"` by `\"a2 \"` and replace `\"ccc \"` by `\"c3 \"`. Thus the compressed string becomes `\"a2bc3 \"`.\n\nNotice that in this problem, we are not adding `'1'` after single characters.\n\nGiven a string `s` and an integer `k`. You need to delete **at most** `k` characters from `s` such that the run-length encoded version of `s` has minimum length.\n\nFind the _minimum length of the run-length encoded version of_ `s` _after deleting at most_ `k` _characters_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaabcccd \", k = 2\n**Output:** 4\n**Explanation:** Compressing s without deleting anything will give us  \"a3bc3d \" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s =  \"abcccd \" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be  \"a3c3 \" of length 4.\n\n**Example 2:**\n\n**Input:** s =  \"aabbaa \", k = 2\n**Output:** 2\n**Explanation:** If we delete both 'b' characters, the resulting compressed string would be  \"a4 \" of length 2.\n\n**Example 3:**\n\n**Input:** s =  \"aaaaaaaaaaa \", k = 0\n**Output:** 3\n**Explanation:** Since k is zero, we cannot delete anything. The compressed string is  \"a11 \" of length 3.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `0 <= k <= s.length`\n*   `s` contains only lowercase English letters.Use dynamic programming. The state of the DP can be the current index and the remaining characters to delete. Having a prefix sum for each character can help you determine for a certain character c in some specific range, how many characters you need to delete to merge all occurrences of c in that range.",
          "output": "def number_ways(hats):\n    kMod = 1000000007\n    kMaxHats = 40\n\n    num_people = len(hats)\n    people_with_hat = [[] for _ in range(kMaxHats)]\n\n    for i in range(num_people):\n        for hat in hats[i]:\n            people_with_hat[hat - 1].append(i)\n\n    dp = [[0] * (kMaxHats + 1) for _ in range(1 << num_people)]\n    dp[0][0] = 1\n\n    for hat in range(kMaxHats):\n        for mask in reversed(range(1 << num_people)):\n            dp[mask][hat + 1] = (dp[mask][hat + 1] + dp[mask][hat]) % kMod\n            for person in people_with_hat[hat]:\n                if mask & (1 << person) == 0:\n                    dp[mask | (1 << person)][hat + 1] = (dp[mask | (1 << person)][hat + 1] + dp[mask][hat]) % kMod\n\n    return dp[(1 << num_people) - 1][kMaxHats]\n"
     },
     {
          "instruction": "Write python code for this problem: A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that **the sum of the euclidean distances to all customers is minimum**.\n\nGiven an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return _the minimum sum of the euclidean distances_ to all customers.\n\nIn other words, you need to choose the position of the service center `[xcentre, ycentre]` such that the following formula is minimized:\n\nAnswers within `10-5` of the actual value will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** positions = \\[\\[0,1\\],\\[1,0\\],\\[1,2\\],\\[2,1\\]\\]\n**Output:** 4.00000\n**Explanation:** As shown, you can see that choosing \\[xcentre, ycentre\\] = \\[1, 1\\] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.\n\n**Example 2:**\n\n**Input:** positions = \\[\\[1,1\\],\\[3,3\\]\\]\n**Output:** 2.82843\n**Explanation:** The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843\n\n**Constraints:**\n\n*   `1 <= positions.length <= 50`\n*   `positions[i].length == 2`\n*   `0 <= xi, yi <= 100`\n\nF(0) = 0, F(1) = 1, F(n) = F(n - 1) + F(n - 2) for n >= 2.The problem can be reworded as, giving a set of points on a 2d-plane, return the geometric median. Loop over each triplet of points (positions[i], positions[j], positions[k]) where i < j < k, get the centre of the circle which goes throw the 3 points, check if all other points lie in this circle.",
          "output": "def find_min_fibonacci_numbers(k):\n    if k == 0:\n        return 0\n    a, b = 0, 1\n    while b <= k:\n        a, b = b, a + b\n    return 1 + find_min_fibonacci_numbers(k - a)\n"
     },
     {
          "instruction": "Write python code for this problem: We will use a file-sharing system to share a very large file which consists of `m` small **chunks** with IDs from `1` to `m`.\n\nWhen users join the system, the system should assign **a unique** ID to them. The unique ID should be used **once** for each user, but when a user leaves the system, the ID can be **reused** again.\n\nUsers can request a certain chunk of the file, the system should return a list of IDs of all the users who own this chunk. If the user receives a non-empty list of IDs, they receive the requested chunk successfully.\n\n  \nImplement the `FileSharing` class:\n\n*   `FileSharing(int m)` Initializes the object with a file of `m` chunks.\n*   `int join(int[] ownedChunks)`: A new user joined the system owning some chunks of the file, the system should assign an id to the user which is the **smallest positive integer** not taken by any other user. Return the assigned id.\n*   `void leave(int userID)`: The user with `userID` will leave the system, you cannot take file chunks from them anymore.\n*   `int[] request(int userID, int chunkID)`: The user `userID` requested the file chunk with `chunkID`. Return a list of the IDs of all users that own this chunk sorted in ascending order.\n\n**Example:**\n\n**Input:**\n\\[ \"FileSharing \", \"join \", \"join \", \"join \", \"request \", \"request \", \"leave \", \"request \", \"leave \", \"join \"\\]\n\\[\\[4\\],\\[\\[1,2\\]\\],\\[\\[2,3\\]\\],\\[\\[4\\]\\],\\[1,3\\],\\[2,2\\],\\[1\\],\\[2,1\\],\\[2\\],\\[\\[\\]\\]\\]\n**Output:**\n\\[null,1,2,3,\\[2\\],\\[1,2\\],null,\\[\\],null,1\\]\n**Explanation:**\nFileSharing fileSharing = new FileSharing(4); // We use the system to share a file of 4 chunks.\n\nfileSharing.join(\\[1, 2\\]);    // A user who has chunks \\[1,2\\] joined the system, assign id = 1 to them and return 1.\n\nfileSharing.join(\\[2, 3\\]);    // A user who has chunks \\[2,3\\] joined the system, assign id = 2 to them and return 2.\n\nfileSharing.join(\\[4\\]);       // A user who has chunk \\[4\\] joined the system, assign id = 3 to them and return 3.\n\nfileSharing.request(1, 3);   // The user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return \\[2\\] . Notice that user 1 now has chunks \\[1,2,3\\].\n\nfileSharing.request(2, 2);   // The user with id = 2 requested the second file chunk, users with ids \\[1,2\\] have this chunk, thus we return \\[1,2\\].\n\nfileSharing.leave(1);        // The user with id = 1 left the system, all the file chunks with them are no longer available for other users.\n\nfileSharing.request(2, 1);   // The user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list \\[\\].\n\nfileSharing.leave(2);        // The user with id = 2 left the system.\n\nfileSharing.join(\\[\\]);        // A user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. Notice that ids 1 and 2 are free and we can reuse them.\n\n**Constraints:**\n\n*   `1 <= m <= 105`\n*   `0 <= ownedChunks.length <= min(100, m)`\n*   `1 <= ownedChunks[i] <= m`\n*   Values of `ownedChunks` are unique.\n*   `1 <= chunkID <= m`\n*   `userID` is guaranteed to be a user in the system if you **assign** the IDs **correctly**.\n*   At most `104` calls will be made to `join`, `leave` and `request`.\n*   Each call to `leave` will have a matching call for `join`.\n\n**Follow-up:**\n\n*   What happens if the system identifies the user by their IP address instead of their unique ID and users disconnect and connect from the system with the same IP?\n*   If the users in the system join and leave the system frequently without requesting any chunks, will your solution still be efficient?\n*   If all users join the system one time, request all files, and then leave, will your solution still be efficient?\n*   If the system will be used to share `n` files where the `ith` file consists of `m[i]`, what are the changes you have to make",
          "input": "?Try to solve it by keeping for each file chunk, the users who have this chunk. Try to solve it by keeping all the users in the system with their owned chunks, and when you request a chunk, check all users for it.",
          "output": "def countLargestGroup(n: int) -> int:\n    freq = [0] * 37\n    max_group_size = 0\n    max_group_count = 0\n    \n    for i in range(1, n + 1):\n        _sum = sum(map(int, str(i)))\n        freq[_sum] += 1\n        max_group_size = max(max_group_size, freq[_sum])\n    \n    for count in freq:\n        if count == max_group_size:\n            max_group_count += 1\n\n    return max_group_count\n"
     },
     {
          "instruction": "Write python code for this problem: There are `numBottles` water bottles that are initially full of water. You can exchange `numExchange` empty water bottles from the market with one full water bottle.\n\nThe operation of drinking a full water bottle turns it into an empty bottle.\n\nGiven the two integers `numBottles` and `numExchange`, return _the **maximum** number of water bottles you can drink_.\n\n",
          "input": "**Example 1:**\n\n**Input:** numBottles = 9, numExchange = 3\n**Output:** 13\n**Explanation:** You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13.\n\n**Example 2:**\n\n**Input:** numBottles = 15, numExchange = 4\n**Output:** 19\n**Explanation:** You can exchange 4 empty bottles to get 1 full water bottle. \nNumber of water bottles you can drink: 15 + 3 + 1 = 19.\n\n**Constraints:**\n\n*   `1 <= numBottles <= 100`\n*   `2 <= numExchange <= 100`Simulate the process until there are not enough empty bottles for even one full bottle of water.",
          "output": "def numWaterBottles(numBottles: int, numExchange: int) -> int:\n    totalBottles = numBottles\n    while numBottles >= numExchange:\n        newBottles = numBottles // numExchange\n        totalBottles += newBottles\n        numBottles = newBottles + numBottles % numExchange\n    return totalBottles\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The **root** of the tree is the node `0`, and each node of the tree has **a label** which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).\n\nThe `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.\n\nReturn _an array of size `n`_ where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.\n\nA subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,4\\],\\[1,5\\],\\[2,3\\],\\[2,6\\]\\], labels =  \"abaedcd \"\n**Output:** \\[2,1,1,1,1,1,1\\]\n**Explanation:** Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).\n\n**Example 2:**\n\n**Input:** n = 4, edges = \\[\\[0,1\\],\\[1,2\\],\\[0,3\\]\\], labels =  \"bbbb \"\n**Output:** \\[4,2,1,1\\]\n**Explanation:** The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.\n\n**Example 3:**\n\n**Input:** n = 5, edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[0,4\\]\\], labels =  \"aabab \"\n**Output:** \\[3,2,1,1,1\\]\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `edges.length == n - 1`\n*   `edges[i].length == 2`\n*   `0 <= ai, bi < n`\n*   `ai != bi`\n*   `labels.length == n`\n*   `labels` is consisting of only of lowercase English letters.Start traversing the tree and each node should return a vector to its parent node. The vector should be of length 26 and have the count of all the labels in the sub-tree of this node.",
          "output": "def min_subsequence(nums):\n    nums.sort(reverse=True)\n    total_sum, current_sum = sum(nums), 0\n    result = []\n    for num in nums:\n        current_sum += num\n        result.append(num)\n        if current_sum > total_sum - current_sum:\n            break\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` of lowercase letters, you need to find the maximum number of **non-empty** substrings of `s` that meet the following conditions:\n\n1.  The substrings do not overlap, that is for any two substrings `s[i..j]` and `s[x..y]`, either `j < x` or `i > y` is true.\n2.  A substring that contains a certain character `c` must also contain all occurrences of `c`.\n\nFind _the maximum number of substrings that meet the above conditions_. If there are multiple solutions with the same number of substrings, _return the one with minimum total length._ It can be shown that there exists a unique solution of minimum total length.\n\nNotice that you can return the substrings in **any** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"adefaddaccc \"\n**Output:** \\[ \"e \", \"f \", \"ccc \"\\]\n**Explanation:** The following are all the possible substrings that meet the conditions:\n\\[\n   \"adefaddaccc \"\n   \"adefadda \",\n   \"ef \",\n   \"e \",\n   \"f \",\n   \"ccc \",\n\\]\nIf we choose the first string, we cannot choose anything else and we'd get only 1. If we choose  \"adefadda \", we are left with  \"ccc \" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose  \"ef \" since it can be split into two. Therefore, the optimal way is to choose \\[ \"e \", \"f \", \"ccc \"\\] which gives us 3 substrings. No other solution of the same number of substrings exist.\n\n**Example 2:**\n\n**Input:** s =  \"abbaccd \"\n**Output:** \\[ \"d \", \"bb \", \"cc \"\\]\n**Explanation:** Notice that while the set of substrings \\[ \"d \", \"abba \", \"cc \"\\] also has length 3, it's considered incorrect since it has larger total length.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` contains only lowercase English letters.Notice that it's impossible for any two valid substrings to overlap unless one is inside another. We can start by finding the starting and ending index for each character. From these indices, we can form the substrings by expanding each character's range if necessary (if another character exists in the range with smaller/larger starting/ending index). Sort the valid substrings by length and greedily take those with the smallest length, discarding the ones that overlap those we took.",
          "output": "def num_steps(s: str) -> int:\n    steps = 0\n    carry = 0\n\n    for i in range(len(s) - 1, 0, -1):\n        current = int(s[i]) + carry\n        if current == 1:\n            steps += 2\n            carry = 1\n        else:\n            steps += carry\n            carry = current\n\n    return steps + carry\n"
     },
     {
          "instruction": "Write python code for this problem: Winston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible.\n\nReturn _the minimum possible value_ of `|func(arr, l, r) - target|`.\n\nNotice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[9,12,3,7,15\\], target = 5\n**Output:** 2\n**Explanation:** Calling func with all the pairs of \\[l,r\\] = \\[\\[0,0\\],\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[0,2\\],\\[1,3\\],\\[2,4\\],\\[0,3\\],\\[1,4\\],\\[0,4\\]\\], Winston got the following results \\[9,12,3,7,15,8,0,3,7,0,0,3,0,0,0\\]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.\n\n**Example 2:**\n\n**Input:** arr = \\[1000000,1000000,1000000\\], target = 1\n**Output:** 999999\n**Explanation:** Winston called the func with all possible values of \\[l,r\\] and he always got 1000000, thus the min difference is 999999.\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,4,8,16\\], target = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= arr[i] <= 106`\n*   `0 <= target <= 107`If the and value of sub-array arr[i...j] is \u2265 the and value of the sub-array arr[i...j+1]. For each index i using binary search or ternary search find the index j where |target - AND(arr[i...j])| is minimum, minimize this value with the global answer.",
          "output": "def closestToTarget(arr: List[int], target: int) -> int:\n    min_diff = float('inf')\n    prefix = set()\n\n    for n in arr:\n        next_prefix = set()\n        for p in prefix:\n            next_prefix.add(p & n)\n        next_prefix.add(n)\n\n        for p in next_prefix:\n            min_diff = min(min_diff, abs(p - target))\n        prefix = next_prefix\n    return min_diff\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `arr` of positive integers sorted in a **strictly increasing order**, and an integer `k`.\n\nReturn _the_ `kth` _**positive** integer that is **missing** from this array._\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,3,4,7,11\\], k = 5\n**Output:** 9\n**Explanation:** The missing positive integers are \\[1,5,6,8,9,10,12,13,...\\]. The 5th missing positive integer is 9.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,3,4\\], k = 2\n**Output:** 6\n**Explanation:** The missing positive integers are \\[5,6,7,...\\]. The 2nd missing positive integer is 6.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `1 <= arr[i] <= 1000`\n*   `1 <= k <= 1000`\n*   `arr[i] < arr[j]` for `1 <= i < j <= arr.length`\n\n**Follow up:**\n\nCould you solve this problem in less than O(n) complexity?Keep track of how many positive numbers are missing as you scan the array.",
          "output": "def find_diagonal_order(nums):\n    diagonals = {}\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if i + j not in diagonals:\n                diagonals[i + j] = []\n            diagonals[i + j].append(nums[i][j])\n\n    res = []\n    for key in diagonals:\n        res.extend(reversed(diagonals[key]))\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less.\n\nDuring the `ith` (`1 <= i <= k`) move you can:\n\n*   Choose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times.\n*   Do nothing.\n\nShifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i` means applying the shift operations `i` times.\n\nRemember that any index `j` can be picked at most once.\n\nReturn `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"input \", t =  \"ouput \", k = 9\n**Output:** true\n**Explanation:** In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.\n\n**Example 2:**\n\n**Input:** s =  \"abc \", t =  \"bcd \", k = 10\n**Output:** false\n**Explanation:** We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.\n\n**Example 3:**\n\n**Input:** s =  \"aab \", t =  \"bbb \", k = 27\n**Output:** true\n**Explanation:** In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 10^5`\n*   `0 <= k <= 10^9`\n*   `s`, `t` contain only lowercase English letters.Observe that shifting a letter x times has the same effect of shifting the letter x + 26 times. You need to check whether k is large enough to cover all shifts with the same remainder after modulo 26.",
          "output": "def canConvertString(s: str, t: str, k: int) -> bool:\n    if len(s) != len(t):\n        return False\n    count = [0] * 26\n    for i in range(len(s)):\n        diff = (ord(t[i]) - ord(s[i]) + 26) % 26\n        if diff > 0:\n            count[diff] += 1\n    for i in range(1, 26):\n        if count[i] > 0:\n            if count[i] * 26 - 26 + i > k:\n                return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is **balanced** if:\n\n*   Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.\n*   Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.\n\nIn other words, we treat `'('` as an opening parenthesis and `'))'` as a closing parenthesis.\n\n*   For example, `\"()) \"`, `\"())(()))) \"` and `\"(())()))) \"` are balanced, `\")() \"`, `\"())) \"` and `\"(())) \"` are not balanced.\n\nYou can insert the characters `'('` and `')'` at any position of the string to balance it if needed.\n\nReturn _the minimum number of insertions_ needed to make `s` balanced.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"(())) \"\n**Output:** 1\n**Explanation:** The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be  \"(()))) \" which is balanced.\n\n**Example 2:**\n\n**Input:** s =  \"()) \"\n**Output:** 0\n**Explanation:** The string is already balanced.\n\n**Example 3:**\n\n**Input:** s =  \"))())( \"\n**Output:** 3\n**Explanation:** Add '(' to match the first '))', Add '))' to match the last '('.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of `'('` and `')'` only.Use a stack to keep opening brackets. If you face single closing ')' add 1 to the answer and consider it as '))'. If you have '))' with empty stack, add 1 to the answer, If after finishing you have x opening remaining in the stack, add 2x to the answer.",
          "output": "def minInsertions(s: str) -> int:\n    left = 0\n    res = 0\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i] == '(':\n            left += 1\n        else:\n            if left == 0: \n                res += 1\n            else: \n                left -= 1\n            if i == n - 1 or s[i + 1] != ')':\n                res += 1\n                i += 1\n        i += 1\n    return res + left * 2\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` and an integer `target`, return _the maximum number of **non-empty** **non-overlapping** subarrays such that the sum of values in each subarray is equal to_ `target`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1,1,1\\], target = 2\n**Output:** 2\n**Explanation:** There are 2 non-overlapping subarrays \\[**1,1**,1,**1,1**\\] with sum equals to target(2).\n\n**Example 2:**\n\n**Input:** nums = \\[-1,3,5,1,4,2,-9\\], target = 6\n**Output:** 2\n**Explanation:** There are 3 subarrays with sum equal to 6.\n(\\[5,1\\], \\[4,2\\], \\[3,5,1,4,2,-9\\]) but only the first 2 are non-overlapping.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`\n*   `0 <= target <= 106`Keep track of prefix sums to quickly look up what subarray that sums \"target\" can be formed at each step of scanning the input array. It can be proved that greedily forming valid subarrays as soon as one is found is optimal.",
          "output": "def maxNonOverlapping(nums, target):\n    prefix_sum = {0: 0}\n    sum, count = 0, 0\n    for num in nums:\n        sum += num\n        if sum - target in prefix_sum:\n            count = max(count, 1 + prefix_sum[sum - target])\n        prefix_sum[sum] = count\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given all the nodes of an **[N-ary tree](https://leetcode.com/explore/learn/card/n-ary-tree/)** as an array of `Node` objects, where each node has a **unique value**.\n\nReturn _the **root** of the N-ary tree_.\n\n**Custom testing:**\n\nAn N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples).\n\nFor example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\nThe testing will be done in the following way:\n\n1.  The **input data** should be provided as a serialization of the tree.\n2.  The driver code will construct the tree from the serialized input data and put each `Node` object into an array **in an arbitrary order**.\n3.  The driver code will pass the array to `findRoot`, and your function should find and return the root `Node` object in the array.\n4.  The driver code will take the returned `Node` object and serialize it. If the serialized value and the input data are the **same**, the test **passes**.\n\n",
          "input": "**Example 1:**\n\n**Input:** tree = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[1,null,3,2,4,null,5,6\\]\n**Explanation:** The tree from the input data is shown above.\nThe driver code creates the tree and gives findRoot the Node objects in an arbitrary order.\nFor example, the passed array could be \\[Node(5),Node(4),Node(3),Node(6),Node(2),Node(1)\\] or \\[Node(2),Node(6),Node(1),Node(3),Node(5),Node(4)\\].\nThe findRoot function should return the root Node(1), and the driver code will serialize it and compare with the input data.\nThe input data and serialized Node(1) are the same, so the test passes.\n\n**Example 2:**\n\n**Input:** tree = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n\n**Constraints:**\n\n*   The total number of nodes is between `[1, 5 * 104]`.\n*   Each node has a **unique** value.\n\n**Follow up:**\n\n*   Could you solve this problem in constant space complexity with a linear time algorithm?Node with indegree 0 is the root",
          "output": "class Solution:\n    def findRoot(self, nodes: List['Node']) -> 'Node':\n        value_sum = 0\n        \n        for node in nodes:\n            value_sum += node.val\n            \n            for child in node.children:\n                value_sum -= child.val\n        \n        for node in nodes:\n            if node.val == value_sum:\n                return node\n                \n        return None\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and an integer array `indices` of the **same length**. The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.\n\nReturn _the shuffled string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"codeleet \", `indices` = \\[4,5,6,7,0,2,1,3\\]\n**Output:**  \"leetcode \"\n**Explanation:** As shown,  \"codeleet \" becomes  \"leetcode \" after shuffling.\n\n**Example 2:**\n\n**Input:** s =  \"abc \", `indices` = \\[0,1,2\\]\n**Output:**  \"abc \"\n**Explanation:** After shuffling, each character remains in its position.\n\n**Constraints:**\n\n*   `s.length == indices.length == n`\n*   `1 <= n <= 100`\n*   `s` consists of only lowercase English letters.\n*   `0 <= indices[i] < n`\n*   All values of `indices` are **unique**.You can create an auxiliary string t of length n. Assign t[indexes[i]] to s[i] for each i from 0 to n-1.",
          "output": "from typing import List\n\ndef kids_with_candies(candies: List[int], extra_candies: int) -> List[bool]:\n    max_candies = max(candies)\n    result = [candy + extra_candies >= max_candies for candy in candies]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** binary string `target` of length `n`. You have another binary string `s` of length `n` that is initially set to all zeros. You want to make `s` equal to `target`.\n\nIn one operation, you can pick an index `i` where `0 <= i < n` and flip all bits in the **inclusive** range `[i, n - 1]`. Flip means changing `'0'` to `'1'` and `'1'` to `'0'`.\n\nReturn _the minimum number of operations needed to make_ `s` _equal to_ `target`.\n\n",
          "input": "**Example 1:**\n\n**Input:** target =  \"10111 \"\n**Output:** 3\n**Explanation:** Initially, s =  \"00000 \".\nChoose index i = 2:  \"00000 \" ->  \"00111 \"\nChoose index i = 0:  \"00111 \" ->  \"11000 \"\nChoose index i = 1:  \"11000 \" ->  \"10111 \"\nWe need at least 3 flip operations to form target.\n\n**Example 2:**\n\n**Input:** target =  \"101 \"\n**Output:** 3\n**Explanation:** Initially, s =  \"000 \".\nChoose index i = 0:  \"000 \" ->  \"111 \"\nChoose index i = 1:  \"111 \" ->  \"100 \"\nChoose index i = 2:  \"100 \" ->  \"101 \"\nWe need at least 3 flip operations to form target.\n\n**Example 3:**\n\n**Input:** target =  \"00000 \"\n**Output:** 0\n**Explanation:** We do not need any operations since the initial s already equals target.\n\n**Constraints:**\n\n*   `n == target.length`\n*   `1 <= n <= 105`\n*   `target[i]` is either `'0'` or `'1'`.Consider a strategy where the choice of bulb with number i is increasing. In such a strategy, you no longer need to worry about bulbs that have been set to the left.",
          "output": "def max_difference(num):\n    a = num + 9 - (num % 10)\n    b = num - (num // 1000 % 10) * 111\n\n    return a - b\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a binary tree and an integer `distance`. A pair of two different **leaf** nodes of a binary tree is said to be good if the length of **the shortest path** between them is less than or equal to `distance`.\n\nReturn _the number of good leaf node pairs_ in the tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,null,4\\], distance = 3\n**Output:** 1\n**Explanation:** The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,4,5,6,7\\], distance = 3\n**Output:** 2\n**Explanation:** The good pairs are \\[4,5\\] and \\[6,7\\] with shortest path = 2. The pair \\[4,6\\] is not good because the length of ther shortest path between them is 4.\n\n**Example 3:**\n\n**Input:** root = \\[7,1,4,6,null,5,3,null,null,null,null,null,2\\], distance = 3\n**Output:** 1\n**Explanation:** The only good pair is \\[2,5\\].\n\n**Constraints:**\n\n*   The number of nodes in the `tree` is in the range `[1, 210].`\n*   `1 <= Node.val <= 100`\n*   `1 <= distance <= 10`Start DFS from each leaf node. stop the DFS when the number of steps done > distance. If you reach another leaf node within distance steps, add 1 to the answer. Note that all pairs will be counted twice so divide the answer by 2.",
          "output": "def check_if_can_break(s1, s2):\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n\n    can_break_1 = can_break_2 = True\n    for c1, c2 in zip(s1, s2):\n        if c1 < c2:\n            can_break_1 = False\n        if c2 < c1:\n            can_break_2 = False\n\n    return can_break_1 or can_break_2\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of an N-ary tree of unique values, and two nodes of the tree `p` and `q`.\n\nYou should move the subtree of the node `p` to become a direct child of node `q`. If `p` is already a direct child of `q`, do not change anything. Node `p` **must be** the last child in the children list of node `q`.\n\nReturn _the root of the tree_ after adjusting it.\n\nThere are 3 cases for nodes `p` and `q`:\n\n1.  Node `q` is in the sub-tree of node `p`.\n2.  Node `p` is in the sub-tree of node `q`.\n3.  Neither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`.\n\nIn cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. **Please read the examples carefully before solving this problem.**\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\nFor example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,2,3,null,4,5,null,6,null,7,8\\], p = 4, q = 1\n**Output:** \\[1,null,2,3,4,null,5,null,6,null,7,8\\]\n**Explanation:** This example follows the second case as node p is in the sub-tree of node q. We move node p with its sub-tree to be a direct child of node q.\nNotice that node 4 is the last child of node 1.\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,null,4,5,null,6,null,7,8\\], p = 7, q = 4\n**Output:** \\[1,null,2,3,null,4,5,null,6,null,7,8\\]\n**Explanation:** Node 7 is already a direct child of node 4. We don't change anything.\n\n**Example 3:**\n\n**Input:** root = \\[1,null,2,3,null,4,5,null,6,null,7,8\\], p = 3, q = 8\n**Output:** \\[1,null,2,null,4,5,null,7,8,null,null,null,3,null,6\\]\n**Explanation:** This example follows case 3 because node p is not in the sub-tree of node q and vice-versa. We can move node 3 with its sub-tree and make it as node 8's child.\n\n**Constraints:**\n\n*   The total number of nodes is between `[2, 1000]`.\n*   Each node has a **unique** value.\n*   `p != null`\n*   `q != null`\n*   `p` and `q` are two different nodes (i.e. `p != q`).Disconnect node p from its parent and append it to the children list of node q. If q was in the sub-tree of node p (case 1), get the parent node of p and replace p in its children list with q. If p was the root of the tree, make q the root of the tree.",
          "output": "def get_happy_string(n, k):\n    def dfs(s, prev):\n        if len(s) == n:\n            happy_strings.append(s)\n            return\n        for c in 'abc':\n            if c != prev:\n                dfs(s + c, c)\n\n    happy_strings = []\n    dfs(\"\", ' ')\n    return happy_strings[k - 1] if k <= len(happy_strings) else \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `arr`, and three integers `a`, `b` and `c`. You need to find the number of good triplets.\n\nA triplet `(arr[i], arr[j], arr[k])` is **good** if the following conditions are true:\n\n*   `0 <= i < j < k < arr.length`\n*   `|arr[i] - arr[j]| <= a`\n*   `|arr[j] - arr[k]| <= b`\n*   `|arr[i] - arr[k]| <= c`\n\nWhere `|x|` denotes the absolute value of `x`.\n\nReturn _the number of good triplets_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,0,1,1,9,7\\], a = 7, b = 2, c = 3\n**Output:** 4\n**Explanation:** There are 4 good triplets: \\[(3,0,1), (3,0,1), (3,1,1), (0,1,1)\\].\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,2,2,3\\], a = 0, b = 0, c = 1\n**Output:** 0\n**Explanation:** No triplet satisfies all conditions.\n\n**Constraints:**\n\n*   `3 <= arr.length <= 100`\n*   `0 <= arr[i] <= 1000`\n*   `0 <= a, b, c <= 1000`Notice that the constraints are small enough for a brute force solution to pass. Loop through all triplets, and count the ones that are good.",
          "output": "def minNumberOfFrogs(croakOfFrogs: str) -> int:\n    counts = [0] * 5\n    max_frogs = 0\n\n    for c in croakOfFrogs:\n        index = \"croak\".find(c)\n        if index == 0:\n            counts[0] += 1\n            max_frogs = max(max_frogs, counts[0])\n        elif counts[index - 1] > 0:\n            counts[index - 1] -= 1\n            counts[index] += 1\n        else:\n            return -1\n\n    if counts[0] == counts[4]:\n        return max_frogs\n    else:\n        return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr` of **distinct** integers and an integer `k`.\n\nA game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0`, and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.\n\nReturn _the integer which will win the game_.\n\nIt is **guaranteed** that there will be a winner of the game.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,1,3,5,4,6,7\\], k = 2\n**Output:** 5\n**Explanation:** Let's see the rounds of the game:\nRound |       arr       | winner | win\\_count\n  1   | \\[2,1,3,5,4,6,7\\] | 2      | 1\n  2   | \\[2,3,5,4,6,7,1\\] | 3      | 1\n  3   | \\[3,5,4,6,7,1,2\\] | 5      | 1\n  4   | \\[5,4,6,7,1,2,3\\] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n\n**Example 2:**\n\n**Input:** arr = \\[3,2,1\\], k = 10\n**Output:** 3\n**Explanation:** 3 will win the first 10 rounds consecutively.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 105`\n*   `1 <= arr[i] <= 106`\n*   `arr` contains **distinct** integers.\n*   `1 <= k <= 109`If k \u2265 arr.length return the max element of the array. If k < arr.length simulate the game until a number wins k consecutive games.",
          "output": "def number_of_ways(n, m, k, mod=1_000_000_007):\n    if k > 1:\n        result = 1\n        for _ in range(n):\n            result = (result * m) % mod\n        return result\n    return 1 if n % 2 == 0 else m\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `n x n` binary `grid`, in one step you can choose two **adjacent rows** of the grid and swap them.\n\nA grid is said to be **valid** if all the cells above the main diagonal are **zeros**.\n\nReturn _the minimum number of steps_ needed to make the grid valid, or **\\-1** if the grid cannot be valid.\n\nThe main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,0,1\\],\\[1,1,0\\],\\[1,0,0\\]\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,1,1,0\\]\\]\n**Output:** -1\n**Explanation:** All rows are similar, swaps have no effect on the grid.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,0,0\\],\\[1,1,0\\],\\[1,1,1\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == grid.length` `== grid[i].length`\n*   `1 <= n <= 200`\n*   `grid[i][j]` is either `0` or `1`For each row of the grid calculate the most right 1 in the grid in the array maxRight. To check if there exist answer, sort maxRight and check if maxRight[i] \u2264 i for all possible i's. If there exist an answer, simulate the swaps.",
          "output": "def minSwaps(grid):\n    n = len(grid)\n    steps = 0\n\n    for i in range(n):\n        row = -1\n        for j in range(i, n):\n            if grid[j][i] == 0:\n                row = j\n                break\n        if row == -1:\n            return -1\n\n        while row > i:\n            grid[row], grid[row - 1] = grid[row - 1], grid[row]\n            steps += 1\n            row -= 1\n\n    return steps\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **sorted** arrays of distinct integers `nums1` and `nums2.`\n\nA **valid path** is defined as follows:\n\n*   Choose array `nums1` or `nums2` to traverse (from index-0).\n*   Traverse the current array from left to right.\n*   If you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\n\nThe **score** is defined as the sum of uniques values in a valid path.\n\nReturn _the maximum score you can obtain of all possible **valid paths**_. Since the answer may be too large, return it modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[2,4,5,8,10\\], nums2 = \\[4,6,8,9\\]\n**Output:** 30\n**Explanation:** Valid paths:\n\\[2,4,5,8,10\\], \\[2,4,5,8,9\\], \\[2,4,6,8,9\\], \\[2,4,6,8,10\\],  (starting from nums1)\n\\[4,6,8,9\\], \\[4,5,8,10\\], \\[4,5,8,9\\], \\[4,6,8,10\\]    (starting from nums2)\nThe maximum is obtained with the path in green **\\[2,4,6,8,10\\]**.\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,3,5,7,9\\], nums2 = \\[3,5,100\\]\n**Output:** 109\n**Explanation:** Maximum sum is obtained with the path **\\[1,3,5,100\\]**.\n\n**Example 3:**\n\n**Input:** nums1 = \\[1,2,3,4,5\\], nums2 = \\[6,7,8,9,10\\]\n**Output:** 40\n**Explanation:** There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path \\[6,7,8,9,10\\].\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 105`\n*   `1 <= nums1[i], nums2[i] <= 107`\n*   `nums1` and `nums2` are strictly increasing.Partition the array by common integers, and choose the path with larger sum with a DP technique.",
          "output": "def maxScore(s):\n    left_zeros, right_ones, max_score = 0, s.count('1'), 0\n    for i in range(len(s) - 1):\n        if s[i] == '0': left_zeros += 1\n        else: right_ones -= 1\n        max_score = max(max_score, left_zeros + right_ones)\n    return max_score\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, add a dot ( \". \") as the thousands separator and return it in string format.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 987\n**Output:**  \"987 \"\n\n**Example 2:**\n\n**Input:** n = 1234\n**Output:**  \"1.234 \"\n\n**Constraints:**\n\n*   `0 <= n <= 231 - 1`Scan from the back of the integer and use dots to connect blocks with length 3 except the last block.",
          "output": "def can_be_equal(target, arr):\n    target.sort()\n    arr.sort()\n    return target == arr\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **directed acyclic graph**, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`.\n\nFind _the smallest set of vertices from which all nodes in the graph are reachable_. It's guaranteed that a unique solution exists.\n\nNotice that you can return the vertices in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[2,5\\],\\[3,4\\],\\[4,2\\]\\]\n**Output:** \\[0,3\\]\n**Explanation:** It's not possible to reach all the nodes from a single vertex. From 0 we can reach \\[0,1,2,5\\]. From 3 we can reach \\[3,4,2,5\\]. So we output \\[0,3\\].\n\n**Example 2:**\n\n**Input:** n = 5, edges = \\[\\[0,1\\],\\[2,1\\],\\[3,1\\],\\[1,4\\],\\[2,4\\]\\]\n**Output:** \\[0,2,3\\]\n**Explanation:** Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.\n\n**Constraints:**\n\n*   `2 <= n <= 10^5`\n*   `1 <= edges.length <= min(10^5, n * (n - 1) / 2)`\n*   `edges[i].length == 2`\n*   `0 <= fromi, toi < n`\n*   All pairs `(fromi, toi)` are distinct.A node that does not have any incoming edge can only be reached by itself. Any other node with incoming edges can be reached from some other node. We only have to count the number of nodes with zero incoming edges.",
          "output": "def has_all_codes(s, k):\n    need = 1 << k\n    got = set()\n    \n    for i in range(len(s) - k + 1):\n        got.add(s[i:i + k])\n    \n    return len(got) == need\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. You have an integer array `arr` of the same length with all values set to `0` initially. You also have the following `modify` function:\n\nYou want to use the modify function to covert `arr` to `nums` using the minimum number of calls.\n\nReturn _the minimum number of function calls to make_ `nums` _from_ `arr`.\n\nThe test cases are generated so that the answer fits in a **32-bit** signed integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,5\\]\n**Output:** 5\n**Explanation:** Increment by 1 (second element): \\[0, 0\\] to get \\[0, 1\\] (1 operation).\nDouble all the elements: \\[0, 1\\] -> \\[0, 2\\] -> \\[0, 4\\] (2 operations).\nIncrement by 1 (both elements)  \\[0, 4\\] -> \\[1, 4\\] -> **\\[1, 5\\]** (2 operations).\nTotal of operations: 1 + 2 + 2 = 5.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2\\]\n**Output:** 3\n**Explanation:** Increment by 1 (both elements) \\[0, 0\\] -> \\[0, 1\\] -> \\[1, 1\\] (2 operations).\nDouble all the elements: \\[1, 1\\] -> **\\[2, 2\\]** (1 operation).\nTotal of operations: 2 + 1 = 3.\n\n**Example 3:**\n\n**Input:** nums = \\[4,2,5\\]\n**Output:** 6\n**Explanation:** (initial)\\[0,0,0\\] -> \\[1,0,0\\] -> \\[1,0,1\\] -> \\[2,0,2\\] -> \\[2,1,2\\] -> \\[4,2,4\\] -> **\\[4,2,5\\]**(nums).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 109`Work backwards: try to go from nums to arr. You should try to divide by 2 as much as possible, but you can only divide by 2 if everything is even.",
          "output": "from collections import defaultdict\n\ndef DFS(src, graph, visited, transitive_closure, dest):\n    if src == dest:\n        transitive_closure[dest] = True\n        return\n    if visited[src]:\n        return\n    visited[src] = True\n    for neighbor in graph[src]:\n        DFS(neighbor, graph, visited, transitive_closure, dest)\n        if transitive_closure[dest]:\n            return\n\ndef checkIfPrerequisite(numCourses, prerequisites, queries):\n    graph = defaultdict(list)\n\n    for pre in prerequisites:\n        graph[pre[0]].append(pre[1])\n\n    result = []\n\n    for i in range(len(queries)):\n        visited = [False] * numCourses\n        transitive_closure = [False] * numCourses\n        DFS(queries[i][0], graph, visited, transitive_closure, queries[i][1])\n        result.append(transitive_closure[queries[i][1]])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a 2D array of characters `grid` of size `m x n`, you need to find if there exists any cycle consisting of the **same value** in `grid`.\n\nA cycle is a path of **length 4 or more** in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the **same value** of the current cell.\n\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1, 2)` we visited `(1, 1)` which was the last visited cell.\n\nReturn `true` if any cycle of the same value exists in `grid`, otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[ \"a \", \"a \", \"a \", \"a \"\\],\\[ \"a \", \"b \", \"b \", \"a \"\\],\\[ \"a \", \"b \", \"b \", \"a \"\\],\\[ \"a \", \"a \", \"a \", \"a \"\\]\\]\n**Output:** true\n**Explanation:** There are two valid cycles shown in different colors in the image below:\n \n\n**Example 2:**\n\n**Input:** grid = \\[\\[ \"c \", \"c \", \"c \", \"a \"\\],\\[ \"c \", \"d \", \"c \", \"c \"\\],\\[ \"c \", \"c \", \"e \", \"c \"\\],\\[ \"f \", \"c \", \"c \", \"c \"\\]\\]\n**Output:** true\n**Explanation:** There is only one valid cycle highlighted in the image below:\n \n\n**Example 3:**\n\n**Input:** grid = \\[\\[ \"a \", \"b \", \"b \"\\],\\[ \"b \", \"z \", \"b \"\\],\\[ \"b \", \"b \", \"a \"\\]\\]\n**Output:** false\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 500`\n*   `grid` consists only of lowercase English letters.Keep track of the parent (previous position) to avoid considering an invalid path. Use DFS or BFS and keep track of visited cells to see if there is a cycle.",
          "output": "def cherry_pickup(grid):\n    rows, cols = len(grid), len(grid[0])\n    dp = [[[0] * cols for _ in range(cols)] for _ in range(rows)]\n\n    for row in reversed(range(rows)):\n        for col1 in range(cols):\n            for col2 in range(cols):\n                current_cell = dp[row + 1][col1][col2] if row < rows - 1 else 0\n                current_cell += grid[row][col1] + (grid[row][col2] if col1 != col2 else 0)\n\n                max_val = 0\n                for move1 in range(-1, 2):\n                    for move2 in range(-1, 2):\n                        new_col1, new_col2 = col1 + move1, col2 + move2\n                        if 0 <= new_col1 < cols and 0 <= new_col2 < cols:\n                            max_val = max(max_val, dp[row][new_col1][new_col2])\n\n                dp[row][col1][col2] = current_cell + max_val\n\n    return dp[0][0][cols - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a `root` of an [N-ary tree](https://leetcode.com/articles/introduction-to-n-ary-trees/), you need to compute the length of the diameter of the tree.\n\nThe diameter of an N-ary tree is the length of the **longest** path between any two nodes in the tree. This path may or may not pass through the root.\n\n(_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)_\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** 3\n**Explanation:** Diameter is shown in red color.\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,null,3,4,null,5,null,6\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** 7\n\n**Constraints:**\n\n*   The depth of the n-ary tree is less than or equal to `1000`.\n*   The total number of nodes is between `[1, 104]`.For the node i, calculate the height of each of its children and keep the first and second maximum heights (max1_i , max2_i). Check all nodes and return max( 2 + max1_i  +  max2_i ).",
          "output": "def stoneGameIII(stoneValue):\n    n = len(stoneValue)\n    dp = [0] * (n + 1)\n    dp[n - 1] = stoneValue[n - 1]\n    for i in range(n - 2, -1, -1):\n        dp[i] = stoneValue[i] - dp[i + 1]\n        for j in range(1, 3):\n            if i + j < n:\n                dp[i] = max(dp[i], stoneValue[i + j] - dp[i + j + 1])\n    if dp[0] > 0: return \"Alice\"\n    if dp[0] < 0: return \"Bob\"\n    return \"Tie\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` of lower and upper case English letters.\n\nA good string is a string which doesn't have **two adjacent characters** `s[i]` and `s[i + 1]` where:\n\n*   `0 <= i <= s.length - 2`\n*   `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or **vice-versa**.\n\nTo make the string good, you can choose **two adjacent** characters that make the string bad and remove them. You can keep doing this until the string becomes good.\n\nReturn _the string_ after making it good. The answer is guaranteed to be unique under the given constraints.\n\n**Notice** that an empty string is also good.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leEeetcode \"\n**Output:**  \"leetcode \"\n**Explanation:** In the first step, either you choose i = 1 or i = 2, both will result  \"leEeetcode \" to be reduced to  \"leetcode \".\n\n**Example 2:**\n\n**Input:** s =  \"abBAcC \"\n**Output:**  \" \"\n**Explanation:** We have many possible scenarios, and all lead to the same answer. For example:\n \"abBAcC \" -->  \"aAcC \" -->  \"cC \" -->  \" \"\n \"abBAcC \" -->  \"abBA \" -->  \"aA \" -->  \" \"\n\n**Example 3:**\n\n**Input:** s =  \"s \"\n**Output:**  \"s \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` contains only lower and upper case English letters.The order you choose 2 characters to remove doesn't matter. Keep applying the mentioned step to s till the length of the string is not changed.",
          "output": "def goodNodes(root, maxVal=float('-inf')):\n    if not root:\n        return 0\n    result = 0\n    if root.val >= maxVal:\n        result = 1\n        maxVal = root.val\n    return result + goodNodes(root.left, maxVal) + goodNodes(root.right, maxVal)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two positive integers `n` and `k`, the binary string `Sn` is formed as follows:\n\n*   `S1 = \"0 \"`\n*   `Si = Si - 1 + \"1 \" + reverse(invert(Si - 1))` for `i > 1`\n\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the reversed string `x`, and `invert(x)` inverts all the bits in `x` (`0` changes to `1` and `1` changes to `0`).\n\nFor example, the first four strings in the above sequence are:\n\n*   `S1 = \"0 \"`\n*   `S2 = \"0**1**1 \"`\n*   `S3 = \"011**1**001 \"`\n*   `S4 = \"0111001**1**0110001 \"`\n\nReturn _the_ `kth` _bit_ _in_ `Sn`. It is guaranteed that `k` is valid for the given `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 1\n**Output:**  \"0 \"\n**Explanation:** S3 is  \"**0**111001 \".\nThe 1st bit is  \"0 \".\n\n**Example 2:**\n\n**Input:** n = 4, k = 11\n**Output:**  \"1 \"\n**Explanation:** S4 is  \"0111001101**1**0001 \".\nThe 11th bit is  \"1 \".\n\n**Constraints:**\n\n*   `1 <= n <= 20`\n*   `1 <= k <= 2n - 1`Since n is small, we can simply simulate the process of constructing S1 to Sn.",
          "output": "def largestNumber(cost, target):\n    dp = [\"\" for _ in range(target + 1)]\n    dp[0] = \"\"\n    \n    for t in range(1, target + 1):\n        for i in range(1, 10):\n            if t >= cost[i - 1] and dp[t - cost[i - 1]]:\n                temp = dp[t - cost[i - 1]] + str(i)\n                if len(dp[t]) <= len(temp):\n                    dp[t] = temp\n\n    return dp[target] if dp[target] else \"0\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s`. An **awesome** substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it a palindrome.\n\nReturn _the length of the maximum length **awesome substring** of_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"3242415 \"\n**Output:** 5\n**Explanation:**  \"24241 \" is the longest awesome substring, we can form the palindrome  \"24142 \" with some swaps.\n\n**Example 2:**\n\n**Input:** s =  \"12345678 \"\n**Output:** 1\n\n**Example 3:**\n\n**Input:** s =  \"213123 \"\n**Output:** 6\n**Explanation:**  \"213123 \" is the longest awesome substring, we can form the palindrome  \"231132 \" with some swaps.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists only of digits.Given the character counts, under what conditions can a palindrome be formed ? From left to right, use bitwise xor-operation to compute for any prefix the number of times modulo 2 of each digit.  (mask ^= (1<<(s[i]-'0')). Expected complexity is O(n*A) where A is the alphabet (10).",
          "output": "def max_power(s: str) -> int:\n    max_power = current_power = 1\n\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_power += 1\n        else:\n            max_power = max(max_power, current_power)\n            current_power = 1\n\n    return max(max_power, current_power)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length **6** is labelled as follows:\n\nGiven an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at.\n\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\n\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n\nReturn _the minimum total cost_ of the cuts.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7, cuts = \\[1,3,4,5\\]\n**Output:** 16\n**Explanation:** Using cuts order = \\[1, 3, 4, 5\\] as in the input leads to the following scenario:\n \nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be \\[3, 5, 1, 4\\] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).\n\n**Example 2:**\n\n**Input:** n = 9, cuts = \\[5,6,1,4,2\\]\n**Output:** 22\n**Explanation:** If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost <= 25, for example, the order \\[4, 6, 5, 2, 1\\] has total cost = 22 which is the minimum possible.\n\n**Constraints:**\n\n*   `2 <= n <= 106`\n*   `1 <= cuts.length <= min(n - 1, 100)`\n*   `1 <= cuts[i] <= n - 1`\n*   All the integers in `cuts` array are **distinct**.Build a dp array where dp[i][j] is the minimum cost to achieve all the cuts between i and j. When you try to get the minimum cost between i and j, try all possible cuts k between them, dp[i][j] = min(dp[i][k] + dp[k][j]) + (j - i) for all possible cuts k between them.",
          "output": "def destCity(paths):\n    starting_cities = set()\n    \n    for path in paths:\n        starting_cities.add(path[0])\n\n    for path in paths:\n        if path[1] not in starting_cities:\n            return path[1]\n\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: We have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is **larger** than the rest of the integers. You will not be given direct access to the array, instead, you will have an **API** `ArrayReader` which have the following functions:\n\n*   `int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y`. The function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns:\n    *   **1** if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`.\n    *   **0** if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`.\n    *   **\\-1** if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`.\n*   `int length()`: Returns the size of the array.\n\nYou are allowed to call `compareSub()` **20 times** at most. You can assume both functions work in `O(1)` time.\n\nReturn _the index of the array `arr` which has the largest integer_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[7,7,7,7,10,7,7,7\\]\n**Output:** 4\n**Explanation:** The following calls to the API\nreader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr\\[0\\] with arr\\[1\\]).\nThus we know that arr\\[0\\] and arr\\[1\\] doesn't contain the largest element.\nreader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr\\[2\\] and arr\\[3\\].\nreader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr\\[4\\] is the largest element in the array.\nNotice that we made only 3 calls, so the answer is valid.\n\n**Example 2:**\n\n**Input:** nums = \\[6,6,12\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `2 <= arr.length <= 5 * 105`\n*   `1 <= arr[i] <= 100`\n*   All elements of `arr` are equal except for one element which is larger than all other elements.\n\n**Follow up:**\n\n*   What if there are two numbers in `arr` that are bigger than all other numbers?\n*   What if there is one number that is bigger than other numbers and one number that is smaller than other numbers?Do a binary search over the array, exclude the half of the array that doesn't contain the largest number. Keep shrinking the search space till it reaches the size of 2 where you can easily determine which one has the largest integer.",
          "output": "from collections import defaultdict\nfrom typing import List\n\ndef displayTable(orders: List[List[str]]) -> List[List[str]]:\n    foodItems = set()\n    tableOrders = defaultdict(lambda: defaultdict(int))\n\n    for order in orders:\n        foodItems.add(order[2])\n        tableOrders[int(order[1])][order[2]] += 1\n\n    foodItems = sorted(foodItems)\n    header = [\"Table\"] + foodItems\n    result = [header]\n\n    for tableNumber, foodOrder in sorted(tableOrders.items()):\n        row = [str(tableNumber)] + [str(foodOrder[food]) for food in foodItems]\n        result.append(row)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e., `0 <= i < n`).\n\nIn one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e., perform `arr[x] -=1` and `arr[y] += 1`). The goal is to make all the elements of the array **equal**. It is **guaranteed** that all the elements of the array can be made equal using some operations.\n\nGiven an integer `n`, the length of the array, return _the minimum number of operations_ needed to make all the elements of arr equal.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** arr = \\[1, 3, 5\\]\nFirst operation choose x = 2 and y = 0, this leads arr to be \\[2, 3, 4\\]\nIn the second operation choose x = 2 and y = 0 again, thus arr = \\[3, 3, 3\\].\n\n**Example 2:**\n\n**Input:** n = 6\n**Output:** 9\n\n**Constraints:**\n\n*   `1 <= n <= 104`Build the array arr using the given formula, define target = sum(arr) / n What is the number of operations needed to convert arr so that all elements equal target ?",
          "output": "def min_operations(n):\n    return n * n // 4\n"
     },
     {
          "instruction": "Write python code for this problem: In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the **minimum magnetic force** between any two balls is **maximum**.\n\nRick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`.\n\nGiven the integer array `position` and the integer `m`. Return _the required force_.\n\n",
          "input": "**Example 1:**\n\n**Input:** position = \\[1,2,3,4,7\\], m = 3\n**Output:** 3\n**Explanation:** Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs \\[3, 3, 6\\]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n\n**Example 2:**\n\n**Input:** position = \\[5,4,3,2,1,1000000000\\], m = 2\n**Output:** 999999999\n**Explanation:** We can use baskets 1 and 1000000000.\n\n**Constraints:**\n\n*   `n == position.length`\n*   `2 <= n <= 105`\n*   `1 <= position[i] <= 109`\n*   All integers in `position` are **distinct**.\n*   `2 <= m <= position.length`If you can place balls such that the answer is x then you can do it for y where y < x. Similarly if you cannot place balls such that the answer is x then you can do it for y where y > x. Binary search on the answer and greedily see if it is possible.",
          "output": "def build_array(target, n):\n    result = []\n    current = 1\n    for num in target:\n        while current < num:\n            result.append(\"Push\")\n            result.append(\"Pop\")\n            current += 1\n        result.append(\"Push\")\n        current += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows:\n\n*   Eat one orange.\n*   If the number of remaining oranges `n` is divisible by `2` then you can eat `n / 2` oranges.\n*   If the number of remaining oranges `n` is divisible by `3` then you can eat `2 * (n / 3)` oranges.\n\nYou can only choose one of the actions per day.\n\nGiven the integer `n`, return _the minimum number of days to eat_ `n` _oranges_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 10\n**Output:** 4\n**Explanation:** You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2\\*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2\\*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges.\n\n**Example 2:**\n\n**Input:** n = 6\n**Output:** 3\n**Explanation:** You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2\\*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges.\n\n**Constraints:**\n\n*   `1 <= n <= 2 * 109`In each step, choose between 2 options:\r\nminOranges = 1 + min( (n%2) + f(n/2), (n%3) + f(n/3) )\r\nwhere f(n) is the minimum number of days to eat n oranges.",
          "output": "def countTriplets(arr):\n    n = len(arr)\n    XOR = [0] * (n + 1)\n    \n    for i in range(n):\n        XOR[i+1] = XOR[i] ^ arr[i]\n    \n    count = 0\n    for i in range(n):\n        for k in range(i+1, n):\n            if XOR[i] == XOR[k+1]:\n                count += k-i\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given a square matrix `mat`, return the sum of the matrix diagonals.\n\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[**1**,2,**3**\\],\n              \\[4,**5**,6\\],\n              \\[**7**,8,**9**\\]\\]\n**Output:** 25\n**Explanation:** Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat\\[1\\]\\[1\\] = 5 is counted only once.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[**1**,1,1,**1**\\],\n              \\[1,**1**,**1**,1\\],\n              \\[1,**1**,**1**,1\\],\n              \\[**1**,1,1,**1**\\]\\]\n**Output:** 8\n\n**Example 3:**\n\n**Input:** mat = \\[\\[**5**\\]\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `n == mat.length == mat[i].length`\n*   `1 <= n <= 100`\n*   `1 <= mat[i][j] <= 100`There will be overlap of elements in the primary and secondary diagonals if and only if the length of the matrix is odd, which is at the center.",
          "output": "class SubrectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s`, you can split `s` into 3 **non-empty** strings `s1`, `s2`, and `s3` where `s1 + s2 + s3 = s`.\n\nReturn the number of ways `s` can be split such that the number of ones is the same in `s1`, `s2`, and `s3`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"10101 \"\n**Output:** 4\n**Explanation:** There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n \"1|010|1 \"\n \"1|01|01 \"\n \"10|10|1 \"\n \"10|1|01 \"\n\n**Example 2:**\n\n**Input:** s =  \"1001 \"\n**Output:** 0\n\n**Example 3:**\n\n**Input:** s =  \"0000 \"\n**Output:** 3\n**Explanation:** There are three ways to split s in 3 parts.\n \"0|0|00 \"\n \"0|00|0 \"\n \"00|0|0 \"\n\n**Constraints:**\n\n*   `3 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`.There is no way if the sum (number of '1's) is not divisible by the number of splits. So sum%3 should be 0. Preffix s1 , and suffix s3 should have sum/3 characters '1'. Follow up: Can you generalize the problem with numbers between [-10^9, 10^9] such the sum between subarrays s1, s2, s3 are the same?",
          "output": "def min_sum_of_lengths(arr, target):\n    n = len(arr)\n    sum_, min_len, result = 0, float('inf'), float('inf')\n    mp = {0: -1}\n\n    for i in range(n):\n        sum_ += arr[i]\n        if sum_ >= target and (sum_ - target) in mp:\n            if mp[sum_ - target] > -1 and min_len != float('inf'):\n                result = min(result, i - mp[sum_ - target] + min_len)\n            min_len = min(min_len, i - mp[sum_ - target])\n        mp[sum_] = i\n\n    return result if result != float('inf') else -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are **non-decreasing**.\n\nReturn _the length of the shortest subarray to remove_.\n\nA **subarray** is a contiguous subsequence of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,3,10,4,2,3,5\\]\n**Output:** 3\n**Explanation:** The shortest subarray we can remove is \\[10,4,2\\] of length 3. The remaining elements after that will be \\[1,2,3,3,5\\] which are sorted.\nAnother correct solution is to remove the subarray \\[3,10,4\\].\n\n**Example 2:**\n\n**Input:** arr = \\[5,4,3,2,1\\]\n**Output:** 4\n**Explanation:** Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either \\[5,4,3,2\\] or \\[4,3,2,1\\].\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,3\\]\n**Output:** 0\n**Explanation:** The array is already non-decreasing. We do not need to remove any elements.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `0 <= arr[i] <= 109`The key is to find the longest non-decreasing subarray starting with the first element or ending with the last element, respectively. After removing some subarray, the result is the concatenation of a sorted prefix and a sorted suffix, where the last element of the prefix is smaller than the first element of the suffix.",
          "output": "def findLengthOfShortestSubarray(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    while left < n - 1 and arr[left] <= arr[left + 1]:\n        left += 1\n    if left == n - 1:\n        return 0\n    while right > 0 and arr[right] >= arr[right - 1]:\n        right -= 1\n    result = min(n - left - 1, right)\n    i, j = 0, right\n    while i <= left and j < n:\n        if arr[i] <= arr[j]:\n            result = min(result, j - i - 1)\n            i += 1\n        else:\n            j += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of **distinct** positive integers locations where `locations[i]` represents the position of city `i`. You are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively.\n\nAt each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. Moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. Please notice that `|x|` denotes the absolute value of `x`.\n\nNotice that `fuel` **cannot** become negative at any point in time, and that you are **allowed** to visit any city more than once (including `start` and `finish`).\n\nReturn _the count of all possible routes from_ `start` _to_ `finish`. Since the answer may be too large, return it modulo `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** locations = \\[2,3,6,8,4\\], start = 1, finish = 3, fuel = 5\n**Output:** 4\n**Explanation:** The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3\n\n**Example 2:**\n\n**Input:** locations = \\[4,3,1\\], start = 1, finish = 0, fuel = 6\n**Output:** 5\n**Explanation:** The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5\n\n**Example 3:**\n\n**Input:** locations = \\[5,2,1\\], start = 0, finish = 2, fuel = 3\n**Output:** 0\n**Explanation:** It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.\n\n**Constraints:**\n\n*   `2 <= locations.length <= 100`\n*   `1 <= locations[i] <= 109`\n*   All integers in `locations` are **distinct**.\n*   `0 <= start, finish < locations.length`\n*   `1 <= fuel <= 200`Use dynamic programming to solve this problem with each state defined by the city index and fuel left. Since the array contains distinct integers fuel will always be spent in each move and so there can be no cycles.",
          "output": "def maxArea(h, w, horizontalCuts, verticalCuts):\n    horizontalCuts.sort()\n    verticalCuts.sort()\n\n    maxH = max(horizontalCuts[0], h - horizontalCuts[-1])\n    maxV = max(verticalCuts[0], w - verticalCuts[-1])\n\n    for i in range(1, len(horizontalCuts)):\n        maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1])\n\n    for i in range(1, len(verticalCuts)):\n        maxV = max(maxV, verticalCuts[i] - verticalCuts[i - 1])\n\n    return (maxH * maxV) % (10**9 + 7)\n"
     },
     {
          "instruction": "Write python code for this problem: We have an integer array `nums`, where all the integers in `nums` are **0** or **1**. You will not be given direct access to the array, instead, you will have an **API** `ArrayReader` which have the following functions:\n\n*   `int query(int a, int b, int c, int d)`: where `0 <= a < b < c < d < ArrayReader.length()`. The function returns the distribution of the value of the 4 elements and returns:\n    *   **4** : if the values of the 4 elements are the same (0 or 1).\n    *   **2** : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa.\n    *   **0** : if two element have a value equal to 0 and two elements have a value equal to 1.\n*   `int length()`: Returns the size of the array.\n\nYou are allowed to call `query()` **2 \\* n times** at most where n is equal to `ArrayReader.length()`.\n\nReturn **any** index of the most frequent value in `nums`, in case of tie, return -1.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,0,1,0,1,1,1,1\\]\n**Output:** 5\n**Explanation:** The following calls to the API\nreader.length() // returns 8 because there are 8 elements in the hidden array.\nreader.query(0,1,2,3) // returns 2 this is a query that compares the elements nums\\[0\\], nums\\[1\\], nums\\[2\\], nums\\[3\\]\n// Three elements have a value equal to 0 and one element has value equal to 1 or viceversa.\nreader.query(4,5,6,7) // returns 4 because nums\\[4\\], nums\\[5\\], nums\\[6\\], nums\\[7\\] have the same value.\nwe can infer that the most frequent value is found in the last 4 elements.\nIndex 2, 4, 6, 7 is also a correct answer.\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,1,1,0\\]\n**Output:** 0\n\n**Example 3:**\n\n**Input:** nums = \\[1,0,1,0,1,0,1,0\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `5 <= nums.length <= 105`\n*   `0 <= nums[i] <= 1`\n\n**Follow up:** What is the minimum number of calls needed to find the majority element?If you find that 2 indexes in the array (id1, id2) have the same value (nums [id1] == nums [id2]), you could infer the values of (x, y) based on the results of query (id1, id2, x, y).",
          "output": "def maxScore(cardPoints, k):\n    n = len(cardPoints)\n    total = sum(cardPoints[:k])\n\n    max_score = total\n    for i in range(k - 1, -1, -1):\n        j = n - k + i\n        total += cardPoints[j] - cardPoints[i]\n        max_score = max(max_score, total)\n\n    return max_score\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`\n\nReturn _an array of the most visited sectors_ sorted in **ascending** order.\n\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, rounds = \\[1,3,1,2\\]\n**Output:** \\[1,2\\]\n**Explanation:** The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.\n\n**Example 2:**\n\n**Input:** n = 2, rounds = \\[2,1,2,1,2,1,2,1,2\\]\n**Output:** \\[2\\]\n\n**Example 3:**\n\n**Input:** n = 7, rounds = \\[1,3,5,7\\]\n**Output:** \\[1,2,3,4,5,6,7\\]\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `1 <= m <= 100`\n*   `rounds.length == m + 1`\n*   `1 <= rounds[i] <= n`\n*   `rounds[i] != rounds[i + 1]` for `0 <= i < m`For each round increment the visits of the sectors visited during the marathon with 1. Determine the max number of visits, and return any sector visited the max number of visits.",
          "output": "def busy_student(start_time, end_time, query_time):\n    count = 0\n    for i in range(len(start_time)):\n        if start_time[i] <= query_time <= end_time[i]:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: There are `3n` piles of coins of varying size, you and your friends will take piles of coins as follows:\n\n*   In each step, you will choose **any** `3` piles of coins (not necessarily consecutive).\n*   Of your choice, Alice will pick the pile with the maximum number of coins.\n*   You will pick the next pile with the maximum number of coins.\n*   Your friend Bob will pick the last pile.\n*   Repeat until there are no more piles of coins.\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.\n\nReturn the maximum number of coins that you can have.\n\n",
          "input": "**Example 1:**\n\n**Input:** piles = \\[2,4,1,2,7,8\\]\n**Output:** 9\n**Explanation:** Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with **7** coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with **2** coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, **2**, 8), (2, **4**, 7) you only get 2 + 4 = 6 coins which is not optimal.\n\n**Example 2:**\n\n**Input:** piles = \\[2,4,5\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** piles = \\[9,8,7,6,5,1,2,3,4\\]\n**Output:** 18\n\n**Constraints:**\n\n*   `3 <= piles.length <= 105`\n*   `piles.length % 3 == 0`\n*   `1 <= piles[i] <= 104`Which pile of coins will you never be able to pick up? Bob is forced to take the last pile of coins, no matter what it is. Which pile should you give to him?",
          "output": "def arrangeWords(text: str) -> str:\n    words = text.split()\n    words[0] = words[0].lower()\n    words.sort(key=len)\n    words[0] = words[0].capitalize()\n    return ' '.join(words)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `arr` that represents a permutation of numbers from `1` to `n`.\n\nYou have a binary string of size `n` that initially has all its bits set to zero. At each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`.\n\nYou are also given an integer `m`. Find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of `1`'s such that it cannot be extended in either direction.\n\nReturn _the latest step at which there exists a group of ones of length **exactly**_ `m`. _If no such group exists, return_ `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[3,5,1,2,4\\], m = 1\n**Output:** 4\n**Explanation:** \nStep 1:  \"00100 \", groups: \\[ \"1 \"\\]\nStep 2:  \"00101 \", groups: \\[ \"1 \",  \"1 \"\\]\nStep 3:  \"10101 \", groups: \\[ \"1 \",  \"1 \",  \"1 \"\\]\nStep 4:  \"11101 \", groups: \\[ \"111 \",  \"1 \"\\]\nStep 5:  \"11111 \", groups: \\[ \"11111 \"\\]\nThe latest step at which there exists a group of size 1 is step 4.\n\n**Example 2:**\n\n**Input:** arr = \\[3,1,5,4,2\\], m = 2\n**Output:** -1\n**Explanation:** \nStep 1:  \"00100 \", groups: \\[ \"1 \"\\]\nStep 2:  \"10100 \", groups: \\[ \"1 \",  \"1 \"\\]\nStep 3:  \"10101 \", groups: \\[ \"1 \",  \"1 \",  \"1 \"\\]\nStep 4:  \"10111 \", groups: \\[ \"1 \",  \"111 \"\\]\nStep 5:  \"11111 \", groups: \\[ \"11111 \"\\]\nNo group of size 2 exists during any step.\n\n**Constraints:**\n\n*   `n == arr.length`\n*   `1 <= m <= n <= 105`\n*   `1 <= arr[i] <= n`\n*   All integers in `arr` are **distinct**.Since the problem asks for the latest step, can you start the searching from the end of arr? Use a map to store the current \u201c1\u201d groups. At each step (going backwards) you need to split one group and update the map.",
          "output": "from typing import List\n\ndef peopleIndexes(favoriteCompanies: List[List[str]]) -> List[int]:\n    result = []\n    for i in range(len(favoriteCompanies)):\n        is_subset = False\n        for j in range(len(favoriteCompanies)):\n            if i != j and set(favoriteCompanies[i]).issubset(favoriteCompanies[j]):\n                is_subset = True\n                break\n        if not is_subset:\n            result.append(i)\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\nIn each round of the game, Alice divides the row into **two non-empty rows** (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\n\nThe game ends when there is only **one stone remaining**. Alice's is initially **zero**.\n\nReturn _the maximum score that Alice can obtain_.\n\n",
          "input": "**Example 1:**\n\n**Input:** stoneValue = \\[6,2,3,4,5,5\\]\n**Output:** 18\n**Explanation:** In the first round, Alice divides the row to \\[6,2,3\\], \\[4,5,5\\]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to \\[6\\], \\[2,3\\]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is \\[2\\], \\[3\\]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.\n\n**Example 2:**\n\n**Input:** stoneValue = \\[7,7,7,7,7,7,7\\]\n**Output:** 28\n\n**Example 3:**\n\n**Input:** stoneValue = \\[4\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= stoneValue.length <= 500`\n*   `1 <= stoneValue[i] <= 106`We need to try all possible divisions for the current row to get the max score. As calculating all possible divisions will lead us to calculate some sub-problems more than once, we need to think of dynamic programming.",
          "output": "from math import acos, cos, sin, sqrt\n\ndef max_number_of_darts(darts, r):\n    n = len(darts)\n    max_darts = 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = sqrt((darts[j][0] - darts[i][0])**2 + (darts[j][1] - darts[i][1])**2)\n            if dist > 2.0 * r: continue\n\n            angle = acos(dist / (2.0 * r))\n            for k in range(2):\n                loc_angle = angle * (1 if k == 0 else -1)\n                cx = darts[i][0] + r * (darts[j][0] - darts[i][0]) / dist * cos(loc_angle) - r * (darts[j][1] - darts[i][1]) / dist * sin(loc_angle)\n                cy = darts[i][1] + r * (darts[j][0] - darts[i][0]) / dist * sin(loc_angle) + r * (darts[j][1] - darts[i][1]) / dist * cos(loc_angle)\n\n                cnt = 0\n                for l in range(n):\n                    new_dist = sqrt((darts[l][0] - cx)**2 + (darts[l][1] - cy)**2)\n                    if new_dist <= r + 1e-5: cnt += 1\n\n                max_darts = max(max_darts, cnt)\n\n    return max_darts\n"
     },
     {
          "instruction": "Write python code for this problem: We have `n` cities and `m` bi-directional `roads` where `roads[i] = [ai, bi]` connects city `ai` with city `bi`. Each city has a name consisting of exactly three upper-case English letters given in the string array `names`. Starting at any city `x`, you can reach any city `y` where `y != x` (i.e., the cities and the roads are forming an undirected connected graph).\n\nYou will be given a string array `targetPath`. You should find a path in the graph of the **same length** and with the **minimum edit distance** to `targetPath`.\n\nYou need to return _the order of the nodes in the path with the minimum edit distance_. The path should be of the same length of `targetPath` and should be valid (i.e., there should be a direct road between `ans[i]` and `ans[i + 1]`). If there are multiple answers return any one of them.\n\nThe **edit distance** is defined as follows:\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, roads = \\[\\[0,2\\],\\[0,3\\],\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[2,4\\]\\], names = \\[ \"ATL \", \"PEK \", \"LAX \", \"DXB \", \"HND \"\\], targetPath = \\[ \"ATL \", \"DXB \", \"HND \", \"LAX \"\\]\n**Output:** \\[0,2,4,2\\]\n**Explanation:** \\[0,2,4,2\\], \\[0,3,0,2\\] and \\[0,3,1,2\\] are accepted answers.\n\\[0,2,4,2\\] is equivalent to \\[ \"ATL \", \"LAX \", \"HND \", \"LAX \"\\] which has edit distance = 1 with targetPath.\n\\[0,3,0,2\\] is equivalent to \\[ \"ATL \", \"DXB \", \"ATL \", \"LAX \"\\] which has edit distance = 1 with targetPath.\n\\[0,3,1,2\\] is equivalent to \\[ \"ATL \", \"DXB \", \"PEK \", \"LAX \"\\] which has edit distance = 1 with targetPath.\n\n**Example 2:**\n\n**Input:** n = 4, roads = \\[\\[1,0\\],\\[2,0\\],\\[3,0\\],\\[2,1\\],\\[3,1\\],\\[3,2\\]\\], names = \\[ \"ATL \", \"PEK \", \"LAX \", \"DXB \"\\], targetPath = \\[ \"ABC \", \"DEF \", \"GHI \", \"JKL \", \"MNO \", \"PQR \", \"STU \", \"VWX \"\\]\n**Output:** \\[0,1,0,1,0,1,0,1\\]\n**Explanation:** Any path in this graph has edit distance = 8 with targetPath.\n\n**Example 3:**\n\n**Input:** n = 6, roads = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\]\\], names = \\[ \"ATL \", \"PEK \", \"LAX \", \"ATL \", \"DXB \", \"HND \"\\], targetPath = \\[ \"ATL \", \"DXB \", \"HND \", \"DXB \", \"ATL \", \"LAX \", \"PEK \"\\]\n**Output:** \\[3,4,5,4,3,2,1\\]\n**Explanation:** \\[3,4,5,4,3,2,1\\] is the only path with edit distance = 0 with targetPath.\nIt's equivalent to \\[ \"ATL \", \"DXB \", \"HND \", \"DXB \", \"ATL \", \"LAX \", \"PEK \"\\]\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `m == roads.length`\n*   `n - 1 <= m <= (n * (n - 1) / 2)`\n*   `0 <= ai, bi <= n - 1`\n*   `ai != bi`\n*   The graph is guaranteed to be **connected** and each pair of nodes may have **at most one** direct road.\n*   `names.length == n`\n*   `names[i].length == 3`\n*   `names[i]` consists of upper-case English letters.\n*   There can be two cities with **the same** name.\n*   `1 <= targetPath.length <= 100`\n*   `targetPath[i].length == 3`\n*   `targetPath[i]` consists of upper-case English letters.\n\n**Follow up:** If each node can be visited only once in the path, What should you change in your solution?Create an array dp where dp[i][j] is the min edit distance for the path starting at node i and compared to index j of the targetPath. Traverse the dp array to obtain a valid answer.",
          "output": "def kLengthApart(nums, k):\n    last_one = -1\n    for i, num in enumerate(nums):\n        if num == 1:\n            if last_one != -1 and i - last_one <= k:\n                return False\n            last_one = i\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of positive integers `arr`, find a pattern of length `m` that is repeated `k` or more times.\n\nA **pattern** is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times **consecutively** without overlapping. A pattern is defined by its length and the number of repetitions.\n\nReturn `true` _if there exists a pattern of length_ `m` _that is repeated_ `k` _or more times, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,2,4,4,4,4\\], m = 1, k = 3\n**Output:** true\n**Explanation:** The pattern **(4)** of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,1,2,1,1,1,3\\], m = 2, k = 2\n**Output:** true\n**Explanation:** The pattern **(1,2)** of length 2 is repeated 2 consecutive times. Another valid pattern **(2,1) is** also repeated 2 times.\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,1,2,1,3\\], m = 2, k = 3\n**Output:** false\n**Explanation:** The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 100`\n*   `1 <= arr[i] <= 100`\n*   `1 <= m <= 100`\n*   `2 <= k <= 100`Use a three-layer loop to check all possible patterns by iterating through all possible starting positions, all indexes less than m, and if the character at the index is repeated k times.",
          "output": "def is_prefix_of_word(sentence: str, search_word: str) -> int:\n    words = sentence.split(' ')\n    for index, word in enumerate(words, start=1):\n        if word.startswith(search_word):\n            return index\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.\n\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\n\nReturn _the maximum length of a subarray with positive product_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,-2,-3,4\\]\n**Output:** 4\n**Explanation:** The array nums already has a positive product of 24.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,-2,-3,-4\\]\n**Output:** 3\n**Explanation:** The longest subarray with positive product is \\[1,-2,-3\\] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.\n\n**Example 3:**\n\n**Input:** nums = \\[-1,-2,-3,0,1\\]\n**Output:** 2\n**Explanation:** The longest subarray with positive product is \\[-1,-2\\] or \\[-2,-3\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`Split the whole array into subarrays by zeroes since a subarray with positive product cannot contain any zero. If the subarray has even number of negative numbers, the whole subarray has positive product. Otherwise, we have two choices, either - remove the prefix till the first negative element in this subarray, or remove the suffix starting from the last negative element in this subarray.",
          "output": "def max_vowels(s, k):\n    max_count = count = 0\n    for i, c in enumerate(s):\n        count += int(c in 'aeiou')\n        if i >= k:\n            count -= int(s[i - k] in 'aeiou')\n        max_count = max(max_count, count)\n    return max_count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary grid `grid` where `1` represents land and `0` represents water. An **island** is a maximal **4-directionally** (horizontal or vertical) connected group of `1`'s.\n\nThe grid is said to be **connected** if we have **exactly one island**, otherwise is said **disconnected**.\n\nIn one day, we are allowed to change **any** single land cell `(1)` into a water cell `(0)`.\n\nReturn _the minimum number of days to disconnect the grid_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1,1,0\\],\\[0,1,1,0\\],\\[0,0,0,0\\]\\]\n\n**Output:** 2\n**Explanation:** We need at least 2 days to get a disconnected grid.\nChange land grid\\[1\\]\\[1\\] and grid\\[0\\]\\[2\\] to water and get 2 disconnected island.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1\\]\\]\n**Output:** 2\n**Explanation:** Grid of full water is also disconnected (\\[\\[1,1\\]\\] -> \\[\\[0,0\\]\\]), 0 islands.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 30`\n*   `grid[i][j]` is either `0` or `1`.Return 0 if the grid is already disconnected. Return 1 if changing a single land to water disconnect the island. Otherwise return 2. We can disconnect the grid within at most 2 days.",
          "output": "def pseudoPalindromicPaths(root, cnt = 0):\n    if not root:\n        return 0\n    cnt ^= 1 << (root.val - 1)\n    if not root.left and not root.right:\n        return (cnt & (cnt - 1)) == 0\n    return pseudoPalindromicPaths(root.left, cnt) + pseudoPalindromicPaths(root.right, cnt)\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums` that represents a permutation of integers from `1` to `n`. We are going to construct a binary search tree (BST) by inserting the elements of `nums` in order into an initially empty BST. Find the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`.\n\n*   For example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array `[2,3,1]` also yields the same BST but `[3,2,1]` yields a different BST.\n\nReturn _the number of ways to reorder_ `nums` _such that the BST formed is identical to the original BST formed from_ `nums`.\n\nSince the answer may be very large, **return it modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,3\\]\n**Output:** 1\n**Explanation:** We can reorder nums to be \\[2,3,1\\] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.\n\n**Example 2:**\n\n**Input:** nums = \\[3,4,5,1,2\\]\n**Output:** 5\n**Explanation:** The following 5 arrays will yield the same BST: \n\\[3,1,2,4,5\\]\n\\[3,1,4,2,5\\]\n\\[3,1,4,5,2\\]\n\\[3,4,1,2,5\\]\n\\[3,4,1,5,2\\]\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 0\n**Explanation:** There are no other orderings of nums that will yield the same BST.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= nums.length`\n*   All integers in `nums` are **distinct**.Use a divide and conquer strategy. The first number will always be the root. Consider the numbers smaller and larger than the root separately. When merging the results together, how many ways can you order x elements in x+y positions?",
          "output": "def maxDotProduct(nums1, nums2):\n    n, m = len(nums1), len(nums2)\n    dp = [[float('-inf') for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + nums1[i - 1] * nums2[j - 1], nums1[i - 1] * nums2[j - 1])\n    return dp[n][m]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of positive integers `arr`, return _the sum of all possible **odd-length subarrays** of_ `arr`.\n\nA **subarray** is a contiguous subsequence of the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[1,4,2,5,3\\]\n**Output:** 58\n**Explanation:** The odd-length subarrays of arr and their sums are:\n\\[1\\] = 1\n\\[4\\] = 4\n\\[2\\] = 2\n\\[5\\] = 5\n\\[3\\] = 3\n\\[1,4,2\\] = 7\n\\[4,2,5\\] = 11\n\\[2,5,3\\] = 10\n\\[1,4,2,5,3\\] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\n\n**Example 2:**\n\n**Input:** arr = \\[1,2\\]\n**Output:** 3\n**Explanation:** There are only 2 subarrays of odd length, \\[1\\] and \\[2\\]. Their sum is 3.\n\n**Example 3:**\n\n**Input:** arr = \\[10,11,12\\]\n**Output:** 66\n\n**Constraints:**\n\n*   `1 <= arr.length <= 100`\n*   `1 <= arr[i] <= 1000`\n\n**Follow up:**\n\nCould you solve this problem in O(n) time complexity?You can brute force \u2013 try every (i,j) pair, and if the length is odd, go through and add the sum to the answer.",
          "output": "def sumOddLengthSubarrays(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        oddSubarrays = ((i + 1) * (n - i) + 1) // 2\n        sum += arr[i] * oddSubarrays\n    return sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of positive integers `nums`, remove the **smallest** subarray (possibly **empty**) such that the **sum** of the remaining elements is divisible by `p`. It is **not** allowed to remove the whole array.\n\nReturn _the length of the smallest subarray that you need to remove, or_ `-1` _if it's impossible_.\n\nA **subarray** is defined as a contiguous block of elements in the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,4,2\\], p = 6\n**Output:** 1\n**Explanation:** The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray \\[4\\], and the sum of the remaining elements is 6, which is divisible by 6.\n\n**Example 2:**\n\n**Input:** nums = \\[6,3,5,2\\], p = 9\n**Output:** 2\n**Explanation:** We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray \\[5,2\\], leaving us with \\[6,3\\] with sum 9.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\], p = 3\n**Output:** 0\n**Explanation:** Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`\n*   `1 <= p <= 109`Use prefix sums to calculate the subarray sums. Suppose you know the remainder for the sum of the entire array. How does removing a subarray affect that remainder? What remainder does the subarray need to have in order to make the rest of the array sum up to be divisible by k? Use a map to keep track of the rightmost index for every prefix sum % p.",
          "output": "def minSubarray(nums, p):\n    n, res, need, cur = len(nums), len(nums), 0, 0\n    for num in nums:\n        need = (need + num) % p\n    if need == 0:\n        return 0\n    last_seen = {0: -1}\n    for i, num in enumerate(nums):\n        cur = (cur + num) % p\n        last_seen[cur] = i\n        res = min(res, i - last_seen.get((cur - need + p) % p, -n))\n    return res if res < n else -1\n"
     },
     {
          "instruction": "Write python code for this problem: We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are _0-indexed_.\n\nReturn _the maximum total sum of all requests **among all permutations** of_ `nums`.\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5\\], requests = \\[\\[1,3\\],\\[0,1\\]\\]\n**Output:** 19\n**Explanation:** One permutation of nums is \\[2,1,3,4,5\\] with the following result: \nrequests\\[0\\] -> nums\\[1\\] + nums\\[2\\] + nums\\[3\\] = 1 + 3 + 4 = 8\nrequests\\[1\\] -> nums\\[0\\] + nums\\[1\\] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is \\[3,5,4,2,1\\] with the following result:\nrequests\\[0\\] -> nums\\[1\\] + nums\\[2\\] + nums\\[3\\] = 5 + 4 + 2 = 11\nrequests\\[1\\] -> nums\\[0\\] + nums\\[1\\] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,5,6\\], requests = \\[\\[0,1\\]\\]\n**Output:** 11\n**Explanation:** A permutation with the max total sum is \\[6,5,4,3,2,1\\] with request sums \\[11\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5,10\\], requests = \\[\\[0,2\\],\\[1,3\\],\\[1,1\\]\\]\n**Output:** 47\n**Explanation:** A permutation with the max total sum is \\[4,10,5,3,2,1\\] with request sums \\[19,18,10\\].\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `0 <= nums[i] <= 105`\n*   `1 <= requests.length <= 105`\n*   `requests[i].length == 2`\n*   `0 <= starti <= endi < n`Indexes with higher frequencies should be bound with larger values",
          "output": "def maxSumRangeQuery(nums, requests):\n    n = len(nums)\n    count = [0] * n\n    for request in requests:\n        count[request[0]] += 1\n        if request[1] + 1 < n:\n            count[request[1] + 1] -= 1\n    for i in range(1, n):\n        count[i] += count[i - 1]\n\n    nums.sort()\n    count.sort()\n\n    ans = 0\n    for i in range(n):\n        ans = (ans + nums[i] * count[i]) % 1000000007\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There is a strange printer with the following two special requirements:\n\n*   On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\n*   Once the printer has used a color for the above operation, **the same color cannot be used again**.\n\nYou are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is the color in the position `(row, col)` of the grid.\n\nReturn `true` _if it is possible to print the matrix_ `targetGrid`_,_ _otherwise, return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** targetGrid = \\[\\[1,1,1,1\\],\\[1,2,2,1\\],\\[1,2,2,1\\],\\[1,1,1,1\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** targetGrid = \\[\\[1,1,1,1\\],\\[1,1,3,3\\],\\[1,1,3,4\\],\\[5,5,1,4\\]\\]\n**Output:** true\n\n**Example 3:**\n\n**Input:** targetGrid = \\[\\[1,2,1\\],\\[2,1,2\\],\\[1,2,1\\]\\]\n**Output:** false\n**Explanation:** It is impossible to form targetGrid because it is not allowed to print the same color in different turns.\n\n**Constraints:**\n\n*   `m == targetGrid.length`\n*   `n == targetGrid[i].length`\n*   `1 <= m, n <= 60`\n*   `1 <= targetGrid[row][col] <= 60`Try thinking in reverse. Given the grid, how can you tell if a colour was painted last?",
          "output": "def isPrintable(self, targetGrid: List[List[int]]) -> bool:\n    color_bounds = {}\n    m, n = len(targetGrid), len(targetGrid[0])\n\n    for i in range(m):\n        for j in range(n):\n            color = targetGrid[i][j]\n            if color not in color_bounds:\n                color_bounds[color] = [i, j, i, j]\n            else:\n                color_bounds[color][0] = min(color_bounds[color][0], i)\n                color_bounds[color][1] = min(color_bounds[color][1], j)\n                color_bounds[color][2] = max(color_bounds[color][2], i)\n                color_bounds[color][3] = max(color_bounds[color][3], j)\n\n    remaining_colors = set(color_bounds.keys())\n    while remaining_colors:\n        progress = False\n        to_remove = set()\n        for color in remaining_colors:\n            bounds = color_bounds[color]\n            contained = all(targetGrid[i][j] == color or targetGrid[i][j] == -1\n                        for i in range(bounds[0], bounds[2] + 1)\n                        for j in range(bounds[1], bounds[3] + 1))\n            if contained:\n                for i in range(bounds[0], bounds[2] + 1):\n                    for j in range(bounds[1], bounds[3] + 1):\n                        targetGrid[i][j] = -1\n                to_remove.add(color)\n                progress = True\n\n        remaining_colors -= to_remove\n        if not progress:\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given a list of strings `dict` where all the strings are of the same length.\n\nReturn `true` if there are 2 strings that only differ by 1 character in the same index, otherwise return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** dict = \\[ \"abcd \", \"acbd \",  \"aacd \"\\]\n**Output:** true\n**Explanation:** Strings  \"a**b**cd \" and  \"a**a**cd \" differ only by one character in the index 1.\n\n**Example 2:**\n\n**Input:** dict = \\[ \"ab \", \"cd \", \"yz \"\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** dict = \\[ \"abcd \", \"cccc \", \"abyd \", \"abab \"\\]\n**Output:** true\n\n**Constraints:**\n\n*   The number of characters in `dict <= 105`\n*   `dict[i].length == dict[j].length`\n*   `dict[i]` should be unique.\n*   `dict[i]` contains only lowercase English letters.\n\n**Follow up:** Could you solve this problem in `O(n * m)` where n is the length of `dict` and `m` is the length of each string.BruteForce, check all pairs and verify if they differ in one character. O(n^2 * m) where n is the number of words and m is the length of each string. O(m^2 * n), Use hashset, to insert all possible combinations adding a character \"*\". For example: If dict[i] = \"abc\", insert (\"*bc\", \"a*c\" and \"ab*\").",
          "output": "def minTime(n, edges, hasApple):\n    graph = {i: {} for i in range(n)}\n\n    for a, b in edges:\n        graph[a][b] = 0\n        graph[b][a] = 0\n\n    def dfs(v, parent):\n        ans = 0\n        for u in graph[v]:\n            if u == parent:\n                continue\n            ans += dfs(u, v) * 2\n        return ans + int(hasApple[v] or ans > 0)\n\n    return dfs(0, -1)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` containing only lowercase English letters and the `'?'` character, convert **all** the `'?'` characters into lowercase letters such that the final string does not contain any **consecutive repeating** characters. You **cannot** modify the non `'?'` characters.\n\nIt is **guaranteed** that there are no consecutive repeating characters in the given string **except** for `'?'`.\n\nReturn _the final string after all the conversions (possibly zero) have been made_. If there is more than one solution, return **any of them**. It can be shown that an answer is always possible with the given constraints.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"?zs \"\n**Output:**  \"azs \"\n**Explanation:** There are 25 solutions for this problem. From  \"azs \" to  \"yzs \", all are valid. Only  \"z \" is an invalid modification as the string will consist of consecutive repeating characters in  \"zzs \".\n\n**Example 2:**\n\n**Input:** s =  \"ubv?w \"\n**Output:**  \"ubvaw \"\n**Explanation:** There are 24 solutions for this problem. Only  \"v \" and  \"w \" are invalid modifications as the strings will consist of consecutive repeating characters in  \"ubvvw \" and  \"ubvww \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consist of lowercase English letters and `'?'`.Processing string from left to right, whenever you get a \u2018?\u2019, check left character and right character, and select a character not equal to either of them Do take care to compare with replaced occurrence of \u2018?\u2019 when checking the left character.",
          "output": "from collections import defaultdict\n\ndef dfs(node, parent, graph, count):\n    if node != 0 and parent == 0:\n        count[0] += 1\n\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, graph, count)\n\ndef minReorder(n, connections):\n    graph = defaultdict(list)\n    for a, b in connections:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    count = [0]\n    dfs(0, -1, graph, count)\n    return count[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:\n\n*   Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n*   Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[7,4\\], nums2 = \\[5,2,8,9\\]\n**Output:** 1\n**Explanation:** Type 1: (1, 1, 2), nums1\\[1\\]2 = nums2\\[1\\] \\* nums2\\[2\\]. (42 = 2 \\* 8). \n\n**Example 2:**\n\n**Input:** nums1 = \\[1,1\\], nums2 = \\[1,1,1\\]\n**Output:** 9\n**Explanation:** All Triplets are valid, because 12 = 1 \\* 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1\\[i\\]2 = nums2\\[j\\] \\* nums2\\[k\\].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2\\[i\\]2 = nums1\\[j\\] \\* nums1\\[k\\].\n\n**Example 3:**\n\n**Input:** nums1 = \\[7,7,8,3\\], nums2 = \\[1,2,9,7\\]\n**Output:** 2\n**Explanation:** There are 2 valid triplets.\nType 1: (3,0,2).  nums1\\[3\\]2 = nums2\\[0\\] \\* nums2\\[2\\].\nType 2: (3,0,1).  nums2\\[3\\]2 = nums1\\[0\\] \\* nums1\\[1\\].\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `1 <= nums1[i], nums2[i] <= 105`Precalculate the frequencies of all nums1[i]^2 and nums2[i]^2",
          "output": "class Solution:\n    def getProbability(self, balls: List[int]) -> float:\n        pre_sum = [0]\n        dp = [[[0]*62 for _ in range(10)] for _ in range(35)]\n        k = len(balls)\n\n        for b in balls:\n            pre_sum.append(pre_sum[-1] + b)\n\n        dp[0][0][0] = 1\n        for i in range(k):\n            for j in reversed(range(i + 1)):\n                for x in reversed(range(pre_sum[i+1] + 1)):\n                    for y in reversed(range(0, pre_sum[i+1] - x + 1)):\n                        if x + y <= balls[i]:\n                            for d in range(max(0, balls[i] - 2 * y), x + 1):\n                                tmp = 1\n                                for z in range(1, d + 1):\n                                    tmp *= (x + y + 1 - z) / z\n                                for z in range(1, y + 1):\n                                    tmp *= (x + y + d + 1 - z) / z\n                                for z in range(1, balls[i] - y - y - d + 1):\n                                    tmp *= (x + y + d + 1 - z) / z\n                                dp[i+1][j+1][x + d] += dp[i][j][x] * tmp\n                                dp[i+1][j][x + d] += dp[i][j][x] * tmp\n\n        sum_ = sum(balls)\n        return (dp[k][k >> 1][sum_ >> 1] - (1e-5 > dp[k][k >> 1][sum_ >> 1])) / (1 if sum_ % 2 else (1 << (sum_ >> 1)))\n"
     },
     {
          "instruction": "Write python code for this problem: Alice has `n` balloons arranged on a rope. You are given a **0-indexed** string `colors` where `colors[i]` is the color of the `ith` balloon.\n\nAlice wants the rope to be **colorful**. She does not want **two consecutive balloons** to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it **colorful**. You are given a **0-indexed** integer array `neededTime` where `neededTime[i]` is the time (in seconds) that Bob needs to remove the `ith` balloon from the rope.\n\nReturn _the **minimum time** Bob needs to make the rope **colorful**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** colors =  \"abaac \", neededTime = \\[1,2,3,4,5\\]\n**Output:** 3\n**Explanation:** In the above image, 'a' is blue, 'b' is red, and 'c' is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3.\n\n**Example 2:**\n\n**Input:** colors =  \"abc \", neededTime = \\[1,2,3\\]\n**Output:** 0\n**Explanation:** The rope is already colorful. Bob does not need to remove any balloons from the rope.\n\n**Example 3:**\n\n**Input:** colors =  \"aabaa \", neededTime = \\[1,2,3,4,1\\]\n**Output:** 2\n**Explanation:** Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.\n\n**Constraints:**\n\n*   `n == colors.length == neededTime.length`\n*   `1 <= n <= 105`\n*   `1 <= neededTime[i] <= 104`\n*   `colors` contains only lowercase English letters.Maintain the running sum and max value for repeated letters.",
          "output": "def minTime(colors: str, neededTime: List[int]) -> int:\n    res, prev = 0, -1\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i + 1]:\n            if prev == -1 or neededTime[i] < neededTime[prev]:\n                prev = i\n            if neededTime[i + 1] < neededTime[prev]:\n                prev = i + 1\n            res += neededTime[prev]\n            neededTime[prev] = 1000000\n            prev = -1\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob have an undirected graph of `n` nodes and three types of edges:\n\n*   Type 1: Can be traversed by Alice only.\n*   Type 2: Can be traversed by Bob only.\n*   Type 3: Can be traversed by both Alice and Bob.\n\nGiven an array `edges` where `edges[i] = [typei, ui, vi]` represents a bidirectional edge of type `typei` between nodes `ui` and `vi`, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\n\nReturn _the maximum number of edges you can remove, or return_ `-1` _if Alice and Bob cannot fully traverse the graph._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, edges = \\[\\[3,1,2\\],\\[3,2,3\\],\\[1,1,3\\],\\[1,2,4\\],\\[1,1,2\\],\\[2,3,4\\]\\]\n**Output:** 2\n**Explanation:** If we remove the 2 edges \\[1,1,2\\] and \\[1,1,3\\]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.\n\n**Example 2:**\n\n**Input:** n = 4, edges = \\[\\[3,1,2\\],\\[3,2,3\\],\\[1,1,4\\],\\[2,1,4\\]\\]\n**Output:** 0\n**Explanation:** Notice that removing any edge will not make the graph fully traversable by Alice and Bob.\n\n**Example 3:**\n\n**Input:** n = 4, edges = \\[\\[3,2,3\\],\\[1,1,2\\],\\[2,3,4\\]\\]\n**Output:** -1\n**Explanation:** In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `1 <= edges.length <= min(105, 3 * n * (n - 1) / 2)`\n*   `edges[i].length == 3`\n*   `1 <= typei <= 3`\n*   `1 <= ui < vi <= n`\n*   All tuples `(typei, ui, vi)` are distinct.Build the network instead of removing extra edges. Suppose you have the final graph (after removing extra edges). Consider the subgraph with only the edges that Alice can traverse. What structure does this subgraph have? How many edges are there? Use disjoint set union data structure for both Alice and Bob. Always use Type 3 edges first, and connect the still isolated ones using other edges.",
          "output": "class UnionFind:\n    def __init__(self, size):\n        self.parent = list(range(size))\n        self.components = size\n\n    def find(self, x):\n        if x != self.parent[x]:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def unite(self, x, y):\n        root_x, root_y = self.find(x), self.find(y)\n        if root_x != root_y:\n            self.parent[root_x] = root_y\n            self.components -= 1\n            return True\n        return False\n\ndef max_num_edges_to_remove(n, edges):\n    ufA, ufB = UnionFind(n + 1), UnionFind(n + 1)\n    common_edges = 0\n\n    for t, u, v in edges:\n        if t == 3:\n            if ufA.unite(u, v):\n                ufB.unite(u, v)\n                common_edges += 1\n\n    removed_edges = 0\n    for t, u, v in edges:\n        uf = ufA if t == 1 else ufB if t == 2 else None\n        if uf and not uf.unite(u, v):\n            removed_edges += 1\n\n    return -1 if ufA.components != 2 or ufB.components != 2 else removed_edges - common_edges\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.\n\nBoxes are put into the warehouse by the following rules:\n\n*   Boxes cannot be stacked.\n*   You can rearrange the insertion order of the boxes.\n*   Boxes can only be pushed into the warehouse from left to right only.\n*   If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn _the maximum number of boxes you can put into the warehouse._\n\n",
          "input": "**Example 1:**\n\n**Input:** boxes = \\[4,3,4,1\\], warehouse = \\[5,3,3,4,1\\]\n**Output:** 3\n**Explanation:** \n \nWe can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0.\nThere is no way we can fit all 4 boxes in the warehouse.\n\n**Example 2:**\n\n**Input:** boxes = \\[1,2,2,3,4\\], warehouse = \\[3,4,1,2\\]\n**Output:** 3\n**Explanation:** \n \nNotice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3.\nAlso, for the last two rooms, 2 and 3, only boxes of height 1 can fit.\nWe can fit 3 boxes maximum as shown above. The yellow box can also be put in room 2 instead.\nSwapping the orange and green boxes is also valid, or swapping one of them with the red box.\n\n**Example 3:**\n\n**Input:** boxes = \\[1,2,3\\], warehouse = \\[1,2,3,4\\]\n**Output:** 1\n**Explanation:** Since the first room in the warehouse is of height 1, we can only put boxes of height 1.\n\n**Constraints:**\n\n*   `n == warehouse.length`\n*   `1 <= boxes.length, warehouse.length <= 105`\n*   `1 <= boxes[i], warehouse[i] <= 109`Sort the boxes in ascending order, try to process the box with the smallest height first.",
          "output": "def maxBoxesInWarehouse(boxes, warehouse):\n    n = len(warehouse)\n    for i in range(1, n):\n        warehouse[i] = min(warehouse[i], warehouse[i - 1])\n    boxes.sort(reverse=True)\n    boxIndex = 0\n    boxesCount = 0\n    for i in range(n):\n        if boxIndex < len(boxes) and boxes[boxIndex] <= warehouse[i]:\n            boxesCount += 1\n            boxIndex += 1\n    return boxesCount\n"
     },
     {
          "instruction": "Write python code for this problem: Given an `m x n` binary matrix `mat`, return _the number of special positions in_ `mat`_._\n\nA position `(i, j)` is called **special** if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are **0-indexed**).\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,0,0\\],\\[0,0,1\\],\\[1,0,0\\]\\]\n**Output:** 1\n**Explanation:** (1, 2) is a special position because mat\\[1\\]\\[2\\] == 1 and all other elements in row 1 and column 2 are 0.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,0,0\\],\\[0,1,0\\],\\[0,0,1\\]\\]\n**Output:** 3\n**Explanation:** (0, 0), (1, 1) and (2, 2) are special positions.\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 100`\n*   `mat[i][j]` is either `0` or `1`.Keep track of 1s in each row and in each column. Then while iterating over matrix, if the current position is 1 and current row as well as current column contains exactly one occurrence of 1.",
          "output": "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.current_index = 0\n\n    def visit(self, url: str):\n        self.history = self.history[:self.current_index + 1]\n        self.history.append(url)\n        self.current_index += 1\n\n    def back(self, steps: int) -> str:\n        self.current_index -= min(steps, self.current_index)\n        return self.history[self.current_index]\n\n    def forward(self, steps:int) -> str:\n        self.current_index += min(steps, len(self.history) - 1 - self.current_index)\n        return self.history[self.current_index]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a list of `preferences` for `n` friends, where `n` is always **even**.\n\nFor each person `i`, `preferences[i]` contains a list of friends **sorted** in the **order of preference**. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from `0` to `n-1`.\n\nAll the friends are divided into pairs. The pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`.\n\nHowever, this pairing may cause some of the friends to be unhappy. A friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but:\n\n*   `x` prefers `u` over `y`, and\n*   `u` prefers `x` over `v`.\n\nReturn _the number of unhappy friends_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, preferences = \\[\\[1, 2, 3\\], \\[3, 2, 0\\], \\[3, 1, 0\\], \\[1, 2, 0\\]\\], pairs = \\[\\[0, 1\\], \\[2, 3\\]\\]\n**Output:** 2\n**Explanation:**\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.\n\n**Example 2:**\n\n**Input:** n = 2, preferences = \\[\\[1\\], \\[0\\]\\], pairs = \\[\\[1, 0\\]\\]\n**Output:** 0\n**Explanation:** Both friends 0 and 1 are happy.\n\n**Example 3:**\n\n**Input:** n = 4, preferences = \\[\\[1, 3, 2\\], \\[2, 3, 0\\], \\[1, 3, 0\\], \\[0, 2, 1\\]\\], pairs = \\[\\[1, 3\\], \\[0, 2\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `2 <= n <= 500`\n*   `n` is even.\n*   `preferences.length == n`\n*   `preferences[i].length == n - 1`\n*   `0 <= preferences[i][j] <= n - 1`\n*   `preferences[i]` does not contain `i`.\n*   All values in `preferences[i]` are unique.\n*   `pairs.length == n/2`\n*   `pairs[i].length == 2`\n*   `xi != yi`\n*   `0 <= xi, yi <= n - 1`\n*   Each person is contained in **exactly one** pair.Create a matrix \u201crank\u201d where rank[i][j] holds how highly friend \u2018i' views \u2018j\u2019. This allows for O(1) comparisons between people",
          "output": "def minCost(houses, cost, m, n, target):\n    dp = [[[float('inf')] * (target + 1) for _ in range(n)] for _ in range(m)]\n\n    if houses[0] != 0:\n        dp[0][houses[0] - 1][1] = 0\n    else:\n        for j in range(n):\n            dp[0][j][1] = cost[0][j]\n\n    for i in range(1, m):\n        for j in range(n):\n            for k in range(1, target + 1):\n                if houses[i] != 0 and houses[i] != j + 1:\n                    continue\n                paint_cost = 0 if houses[i] != 0 else cost[i][j]\n\n                for l in range(n):\n                    if l == j:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i - 1][l][k] + paint_cost)\n                    else:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i - 1][l][k - 1] + paint_cost)\n\n    ans = min(dp[m - 1][j][target] for j in range(n))\n    return -1 if ans == float('inf') else ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.\n\nThe cost of connecting two points `[xi, yi]` and `[xj, yj]` is the **manhattan distance** between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`.\n\nReturn _the minimum cost to make all points connected._ All points are connected if there is **exactly one** simple path between any two points.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[0,0\\],\\[2,2\\],\\[3,10\\],\\[5,2\\],\\[7,0\\]\\]\n**Output:** 20\n**Explanation:** \n \nWe can connect the points as shown above to get the minimum cost of 20.\nNotice that there is a unique path between every pair of points.\n\n**Example 2:**\n\n**Input:** points = \\[\\[3,12\\],\\[-2,5\\],\\[-4,1\\]\\]\n**Output:** 18\n\n**Constraints:**\n\n*   `1 <= points.length <= 1000`\n*   `-106 <= xi, yi <= 106`\n*   All pairs `(xi, yi)` are distinct.Connect each pair of points with a weighted edge, the weight being the manhattan distance between those points. The problem is now the cost of minimum spanning tree in graph with above edges.",
          "output": "def average(salary):\n    min_salary = min(salary)\n    max_salary = max(salary)\n    sum_salaries = sum(salary)\n    sum_salaries -= (min_salary + max_salary)\n    return sum_salaries / (len(salary) - 2)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, transform string `s` into string `t` using the following operation any number of times:\n\n*   Choose a **non-empty** substring in `s` and sort it in place so the characters are in **ascending order**.\n    *   For example, applying the operation on the underlined substring in `\"14234 \"` results in `\"12344 \"`.\n\nReturn `true` if _it is possible to transform `s` into `t`_. Otherwise, return `false`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"84532 \", t =  \"34852 \"\n**Output:** true\n**Explanation:** You can transform s into t using the following sort operations:\n \"84532 \" (from index 2 to 3) ->  \"84352 \"\n \"84352 \" (from index 0 to 2) ->  \"34852 \"\n\n**Example 2:**\n\n**Input:** s =  \"34521 \", t =  \"23415 \"\n**Output:** true\n**Explanation:** You can transform s into t using the following sort operations:\n \"34521 \" ->  \"23451 \"\n \"23451 \" ->  \"23415 \"\n\n**Example 3:**\n\n**Input:** s =  \"12345 \", t =  \"12435 \"\n**Output:** false\n\n**Constraints:**\n\n*   `s.length == t.length`\n*   `1 <= s.length <= 105`\n*   `s` and `t` consist of only digits.Suppose the first digit you need is 'd'. How can you determine if it's possible to get that digit there? Consider swapping adjacent characters to maintain relative ordering.",
          "output": "def kth_factor(n: int, k: int) -> int:\n    for i in range(1, n+1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\n\nImplement the `ParkingSystem` class:\n\n*   `ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.\n*   `bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. **A car can only park in a parking space of its** `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"ParkingSystem \",  \"addCar \",  \"addCar \",  \"addCar \",  \"addCar \"\\]\n\\[\\[1, 1, 0\\], \\[1\\], \\[2\\], \\[3\\], \\[1\\]\\]\n**Output**\n\\[null, true, true, false, false\\]\n\n**Explanation**\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.\n\n**Constraints:**\n\n*   `0 <= big, medium, small <= 1000`\n*   `carType` is `1`, `2`, or `3`\n*   At most `1000` calls will be made to `addCar`Record number of parking slots still available for each car type.",
          "output": "def runningSum(nums):\n    for i in range(1, len(nums)):\n        nums[i] += nums[i - 1]\n    return nums\n"
     },
     {
          "instruction": "Write python code for this problem: LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an **alert** if any worker uses the key-card **three or more times** in a one-hour period.\n\nYou are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used **in a** **single day**.\n\nAccess times are given in the **24-hour time format \"HH:MM \"**, such as `\"23:51 \"` and `\"09:49 \"`.\n\nReturn a _list of unique worker names who received an alert for frequent keycard use_. Sort the names in **ascending order alphabetically**.\n\nNotice that `\"10:00 \"` - `\"11:00 \"` is considered to be within a one-hour period, while `\"22:51 \"` - `\"23:52 \"` is not considered to be within a one-hour period.\n\n",
          "input": "**Example 1:**\n\n**Input:** keyName = \\[ \"daniel \", \"daniel \", \"daniel \", \"luis \", \"luis \", \"luis \", \"luis \"\\], keyTime = \\[ \"10:00 \", \"10:40 \", \"11:00 \", \"09:00 \", \"11:00 \", \"13:00 \", \"15:00 \"\\]\n**Output:** \\[ \"daniel \"\\]\n**Explanation:**  \"daniel \" used the keycard 3 times in a one-hour period ( \"10:00 \", \"10:40 \",  \"11:00 \").\n\n**Example 2:**\n\n**Input:** keyName = \\[ \"alice \", \"alice \", \"alice \", \"bob \", \"bob \", \"bob \", \"bob \"\\], keyTime = \\[ \"12:01 \", \"12:00 \", \"18:00 \", \"21:00 \", \"21:20 \", \"21:30 \", \"23:00 \"\\]\n**Output:** \\[ \"bob \"\\]\n**Explanation:**  \"bob \" used the keycard 3 times in a one-hour period ( \"21:00 \", \"21:20 \",  \"21:30 \").\n\n**Constraints:**\n\n*   `1 <= keyName.length, keyTime.length <= 105`\n*   `keyName.length == keyTime.length`\n*   `keyTime[i]` is in the format **\"HH:MM \"**.\n*   `[keyName[i], keyTime[i]]` is **unique**.\n*   `1 <= keyName[i].length <= 10`\n*   `keyName[i] contains only lowercase English letters.`Group the times by the name of the card user, then sort each group",
          "output": "import heapq\nfrom collections import Counter\n\ndef find_least_num_of_unique_ints(arr, k):\n    freq_map = Counter(arr)\n    min_heap = list(freq_map.values())\n    heapq.heapify(min_heap)\n\n    while k > 0:\n        k -= heapq.heappop(min_heap)\n\n    return len(min_heap) if k == 0 else len(min_heap) + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but **cannot handle more than one request at a time**. The requests are assigned to servers according to a specific algorithm:\n\n*   The `ith` (0-indexed) request arrives.\n*   If all servers are busy, the request is dropped (not handled at all).\n*   If the `(i % k)th` server is available, assign the request to that server.\n*   Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on.\n\nYou are given a **strictly increasing** array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). Your goal is to find the **busiest server(s)**. A server is considered **busiest** if it handled the most number of requests successfully among all the servers.\n\nReturn _a list containing the IDs (0-indexed) of the **busiest server(s)**_. You may return the IDs in any order.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 3, arrival = \\[1,2,3,4,5\\], load = \\[5,2,3,3,3\\] \n**Output:** \\[1\\] \n**Explanation:** \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.\n\n**Example 2:**\n\n**Input:** k = 3, arrival = \\[1,2,3,4\\], load = \\[1,2,1,2\\]\n**Output:** \\[0\\]\n**Explanation:** \nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.\n\n**Example 3:**\n\n**Input:** k = 3, arrival = \\[1,2,3\\], load = \\[10,12,11\\]\n**Output:** \\[0,1,2\\]\n**Explanation:** Each server handles a single request, so they are all considered the busiest.\n\n**Constraints:**\n\n*   `1 <= k <= 105`\n*   `1 <= arrival.length, load.length <= 105`\n*   `arrival.length == load.length`\n*   `1 <= arrival[i], load[i] <= 109`\n*   `arrival` is **strictly increasing**.To speed up the next available server search, keep track of the available servers in a sorted structure such as an ordered set. To determine if a server is available, keep track of the end times for each task in a heap and add the server to the available set once the soonest task ending time is less than or equal to the next task to add.",
          "output": "def busiestServers(k, arrival, load):\n    server_status = [-1] * k\n    server_request_count = [0] * k\n\n    for i in range(len(arrival)):\n        index = i % k\n        for _ in range(k):\n            if server_status[index] <= arrival[i]:\n                server_status[index] = arrival[i] + load[i]\n                server_request_count[index] += 1\n                break\n            index = (index + 1) % k\n\n    max_requests = max(server_request_count)\n    return [i for i in range(k) if server_request_count[i] == max_requests]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\n\nFind any matrix of **non-negative** integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements.\n\nReturn _a 2D array representing **any** matrix that fulfills the requirements_. It's guaranteed that **at least one** matrix that fulfills the requirements exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** rowSum = \\[3,8\\], colSum = \\[4,7\\]\n**Output:** \\[\\[3,0\\],\n         \\[1,7\\]\\]\n**Explanation:** \n0th row: 3 + 0 = 3 == rowSum\\[0\\]\n1st row: 1 + 7 = 8 == rowSum\\[1\\]\n0th column: 3 + 1 = 4 == colSum\\[0\\]\n1st column: 0 + 7 = 7 == colSum\\[1\\]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: \\[\\[1,2\\],\n                             \\[3,5\\]\\]\n\n**Example 2:**\n\n**Input:** rowSum = \\[5,7,10\\], colSum = \\[8,6,8\\]\n**Output:** \\[\\[0,5,0\\],\n         \\[6,1,0\\],\n         \\[2,0,8\\]\\]\n\n**Constraints:**\n\n*   `1 <= rowSum.length, colSum.length <= 500`\n*   `0 <= rowSum[i], colSum[i] <= 108`\n*   `sum(rowSum) == sum(colSum)`Find the smallest rowSum or colSum, and let it be x. Place that number in the grid, and subtract x from rowSum and colSum. Continue until all the sums are satisfied.",
          "output": "def minDays(bloomDay, m, k):\n    left, right = min(bloomDay), max(bloomDay)\n\n    while left < right:\n        mid = left + (right - left) // 2\n        bouquets = flowers = 0\n        for day in bloomDay:\n            if day > mid:\n                flowers = 0\n            else:\n                flowers += 1\n                if flowers == k:\n                    bouquets += 1\n                    flowers = 0\n\n        if bouquets >= m:\n            right = mid\n        else:\n            left = mid + 1\n\n    return -1 if m == 0 else left\n"
     },
     {
          "instruction": "Write python code for this problem: Given two sparse vectors, compute their dot product.\n\nImplement class `SparseVector`:\n\n*   `SparseVector(nums)` Initializes the object with the vector `nums`\n*   `dotProduct(vec)` Compute the dot product between the instance of _SparseVector_ and `vec`\n\nA **sparse vector** is a vector that has mostly zero values, you should store the sparse vector **efficiently** and compute the dot product between two _SparseVector_.\n\n**Follow up:** What if only one of the vectors is sparse?\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,0,0,2,3\\], nums2 = \\[0,3,0,4,0\\]\n**Output:** 8\n**Explanation:** v1 = SparseVector(nums1) , v2 = SparseVector(nums2)\nv1.dotProduct(v2) = 1\\*0 + 0\\*3 + 0\\*0 + 2\\*4 + 3\\*0 = 8\n\n**Example 2:**\n\n**Input:** nums1 = \\[0,1,0,0,0\\], nums2 = \\[0,0,0,0,2\\]\n**Output:** 0\n**Explanation:** v1 = SparseVector(nums1) , v2 = SparseVector(nums2)\nv1.dotProduct(v2) = 0\\*0 + 1\\*0 + 0\\*0 + 0\\*0 + 0\\*2 = 0\n\n**Example 3:**\n\n**Input:** nums1 = \\[0,1,0,0,2,0,0\\], nums2 = \\[1,0,0,0,3,0,4\\]\n**Output:** 6\n\n**Constraints:**\n\n*   `n == nums1.length == nums2.length`\n*   `1 <= n <= 10^5`\n*   `0 <= nums1[i], nums2[i] <= 100`Because the vector is sparse, use a data structure that stores the index and value where the element is nonzero.",
          "output": "def final_prices(prices):\n    for i in range(len(prices)):\n        for j in range(i + 1, len(prices)):\n            if prices[j] <= prices[i]:\n                prices[i] -= prices[j]\n                break\n    return prices\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` **contains at least one word**.\n\nRearrange the spaces so that there is an **equal** number of spaces between every pair of adjacent words and that number is **maximized**. If you cannot redistribute all the spaces equally, place the **extra spaces at the end**, meaning the returned string should be the same length as `text`.\n\nReturn _the string after rearranging the spaces_.\n\n",
          "input": "**Example 1:**\n\n**Input:** text =  \"  this   is  a sentence  \"\n**Output:**  \"this   is   a   sentence \"\n**Explanation:** There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n\n**Example 2:**\n\n**Input:** text =  \" practice   makes   perfect \"\n**Output:**  \"practice   makes   perfect  \"\n**Explanation:** There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n\n**Constraints:**\n\n*   `1 <= text.length <= 100`\n*   `text` consists of lowercase English letters and `' '`.\n*   `text` contains at least one word.Count the total number of spaces and words. Then use the integer division to determine the numbers of spaces to add between each word and at the end.",
          "output": "def reorderSpaces(text):\n    spaces = text.count(' ')\n    words = text.split()\n    num_words = len(words)\n    \n    if num_words == 1:\n        spaces_between_words = 0\n    else:\n        spaces_between_words = spaces // (num_words - 1)\n    \n    extra_spaces = spaces - spaces_between_words * (num_words - 1)\n\n    return (' ' * spaces_between_words).join(words) + ' ' * extra_spaces\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the maximum number of unique substrings that the given string can be split into_.\n\nYou can split string `s` into any list of **non-empty substrings**, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are **unique**.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ababccc \"\n**Output:** 5\n**Explanation**: One way to split maximally is \\['a', 'b', 'ab', 'c', 'cc'\\]. Splitting like \\['a', 'b', 'a', 'b', 'c', 'cc'\\] is not valid as you have 'a' and 'b' multiple times.\n\n**Example 2:**\n\n**Input:** s =  \"aba \"\n**Output:** 2\n**Explanation**: One way to split maximally is \\['a', 'ba'\\].\n\n**Example 3:**\n\n**Input:** s =  \"aa \"\n**Output:** 1\n**Explanation**: It is impossible to split the string any further.\n\n**Constraints:**\n\n*   `1 <= s.length <= 16`\n    \n*   `s` contains only lower case English letters.Use a set to keep track of which substrings have been used already Try each possible substring at every position and backtrack if a complete split is not possible",
          "output": "def maxUniqueSplit(s, start=0, seen=None):\n    if seen is None:\n        seen = set()\n    if start == len(s):\n        return 0\n    maxUnique = -1\n    for i in range(start + 1, len(s) + 1):\n        sub = s[start:i]\n        if sub not in seen:\n            seen.add(sub)\n            unique = maxUniqueSplit(s, i, seen)\n            if unique != -1:\n                maxUnique = max(maxUnique, unique + 1)\n            seen.remove(sub)\n    return maxUnique\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a `m x n` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only **move right or down** in the matrix.\n\nAmong all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(m - 1, n - 1)`, find the path with the **maximum non-negative product**. The product of a path is the product of all integers in the grid cells visited along the path.\n\nReturn the _maximum non-negative product **modulo**_ `109 + 7`. _If the maximum product is **negative**, return_ `-1`.\n\nNotice that the modulo is performed after getting the maximum product.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[-1,-2,-3\\],\\[-2,-3,-3\\],\\[-3,-3,-2\\]\\]\n**Output:** -1\n**Explanation:** It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,-2,1\\],\\[1,-2,1\\],\\[3,-4,1\\]\\]\n**Output:** 8\n**Explanation:** Maximum non-negative product is shown (1 \\* 1 \\* -2 \\* -4 \\* 1 = 8).\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,3\\],\\[0,-4\\]\\]\n**Output:** 0\n**Explanation:** Maximum non-negative product is shown (1 \\* 0 \\* -4 = 0).\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 15`\n*   `-4 <= grid[i][j] <= 4`Use Dynamic programming. Keep the highest value and lowest value you can achieve up to a point.",
          "output": "def maxProductPath(self, grid: List[List[int]]) -> int:\n    m, n, mod = len(grid), len(grid[0]), 10**9 + 7\n    dp = [[[0, 0] for _ in range(n)] for _ in range(m)]\n    dp[0][0] = [grid[0][0], grid[0][0]]\n    for i in range(1, m):\n        dp[i][0] = [grid[i][0] * dp[i - 1][0][0], grid[i][0] * dp[i - 1][0][0]]\n    for j in range(1, n):\n        dp[0][j] = [grid[0][j] * dp[0][j - 1][0], grid[0][j] * dp[0][j - 1][0]]\n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i][j] < 0:\n                dp[i][j][0] = min(grid[i][j] * dp[i - 1][j][1], grid[i][j] * dp[i][j - 1][1])\n                dp[i][j][1] = max(grid[i][j] * dp[i - 1][j][0], grid[i][j] * dp[i][j - 1][0])\n            else:\n                dp[i][j][0] = min(grid[i][j] * dp[i - 1][j][0], grid[i][j] * dp[i][j - 1][0])\n                dp[i][j][1] = max(grid[i][j] * dp[i - 1][j][1], grid[i][j] * dp[i][j - 1][1])\n    return -1 if dp[-1][-1][1] < 0 else dp[-1][-1][1] % mod\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`.\n\nThe `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. The groups are connected if **each point in both groups is connected to one or more points in the opposite group**. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\n\nReturn _the minimum cost it takes to connect the two groups_.\n\n",
          "input": "**Example 1:**\n\n**Input:** cost = \\[\\[15, 96\\], \\[36, 2\\]\\]\n**Output:** 17\n**Explanation**: The optimal way of connecting the groups is:\n1--A\n2--B\nThis results in a total cost of 17.\n\n**Example 2:**\n\n**Input:** cost = \\[\\[1, 3, 5\\], \\[4, 1, 1\\], \\[1, 5, 3\\]\\]\n**Output:** 4\n**Explanation**: The optimal way of connecting the groups is:\n1--A\n2--B\n2--C\n3--A\nThis results in a total cost of 4.\nNote that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.\n\n**Example 3:**\n\n**Input:** cost = \\[\\[2, 5, 1\\], \\[3, 4, 7\\], \\[8, 1, 2\\], \\[6, 2, 4\\], \\[3, 8, 8\\]\\]\n**Output:** 10\n\n**Constraints:**\n\n*   `size1 == cost.length`\n*   `size2 == cost[i].length`\n*   `1 <= size1, size2 <= 12`\n*   `size1 >= size2`\n*   `0 <= cost[i][j] <= 100`Each point on the left would either be connected to exactly point already connected to some left node, or a subset of the nodes on the right which are not connected to any node Use dynamic programming with bitmasking, where the state will be (number of points assigned in first group, bitmask of points assigned in second group).",
          "output": "def connectTwoGroups(cost):\n    size1, size2 = len(cost), len(cost[0])\n    min_cost = [float('inf')] * size2\n\n    for i in range(size1):\n        for j in range(size2):\n            min_cost[j] = min(min_cost[j], cost[i][j])\n\n    total_cost = 0\n    for i in range(size1):\n        total_cost += min(cost[i])\n\n    for j in range(size2):\n        total_cost += min_cost[j]\n\n    return total_cost\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.\n\nBoxes are put into the warehouse by the following rules:\n\n*   Boxes cannot be stacked.\n*   You can rearrange the insertion order of the boxes.\n*   Boxes can be pushed into the warehouse from **either side** (left or right)\n*   If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn _the maximum number of boxes you can put into the warehouse._\n\n",
          "input": "**Example 1:**\n\n**Input:** boxes = \\[1,2,2,3,4\\], warehouse = \\[3,4,1,2\\]\n**Output:** 4\n**Explanation:**\n \nWe can store the boxes in the following order:\n1- Put the yellow box in room 2 from either the left or right side.\n2- Put the orange box in room 3 from the right side.\n3- Put the green box in room 1 from the left side.\n4- Put the red box in room 0 from the left side.\nNotice that there are other valid ways to put 4 boxes such as swapping the red and green boxes or the red and orange boxes.\n\n**Example 2:**\n\n**Input:** boxes = \\[3,5,5,2\\], warehouse = \\[2,1,3,4,5\\]\n**Output:** 3\n**Explanation:**\n \nIt is not possible to put the two boxes of height 5 in the warehouse since there's only 1 room of height >= 5.\nOther valid solutions are to put the green box in room 2 or to put the orange box first in room 2 before putting the green and red boxes.\n\n**Constraints:**\n\n*   `n == warehouse.length`\n*   `1 <= boxes.length, warehouse.length <= 105`\n*   `1 <= boxes[i], warehouse[i] <= 109`Try to put at least one box in the house pushing it from either side. Once you put one box to the house, you can solve the problem with the same logic used to solve version I. You have a warehouse open from the left only and a warehouse open from the right only.",
          "output": "def shuffle(nums, n):\n    shuffled = []\n    for i in range(n):\n        shuffled.append(nums[i])\n        shuffled.append(nums[i+n])\n    return shuffled\n"
     },
     {
          "instruction": "Write python code for this problem: The Leetcode file system keeps a log each time some user performs a _change folder_ operation.\n\nThe operations are described below:\n\n*   `\"../ \"` : Move to the parent folder of the current folder. (If you are already in the main folder, **remain in the same folder**).\n*   `\"./ \"` : Remain in the same folder.\n*   `\"x/ \"` : Move to the child folder named `x` (This folder is **guaranteed to always exist**).\n\nYou are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step.\n\nThe file system starts in the main folder, then the operations in `logs` are performed.\n\nReturn _the minimum number of operations needed to go back to the main folder after the change folder operations._\n\n",
          "input": "**Example 1:**\n\n**Input:** logs = \\[ \"d1/ \", \"d2/ \", \"../ \", \"d21/ \", \"./ \"\\]\n**Output:** 2\n**Explanation:** Use this change folder operation  \"../ \" 2 times and go back to the main folder.\n\n**Example 2:**\n\n**Input:** logs = \\[ \"d1/ \", \"d2/ \", \"./ \", \"d3/ \", \"../ \", \"d31/ \"\\]\n**Output:** 3\n\n**Example 3:**\n\n**Input:** logs = \\[ \"d1/ \", \"../ \", \"../ \", \"../ \"\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= logs.length <= 103`\n*   `2 <= logs[i].length <= 10`\n*   `logs[i]` contains lowercase English letters, digits, `'.'`, and `'/'`.\n*   `logs[i]` follows the format described in the statement.\n*   Folder names consist of lowercase English letters and digits.Simulate the process but don\u2019t move the pointer beyond the main folder. Simulate the process but don\u2019t move the pointer beyond the main folder.",
          "output": "def minOperations(logs):\n    depth = 0\n    for log in logs:\n        if log == \"../\":\n            depth = max(0, depth - 1)\n        elif log != \"./\":\n            depth += 1\n    return depth\n"
     },
     {
          "instruction": "Write python code for this problem: You are the operator of a Centennial Wheel that has **four gondolas**, and each gondola has room for **up** **to** **four people**. You have the ability to rotate the gondolas **counterclockwise**, which costs you `runningCost` dollars.\n\nYou are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you **must rotate the wheel** `i` **times before the** `customers[i]` **customers arrive**. **You cannot make customers wait if there is room in the gondola**. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\n\nYou can stop the wheel at any time, including **before** **serving** **all** **customers**. If you decide to stop serving customers, **all subsequent rotations are free** in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait **for the next rotation**.\n\nReturn _the minimum number of rotations you need to perform to maximize your profit._ If there is **no scenario** where the profit is positive, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** customers = \\[8,3\\], boardingCost = 5, runningCost = 6\n**Output:** 3\n**Explanation:** The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 \\* $5 - 1 \\* $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 \\* $5 - 2 \\* $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 \\* $5 - 3 \\* $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times.\n\n**Example 2:**\n\n**Input:** customers = \\[10,9,6\\], boardingCost = 6, runningCost = 4\n**Output:** 7\n**Explanation:**\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 \\* $6 - 1 \\* $4 = $20.\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 \\* $6 - 2 \\* $4 = $40.\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 \\* $6 - 3 \\* $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 \\* $6 - 4 \\* $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 \\* $6 - 5 \\* $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 \\* $6 - 6 \\* $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is 25 \\* $6 - 7 \\* $4 = $122.\nThe highest profit was $122 after rotating the wheel 7 times.\n\n**Example 3:**\n\n**Input:** customers = \\[3,4,0,5,1\\], boardingCost = 1, runningCost = 92\n**Output:** -1\n**Explanation:**\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 \\* $1 - 1 \\* $92 = -$89.\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 \\* $1 - 2 \\* $92 = -$177.\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 \\* $1 - 3 \\* $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 \\* $1 - 4 \\* $92 = -$357.\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 \\* $1 - 5 \\* $92 = -$447.\nThe profit was never positive, so return -1.\n\n**Constraints:**\n\n*   `n == customers.length`\n*   `1 <= n <= 105`\n*   `0 <= customers[i] <= 50`\n*   `1 <= boardingCost, runningCost <= 100`Think simulation Note that the number of turns will never be more than 50 / 4 * n",
          "output": "def minOperationsMaxProfit(customers, boardingCost, runningCost):\n    waiting = 0\n    profit = 0\n    max_profit = 0\n    rotations = 0\n    result = -1\n\n    for i in range(len(customers) + sum(customers)):\n        if i < len(customers):\n            waiting += customers[i]\n        boarding = min(waiting, 4)\n        waiting -= boarding\n        profit += boarding * boardingCost - runningCost\n\n        if profit > max_profit:\n            max_profit = profit\n            result = rotations + 1\n        rotations += 1\n    \n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\n\nThe kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance.\n\nSuccessor(x, curOrder):\n    if x has no children or all of x's children are in curOrder:\n        if x is the king return null\n        else return Successor(x's parent, curOrder)\n    else return x's oldest child who's not in curOrder\n\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\n\n1.  In the beginning, `curOrder` will be `[ \"king \"]`.\n2.  Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[ \"king \", \"Alice \"]`.\n3.  Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[ \"king \", \"Alice \", \"Jack \"]`.\n4.  Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[ \"king \", \"Alice \", \"Jack \", \"Bob \"]`.\n5.  Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[ \"king \", \"Alice \", \"Jack \", \"Bob \"]`.\n\nUsing the above function, we can always obtain a unique order of inheritance.\n\nImplement the `ThroneInheritance` class:\n\n*   `ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.\n*   `void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.\n*   `void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.\n*   `string[] getInheritanceOrder()` Returns a list representing the current order of inheritance **excluding** dead people.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"ThroneInheritance \",  \"birth \",  \"birth \",  \"birth \",  \"birth \",  \"birth \",  \"birth \",  \"getInheritanceOrder \",  \"death \",  \"getInheritanceOrder \"\\]\n\\[\\[ \"king \"\\], \\[ \"king \",  \"andy \"\\], \\[ \"king \",  \"bob \"\\], \\[ \"king \",  \"catherine \"\\], \\[ \"andy \",  \"matthew \"\\], \\[ \"bob \",  \"alex \"\\], \\[ \"bob \",  \"asha \"\\], \\[null\\], \\[ \"bob \"\\], \\[null\\]\\]\n**Output**\n\\[null, null, null, null, null, null, null, \\[ \"king \",  \"andy \",  \"matthew \",  \"bob \",  \"alex \",  \"asha \",  \"catherine \"\\], null, \\[ \"king \",  \"andy \",  \"matthew \",  \"alex \",  \"asha \",  \"catherine \"\\]\\]\n\n**Explanation**\nThroneInheritance t= new ThroneInheritance( \"king \"); // order: **king**\nt.birth( \"king \",  \"andy \"); // order: king > **andy**\nt.birth( \"king \",  \"bob \"); // order: king > andy > **bob**\nt.birth( \"king \",  \"catherine \"); // order: king > andy > bob > **catherine**\nt.birth( \"andy \",  \"matthew \"); // order: king > andy > **matthew** > bob > catherine\nt.birth( \"bob \",  \"alex \"); // order: king > andy > matthew > bob > **alex** > catherine\nt.birth( \"bob \",  \"asha \"); // order: king > andy > matthew > bob > alex > **asha** > catherine\nt.getInheritanceOrder(); // return \\[ \"king \",  \"andy \",  \"matthew \",  \"bob \",  \"alex \",  \"asha \",  \"catherine \"\\]\nt.death( \"bob \"); // order: king > andy > matthew > **bob** > alex > asha > catherine\nt.getInheritanceOrder(); // return \\[ \"king \",  \"andy \",  \"matthew \",  \"alex \",  \"asha \",  \"catherine \"\\]\n\n**Constraints:**\n\n*   `1 <= kingName.length, parentName.length, childName.length, name.length <= 15`\n*   `kingName`, `parentName`, `childName`, and `name` consist of lowercase English letters only.\n*   All arguments `childName` and `kingName` are **distinct**.\n*   All `name` arguments of `death` will be passed to either the constructor or as `childName` to `birth` first.\n*   For each call to `birth(parentName, childName)`, it is guaranteed that `parentName` is alive.\n*   At most `105` calls will be made to `birth` and `death`.\n*   At most `10` calls will be made to `getInheritanceOrder`.Create a tree structure of the family. Without deaths, the order of inheritance is simply a pre-order traversal of the tree. Mark the dead family members tree nodes and don't include them in the final order.",
          "output": "class ThroneInheritance:\n\n    def __init__(self, kingName: str):\n        self.king = kingName\n        self.family = {}\n        self.dead = set()\n\n    def birth(self, parentName: str, childName: str) -> None:\n        if parentName not in self.family:\n            self.family[parentName] = []\n        self.family[parentName].append(childName)\n\n    def death(self, name: str) -> None:\n        self.dead.add(name)\n\n    def getInheritanceOrder(self) -> List[str]:\n        order = []\n        self.dfs(self.king, order)\n        return order\n\n    def dfs(self, name: str, order: List[str]) -> None:\n        if name not in self.dead:\n            order.append(name)\n        if name in self.family:\n            for child in self.family[name]:\n                self.dfs(child, order)\n"
     },
     {
          "instruction": "Write python code for this problem: We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\n\nYou are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`.\n\n**All buildings are full**, so a list of requests is achievable only if for each building, the **net change in employee transfers is zero**. This means the number of employees **leaving** is **equal** to the number of employees **moving in**. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`.\n\nReturn _the maximum number of achievable requests_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, requests = \\[\\[0,1\\],\\[1,0\\],\\[0,1\\],\\[1,2\\],\\[2,0\\],\\[3,4\\]\\]\n**Output:** 5\n**Explantion:** Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.\n\n**Example 2:**\n\n**Input:** n = 3, requests = \\[\\[0,0\\],\\[1,2\\],\\[2,1\\]\\]\n**Output:** 3\n**Explantion:** Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests. \n\n**Example 3:**\n\n**Input:** n = 4, requests = \\[\\[0,3\\],\\[3,1\\],\\[1,2\\],\\[2,0\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= n <= 20`\n*   `1 <= requests.length <= 16`\n*   `requests[i].length == 2`\n*   `0 <= fromi, toi < n`Think brute force When is a subset of requests okay?",
          "output": "def maximumRequests(n, requests):\n    req_size = len(requests)\n    max_requests = 0\n\n    for i in range(1 << req_size):\n        net_transfers = [0] * n\n        count = 0\n        \n        for j in range(req_size):\n            if i & (1 << j):\n                net_transfers[requests[j][0]] -= 1\n                net_transfers[requests[j][1]] += 1\n                count += 1\n\n        valid = all(val == 0 for val in net_transfers)\n\n        if valid:\n            max_requests = max(max_requests, count)\n\n    return max_requests\n"
     },
     {
          "instruction": "Write python code for this problem: Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw **exactly** `k` **non-overlapping** line segments such that each segment covers two or more points. The endpoints of each segment must have **integral coordinates**. The `k` line segments **do not** have to cover all `n` points, and they are **allowed** to share endpoints.\n\nReturn _the number of ways we can draw_ `k` _non-overlapping line segments__._ Since this number can be huge, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, k = 2\n**Output:** 5\n**Explanation:** The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.\n\n**Example 2:**\n\n**Input:** n = 3, k = 1\n**Output:** 3\n**Explanation:** The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.\n\n**Example 3:**\n\n**Input:** n = 30, k = 7\n**Output:** 796297179\n**Explanation:** The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.\n\n**Constraints:**\n\n*   `2 <= n <= 1000`\n*   `1 <= k <= n-1`Try to use dynamic programming where the current index and remaining number of line segments to form can describe any intermediate state. To make the computation of each state in constant time, we could add another flag to the state that indicates whether or not we are in the middle of placing a line (placed start point but no endpoint).",
          "output": "def numSubseq(nums, target):\n    nums.sort()\n    n = len(nums)\n    mod = 10**9 + 7\n\n    power = [1] * n\n    for i in range(1, n):\n        power[i] = (power[i - 1] * 2) % mod\n\n    ans = 0\n    r = n\n    for l in range(n):\n        while r > l and nums[l] + nums[r - 1] > target:\n            r -= 1\n\n        ans = (ans + power[r - l]) % mod\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of network towers `towers`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are **integral coordinates** on the X-Y plane, and the distance between the two coordinates is the **Euclidean distance**.\n\nYou are also given an integer `radius` where a tower is **reachable** if the distance is **less than or equal to** `radius`. Outside that distance, the signal becomes garbled, and the tower is **not reachable**.\n\nThe signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `\u230aqi / (1 + d)\u230b`, where `d` is the distance between the tower and the coordinate. The **network quality** at a coordinate is the sum of the signal qualities from all the **reachable** towers.\n\nReturn _the array_ `[cx, cy]` _representing the **integral** coordinate_ `(cx, cy)` _where the **network quality** is maximum. If there are multiple coordinates with the same **network quality**, return the lexicographically minimum **non-negative** coordinate._\n\n**Note:**\n\n*   A coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either:\n    *   `x1 < x2`, or\n    *   `x1 == x2` and `y1 < y2`.\n*   `\u230aval\u230b` is the greatest integer less than or equal to `val` (the floor function).\n\n",
          "input": "**Example 1:**\n\n**Input:** towers = \\[\\[1,2,5\\],\\[2,1,7\\],\\[3,1,9\\]\\], radius = 2\n**Output:** \\[2,1\\]\n**Explanation:** At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n- Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n- Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\nNo other coordinate has a higher network quality.\n\n**Example 2:**\n\n**Input:** towers = \\[\\[23,11,21\\]\\], radius = 9\n**Output:** \\[23,11\\]\n**Explanation:** Since there is only one tower, the network quality is highest right at the tower's location.\n\n**Example 3:**\n\n**Input:** towers = \\[\\[1,2,13\\],\\[2,1,7\\],\\[0,1,9\\]\\], radius = 2\n**Output:** \\[1,2\\]\n**Explanation:** Coordinate (1, 2) has the highest network quality.\n\n**Constraints:**\n\n*   `1 <= towers.length <= 50`\n*   `towers[i].length == 3`\n*   `0 <= xi, yi, qi <= 50`\n*   `1 <= radius <= 50`The constraints are small enough to consider every possible coordinate and calculate its quality.",
          "output": "def canArrange(arr, k):\n    counts = [0] * k\n    for num in arr:\n        counts[(num % k + k) % k] += 1\n    if counts[0] % 2 != 0:\n        return False\n    for i in range(1, k // 2 + 1):\n        if counts[i] != counts[k - i]:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: A game is played by a cat and a mouse named Cat and Mouse.\n\nThe environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (Cat, Mouse), or food.\n\n*   Players are represented by the characters `'C'`(Cat)`,'M'`(Mouse).\n*   Floors are represented by the character `'.'` and can be walked on.\n*   Walls are represented by the character `'#'` and cannot be walked on.\n*   Food is represented by the character `'F'` and can be walked on.\n*   There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n\nMouse and Cat play according to the following rules:\n\n*   Mouse **moves first**, then they take turns to move.\n*   During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`.\n*   `catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n*   Staying in the same position is allowed.\n*   Mouse can jump over Cat.\n\nThe game can end in 4 ways:\n\n*   If Cat occupies the same position as Mouse, Cat wins.\n*   If Cat reaches the food first, Cat wins.\n*   If Mouse reaches the food first, Mouse wins.\n*   If Mouse cannot get to the food within 1000 turns, Cat wins.\n\nGiven a `rows x cols` matrix `grid` and two integers `catJump` and `mouseJump`, return `true` _if Mouse can win the game if both Cat and Mouse play optimally, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[ \"####F \", \"#C... \", \"M.... \"\\], catJump = 1, mouseJump = 2\n**Output:** true\n**Explanation:** Cat cannot catch Mouse on its turn nor can it get the food before Mouse.\n\n**Example 2:**\n\n**Input:** grid = \\[ \"M.C...F \"\\], catJump = 1, mouseJump = 4\n**Output:** true\n\n**Example 3:**\n\n**Input:** grid = \\[ \"M.C...F \"\\], catJump = 1, mouseJump = 3\n**Output:** false\n\n**Constraints:**\n\n*   `rows == grid.length`\n*   `cols = grid[i].length`\n*   `1 <= rows, cols <= 8`\n*   `grid[i][j]` consist only of characters `'C'`, `'M'`, `'F'`, `'.'`, and `'#'`.\n*   There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n*   `1 <= catJump, mouseJump <= 8`Try working backward: consider all trivial states you know to be winning or losing, and work backward to determine which other states can be labeled as winning or losing.",
          "output": "class Fancy:\n    def __init__(self):\n        self.sequence = []\n\n    def append(self, val):\n        self.sequence.append(val)\n\n    def addAll(self, inc):\n        self.sequence = [num + inc for num in self.sequence]\n\n    def multAll(self, m):\n        self.sequence = [num * m for num in self.sequence]\n\n    def getIndex(self, idx):\n        if idx >= len(self.sequence):\n            return -1\n        return self.sequence[idx]\n"
     },
     {
          "instruction": "Write python code for this problem: Write an API that generates fancy sequences using the `append`, `addAll`, and `multAll` operations.\n\nImplement the `Fancy` class:\n\n*   `Fancy()` Initializes the object with an empty sequence.\n*   `void append(val)` Appends an integer `val` to the end of the sequence.\n*   `void addAll(inc)` Increments all existing values in the sequence by an integer `inc`.\n*   `void multAll(m)` Multiplies all existing values in the sequence by an integer `m`.\n*   `int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence **modulo** `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Fancy \",  \"append \",  \"addAll \",  \"append \",  \"multAll \",  \"getIndex \",  \"addAll \",  \"append \",  \"multAll \",  \"getIndex \",  \"getIndex \",  \"getIndex \"\\]\n\\[\\[\\], \\[2\\], \\[3\\], \\[7\\], \\[2\\], \\[0\\], \\[3\\], \\[10\\], \\[2\\], \\[0\\], \\[1\\], \\[2\\]\\]\n**Output**\n\\[null, null, null, null, null, 10, null, null, null, 26, 34, 20\\]\n\n**Explanation**\nFancy fancy = new Fancy();\nfancy.append(2);   // fancy sequence: \\[2\\]\nfancy.addAll(3);   // fancy sequence: \\[2+3\\] -> \\[5\\]\nfancy.append(7);   // fancy sequence: \\[5, 7\\]\nfancy.multAll(2);  // fancy sequence: \\[5\\*2, 7\\*2\\] -> \\[10, 14\\]\nfancy.getIndex(0); // return 10\nfancy.addAll(3);   // fancy sequence: \\[10+3, 14+3\\] -> \\[13, 17\\]\nfancy.append(10);  // fancy sequence: \\[13, 17, 10\\]\nfancy.multAll(2);  // fancy sequence: \\[13\\*2, 17\\*2, 10\\*2\\] -> \\[26, 34, 20\\]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20\n\n**Constraints:**\n\n*   `1 <= val, inc, m <= 100`\n*   `0 <= idx <= 105`\n*   At most `105` calls total will be made to `append`, `addAll`, `multAll`, and `getIndex`.Use two arrays to save the cumulative multipliers at each time point and cumulative sums adjusted by the current multiplier. The function getIndex(idx) ask to the current value modulo 10^9+7. Use modular inverse and both arrays to calculate this value.",
          "output": "from collections import deque\n\ndef findMaxValueOfEquation(points, k):\n    res = -float(\"inf\")\n    q = deque()\n   \n    for p in points:\n        while q and p[0] - q[0][1] > k:\n            q.popleft()\n        \n        if q:\n            res = max(res, p[1] + p[0] + q[0][0])\n        \n        while q and p[1] - p[0] >= q[-1][0]:\n            q.pop()\n        \n        q.append((p[1] - p[0], p[0]))\n    \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST):\n\n*   `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n*   `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n*   `int next()` Moves the pointer to the right, then returns the number at the pointer.\n*   `boolean hasPrev()` Returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`.\n*   `int prev()` Moves the pointer to the left, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` and `prev()` calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"BSTIterator \",  \"next \",  \"next \",  \"prev \",  \"next \",  \"hasNext \",  \"next \",  \"next \",  \"next \",  \"hasNext \",  \"hasPrev \",  \"prev \",  \"prev \"\\]\n\\[\\[\\[7, 3, 15, null, null, 9, 20\\]\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\], \\[null\\]\\]\n**Output**\n\\[null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9\\]\n\n**Explanation**\n// The underlined element is where the pointer currently is.\nBSTIterator bSTIterator = new BSTIterator(\\[7, 3, 15, null, null, 9, 20\\]); // state is  \\[3, 7, 9, 15, 20\\]\nbSTIterator.next(); // state becomes \\[3, 7, 9, 15, 20\\], return 3\nbSTIterator.next(); // state becomes \\[3, 7, 9, 15, 20\\], return 7\nbSTIterator.prev(); // state becomes \\[3, 7, 9, 15, 20\\], return 3\nbSTIterator.next(); // state becomes \\[3, 7, 9, 15, 20\\], return 7\nbSTIterator.hasNext(); // return true\nbSTIterator.next(); // state becomes \\[3, 7, 9, 15, 20\\], return 9\nbSTIterator.next(); // state becomes \\[3, 7, 9, 15, 20\\], return 15\nbSTIterator.next(); // state becomes \\[3, 7, 9, 15, 20\\], return 20\nbSTIterator.hasNext(); // return false\nbSTIterator.hasPrev(); // return true\nbSTIterator.prev(); // state becomes \\[3, 7, 9, 15, 20\\], return 15\nbSTIterator.prev(); // state becomes \\[3, 7, 9, 15, 20\\], return 9\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 105]`.\n*   `0 <= Node.val <= 106`\n*   At most `105` calls will be made to `hasNext`, `next`, `hasPrev`, and `prev`.\n\n**Follow up:** Could you solve the problem without precalculating the values of the tree?The inorder traversal of a BST gives us the elements in a sorted order. We can use a stack to simulate the inorder traversal of the BST. We can use another stack as a buffer to store numbers returned from calls to next and use this buffer whenever prev is called.",
          "output": "def findMaxLength(nums):\n    max_length, zeroes, ones = 0, 0, 0\n    count_map = {0: -1}\n\n    for i, num in enumerate(nums):\n        if num == 0:\n            zeroes += 1\n        else:\n            ones += 1\n\n        if zeroes - ones not in count_map:\n            count_map[zeroes - ones] = i\n        else:\n            max_length = max(max_length, i - count_map[zeroes - ones])\n\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums` of non-negative integers. `nums` is considered **special** if there exists a number `x` such that there are **exactly** `x` numbers in `nums` that are **greater than or equal to** `x`.\n\nNotice that `x` **does not** have to be an element in `nums`.\n\nReturn `x` _if the array is **special**, otherwise, return_ `-1`. It can be proven that if `nums` is special, the value for `x` is **unique**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,5\\]\n**Output:** 2\n**Explanation:** There are 2 values (3 and 5) that are greater than or equal to 2.\n\n**Example 2:**\n\n**Input:** nums = \\[0,0\\]\n**Output:** -1\n**Explanation:** No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.\n\n**Example 3:**\n\n**Input:** nums = \\[0,4,3,0,4\\]\n**Output:** 3\n**Explanation:** There are 3 values that are greater than or equal to 3.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 1000`Count the number of elements greater than or equal to x for each x in the range [0, nums.length]. If for any x, the condition satisfies, return that x. Otherwise, there is no answer.",
          "output": "def specialArray(nums):\n    max_val = max(nums)\n    for x in range(1, max_val + 1):\n        count = sum([1 for num in nums if num >= x])\n        if count == x:\n            return x\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: A binary tree is named **Even-Odd** if it meets the following conditions:\n\n*   The root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.\n*   For every **even-indexed** level, all nodes at the level have **odd** integer values in **strictly increasing** order (from left to right).\n*   For every **odd-indexed** level, all nodes at the level have **even** integer values in **strictly decreasing** order (from left to right).\n\nGiven the `root` of a binary tree, _return_ `true` _if the binary tree is **Even-Odd**, otherwise return_ `false`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,10,4,3,null,7,9,12,8,6,null,null,2\\]\n**Output:** true\n**Explanation:** The node values on each level are:\nLevel 0: \\[1\\]\nLevel 1: \\[10,4\\]\nLevel 2: \\[3,7,9\\]\nLevel 3: \\[12,8,6,2\\]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.\n\n**Example 2:**\n\n**Input:** root = \\[5,4,2,3,3,7\\]\n**Output:** false\n**Explanation:** The node values on each level are:\nLevel 0: \\[5\\]\nLevel 1: \\[4,2\\]\nLevel 2: \\[3,3,7\\]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.\n\n**Example 3:**\n\n**Input:** root = \\[5,9,1,3,5,7\\]\n**Output:** false\n**Explanation:** Node values in the level 1 should be even integers.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 105]`.\n*   `1 <= Node.val <= 106`Use the breadth-first search to go through all nodes layer by layer.",
          "output": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef is_even_odd_tree(root):\n    if not root:\n        return False\n    \n    q = deque([root])\n    level = 0\n    \n    while q:\n        size = len(q)\n        prev_val = 0 if level % 2 == 0 else 10**6 + 1\n        \n        for _ in range(size):\n            curr = q.popleft()\n            \n            if ((level % 2 == 0 and (curr.val % 2 == 0 or curr.val <= prev_val)) or \n                (level % 2 != 0 and (curr.val % 2 != 0 or curr.val >= prev_val))):\n                return False\n            \n            prev_val = curr.val\n            \n            if curr.left:\n                q.append(curr.left)\n            if curr.right:\n                q.append(curr.right)\n        \n        level += 1\n    \n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, you must transform it into `0` using the following operations any number of times:\n\n*   Change the rightmost (`0th`) bit in the binary representation of `n`.\n*   Change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`.\n\nReturn _the minimum number of operations to transform_ `n` _into_ `0`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** The binary representation of 3 is  \"11 \".\n \"11 \" ->  \"01 \" with the 2nd operation since the 0th bit is 1.\n \"01 \" ->  \"00 \" with the 1st operation.\n\n**Example 2:**\n\n**Input:** n = 6\n**Output:** 4\n**Explanation:** The binary representation of 6 is  \"110 \".\n \"110 \" ->  \"010 \" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.\n \"010 \" ->  \"011 \" with the 1st operation.\n \"011 \" ->  \"001 \" with the 2nd operation since the 0th bit is 1.\n \"001 \" ->  \"000 \" with the 1st operation.\n\n**Constraints:**\n\n*   `0 <= n <= 109`The fastest way to convert n to zero is to remove all set bits starting from the leftmost one. Try some simple examples to learn the rule of how many steps are needed to remove one set bit. consider n=2^k case first, then solve for all n.",
          "output": "def get_folder_names(names):\n    name_count = {}\n    ans = []\n\n    for name in names:\n        if name not in name_count:\n            ans.append(name)\n            name_count[name] = 1\n        else:\n            k = name_count[name]\n            new_name = f\"{name}({k})\"\n            while new_name in name_count:\n                k += 1\n                new_name = f\"{name}({k})\"\n            ans.append(new_name)\n            name_count[new_name] = 1\n            name_count[name] = k + 1\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote **integral coordinates** on the X-Y plane.\n\nInitially, you are facing directly east from your position. You **cannot move** from your position, but you can **rotate**. In other words, `posx` and `posy` cannot be changed. Your field of view in **degrees** is represented by `angle`, determining how wide you can see from any given view direction. Let `d` be the amount in degrees that you rotate counterclockwise. Then, your field of view is the **inclusive** range of angles `[d - angle/2, d + angle/2]`.\n\nYour browser does not support the video tag or this video format.\n\nYou can **see** some set of points if, for each point, the **angle** formed by the point, your position, and the immediate east direction from your position is **in your field of view**.\n\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\n\nReturn _the maximum number of points you can see_.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[2,1\\],\\[2,2\\],\\[3,3\\]\\], angle = 90, location = \\[1,1\\]\n**Output:** 3\n**Explanation:** The shaded region represents your field of view. All points can be made visible in your field of view, including \\[3,3\\] even though \\[2,2\\] is in front and in the same line of sight.\n\n**Example 2:**\n\n**Input:** points = \\[\\[2,1\\],\\[2,2\\],\\[3,4\\],\\[1,1\\]\\], angle = 90, location = \\[1,1\\]\n**Output:** 4\n**Explanation:** All points can be made visible in your field of view, including the one at your location.\n\n**Example 3:**\n\n**Input:** points = \\[\\[1,0\\],\\[2,1\\]\\], angle = 13, location = \\[1,1\\]\n**Output:** 1\n**Explanation:** You can only see one of the two points, as shown above.\n\n**Constraints:**\n\n*   `1 <= points.length <= 105`\n*   `points[i].length == 2`\n*   `location.length == 2`\n*   `0 <= angle < 360`\n*   `0 <= posx, posy, xi, yi <= 100`Sort the points by polar angle with the original position. Now only a consecutive collection of points would be visible from any coordinate. We can use two pointers to keep track of visible points for each start point For handling the cyclic condition, it\u2019d be helpful to append the point list to itself after sorting.",
          "output": "def xor_operation(n, start):\n    xor_result = 0\n    for i in range(n):\n        xor_result ^= (start + 2 * i)\n    return xor_result\n"
     },
     {
          "instruction": "Write python code for this problem: A **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).\n\nFor each internal node with operator `o`, the [**infix expression**](https://en.wikipedia.org/wiki/Infix_notation) it represents is `(A o B)`, where `A` is the expression the left subtree represents and `B` is the expression the right subtree represents.\n\nYou are given a string `s`, an **infix expression** containing operands, the operators described above, and parentheses `'('` and `')'`.\n\nReturn _any valid **binary expression tree**, whose **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** reproduces_ `s` _after omitting the parenthesis from it._\n\n**Please note that order of operations applies in** `s`**.** That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction.\n\nOperands must also appear in the **same order** in both `s` and the in-order traversal of the tree.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"3\\*4-2\\*5 \"\n**Output:** \\[-,\\*,\\*,3,4,2,5\\]\n**Explanation:** The tree above is the only valid tree whose inorder traversal produces s.\n\n**Example 2:**\n\n**Input:** s =  \"2-3/(5\\*2)+1 \"\n**Output:** \\[+,-,1,2,/,null,null,null,null,3,\\*,null,null,5,2\\]\n**Explanation:** The inorder traversal of the tree above is 2-3/5\\*2+1 which is the same as s without the parenthesis. The tree also produces the correct result and its operands are in the same order as they appear in s.\nThe tree below is also a valid binary expression tree with the same inorder traversal as s, but it not a valid answer because it does not evaluate to the same value.\n \nThe third tree below is also not valid. Although it produces the same result and is equivalent to the above trees, its inorder traversal does not produce s and its operands are not in the same order as s.\n \n\n**Example 3:**\n\n**Input:** s =  \"1+2+3+4+5 \"\n**Output:** \\[+,+,5,+,4,null,null,+,3,null,null,1,2\\]\n**Explanation:** The tree \\[+,+,5,+,+,null,null,1,2,3,4\\] is also one of many other valid trees.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of digits and the characters `'+'`, `'-'`, `'*'`, and `'/'`.\n*   Operands in `s` are **exactly** 1 digit.\n*   It is guaranteed that `s` is a valid expression.Convert infix expression to postfix expression. Build an expression tree from the postfix expression.",
          "output": "class Solution:\n    def expTree(self, s: str) -> 'Node':\n        def precedence(a, b):\n            if a == '(':\n                return False\n            if b == '(' or b == ')':\n                return True\n            if (a in {'*', '/'}) and (b in {'+', '-'}):\n                return True\n            return False\n        \n        def process(nodes, ops):\n            right = nodes.pop()\n            left = nodes.pop()\n            oper = Node(ops.pop())\n            oper.left = left\n            oper.right = right\n            nodes.append(oper)\n            \n        nodes = []\n        ops = []\n        for i in s:\n            if i.isdigit():\n                nodes.append(Node(i))\n            elif i == '(':\n                ops.append(i)\n            elif i == ')':\n                while ops[-1] != '(':\n                    process(nodes, ops)\n                ops.pop()\n            else:\n                while ops and precedence(ops[-1], i):\n                    process(nodes, ops)\n                ops.append(i)\n        while ops:\n            process(nodes, ops)\n        return nodes[0]\n"
     },
     {
          "instruction": "Write python code for this problem: A string is a **valid parentheses string** (denoted **VPS**) if it meets one of the following:\n\n*   It is an empty string `\" \"`, or a single character not equal to `\"( \"` or `\") \"`,\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are **VPS**'s, or\n*   It can be written as `(A)`, where `A` is a **VPS**.\n\nWe can similarly define the **nesting depth** `depth(S)` of any VPS `S` as follows:\n\n*   `depth( \" \") = 0`\n*   `depth(C) = 0`, where `C` is a string with a single character not equal to `\"( \"` or `\") \"`.\n*   `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are **VPS**'s.\n*   `depth( \"( \" + A + \") \") = 1 + depth(A)`, where `A` is a **VPS**.\n\nFor example, `\" \"`, `\"()() \"`, and `\"()(()()) \"` are **VPS**'s (with nesting depths 0, 1, and 2), and `\")( \"` and `\"(() \"` are not **VPS**'s.\n\nGiven a **VPS** represented as string `s`, return _the **nesting depth** of_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"(1+(2\\*3)+((8)/4))+1 \"\n**Output:** 3\n**Explanation:** Digit 8 is inside of 3 nested parentheses in the string.\n\n**Example 2:**\n\n**Input:** s =  \"(1)+((2))+(((3))) \"\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n*   It is guaranteed that parentheses expression `s` is a **VPS**.The depth of any character in the VPS is the ( number of left brackets before it ) - ( number of right brackets before it )",
          "output": "def maxDepth(s: str) -> int:\n    depth = 0\n    max_depth = 0\n\n    for c in s:\n        if c == '(':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        elif c == ')':\n            depth -= 1\n\n    return max_depth\n"
     },
     {
          "instruction": "Write python code for this problem: There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`.\n\nThe **network rank** of **two different cities** is defined as the total number of **directly** connected roads to **either** city. If a road is directly connected to both cities, it is only counted **once**.\n\nThe **maximal network rank** of the infrastructure is the **maximum network rank** of all pairs of different cities.\n\nGiven the integer `n` and the array `roads`, return _the **maximal network rank** of the entire infrastructure_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, roads = \\[\\[0,1\\],\\[0,3\\],\\[1,2\\],\\[1,3\\]\\]\n**Output:** 4\n**Explanation:** The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.\n\n**Example 2:**\n\n**Input:** n = 5, roads = \\[\\[0,1\\],\\[0,3\\],\\[1,2\\],\\[1,3\\],\\[2,3\\],\\[2,4\\]\\]\n**Output:** 5\n**Explanation:** There are 5 roads that are connected to cities 1 or 2.\n\n**Example 3:**\n\n**Input:** n = 8, roads = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[2,4\\],\\[5,6\\],\\[5,7\\]\\]\n**Output:** 5\n**Explanation:** The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `0 <= roads.length <= n * (n - 1) / 2`\n*   `roads[i].length == 2`\n*   `0 <= ai, bi <= n-1`\n*   `ai != bi`\n*   Each pair of cities has **at most one** road connecting them.Try every pair of different cities and calculate its network rank. The network rank of two vertices is almost the sum of their degrees. How can you efficiently check if there is a road connecting two different cities?",
          "output": "def range_sum(nums, n, left, right):\n    MOD = 10**9 + 7\n    sums = []\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += nums[j]\n            sums.append(sum)\n    sums.sort()\n    result = 0\n    for i in range(left-1, right):\n        result = (result + sums[i]) % MOD\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `a` and `b` of the same length. Choose an index and split both strings **at the same index**, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.\n\nWhen you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = \"abc \"`, then `\" \" + \"abc \"`, `\"a \" + \"bc \"`, `\"ab \" + \"c \"` , and `\"abc \" + \" \"` are valid splits.\n\nReturn `true` _if it is possible to form_ _a palindrome string, otherwise return_ `false`.\n\n**Notice** that `x + y` denotes the concatenation of strings `x` and `y`.\n\n",
          "input": "**Example 1:**\n\n**Input:** a =  \"x \", b =  \"y \"\n**Output:** true\n**Explaination:** If either a or b are palindromes the answer is true since you can split in the following way:\naprefix =  \" \", asuffix =  \"x \"\nbprefix =  \" \", bsuffix =  \"y \"\nThen, aprefix + bsuffix =  \" \" +  \"y \" =  \"y \", which is a palindrome.\n\n**Example 2:**\n\n**Input:** a =  \"xbdef \", b =  \"xecab \"\n**Output:** false\n\n**Example 3:**\n\n**Input:** a =  \"ulacfd \", b =  \"jizalu \"\n**Output:** true\n**Explaination:** Split them at index 3:\naprefix =  \"ula \", asuffix =  \"cfd \"\nbprefix =  \"jiz \", bsuffix =  \"alu \"\nThen, aprefix + bsuffix =  \"ula \" +  \"alu \" =  \"ulaalu \", which is a palindrome.\n\n**Constraints:**\n\n*   `1 <= a.length, b.length <= 105`\n*   `a.length == b.length`\n*   `a` and `b` consist of lowercase English lettersTry finding the largest prefix form a that matches a suffix in b Try string matching",
          "output": "def min_difference(nums):\n    size = len(nums)\n    if size < 5:\n        return 0\n\n    nums.sort()\n\n    return min(nums[-1] - nums[3], nums[-2] - nums[2], nums[-3] - nums[1], nums[-4] - nums[0])\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cities numbered from `1` to `n`. You are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. There exists a unique path between each pair of cities. In other words, the cities form a **tree**.\n\nA **subtree** is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\n\nFor each `d` from `1` to `n-1`, find the number of subtrees in which the **maximum distance** between any two cities in the subtree is equal to `d`.\n\nReturn _an array of size_ `n-1` _where the_ `dth` _element **(1-indexed)** is the number of subtrees in which the **maximum distance** between any two cities is equal to_ `d`.\n\n**Notice** that the **distance** between the two cities is the number of edges in the path between them.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, edges = \\[\\[1,2\\],\\[2,3\\],\\[2,4\\]\\]\n**Output:** \\[3,4,0\\]\n**Explanation:**\nThe subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\nThe subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\nNo subtree has two nodes where the max distance between them is 3.\n\n**Example 2:**\n\n**Input:** n = 2, edges = \\[\\[1,2\\]\\]\n**Output:** \\[1\\]\n\n**Example 3:**\n\n**Input:** n = 3, edges = \\[\\[1,2\\],\\[2,3\\]\\]\n**Output:** \\[2,1\\]\n\n**Constraints:**\n\n*   `2 <= n <= 15`\n*   `edges.length == n-1`\n*   `edges[i].length == 2`\n*   `1 <= ui, vi <= n`\n*   All pairs `(ui, vi)` are distinct.Iterate through every possible subtree by doing a bitmask on which vertices to include. How can you determine if a subtree is valid (all vertices are connected)? To determine connectivity, count the number of reachable vertices starting from any included vertex and only traveling on edges connecting 2 vertices in the subtree. The count should be the same as the number of 1s in the bitmask. The diameter is basically the maximum distance between any two nodes. Root the tree at a vertex. The answer is the max of the heights of the two largest subtrees or the longest diameter in any of the subtrees.",
          "output": "def winnerSquareGame(n: int) -> bool:\n    dp = [False] * (n + 1)\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            if not dp[i - j * j]:\n                dp[i] = True\n                break\n            j += 1\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of integers `nums`, sort the array in **increasing** order based on the frequency of the values. If multiple values have the same frequency, sort them in **decreasing** order.\n\nReturn the _sorted array_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,2,2,2,3\\]\n**Output:** \\[3,1,1,2,2,2\\]\n**Explanation:** '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,1,3,2\\]\n**Output:** \\[1,3,3,2,2\\]\n**Explanation:** '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.\n\n**Example 3:**\n\n**Input:** nums = \\[-1,1,-6,4,5,-6,1,4,1\\]\n**Output:** \\[5,-1,4,4,-6,-6,1,1,1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-100 <= nums[i] <= 100`Count the frequency of each value. Use a custom comparator to compare values by their frequency. If two values have the same frequency, compare their values.",
          "output": "def num_sub(s: str) -> int:\n    mod = 1000000007\n    result = 0\n    count = 0\n    for c in s:\n        count = count + 1 if c == '1' else 0\n        result = (result + count) % mod\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return _the **widest vertical area** between two points such that no points are inside the area._\n\nA **vertical area** is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The **widest vertical area** is the one with the maximum width.\n\nNote that points **on the edge** of a vertical area **are not** considered included in the area.\n\n",
          "input": "**Example 1:**\n\n\u200b\n\n**Input:** points = \\[\\[8,7\\],\\[9,9\\],\\[7,4\\],\\[9,7\\]\\]\n**Output:** 1\n**Explanation:** Both the red and the blue area are optimal.\n\n**Example 2:**\n\n**Input:** points = \\[\\[3,1\\],\\[9,0\\],\\[1,0\\],\\[1,4\\],\\[5,3\\],\\[8,8\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `n == points.length`\n*   `2 <= n <= 105`\n*   `points[i].length == 2`\n*   `0 <= xi, yi <= 109`Try sorting the points Think is the y-axis of a point relevant",
          "output": "def min_length_encoded(s: str, k: int) -> int:\n    n = len(s)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            cnt = 1\n            dp[i][j] = i - j\n            l = i - 2\n            while l >= 0 and i - 2 - l <= j:\n                if s[l] == s[i - 1]:\n                    cnt += 1\n                else:\n                    cnt = 1\n                used = i - 2 - l\n                new_aposition = i - 1 - cnt - used + 1\n                if cnt >= 100:\n                    new_aposition += 4\n                elif cnt >= 10:\n                    new_aposition += 3\n                elif cnt >= 2:\n                    new_aposition += 2\n                else:\n                    new_aposition += 1\n                dp[i][j] = min(dp[i][j], new_aposition + dp[l][j - used])\n                l -= 1\n\n    return dp[n][k]\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a **single character** by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by **exactly** one character.\n\nFor example, the underlined substrings in `\"computer \"` and `\"computation \"` only differ by the `'e'`/`'a'`, so this is a valid way.\n\nReturn _the number of substrings that satisfy the condition above._\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aba \", t =  \"baba \"\n**Output:** 6\n**Explanation:** The following are the pairs of substrings from s and t that differ by exactly 1 character:\n( \"aba \",  \"baba \")\n( \"aba \",  \"baba \")\n( \"aba \",  \"baba \")\n( \"aba \",  \"baba \")\n( \"aba \",  \"baba \")\n( \"aba \",  \"baba \")\nThe underlined portions are the substrings that are chosen from s and t.\n\n\u200b\u200b**Example 2:**\n\n**Input:** s =  \"ab \", t =  \"bb \"\n**Output:** 3\n**Explanation:** The following are the pairs of substrings from s and t that differ by 1 character:\n( \"ab \",  \"bb \")\n( \"ab \",  \"bb \")\n( \"ab \",  \"bb \")\n\u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t.\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 100`\n*   `s` and `t` consist of lowercase English letters only.Take every substring of s, change a character, and see how many substrings of t match that substring. Use a Trie to store all substrings of t as a dictionary.",
          "output": "def get_min_dist_sum(positions: List[List[int]]) -> float:\n    x, y = 0, 0\n    n = len(positions)\n    for pos in positions:\n        x += pos[0]\n        y += pos[1]\n    x /= n\n    y /= n\n    return x\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a list of strings of the **same length** `words` and a string `target`.\n\nYour task is to form `target` using the given `words` under the following rules:\n\n*   `target` should be formed from left to right.\n*   To form the `ith` character (**0-indexed**) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`.\n*   Once you use the `kth` character of the `jth` string of `words`, you **can no longer** use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string.\n*   Repeat the process until you form the string `target`.\n\n**Notice** that you can use **multiple characters** from the **same string** in `words` provided the conditions above are met.\n\nReturn _the number of ways to form `target` from `words`_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"acca \", \"bbbb \", \"caca \"\\], target =  \"aba \"\n**Output:** 6\n**Explanation:** There are 6 ways to form target.\n \"aba \" -> index 0 ( \"acca \"), index 1 ( \"bbbb \"), index 3 ( \"caca \")\n \"aba \" -> index 0 ( \"acca \"), index 2 ( \"bbbb \"), index 3 ( \"caca \")\n \"aba \" -> index 0 ( \"acca \"), index 1 ( \"bbbb \"), index 3 ( \"acca \")\n \"aba \" -> index 0 ( \"acca \"), index 2 ( \"bbbb \"), index 3 ( \"acca \")\n \"aba \" -> index 1 ( \"caca \"), index 2 ( \"bbbb \"), index 3 ( \"acca \")\n \"aba \" -> index 1 ( \"caca \"), index 2 ( \"bbbb \"), index 3 ( \"caca \")\n\n**Example 2:**\n\n**Input:** words = \\[ \"abba \", \"baab \"\\], target =  \"bab \"\n**Output:** 4\n**Explanation:** There are 4 ways to form target.\n \"bab \" -> index 0 ( \"baab \"), index 1 ( \"baab \"), index 2 ( \"abba \")\n \"bab \" -> index 0 ( \"baab \"), index 1 ( \"baab \"), index 3 ( \"baab \")\n \"bab \" -> index 0 ( \"baab \"), index 2 ( \"baab \"), index 3 ( \"baab \")\n \"bab \" -> index 1 ( \"abba \"), index 2 ( \"baab \"), index 3 ( \"baab \")\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 1000`\n*   All strings in `words` have the same length.\n*   `1 <= target.length <= 1000`\n*   `words[i]` and `target` contain only lowercase English letters.For each index i, store the frequency of each character in the ith row. Use dynamic programing to calculate the number of ways to get the target string using the frequency array,",
          "output": "def numWays(words, target):\n    n = len(words)\n    m = len(target)\n    count = [[0] * 26 for _ in range(n)]\n    dp = [[0] * n for _ in range(m)]\n    mod = 1000000007\n\n    for i, word in enumerate(words):\n        for c in word:\n            count[i][ord(c) - ord('a')] += 1\n\n    for i in range(n):\n        dp[0][i] = count[i][ord(target[0]) - ord('a')]\n\n    for i in range(1, m):\n        for j in range(n):\n            for k in range(n):\n                dp[i][j] = (dp[i][j] + dp[i-1][k] * count[j][ord(target[i]) - ord('a')]) % mod\n\n    return sum(dp[m-1]) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and a node `u` in the tree, return _the **nearest** node on the **same level** that is to the **right** of_ `u`_, or return_ `null` _if_ `u` _is the rightmost node in its level_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3,null,4,5,6\\], u = 4\n**Output:** 5\n**Explanation:** The nearest node on the same level to the right of node 4 is node 5.\n\n**Example 2:**\n\n**Input:** root = \\[3,null,4,2\\], u = 2\n**Output:** null\n**Explanation:** There are no nodes to the right of 2.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 105]`.\n*   `1 <= Node.val <= 105`\n*   All values in the tree are **distinct**.\n*   `u` is a node in the binary tree rooted at `root`.Use BFS, traverse the tree level by level and always push the left node first When you reach the target node, mark  a boolean variable true If you meet another node in the same level after marking the boolean true, return this node. If you did not meet new nodes in the same level and started traversing a new level, return Null",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_nearest_right_node(root, u):\n    if not root:\n        return None\n    \n    q = [root]\n    \n    while q:\n        n = len(q)\n        \n        for i in range(n):\n            current = q.pop(0)\n            \n            if current == u:\n                return q[0] if i < n - 1 else None\n            \n            if current.left:\n                q.append(current.left)\n            if current.right:\n                q.append(current.right)\n    \n    return None\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the length of the longest substring between two equal characters, excluding the two characters._ If there is no such substring return `-1`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aa \"\n**Output:** 0\n**Explanation:** The optimal substring here is an empty substring between the two `'a's`.\n\n**Example 2:**\n\n**Input:** s =  \"abca \"\n**Output:** 2\n**Explanation:** The optimal substring here is  \"bc \".\n\n**Example 3:**\n\n**Input:** s =  \"cbzxy \"\n**Output:** -1\n**Explanation:** There are no characters that appear twice in s.\n\n**Constraints:**\n\n*   `1 <= s.length <= 300`\n*   `s` contains only lowercase English letters.Try saving the first and last position of each character Try finding every pair of indexes with equal characters",
          "output": "def maxLengthBetweenEqualCharacters(s: str) -> int:\n    result = -1\n    char_map = {}\n\n    for i, c in enumerate(s):\n        if c not in char_map:\n            char_map[c] = i\n        else:\n            result = max(result, i - char_map[c] - 1)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` of **even length** consisting of digits from `0` to `9`, and two integers `a` and `b`.\n\nYou can apply either of the following two operations any number of times and in any order on `s`:\n\n*   Add `a` to all odd indices of `s` **(0-indexed)**. Digits post `9` are cycled back to `0`. For example, if `s = \"3456 \"` and `a = 5`, `s` becomes `\"3951 \"`.\n*   Rotate `s` to the right by `b` positions. For example, if `s = \"3456 \"` and `b = 1`, `s` becomes `\"6345 \"`.\n\nReturn _the **lexicographically smallest** string you can obtain by applying the above operations any number of times on_ `s`.\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"0158 \"` is lexicographically smaller than `\"0190 \"` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"5525 \", a = 9, b = 2\n**Output:**  \"2050 \"\n**Explanation:** We can apply the following operations:\nStart:   \"5525 \"\nRotate:  \"2555 \"\nAdd:     \"2454 \"\nAdd:     \"2353 \"\nRotate:  \"5323 \"\nAdd:     \"5222 \"\nAdd:     \"5121 \"\nRotate:  \"2151 \"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:     \"2050 \"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller then  \"2050 \".\n\n**Example 2:**\n\n**Input:** s =  \"74 \", a = 5, b = 1\n**Output:**  \"24 \"\n**Explanation:** We can apply the following operations:\nStart:   \"74 \"\nRotate:  \"47 \"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:     \"42 \"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate:  \"24 \"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller then  \"24 \".\n\n**Example 3:**\n\n**Input:** s =  \"0011 \", a = 4, b = 2\n**Output:**  \"0011 \"\n**Explanation:** There are no sequence of operations that will give us a lexicographically smaller string than  \"0011 \".\n\n**Constraints:**\n\n*   `2 <= s.length <= 100`\n*   `s.length` is even.\n*   `s` consists of digits from `0` to `9` only.\n*   `1 <= a <= 9`\n*   `1 <= b <= s.length - 1`Since the length of s is even, the total number of possible sequences is at most 10 * 10 * s.length. You can generate all possible sequences and take their minimum. Keep track of already generated sequences so they are not processed again.",
          "output": "def findLexSmallestString(s: str, a: int, b: int) -> str:\n    def add_odd(s: str, a: int) -> str:\n        return ''.join([str((int(ch) + a) % 10) if idx % 2 else ch for idx, ch in enumerate(s)])\n\n    def rotate(s: str, k: int) -> str:\n        k %= len(s)\n        return s[-k:] + s[:-k]\n\n    smallest = s\n    for _ in range(len(s)):\n        for _ in range(10):\n            rotated = rotate(s, b)\n            temp = add_odd(rotated, a)\n            smallest = min(smallest, temp)\n            s = rotated\n        s = add_odd(s, a)\n    return smallest\n"
     },
     {
          "instruction": "Write python code for this problem: You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the **sum** of scores of all the players in the team.\n\nHowever, the basketball team is not allowed to have **conflicts**. A **conflict** exists if a younger player has a **strictly higher** score than an older player. A conflict does **not** occur between players of the same age.\n\nGiven two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return _the highest overall score of all possible basketball teams_.\n\n",
          "input": "**Example 1:**\n\n**Input:** scores = \\[1,3,5,10,15\\], ages = \\[1,2,3,4,5\\]\n**Output:** 34\n**Explanation:** You can choose all the players.\n\n**Example 2:**\n\n**Input:** scores = \\[4,5,6,5\\], ages = \\[2,1,2,1\\]\n**Output:** 16\n**Explanation:** It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.\n\n**Example 3:**\n\n**Input:** scores = \\[1,2,3,5\\], ages = \\[8,9,10,1\\]\n**Output:** 6\n**Explanation:** It is best to choose the first 3 players. \n\n**Constraints:**\n\n*   `1 <= scores.length, ages.length <= 1000`\n*   `scores.length == ages.length`\n*   `1 <= scores[i] <= 106`\n*   `1 <= ages[i] <= 1000`First, sort players by age and break ties by their score. You can now consider the players from left to right. If you choose to include a player, you must only choose players with at least that score later on.",
          "output": "def can_make_arithmetic_progression(arr):\n    arr.sort()\n    difference = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i - 1] != difference:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: A **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. In this problem, we only consider the `'+'` operator (i.e. addition).\n\nYou are given the roots of two binary expression trees, `root1` and `root2`. Return `true` _if the two binary expression trees are equivalent_. Otherwise, return `false`.\n\nTwo binary expression trees are equivalent if they **evaluate to the same value** regardless of what the variables are set to.\n\n",
          "input": "**Example 1:**\n\n**Input:** root1 = \\[x\\], root2 = \\[x\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root1 = \\[+,a,+,null,null,b,c\\], root2 = \\[+,+,a,b,c\\]\n**Output:** true\n**Explaination:** `a + (b + c) == (b + c) + a`\n\n**Example 3:**\n\n**Input:** root1 = \\[+,a,+,null,null,b,c\\], root2 = \\[+,+,a,b,d\\]\n**Output:** false\n**Explaination:** `a + (b + c) != (b + d) + a`\n\n**Constraints:**\n\n*   The number of nodes in both trees are equal, odd and, in the range `[1, 4999]`.\n*   `Node.val` is `'+'` or a lower-case English letter.\n*   It's **guaranteed** that the tree given is a valid binary expression tree.\n\n**Follow up:** What will you change in your solution if the tree also supports the `'-'` operator (i.e. subtraction)?Count for each variable how many times it appeared in the first tree. Do the same for the second tree and check if the count is the same for both tree.",
          "output": "from sortedcontainers import SortedSet\n\ndef avoidFlood(rains: List[int]) -> List[int]:\n    res = [-1] * len(rains)\n    filled_lakes = {}\n    dry_days = SortedSet()\n\n    for i, lake in enumerate(rains):\n        if lake == 0:\n            dry_days.add(i)\n        else:\n            if lake in filled_lakes:\n                day = dry_days.ceiling(filled_lakes[lake])\n                if day is None:\n                    return []\n                res[day] = lake\n                dry_days.remove(day)\n            filled_lakes[lake] = i\n\n    for day in dry_days:\n        res[day] = 1\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.\n\nYou are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are **0-indexed**. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the **exact** time the previous key was released.\n\nThe tester wants to know the key of the keypress that had the **longest duration**. The `ith` keypress had a **duration** of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.\n\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key **may not** have had the same **duration**.\n\n_Return the key of the keypress that had the **longest duration**. If there are multiple such keypresses, return the lexicographically largest key of the keypresses._\n\n",
          "input": "**Example 1:**\n\n**Input:** releaseTimes = \\[9,29,49,50\\], keysPressed =  \"cbcd \"\n**Output:**  \"c \"\n**Explanation:** The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'.\n\n**Example 2:**\n\n**Input:** releaseTimes = \\[12,23,36,46,62\\], keysPressed =  \"spuda \"\n**Output:**  \"a \"\n**Explanation:** The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16.\n\n**Constraints:**\n\n*   `releaseTimes.length == n`\n*   `keysPressed.length == n`\n*   `2 <= n <= 1000`\n*   `1 <= releaseTimes[i] <= 109`\n*   `releaseTimes[i] < releaseTimes[i+1]`\n*   `keysPressed` contains only lowercase English letters.Get for each press its key and amount of time taken. Iterate on the presses, maintaining the answer so far. The current press will change the answer if and only if its amount of time taken is longer than that of the previous answer, or they are equal but the key is larger than that of the previous answer.",
          "output": "def minInteger(num: str, k: int) -> str:\n    if k == 0:\n        return num\n    num = list(num)\n    n = len(num)\n    for i in range(n):\n        idx = i\n        for j in range(i + 1, n):\n            if j - i > k:\n                break\n            if num[j] < num[idx]:\n                idx = j\n        min_digit = num[idx]\n        for j in range(idx, i, -1):\n            num[j] = num[j - 1]\n        num[i] = min_digit\n        k -= idx - i\n    return ''.join(num)\n"
     },
     {
          "instruction": "Write python code for this problem: A sequence of numbers is called **arithmetic** if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0]` for all valid `i`.\n\nFor example, these are **arithmetic** sequences:\n\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\n\nThe following sequence is not **arithmetic**:\n\n1, 1, 2, 5, 7\n\nYou are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are **0-indexed**.\n\nReturn _a list of_ `boolean` _elements_ `answer`_, where_ `answer[i]` _is_ `true` _if the subarray_ `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` _can be **rearranged** to form an **arithmetic** sequence, and_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]`\n**Output:** `[true,false,true]`\n**Explanation:**\nIn the 0th query, the subarray is \\[4,6,5\\]. This can be rearranged as \\[6,5,4\\], which is an arithmetic sequence.\nIn the 1st query, the subarray is \\[4,6,5,9\\]. This cannot be rearranged as an arithmetic sequence.\nIn the 2nd query, the subarray is `[5,9,3,7]. This` can be rearranged as `[3,5,7,9]`, which is an arithmetic sequence.\n\n**Example 2:**\n\n**Input:** nums = \\[-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10\\], l = \\[0,1,6,4,8,7\\], r = \\[4,4,9,7,9,10\\]\n**Output:** \\[false,true,false,false,true,true\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `m == l.length`\n*   `m == r.length`\n*   `2 <= n <= 500`\n*   `1 <= m <= 500`\n*   `0 <= l[i] < r[i] < n`\n*   `-105 <= nums[i] <= 105`To check if a given sequence is arithmetic, just check that the difference between every two consecutive elements is the same. If and only if a set of numbers can make an arithmetic sequence, then its sorted version makes an arithmetic sequence. So to check a set of numbers, sort it, and check if that sequence is arithmetic. For each query, get the corresponding set of numbers which will be the sub-array represented by the query, sort it, and check if the result sequence is arithmetic.",
          "output": "def count_odds(low, high):\n    return (high + 1) // 2 - low // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., **0-indexed**). You can move **up**, **down**, **left**, or **right**, and you wish to find a route that requires the minimum **effort**.\n\nA route's **effort** is the **maximum absolute difference** in heights between two consecutive cells of the route.\n\nReturn _the minimum **effort** required to travel from the top-left cell to the bottom-right cell._\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[\\[1,2,2\\],\\[3,8,2\\],\\[5,3,5\\]\\]\n**Output:** 2\n**Explanation:** The route of \\[1,3,5,3,5\\] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of \\[1,2,2,2,5\\], where the maximum absolute difference is 3.\n\n**Example 2:**\n\n**Input:** heights = \\[\\[1,2,3\\],\\[3,8,4\\],\\[5,3,5\\]\\]\n**Output:** 1\n**Explanation:** The route of \\[1,2,3,4,5\\] has a maximum absolute difference of 1 in consecutive cells, which is better than route \\[1,3,5,3,5\\].\n\n**Example 3:**\n\n**Input:** heights = \\[\\[1,2,1,1,1\\],\\[1,2,1,2,1\\],\\[1,2,1,2,1\\],\\[1,2,1,2,1\\],\\[1,1,1,2,1\\]\\]\n**Output:** 0\n**Explanation:** This route does not require any effort.\n\n**Constraints:**\n\n*   `rows == heights.length`\n*   `columns == heights[i].length`\n*   `1 <= rows, columns <= 100`\n*   `1 <= heights[i][j] <= 106`Consider the grid as a graph, where adjacent cells have an edge with cost of the difference between the cells. If you are given threshold k, check if it is possible to go from (0, 0) to (n-1, m-1) using only edges of \u2264 k cost. Binary search the k value.",
          "output": "def numOfSubarrays(arr):\n    odd, even, sum_, result = 0, 1, 0, 0\n    mod = 10**9 + 7\n    for x in arr:\n        sum_ = (sum_ + x) % 2\n        if sum_ % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        result = (result + odd) % mod\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You have a bomb to defuse, and your time is running out! Your informer will provide you with a **circular** array `code` of length of `n` and a key `k`.\n\nTo decrypt the code, you must replace every number. All the numbers are replaced **simultaneously**.\n\n*   If `k > 0`, replace the `ith` number with the sum of the **next** `k` numbers.\n*   If `k < 0`, replace the `ith` number with the sum of the **previous** `k` numbers.\n*   If `k == 0`, replace the `ith` number with `0`.\n\nAs `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`.\n\nGiven the **circular** array `code` and an integer key `k`, return _the decrypted code to defuse the bomb_!\n\n",
          "input": "**Example 1:**\n\n**Input:** code = \\[5,7,1,4\\], k = 3\n**Output:** \\[12,10,16,13\\]\n**Explanation:** Each number is replaced by the sum of the next 3 numbers. The decrypted code is \\[7+1+4, 1+4+5, 4+5+7, 5+7+1\\]. Notice that the numbers wrap around.\n\n**Example 2:**\n\n**Input:** code = \\[1,2,3,4\\], k = 0\n**Output:** \\[0,0,0,0\\]\n**Explanation:** When k is zero, the numbers are replaced by 0. \n\n**Example 3:**\n\n**Input:** code = \\[2,4,9,3\\], k = -2\n**Output:** \\[12,5,6,13\\]\n**Explanation:** The decrypted code is \\[3+9, 2+3, 4+2, 9+4\\]. Notice that the numbers wrap around again. If k is negative, the sum is of the **previous** numbers.\n\n**Constraints:**\n\n*   `n == code.length`\n*   `1 <= n <= 100`\n*   `1 <= code[i] <= 100`\n*   `-(n - 1) <= k <= n - 1`As the array is circular, use modulo to find the correct index. The constraints are low enough for a brute-force solution.",
          "output": "def minOperations(target: str) -> int:\n    operations = 0\n    current_bit = '0'\n    for bit in target:\n        if bit != current_bit:\n            operations += 1\n            current_bit = bit\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` consisting only of characters `'a'` and `'b'`\u200b\u200b\u200b\u200b.\n\nYou can delete any number of characters in `s` to make `s` **balanced**. `s` is **balanced** if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.\n\nReturn _the **minimum** number of deletions needed to make_ `s` _**balanced**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aababbab \"\n**Output:** 2\n**Explanation:** You can either:\nDelete the characters at 0-indexed positions 2 and 6 ( \"aababbab \" ->  \"aaabbb \"), or\nDelete the characters at 0-indexed positions 3 and 6 ( \"aababbab \" ->  \"aabbbb \").\n\n**Example 2:**\n\n**Input:** s =  \"bbaaaaabb \"\n**Output:** 2\n**Explanation:** The only solution is to delete the first two characters.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is `'a'` or `'b'`\u200b\u200b.You need to find for every index the number of Bs before it and the number of A's after it You can speed up the finding of A's and B's in suffix and prefix using preprocessing",
          "output": "def dfs(root, distance, depths):\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        depths.append(0)\n        return 1\n    left, right = [], []\n    count = dfs(root.left, distance, left) + dfs(root.right, distance, right)\n    for l in left:\n        for r in right:\n            if l + r + 2 <= distance:\n                count += 1\n    depths.extend(l + 1 for l in left)\n    depths.extend(r + 1 for r in right)\n    return count\n\ndef countPairs(root, distance):\n    depths = []\n    return dfs(root, distance, depths)\n"
     },
     {
          "instruction": "Write python code for this problem: A certain bug's home is on the x-axis at position `x`. Help them get there from position `0`.\n\nThe bug jumps according to the following rules:\n\n*   It can jump exactly `a` positions **forward** (to the right).\n*   It can jump exactly `b` positions **backward** (to the left).\n*   It cannot jump backward twice in a row.\n*   It cannot jump to any `forbidden` positions.\n\nThe bug may jump forward **beyond** its home, but it **cannot jump** to positions numbered with **negative** integers.\n\nGiven an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return _the minimum number of jumps needed for the bug to reach its home_. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`\n\n",
          "input": "**Example 1:**\n\n**Input:** forbidden = \\[14,4,18,1,15\\], a = 3, b = 15, x = 9\n**Output:** 3\n**Explanation:** 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.\n\n**Example 2:**\n\n**Input:** forbidden = \\[8,3,16,6,12,20\\], a = 15, b = 13, x = 11\n**Output:** -1\n\n**Example 3:**\n\n**Input:** forbidden = \\[1,6,2,14,5,17,4\\], a = 16, b = 9, x = 7\n**Output:** 2\n**Explanation:** One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.\n\n**Constraints:**\n\n*   `1 <= forbidden.length <= 1000`\n*   `1 <= a, b, forbidden[i] <= 2000`\n*   `0 <= x <= 2000`\n*   All the elements in `forbidden` are distinct.\n*   Position `x` is not forbidden.Think of the line as a graph to handle the no double back jumps condition you can handle it by holding the state of your previous jump",
          "output": "from collections import deque\n\ndef minimumJumps(forbidden, a, b, x):\n    forbidden_positions = set(forbidden)\n    q = deque([(0, 0, 0)])\n    visited = {(0, 0)}\n    while q:\n        pos, steps, backward = q.popleft()\n        if pos == x:\n            return steps\n        forward_pos = pos + a\n        backward_pos = pos - b\n        if forward_pos <= 6000 and forward_pos not in forbidden_positions and (forward_pos, 0) not in visited:\n            visited.add((forward_pos, 0))\n            q.append((forward_pos, steps + 1, 0))\n        if backward == 0 and backward_pos > 0 and backward_pos not in forbidden_positions and (backward_pos, 1) not in visited:\n            visited.add((backward_pos, 1))\n            q.append((backward_pos, steps + 1, 1))\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. You are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. Determine if it is possible to distribute `nums` such that:\n\n*   The `ith` customer gets **exactly** `quantity[i]` integers,\n*   The integers the `ith` customer gets are **all equal**, and\n*   Every customer is satisfied.\n\nReturn `true` _if it is possible to distribute_ `nums` _according to the above conditions_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\], quantity = \\[2\\]\n**Output:** false\n**Explanation:** The 0th customer cannot be given two different integers.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,3\\], quantity = \\[2\\]\n**Output:** true\n**Explanation:** The 0th customer is given \\[3,3\\]. The integers \\[1,2\\] are not used.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,2,2\\], quantity = \\[2,2\\]\n**Output:** true\n**Explanation:** The 0th customer is given \\[1,1\\], and the 1st customer is given \\[2,2\\].\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `1 <= nums[i] <= 1000`\n*   `m == quantity.length`\n*   `1 <= m <= 10`\n*   `1 <= quantity[i] <= 105`\n*   There are at most `50` unique values in `nums`.Count the frequencies of each number. For example, if nums = [4,4,5,5,5], frequencies = [2,3]. Each customer wants all of their numbers to be the same. This means that each customer will be assigned to one number. Use dynamic programming. Iterate through the numbers' frequencies, and choose some subset of customers to be assigned to this number.",
          "output": "from collections import Counter\n\ndef canDistribute(nums, quantity):\n    counts = Counter(nums)\n    values = list(counts.values())\n    quantity.sort(reverse=True)\n\n    def dfs(index, values):\n        if index == len(quantity):\n            return True\n        for i in range(len(values)):\n            if values[i] >= quantity[index]:\n                values[i] -= quantity[index]\n                if dfs(index + 1, values):\n                    return True\n                values[i] += quantity[index]\n        return False\n\n    return dfs(0, values)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of **distinct** integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are **distinct**. Your goal is to form `arr` by concatenating the arrays in `pieces` **in any order**. However, you are **not** allowed to reorder the integers in each array `pieces[i]`.\n\nReturn `true` _if it is possible_ _to form the array_ `arr` _from_ `pieces`. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[15,88\\], pieces = \\[\\[88\\],\\[15\\]\\]\n**Output:** true\n**Explanation:** Concatenate \\[15\\] then \\[88\\]\n\n**Example 2:**\n\n**Input:** arr = \\[49,18,16\\], pieces = \\[\\[16,18,49\\]\\]\n**Output:** false\n**Explanation:** Even though the numbers match, we cannot reorder pieces\\[0\\].\n\n**Example 3:**\n\n**Input:** arr = \\[91,4,64,78\\], pieces = \\[\\[78\\],\\[4,64\\],\\[91\\]\\]\n**Output:** true\n**Explanation:** Concatenate \\[91\\] then \\[4,64\\] then \\[78\\]\n\n**Constraints:**\n\n*   `1 <= pieces.length <= arr.length <= 100`\n*   `sum(pieces[i].length) == arr.length`\n*   `1 <= pieces[i].length <= arr.length`\n*   `1 <= arr[i], pieces[i][j] <= 100`\n*   The integers in `arr` are **distinct**.\n*   The integers in `pieces` are **distinct** (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).Note that the distinct part means that every position in the array belongs to only one piece Note that you can get the piece every position belongs to naively",
          "output": "def canFormArray(arr, pieces):\n    map = {piece[0]: piece for piece in pieces}\n\n    i = 0\n    while i < len(arr):\n        if arr[i] not in map:\n            return False\n        piece = map[arr[i]]\n        for num in piece:\n            if num != arr[i]:\n                return False\n            i += 1\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the number of strings of length_ `n` _that consist only of vowels (_`a`_,_ `e`_,_ `i`_,_ `o`_,_ `u`_) and are **lexicographically sorted**._\n\nA string `s` is **lexicographically sorted** if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 5\n**Explanation:** The 5 sorted strings that consist of vowels only are `[ \"a \", \"e \", \"i \", \"o \", \"u \"].`\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 15\n**Explanation:** The 15 sorted strings that consist of vowels only are\n\\[ \"aa \", \"ae \", \"ai \", \"ao \", \"au \", \"ee \", \"ei \", \"eo \", \"eu \", \"ii \", \"io \", \"iu \", \"oo \", \"ou \", \"uu \"\\].\nNote that  \"ea \" is not a valid string since 'e' comes after 'a' in the alphabet.\n\n**Example 3:**\n\n**Input:** n = 33\n**Output:** 66045\n\n**Constraints:**\n\n*   `1 <= n <= 50`For each character, its possible values will depend on the value of its previous character, because it needs to be not smaller than it. Think backtracking. Build a recursive function count(n, last_character) that counts the number of valid strings of length n and whose first characters are not less than last_character. In this recursive function, iterate on the possible characters for the first character, which will be all the vowels not less than last_character, and for each possible value c, increase the answer by count(n-1, c).",
          "output": "def countVowelStrings(n: int) -> int:\n    dp = [1, 1, 1, 1, 1]\n    for i in range(2, n + 1):\n        for j in range(3, -1, -1):\n            dp[j] = dp[j] + dp[j + 1]\n    return sum(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.\n\nYou start your journey from building `0` and move to the next building by possibly using bricks or ladders.\n\nWhile moving from building `i` to building `i+1` (**0-indexed**),\n\n*   If the current building's height is **greater than or equal** to the next building's height, you do **not** need a ladder or bricks.\n*   If the current building's height is **less than** the next building's height, you can either use **one ladder** or `(h[i+1] - h[i])` **bricks**.\n\n_Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally._\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[4,2,7,6,9,14,12\\], bricks = 5, ladders = 1\n**Output:** 4\n**Explanation:** Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.\n\n**Example 2:**\n\n**Input:** heights = \\[4,12,2,7,3,18,20,3,19\\], bricks = 10, ladders = 2\n**Output:** 7\n\n**Example 3:**\n\n**Input:** heights = \\[14,3,19,3\\], bricks = 17, ladders = 0\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= heights.length <= 105`\n*   `1 <= heights[i] <= 106`\n*   `0 <= bricks <= 109`\n*   `0 <= ladders <= heights.length`Assume the problem is to check whether you can reach the last building or not. You'll have to do a set of jumps, and choose for each one whether to do it using a ladder or bricks. It's always optimal to use ladders in the largest jumps. Iterate on the buildings, maintaining the largest r jumps and the sum of the remaining ones so far, and stop whenever this sum exceeds b.",
          "output": "def maxWaterBottles(numBottles: int, numExchange: int) -> int:\n    total = numBottles\n    while numBottles >= numExchange:\n        newBottles = numBottles // numExchange\n        total += newBottles\n        numBottles = newBottles + numBottles % numExchange\n    return total\n"
     },
     {
          "instruction": "Write python code for this problem: For a string `sequence`, a string `word` is **`k`\\-repeating** if `word` concatenated `k` times is a substring of `sequence`. The `word`'s **maximum `k`\\-repeating value** is the highest value `k` where `word` is `k`\\-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`\\-repeating value is `0`.\n\nGiven strings `sequence` and `word`, return _the **maximum `k`\\-repeating value** of `word` in `sequence`_.\n\n",
          "input": "**Example 1:**\n\n**Input:** sequence =  \"ababc \", word =  \"ab \"\n**Output:** 2\n**Explanation: ** \"abab \" is a substring in  \"ababc \".\n\n**Example 2:**\n\n**Input:** sequence =  \"ababc \", word =  \"ba \"\n**Output:** 1\n**Explanation: ** \"ba \" is a substring in  \"ababc \".  \"baba \" is not a substring in  \"ababc \".\n\n**Example 3:**\n\n**Input:** sequence =  \"ababc \", word =  \"ac \"\n**Output:** 0\n**Explanation: ** \"ac \" is not a substring in  \"ababc \". \n\n**Constraints:**\n\n*   `1 <= sequence.length <= 100`\n*   `1 <= word.length <= 100`\n*   `sequence` and `word` contains only lowercase English letters.The constraints are low enough for a brute force approach. Try every k value from 0 upwards until word is no longer k-repeating.",
          "output": "def longestAwesomeSubstring(s):\n    n = len(s)\n    maxLen = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substr = s[i:j]\n            if isAwesome(substr):\n                maxLen = max(maxLen, j - i)\n    return maxLen\n\ndef isAwesome(s):\n    odd_count = 0\n    freq = [0] * 26\n    for c in s:\n        freq[ord(c) - ord('a')] += 1\n    for i in range(26):\n        if freq[i] % 2 == 1:\n            odd_count += 1\n    return odd_count <= 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively.\n\nRemove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place.\n\nThe blue edges and nodes in the following figure indicate the result:\n\n_Build the result list and return its head._\n\n",
          "input": "**Example 1:**\n\n**Input:** list1 = \\[0,1,2,3,4,5\\], a = 3, b = 4, list2 = \\[1000000,1000001,1000002\\]\n**Output:** \\[0,1,2,1000000,1000001,1000002,5\\]\n**Explanation:** We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.\n\n**Example 2:**\n\n**Input:** list1 = \\[0,1,2,3,4,5,6\\], a = 2, b = 5, list2 = \\[1000000,1000001,1000002,1000003,1000004\\]\n**Output:** \\[0,1,1000000,1000001,1000002,1000003,1000004,6\\]\n**Explanation:** The blue edges and nodes in the above figure indicate the result.\n\n**Constraints:**\n\n*   `3 <= list1.length <= 104`\n*   `1 <= a <= b < list1.length - 1`\n*   `1 <= list2.length <= 104`Check which edges need to be changed. Let the next node of the (a-1)th node of list1 be the 0-th node in list 2. Let the next node of the last node of list2 be the (b+1)-th node in list 1.",
          "output": "def minCost(n, cuts):\n    cuts = [0] + cuts + [n]\n    cuts.sort()\n    size = len(cuts)\n    dp = [[0] * size for _ in range(size)]\n\n    for len in range(2, size):\n        for i in range(size - len):\n            j = i + len\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + cuts[j] - cuts[i])\n\n    return dp[0][size - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: You may recall that an array `arr` is a **mountain array** if and only if:\n\n*   `arr.length >= 3`\n*   There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `nums`\u200b\u200b\u200b, return _the **minimum** number of elements to remove to make_ `nums_\u200b\u200b\u200b_` _a **mountain array**._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,1\\]\n**Output:** 0\n**Explanation:** The array itself is a mountain array so we do not need to remove any elements.\n\n**Example 2:**\n\n**Input:** nums = \\[2,1,1,5,6,2,3,1\\]\n**Output:** 3\n**Explanation:** One solution is to remove the elements at indices 0, 1, and 5, making the array nums = \\[1,5,6,3,1\\].\n\n**Constraints:**\n\n*   `3 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 109`\n*   It is guaranteed that you can make a mountain array out of `nums`.Think the opposite direction instead of minimum elements to remove the maximum mountain subsequence Think of LIS it's kind of close",
          "output": "def minimumMountainRemovals(nums):\n    n = len(nums)\n    left, right = [0] * n, [0] * n\n    for i in range(1, n):\n        left[i] = left[i - 1] + int(nums[i] > nums[i - 1])\n        right[n - i - 1] = right[n - i] + int(nums[n - i - 1] > nums[n - i])\n    ans = n - 3\n    for i in range(1, n - 1):\n        ans = min(ans, n - 1 - left[i] - right[i])\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Design a queue that supports `push` and `pop` operations in the front, middle, and back.\n\nImplement the `FrontMiddleBack` class:\n\n*   `FrontMiddleBack()` Initializes the queue.\n*   `void pushFront(int val)` Adds `val` to the **front** of the queue.\n*   `void pushMiddle(int val)` Adds `val` to the **middle** of the queue.\n*   `void pushBack(int val)` Adds `val` to the **back** of the queue.\n*   `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `-1`.\n*   `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `-1`.\n*   `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `-1`.\n\n**Notice** that when there are **two** middle position choices, the operation is performed on the **frontmost** middle position choice. For example:\n\n*   Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.\n*   Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.\n\n",
          "input": "**Example 1:**\n\n**Input:**\n\\[ \"FrontMiddleBackQueue \",  \"pushFront \",  \"pushBack \",  \"pushMiddle \",  \"pushMiddle \",  \"popFront \",  \"popMiddle \",  \"popMiddle \",  \"popBack \",  \"popFront \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[3\\], \\[4\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output:**\n\\[null, null, null, null, null, 1, 3, 4, 2, -1\\]\n\n**Explanation:**\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // \\[1\\]\nq.pushBack(2);    // \\[1, 2\\]\nq.pushMiddle(3);  // \\[1, 3, 2\\]\nq.pushMiddle(4);  // \\[1, 4, 3, 2\\]\nq.popFront();     // return 1 -> \\[4, 3, 2\\]\nq.popMiddle();    // return 3 -> \\[4, 2\\]\nq.popMiddle();    // return 4 -> \\[2\\]\nq.popBack();      // return 2 -> \\[\\]\nq.popFront();     // return -1 -> \\[\\] (The queue is empty)\n\n**Constraints:**\n\n*   `1 <= val <= 109`\n*   At most `1000` calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle`, and `popBack`.The constraints are low enough for a brute force, single array approach. For an O(1) per method approach, use 2 double-ended queues: one for the first half and one for the second half.",
          "output": "from collections import deque\n\nclass FrontMiddleBackQueue:\n\n    def __init__(self):\n        self.first = deque()\n        self.second = deque()\n\n    def pushFront(self, val: int) -> None:\n        self.first.appendleft(val)\n        if len(self.first) > len(self.second) + 1:\n            self.second.appendleft(self.first.pop())\n\n    def pushMiddle(self, val: int) -> None:\n        if len(self.first) < len(self.second):\n            self.first.append(val)\n        else:\n            self.second.appendleft(val)\n\n    def pushBack(self, val: int) -> None:\n        self.second.append(val)\n        if len(self.second) > len(self.first):\n            self.first.append(self.second.popleft())\n\n    def popFront(self) -> int:\n        if not self.first and not self.second:\n            return -1\n        val = self.first.popleft()\n        if len(self.first) + 1 < len(self.second):\n            self.first.append(self.second.popleft())\n        return val\n\n    def popMiddle(self) -> int:\n        if not self.first and not self.second:\n            return -1\n        if len(self.first) < len(self.second):\n            val = self.second.popleft()\n        else:\n            val = self.first.pop()\n        if len(self.second) > len(self.first):\n            self.first.append(self.second.popleft())\n        return val\n\n    def popBack(self) -> int:\n        if not self.first and not self.second:\n            return -1\n        val = self.second.pop()\n        if len(self.first) > len(self.second) + 1:\n            self.second.appendleft(self.first.pop())\n        return val\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `postfix` tokens of an arithmetic expression, build and return _the binary expression tree that represents this expression._\n\n**Postfix** notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [ \"4 \", \"5 \", \"7 \", \"2 \", \"+ \", \"- \", \"* \"]`.\n\nThe class `Node` is an interface you should use to implement the binary expression tree. The returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. You should not remove the `Node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed.\n\nA **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).\n\nIt's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero).\n\n**Follow up:** Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing `evaluate` implementation?\n\n",
          "input": "**Example 1:**\n\n**Input:** s = \\[ \"3 \", \"4 \", \"+ \", \"2 \", \"\\* \", \"7 \", \"/ \"\\]\n**Output:** 2\n**Explanation:** this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.`\n\n**Example 2:**\n\n**Input:** s = \\[ \"4 \", \"5 \", \"2 \", \"7 \", \"+ \", \"- \", \"\\* \"\\]\n**Output:** -16\n**Explanation:** this expression evaluates to the above binary tree with expression 4\\*(5-`(2+7)) = 4*(-4) = -16.`\n\n**Constraints:**\n\n*   `1 <= s.length < 100`\n*   `s.length` is odd.\n*   `s` consists of numbers and the characters `'+'`, `'-'`, `'*'`, and `'/'`.\n*   If `s[i]` is a number, its integer representation is no more than `105`.\n*   It is guaranteed that `s` is a valid expression.\n*   The absolute value of the result and intermediate values will not exceed `109`.\n*   It is guaranteed that no expression will include division by zero.Apply the concept of Polymorphism to get a good design Implement the Node class using NumericNode and OperatorNode classes. NumericNode only maintains the value and evaluate returns this value. OperatorNode Maintains the left and right nodes representing the left and right operands, and the evaluate function applies the operator to them.",
          "output": "def numSubmat(mat):\n    m, n = len(mat), len(mat[0])\n    dp = [[0] * n for _ in range(m)]\n    count = 0\n\n    for i in range(m):\n        for j in range(n):\n            if mat[i][j] == 1:\n                dp[i][j] = (1 if j == 0 else dp[i][j - 1] + 1)\n                minWidth = dp[i][j]\n                for k in range(i, -1, -1):\n                    minWidth = min(minWidth, dp[k][j])\n                    count += minWidth\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`. A **0-indexed** integer array `nums` of length `n + 1` is generated in the following way:\n\n*   `nums[0] = 0`\n*   `nums[1] = 1`\n*   `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`\n*   `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`\n\nReturn _the **maximum** integer in the array_ `nums`\u200b\u200b\u200b.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7\n**Output:** 3\n**Explanation:** According to the given rules:\n  nums\\[0\\] = 0\n  nums\\[1\\] = 1\n  nums\\[(1 \\* 2) = 2\\] = nums\\[1\\] = 1\n  nums\\[(1 \\* 2) + 1 = 3\\] = nums\\[1\\] + nums\\[2\\] = 1 + 1 = 2\n  nums\\[(2 \\* 2) = 4\\] = nums\\[2\\] = 1\n  nums\\[(2 \\* 2) + 1 = 5\\] = nums\\[2\\] + nums\\[3\\] = 1 + 2 = 3\n  nums\\[(3 \\* 2) = 6\\] = nums\\[3\\] = 2\n  nums\\[(3 \\* 2) + 1 = 7\\] = nums\\[3\\] + nums\\[4\\] = 2 + 1 = 3\nHence, nums = \\[0,1,1,2,1,3,2,3\\], and the maximum is max(0,1,1,2,1,3,2,3) = 3.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** According to the given rules, nums = \\[0,1,1\\]. The maximum is max(0,1,1) = 1.\n\n**Example 3:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** According to the given rules, nums = \\[0,1,1,2\\]. The maximum is max(0,1,1,2) = 2.\n\n**Constraints:**\n\n*   `0 <= n <= 100`Try generating the array. Make sure not to fall in the base case of 0.",
          "output": "def findKthPositive(arr, k):\n    i, num = 0, 1\n    while k > 0:\n        if i < len(arr) and arr[i] == num:\n            i += 1\n        else:\n            k -= 1\n        num += 1\n    return num - 1\n"
     },
     {
          "instruction": "Write python code for this problem: A string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.\n\nGiven a string `s`, return _the **minimum** number of characters you need to delete to make_ `s` _**good**._\n\nThe **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab \"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aab \"\n**Output:** 0\n**Explanation:** `s` is already good.\n\n**Example 2:**\n\n**Input:** s =  \"aaabbbcc \"\n**Output:** 2\n**Explanation:** You can delete two 'b's resulting in the good string  \"aaabcc \".\nAnother way it to delete one 'b' and one 'c' resulting in the good string  \"aaabbc \".\n\n**Example 3:**\n\n**Input:** s =  \"ceabaacb \"\n**Output:** 2\n**Explanation:** You can delete both 'c's resulting in the good string  \"eabaab \".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` contains only lowercase English letters.As we can only delete characters, if we have multiple characters having the same frequency, we must decrease all the frequencies of them, except one. Sort the alphabet characters by their frequencies non-increasingly. Iterate on the alphabet characters, keep decreasing the frequency of the current character until it reaches a value that has not appeared before.",
          "output": "def can_convert(s, t, k):\n    diff = 0\n    for i in range(len(s)):\n        curr_diff = (ord(t[i]) - ord(s[i]) + 26) % 26\n        if curr_diff > 0:\n            diff += curr_diff\n            k -= curr_diff\n    return k >= 0 and k >= diff - len(s) and k % 26 == 0\n"
     },
     {
          "instruction": "Write python code for this problem: You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of **any** color.\n\nThe customer weirdly values the colored balls. Each colored ball's value is the number of balls **of that color** you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer).\n\nYou are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls **in any order**.\n\nReturn _the **maximum** total value that you can attain after selling_ `orders` _colored balls_. As the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** inventory = \\[2,5\\], orders = 4\n**Output:** 14\n**Explanation:** Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\nThe maximum total value is 2 + 5 + 4 + 3 = 14.\n\n**Example 2:**\n\n**Input:** inventory = \\[3,5\\], orders = 6\n**Output:** 19\n**Explanation:** Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).\nThe maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.\n\n**Constraints:**\n\n*   `1 <= inventory.length <= 105`\n*   `1 <= inventory[i] <= 109`\n*   `1 <= orders <= min(sum(inventory[i]), 109)`Greedily sell the most expensive ball. There is some value k where all balls of value > k are sold, and some, (maybe 0) of balls of value k are sold. Use binary search to find this value k, and use maths to find the total sum.",
          "output": "def minInsertions(s: str) -> int:\n    ans, depth = 0, 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            depth += 2\n        else:\n            if s[i - 1] == '(':\n                depth -= 1\n            else:\n                depth -= 2\n            if depth < 0:\n                ans -= depth\n                depth = 0\n    return ans + depth\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from **left to right** in `instructions`, insert it into `nums`. The **cost** of each insertion is the **minimum** of the following:\n\n*   The number of elements currently in `nums` that are **strictly less than** `instructions[i]`.\n*   The number of elements currently in `nums` that are **strictly greater than** `instructions[i]`.\n\nFor example, if inserting element `3` into `nums = [1,2,3,5]`, the **cost** of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.\n\nReturn _the **total cost** to insert all elements from_ `instructions` _into_ `nums`. Since the answer may be large, return it **modulo** `109 + 7`\n\n",
          "input": "**Example 1:**\n\n**Input:** instructions = \\[1,5,6,2\\]\n**Output:** 1\n**Explanation:** Begin with nums = \\[\\].\nInsert 1 with cost min(0, 0) = 0, now nums = \\[1\\].\nInsert 5 with cost min(1, 0) = 0, now nums = \\[1,5\\].\nInsert 6 with cost min(2, 0) = 0, now nums = \\[1,5,6\\].\nInsert 2 with cost min(1, 2) = 1, now nums = \\[1,2,5,6\\].\nThe total cost is 0 + 0 + 0 + 1 = 1.\n\n**Example 2:**\n\n**Input:** instructions = \\[1,2,3,6,5,4\\]\n**Output:** 3\n**Explanation:** Begin with nums = \\[\\].\nInsert 1 with cost min(0, 0) = 0, now nums = \\[1\\].\nInsert 2 with cost min(1, 0) = 0, now nums = \\[1,2\\].\nInsert 3 with cost min(2, 0) = 0, now nums = \\[1,2,3\\].\nInsert 6 with cost min(3, 0) = 0, now nums = \\[1,2,3,6\\].\nInsert 5 with cost min(3, 1) = 1, now nums = \\[1,2,3,5,6\\].\nInsert 4 with cost min(3, 2) = 2, now nums = \\[1,2,3,4,5,6\\].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.\n\n**Example 3:**\n\n**Input:** instructions = \\[1,3,3,3,2,4,2,1,2\\]\n**Output:** 4\n**Explanation:** Begin with nums = \\[\\].\nInsert 1 with cost min(0, 0) = 0, now nums = \\[1\\].\nInsert 3 with cost min(1, 0) = 0, now nums = \\[1,3\\].\nInsert 3 with cost min(1, 0) = 0, now nums = \\[1,3,3\\].\nInsert 3 with cost min(1, 0) = 0, now nums = \\[1,3,3,3\\].\nInsert 2 with cost min(1, 3) = 1, now nums = \\[1,2,3,3,3\\].\nInsert 4 with cost min(5, 0) = 0, now nums = \\[1,2,3,3,3,4\\].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = \\[1,2,2,3,3,3,4\\].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = \\[1,1,2,2,3,3,3,4\\].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = \\[1,1,2,2,2,3,3,3,4\\].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.\n\n**Constraints:**\n\n*   `1 <= instructions.length <= 105`\n*   `1 <= instructions[i] <= 105`This problem is closely related to finding the number of inversions in an array if i know the position in which i will insert the i-th element in I can find the minimum cost to insert it",
          "output": "def maxNonOverlapping(nums, target):\n    prefix_sum = {0: 1}\n    sum_so_far = count = 0\n    for num in nums:\n        sum_so_far += num\n        if sum_so_far - target in prefix_sum:\n            count += 1\n            prefix_sum.clear()\n            prefix_sum[0] = 1\n            sum_so_far = 0\n        else:\n            prefix_sum[sum_so_far] = prefix_sum.get(sum_so_far, 0) + 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.\n\nEach node has three attributes:\n\n*   `coefficient`: an integer representing the number multiplier of the term. The coefficient of the term `**9**x4` is `9`.\n*   `power`: an integer representing the exponent. The power of the term `9x**4**` is `4`.\n*   `next`: a pointer to the next node in the list, or `null` if it is the last node of the list.\n\nFor example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below:\n\nThe polynomial linked list must be in its standard form: the polynomial must be in **strictly** descending order by its `power` value. Also, terms with a `coefficient` of `0` are omitted.\n\nGiven two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return _the head of the sum of the polynomials_.\n\n**`PolyNode` format:**\n\nThe input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. For example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** poly1 = \\[\\[1,1\\]\\], poly2 = \\[\\[1,0\\]\\]\n**Output:** \\[\\[1,1\\],\\[1,0\\]\\]\n**Explanation:** poly1 = x. poly2 = 1. The sum is x + 1.\n\n**Example 2:**\n\n**Input:** poly1 = \\[\\[2,2\\],\\[4,1\\],\\[3,0\\]\\], poly2 = \\[\\[3,2\\],\\[-4,1\\],\\[-1,0\\]\\]\n**Output:** \\[\\[5,2\\],\\[2,0\\]\\]\n**Explanation:** poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the  \"0x \" term.\n\n**Example 3:**\n\n**Input:** poly1 = \\[\\[1,2\\]\\], poly2 = \\[\\[-1,2\\]\\]\n**Output:** \\[\\]\n**Explanation:** The sum is 0. We return an empty list.\n\n**Constraints:**\n\n*   `0 <= n <= 104`\n*   `-109 <= PolyNode.coefficient <= 109`\n*   `PolyNode.coefficient != 0`\n*   `0 <= PolyNode.power <= 109`\n*   `PolyNode.power > PolyNode.next.power`Process both linked lists at the same time If the current power of the two heads is equal, add this power with the sum of the coefficients to the answer list. If one head has a larger power, add this power to the answer list and move only this head.",
          "output": "class PolyNode:\n    def __init__(self, c: int, p: int, next: 'PolyNode' = None):\n        self.coefficient = c\n        self.power = p\n        self.next = next\n\ndef addPoly(poly1: PolyNode, poly2: PolyNode) -> PolyNode:\n    dummy = PolyNode(0, 0)\n    current = dummy\n\n    while poly1 and poly2:\n        if poly1.power > poly2.power:\n            current.next = poly1\n            poly1 = poly1.next\n        elif poly1.power < poly2.power:\n            current.next = poly2\n            poly2 = poly2.next\n        else:\n            sum = poly1.coefficient + poly2.coefficient\n            if sum != 0:\n                current.next = PolyNode(sum, poly1.power)\n                current = current.next\n            poly1 = poly1.next\n            poly2 = poly2.next\n        current = current.next\n\n    current.next = poly1 if poly1 else poly2\n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: There is a stream of `n` `(idKey, value)` pairs arriving in an **arbitrary** order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.\n\nDesign a stream that returns the values in **increasing order of their IDs** by returning a **chunk** (list) of values after each insertion. The concatenation of all the **chunks** should result in a list of the sorted values.\n\nImplement the `OrderedStream` class:\n\n*   `OrderedStream(int n)` Constructs the stream to take `n` values.\n*   `String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the **largest possible chunk** of currently inserted values that appear next in the order.\n\n**Example:**\n\n**Input**\n\\[ \"OrderedStream \",  \"insert \",  \"insert \",  \"insert \",  \"insert \",  \"insert \"\\]\n\\[\\[5\\], \\[3,  \"ccccc \"\\], \\[1,  \"aaaaa \"\\], \\[2,  \"bbbbb \"\\], \\[5,  \"eeeee \"\\], \\[4,  \"ddddd \"\\]\\]\n**Output**\n\\[null, \\[\\], \\[ \"aaaaa \"\\], \\[ \"bbbbb \",  \"ccccc \"\\], \\[\\], \\[ \"ddddd \",  \"eeeee \"\\]\\]\n\n**Explanation**\n// Note that the values ordered by ID is \\[ \"aaaaa \",  \"bbbbb \",  \"ccccc \",  \"ddddd \",  \"eeeee \"\\].\nOrderedStream os = new OrderedStream(5);\nos.insert(3,  \"ccccc \"); // Inserts (3,  \"ccccc \"), returns \\[\\].\nos.insert(1,  \"aaaaa \"); // Inserts (1,  \"aaaaa \"), returns \\[ \"aaaaa \"\\].\nos.insert(2,  \"bbbbb \"); // Inserts (2,  \"bbbbb \"), returns \\[ \"bbbbb \",  \"ccccc \"\\].\nos.insert(5,  \"eeeee \"); // Inserts (5,  \"eeeee \"), returns \\[\\].\nos.insert(4,  \"ddddd \"); // Inserts (4,  \"ddddd \"), returns \\[ \"ddddd \",  \"eeeee \"\\].\n// Concatentating all the chunks returned:\n// \\[\\] + \\[ \"aaaaa \"\\] + \\[ \"bbbbb \",  \"ccccc \"\\] + \\[\\] + \\[ \"ddddd \",  \"eeeee \"\\] = \\[ \"aaaaa \",  \"bbbbb \",  \"ccccc \",  \"ddddd \",  \"eeeee \"\\]\n// The resulting order is the same as the order above.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `1 <= id <= n`\n*   `value.length == 5`\n*   `value` consists only of lowercase letters.\n*   Each call to `insert` will have a unique `id.`\n*   Exactly `n` calls will be made to `insert`",
          "input": ".Maintain the next id that should be outputted. Maintain the ids that were inserted in the stream. Per each insert, make a loop where you check if the id that has the turn has been inserted, and if so increment the id that has the turn and continue the loop, else break.",
          "output": "def count_good_triplets(arr, a, b, c):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) <= a:\n                for k in range(j+1, len(arr)):\n                    if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this **modifies** the array for future operations.\n\nReturn _the **minimum number** of operations to reduce_ `x` _to **exactly**_ `0` _if it is possible__, otherwise, return_ `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,4,2,3\\], x = 5\n**Output:** 2\n**Explanation:** The optimal solution is to remove the last two elements to reduce x to zero.\n\n**Example 2:**\n\n**Input:** nums = \\[5,6,7,8,9\\], x = 4\n**Output:** -1\n\n**Example 3:**\n\n**Input:** nums = \\[3,2,20,1,1,3\\], x = 10\n**Output:** 5\n**Explanation:** The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 104`\n*   `1 <= x <= 109`Think in reverse; instead of finding the minimum prefix + suffix, find the maximum subarray. Finding the maximum subarray is standard and can be done greedily.",
          "output": "def min_swaps(grid):\n    n = len(grid)\n    row_zeros = [0] * n\n    \n    for i in range(n):\n        for j in range(n - 1, -1, -1):\n            if grid[i][j] == 0:\n                row_zeros[i] += 1\n            else:\n                break\n    \n    steps = 0\n    for i in range(n):\n        target = n - i - 1\n        current_row = i\n        while current_row < n and row_zeros[current_row] < target:\n            current_row += 1\n        if current_row == n:\n            return -1\n        steps += current_row - i\n        row_zeros.pop(current_row)\n        row_zeros.insert(i, target)\n    \n    return steps\n"
     },
     {
          "instruction": "Write python code for this problem: Two strings are considered **close** if you can attain one from the other using the following operations:\n\n*   Operation 1: Swap any two **existing** characters.\n    *   For example, `abcde -> aecdb`\n*   Operation 2: Transform **every** occurrence of one **existing** character into another **existing** character, and do the same with the other character.\n    *   For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)\n\nYou can use the operations on either string as many times as necessary.\n\nGiven two strings, `word1` and `word2`, return `true` _if_ `word1` _and_ `word2` _are **close**, and_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 =  \"abc \", word2 =  \"bca \"\n**Output:** true\n**Explanation:** You can attain word2 from word1 in 2 operations.\nApply Operation 1:  \"abc \" ->  \"acb \"\nApply Operation 1:  \"acb \" ->  \"bca \"\n\n**Example 2:**\n\n**Input:** word1 =  \"a \", word2 =  \"aa \"\n**Output:** false\n**Explanation:** It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n\n**Example 3:**\n\n**Input:** word1 =  \"cabbba \", word2 =  \"abbccc \"\n**Output:** true\n**Explanation:** You can attain word2 from word1 in 3 operations.\nApply Operation 1:  \"cabbba \" ->  \"caabbb \"\n`Apply Operation 2:  \"`caabbb \" ->  \"baaccc \"\nApply Operation 2:  \"baaccc \" ->  \"abbccc \"\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 105`\n*   `word1` and `word2` contain only lowercase English letters.Operation 1 allows you to freely reorder the string. Operation 2 allows you to freely reassign the letters' frequencies.",
          "output": "def get_winner(arr, k):\n    winner = arr[0]\n    consecutive_wins = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > winner:\n            winner = arr[i];\n            consecutive_wins = 0\n\n        consecutive_wins += 1\n        if consecutive_wins == k:\n            break\n\n    return winner\n"
     },
     {
          "instruction": "Write python code for this problem: You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts.\n\nYou should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you **do not** have to have all the people living in the grid.\n\nThe **happiness** of each person is calculated as follows:\n\n*   Introverts **start** with `120` happiness and **lose** `30` happiness for each neighbor (introvert or extrovert).\n*   Extroverts **start** with `40` happiness and **gain** `20` happiness for each neighbor (introvert or extrovert).\n\nNeighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\n\nThe **grid happiness** is the **sum** of each person's happiness. Return _the **maximum possible grid happiness**._\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\n**Output:** 240\n**Explanation:** Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 \\* 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 \\* 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 \\* 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.\n\n**Example 2:**\n\n**Input:** m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\n**Output:** 260\n**Explanation:** Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 \\* 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 \\* 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 \\* 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260.\n\n**Example 3:**\n\n**Input:** m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\n**Output:** 240\n\n**Constraints:**\n\n*   `1 <= m, n <= 5`\n*   `0 <= introvertsCount, extrovertsCount <= min(m * n, 6)`For each cell, it has 3 options, either it is empty, or contains an introvert, or an extrovert. You can do DP where you maintain the state of the previous row, the number of remaining introverts and extroverts, the current row and column, and try the 3 options for each cell. Assume that the previous columns in the current row already belong to the previous row.",
          "output": "def maxSum(nums1, nums2):\n    mod = 10**9 + 7\n    m, n = len(nums1), len(nums2)\n    dp1, dp2 = [0] * (m + 1), [0] * (n + 1)\n    i, j = m - 1, n - 1\n    while i >= 0 or j >= 0:\n        a = dp1[i] + nums1[i] if i >= 0 else float('-inf')\n        b = dp2[j] + nums2[j] if j >= 0 else float('-inf')\n        seen = set()\n        if a > b:\n            dp1[i] = a % mod\n            i -= 1\n            seen.add(nums1[i + 1])\n        else:\n            dp2[j] = b % mod\n            j -= 1\n            seen.add(nums2[j + 1])\n    return max(dp1[0], dp2[0]) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the lowest common ancestor (LCA) of two given nodes,_ `p` _and_ `q`. If either node `p` or `q` **does not exist** in the tree, return `null`. All values of the nodes in the tree are **unique**.\n\nAccording to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as **descendants** (where we allow **a node to be a descendant of itself**) \". A **descendant** of a node `x` is a node `y` that is on the path from node `x` to some leaf node.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 1\n**Output:** 3\n**Explanation:** The LCA of nodes 5 and 1 is 3.\n\n**Example 2:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 4\n**Output:** 5\n**Explanation:** The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.\n\n**Example 3:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 10\n**Output:** null\n**Explanation:** Node 10 does not exist in the tree, so return null.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-109 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   `p != q`\n\n**Follow up:** Can you find the LCA traversing the tree, without checking nodes existence?Traverse the graph visiting root, left, root, right, root to make an Euler Path Return the node (LCA) that is at the lowest depth between p and q in the Euler Path",
          "output": "def max_num_of_substrings(s: str) -> List[str]:\n    last = [-1] * 26\n    for i, ch in enumerate(s):\n        last[ord(ch) - ord('a')] = i\n    \n    res = []\n    pre, max_right = -1, -1\n    for i, ch in enumerate(s):\n        max_right = max(max_right, last[ord(ch) - ord('a')])\n        if max_right == i:\n            res.append(s[pre + 1:max_right + 1])\n            pre = i\n    \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given two string arrays `word1` and `word2`, return `true` _if the two arrays **represent** the same string, and_ `false` _otherwise._\n\nA string is **represented** by an array if the array elements concatenated **in order** forms the string.\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 = \\[ \"ab \",  \"c \"\\], word2 = \\[ \"a \",  \"bc \"\\]\n**Output:** true\n**Explanation:**\nword1 represents string  \"ab \" +  \"c \" ->  \"abc \"\nword2 represents string  \"a \" +  \"bc \" ->  \"abc \"\nThe strings are the same, so return true.\n\n**Example 2:**\n\n**Input:** word1 = \\[ \"a \",  \"cb \"\\], word2 = \\[ \"ab \",  \"c \"\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** word1  = \\[ \"abc \",  \"d \",  \"defg \"\\], word2 = \\[ \"abcddefg \"\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 103`\n*   `1 <= word1[i].length, word2[i].length <= 103`\n*   `1 <= sum(word1[i].length), sum(word2[i].length) <= 103`\n*   `word1[i]` and `word2[i]` consist of lowercase letters.Concatenate all strings in the first array into a single string in the given order, the same for the second array. Both arrays represent the same string if and only if the generated strings are the same.",
          "output": "def min_num_operations(nums):\n    result = 0\n    highest_bit = [0] * 32\n    for num in nums:\n        for j in range(32):\n            if num & (1 << j):\n                highest_bit[j] += 1\n    for count in highest_bit:\n        result = max(result, count)\n    return result + 31\n"
     },
     {
          "instruction": "Write python code for this problem: The **numeric value** of a **lowercase character** is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.\n\nThe **numeric value** of a **string** consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe \"` is equal to `1 + 2 + 5 = 8`.\n\nYou are given two integers `n` and `k`. Return _the **lexicographically smallest string** with **length** equal to `n` and **numeric value** equal to `k`._\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 27\n**Output:**  \"aay \"\n**Explanation:** The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n\n**Example 2:**\n\n**Input:** n = 5, k = 73\n**Output:**  \"aaszz \"\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `n <= k <= 26 * n`Think greedily. If you build the string from the end to the beginning, it will always be optimal to put the highest possible character at the current index.",
          "output": "def contains_cycle(grid):\n    def dfs(x, y, start_x, start_y, depth):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != grid[start_x][start_y]:\n            return False\n        \n        grid[x][y] = '*'\n\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for dx, dy in directions:\n            new_x, new_y = x + dx, y + dy\n\n            if new_x == start_x and new_y == start_y and depth >= 4:\n                return True\n\n            if dfs(new_x, new_y, start_x, start_y, depth + 1):\n                return True\n        \n        grid[x][y] = grid[start_x][start_y]\n\n        return False\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if dfs(i, j, i, j, 0):\n                return True\n\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. You can choose **exactly one** index (**0-indexed**) and remove the element. Notice that the index of the elements may change after the removal.\n\nFor example, if `nums = [6,1,7,4,1]`:\n\n*   Choosing to remove index `1` results in `nums = [6,7,4,1]`.\n*   Choosing to remove index `2` results in `nums = [6,1,4,1]`.\n*   Choosing to remove index `4` results in `nums = [6,1,7,4]`.\n\nAn array is **fair** if the sum of the odd-indexed values equals the sum of the even-indexed values.\n\nReturn the _**number** of indices that you could choose such that after the removal,_ `nums` _is **fair**._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,6,4\\]\n**Output:** 1\n**Explanation:**\nRemove index 0: \\[1,6,4\\] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: \\[2,6,4\\] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: \\[2,1,4\\] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: \\[2,1,6\\] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 3\n**Explanation:** You can remove any index and the remaining array is fair.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 0\n**Explanation:** You cannot make a fair array after removing any index.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 104`The parity of the indices after the removed element changes. Calculate prefix sums for even and odd indices separately to calculate for each index in O(1).",
          "output": "def numberOfFairs(nums):\n    even_sum = sum(nums[0::2])\n    odd_sum = sum(nums[1::2])\n    l_even = l_odd = count = 0\n    for i, num in enumerate(nums):\n        if i % 2 == 0:\n            even_sum -= num\n            if l_even + odd_sum == l_odd + even_sum:\n                count += 1\n            l_even += num\n        else:\n            odd_sum -= num\n            if l_even + odd_sum == l_odd + even_sum:\n                count += 1\n            l_odd += num\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:\n\n*   `actuali` is the actual amount of energy you **spend to finish** the `ith` task.\n*   `minimumi` is the minimum amount of energy you **require to begin** the `ith` task.\n\nFor example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it.\n\nYou can finish the tasks in **any order** you like.\n\nReturn _the **minimum** initial amount of energy you will need_ _to finish all the tasks_.\n\n",
          "input": "**Example 1:**\n\n**Input:** tasks = \\[\\[1,2\\],\\[2,4\\],\\[4,8\\]\\]\n**Output:** 8\n**Explanation:**\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n    - 2nd task. Now energy = 4 - 2 = 2.\n    - 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.\n\n**Example 2:**\n\n**Input:** tasks = \\[\\[1,3\\],\\[2,4\\],\\[10,11\\],\\[10,12\\],\\[8,9\\]\\]\n**Output:** 32\n**Explanation:**\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n    - 2nd task. Now energy = 31 - 2 = 29.\n    - 3rd task. Now energy = 29 - 10 = 19.\n    - 4th task. Now energy = 19 - 10 = 9.\n    - 5th task. Now energy = 9 - 8 = 1.\n\n**Example 3:**\n\n**Input:** tasks = \\[\\[1,7\\],\\[2,8\\],\\[3,9\\],\\[4,10\\],\\[5,11\\],\\[6,12\\]\\]\n**Output:** 27\n**Explanation:**\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n    - 2nd task. Now energy = 22 - 2 = 20.\n    - 3rd task. Now energy = 20 - 3 = 17.\n    - 1st task. Now energy = 17 - 1 = 16.\n    - 4th task. Now energy = 16 - 4 = 12.\n    - 6th task. Now energy = 12 - 6 = 6.\n\n**Constraints:**\n\n*   `1 <= tasks.length <= 105`\n*   `1 <= actual\u200bi <= minimumi <= 104`We can easily figure that the f(x) : does x solve this array is monotonic so binary Search is doable Figure a sorting pattern",
          "output": "def minimumEffort(tasks):\n    tasks.sort(key=lambda task: task[1] - task[0], reverse=True)\n    ans, sum_energy = 0, 0\n    for task in tasks:\n        ans = max(ans, sum_energy + task[1])\n        sum_energy += task[0]\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `allowed` consisting of **distinct** characters and an array of strings `words`. A string is **consistent** if all characters in the string appear in the string `allowed`.\n\nReturn _the number of **consistent** strings in the array_ `words`.\n\n",
          "input": "**Example 1:**\n\n**Input:** allowed =  \"ab \", words = \\[ \"ad \", \"bd \", \"aaab \", \"baa \", \"badab \"\\]\n**Output:** 2\n**Explanation:** Strings  \"aaab \" and  \"baa \" are consistent since they only contain characters 'a' and 'b'.\n\n**Example 2:**\n\n**Input:** allowed =  \"abc \", words = \\[ \"a \", \"b \", \"c \", \"ab \", \"ac \", \"bc \", \"abc \"\\]\n**Output:** 7\n**Explanation:** All strings are consistent.\n\n**Example 3:**\n\n**Input:** allowed =  \"cad \", words = \\[ \"cc \", \"acd \", \"b \", \"ba \", \"bac \", \"bad \", \"ac \", \"d \"\\]\n**Output:** 4\n**Explanation:** Strings  \"cc \",  \"acd \",  \"ac \", and  \"d \" are consistent.\n\n**Constraints:**\n\n*   `1 <= words.length <= 104`\n*   `1 <= allowed.length <= 26`\n*   `1 <= words[i].length <= 10`\n*   The characters in `allowed` are **distinct**.\n*   `words[i]` and `allowed` contain only lowercase English letters.A string is incorrect if it contains a character that is not allowed Constraints are small enough for brute force",
          "output": "def find_latest_step(arr, m):\n    n = len(arr)\n    length_left, length_right = [0] * (n + 2), [0] * (n + 2)\n    count, result = 0, -1\n\n    for i, pos in enumerate(arr):\n        left_length = length_right[pos - 1]\n        right_length = length_left[pos + 1]\n        new_length = left_length + right_length + 1\n\n        if left_length == m or right_length == m:\n            count -= 1\n\n        if new_length == m:\n            count += 1\n\n        if new_length > 0:\n            length_left[pos - left_length] = new_length\n            length_right[pos + right_length] = new_length\n            result = i + 1\n\n    return result if count > 0 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` sorted in **non-decreasing** order.\n\nBuild and return _an integer array_ `result` _with the same length as_ `nums` _such that_ `result[i]` _is equal to the **summation of absolute differences** between_ `nums[i]` _and all the other elements in the array._\n\nIn other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (**0-indexed**).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,5\\]\n**Output:** \\[4,3,5\\]\n**Explanation:** Assuming the arrays are 0-indexed, then\nresult\\[0\\] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult\\[1\\] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult\\[2\\] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.\n\n**Example 2:**\n\n**Input:** nums = \\[1,4,6,8,10\\]\n**Output:** \\[24,15,13,15,21\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 105`\n*   `1 <= nums[i] <= nums[i + 1] <= 104`Absolute difference is the same as max(a, b) - min(a, b). How can you use this fact with the fact that the array is sorted? For nums[i], the answer is (nums[i] - nums[0]) + (nums[i] - nums[1]) + ... + (nums[i] - nums[i-1]) + (nums[i+1] - nums[i]) + (nums[i+2] - nums[i]) + ... + (nums[n-1] - nums[i]). It can be simplified to (nums[i] * i - (nums[0] + nums[1] + ... + nums[i-1])) + ((nums[i+1] + nums[i+2] + ... + nums[n-1]) - nums[i] * (n-i-1)). One can build prefix and suffix sums to compute  this quickly.",
          "output": "def stoneGameV(stoneValue):\n    memo = [[-1 for _ in range(len(stoneValue))] for _ in range(len(stoneValue))]\n    return maxScore(stoneValue, 0, len(stoneValue) - 1, memo)\n\ndef maxScore(stoneValue, start, end, memo):\n    if start == end:\n        return 0\n    if memo[start][end] != -1:\n        return memo[start][end]\n\n    left_sum, right_sum = 0, 0\n    for i in range(start, end):\n        left_sum += stoneValue[i]\n        right_sum = sum(stoneValue[i + 1:end + 1])\n\n        if left_sum > right_sum:\n            memo[start][end] = max(memo[start][end], right_sum + maxScore(stoneValue, i + 1, end, memo))\n        elif left_sum < right_sum:\n            memo[start][end] = max(memo[start][end], left_sum + maxScore(stoneValue, start, i, memo))\n        else:\n            memo[start][end] = max(memo[start][end], left_sum + max(maxScore(stoneValue, start, i, memo), maxScore(stoneValue, i + 1, end, memo)))\n\n    return memo[start][end]\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob take turns playing a game, with Alice starting first.\n\nThere are `n` stones in a pile. On each player's turn, they can **remove** a stone from the pile and receive points based on the stone's value. Alice and Bob may **value the stones differently**.\n\nYou are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone.\n\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play **optimally**. Both players know the other's values.\n\nDetermine the result of the game, and:\n\n*   If Alice wins, return `1`.\n*   If Bob wins, return `-1`.\n*   If the game results in a draw, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** aliceValues = \\[1,3\\], bobValues = \\[2,1\\]\n**Output:** 1\n**Explanation:**\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins.\n\n**Example 2:**\n\n**Input:** aliceValues = \\[1,2\\], bobValues = \\[3,1\\]\n**Output:** 0\n**Explanation:**\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw.\n\n**Example 3:**\n\n**Input:** aliceValues = \\[2,4,3\\], bobValues = \\[1,6,7\\]\n**Output:** -1\n**Explanation:**\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins.\n\n**Constraints:**\n\n*   `n == aliceValues.length == bobValues.length`\n*   `1 <= n <= 105`\n*   `1 <= aliceValues[i], bobValues[i] <= 100`When one takes the stone, they not only get the points, but they take them away from the other player too. Greedily choose the stone with the maximum aliceValues[i] + bobValues[i].",
          "output": "def stoneGameVI(aliceValues, bobValues):\n    n = len(aliceValues)\n    diff = sorted([(aliceValues[i] + bobValues[i], i) for i in range(n)], reverse=True)\n\n    aliceSum, bobSum = 0, 0\n    for i in range(n):\n        if i % 2 == 0:\n            aliceSum += aliceValues[diff[i][1]]\n        else:\n            bobSum += bobValues[diff[i][1]]\n            \n    return 0 if aliceSum == bobSum else (1 if aliceSum > bobSum else -1)\n"
     },
     {
          "instruction": "Write python code for this problem: You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a **limit** on the **number of boxes** and the **total weight** that it can carry.\n\nYou are given an array `boxes`, where `boxes[i] = [ports\u200b\u200bi\u200b, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`.\n\n*   `ports\u200b\u200bi` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.\n*   `portsCount` is the number of ports.\n*   `maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.\n\nThe boxes need to be delivered **in the order they are given**. The ship will follow these steps:\n\n*   The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.\n*   For each loaded box **in order**, the ship will make a **trip** to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no **trip** is needed, and the box can immediately be delivered.\n*   The ship then makes a return **trip** to storage to take more boxes from the queue.\n\nThe ship must end at storage after all the boxes have been delivered.\n\nReturn _the **minimum** number of **trips** the ship needs to make to deliver all boxes to their respective ports._\n\n",
          "input": "**Example 1:**\n\n**Input:** boxes = \\[\\[1,1\\],\\[2,1\\],\\[1,1\\]\\], portsCount = 2, maxBoxes = 3, maxWeight = 3\n**Output:** 4\n**Explanation:** The optimal strategy is as follows: \n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).\n\n**Example 2:**\n\n**Input:** boxes = \\[\\[1,2\\],\\[3,3\\],\\[3,1\\],\\[3,1\\],\\[2,4\\]\\], portsCount = 3, maxBoxes = 3, maxWeight = 6\n**Output:** 6\n**Explanation:** The optimal strategy is as follows: \n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 2, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.\n\n**Example 3:**\n\n**Input:** boxes = \\[\\[1,4\\],\\[1,2\\],\\[2,1\\],\\[2,1\\],\\[3,2\\],\\[3,4\\]\\], portsCount = 3, maxBoxes = 6, maxWeight = 7\n**Output:** 6\n**Explanation:** The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.\n\n**Constraints:**\n\n*   `1 <= boxes.length <= 105`\n*   `1 <= portsCount, maxBoxes, maxWeight <= 105`\n*   `1 <= ports\u200b\u200bi <= portsCount`\n*   `1 <= weightsi <= maxWeight`Try to think of the most basic dp which is n^2 now optimize it Think of any range query data structure to optimize",
          "output": "def min_trips(boxes, portsCount, maxBoxes, maxWeight):\n    trips = 0\n    idx = 0\n    n = len(boxes)\n    while idx < n:\n        curr_limit = maxWeight\n        prev_port = 0\n        count = 0\n        while count < maxBoxes and idx < n:\n            if boxes[idx][1] <= curr_limit:\n                if prev_port != boxes[idx][0]:\n                    prev_port = boxes[idx][0]\n                    trips += 1\n                curr_limit -= boxes[idx][1]\n                count += 1\n                idx += 1\n            else:\n                break\n        trips += 1\n    return trips\n"
     },
     {
          "instruction": "Write python code for this problem: Given two nodes of a binary tree `p` and `q`, return _their lowest common ancestor (LCA)_.\n\nEach node will have a reference to its parent node. The definition for `Node` is below:\n\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n\nAccording to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow **a node to be a descendant of itself**). \"\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 1\n**Output:** 3\n**Explanation:** The LCA of nodes 5 and 1 is 3.\n\n**Example 2:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 4\n**Output:** 5\n**Explanation:** The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.\n\n**Example 3:**\n\n**Input:** root = \\[1,2\\], p = 1, q = 2\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 105]`.\n*   `-109 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   `p != q`\n*   `p` and `q` exist in the tree.Store the path from p to the root. Traverse the path from q to the root, the first common point of the two paths is the LCA.",
          "output": "class Node:\n    def __init__(self, val=0, left=None, right=None, parent=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.parent = parent\n\ndef lowest_common_ancestor(p, q):\n    a, b = p, q\n    while a != b:\n        a = a.parent if a.parent else q\n        b = b.parent if b.parent else p\n    return a\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b` customer has in the `j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b bank. Return _the **wealth** that the richest customer has._\n\nA customer's **wealth** is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum **wealth**.\n\n",
          "input": "**Example 1:**\n\n**Input:** accounts = \\[\\[1,2,3\\],\\[3,2,1\\]\\]\n**Output:** 6\n**Explanation****:**\n`1st customer has wealth = 1 + 2 + 3 = 6`\n`2nd customer has wealth = 3 + 2 + 1 = 6`\nBoth customers are considered the richest with a wealth of 6 each, so return 6.\n\n**Example 2:**\n\n**Input:** accounts = \\[\\[1,5\\],\\[7,3\\],\\[3,5\\]\\]\n**Output:** 10\n**Explanation**: \n1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.\n\n**Example 3:**\n\n**Input:** accounts = \\[\\[2,8,7\\],\\[7,1,3\\],\\[1,9,5\\]\\]\n**Output:** 17\n\n**Constraints:**\n\n*   `m == accounts.length`\n*   `n == accounts[i].length`\n*   `1 <= m, n <= 50`\n*   `1 <= accounts[i][j] <= 100`Calculate the wealth of each customer Find the maximum element in array.",
          "output": "def maximumWealth(accounts):\n    max_wealth = 0\n    for customer in accounts:\n        wealth = sum(customer)\n        max_wealth = max(max_wealth, wealth)\n    return max_wealth\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and a positive integer `k`, return _the most **competitive** subsequence of_ `nums` _of size_ `k`.\n\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\n\nWe define that a subsequence `a` is more **competitive** than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number **less** than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,5,2,6\\], k = 2\n**Output:** \\[2,6\\]\n**Explanation:** Among the set of every possible subsequence: {\\[3,5\\], \\[3,2\\], \\[3,6\\], \\[5,2\\], \\[5,6\\], \\[2,6\\]}, \\[2,6\\] is the most competitive.\n\n**Example 2:**\n\n**Input:** nums = \\[2,4,3,3,5,4,9,6\\], k = 4\n**Output:** \\[2,3,3,4\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 109`\n*   `1 <= k <= nums.length`In lexicographical order, the elements to the left have higher priority than those that come after. Can you think of a strategy that incrementally builds the answer from left to right?",
          "output": "from collections import deque\n\ndef mostCompetitive(nums, k):\n    stack = deque()\n    n = len(nums)\n    for i in range(n):\n        while stack and stack[-1] > nums[i] and len(stack) + n - i > k:\n            stack.pop()\n        if len(stack) < k:\n            stack.append(nums[i])\n    return list(stack)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of **even** length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.\n\nThe array `nums` is **complementary** if for all indices `i` (**0-indexed**), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.\n\nReturn the _**minimum** number of moves required to make_ `nums` _**complementary**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,4,3\\], limit = 4\n**Output:** 1\n**Explanation:** In 1 move, you can change nums to \\[1,2,2,3\\] (underlined elements are changed).\nnums\\[0\\] + nums\\[3\\] = 1 + 3 = 4.\nnums\\[1\\] + nums\\[2\\] = 2 + 2 = 4.\nnums\\[2\\] + nums\\[1\\] = 2 + 2 = 4.\nnums\\[3\\] + nums\\[0\\] = 3 + 1 = 4.\nTherefore, nums\\[i\\] + nums\\[n-1-i\\] = 4 for every i, so nums is complementary.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,2,1\\], limit = 2\n**Output:** 2\n**Explanation:** In 2 moves, you can change nums to \\[2,2,2,2\\]. You cannot change any number to 3 since 3 > limit.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,1,2\\], limit = 2\n**Output:** 0\n**Explanation:** nums is already complementary.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `2 <= n <= 105`\n*   `1 <= nums[i] <= limit <= 105`\n*   `n` is even.Given a target sum x, each pair of nums[i] and nums[n-1-i] would either need 0, 1, or 2 modifications. Can you find the optimal target sum x value such that the sum of modifications is minimized? Create a difference array to efficiently sum all the modifications.",
          "output": "def min_operations(n):\n    return n * (n - 1) // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums` of `n` positive integers.\n\nYou can perform two types of operations on any element of the array any number of times:\n\n*   If the element is **even**, **divide** it by `2`.\n    *   For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].`\n*   If the element is **odd**, **multiply** it by `2`.\n    *   For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].`\n\nThe **deviation** of the array is the **maximum difference** between any two elements in the array.\n\nReturn _the **minimum deviation** the array can have after performing some number of operations._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 1\n**Explanation:** You can transform the array to \\[1,2,3,2\\], then to \\[2,2,3,2\\], then the deviation will be 3 - 2 = 1.\n\n**Example 2:**\n\n**Input:** nums = \\[4,1,5,20,3\\]\n**Output:** 3\n**Explanation:** You can transform the array after two operations to \\[4,2,5,5,3\\], then the deviation will be 5 - 2 = 3.\n\n**Example 3:**\n\n**Input:** nums = \\[2,10,8\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `2 <= n <= 5 * 104`\n*   `1 <= nums[i] <= 109`Assume you start with the minimum possible value for each number so you can only multiply a number by 2 till it reaches its maximum possible value. If there is a better solution than the current one, then it must have either its maximum value less than the current maximum value, or the minimum value larger than the current minimum value. Since that we only increase numbers (multiply them by 2), we cannot decrease the current maximum value, so we must multiply the current minimum number by 2.",
          "output": "from typing import List\n\ndef can_place_balls(force: int, position: List[int], m: int) -> bool:\n    last_position = position[0]\n    placed_balls = 1\n\n    for i in range(1, len(position)):\n        if position[i] - last_position >= force:\n            placed_balls += 1\n            last_position = position[i]\n\n            if placed_balls == m:\n                return True\n\n    return False\n\ndef max_distance(position: List[int], m: int) -> int:\n    position.sort()\n\n    left = 1\n    right = position[-1] - position[0]\n    ans = 0\n\n    while left <= right:\n        mid = (left + right) // 2\n        if can_place_balls(mid, position, m):\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You have a binary tree with a small defect. There is **exactly one** invalid node where its right child incorrectly points to another node at the **same depth** but to the **invalid node's right**.\n\nGiven the root of the binary tree with this defect, `root`, return _the root of the binary tree after **removing** this invalid node **and every node underneath it** (minus the node it incorrectly points to)._\n\n**Custom testing:**\n\nThe test input is read as 3 lines:\n\n*   `TreeNode root`\n*   `int fromNode` (**not available to** `correctBinaryTree`)\n*   `int toNode` (**not available to** `correctBinaryTree`)\n\nAfter the binary tree rooted at `root` is parsed, the `TreeNode` with value of `fromNode` will have its right child pointer pointing to the `TreeNode` with a value of `toNode`. Then, `root` is passed to `correctBinaryTree`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[1,2,3\\], fromNode = 2, toNode = 3\n**Output:** \\[1,null,3\\]\n**Explanation:** The node with value 2 is invalid, so remove it.\n\n**Example 2:**\n\n**Input:** root = \\[8,3,1,7,null,9,4,2,null,null,null,5,6\\], fromNode = 7, toNode = 4\n**Output:** \\[8,3,1,null,null,9,4,null,null,5,6\\]\n**Explanation:** The node with value 7 is invalid, so remove it and the node underneath it, node 2.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[3, 104]`.\n*   `-109 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   `fromNode != toNode`\n*   `fromNode` and `toNode` will exist in the tree and will be on the same depth.\n*   `toNode` is to the **right** of `fromNode`.\n*   `fromNode.right` is `null` in the initial tree from the test data.If you traverse the tree from right to left, the invalid node will point to a node that has already been visited.",
          "output": "def thousand_separator(n: int) -> str:\n    result = str(n)\n    count = 0\n    for i in range(len(result) - 1, 0, -1):\n        count += 1\n        if count % 3 == 0:\n            result = result[:i] + '.' + result[i:]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You own a **Goal Parser** that can interpret a string `command`. The `command` consists of an alphabet of `\"G \"`, `\"() \"` and/or `\"(al) \"` in some order. The Goal Parser will interpret `\"G \"` as the string `\"G \"`, `\"() \"` as the string `\"o \"`, and `\"(al) \"` as the string `\"al \"`. The interpreted strings are then concatenated in the original order.\n\nGiven the string `command`, return _the **Goal Parser**'s interpretation of_ `command`.\n\n",
          "input": "**Example 1:**\n\n**Input:** command =  \"G()(al) \"\n**Output:**  \"Goal \"\n**Explanation:** The Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is  \"Goal \".\n\n**Example 2:**\n\n**Input:** command =  \"G()()()()(al) \"\n**Output:**  \"Gooooal \"\n\n**Example 3:**\n\n**Input:** command =  \"(al)G(al)()()G \"\n**Output:**  \"alGalooG \"\n\n**Constraints:**\n\n*   `1 <= command.length <= 100`\n*   `command` consists of `\"G \"`, `\"() \"`, and/or `\"(al) \"` in some order.You need to check at most 2 characters to determine which character comes next.",
          "output": "def num_ways(s: str) -> int:\n    number_of_ones = s.count('1')\n    if number_of_ones % 3 != 0:\n        return 0\n\n    target = number_of_ones // 3\n    if target == 0:\n        n = len(s)\n        return ((n - 1) * (n - 2) // 2) % 1000000007\n\n    ones_so_far1, ones_so_far2 = 0, 0\n    way1, way2 = 0, 0\n    for c in s:\n        if c == '1':\n            ones_so_far1 += 1\n            if ones_so_far1 == target:\n                way1 += 1\n                ones_so_far1 = 0\n\n            ones_so_far2 += 1\n            if ones_so_far2 == target * 2:\n                way2 += 1\n                ones_so_far2 = 0\n\n    return (way1 * way2) % 1000000007\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `k`.\n\nIn one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.\n\nReturn _the maximum number of operations you can perform on the array_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\], k = 5\n**Output:** 2\n**Explanation:** Starting with nums = \\[1,2,3,4\\]:\n- Remove numbers 1 and 4, then nums = \\[2,3\\]\n- Remove numbers 2 and 3, then nums = \\[\\]\nThere are no more pairs that sum up to 5, hence a total of 2 operations.\n\n**Example 2:**\n\n**Input:** nums = \\[3,1,3,4,3\\], k = 6\n**Output:** 1\n**Explanation:** Starting with nums = \\[3,1,3,4,3\\]:\n- Remove the first two 3's, then nums = \\[1,4,3\\]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`\n*   `1 <= k <= 109`The abstract problem asks to count the number of disjoint pairs with a given sum k. For each possible value x, it can be paired up with k - x. The number of such pairs equals to  min(count(x), count(k-x)), unless that x = k / 2, where the number of such pairs will be floor(count(x) / 2).",
          "output": "def findLengthOfShortestSubarray(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n\n    while left < n - 1 and arr[left] <= arr[left + 1]:\n        left += 1\n\n    if left == n - 1:\n        return 0\n\n    while right > 0 and arr[right] >= arr[right - 1]:\n        right -= 1\n\n    result = min(right, n - left - 1)\n\n    i, j = 0, right\n\n    while i <= left and j < n:\n        if arr[i] <= arr[j]:\n            result = min(result, j - i - 1)\n            i += 1\n        else:\n            j += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return _the **decimal value** of the binary string formed by concatenating the binary representations of_ `1` _to_ `n` _in order, **modulo**_ `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 1\n**Explanation: ** \"1 \" in binary corresponds to the decimal value 1. \n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** 27\n**Explanation:** In binary, 1, 2, and 3 corresponds to  \"1 \",  \"10 \", and  \"11 \".\nAfter concatenating them, we have  \"11011 \", which corresponds to the decimal value 27.\n\n**Example 3:**\n\n**Input:** n = 12\n**Output:** 505379714\n**Explanation**: The concatenation results in  \"1101110010111011110001001101010111100 \".\nThe decimal value of that is 118505380540.\nAfter modulo 109 + 7, the result is 505379714.\n\n**Constraints:**\n\n*   `1 <= n <= 105`Express the nth number value in a recursion formula and think about how we can do a fast evaluation.",
          "output": "def count_routes(locations, start, finish, fuel, curr=None, remaining_fuel=None, memo=None):\n    if memo is None:\n        memo = {}\n     \n    if curr is None:\n        curr = start\n        remaining_fuel = fuel\n\n    if remaining_fuel < 0:\n        return 0\n\n    if (curr, remaining_fuel) in memo:\n        return memo[(curr, remaining_fuel)]\n\n    ans = 1 if curr == finish else 0\n    for next in range(len(locations)):\n        if next != curr:\n            ans += count_routes(locations, start, finish, fuel, next, remaining_fuel - abs(locations[curr] - locations[next]), memo)\n            ans %= 1000000007\n\n    memo[(curr, remaining_fuel)] = ans\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\n\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a **stack**. At each step:\n\n*   If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue.\n*   Otherwise, they will **leave it** and go to the queue's end.\n\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\n\nYou are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i\u200b\u200b\u200b\u200b\u200b\u200bth` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j\u200b\u200b\u200b\u200b\u200b\u200bth` student in the initial queue (`j = 0` is the front of the queue). Return _the number of students that are unable to eat._\n\n",
          "input": "**Example 1:**\n\n**Input:** students = \\[1,1,0,0\\], sandwiches = \\[0,1,0,1\\]\n**Output:** 0 \n**Explanation:**\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[1,0,0,1\\].\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[0,0,1,1\\].\n- Front student takes the top sandwich and leaves the line making students = \\[0,1,1\\] and sandwiches = \\[1,0,1\\].\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[1,1,0\\].\n- Front student takes the top sandwich and leaves the line making students = \\[1,0\\] and sandwiches = \\[0,1\\].\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[0,1\\].\n- Front student takes the top sandwich and leaves the line making students = \\[1\\] and sandwiches = \\[1\\].\n- Front student takes the top sandwich and leaves the line making students = \\[\\] and sandwiches = \\[\\].\nHence all students are able to eat.\n\n**Example 2:**\n\n**Input:** students = \\[1,1,1,0,0,1\\], sandwiches = \\[1,0,0,0,1,1\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= students.length, sandwiches.length <= 100`\n*   `students.length == sandwiches.length`\n*   `sandwiches[i]` is `0` or `1`.\n*   `students[i]` is `0` or `1`.Simulate the given in the statement Calculate those who will eat instead of those who will not.",
          "output": "def min_time_to_remove_balloons(colors, neededTime):\n    n = len(colors)\n    INF = 10**9\n    dp = [[INF] * 26 for _ in range(n)]\n\n    for color in range(26):\n        if colors[0] != chr(ord('A') + color):\n            dp[0][color] = neededTime[0]\n\n    for i in range(1, n):\n        for color1 in range(26):\n            for color2 in range(26):\n                if color1 != color2 and colors[i] != chr(ord('A') + color1):\n                    dp[i][color1] = min(dp[i][color1], dp[i-1][color2] + neededTime[i])\n\n    ans = INF\n    for color in range(26):\n        ans = min(ans, dp[n-1][color])\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:`\n\n*   `arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in **non-decreasing** order.\n*   `timei` is the time needed to prepare the order of the `ith` customer.\n\nWhen a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers **in the order they were given in the input**.\n\nReturn _the **average** waiting time of all customers_. Solutions within `10-5` from the actual answer are considered accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** customers = \\[\\[1,2\\],\\[2,5\\],\\[4,3\\]\\]\n**Output:** 5.00000\n**Explanation:**\n1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\nSo the average waiting time = (2 + 6 + 7) / 3 = 5.\n\n**Example 2:**\n\n**Input:** customers = \\[\\[5,2\\],\\[5,4\\],\\[10,3\\],\\[20,1\\]\\]\n**Output:** 3.25000\n**Explanation:**\n1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\nSo the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.\n\n**Constraints:**\n\n*   `1 <= customers.length <= 105`\n*   `1 <= arrivali, timei <= 104`\n*   `arrivali <= arrivali+1`Iterate on the customers, maintaining the time the chef will finish the previous orders. If that time is before the current arrival time, the chef starts immediately. Else, the current customer waits till the chef finishes, and then the chef starts. Update the running time by the time when the chef starts preparing + preparation time.",
          "output": "def maxNumEdgesToRemove(n, edges):\n    def find(u):\n        if parent[u] == u:\n            return u\n        else:\n            parent[u] = find(parent[u])\n            return parent[u]\n\n    def unite(u, v):\n        u = find(u)\n        v = find(v)\n        if u != v:\n            parent[u] = v\n            return True\n        return False\n\n    parent = list(range(2 * n + 1))\n    ct = [0, 0]\n    both = n - 1\n    edges.sort(reverse=True)\n    for edge in edges:\n        type, u, v = edge\n        if type == 3 and unite(u, v + n):\n            both -= 1\n        if both == 0:\n            break\n\n    for type in range(1, 3):\n        for edge in edges:\n            a, u, v = edge\n            if a == type and unite(u, v + n):\n                ct[type - 1] += 1\n        if both + ct[type - 1] < n - 1:\n            return -1\n\n    return ct[0] + ct[1] - n + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times:\n\n*   Operation 1: If the number contains the substring `\"00 \"`, you can replace it with `\"10 \"`.\n    *   For example, `\"00010 \" -> \"10010` \"\n*   Operation 2: If the number contains the substring `\"10 \"`, you can replace it with `\"01 \"`.\n    *   For example, `\"00010 \" -> \"00001 \"`\n\n_Return the **maximum binary string** you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation._\n\n",
          "input": "**Example 1:**\n\n**Input:** binary =  \"000110 \"\n**Output:**  \"111011 \"\n**Explanation:** A valid transformation sequence can be:\n \"000110 \" ->  \"000101 \" \n \"000101 \" ->  \"100101 \" \n \"100101 \" ->  \"110101 \" \n \"110101 \" ->  \"110011 \" \n \"110011 \" ->  \"111011 \"\n\n**Example 2:**\n\n**Input:** binary =  \"01 \"\n**Output:**  \"01 \"\n**Explanation:**  \"01 \" cannot be transformed any further.\n\n**Constraints:**\n\n*   `1 <= binary.length <= 105`\n*   `binary` consist of `'0'` and `'1'`.Note that with the operations, you can always make the string only contain at most 1 zero.",
          "output": "def maximum_binary_string(binary: str) -> str:\n    zero_count = binary.count('0')\n    \n    if zero_count <= 1:\n        return binary\n    \n    one_count = len(binary) - zero_count\n\n    result = \"1\" * one_count + \"0\" * (zero_count - 1) + \"1####1\"\n    return result[:len(binary)]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. In one move, you can choose two **adjacent** indices and swap their values.\n\nReturn _the **minimum** number of moves required so that_ `nums` _has_ `k` _**consecutive**_ `1`_'s_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,0,0,1,0,1\\], k = 2\n**Output:** 1\n**Explanation:** In 1 move, nums could be \\[1,0,0,0,1,1\\] and have 2 consecutive 1's.\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,0,0,0,0,1,1\\], k = 3\n**Output:** 5\n**Explanation:** In 5 moves, the leftmost 1 can be shifted right until nums = \\[0,0,0,0,0,1,1,1\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,0,1\\], k = 2\n**Output:** 0\n**Explanation:** nums already has 2 consecutive 1's.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is `0` or `1`.\n*   `1 <= k <= sum(nums)`Choose k 1s and determine how many steps are required to move them into 1 group. Maintain a sliding window of k 1s, and maintain the steps required to group them. When you slide the window across, should you move the group to the right? Once you move the group to the right, it will never need to slide to the left again.",
          "output": "def minMoves(nums, k):\n    ones_pos = [i for i, x in enumerate(nums) if x == 1]\n    to_move = [i_b - i_a for i_a, i_b in zip(range(k), ones_pos)]\n    min_moves = sum(to_move[k // 2:])\n    move = min_moves\n    for left, right in zip(\n        to_move[:-k],       # left \"window\" of k-sized sliding window\n        to_move[k // 2 + 1:],  # right \"window\" of k-sized sliding window\n    ):\n        move += left - right\n        min_moves = min(min_moves, move)\n    return min_moves\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`, the number of teams in a tournament that has strange rules:\n\n*   If the current number of teams is **even**, each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round.\n*   If the current number of teams is **odd**, one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round.\n\nReturn _the number of matches played in the tournament until a winner is decided._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7\n**Output:** 6\n**Explanation:** Details of the tournament: \n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6.\n\n**Example 2:**\n\n**Input:** n = 14\n**Output:** 13\n**Explanation:** Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13.\n\n**Constraints:**\n\n*   `1 <= n <= 200`Simulate the tournament as given in the statement. Be careful when handling odd integers.",
          "output": "def numberOfMatches(n: int) -> int:\n    matches = 0\n    while n > 1:\n        matches += n // 2\n        n = (n + 1) // 2\n    return matches\n"
     },
     {
          "instruction": "Write python code for this problem: A decimal number is called **deci-binary** if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are **deci-binary**, while `112` and `3001` are not.\n\nGiven a string `n` that represents a positive decimal integer, return _the **minimum** number of positive **deci-binary** numbers needed so that they sum up to_ `n`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** n =  \"32 \"\n**Output:** 3\n**Explanation:** 10 + 11 + 11 = 32\n\n**Example 2:**\n\n**Input:** n =  \"82734 \"\n**Output:** 8\n\n**Example 3:**\n\n**Input:** n =  \"27346209830709182346 \"\n**Output:** 9\n\n**Constraints:**\n\n*   `1 <= n.length <= 105`\n*   `n` consists of only digits.\n*   `n` does not contain any leading zeros and represents a positive integer.Think about if the input was only one digit. Then you need to add up as many ones as the value of this digit. If the input has multiple digits, then you can solve for each digit independently, and merge the answers to form numbers that add up to that input. Thus the answer is equal to the max digit.",
          "output": "def containsPattern(arr, m, k):\n    n = len(arr)\n    if m * k > n:\n        return False\n\n    for i in range(n - m * k + 1):\n        patternFound = True\n        for j in range(m):\n            for l in range(1, k):\n                if arr[i + j] != arr[i + j + l * m]:\n                    patternFound = False\n                    break\n            if not patternFound:\n                break\n        if patternFound:\n            return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob take turns playing a game, with **Alice starting first**.\n\nThere are `n` stones arranged in a row. On each player's turn, they can **remove** either the leftmost stone or the rightmost stone from the row and receive points equal to the **sum** of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\n\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to **minimize the score's difference**. Alice's goal is to **maximize the difference** in the score.\n\nGiven an array of integers `stones` where `stones[i]` represents the value of the `ith` stone **from the left**, return _the **difference** in Alice and Bob's score if they both play **optimally**._\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[5,3,1,4,2\\]\n**Output:** 6\n**Explanation:** \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = \\[5,3,1,4\\].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = \\[3,1,4\\].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = \\[1,4\\].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = \\[4\\].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = \\[\\].\nThe score difference is 18 - 12 = 6.\n\n**Example 2:**\n\n**Input:** stones = \\[7,90,5,1,100,10,10,2\\]\n**Output:** 122\n\n**Constraints:**\n\n*   `n == stones.length`\n*   `2 <= n <= 1000`\n*   `1 <= stones[i] <= 1000`The constraints are small enough for an N^2 solution. Try using dynamic programming.",
          "output": "def getMaxLen(nums):\n    maxLength = currentLen = currentNegLen = 0\n    \n    for num in nums:\n        if num > 0:\n            currentLen += 1\n            if currentNegLen > 0:\n                currentNegLen += 1\n        elif num < 0:\n            currentLen, currentNegLen = currentNegLen, currentLen + 1\n        else:\n            currentLen = currentNegLen = 0\n        maxLength = max(maxLength, currentLen)\n    \n    return maxLength\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` consisting of `n` non-negative integers.\n\nYou are also given an array `queries`, where `queries[i] = [xi, yi]`. The answer to the `ith` query is the sum of all `nums[j]` where `xi <= j < n` and `(j - xi)` is divisible by `yi`.\n\nReturn _an array_ `answer` _where_ `answer.length == queries.length` _and_ `answer[i]` _is the answer to the_ `ith` _query **modulo**_ `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,2,3,4,5,6,7\\], queries = \\[\\[0,3\\],\\[5,1\\],\\[4,2\\]\\]\n**Output:** \\[9,18,10\\]\n**Explanation:** The answers of the queries are as follows:\n1) The j indices that satisfy this query are 0, 3, and 6. nums\\[0\\] + nums\\[3\\] + nums\\[6\\] = 9\n2) The j indices that satisfy this query are 5, 6, and 7. nums\\[5\\] + nums\\[6\\] + nums\\[7\\] = 18\n3) The j indices that satisfy this query are 4 and 6. nums\\[4\\] + nums\\[6\\] = 10\n\n**Example 2:**\n\n**Input:** nums = \\[100,200,101,201,102,202,103,203\\], queries = \\[\\[0,7\\]\\]\n**Output:** \\[303\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 5 * 104`\n*   `0 <= nums[i] <= 109`\n*   `1 <= queries.length <= 1.5 * 105`\n*   `0 <= xi < n`\n*   `1 <= yi <= 5 * 104`Think if y cannot be small. You can solve a query in O(n/y), so if y is large enough, it won't be a problem. If y is small, like less than B, you can preprocess the answers for all such ys in O(n * B), then answer each such query in O(1). As you might have already guessed, the optimal value for B is ~sqrt(n).",
          "output": "def reorder_spaces(text: str) -> str:\n    spaces = text.count(' ')\n    words = text.split()\n    \n    if len(words) == 1:\n        return words[0] + ' ' * spaces\n\n    space_between_words = spaces // (len(words) - 1)\n    extra_spaces = spaces % (len(words) - 1)\n    result = ''\n    \n    for i, word in enumerate(words):\n        result += word\n        if i < len(words) - 1:\n            result += ' ' * space_between_words\n    \n    result += ' ' * extra_spaces\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root.\n\nYou can reroot the tree with the following steps for each node `cur` on the path **starting from the** `leaf` up to the `root`\u200b\u200b\u200b **excluding the root**:\n\n1.  If `cur` has a left child, then that child becomes `cur`'s right child.\n2.  `cur`'s original parent becomes `cur`'s left child. Note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child.\n\nReturn _the new root_ _of the rerooted tree._\n\n**Note:** Ensure that your solution sets the `Node.parent` pointers correctly after rerooting or you will receive \"Wrong Answer \".\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], leaf = 7\n**Output:** \\[7,2,null,5,4,3,6,null,null,null,1,null,null,0,8\\]\n\n**Example 2:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], leaf = 0\n**Output:** \\[0,1,null,3,8,5,null,null,null,6,2,null,null,7,4\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 100]`.\n*   `-109 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   `leaf` exist in the tree.Start traversing from the leaf. Always go up till you reach the root. Change pointers as asked, make the current node's parent its left child, and make the left child the right one if needed.",
          "output": "def make_good(s: str) -> str:\n    result = []\n    for c in s:\n        if result and abs(ord(result[-1]) - ord(c)) == 32:\n            result.pop()\n        else:\n            result.append(c)\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.\n\nYou would like to reformat the phone number in a certain manner. Firstly, **remove** all spaces and dashes. Then, **group** the digits from left to right into blocks of length 3 **until** there are 4 or fewer digits. The final digits are then grouped as follows:\n\n*   2 digits: A single block of length 2.\n*   3 digits: A single block of length 3.\n*   4 digits: Two blocks of length 2 each.\n\nThe blocks are then joined by dashes. Notice that the reformatting process should **never** produce any blocks of length 1 and produce **at most** two blocks of length 2.\n\nReturn _the phone number after formatting._\n\n",
          "input": "**Example 1:**\n\n**Input:** number =  \"1-23-45 6 \"\n**Output:**  \"123-456 \"\n**Explanation:** The digits are  \"123456 \".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is  \"123 \".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is  \"456 \".\nJoining the blocks gives  \"123-456 \".\n\n**Example 2:**\n\n**Input:** number =  \"123 4-567 \"\n**Output:**  \"123-45-67 \"\n**Explanation:** The digits are  \"1234567 \".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is  \"123 \".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are  \"45 \" and  \"67 \".\nJoining the blocks gives  \"123-45-67 \".\n\n**Example 3:**\n\n**Input:** number =  \"123 4-5678 \"\n**Output:**  \"123-456-78 \"\n**Explanation:** The digits are  \"12345678 \".\nStep 1: The 1st block is  \"123 \".\nStep 2: The 2nd block is  \"456 \".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is  \"78 \".\nJoining the blocks gives  \"123-456-78 \".\n\n**Constraints:**\n\n*   `2 <= number.length <= 100`\n*   `number` consists of digits and the characters `'-'` and `' '`.\n*   There are at least **two** digits in `number`.Discard all the spaces and dashes. Use a while loop. While the string still has digits, check its length and see which rule to apply.",
          "output": "def min_subarray(nums, p):\n    n = len(nums)\n    need, cur, res = 0, 0, n\n    last_seen = {}\n\n    for num in nums:\n        need = (need + num) % p\n\n    if need == 0:\n        return 0\n\n    last_seen[cur] = -1\n    for i, num in enumerate(nums):\n        cur = (cur + num) % p\n        last_seen[cur] = i\n        want = (cur - need + p) % p\n        if want in last_seen:\n            res = min(res, i - last_seen[want])\n\n    return res if res != n else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of positive integers `nums` and want to erase a subarray containing **unique elements**. The **score** you get by erasing the subarray is equal to the **sum** of its elements.\n\nReturn _the **maximum score** you can get by erasing **exactly one** subarray._\n\nAn array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,2,4,5,6\\]\n**Output:** 17\n**Explanation:** The optimal subarray here is \\[2,4,5,6\\].\n\n**Example 2:**\n\n**Input:** nums = \\[5,2,1,2,5,2,1,2,5\\]\n**Output:** 8\n**Explanation:** The optimal subarray here is \\[5,2,1\\] or \\[1,2,5\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 104`The main point here is for the subarray to contain unique elements for each index. Only the first subarrays starting from that index have unique elements. This can be solved using the two pointers technique",
          "output": "from typing import List\n\ndef maxSumRangeQuery(nums: List[int], requests: List[List[int]]) -> int:\n    mod = 10**9 + 7\n    n = len(nums)\n    cnt = [0] * n\n    \n    for req in requests:\n        cnt[req[0]] += 1\n        if req[1] + 1 < n:\n            cnt[req[1] + 1] -= 1\n    \n    for i in range(1, n):\n        cnt[i] += cnt[i - 1]\n    \n    nums.sort()\n    cnt.sort()\n    \n    ans = sum(nums[i] * cnt[i] for i in range(n)) % mod\n    \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` and an integer `k`.\n\nYou are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` **inclusive**.\n\nYou want to reach the last index of the array (index `n - 1`). Your **score** is the **sum** of all `nums[j]` for each index `j` you visited in the array.\n\nReturn _the **maximum score** you can get_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,\\-1,-2,4,-7,3\\], k = 2\n**Output:** 7\n**Explanation:** You can choose your jumps forming the subsequence \\[1,-1,4,3\\] (underlined above). The sum is 7.\n\n**Example 2:**\n\n**Input:** nums = \\[10,-5,-2,4,0,3\\], k = 3\n**Output:** 17\n**Explanation:** You can choose your jumps forming the subsequence \\[10,4,3\\] (underlined above). The sum is 17.\n\n**Example 3:**\n\n**Input:** nums = \\[1,-5,-20,4,-1,3,-6,-3\\], k = 2\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length, k <= 105`\n*   `-104 <= nums[i] <= 104`Let dp[i] be \"the maximum score to reach the end starting at index i\". The answer for dp[i] is nums[i] + max{dp[i+j]} for 1 <= j <= k. That gives an O(n*k) solution. Instead of checking every j for every i, keep track of the largest dp[i] values in a heap and calculate dp[i] from right to left. When the largest value in the heap is out of bounds of the current index, remove it and keep checking.",
          "output": "def isPrintable(targetGrid):\n    m, n = len(targetGrid), len(targetGrid[0])\n    top, bottom, left, right = [m]*61, [-1]*61, [n]*61, [-1]*61\n    vis = [[False]*n for _ in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            c = targetGrid[i][j]\n            top[c] = min(top[c], i)\n            bottom[c] = max(bottom[c], i)\n            left[c] = min(left[c], j)\n            right[c] = max(right[c], j)\n\n    def dfs(x):\n        i, j = x // n, x % n\n        if vis[i][j]: return True\n        c = targetGrid[i][j]\n        if i < top[c] or i > bottom[c] or j < left[c] or j > right[c]: return False\n        vis[i][j] = True\n        for k in range(1, 61):\n            if k == c: continue\n            if i >= top[k] and i <= bottom[k] and j >= left[k] and j <= right[k]: return False\n            if not dfs(((i-top[k])*(right[k]-left[k]+1)) + j - left[k]): return False\n        return True\n\n    for color in range(1, 61):\n        for i in range(top[color], bottom[color] + 1):\n            for j in range(left[color], right[color] + 1):\n                if not vis[i][j] and not dfs(i * n + j): return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be **multiple** edges between two nodes.\n\nGiven an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj` such that each edge on the path has a distance **strictly less than** `limitj` .\n\nReturn _a **boolean array**_ `answer`_, where_ `answer.length == queries.length` _and the_ `jth` _value of_ `answer` _is_ `true` _if there is a path for_ `queries[j]` _is_ `true`_, and_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, edgeList = \\[\\[0,1,2\\],\\[1,2,4\\],\\[2,0,8\\],\\[1,0,16\\]\\], queries = \\[\\[0,1,2\\],\\[0,2,5\\]\\]\n**Output:** \\[false,true\\]\n**Explanation:** The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.\n\n**Example 2:**\n\n**Input:** n = 5, edgeList = \\[\\[0,1,10\\],\\[1,2,5\\],\\[2,3,9\\],\\[3,4,13\\]\\], queries = \\[\\[0,4,14\\],\\[1,4,13\\]\\]\n**Output:** \\[true,false\\]\n**Exaplanation:** The above figure shows the given graph.\n\n**Constraints:**\n\n*   `2 <= n <= 105`\n*   `1 <= edgeList.length, queries.length <= 105`\n*   `edgeList[i].length == 3`\n*   `queries[j].length == 3`\n*   `0 <= ui, vi, pj, qj <= n - 1`\n*   `ui != vi`\n*   `pj != qj`\n*   `1 <= disi, limitj <= 109`\n*   There may be **multiple** edges between two nodes.All the queries are given in advance. Is there a way you can reorder the queries to avoid repeated computations?",
          "output": "from collections import defaultdict, deque\n\ndef distanceLimitedPathsExist(n, edgeList, queries):\n    graph = defaultdict(list)\n\n    for u, v, dis in edgeList:\n        graph[u].append((v, dis))\n        graph[v].append((u, dis))\n\n    answer = [False] * len(queries)\n    for i, (pj, qj, limitj) in enumerate(queries):\n        q = deque([(pj, 0)])\n        visited = [False] * n\n        visited[pj] = True\n\n        while q:\n            curr_node, curr_dist = q.popleft()\n\n            for next_node, next_dist in graph[curr_node]:\n                if curr_dist + next_dist < limitj:\n                    if next_node == qj:\n                        answer[i] = True\n                        break\n                    if not visited[next_node]:\n                        visited[next_node] = True\n                        q.append((next_node, curr_dist + next_dist))\n            if answer[i]:\n                break\n\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree and an array of `TreeNode` objects `nodes`, return _the lowest common ancestor (LCA) of **all the nodes** in_ `nodes`. All the nodes will exist in the tree, and all values of the tree's nodes are **unique**.\n\nExtending the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `T` is the lowest node that has every `pi` as a **descendant** (where we allow **a node to be a descendant of itself**) for every valid `i` \". A **descendant** of a node `x` is a node `y` that is on the path from node `x` to some leaf node.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], nodes = \\[4,7\\]\n**Output:** 2\n**Explanation:** The lowest common ancestor of nodes 4 and 7 is node 2.\n\n**Example 2:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], nodes = \\[1\\]\n**Output:** 1\n**Explanation:** The lowest common ancestor of a single node is the node itself.\n\n**Example 3:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], nodes = \\[7,6,2,4\\]\n**Output:** 5\n**Explanation:** The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-109 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   All `nodes[i]` will exist in the tree.\n*   All `nodes[i]` are distinct.Starting from the root, traverse the left and the right subtrees, checking if one of the nodes exist there. If one of the subtrees doesn't contain any given node, the LCA can be the node returned from the other subtree If both subtrees contain nodes, the LCA node is the current node.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef lowestCommonAncestor(root, nodes):\n    if root is None or root in nodes:\n        return root\n    left = lowestCommonAncestor(root.left, nodes)\n    right = lowestCommonAncestor(root.right, nodes)\n    if left is not None and right is not None:\n        return root\n    return left if left is not None else right\n"
     },
     {
          "instruction": "Write python code for this problem: Hercy wants to save money for his first car. He puts money in the Leetcode bank **every day**.\n\nHe starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the **previous Monday**.\n\nGiven `n`, return _the total amount of money he will have in the Leetcode bank at the end of the_ `nth` _day._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4\n**Output:** 10\n**Explanation:** After the 4th day, the total is 1 + 2 + 3 + 4 = 10.\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 37\n**Explanation:** After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.\n\n**Example 3:**\n\n**Input:** n = 20\n**Output:** 96\n**Explanation:** After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`Simulate the process by keeping track of how much money John is putting in and which day of the week it is, and use this information to deduce how much money John will put in the next day.",
          "output": "def maxProductPath(grid):\n    m, n, mod = len(grid), len(grid[0]), int(1e9 + 7)\n    dp = [[[0, 0] for _ in range(n)] for _ in range(m)]\n    \n    dp[0][0] = [grid[0][0], grid[0][0]]\n    \n    for i in range(1, m):\n        dp[i][0] = [dp[i - 1][0][0] * grid[i][0], dp[i - 1][0][0] * grid[i][0]]\n    for j in range(1, n):\n        dp[0][j] = [dp[0][j - 1][0] * grid[0][j], dp[0][j - 1][0] * grid[0][j]]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i][j] < 0:\n                dp[i][j][0] = min(dp[i - 1][j][1], dp[i][j - 1][1]) * grid[i][j]\n                dp[i][j][1] = max(dp[i - 1][j][0], dp[i][j - 1][0]) * grid[i][j]\n            else:\n                dp[i][j][0] = max(dp[i - 1][j][0], dp[i][j - 1][0]) * grid[i][j]\n                dp[i][j][1] = min(dp[i - 1][j][1], dp[i][j - 1][1]) * grid[i][j]\n            \n    return dp[m - 1][n - 1][0] % mod if dp[m - 1][n - 1][0] >= 0 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.\n\n*   Remove substring `\"ab \"` and gain `x` points.\n    *   For example, when removing `\"ab \"` from `\"cabxbae \"` it becomes `\"cxbae \"`.\n*   Remove substring `\"ba \"` and gain `y` points.\n    *   For example, when removing `\"ba \"` from `\"cabxbae \"` it becomes `\"cabxe \"`.\n\nReturn _the maximum points you can gain after applying the above operations on_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"cdbcbbaaabab \", x = 4, y = 5\n**Output:** 19\n**Explanation:**\n- Remove the  \"ba \" underlined in  \"cdbcbbaaabab \". Now, s =  \"cdbcbbaaab \" and 5 points are added to the score.\n- Remove the  \"ab \" underlined in  \"cdbcbbaaab \". Now, s =  \"cdbcbbaa \" and 4 points are added to the score.\n- Remove the  \"ba \" underlined in  \"cdbcbbaa \". Now, s =  \"cdbcba \" and 5 points are added to the score.\n- Remove the  \"ba \" underlined in  \"cdbcba \". Now, s =  \"cdbc \" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19.\n\n**Example 2:**\n\n**Input:** s =  \"aabbaaxybbaabb \", x = 5, y = 4\n**Output:** 20\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `1 <= x, y <= 104`\n*   `s` consists of lowercase English letters.Note that it is always more optimal to take one type of substring before another You can use a stack to handle erasures",
          "output": "def min_cost(cost, size1, size2):\n    dp = [float('inf')] * (size2 + 1)\n    dp[0] = 0\n\n    for i in range(size1):\n        for j in range(size2, -1, -1):\n            min_cost = float('inf')\n            for k in range(size2):\n                if (1 << k) & j == 0:\n                    min_cost = min(min_cost, cost[i][k] + dp[j | (1 << k)])\n            dp[j] = min(dp[j], min_cost)\n\n    return dp[(1 << size2) - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, find a sequence that satisfies all of the following:\n\n*   The integer `1` occurs once in the sequence.\n*   Each integer between `2` and `n` occurs twice in the sequence.\n*   For every integer `i` between `2` and `n`, the **distance** between the two occurrences of `i` is exactly `i`.\n\nThe **distance** between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.\n\nReturn _the **lexicographically largest** sequence__. It is guaranteed that under the given constraints, there is always a solution._\n\nA sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** \\[3,1,2,3,2\\]\n**Explanation:** \\[2,3,2,1,3\\] is also a valid sequence, but \\[3,1,2,3,2\\] is the lexicographically largest valid sequence.\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** \\[5,3,1,4,3,5,2,4,2\\]\n\n**Constraints:**\n\n*   `1 <= n <= 20`Heuristic algorithm may work.",
          "output": "class Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        res = [0] * (2 * n - 1)\n\n        def backtrack(i, unused):\n            if i == len(res):\n                return True\n            if res[i]:\n                return backtrack(i + 1, unused)\n            for num in range(n, 0, -1):\n                if (unused >> num) & 1:\n                    if num == 1 or (i + num < len(res) and not res[i + num]):\n                        res[i] = num\n                        if num > 1:\n                            res[i + num] = num\n                        if backtrack(i + 1, unused ^ (1 << num)):\n                            return True\n                        res[i] = 0\n                        if num > 1:\n                            res[i + num] = 0\n            return False\n\n        backtrack(0, (1 << (n + 1)) - 2)\n        return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:\n\n*   There are no duplicates.\n*   `xi < yi`\n\nLet `ways` be the number of rooted trees that satisfy the following conditions:\n\n*   The tree consists of nodes whose values appeared in `pairs`.\n*   A pair `[xi, yi]` exists in `pairs` **if and only if** `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.\n*   **Note:** the tree does not have to be a binary tree.\n\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\n\nReturn:\n\n*   `0` if `ways == 0`\n*   `1` if `ways == 1`\n*   `2` if `ways > 1`\n\nA **rooted tree** is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\n\nAn **ancestor** of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\n\n",
          "input": "**Example 1:**\n\n**Input:** pairs = \\[\\[1,2\\],\\[2,3\\]\\]\n**Output:** 1\n**Explanation:** There is exactly one valid rooted tree, which is shown in the above figure.\n\n**Example 2:**\n\n**Input:** pairs = \\[\\[1,2\\],\\[2,3\\],\\[1,3\\]\\]\n**Output:** 2\n**Explanation:** There are multiple valid rooted trees. Three of them are shown in the above figures.\n\n**Example 3:**\n\n**Input:** pairs = \\[\\[1,2\\],\\[2,3\\],\\[2,4\\],\\[1,5\\]\\]\n**Output:** 0\n**Explanation:** There are no valid rooted trees.\n\n**Constraints:**\n\n*   `1 <= pairs.length <= 105`\n*   `1 <= xi < yi <= 500`\n*   The elements in `pairs` are unique.Think inductively. The first step is to get the root. Obviously, the root should be in pairs with all the nodes. If there isn't exactly one such node, then there are 0 ways. The number of pairs involving a node must be less than or equal to that number of its parent. Actually, if it's equal, then there is not exactly 1 way, because they can be swapped. Recursively, given a set of nodes, get the node with the most pairs, then this must be a root and have no parents in the current set of nodes.",
          "output": "def check_ways(pairs):\n    candidates = {}\n    for x, y in pairs:\n        candidates[x] = candidates.get(x, 0) + 1\n        candidates[y] = candidates.get(y, 0) + 1\n\n    root_count = sum(1 for v in candidates.values() if v == 1)\n    return min(root_count, 2)\n"
     },
     {
          "instruction": "Write python code for this problem: A subsequence of a string `s` is considered a **good palindromic subsequence** if:\n\n*   It is a subsequence of `s`.\n*   It is a palindrome (has the same value if reversed).\n*   It has an **even** length.\n*   No two consecutive characters are equal, except the two middle ones.\n\nFor example, if `s = \"abcabcabb \"`, then `\"abba \"` is considered a **good palindromic subsequence**, while `\"bcb \"` (not even length) and `\"bbbb \"` (has equal consecutive characters) are not.\n\nGiven a string `s`, return _the **length** of the **longest good palindromic subsequence** in_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"bbabab \"\n**Output:** 4\n**Explanation:** The longest good palindromic subsequence of s is  \"baab \".\n\n**Example 2:**\n\n**Input:** s =  \"dcbccacdb \"\n**Output:** 4\n**Explanation:** The longest good palindromic subsequence of s is  \"dccd \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 250`\n*   `s` consists of lowercase English letters.As with any good dp problem that uses palindromes, try building the palindrome from the edges The prime point is to check that no two adjacent characters are equal, so save the past character while building the palindrome.",
          "output": "def most_visited(n, rounds):\n    visited = [0] * (n + 1)\n    \n    for i in range(1, len(rounds)):\n        start, end = rounds[i - 1], rounds[i]\n        while start != end:\n            visited[start] += 1\n            start = (start % n) + 1\n    visited[rounds[-1]] += 1\n    \n    max_visits = max(visited);\n    return [i for i in range(1, n + 1) if visited[i] == max_visits]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.\n\nTwo strings are **alike** if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.\n\nReturn `true` _if_ `a` _and_ `b` _are **alike**_. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"book \"\n**Output:** true\n**Explanation:** a =  \"bo \" and b =  \"ok \". a has 1 vowel and b has 1 vowel. Therefore, they are alike.\n\n**Example 2:**\n\n**Input:** s =  \"textbook \"\n**Output:** false\n**Explanation:** a =  \"text \" and b =  \"book \". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice.\n\n**Constraints:**\n\n*   `2 <= s.length <= 1000`\n*   `s.length` is even.\n*   `s` consists of **uppercase and lowercase** letters.Create a function that checks if a character is a vowel, either uppercase or lowercase.",
          "output": "def numSpecial(mat):\n    m, n = len(mat), len(mat[0])\n    row, col = [0] * m, [0] * n\n\n    for i in range(m):\n        for j in range(n):\n            if mat[i][j] == 1:\n                row[i] += 1\n                col[j] += 1\n\n    special_positions = 0\n    for i in range(m):\n        for j in range(n):\n            if mat[i][j] == 1 and row[i] == 1 and col[j] == 1:\n                special_positions += 1\n\n    return special_positions\n"
     },
     {
          "instruction": "Write python code for this problem: There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.\n\nYou decided to eat **at most** one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.\n\nGiven two integer arrays `days` and `apples` of length `n`, return _the maximum number of apples you can eat._\n\n",
          "input": "**Example 1:**\n\n**Input:** apples = \\[1,2,3,5,2\\], days = \\[3,2,1,4,2\\]\n**Output:** 7\n**Explanation:** You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.\n\n**Example 2:**\n\n**Input:** apples = \\[3,0,0,0,0,2\\], days = \\[3,0,0,0,0,2\\]\n**Output:** 5\n**Explanation:** You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day.\n\n**Constraints:**\n\n*   `n == apples.length == days.length`\n*   `1 <= n <= 2 * 104`\n*   `0 <= apples[i], days[i] <= 2 * 104`\n*   `days[i] = 0` if and only if `apples[i] = 0`.It's optimal to finish the apples that will rot first before those that will rot last You need a structure to keep the apples sorted by their finish time",
          "output": "def unhappyFriends(n, preferences, pairs):\n    pair_mapping = [0] * n\n    for pair in pairs:\n        pair_mapping[pair[0]] = pair[1]\n        pair_mapping[pair[1]] = pair[0]\n\n    unhappy_count = 0\n    for x in range(n):\n        y = pair_mapping[x]\n        pref_x = preferences[x]\n        idx_y = pref_x.index(y)\n\n        for i in range(idx_y):\n            u = pref_x[i]\n            v = pair_mapping[u]\n            pref_u = preferences[u]\n            if x in pref_u[:pref_u.index(v)]:\n                unhappy_count += 1\n                break\n\n    return unhappy_count // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job.\n\nThere are `k` workers that you can assign jobs to. Each job should be assigned to **exactly** one worker. The **working time** of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the **maximum working time** of any worker is **minimized**.\n\n_Return the **minimum** possible **maximum working time** of any assignment._\n\n",
          "input": "**Example 1:**\n\n**Input:** jobs = \\[3,2,3\\], k = 3\n**Output:** 3\n**Explanation:** By assigning each person one job, the maximum time is 3.\n\n**Example 2:**\n\n**Input:** jobs = \\[1,2,4,7,8\\], k = 2\n**Output:** 11\n**Explanation:** Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11.\n\n**Constraints:**\n\n*   `1 <= k <= jobs.length <= 12`\n*   `1 <= jobs[i] <= 107`We can select a subset of tasks and assign it to a worker then solve the subproblem on the remaining tasks",
          "output": "def max_achievable_requests(n, requests, idx=0, counts=None):\n    if counts is None:\n        counts = [0] * n\n    if idx == len(requests):\n        if all(count == 0 for count in counts):\n            return 0\n        return 0\n\n    ignored = max_achievable_requests(n, requests, idx+1, counts[:])\n    counts[requests[idx][0]] += 1\n    counts[requests[idx][1]] -= 1\n\n    accepted = 1 + max_achievable_requests(n, requests, idx+1, counts)\n\n    return max(ignored, accepted)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`.\n\nThe answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`.\n\nReturn _an integer array_ `answer` _where_ `answer.length == queries.length` _and_ `answer[i]` _is the answer to the_ `ith` _query._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,2,3,4\\], queries = \\[\\[3,1\\],\\[1,3\\],\\[5,6\\]\\]\n**Output:** \\[3,3,7\\]\n**Explanation:**\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7.\n\n**Example 2:**\n\n**Input:** nums = \\[5,2,4,6,6,3\\], queries = \\[\\[12,4\\],\\[8,1\\],\\[6,3\\]\\]\n**Output:** \\[15,-1,5\\]\n\n**Constraints:**\n\n*   `1 <= nums.length, queries.length <= 105`\n*   `queries[i].length == 2`\n*   `0 <= nums[j], xi, mi <= 109`In problems involving bitwise operations, we often think on the bits level. In this problem, we can think that to maximize the result of an xor operation, we need to maximize the most significant bit, then the next one, and so on. If there's some number in the array that is less than m and whose the most significant bit is different than that of x, then xoring with this number maximizes the most significant bit, so I know this bit in the answer is 1. To check the existence of such numbers and narrow your scope for further bits based on your choice, you can use trie. You can sort the array and the queries, and maintain the trie such that in each query the trie consists exactly of the valid elements.",
          "output": "def can_transform(s, t):\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j == len(t)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` **unique** candies (labeled `1` through `n`) and `k` bags. You are asked to distribute **all** the candies into the bags such that every bag has **at least** one candy.\n\nThere can be multiple ways to distribute the candies. Two ways are considered **different** if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.\n\nFor example, `(1), (2,3)` and `(2), (1,3)` are considered different because candies `2` and `3` in the bag `(2,3)` in the first way are not in the same bag in the second way (they are split between the bags `(2)` and `(1,3)`). However, `(1), (2,3)` and `(3,2), (1)` are considered the same because the candies in each bag are all in the same bags in both ways.\n\nGiven two integers, `n` and `k`, return _the **number** of different ways to distribute the candies_. As the answer may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 2\n**Output:** 3\n**Explanation:** You can distribute 3 candies into 2 bags in 3 ways:\n(1), (2,3)\n(1,2), (3)\n(1,3), (2)\n\n**Example 2:**\n\n**Input:** n = 4, k = 2\n**Output:** 7\n**Explanation:** You can distribute 4 candies into 2 bags in 7 ways:\n(1), (2,3,4)\n(1,2), (3,4)\n(1,3), (2,4)\n(1,4), (2,3)\n(1,2,3), (4)\n(1,2,4), (3)\n(1,3,4), (2)\n\n**Example 3:**\n\n**Input:** n = 20, k = 5\n**Output:** 206085257\n**Explanation:** You can distribute 20 candies into 5 bags in 1881780996 ways. 1881780996 modulo 109 + 7 = 206085257.\n\n**Constraints:**\n\n*   `1 <= k <= n <= 1000`Try to define a recursive approach. For the ith candies, there will be one of the two following cases: If the i - 1 previous candies are already distributed into k bags for the ith candy, you can have k * dp[n - 1][k] ways to distribute the ith candy. We need then to solve the state of (n - 1, k). If the i - 1 previous candies are already distributed into k - 1 bags for the ith candy, you can have dp[n - 1][k - 1] ways to distribute the ith candy. We need then to solve the state of (n - 1, k - 1). This approach will be too slow and will traverse some states more than once. We should use memoization to make the algorithm efficient.",
          "output": "def numTrees(n: int) -> int:\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - 1 - j]\n            dp[i] %= (10**9 + 7)\n\n    return dp[n]\n"
     },
     {
          "instruction": "Write python code for this problem: You are assigned to put some amount of boxes onto **one truck**. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:\n\n*   `numberOfBoxesi` is the number of boxes of type `i`.\n*   `numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.\n\nYou are also given an integer `truckSize`, which is the **maximum** number of **boxes** that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.\n\nReturn _the **maximum** total number of **units** that can be put on the truck._\n\n",
          "input": "**Example 1:**\n\n**Input:** boxTypes = \\[\\[1,3\\],\\[2,2\\],\\[3,1\\]\\], truckSize = 4\n**Output:** 8\n**Explanation:** There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 \\* 3) + (2 \\* 2) + (1 \\* 1) = 8.\n\n**Example 2:**\n\n**Input:** boxTypes = \\[\\[5,10\\],\\[2,5\\],\\[4,7\\],\\[3,9\\]\\], truckSize = 10\n**Output:** 91\n\n**Constraints:**\n\n*   `1 <= boxTypes.length <= 1000`\n*   `1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`\n*   `1 <= truckSize <= 106`If we have space for at least one box, it's always optimal to put the box with the most units. Sort the box types with the number of units per box non-increasingly. Iterate on the box types and take from each type as many as you can.",
          "output": "import heapq\n\ndef busiest_servers(k, arrival, load):\n    server_requests = [0] * k\n    pq = []\n    available_servers = list(range(k))\n\n    for i in range(len(arrival)):\n        while pq and pq[0][0] <= arrival[i]:\n            _, server_id = heapq.heappop(pq)\n            available_servers.append(server_id)\n\n        if available_servers:\n            server_id = available_servers.pop(0)\n            server_requests[server_id] += 1\n            heapq.heappush(pq, (arrival[i] + load[i], server_id))\n\n    max_requests = max(server_requests)\n    return [i for i in range(k) if server_requests[i] == max_requests]\n"
     },
     {
          "instruction": "Write python code for this problem: A **good meal** is a meal that contains **exactly two different food items** with a sum of deliciousness equal to a power of two.\n\nYou can pick **any** two different foods to make a good meal.\n\nGiven an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b`\u200b\u200b\u200b\u200b item of food, return _the number of different **good meals** you can make from this list modulo_ `109 + 7`.\n\nNote that items with different indices are considered different even if they have the same deliciousness value.\n\n",
          "input": "**Example 1:**\n\n**Input:** deliciousness = \\[1,3,5,7,9\\]\n**Output:** 4\n**Explanation:** The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.\n\n**Example 2:**\n\n**Input:** deliciousness = \\[1,1,1,3,3,3,7\\]\n**Output:** 15\n**Explanation:** The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.\n\n**Constraints:**\n\n*   `1 <= deliciousness.length <= 105`\n*   `0 <= deliciousness[i] <= 220`Note that the number of powers of 2 is at most 21 so this turns the problem to a classic find the number of pairs that sum to a certain value but for 21 values You need to use something fasters than the NlogN approach since there is already the log of iterating over the powers so one idea is two pointers",
          "output": "def restoreMatrix(rowSum, colSum):\n    m, n = len(rowSum), len(colSum)\n    result = [[0] * n for _ in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            value = min(rowSum[i], colSum[j])\n            result[i][j] = value\n            rowSum[i] -= value\n            colSum[j] -= value\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A split of an integer array is **good** if:\n\n*   The array is split into three **non-empty** contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.\n*   The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.\n\nGiven `nums`, an array of **non-negative** integers, return _the number of **good** ways to split_ `nums`. As the number may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 1\n**Explanation:** The only good way to split nums is \\[1\\] \\[1\\] \\[1\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,2,2,5,0\\]\n**Output:** 3\n**Explanation:** There are three good ways of splitting nums:\n\\[1\\] \\[2\\] \\[2,2,5,0\\]\n\\[1\\] \\[2,2\\] \\[2,5,0\\]\n\\[1,2\\] \\[2,2\\] \\[5,0\\]\n\n**Example 3:**\n\n**Input:** nums = \\[3,2,1\\]\n**Output:** 0\n**Explanation:** There is no good way to split nums.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 105`\n*   `0 <= nums[i] <= 104`Create a prefix array to efficiently find the sum of subarrays. As we are dividing the array into three subarrays, there are two \"walls\". Iterate over the right wall positions and find where the left wall could be for each right wall position. Use binary search to find the left-most position and right-most position the left wall could be.",
          "output": "def waysToSplit(nums):\n    MOD = 10**9 + 7\n    n = len(nums)\n    prefixSum = [0] * (n + 1)\n    for i in range(n):\n        prefixSum[i + 1] = prefixSum[i] + nums[i]\n    \n    ans = 0\n    left, right = 0, 0\n    for mid in range(1, n - 1):\n        while left + 1 < mid and prefixSum[left + 1] * 2 <= prefixSum[mid]:\n            left += 1\n        while right < mid or (right + 1 < n and prefixSum[right + 1] - prefixSum[mid] <= prefixSum[n] - prefixSum[right + 1]):\n            right += 1\n        if right >= mid and prefixSum[mid] - prefixSum[left] <= prefixSum[right] - prefixSum[mid]:\n            ans = (ans + right - mid + 1) % MOD\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `target` that consists of **distinct** integers and another integer array `arr` that **can** have duplicates.\n\nIn one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.\n\nReturn _the **minimum** number of operations needed to make_ `target` _a **subsequence** of_ `arr`_._\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n",
          "input": "**Example 1:**\n\n**Input:** target = \\[5,1,3\\], `arr` = \\[9,4,2,3,4\\]\n**Output:** 2\n**Explanation:** You can add 5 and 1 in such a way that makes `arr` = \\[5,9,4,1,2,3,4\\], then target will be a subsequence of `arr`.\n\n**Example 2:**\n\n**Input:** target = \\[6,4,8,1,3,2\\], `arr` = \\[4,7,6,2,3,8,6,1\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= target.length, arr.length <= 105`\n*   `1 <= target[i], arr[i] <= 109`\n*   `target` contains no duplicates.The problem can be reduced to computing Longest Common Subsequence between both arrays. Since one of the arrays has distinct elements, we can consider that these elements describe an arrangement of numbers, and we can replace each element in the other array with the index it appeared at in the first array. Then the problem is converted to finding Longest Increasing Subsequence in the second array, which can be done in O(n log n).",
          "output": "from bisect import bisect_left\n\ndef minOperations(target, arr):\n    pos = {x: i for i, x in enumerate(target)}\n\n    dp = []\n    for a in arr:\n        if a in pos:\n            idx = bisect_left(dp, pos[a])\n            if idx == len(dp):\n                dp.append(pos[a])\n            else:\n                dp[idx] = pos[a]\n    return len(target) - len(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a biker going on a road trip. The road trip consists of `n + 1` points at different altitudes. The biker starts his trip on point `0` with altitude equal `0`.\n\nYou are given an integer array `gain` of length `n` where `gain[i]` is the **net gain in altitude** between points `i`\u200b\u200b\u200b\u200b\u200b\u200b and `i + 1` for all (`0 <= i < n)`. Return _the **highest altitude** of a point._\n\n",
          "input": "**Example 1:**\n\n**Input:** gain = \\[-5,1,5,0,-7\\]\n**Output:** 1\n**Explanation:** The altitudes are \\[0,-5,-4,1,1,-6\\]. The highest is 1.\n\n**Example 2:**\n\n**Input:** gain = \\[-4,-3,-2,-1,4,3,2\\]\n**Output:** 0\n**Explanation:** The altitudes are \\[0,-4,-7,-9,-10,-6,-3,-1\\]. The highest is 0.\n\n**Constraints:**\n\n*   `n == gain.length`\n*   `1 <= n <= 100`\n*   `-100 <= gain[i] <= 100`Let's note that the altitude of an element is the sum of gains of all the elements behind it Getting the altitudes can be done by getting the prefix sum array of the given array",
          "output": "def min_operations(n):\n    operations = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        operations += 1\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language.\n\nYou are given an integer `n`, an array `languages`, and an array `friendships` where:\n\n*   There are `n` languages numbered `1` through `n`,\n*   `languages[i]` is the set of languages the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b user knows, and\n*   `friendships[i] = [u\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b, v\u200b\u200b\u200b\u200b\u200b\u200bi]` denotes a friendship between the users `u\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bi`\u200b\u200b\u200b\u200b\u200b and `vi`.\n\nYou can choose **one** language and teach it to some users so that all friends can communicate with each other. Return _the_ _**minimum**_ _number of users you need to teach._\n\nNote that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, languages = \\[\\[1\\],\\[2\\],\\[1,2\\]\\], friendships = \\[\\[1,2\\],\\[1,3\\],\\[2,3\\]\\]\n**Output:** 1\n**Explanation:** You can either teach user 1 the second language or user 2 the first language.\n\n**Example 2:**\n\n**Input:** n = 3, languages = \\[\\[2\\],\\[1,3\\],\\[1,2\\],\\[3\\]\\], friendships = \\[\\[1,4\\],\\[1,2\\],\\[3,4\\],\\[2,3\\]\\]\n**Output:** 2\n**Explanation:** Teach the third language to users 1 and 3, yielding two users to teach.\n\n**Constraints:**\n\n*   `2 <= n <= 500`\n*   `languages.length == m`\n*   `1 <= m <= 500`\n*   `1 <= languages[i].length <= n`\n*   `1 <= languages[i][j] <= n`\n*   `1 <= u\u200b\u200b\u200b\u200b\u200b\u200bi < v\u200b\u200b\u200b\u200b\u200b\u200bi <= languages.length`\n*   `1 <= friendships.length <= 500`\n*   All tuples `(u\u200b\u200b\u200b\u200b\u200bi, v\u200b\u200b\u200b\u200b\u200b\u200bi)` are unique\n*   `languages[i]` contains only unique valuesYou can just use brute force and find out for each language the number of users you need to teach Note that a user can appear in multiple friendships but you need to teach that user only once",
          "output": "from math import atan2, degrees\n\ndef visiblePoints(points, angle, location):\n    angles = [degrees(atan2(y - location[1], x - location[0])) for x, y in points if [x, y] != location]\n    angles.sort()\n    angles += [a + 360 for a in angles]\n    n = len(angles)\n    max_points, j = 0, 0\n    for i in range(2 * n):\n        while angles[i] - angles[j] > angle:\n            j += 1\n        max_points = max(max_points, i - j + 1)\n    return max_points + points.count(location)\n"
     },
     {
          "instruction": "Write python code for this problem: There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always **odd**.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`.\n\nGiven the `encoded` array, return _the original array_ `perm`. It is guaranteed that the answer exists and is unique.\n\n",
          "input": "**Example 1:**\n\n**Input:** encoded = \\[3,1\\]\n**Output:** \\[1,2,3\\]\n**Explanation:** If perm = \\[1,2,3\\], then encoded = \\[1 XOR 2,2 XOR 3\\] = \\[3,1\\]\n\n**Example 2:**\n\n**Input:** encoded = \\[6,5,4,6\\]\n**Output:** \\[2,4,1,5,3\\]\n\n**Constraints:**\n\n*   `3 <= n < 105`\n*   `n` is odd.\n*   `encoded.length == n - 1`Compute the XOR of the numbers between 1 and n, and think about how it can be used. Let it be x. Think why n is odd. perm[0] = x XOR encoded[1] XOR encoded[3] XOR encoded[5] ... perm[i] = perm[i-1] XOR encoded[i-1]",
          "output": "def decode(encoded):\n    n = len(encoded) + 1\n    total_xor = 0\n    \n    for i in range(1, n + 1):\n        total_xor ^= i\n\n    non_first_xor = 0\n    for i in range(1, n - 1, 2):\n        non_first_xor ^= encoded[i]\n\n    perm = [total_xor ^ non_first_xor]\n    for i in range(1, n):\n        perm.append(perm[-1] ^ encoded[i - 1])\n    \n    return perm\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array, `queries`. For each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. As the number of ways may be too large, the answer to the `ith` query is the number of ways **modulo** `109 + 7`.\n\nReturn _an integer array_ `answer` _where_ `answer.length == queries.length`_, and_ `answer[i]` _is the answer to the_ `ith` _query._\n\n",
          "input": "**Example 1:**\n\n**Input:** queries = \\[\\[2,6\\],\\[5,1\\],\\[73,660\\]\\]\n**Output:** \\[4,1,50734910\\]\n**Explanation:** Each query is independent.\n\\[2,6\\]: There are 4 ways to fill an array of size 2 that multiply to 6: \\[1,6\\], \\[2,3\\], \\[3,2\\], \\[6,1\\].\n\\[5,1\\]: There is 1 way to fill an array of size 5 that multiply to 1: \\[1,1,1,1,1\\].\n\\[73,660\\]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.\n\n**Example 2:**\n\n**Input:** queries = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[5,5\\]\\]\n**Output:** \\[1,2,3,10,5\\]\n\n**Constraints:**\n\n*   `1 <= queries.length <= 104`\n*   `1 <= ni, ki <= 104`Prime-factorize ki and count how many ways you can distribute the primes among the ni positions. After prime factorizing ki, suppose there are x amount of prime factor. There are (x + n - 1) choose (n - 1) ways to distribute the x prime factors into k positions, allowing repetitions.",
          "output": "MOD = 10**9 + 7\n\ndef mul(a, b):\n    return (a * b) % MOD\n\ndef ways(n, k, mem):\n    if n == 1:\n        return k\n    if (n_tuple := (n, k)) in mem:\n        return mem[n_tuple]\n    if k == 1:\n        mem[n_tuple] = 1\n        return 1\n    if n > k:\n        mem[n_tuple] = 0\n        return 0\n    res = mul(ways(n, k - 1, mem), n)\n    res = (res - mul(n - 1, ways(n - 1, k - 1, mem)) + MOD) % MOD\n    mem[n_tuple] = res\n    return res\n\ndef waysToFillArray(queries):\n    mem = {}\n    ans = []\n    for q in queries:\n        ans.append(ways(q[0], q[1], mem))\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the number of **distinct** substrings of_ `s`.\n\nA **substring** of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aabbaba \"\n**Output:** 21\n**Explanation:** The set of distinct strings is \\[ \"a \", \"b \", \"aa \", \"bb \", \"ab \", \"ba \", \"aab \", \"abb \", \"bab \", \"bba \", \"aba \", \"aabb \", \"abba \", \"bbab \", \"baba \", \"aabba \", \"abbab \", \"bbaba \", \"aabbab \", \"abbaba \", \"aabbaba \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"abcdefg \"\n**Output:** 28\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of lowercase English letters.\n\n**Follow up:** Can you solve this problem in `O(n)` time complexity?Calculate the prefix hashing array for s. Use the prefix hashing array to calculate the hashing value of each substring. Compare the hashing values to determine the unique substrings. There could be collisions if you use hashing, what about double hashing.",
          "output": "def modifyString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == '?':\n            for c in range(ord('a'), ord('z') + 1):\n                if (i - 1 < 0 or s[i - 1] != chr(c)) and (i + 1 >= len(s) or s[i + 1] != chr(c)):\n                    s[i] = chr(c)\n                    break\n    return ''.join(s)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a **hidden** integer array `arr` that consists of `n` non-negative integers.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.\n\nYou are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.\n\nReturn _the original array_ `arr`. It can be proved that the answer exists and is unique.\n\n",
          "input": "**Example 1:**\n\n**Input:** encoded = \\[1,2,3\\], first = 1\n**Output:** \\[1,0,2,1\\]\n**Explanation:** If arr = \\[1,0,2,1\\], then first = 1 and encoded = \\[1 XOR 0, 0 XOR 2, 2 XOR 1\\] = \\[1,2,3\\]\n\n**Example 2:**\n\n**Input:** encoded = \\[6,2,7,3\\], first = 4\n**Output:** \\[4,2,0,7,4\\]\n\n**Constraints:**\n\n*   `2 <= n <= 104`\n*   `encoded.length == n - 1`\n*   `0 <= encoded[i] <= 105`\n*   `0 <= first <= 105`Since that encoded[i] = arr[i] XOR arr[i+1], then arr[i+1] = encoded[i] XOR arr[i]. Iterate on i from beginning to end, and set arr[i+1] = encoded[i] XOR arr[i].",
          "output": "def minOperations(logs):\n    depth = 0\n    for log in logs:\n        if log == \"../\":\n            if depth > 0:\n                depth -= 1\n        elif log != \"./\":\n            depth += 1\n    return depth\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` **(0-indexed)** of array `source`. Note that you can swap elements at a specific pair of indices **multiple** times and in **any** order.\n\nThe **Hamming distance** of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` **(0-indexed)**.\n\nReturn _the **minimum Hamming distance** of_ `source` _and_ `target` _after performing **any** amount of swap operations on array_ `source`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** source = \\[1,2,3,4\\], target = \\[2,1,4,5\\], allowedSwaps = \\[\\[0,1\\],\\[2,3\\]\\]\n**Output:** 1\n**Explanation:** source can be transformed the following way:\n- Swap indices 0 and 1: source = \\[2,1,3,4\\]\n- Swap indices 2 and 3: source = \\[2,1,4,3\\]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3.\n\n**Example 2:**\n\n**Input:** source = \\[1,2,3,4\\], target = \\[1,3,2,4\\], allowedSwaps = \\[\\]\n**Output:** 2\n**Explanation:** There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.\n\n**Example 3:**\n\n**Input:** source = \\[5,1,2,4,3\\], target = \\[1,5,4,2,3\\], allowedSwaps = \\[\\[0,4\\],\\[4,2\\],\\[1,3\\],\\[1,4\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `n == source.length == target.length`\n*   `1 <= n <= 105`\n*   `1 <= source[i], target[i] <= 105`\n*   `0 <= allowedSwaps.length <= 105`\n*   `allowedSwaps[i].length == 2`\n*   `0 <= ai, bi <= n - 1`\n*   `ai != bi`The source array can be imagined as a graph where each index is a node and each allowedSwaps[i] is an edge. Nodes within the same component can be freely swapped with each other. For each component, find the number of common elements. The elements that are not in common will contribute to the total Hamming distance.",
          "output": "class ThroneInheritance:\n    def __init__(self, kingName: str):\n        self.children = {}\n        self.alive = {kingName: True}\n        self.king = kingName\n\n    def birth(self, parentName: str, childName: str):\n        if parentName not in self.children:\n            self.children[parentName] = []\n        self.children[parentName].append(childName)\n        self.alive[childName] = True\n\n    def death(self, name: str):\n        self.alive[name] = False\n\n    def getInheritanceOrder(self):\n        order = []\n        self.getSuccessor(self.king, order)\n        return order\n\n    def getSuccessor(self, name: str, order: list):\n        if self.alive[name]:\n            order.append(name)\n        for child in self.children.get(name, []):\n            self.getSuccessor(child, order)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`.\n\nYou can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`.\n\nLet `maxLen` be the side length of the **largest** square you can obtain from any of the given rectangles.\n\nReturn _the **number** of rectangles that can make a square with a side length of_ `maxLen`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rectangles = \\[\\[5,8\\],\\[3,9\\],\\[5,12\\],\\[16,5\\]\\]\n**Output:** 3\n**Explanation:** The largest squares you can get from each rectangle are of lengths \\[5,3,5,5\\].\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.\n\n**Example 2:**\n\n**Input:** rectangles = \\[\\[2,3\\],\\[3,7\\],\\[4,3\\],\\[3,7\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= rectangles.length <= 1000`\n*   `rectangles[i].length == 2`\n*   `1 <= li, wi <= 109`\n*   `li != wi`What is the length of the largest square the can be cut out of some rectangle? It'll be equal to min(rectangle.length, rectangle.width). Replace each rectangle with this value. Calculate maxSize by iterating over the given rectangles and maximizing the answer with their values denoted in the first hint. Then iterate again on the rectangles and calculate the number whose values = maxSize.",
          "output": "def numberOfSets(n, k):\n    mod = 10**9 + 7\n    dp = [[0] * (k + 1) for _ in range(n)]\n    presum = [1] * n\n    \n    for j in range(1, k + 1):\n        for i in range(n):\n            dp[i][j] = presum[i]\n            if i > 0:\n                dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= mod\n            presum[i] = (presum[i] + dp[i][j - 1]) % mod\n    \n    return dp[n - 1][k]\n"
     },
     {
          "instruction": "Write python code for this problem: You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` **inclusive** (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.\n\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.\n\nGiven two integers `lowLimit` and `highLimit`, return _the number of balls in the box with the most balls._\n\n",
          "input": "**Example 1:**\n\n**Input:** lowLimit = 1, highLimit = 10\n**Output:** 2\n**Explanation:**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.\n\n**Example 2:**\n\n**Input:** lowLimit = 5, highLimit = 15\n**Output:** 2\n**Explanation:**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.\n\n**Example 3:**\n\n**Input:** lowLimit = 19, highLimit = 28\n**Output:** 2\n**Explanation:**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.\n\n**Constraints:**\n\n*   `1 <= lowLimit <= highLimit <= 105`Note that both lowLimit and highLimit are of small constraints so you can iterate on all nubmer between them You can simulate the boxes by counting for each box the number of balls with digit sum equal to that box number",
          "output": "def maxWidthOfVerticalArea(points):\n    xs = sorted([point[0] for point in points])\n    max_width = 0\n    for i in range(1, len(xs)):\n        max_width = max(max_width, xs[i] - xs[i - 1])\n    return max_width\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the **columns** of the `matrix` in any order.\n\nReturn _the area of the largest submatrix within_ `matrix` _where **every** element of the submatrix is_ `1` _after reordering the columns optimally._\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[0,0,1\\],\\[1,1,1\\],\\[1,0,1\\]\\]\n**Output:** 4\n**Explanation:** You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,0,1,0,1\\]\\]\n**Output:** 3\n**Explanation:** You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3.\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[1,1,0\\],\\[1,0,1\\]\\]\n**Output:** 2\n**Explanation:** Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m * n <= 105`\n*   `matrix[i][j]` is either `0` or `1`.For each column, find the number of consecutive ones ending at each position. For each row, sort the cumulative ones in non-increasing order and \"fit\" the largest submatrix.",
          "output": "def canMouseWin(grid: List[List[str]], catJump: int, mouseJump: int) -> bool:\n    rows, cols = len(grid), len(grid[0])\n    cat_r = cat_c = mouse_r = mouse_c = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 'C':\n                cat_r, cat_c = r, c\n            elif grid[r][c] == 'M':\n                mouse_r, mouse_c = r, c\n\n    dirs = [-1, 0, 1, 0, -1]\n\n    def dfs(r_m, c_m, r_c, c_c, cnt, dst_m_c):\n        if cnt >= 100:\n            return False\n        if r_m < 0 or r_m >= rows or c_m < 0 or c_m >= cols:\n            return False\n        if r_c < 0 or r_c >= rows or c_c < 0 or c_c >= cols:\n            return True\n        if grid[r_m][c_m] == 'F' or cnt != dst_m_c:\n            return True\n        elif grid[r_m][c_m] == '#' or cnt + 1 == dst_m_c:\n            return False\n\n        res = False\n        for i in range(4):\n            jump = catJump if dst_m_c == cnt else mouseJump\n            res |= not dfs(r_m + jump * dirs[i], c_m + jump * dirs[i + 1], r_c + dirs[i] * dirs[(i + 2) % 4], c_c + dirs[i+1] * dirs[(i + 3) % 4], cnt + 1, dst_m_c)\n            if jump == 1:\n                break\n\n        return res\n\n    return dfs(mouse_r, mouse_c, cat_r, cat_c, 0, abs(cat_r - mouse_r) + abs(cat_c - mouse_c))\n"
     },
     {
          "instruction": "Write python code for this problem: An array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.\n\nFor example, consider `0`\\-indexing:\n\n*   `[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`.\n*   `[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`.\n\nA subarray is a contiguous subsequence of the array.\n\nGiven an integer array `nums` of **distinct** integers, return the **largest** subarray of `nums` of length `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,4,5,2,3\\], k = 3\n**Output:** \\[5,2,3\\]\n**Explanation:** The subarrays of size 3 are: \\[1,4,5\\], \\[4,5,2\\], and \\[5,2,3\\].\nOf these, \\[5,2,3\\] is the largest.\n\n**Example 2:**\n\n**Input:** nums = \\[1,4,5,2,3\\], k = 4\n**Output:** \\[4,5,2,3\\]\n**Explanation:** The subarrays of size 4 are: \\[1,4,5,2\\], and \\[4,5,2,3\\].\nOf these, \\[4,5,2,3\\] is the largest.\n\n**Example 3:**\n\n**Input:** nums = \\[1,4,5,2,3\\], k = 1\n**Output:** \\[5\\]\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`\n*   All the integers of `nums` are **unique**.\n\n**Follow up:** What if the integers in `nums` are not distinct?Search for the largest integer in the range [0, n - k] This integer is the first element in the subarray. You should take it with the k - 1 elements after it.",
          "output": "class ParkingSystem:\n\n    def __init__(self, big: int, medium: int, small: int):\n        self.slots = [big, medium, small]\n\n    def addCar(self, carType: int) -> bool:\n        if self.slots[carType - 1] > 0:\n            self.slots[carType - 1] -= 1\n            return True\n        else:\n            return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. The unique elements of an array are the elements that appear **exactly once** in the array.\n\nReturn _the **sum** of all the unique elements of_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,2\\]\n**Output:** 4\n**Explanation:** The unique elements are \\[1,3\\], and the sum is 4.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1,1\\]\n**Output:** 0\n**Explanation:** There are no unique elements, and the sum is 0.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5\\]\n**Output:** 15\n**Explanation:** The unique elements are \\[1,2,3,4,5\\], and the sum is 15.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`Use a dictionary to count the frequency of each number.",
          "output": "def bestTeamScore(scores, ages):\n    players = sorted(zip(ages, scores))\n    n = len(players)\n    dp = [0] * n\n    best_score = 0\n    \n    for i in range(n):\n        dp[i] = players[i][1]\n        for j in range(i):\n            if players[i][1] >= players[j][1]:\n                dp[i] = max(dp[i], dp[j] + players[i][1])\n        best_score = max(best_score, dp[i])\n    \n    return best_score\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. The **absolute sum** of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`.\n\nReturn _the **maximum** absolute sum of any **(possibly empty)** subarray of_ `nums`.\n\nNote that `abs(x)` is defined as follows:\n\n*   If `x` is a negative integer, then `abs(x) = -x`.\n*   If `x` is a non-negative integer, then `abs(x) = x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,-3,2,3,-4\\]\n**Output:** 5\n**Explanation:** The subarray \\[2,3\\] has absolute sum = abs(2+3) = abs(5) = 5.\n\n**Example 2:**\n\n**Input:** nums = \\[2,-5,1,-4,3,-2\\]\n**Output:** 8\n**Explanation:** The subarray \\[-5,1,-4\\] has absolute sum = abs(-5+1-4) = abs(-8) = 8.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`What if we asked for maximum sum, not absolute sum? It's a standard problem that can be solved by Kadane's algorithm. The key idea is the max absolute sum will be either the max sum or the min sum. So just run kadane twice, once calculating the max sum and once calculating the min sum.",
          "output": "def maxAbsoluteSum(nums):\n    max_sum = max_end = min_sum = min_end = 0\n    for num in nums:\n        max_end = max(max_end + num, num)\n        min_end = min(min_end + num, num)\n        max_sum = max(max_sum, max_end)\n        min_sum = min(min_sum, min_end)\n    return max(max_sum, -min_sum)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:\n\n1.  Pick a **non-empty** prefix from the string `s` where all the characters in the prefix are equal.\n2.  Pick a **non-empty** suffix from the string `s` where all the characters in this suffix are equal.\n3.  The prefix and the suffix should not intersect at any index.\n4.  The characters from the prefix and suffix must be the same.\n5.  Delete both the prefix and the suffix.\n\nReturn _the **minimum length** of_ `s` _after performing the above operation any number of times (possibly zero times)_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"ca \"\n**Output:** 2\n**Explanation:** You can't remove any characters, so the string stays as is.\n\n**Example 2:**\n\n**Input:** s =  \"cabaabac \"\n**Output:** 0\n**Explanation:** An optimal sequence of operations is:\n- Take prefix =  \"c \" and suffix =  \"c \" and remove them, s =  \"abaaba \".\n- Take prefix =  \"a \" and suffix =  \"a \" and remove them, s =  \"baab \".\n- Take prefix =  \"b \" and suffix =  \"b \" and remove them, s =  \"aa \".\n- Take prefix =  \"a \" and suffix =  \"a \" and remove them, s =  \" \".\n\n**Example 3:**\n\n**Input:** s =  \"aabccabba \"\n**Output:** 3\n**Explanation:** An optimal sequence of operations is:\n- Take prefix =  \"aa \" and suffix =  \"a \" and remove them, s =  \"bccabb \".\n- Take prefix =  \"b \" and suffix =  \"bb \" and remove them, s =  \"cca \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` only consists of characters `'a'`, `'b'`, and `'c'`.If both ends have distinct characters, no more operations can be made. Otherwise, the only operation is to remove all of the same characters from both ends. We will do this as many times as we can. Note that if the length is equal 1 the answer is 1",
          "output": "def minimumLength(s: str) -> int:\n    if not s: return 0\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] != s[j]: break\n        remove_char = s[i]\n        while i < len(s) and s[i] == remove_char: i += 1\n        while j >= 0 and s[j] == remove_char: j -= 1\n    return max(0, j - i + 1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi` and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend.\n\nYou can only attend one event at a time. If you choose to attend an event, you must attend the **entire** event. Note that the end day is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends on the same day.\n\nReturn _the **maximum sum** of values that you can receive by attending events._\n\n",
          "input": "**Example 1:**\n\n**Input:** events = \\[\\[1,2,4\\],\\[3,4,3\\],\\[2,3,1\\]\\], k = 2\n**Output:** 7\n**Explanation:** Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\n\n**Example 2:**\n\n**Input:** events = \\[\\[1,2,4\\],\\[3,4,3\\],\\[2,3,10\\]\\], k = 2\n**Output:** 10\n**Explanation:** Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do **not** have to attend k events.\n\n**Example 3:**\n\n**Input:** events = \\[\\[1,1,1\\],\\[2,2,2\\],\\[3,3,3\\],\\[4,4,4\\]\\], k = 3\n**Output:** 9\n**Explanation:** Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.\n\n**Constraints:**\n\n*   `1 <= k <= events.length`\n*   `1 <= k * events.length <= 106`\n*   `1 <= startDayi <= endDayi <= 109`\n*   `1 <= valuei <= 106`Sort the events by its startTime. For every event, you can either choose it and consider the next event available, or you can ignore it. You can efficiently find the next event that is available using binary search.",
          "output": "def slowestKey(releaseTimes, keysPressed):\n    max_key = keysPressed[0]\n    max_duration = releaseTimes[0]\n    for i in range(1, len(releaseTimes)):\n        duration = releaseTimes[i] - releaseTimes[i - 1]\n        if duration > max_duration or (duration == max_duration and keysPressed[i] > max_key):\n            max_key = keysPressed[i]\n            max_duration = duration\n    return max_key\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `time` in the form of `hh:mm`, where some of the digits in the string are hidden (represented by `?`).\n\nThe valid times are those inclusively between `00:00` and `23:59`.\n\nReturn _the latest valid time you can get from_ `time` _by replacing the hidden_ _digits_.\n\n",
          "input": "**Example 1:**\n\n**Input:** time =  \"2?:?0 \"\n**Output:**  \"23:50 \"\n**Explanation:** The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.\n\n**Example 2:**\n\n**Input:** time =  \"0?:3? \"\n**Output:**  \"09:39 \"\n\n**Example 3:**\n\n**Input:** time =  \"1?:22 \"\n**Output:**  \"19:22 \"\n\n**Constraints:**\n\n*   `time` is in the format `hh:mm`.\n*   It is guaranteed that you can produce a valid time from the given string.Trying out all possible solutions from biggest to smallest would fit in the time limit. To check if the solution is okay, you need to find out if it's valid and matches every character",
          "output": "def maximumTime(time: str) -> str:\n    time_list = list(time)\n    if time_list[0] == '?':\n        time_list[0] = '2' if time_list[1] <= '3' or time_list[1] == '?' else '1'\n    if time_list[1] == '?':\n        time_list[1] = '3' if time_list[0] == '2' else '9'\n    if time_list[3] == '?':\n        time_list[3] = '5'\n    if time_list[4] == '?':\n        time_list[4] = '9'\n    return \"\".join(time_list)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to **any lowercase letter**.\n\nYour goal is to satisfy **one** of the following three conditions:\n\n*   **Every** letter in `a` is **strictly less** than **every** letter in `b` in the alphabet.\n*   **Every** letter in `b` is **strictly less** than **every** letter in `a` in the alphabet.\n*   **Both** `a` and `b` consist of **only one** distinct letter.\n\nReturn _the **minimum** number of operations needed to achieve your goal._\n\n",
          "input": "**Example 1:**\n\n**Input:** a =  \"aba \", b =  \"caa \"\n**Output:** 2\n**Explanation:** Consider the best way to make each condition true:\n1) Change b to  \"ccc \" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to  \"bbb \" and b to  \"aaa \" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to  \"aaa \" and b to  \"aaa \" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3).\n\n**Example 2:**\n\n**Input:** a =  \"dabadd \", b =  \"cda \"\n**Output:** 3\n**Explanation:** The best way is to make condition 1 true by changing b to  \"eee \".\n\n**Constraints:**\n\n*   `1 <= a.length, b.length <= 105`\n*   `a` and `b` consist only of lowercase letters.Iterate on each letter in the alphabet, and check the smallest number of operations needed to make it one of the following: the largest letter in a and smaller than the smallest one in b, vice versa, or let a and b consist only of this letter. For the first 2 conditions, take care that you can only change characters to lowercase letters, so you can't make 'z' the smallest letter in one of the strings or 'a' the largest letter in one of them.",
          "output": "def maxDepth(s: str) -> int:\n    depth, max_depth = 0, 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            depth -= 1\n        max_depth = max(max_depth, depth)\n    return max_depth\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`.\n\nThe **value** of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` **(0-indexed)**.\n\nFind the `kth` largest value **(1-indexed)** of all the coordinates of `matrix`.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[5,2\\],\\[1,6\\]\\], k = 1\n**Output:** 7\n**Explanation:** The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[5,2\\],\\[1,6\\]\\], k = 2\n**Output:** 5\n**Explanation:** The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[5,2\\],\\[1,6\\]\\], k = 3\n**Output:** 4\n**Explanation:** The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 1000`\n*   `0 <= matrix[i][j] <= 106`\n*   `1 <= k <= m * n`Use a 2D prefix sum to precalculate the xor-sum of the upper left submatrix.",
          "output": "def maximalNetworkRank(n, roads):\n    degree = [0] * n\n    s = set()\n    \n    for road in roads:\n        degree[road[0]] += 1\n        degree[road[1]] += 1\n        s.add(tuple(sorted(road)))\n    \n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = max(ans, degree[i] + degree[j] - (1 if (i, j) in s else 0))\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. You are asked to place `n` boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\n\n*   You can place the boxes anywhere on the floor.\n*   If box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` **must** either be adjacent to another box or to a wall.\n\nGiven an integer `n`, return _the **minimum** possible number of boxes touching the floor._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3\n**Output:** 3\n**Explanation:** The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n\n**Example 2:**\n\n**Input:** n = 4\n**Output:** 3\n**Explanation:** The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n\n**Example 3:**\n\n**Input:** n = 10\n**Output:** 6\n**Explanation:** The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side.\n\n**Constraints:**\n\n*   `1 <= n <= 109`Suppose We can put m boxes on the floor, within all the ways to put the boxes, what\u2019s the maximum number of boxes we can put in? The first box should always start in the corner",
          "output": "def check_palindrome_formation(a: str, b: str) -> bool:\n    def is_palindrome(s: str, left: int, right: int) -> bool:\n        while left < right:\n            if s[left] != s[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\n    i, j = 0, len(a) - 1\n    while i < j:\n        if a[i] != b[j]:\n            return is_palindrome(a, i, j) or is_palindrome(b, i, j)\n        i += 1\n        j -= 1\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be **multiple** edges between two nodes, and the graph may not be connected.\n\nImplement the `DistanceLimitedPathsExist` class:\n\n*   `DistanceLimitedPathsExist(int n, int[][] edgeList)` Initializes the class with an undirected graph.\n*   `boolean query(int p, int q, int limit)` Returns `true` if there exists a path from `p` to `q` such that each edge on the path has a distance **strictly less than** `limit`, and otherwise `false`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"DistanceLimitedPathsExist \",  \"query \",  \"query \",  \"query \",  \"query \"\\]\n\\[\\[6, \\[\\[0, 2, 4\\], \\[0, 3, 2\\], \\[1, 2, 3\\], \\[2, 3, 1\\], \\[4, 5, 5\\]\\]\\], \\[2, 3, 2\\], \\[1, 3, 3\\], \\[2, 0, 3\\], \\[0, 5, 6\\]\\]\n**Output**\n\\[null, true, false, true, false\\]\n\n**Explanation**\nDistanceLimitedPathsExist distanceLimitedPathsExist = new DistanceLimitedPathsExist(6, \\[\\[0, 2, 4\\], \\[0, 3, 2\\], \\[1, 2, 3\\], \\[2, 3, 1\\], \\[4, 5, 5\\]\\]);\ndistanceLimitedPathsExist.query(2, 3, 2); // return true. There is an edge from 2 to 3 of distance 1, which is less than 2.\ndistanceLimitedPathsExist.query(1, 3, 3); // return false. There is no way to go from 1 to 3 with distances **strictly** less than 3.\ndistanceLimitedPathsExist.query(2, 0, 3); // return true. There is a way to go from 2 to 0 with distance < 3: travel from 2 to 3 to 0.\ndistanceLimitedPathsExist.query(0, 5, 6); // return false. There are no paths from 0 to 5.\n\n`**Constraints:**`\n\n*   `2 <= n <= 104`\n*   `0 <= edgeList.length <= 104`\n*   `edgeList[i].length == 3`\n*   `0 <= ui, vi, p, q <= n-1`\n*   `ui != vi`\n*   `p != q`\n*   `1 <= disi, limit <= 109`\n*   At most `104` calls will be made to `query`.Find the minimum spanning tree of the given graph. Root the tree in an arbitrary node and calculate the maximum weight of the edge from each node to the chosen root. To answer a query, find the lca between the two nodes, and find the maximum weight from each of the query nodes to their lca and compare it to the given limit.",
          "output": "class DistanceLimitedPathsExist:\n    def __init__(self, n: int, edgeList: List[List[int]]):\n        self.id = list(range(n))\n        edgeList.sort(key=lambda x: x[2])\n        self.mst = []\n        for edge in edgeList:\n            p, q = self.find(edge[0]), self.find(edge[1])\n            if p != q:\n                self.id[p] = self.id[q]\n                self.mst.append(edge)\n\n    def query(self, p: int, q: int, limit: int) -> bool:\n        for edge in self.mst:\n            if edge[2] >= limit:\n                break\n            p, q = self.union_set(edge[0], p), self.union_set(edge[1], q)\n            if p == q:\n                return True\n        return False\n\n    def find(self, x: int) -> int:\n        if self.id[x] != x:\n            self.id[x] = self.find(self.id[x])\n        return self.id[x]\n\n    def union_set(self, x: int, y: int) -> int:\n        px, py = self.find(x), self.find(y)\n        if px != py:\n            self.id[px] = py\n        return py\n"
     },
     {
          "instruction": "Write python code for this problem: There is an integer array `nums` that consists of `n` **unique** elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`.\n\nYou are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`.\n\nIt is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear **in any order**.\n\nReturn _the original array_ `nums`_. If there are multiple solutions, return **any of them**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** adjacentPairs = \\[\\[2,1\\],\\[3,4\\],\\[3,2\\]\\]\n**Output:** \\[1,2,3,4\\]\n**Explanation:** This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs\\[i\\] may not be in left-to-right order.\n\n**Example 2:**\n\n**Input:** adjacentPairs = \\[\\[4,-2\\],\\[1,4\\],\\[-3,1\\]\\]\n**Output:** \\[-2,4,1,-3\\]\n**Explanation:** There can be negative numbers.\nAnother solution is \\[-3,1,4,-2\\], which would also be accepted.\n\n**Example 3:**\n\n**Input:** adjacentPairs = \\[\\[100000,-100000\\]\\]\n**Output:** \\[100000,-100000\\]\n\n**Constraints:**\n\n*   `nums.length == n`\n*   `adjacentPairs.length == n - 1`\n*   `adjacentPairs[i].length == 2`\n*   `2 <= n <= 105`\n*   `-105 <= nums[i], ui, vi <= 105`\n*   There exists some `nums` that has `adjacentPairs` as its pairs.Find the first element of nums - it will only appear once in adjacentPairs. The adjacent pairs are like edges of a graph. Perform a depth-first search from the first element.",
          "output": "def count_substrings_with_one_difference(s, t):\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(t)):\n            differences = 0\n            k = 0\n            while i + k < len(s) and j + k < len(t):\n                if s[i + k] != t[j + k]:\n                    differences += 1\n                if differences == 2:\n                    break\n                if differences == 1:\n                    count += 1\n                k += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return `true` _if it is possible to split the string_ `s` _into three **non-empty** palindromic substrings. Otherwise, return_ `false`.\u200b\u200b\u200b\u200b\u200b\n\nA string is said to be palindrome if it the same string when reversed.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcbdd \"\n**Output:** true\n**Explanation: ** \"abcbdd \" =  \"a \" +  \"bcb \" +  \"dd \", and all three substrings are palindromes.\n\n**Example 2:**\n\n**Input:** s =  \"bcbddxy \"\n**Output:** false\n**Explanation:** s cannot be split into 3 palindromes.\n\n**Constraints:**\n\n*   `3 <= s.length <= 2000`\n*   `s`\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.Preprocess checking palindromes in O(1) Note that one string is a prefix and another one is a suffix you can try brute forcing the rest",
          "output": "def is_palindrome(s, start, end):\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\ndef check_partitioning(s):\n    n = len(s)\n    for i in range(0, n - 2):\n        if is_palindrome(s, 0, i):\n            for j in range(i + 1, n - 1):\n                if is_palindrome(s, i + 1, j) and is_palindrome(s, j + 1, n - 1):\n                    return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **(0-indexed)** array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the `ith` type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`.\n\nYou play a game with the following rules:\n\n*   You start eating candies on day `**0**`.\n*   You **cannot** eat **any** candy of type `i` unless you have eaten **all** candies of type `i - 1`.\n*   You must eat **at least** **one** candy per day until you have eaten all the candies.\n\nConstruct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating **more than** `dailyCapi` candies on **any** day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.\n\nReturn _the constructed array_ `answer`.\n\n",
          "input": "**Example 1:**\n\n**Input:** candiesCount = \\[7,4,5,3,8\\], queries = \\[\\[0,2,2\\],\\[4,2,4\\],\\[2,13,1000000000\\]\\]\n**Output:** \\[true,false,true\\]\n**Explanation:**\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n2- You can eat at most 4 candies each day.\n   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\n   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.\n\n**Example 2:**\n\n**Input:** candiesCount = \\[5,2,6,4,1\\], queries = \\[\\[3,1,2\\],\\[4,10,3\\],\\[3,10,100\\],\\[4,100,30\\],\\[1,3,1\\]\\]\n**Output:** \\[false,true,true,false,false\\]\n\n**Constraints:**\n\n*   `1 <= candiesCount.length <= 105`\n*   `1 <= candiesCount[i] <= 105`\n*   `1 <= queries.length <= 105`\n*   `queries[i].length == 3`\n*   `0 <= favoriteTypei < candiesCount.length`\n*   `0 <= favoriteDayi <= 109`\n*   `1 <= dailyCapi <= 109`The query is true if and only if your favorite day is in between the earliest and latest possible days to eat your favorite candy. To get the earliest day, you need to eat dailyCap candies every day. To get the latest day, you need to eat 1 candy every day. The latest possible day is the total number of candies with a smaller type plus the number of your favorite candy minus 1. The earliest possible day that you can eat your favorite candy is the total number of candies with a smaller type divided by dailyCap.",
          "output": "def num_ways(words, target):\n    n, m = len(words), len(target)\n    MOD = 10**9 + 7\n    cnt = [0] * 26\n    for word in words:\n        for ch in word:\n            cnt[ord(ch) - ord('a')] += 1\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for ch in target:\n        for i in range(m - 1, -1, -1):\n            dp[i + 1] += dp[i] * cnt[ord(ch) - ord('a')]\n            dp[i + 1] %= MOD\n    return dp[m]\n"
     },
     {
          "instruction": "Write python code for this problem: A string `s` is **nice** if, for every letter of the alphabet that `s` contains, it appears **both** in uppercase and lowercase. For example, `\"abABB \"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA \"` is not because `'b'` appears, but `'B'` does not.\n\nGiven a string `s`, return _the longest **substring** of `s` that is **nice**. If there are multiple, return the substring of the **earliest** occurrence. If there are none, return an empty string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"YazaAay \"\n**Output:**  \"aAa \"\n**Explanation: ** \"aAa \" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n \"aAa \" is the longest nice substring.\n\n**Example 2:**\n\n**Input:** s =  \"Bb \"\n**Output:**  \"Bb \"\n**Explanation:**  \"Bb \" is a nice string because both 'B' and 'b' appear. The whole string is a substring.\n\n**Example 3:**\n\n**Input:** s =  \"c \"\n**Output:**  \" \"\n**Explanation:** There are no nice substrings.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of uppercase and lowercase English letters.Brute force and check each substring to see if it is nice.",
          "output": "def longestNiceSubstring(s: str) -> str:\n    n = len(s)\n    result = \"\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            is_nice = True\n            for ch in range(ord('A'), ord('Z') + 1):\n                upper = chr(ch) in s[i:j+1]\n                lower = chr(ch + 32) in s[i:j+1]\n                if (upper and not lower) or (not upper and lower):\n                    is_nice = False\n                    break\n            if is_nice and j - i + 1 > len(result):\n                result = s[i:j+1]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`.\n\nYou are asked if you can choose `n` **disjoint** subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (**0-indexed**), and if `i > 0`, the `(i-1)th` subarray appears **before** the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`).\n\nReturn `true` _if you can do this task, and_ `false` _otherwise_.\n\nNote that the subarrays are **disjoint** if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** groups = \\[\\[1,-1,-1\\],\\[3,-2,0\\]\\], nums = \\[1,-1,0,1,-1,-1,3,-2,0\\]\n**Output:** true\n**Explanation:** You can choose the 0th subarray as \\[1,-1,0,**1,-1,-1**,3,-2,0\\] and the 1st one as \\[1,-1,0,1,-1,-1,**3,-2,0**\\].\nThese subarrays are disjoint as they share no common nums\\[k\\] element.\n\n**Example 2:**\n\n**Input:** groups = \\[\\[10,-2\\],\\[1,2,3,4\\]\\], nums = \\[1,2,3,4,10,-2\\]\n**Output:** false\n**Explanation:** Note that choosing the subarrays \\[**1,2,3,4**,10,-2\\] and \\[1,2,3,4,**10,-2**\\] is incorrect because they are not in the same order as in groups.\n\\[10,-2\\] must come before \\[1,2,3,4\\].\n\n**Example 3:**\n\n**Input:** groups = \\[\\[1,2,3\\],\\[3,4\\]\\], nums = \\[7,7,1,2,3,4,7,7\\]\n**Output:** false\n**Explanation:** Note that choosing the subarrays \\[7,7,**1,2,3**,4,7,7\\] and \\[7,7,1,2,**3,4**,7,7\\] is invalid because they are not disjoint.\nThey share a common elements nums\\[4\\] (0-indexed).\n\n**Constraints:**\n\n*   `groups.length == n`\n*   `1 <= n <= 103`\n*   `1 <= groups[i].length, sum(groups[i].length) <= 103`\n*   `1 <= nums.length <= 103`\n*   `-107 <= groups[i][j], nums[k] <= 107`When we use a subarray, the room for the next subarrays will be the suffix after the used subarray. If we can match a group with multiple subarrays, we should choose the first one, as this will just leave the largest room for the next subarrays.",
          "output": "def max_k_repeating(sequence, word):\n    max_k = 0\n    seq_length = len(sequence)\n    word_length = len(word)\n    for i in range(seq_length - word_length + 1):\n        k = 0\n        while sequence[i:i + word_length * (k + 1)] == word * (k + 1):\n            k += 1\n        max_k = max(max_k, k)\n    return max_k\n"
     },
     {
          "instruction": "Write python code for this problem: There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the **root** of the tree is node `0`.\n\nTo represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.\n\nTwo values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`.\n\nAn ancestor of a node `i` is any other node on the shortest path from node `i` to the **root**. A node is **not** considered an ancestor of itself.\n\nReturn _an array_ `ans` _of size_ `n`, _where_ `ans[i]` _is the closest ancestor to node_ `i` _such that_ `nums[i]` _and_ `nums[ans[i]]` are **coprime**, or `-1` _if there is no such ancestor_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,3,2\\], edges = \\[\\[0,1\\],\\[1,2\\],\\[1,3\\]\\]\n**Output:** \\[-1,0,0,1\\]\n**Explanation:** In the above figure, each node's value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.\n\n**Example 2:**\n\n**Input:** nums = \\[5,6,10,2,3,6,15\\], edges = \\[\\[0,1\\],\\[0,2\\],\\[1,3\\],\\[1,4\\],\\[2,5\\],\\[2,6\\]\\]\n**Output:** \\[-1,0,-1,0,0,0,-1\\]\n\n**Constraints:**\n\n*   `nums.length == n`\n*   `1 <= nums[i] <= 50`\n*   `1 <= n <= 105`\n*   `edges.length == n - 1`\n*   `edges[j].length == 2`\n*   `0 <= uj, vj < n`\n*   `uj != vj`Note that for a node, it's not optimal to consider two nodes with the same value. Note that the values are small enough for you to iterate over them instead of iterating over the parent nodes.",
          "output": "from bisect import bisect_left\n\ndef minimum_mountain_removals(nums):\n    n = len(nums)\n    left, right = [0] * n, [0] * n\n    for i in range(n):\n        left[i] = bisect_left(left[:i], nums[i])\n        right[n - 1 - i] = bisect_left(right[n - i:], nums[n - 1 - i])\n\n    return n - max(left[i] + right[i] for i in range(1, n - 1)) - 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer matrix `isWater` of size `m x n` that represents a map of **land** and **water** cells.\n\n*   If `isWater[i][j] == 0`, cell `(i, j)` is a **land** cell.\n*   If `isWater[i][j] == 1`, cell `(i, j)` is a **water** cell.\n\nYou must assign each cell a height in a way that follows these rules:\n\n*   The height of each cell must be non-negative.\n*   If the cell is a **water** cell, its height must be `0`.\n*   Any two adjacent cells must have an absolute height difference of **at most** `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\nFind an assignment of heights such that the maximum height in the matrix is **maximized**.\n\nReturn _an integer matrix_ `height` _of size_ `m x n` _where_ `height[i][j]` _is cell_ `(i, j)`_'s height. If there are multiple solutions, return **any** of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** isWater = \\[\\[0,1\\],\\[0,0\\]\\]\n**Output:** \\[\\[1,0\\],\\[2,1\\]\\]\n**Explanation:** The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.\n\n**Example 2:**\n\n**Input:** isWater = \\[\\[0,0,1\\],\\[1,0,0\\],\\[0,0,0\\]\\]\n**Output:** \\[\\[1,1,0\\],\\[0,1,1\\],\\[1,2,2\\]\\]\n**Explanation:** A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\n\n**Constraints:**\n\n*   `m == isWater.length`\n*   `n == isWater[i].length`\n*   `1 <= m, n <= 1000`\n*   `isWater[i][j]` is `0` or `1`.\n*   There is at least **one** water cell.Set each water cell to be 0. The height of each cell is limited by its closest water cell. Perform a multi-source BFS with all the water cells as sources.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef mergeInBetween(list1, a, b, list2):\n    prev, curr = None, list1\n    index = 0\n    \n    while curr:\n        if index == a:\n            last = list2\n            while last.next:\n                last = last.next\n            prev.next = list2\n            last.next = curr.next\n            break\n            \n        if index > a and index < b:\n            curr = curr.next\n        else:\n            prev = curr\n            curr = curr.next\n\n        index += 1\n\n    return list1\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array `nums`, return `true` _if the array was originally sorted in non-decreasing order, then rotated **some** number of positions (including zero)_. Otherwise, return `false`.\n\nThere may be **duplicates** in the original array.\n\n**Note:** An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,4,5,1,2\\]\n**Output:** true\n**Explanation:** \\[1,2,3,4,5\\] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: \\[3,4,5,1,2\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,1,3,4\\]\n**Output:** false\n**Explanation:** There is no sorted array once rotated that can make nums.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** true\n**Explanation:** \\[1,2,3\\] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`Brute force and check if it is possible for a sorted array to start from each position.",
          "output": "def check_arithmetic_subarrays(nums, l, r):\n    results = []\n    for i in range(len(l)):\n        subarray = sorted(nums[l[i]:r[i] + 1])\n        is_arithmetic = True\n        diff = subarray[1] - subarray[0]\n        for j in range(1, len(subarray) - 1):\n            if subarray[j + 1] - subarray[j] != diff:\n                is_arithmetic = False\n                break\n        results.append(is_arithmetic)\n    return results\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a solitaire game with **three piles** of stones of sizes `a`\u200b\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two **different non-empty** piles, take one stone from each, and add `1` point to your score. The game stops when there are **fewer than two non-empty** piles (meaning there are no more available moves).\n\nGiven three integers `a`\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b, return _the_ **_maximum_** _**score** you can get._\n\n",
          "input": "**Example 1:**\n\n**Input:** a = 2, b = 4, c = 6\n**Output:** 6\n**Explanation:** The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.\n\n**Example 2:**\n\n**Input:** a = 4, b = 4, c = 6\n**Output:** 7\n**Explanation:** The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.\n\n**Example 3:**\n\n**Input:** a = 1, b = 8, c = 8\n**Output:** 8\n**Explanation:** One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.\n\n**Constraints:**\n\n*   `1 <= a, b, c <= 105`It's optimal to always remove one stone from the biggest 2 piles Note that the limits are small enough for simulation",
          "output": "import heapq\nfrom typing import List\n\ndef minimumEffortPath(heights: List[List[int]]) -> int:\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    rows = len(heights)\n    cols = len(heights[0])\n    efforts = [[float('inf')] * cols for _ in range(rows)]\n\n    q = [(0, 0, 0)]\n    efforts[0][0] = 0\n    \n    while q:\n        effort, x, y = heapq.heappop(q)\n        \n        if x == rows - 1 and y == cols - 1:\n            return effort\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols:\n                new_effort = max(effort, abs(heights[nx][ny] - heights[x][y]))\n                if new_effort < efforts[nx][ny]:\n                    efforts[nx][ny] = new_effort\n                    heapq.heappush(q, (new_effort, nx, ny))\n    \n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose **one** of the following options:\n\n*   If `word1` is non-empty, append the **first** character in `word1` to `merge` and delete it from `word1`.\n    *   For example, if `word1 = \"abc \"` and `merge = \"dv \"`, then after choosing this operation, `word1 = \"bc \"` and `merge = \"dva \"`.\n*   If `word2` is non-empty, append the **first** character in `word2` to `merge` and delete it from `word2`.\n    *   For example, if `word2 = \"abc \"` and `merge = \" \"`, then after choosing this operation, `word2 = \"bc \"` and `merge = \"a \"`.\n\nReturn _the lexicographically **largest**_ `merge` _you can construct_.\n\nA string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `\"abcd \"` is lexicographically larger than `\"abcc \"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 =  \"cabaa \", word2 =  \"bcaaa \"\n**Output:**  \"cbcabaaaaa \"\n**Explanation:** One way to get the lexicographically largest merge is:\n- Take from word1: merge =  \"c \", word1 =  \"abaa \", word2 =  \"bcaaa \"\n- Take from word2: merge =  \"cb \", word1 =  \"abaa \", word2 =  \"caaa \"\n- Take from word2: merge =  \"cbc \", word1 =  \"abaa \", word2 =  \"aaa \"\n- Take from word1: merge =  \"cbca \", word1 =  \"baa \", word2 =  \"aaa \"\n- Take from word1: merge =  \"cbcab \", word1 =  \"aa \", word2 =  \"aaa \"\n- Append the remaining 5 a's from word1 and word2 at the end of merge.\n\n**Example 2:**\n\n**Input:** word1 =  \"abcabc \", word2 =  \"abdcaba \"\n**Output:**  \"abdcabcabcaba \"\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 3000`\n*   `word1` and `word2` consist only of lowercase English letters.Build the result character by character. At each step, you choose a character from one of the two strings. If the next character of the first string is larger than that of the second string, or vice versa, it's optimal to use the larger one. If both are equal, think of a criteria that lets you decide which string to consume the next character from. You should choose the next character from the larger string.",
          "output": "def largest_merge(word1: str, word2: str) -> str:\n    merge = []\n    while word1 or word2:\n        if word1 > word2:\n            merge.append(word1[0])\n            word1 = word1[1:]\n        else:\n            merge.append(word2[0])\n            word2 = word2[1:]\n    return ''.join(merge)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `goal`.\n\nYou want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. That is, if the sum of the subsequence's elements is `sum`, then you want to **minimize the absolute difference** `abs(sum - goal)`.\n\nReturn _the **minimum** possible value of_ `abs(sum - goal)`.\n\nNote that a subsequence of an array is an array formed by removing some elements **(possibly all or none)** of the original array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,-7,3,5\\], goal = 6\n**Output:** 0\n**Explanation:** Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[7,-9,15,-2\\], goal = -5\n**Output:** 1\n**Explanation:** Choose the subsequence \\[7,-9,-2\\], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\], goal = -7\n**Output:** 7\n\n**Constraints:**\n\n*   `1 <= nums.length <= 40`\n*   `-107 <= nums[i] <= 107`\n*   `-109 <= goal <= 109`The naive solution is to check all possible subsequences. This works in O(2^n). Divide the array into two parts of nearly is equal size. Consider all subsets of one part and make a list of all possible subset sums and sort this list. Consider all subsets of the other part, and for each one, let its sum = x, do binary search to get the nearest possible value to goal - x in the first part.",
          "output": "def decrypt(code, k):\n    n = len(code)\n    result = [0] * n\n    if k == 0: return result\n    \n    for i in range(n):\n        sum = 0\n        for j in range(1, abs(k) + 1):\n            sum += code[(i + j) % n] if k > 0 else code[(i - j + n) % n]\n        result[i] = sum\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given the root of a binary tree and two integers `p` and `q`, return _the **distance** between the nodes of value_ `p` _and value_ `q` _in the tree_.\n\nThe **distance** between two nodes is the number of edges on the path from one to the other.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 0\n**Output:** 3\n**Explanation:** There are 3 edges between 5 and 0: 5-3-1-0.\n\n**Example 2:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 7\n**Output:** 2\n**Explanation:** There are 2 edges between 5 and 7: 5-2-7.\n\n**Example 3:**\n\n**Input:** root = \\[3,5,1,6,2,0,8,null,null,7,4\\], p = 5, q = 5\n**Output:** 0\n**Explanation:** The distance between a node and itself is 0.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `0 <= Node.val <= 109`\n*   All `Node.val` are **unique**.\n*   `p` and `q` are values in the tree.Get the LCA of p and q. The answer is the sum of distances between p-LCA and q-LCA",
          "output": "from collections import defaultdict\n\ndef countSubgraphsForEachD(n, edges):\n    tree = defaultdict(list)\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n\n    def dfs(node, parent):\n        depth = 0\n        for child in tree[node]:\n            if child != parent:\n                depth = max(depth, 1 + dfs(child, node))\n        return depth\n\n    ans = [0] * (n - 1)\n    for i in range(1, n + 1):\n        maxD = dfs(i, 0)\n        if maxD > 0:\n            ans[maxD - 1] += 1\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.\n\nThe string is called alternating if no two adjacent characters are equal. For example, the string `\"010 \"` is alternating, while the string `\"0100 \"` is not.\n\nReturn _the **minimum** number of operations needed to make_ `s` _alternating_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"0100 \"\n**Output:** 1\n**Explanation:** If you change the last character to '1', s will be  \"0101 \", which is alternating.\n\n**Example 2:**\n\n**Input:** s =  \"10 \"\n**Output:** 0\n**Explanation:** s is already alternating.\n\n**Example 3:**\n\n**Input:** s =  \"1111 \"\n**Output:** 2\n**Explanation:** You need two operations to reach  \"0101 \" or  \"1010 \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s[i]` is either `'0'` or `'1'`.Think about how the final string will look like. It will either start with a '0' and be like '010101010..' or with a '1' and be like '10101010..' Try both ways, and check for each way, the number of changes needed to reach it from the given string. The answer is the minimum of both ways.",
          "output": "from typing import List\n\ndef canDistribute(nums: List[int], quantity: List[int]) -> bool:\n    counts = [0] * 51\n    for num in nums:\n        counts[num] += 1\n\n    quantity.sort(reverse=True)\n\n    def dfs(idx: int) -> bool:\n        if idx == len(quantity):\n            return True\n        for i in range(1, 51):\n            if counts[i] >= quantity[idx]:\n                counts[i] -= quantity[idx]\n                if dfs(idx + 1):\n                    return True\n                counts[i] += quantity[idx]\n        return False\n\n    return dfs(0)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the number of **homogenous** substrings of_ `s`_._ Since the answer may be too large, return it **modulo** `109 + 7`.\n\nA string is **homogenous** if all the characters of the string are the same.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abbcccaa \"\n**Output:** 13\n**Explanation:** The homogenous substrings are listed as below:\n \"a \"   appears 3 times.\n \"aa \"  appears 1 time.\n \"b \"   appears 2 times.\n \"bb \"  appears 1 time.\n \"c \"   appears 3 times.\n \"cc \"  appears 2 times.\n \"ccc \" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.\n\n**Example 2:**\n\n**Input:** s =  \"xy \"\n**Output:** 2\n**Explanation:** The homogenous substrings are  \"x \" and  \"y \".\n\n**Example 3:**\n\n**Input:** s =  \"zzzzz \"\n**Output:** 15\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase letters.A string of only 'a's of length k contains k choose 2 homogenous substrings. Split the string into substrings where each substring contains only one letter, and apply the formula on each substring's length.",
          "output": "def count_homogenous(s: str) -> int:\n    MOD = 1000000007\n    count, total = 1, 0\n    for i in range(1, len(s)):\n        count = count + 1 if s[i] == s[i - 1] else 1\n        total = (total + count) % MOD\n    return (total + count) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`.\n\nYou can perform the following operation at most `maxOperations` times:\n\n*   Take any bag of balls and divide it into two new bags with a **positive** number of balls.\n    *   For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.\n\nYour penalty is the **maximum** number of balls in a bag. You want to **minimize** your penalty after the operations.\n\nReturn _the minimum possible penalty after performing the operations_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[9\\], maxOperations = 2\n**Output:** 3\n**Explanation:** \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. \\[**9**\\] -> \\[6,3\\].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. \\[**6**,3\\] -> \\[3,3,3\\].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.\n\n**Example 2:**\n\n**Input:** nums = \\[2,4,8,2\\], maxOperations = 4\n**Output:** 2\n**Explanation:**\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. \\[2,4,**8**,2\\] -> \\[2,4,4,4,2\\].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. \\[2,**4**,4,4,2\\] -> \\[2,2,2,4,4,2\\].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. \\[2,2,2,**4**,4,2\\] -> \\[2,2,2,2,2,4,2\\].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. \\[2,2,2,2,2,**4**,2\\] -> \\[2,2,2,2,2,2,2,2\\].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= maxOperations, nums[i] <= 109`Let's change the question if we know the maximum size of a bag what is the minimum number of bags you can make note that as the maximum size increases the minimum number of bags decreases so we can binary search the maximum size",
          "output": "def can_form_array(arr, pieces):\n    piece_map = {piece[0]: piece for piece in pieces}\n    \n    i = 0\n    while i < len(arr):\n        if arr[i] not in piece_map:\n            return False\n        \n        for num in piece_map[arr[i]]:\n            if arr[i] != num:\n                return False\n            i += 1\n            \n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an undirected graph. You are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`.\n\nA **connected trio** is a set of **three** nodes where there is an edge between **every** pair of them.\n\nThe **degree of a connected trio** is the number of edges where one endpoint is in the trio, and the other is not.\n\nReturn _the **minimum** degree of a connected trio in the graph, or_ `-1` _if the graph has no connected trios._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, edges = \\[\\[1,2\\],\\[1,3\\],\\[3,2\\],\\[4,1\\],\\[5,2\\],\\[3,6\\]\\]\n**Output:** 3\n**Explanation:** There is exactly one trio, which is \\[1,2,3\\]. The edges that form its degree are bolded in the figure above.\n\n**Example 2:**\n\n**Input:** n = 7, edges = \\[\\[1,3\\],\\[4,1\\],\\[4,3\\],\\[2,5\\],\\[5,6\\],\\[6,7\\],\\[7,5\\],\\[2,6\\]\\]\n**Output:** 0\n**Explanation:** There are exactly three trios:\n1) \\[1,4,3\\] with degree 0.\n2) \\[2,5,6\\] with degree 2.\n3) \\[5,6,7\\] with degree 2.\n\n**Constraints:**\n\n*   `2 <= n <= 400`\n*   `edges[i].length == 2`\n*   `1 <= edges.length <= n * (n-1) / 2`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   There are no repeated edges.Consider a trio with nodes u, v, and w. The degree of the trio is just degree(u) + degree(v) + degree(w) - 6. The -6 comes from subtracting the edges u-v, u-w, and v-w, which are counted twice each in the vertex degree calculation. To get the trios (u,v,w), you can iterate on u, then iterate on each w,v such that w and v are neighbors of u and are neighbors of each other.",
          "output": "def count_vowel_strings(n):\n    dp = [1, 1, 1, 1, 1]\n\n    for i in range(1, n):\n        for j in range(3, -1, -1):\n            dp[j] += dp[j + 1]\n\n    return sum(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is **valid** if it shares the same x-coordinate or the same y-coordinate as your location.\n\nReturn _the index **(0-indexed)** of the **valid** point with the smallest **Manhattan distance** from your current location_. If there are multiple, return _the valid point with the **smallest** index_. If there are no valid points, return `-1`.\n\nThe **Manhattan distance** between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** x = 3, y = 4, points = \\[\\[1,2\\],\\[3,1\\],\\[2,4\\],\\[2,3\\],\\[4,4\\]\\]\n**Output:** 2\n**Explanation:** Of all the points, only \\[3,1\\], \\[2,4\\] and \\[4,4\\] are valid. Of the valid points, \\[2,4\\] and \\[4,4\\] have the smallest Manhattan distance from your current location, with a distance of 1. \\[2,4\\] has the smallest index, so return 2.\n\n**Example 2:**\n\n**Input:** x = 3, y = 4, points = \\[\\[3,4\\]\\]\n**Output:** 0\n**Explanation:** The answer is allowed to be on the same location as your current location.\n\n**Example 3:**\n\n**Input:** x = 3, y = 4, points = \\[\\[2,3\\]\\]\n**Output:** -1\n**Explanation:** There are no valid points.\n\n**Constraints:**\n\n*   `1 <= points.length <= 104`\n*   `points[i].length == 2`\n*   `1 <= x, y, ai, bi <= 104`Iterate through each point, and keep track of the current point with the smallest Manhattan distance from your current location.",
          "output": "def nearestValidPoint(x: int, y: int, points: List[List[int]]) -> int:\n    min_distance = float(\"inf\")\n    index = -1\n    for i, point in enumerate(points):\n        if x == point[0] or y == point[1]:\n            distance = abs(x - point[0]) + abs(y - point[1])\n            if distance < min_distance:\n                min_distance = distance\n                index = i\n    return index\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return `true` _if it is possible to represent_ `n` _as the sum of distinct powers of three._ Otherwise, return `false`.\n\nAn integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 12\n**Output:** true\n**Explanation:** 12 = 31 + 32\n\n**Example 2:**\n\n**Input:** n = 91\n**Output:** true\n**Explanation:** 91 = 30 + 32 + 34\n\n**Example 3:**\n\n**Input:** n = 21\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= n <= 107`Let's note that the maximum power of 3 you'll use in your soln is 3^16 The number can not be represented as a sum of powers of 3 if it's ternary presentation has a 2 in it",
          "output": "def check_powers_of_three(n: int) -> bool:\n    while n > 0:\n        if n % 3 == 2:\n            return False\n        n //= 3\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: The **beauty** of a string is the difference in frequencies between the most frequent and least frequent characters.\n\n*   For example, the beauty of `\"abaacc \"` is `3 - 1 = 2`.\n\nGiven a string `s`, return _the sum of **beauty** of all of its substrings._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aabcb \"\n**Output:** 5\n**Explanation:** The substrings with non-zero beauty are \\[ \"aab \", \"aabc \", \"aabcb \", \"abcb \", \"bcb \"\\], each with beauty equal to 1.\n\n**Example 2:**\n\n**Input:** s =  \"aabcbaa \"\n**Output:** 17\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters.Maintain a prefix sum for the frequencies of characters. You can iterate over all substring then iterate over the alphabet and find which character appears most and which appears least using the prefix sum array",
          "output": "def arrayStringsAreEqual(word1, word2):\n    return \"\".join(word1) == \"\".join(word2)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an undirected graph defined by an integer `n`, the number of nodes, and a 2D integer array `edges`, the edges in the graph, where `edges[i] = [ui, vi]` indicates that there is an **undirected** edge between `ui` and `vi`. You are also given an integer array `queries`.\n\nLet `incident(a, b)` be defined as the **number of edges** that are connected to **either** node `a` or `b`.\n\nThe answer to the `jth` query is the **number of pairs** of nodes `(a, b)` that satisfy **both** of the following conditions:\n\n*   `a < b`\n*   `incident(a, b) > queries[j]`\n\nReturn _an array_ `answers` _such that_ `answers.length == queries.length` _and_ `answers[j]` _is the answer of the_ `jth` _query_.\n\nNote that there can be **multiple edges** between the same two nodes.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, edges = \\[\\[1,2\\],\\[2,4\\],\\[1,3\\],\\[2,3\\],\\[2,1\\]\\], queries = \\[2,3\\]\n**Output:** \\[6,5\\]\n**Explanation:** The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers\\[0\\] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers\\[1\\] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.\n\n**Example 2:**\n\n**Input:** n = 5, edges = \\[\\[1,5\\],\\[1,5\\],\\[3,4\\],\\[2,5\\],\\[1,3\\],\\[5,1\\],\\[2,3\\],\\[2,5\\]\\], queries = \\[1,2,3,4,5\\]\n**Output:** \\[10,10,9,8,6\\]\n\n**Constraints:**\n\n*   `2 <= n <= 2 * 104`\n*   `1 <= edges.length <= 105`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   `1 <= queries.length <= 20`\n*   `0 <= queries[j] < edges.length`We want to count pairs (x,y) such that degree[x] + degree[y] - occurrences(x,y) > k Think about iterating on x, and counting the number of valid y to pair with x. You can consider at first that the (- occurrences(x,y)) isn't there, or it is 0 at first for all y. Count the valid y this way. Then you can iterate on the neighbors of x, let that neighbor be y, and update occurrences(x,y). When you update occurrences(x,y), the left-hand side decreases. Once it reaches k, then y is not valid for x anymore, so you should decrease the answer by 1.",
          "output": "def get_smallest_string(n: int, k: int) -> str:\n    result = ['a'] * n\n    k -= n\n    idx = n - 1\n    while k > 0:\n        value = min(k, 25)\n        result[idx] = chr(ord(result[idx]) + value)\n        k -= value\n        idx -= 1\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. You must perform **exactly one** operation where you can **replace** one element `nums[i]` with `nums[i] * nums[i]`.\n\nReturn _the **maximum** possible subarray sum after **exactly one** operation_. The subarray must be non-empty.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,-1,-4,-3\\]\n**Output:** 17\n**Explanation:** You can perform the operation on index 2 (0-indexed) to make nums = \\[2,-1,**16**,-3\\]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.\n\n**Example 2:**\n\n**Input:** nums = \\[1,-1,1,1,-1,-1,1\\]\n**Output:** 4\n**Explanation:** You can perform the operation on index 1 (0-indexed) to make nums = \\[1,**1**,1,1,-1,-1,1\\]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-104 <= nums[i] <= 104`Think about dynamic programming Define an array dp[nums.length][2], where dp[i][0] is the max subarray sum including nums[i] and without squaring any element. dp[i][1] is the max subarray sum including nums[i] and having only one element squared.",
          "output": "def maxLengthBetweenEqualCharacters(s: str) -> int:\n    max_length = -1\n    char_index_map = {}\n\n    for i, char in enumerate(s):\n        if char in char_index_map:\n            max_length = max(max_length, i - char_index_map[char] - 1)\n        else:\n            char_index_map[char] = i\n\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\nReturn _the merged string._\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 =  \"abc \", word2 =  \"pqr \"\n**Output:**  \"apbqcr \"\n**Explanation:** The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r\n\n**Example 2:**\n\n**Input:** word1 =  \"ab \", word2 =  \"pqrs \"\n**Output:**  \"apbqrs \"\n**Explanation:** Notice that as word2 is longer,  \"rs \" is appended to the end.\nword1:  a   b \nword2:    p   q   r   s\nmerged: a p b q   r   s\n\n**Example 3:**\n\n**Input:** word1 =  \"abcd \", word2 =  \"pq \"\n**Output:**  \"apbqcd \"\n**Explanation:** Notice that as word1 is longer,  \"cd \" is appended to the end.\nword1:  a   b   c   d\nword2:    p   q \nmerged: a p b q c   d\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 100`\n*   `word1` and `word2` consist of lowercase English letters.Use two pointers, one pointer for each string. Alternately choose the character from each pointer, and move the pointer upwards.",
          "output": "def mergeAlternately(word1: str, word2: str) -> str:\n    result = []\n    i, j = 0, 0\n    while i < len(word1) and j < len(word2):\n        result.append(word1[i])\n        result.append(word2[j])\n        i += 1\n        j += 1\n    result += word1[i:]\n    result += word2[j:]\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is **empty**, and `'1'` if it contains **one** ball.\n\nIn one operation, you can move **one** ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes.\n\nReturn an array `answer` of size `n`, where `answer[i]` is the **minimum** number of operations needed to move all the balls to the `ith` box.\n\nEach `answer[i]` is calculated considering the **initial** state of the boxes.\n\n",
          "input": "**Example 1:**\n\n**Input:** boxes =  \"110 \"\n**Output:** \\[1,1,3\\]\n**Explanation:** The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.\n\n**Example 2:**\n\n**Input:** boxes =  \"001011 \"\n**Output:** \\[11,8,5,4,3,4\\]\n\n**Constraints:**\n\n*   `n == boxes.length`\n*   `1 <= n <= 2000`\n*   `boxes[i]` is either `'0'` or `'1'`.If you want to move a ball from box i to box j, you'll need abs(i-j) moves. To move all balls to some box, you can move them one by one. For each box i, iterate on each ball in a box j, and add abs(i-j) to answers[i].",
          "output": "def maximum_generated(n: int) -> int:\n    if n == 0:\n        return 0\n    nums = [0] * (n + 1)\n    nums[1] = 1\n    for i in range(2, n + 1):\n        nums[i] = nums[i // 2] if i % 2 == 0 else nums[i // 2] + nums[i // 2 + 1]\n    return max(nums)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **0-indexed** integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`.\n\nYou begin with a score of `0`. You want to perform **exactly** `m` operations. On the `ith` operation (**0-indexed**) you will:\n\n*   Choose one integer `x` from **either the start or the end** of the array `nums`.\n*   Add `multipliers[i] * x` to your score.\n    *   Note that `multipliers[0]` corresponds to the first operation, `multipliers[1]` to the second operation, and so on.\n*   Remove `x` from `nums`.\n\nReturn _the **maximum** score after performing_ `m` _operations._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\], multipliers = \\[3,2,1\\]\n**Output:** 14\n**Explanation:** An optimal solution is as follows:\n- Choose from the end, \\[1,2,**3**\\], adding 3 \\* 3 = 9 to the score.\n- Choose from the end, \\[1,**2**\\], adding 2 \\* 2 = 4 to the score.\n- Choose from the end, \\[**1**\\], adding 1 \\* 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14.\n\n**Example 2:**\n\n**Input:** nums = \\[-5,-3,-3,-2,7,1\\], multipliers = \\[-10,-5,3,4,6\\]\n**Output:** 102\n**Explanation:** An optimal solution is as follows:\n- Choose from the start, \\[**\\-5**,-3,-3,-2,7,1\\], adding -5 \\* -10 = 50 to the score.\n- Choose from the start, \\[**\\-3**,-3,-2,7,1\\], adding -3 \\* -5 = 15 to the score.\n- Choose from the start, \\[**\\-3**,-2,7,1\\], adding -3 \\* 3 = -9 to the score.\n- Choose from the end, \\[-2,7,**1**\\], adding 1 \\* 4 = 4 to the score.\n- Choose from the end, \\[-2,**7**\\], adding 7 \\* 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `m == multipliers.length`\n*   `1 <= m <= 300`\n*   `m <= n <= 105`\n*   `-1000 <= nums[i], multipliers[i] <= 1000`At first glance, the solution seems to be greedy, but if you try to greedily take the largest value from the beginning or the end, this will not be optimal. You should try all scenarios but this will be costy. Memoizing the pre-visited states while trying all the possible scenarios will reduce the complexity, and hence dp is a perfect choice here.",
          "output": "def min_deletions(s):\n    freq = collections.Counter(s)\n    used = set()\n    deletions = 0\n\n    for count in freq.values():\n        while count in used and count > 0:\n            deletions += 1\n            count -= 1\n        used.add(count)\n\n    return deletions\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings, `word1` and `word2`. You want to construct a string in the following manner:\n\n*   Choose some **non-empty** subsequence `subsequence1` from `word1`.\n*   Choose some **non-empty** subsequence `subsequence2` from `word2`.\n*   Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string.\n\nReturn _the **length** of the longest **palindrome** that can be constructed in the described manner._ If no palindromes can be constructed, return `0`.\n\nA **subsequence** of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters.\n\nA **palindrome** is a string that reads the same forward as well as backward.\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 =  \"cacb \", word2 =  \"cbba \"\n**Output:** 5\n**Explanation:** Choose  \"ab \" from word1 and  \"cba \" from word2 to make  \"abcba \", which is a palindrome.\n\n**Example 2:**\n\n**Input:** word1 =  \"ab \", word2 =  \"ab \"\n**Output:** 3\n**Explanation:** Choose  \"ab \" from word1 and  \"a \" from word2 to make  \"aba \", which is a palindrome.\n\n**Example 3:**\n\n**Input:** word1 =  \"aa \", word2 =  \"bb \"\n**Output:** 0\n**Explanation:** You cannot construct a palindrome from the described method, so return 0.\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 1000`\n*   `word1` and `word2` consist of lowercase English letters.Let's ignore the non-empty subsequence constraint. We can concatenate the two strings and find the largest palindromic subsequence with dynamic programming. Iterate through every pair of characters word1[i] and word2[j], and see if some palindrome begins with word1[i] and ends with word2[j]. This ensures that the subsequences are non-empty.",
          "output": "def maxProfit(inventory, orders):\n    mod = 10**9 + 7\n    inventory.sort(reverse=True)\n    inventory.append(0)\n    n, ans, count = len(inventory), 0, 1\n    for i in range(n - 1):\n        diff = inventory[i] - inventory[i + 1]\n        if count * diff < orders:\n            orders -= count * diff\n            ans = (ans + (((inventory[i] + inventory[i + 1] + 1) * diff) // 2) % mod * count) % mod\n        else:\n            q, r = divmod(orders, count)\n            ans = (ans + (((inventory[i] + inventory[i] - q + 1) * q) // 2) % mod * count) % mod\n            ans = (ans + r * (inventory[i] - q)) % mod\n            break\n        count += 1\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`.\n\nThe `ith` item is said to match the rule if **one** of the following is true:\n\n*   `ruleKey == \"type \"` and `ruleValue == typei`.\n*   `ruleKey == \"color \"` and `ruleValue == colori`.\n*   `ruleKey == \"name \"` and `ruleValue == namei`.\n\nReturn _the number of items that match the given rule_.\n\n",
          "input": "**Example 1:**\n\n**Input:** items = \\[\\[ \"phone \", \"blue \", \"pixel \"\\],\\[ \"computer \", \"silver \", \"lenovo \"\\],\\[ \"phone \", \"gold \", \"iphone \"\\]\\], ruleKey =  \"color \", ruleValue =  \"silver \"\n**Output:** 1\n**Explanation:** There is only one item matching the given rule, which is \\[ \"computer \", \"silver \", \"lenovo \"\\].\n\n**Example 2:**\n\n**Input:** items = \\[\\[ \"phone \", \"blue \", \"pixel \"\\],\\[ \"computer \", \"silver \", \"phone \"\\],\\[ \"phone \", \"gold \", \"iphone \"\\]\\], ruleKey =  \"type \", ruleValue =  \"phone \"\n**Output:** 2\n**Explanation:** There are only two items matching the given rule, which are \\[ \"phone \", \"blue \", \"pixel \"\\] and \\[ \"phone \", \"gold \", \"iphone \"\\]. Note that the item \\[ \"computer \", \"silver \", \"phone \"\\] does not match.\n\n**Constraints:**\n\n*   `1 <= items.length <= 104`\n*   `1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`\n*   `ruleKey` is equal to either `\"type \"`, `\"color \"`, or `\"name \"`.\n*   All strings consist only of lowercase letters.Iterate on each item, and check if each one matches the rule according to the statement.",
          "output": "def countMatches(items, ruleKey, ruleValue):\n    count = 0\n    index = {\"type\": 0, \"color\": 1, \"name\": 2}[ruleKey]\n    for item in items:\n        if item[index] == ruleValue:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert:\n\n*   There must be **exactly one** ice cream base.\n*   You can add **one or more** types of topping or have no toppings at all.\n*   There are **at most two** of **each type** of topping.\n\nYou are given three inputs:\n\n*   `baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.\n*   `toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of **one** of the `ith` topping.\n*   `target`, an integer representing your target price for dessert.\n\nYou want to make a dessert with a total cost as close to `target` as possible.\n\nReturn _the closest possible cost of the dessert to_ `target`. If there are multiple, return _the **lower** one._\n\n",
          "input": "**Example 1:**\n\n**Input:** baseCosts = \\[1,7\\], toppingCosts = \\[3,4\\], target = 10\n**Output:** 10\n**Explanation:** Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.\n\n**Example 2:**\n\n**Input:** baseCosts = \\[2,3\\], toppingCosts = \\[4,5,100\\], target = 18\n**Output:** 17\n**Explanation:** Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.\n\n**Example 3:**\n\n**Input:** baseCosts = \\[3,10\\], toppingCosts = \\[2,5\\], target = 9\n**Output:** 8\n**Explanation:** It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.\n\n**Constraints:**\n\n*   `n == baseCosts.length`\n*   `m == toppingCosts.length`\n*   `1 <= n, m <= 10`\n*   `1 <= baseCosts[i], toppingCosts[i] <= 104`\n*   `1 <= target <= 104`As the constraints are not large, you can brute force and enumerate all the possibilities.",
          "output": "from itertools import product\n\ndef closest_cost(base_costs, topping_costs, target):\n    closest = float('inf')\n    topping_combinations = list(product([0, 1, 2], repeat=len(topping_costs)))\n    \n    for base in base_costs:\n        for combination in topping_combinations:\n            combination_cost = sum(x * y for x, y in zip(topping_costs, combination))\n            diff = abs(target - (base + combination_cost))\n            if diff < closest:\n                closest = diff\n            if diff == 0:\n                return target\n\n    return target - closest\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.\n\nIn one operation, you can change any integer's value in **any** of the arrays to **any** value between `1` and `6`, inclusive.\n\nReturn _the minimum number of operations required to make the sum of values in_ `nums1` _equal to the sum of values in_ `nums2`_._ Return `-1`\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2,3,4,5,6\\], nums2 = \\[1,1,2,2,2,2\\]\n**Output:** 3\n**Explanation:** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2\\[0\\] to 6. nums1 = \\[1,2,3,4,5,6\\], nums2 = \\[**6**,1,2,2,2,2\\].\n- Change nums1\\[5\\] to 1. nums1 = \\[1,2,3,4,5,**1**\\], nums2 = \\[6,1,2,2,2,2\\].\n- Change nums1\\[2\\] to 2. nums1 = \\[1,2,**2**,4,5,1\\], nums2 = \\[6,1,2,2,2,2\\].\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,1,1,1,1,1,1\\], nums2 = \\[6\\]\n**Output:** -1\n**Explanation:** There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.\n\n**Example 3:**\n\n**Input:** nums1 = \\[6,6\\], nums2 = \\[1\\]\n**Output:** 3\n**Explanation:** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1\\[0\\] to 2. nums1 = \\[**2**,6\\], nums2 = \\[1\\].\n- Change nums1\\[1\\] to 2. nums1 = \\[2,**2**\\], nums2 = \\[1\\].\n- Change nums2\\[0\\] to 4. nums1 = \\[2,2\\], nums2 = \\[**4**\\].\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 105`\n*   `1 <= nums1[i], nums2[i] <= 6`Let's note that we want to either decrease the sum of the array with a larger sum or increase the array's sum with the smaller sum. You can maintain the largest increase or decrease you can make in a binary search tree and each time get the maximum one.",
          "output": "class OrderedStream:\n    def __init__(self, n: int):\n        self.ptr = 1\n        self.data = {}\n\n    def insert(self, idKey: int, value: str):\n        self.data[idKey] = value\n        result = []\n        while self.ptr in self.data:\n            result.append(self.data[self.ptr])\n            self.ptr += 1\n        return result\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cars traveling at different speeds in the same direction along a one-lane road. You are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents:\n\n*   `positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`.\n*   `speedi` is the initial speed of the `ith` car in meters per second.\n\nFor simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the **slowest** car in the fleet.\n\nReturn an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. Answers within `10-5` of the actual answers are accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** cars = \\[\\[1,2\\],\\[2,1\\],\\[4,3\\],\\[7,2\\]\\]\n**Output:** \\[1.00000,-1.00000,3.00000,-1.00000\\]\n**Explanation:** After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.\n\n**Example 2:**\n\n**Input:** cars = \\[\\[3,4\\],\\[5,4\\],\\[6,3\\],\\[9,1\\]\\]\n**Output:** \\[2.00000,1.00000,1.50000,-1.00000\\]\n\n**Constraints:**\n\n*   `1 <= cars.length <= 105`\n*   `1 <= positioni, speedi <= 106`\n*   `positioni < positioni+1`We can simply ignore the merging of any car fleet, simply assume they cross each other. Now the aim is to find the first car to the right, which intersects with the current car before any other. Assume we have already considered all cars to the right already, now the current car is to be considered. Let\u2019s ignore all cars with speeds higher than the current car since the current car cannot intersect with those ones. Now, all cars to the right having speed strictly less than current car are to be considered. Now, for two cars c1 and c2 with positions p1 and p2 (p1 < p2) and speed s1 and s2 (s1 > s2), if c1 and c2 intersect before the current car and c2, then c1 can never be the first car of intersection for any car to the left of current car including current car. So we can remove that car from our consideration. We can see that we can maintain candidate cars in this way using a stack, removing cars with speed greater than or equal to current car, and then removing cars which can never be first point of intersection. The first car after this process (if any) would be first point of intersection.",
          "output": "def minOperations(nums, x):\n    total = sum(nums)\n    target = total - x\n    if target < 0:\n        return -1\n\n    maxLength = -1\n    left = 0\n    current_sum = 0\n\n    for right in range(len(nums)):\n        current_sum += nums[right]\n\n        while current_sum > target:\n            current_sum -= nums[left]\n            left += 1\n\n        if current_sum == target:\n            maxLength = max(maxLength, right - left + 1)\n\n    return -1 if maxLength == -1 else len(nums) - maxLength\n"
     },
     {
          "instruction": "Write python code for this problem: Design a queue-like data structure that moves the most recently used element to the end of the queue.\n\nImplement the `MRUQueue` class:\n\n*   `MRUQueue(int n)` constructs the `MRUQueue` with `n` elements: `[1,2,3,...,n]`.\n*   `int fetch(int k)` moves the `kth` element **(1-indexed)** to the end of the queue and returns it.\n\n",
          "input": "**Example 1:**\n\n**Input:**\n\\[ \"MRUQueue \",  \"fetch \",  \"fetch \",  \"fetch \",  \"fetch \"\\]\n\\[\\[8\\], \\[3\\], \\[5\\], \\[2\\], \\[8\\]\\]\n**Output:**\n\\[null, 3, 6, 2, 2\\]\n\n**Explanation:**\nMRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to \\[1,2,3,4,5,6,7,8\\].\nmRUQueue.fetch(3); // Moves the 3rd element (3) to the end of the queue to become \\[1,2,4,5,6,7,8,3\\] and returns it.\nmRUQueue.fetch(5); // Moves the 5th element (6) to the end of the queue to become \\[1,2,4,5,7,8,3,6\\] and returns it.\nmRUQueue.fetch(2); // Moves the 2nd element (2) to the end of the queue to become \\[1,4,5,7,8,3,6,2\\] and returns it.\nmRUQueue.fetch(8); // The 8th element (2) is already at the end of the queue so just return it.\n\n**Constraints:**\n\n*   `1 <= n <= 2000`\n*   `1 <= k <= n`\n*   At most `2000` calls will be made to `fetch`.\n\n**Follow up:** Finding an `O(n)` algorithm per `fetch` is a bit easy. Can you find an algorithm with a better complexity for each `fetch` call?You can store the data in an array and apply each fetch by moving the ith element to the end of the array (i.e, O(n) per operation). A better way is to use the square root decomposition technique. You can build chunks of size sqrt(n). For each fetch operation, You can search for the chunk which has the ith element and update it (i.e., O(sqrt(n)) per operation), and move this element to an empty chunk at the end.",
          "output": "def min_deletions(s: str) -> int:\n    a_count, deletions = 0, 0\n    for c in s:\n        if c == 'a':\n            a_count += 1\n        else:\n            if a_count > 0:\n                a_count -= 1\n            else:\n                deletions += 1\n    return deletions\n"
     },
     {
          "instruction": "Write python code for this problem: Given an alphanumeric string `s`, return _the **second largest** numerical digit that appears in_ `s`_, or_ `-1` _if it does not exist_.\n\nAn **alphanumeric** string is a string consisting of lowercase English letters and digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"dfa12321afd \"\n**Output:** 2\n**Explanation:** The digits that appear in s are \\[1, 2, 3\\]. The second largest digit is 2.\n\n**Example 2:**\n\n**Input:** s =  \"abc1111 \"\n**Output:** -1\n**Explanation:** The digits that appear in s are \\[1\\]. There is no second largest digit. \n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters and/or digits.First of all, get the distinct characters since we are only interested in those Let's note that there might not be any digits.",
          "output": "def second_highest(s: str) -> int:\n    largest = -1\n    second_largest = -1\n    for c in s:\n        if c.isdigit():\n            d = int(c)\n            if d > largest:\n                second_largest = largest\n                largest = d\n            elif d < largest and d > second_largest:\n                second_largest = d\n    return second_largest\n"
     },
     {
          "instruction": "Write python code for this problem: There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be **extended** to expire `timeToLive` seconds after the (potentially different) `currentTime`.\n\nImplement the `AuthenticationManager` class:\n\n*   `AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.\n*   `generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.\n*   `renew(string tokenId, int currentTime)` renews the **unexpired** token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.\n*   `countUnexpiredTokens(int currentTime)` returns the number of **unexpired** tokens at the given currentTime.\n\nNote that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place **before** the other actions.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"AuthenticationManager \",  \"`renew` \",  \"generate \",  \"`countUnexpiredTokens` \",  \"generate \",  \"`renew` \",  \"`renew` \",  \"`countUnexpiredTokens` \"\\]\n\\[\\[5\\], \\[ \"aaa \", 1\\], \\[ \"aaa \", 2\\], \\[6\\], \\[ \"bbb \", 7\\], \\[ \"aaa \", 8\\], \\[ \"bbb \", 10\\], \\[15\\]\\]\n**Output**\n\\[null, null, null, 1, null, null, null, 0\\]\n\n**Explanation**\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with `timeToLive` = 5 seconds.\nauthenticationManager.`renew`( \"aaa \", 1); // No token exists with tokenId  \"aaa \" at time 1, so nothing happens.\nauthenticationManager.generate( \"aaa \", 2); // Generates a new token with tokenId  \"aaa \" at time 2.\nauthenticationManager.`countUnexpiredTokens`(6); // The token with tokenId  \"aaa \" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate( \"bbb \", 7); // Generates a new token with tokenId  \"bbb \" at time 7.\nauthenticationManager.`renew`( \"aaa \", 8); // The token with tokenId  \"aaa \" expired at time 7, and 8 >= 7, so at time 8 the `renew` request is ignored, and nothing happens.\nauthenticationManager.`renew`( \"bbb \", 10); // The token with tokenId  \"bbb \" is unexpired at time 10, so the `renew` request is fulfilled and now the token will expire at time 15.\nauthenticationManager.`countUnexpiredTokens`(15); // The token with tokenId  \"bbb \" expires at time 15, and the token with tokenId  \"aaa \" expired at time 7, so currently no token is unexpired, so return 0.\n\n**Constraints:**\n\n*   `1 <= timeToLive <= 108`\n*   `1 <= currentTime <= 108`\n*   `1 <= tokenId.length <= 5`\n*   `tokenId` consists only of lowercase letters.\n*   All calls to `generate` will contain unique values of `tokenId`.\n*   The values of `currentTime` across all the function calls will be **strictly increasing**.\n*   At most `2000` calls will be made to all functions combined.Using a map, track the expiry times of the tokens. When generating a new token, add it to the map with its expiry time. When renewing a token, check if it's on the map and has not expired yet. If so, update its expiry time. To count unexpired tokens, iterate on the map and check for each token if it's not expired yet.",
          "output": "def interpret(command: str) -> str:\n    result = []\n    i = 0\n    while i < len(command):\n        if command[i] == \"G\":\n            result.append(\"G\")\n            i += 1\n        elif command[i:i+2] == \"()\":\n            result.append(\"o\")\n            i += 2\n        else:\n            result.append(\"al\")\n            i += 4\n    return \"\".join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `nums`, an array of positive integers of size `2 * n`. You must perform `n` operations on this array.\n\nIn the `ith` operation **(1-indexed)**, you will:\n\n*   Choose two elements, `x` and `y`.\n*   Receive a score of `i * gcd(x, y)`.\n*   Remove `x` and `y` from `nums`.\n\nReturn _the maximum score you can receive after performing_ `n` _operations._\n\nThe function `gcd(x, y)` is the greatest common divisor of `x` and `y`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2\\]\n**Output:** 1\n**Explanation:** The optimal choice of operations is:\n(1 \\* gcd(1, 2)) = 1\n\n**Example 2:**\n\n**Input:** nums = \\[3,4,6,8\\]\n**Output:** 11\n**Explanation:** The optimal choice of operations is:\n(1 \\* gcd(3, 6)) + (2 \\* gcd(4, 8)) = 3 + 8 = 11\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5,6\\]\n**Output:** 14\n**Explanation:** The optimal choice of operations is:\n(1 \\* gcd(1, 5)) + (2 \\* gcd(2, 4)) + (3 \\* gcd(3, 6)) = 1 + 4 + 9 = 14\n\n**Constraints:**\n\n*   `1 <= n <= 7`\n*   `nums.length == 2 * n`\n*   `1 <= nums[i] <= 106`Find every way to split the array until n groups of 2. Brute force recursion is acceptable. Calculate the gcd of every pair and greedily multiply the largest gcds.",
          "output": "from typing import List\n\ndef minimumIncompatibility(nums: List[int], k: int) -> int:\n    n = len(nums)\n    if n % k != 0:\n        return -1\n    \n    nums.sort()\n    diffs = [nums[(i + 1) * (n // k) - 1] - nums[i * (n // k)] for i in range(k)]\n    \n    return sum(diffs)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **(0-indexed)** integer array `nums` and two integers `low` and `high`, return _the number of **nice pairs**_.\n\nA **nice pair** is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,4,2,7\\], low = 2, high = 6\n**Output:** 6\n**Explanation:** All nice pairs (i, j) are as follows:\n    - (0, 1): nums\\[0\\] XOR nums\\[1\\] = 5 \n    - (0, 2): nums\\[0\\] XOR nums\\[2\\] = 3\n    - (0, 3): nums\\[0\\] XOR nums\\[3\\] = 6\n    - (1, 2): nums\\[1\\] XOR nums\\[2\\] = 6\n    - (1, 3): nums\\[1\\] XOR nums\\[3\\] = 3\n    - (2, 3): nums\\[2\\] XOR nums\\[3\\] = 5\n\n**Example 2:**\n\n**Input:** nums = \\[9,8,4,2,1\\], low = 5, high = 14\n**Output:** 8\n**Explanation:** All nice pairs (i, j) are as follows:\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums\\[0\\] XOR nums\\[2\\] = 13\n    - (0, 3): nums\\[0\\] XOR nums\\[3\\] = 11\n    - (0, 4): nums\\[0\\] XOR nums\\[4\\] = 8\n    - (1, 2): nums\\[1\\] XOR nums\\[2\\] = 12\n    - (1, 3): nums\\[1\\] XOR nums\\[3\\] = 10\n    - (1, 4): nums\\[1\\] XOR nums\\[4\\] = 9\n    - (2, 3): nums\\[2\\] XOR nums\\[3\\] = 6\n    - (2, 4): nums\\[2\\] XOR nums\\[4\\] = 5\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `1 <= nums[i] <= 2 * 104`\n*   `1 <= low <= high <= 2 * 104`Let's note that we can count all pairs with XOR \u2264 K, so the answer would be to subtract the number of pairs withs XOR < low from the number of pairs with XOR \u2264 high. For each value, find out the number of values when you XOR it with the result is  \u2264 K using a trie.",
          "output": "def average_waiting_time(customers):\n    wait_time = 0\n    curr_time = 0\n    \n    for arrival, time in customers:\n        curr_time = max(curr_time, arrival) + time\n        wait_time += curr_time - arrival\n    \n    return wait_time / len(customers)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` buildings in a line. You are given an integer array `heights` of size `n` that represents the heights of the buildings in the line.\n\nThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a **smaller** height.\n\nReturn a list of indices **(0-indexed)** of buildings that have an ocean view, sorted in increasing order.\n\n",
          "input": "**Example 1:**\n\n**Input:** heights = \\[4,2,3,1\\]\n**Output:** \\[0,2,3\\]\n**Explanation:** Building 1 (0-indexed) does not have an ocean view because building 2 is taller.\n\n**Example 2:**\n\n**Input:** heights = \\[4,3,2,1\\]\n**Output:** \\[0,1,2,3\\]\n**Explanation:** All the buildings have an ocean view.\n\n**Example 3:**\n\n**Input:** heights = \\[1,3,2,4\\]\n**Output:** \\[3\\]\n**Explanation:** Only building 3 has an ocean view.\n\n**Constraints:**\n\n*   `1 <= heights.length <= 105`\n*   `1 <= heights[i] <= 109`You can traverse the buildings from the nearest to the ocean to the furthest. Keep with you the maximum to the right while traversing to determine if you can see the ocean or not.",
          "output": "import heapq\n\ndef furthest_building(heights, bricks, ladders):\n    min_heap = []\n    for i in range(len(heights) - 1):\n        diff = heights[i + 1] - heights[i]\n        if diff > 0:\n            heapq.heappush(min_heap, diff)\n            if len(min_heap) > ladders:\n                bricks -= heapq.heappop(min_heap)\n                if bricks < 0:\n                    return i\n    return len(heights) - 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s` **\u200b\u200b\u200b\u200b\u200bwithout leading zeros**, return `true`\u200b\u200b\u200b _if_ `s` _contains **at most one contiguous segment of ones**_. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1001 \"\n**Output:** false\n**Explanation:** The ones do not form a contiguous segment.\n\n**Example 2:**\n\n**Input:** s =  \"110 \"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s[i]`\u200b\u200b\u200b\u200b is either `'0'` or `'1'`.\n*   `s[0]` is `'1'`.It's guaranteed to have at least one segment The string size is small so you can count all segments of ones with no that have no adjacent ones.",
          "output": "def minimum_energy(tasks):\n    tasks.sort(key=lambda task: task[1] - task[0], reverse=True)\n\n    energy = 0\n    for task in tasks:\n        energy = max(energy + task[0], task[1])\n    return energy\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`.\n\nReturn _the minimum number of elements you need to add to make the sum of the array equal to_ `goal`. The array must maintain its property that `abs(nums[i]) <= limit`.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,-1,1\\], limit = 3, goal = -4\n**Output:** 2\n**Explanation:** You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.\n\n**Example 2:**\n\n**Input:** nums = \\[1,-10,9,1\\], limit = 100, goal = 0\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= limit <= 106`\n*   `-limit <= nums[i] <= limit`\n*   `-109 <= goal <= 109`Try thinking about the problem as if the array is empty. Then you only need to form goal using elements whose absolute value is <= limit. You can greedily set all of the elements except one to limit or -limit, so the number of elements you need is ceil(abs(goal)/ limit). You can \"normalize\" goal by offsetting it by the sum of the array. For example, if the goal is 5 and the sum is -3, then it's exactly the same as if the goal is 8 and the array is empty. The answer is ceil(abs(goal-sum)/limit) = (abs(goal-sum)+limit-1) / limit.",
          "output": "def minElements(nums, limit, goal):\n    sum_nums = sum(nums)\n    diff = abs(goal - sum_nums)\n    \n    return (diff + limit - 1) // limit\n"
     },
     {
          "instruction": "Write python code for this problem: There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`.\n\nA path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`.\n\nThe distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A **restricted path** is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.\n\nReturn _the number of restricted paths from node_ `1` _to node_ `n`. Since that number may be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, edges = \\[\\[1,2,3\\],\\[1,3,3\\],\\[2,3,1\\],\\[1,4,2\\],\\[5,2,2\\],\\[3,5,1\\],\\[5,4,10\\]\\]\n**Output:** 3\n**Explanation:** Each circle contains the node number in black and its `distanceToLastNode value in blue.` The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5\n\n**Example 2:**\n\n**Input:** n = 7, edges = \\[\\[1,3,1\\],\\[4,1,2\\],\\[7,3,4\\],\\[2,5,3\\],\\[5,6,1\\],\\[6,7,2\\],\\[7,5,3\\],\\[2,6,4\\]\\]\n**Output:** 1\n**Explanation:** Each circle contains the node number in black and its `distanceToLastNode value in blue.` The only restricted path is 1 --> 3 --> 7.\n\n**Constraints:**\n\n*   `1 <= n <= 2 * 104`\n*   `n - 1 <= edges.length <= 4 * 104`\n*   `edges[i].length == 3`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   `1 <= weighti <= 105`\n*   There is at most one edge between any two nodes.\n*   There is at least one path between any two nodes.Run a Dijkstra from node numbered n to compute distance from the last node. Consider all edges [u, v] one by one and direct them such that distance of u to n > distance of v to n. If both u and v are at the same distance from n, discard this edge. Now this problem reduces to computing the number of paths from 1 to n in a DAG, a standard DP problem.",
          "output": "def count_consistent_strings(allowed, words):\n    allowed_set = set(allowed)\n    count = 0\n    for word in words:\n        is_valid = True\n        for c in word:\n            if c not in allowed_set:\n                is_valid = False\n                break\n        if is_valid:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums`\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b. The XOR of a segment `[left, right]` where `left <= right` is the `XOR` of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`.\n\nReturn _the minimum number of elements to change in the array_ such that the `XOR` of all segments of size `k`\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,0,3,0\\], k = 1\n**Output:** 3\n**Explanation:** Modify the array from \\[**1**,**2**,0,**3**,0\\] to from \\[**0**,**0**,0,**0**,0\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,4,5,2,1,7,3,4,7\\], k = 3\n**Output:** 3\n**Explanation:** Modify the array from \\[3,4,**5**,**2**,**1**,7,3,4,7\\] to \\[3,4,**7**,**3**,**4**,7,3,4,7\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,4,1,2,5,1,2,6\\], k = 3\n**Output:** 3\n**Explanation:** Modify the array from \\[1,2,**4,**1,2,**5**,1,2,**6**\\] to \\[1,2,**3**,1,2,**3**,1,2,**3**\\].\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 2000`\n*   `\u200b\u200b\u200b\u200b\u200b\u200b0 <= nums[i] < 210`Let's note that for the XOR of all segments with size K to be equal to zeros, nums[i] has to be equal to nums[i+k] Basically, we need to make the first K elements have XOR = 0 and then modify them.",
          "output": "def calculate_summation_of_absolute_differences(nums):\n    n = len(nums)\n    result = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                result[i] += abs(nums[i] - nums[j])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `s1` and `s2` of equal length. A **string swap** is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\n\nReturn `true` _if it is possible to make both strings equal by performing **at most one string swap** on **exactly one** of the strings._ Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"bank \", s2 =  \"kanb \"\n**Output:** true\n**Explanation:** For example, swap the first character with the last character of s2 to make  \"bank \".\n\n**Example 2:**\n\n**Input:** s1 =  \"attack \", s2 =  \"defend \"\n**Output:** false\n**Explanation:** It is impossible to make them equal with one string swap.\n\n**Example 3:**\n\n**Input:** s1 =  \"kelb \", s2 =  \"kelb \"\n**Output:** true\n**Explanation:** The two strings are already equal, so no string swap operation is required.\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 100`\n*   `s1.length == s2.length`\n*   `s1` and `s2` consist of only lowercase English letters.The answer is false if the number of nonequal positions in the strings is not equal to 0 or 2. Check that these positions have the same set of characters.",
          "output": "def are_almost_equal(s1, s2):\n    if s1 == s2:\n        return True\n    diff = [i for i in range(len(s1)) if s1[i] != s2[i]]\n    return len(diff) == 2 and s1[diff[0]] == s2[diff[1]] and s1[diff[1]] == s2[diff[0]]\n"
     },
     {
          "instruction": "Write python code for this problem: There is an undirected **star** graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one **center** node and **exactly** `n - 1` edges that connect the center node with every other node.\n\nYou are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.\n\n",
          "input": "**Example 1:**\n\n**Input:** edges = \\[\\[1,2\\],\\[2,3\\],\\[4,2\\]\\]\n**Output:** 2\n**Explanation:** As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n\n**Example 2:**\n\n**Input:** edges = \\[\\[1,2\\],\\[5,1\\],\\[1,3\\],\\[1,4\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `3 <= n <= 105`\n*   `edges.length == n - 1`\n*   `edges[i].length == 2`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   The given `edges` represent a valid star graph.The center is the only node that has more than one edge. The center is also connected to all other nodes. Any two edges must have a common node, which is the center.",
          "output": "def maximum_wealth(accounts):\n    return max(sum(customer) for customer in accounts)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.\n\nYou are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are **guaranteed** to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that **maximizes** the **average** pass ratio across **all** the classes.\n\nThe **pass ratio** of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The **average pass ratio** is the sum of pass ratios of all the classes divided by the number of the classes.\n\nReturn _the **maximum** possible average pass ratio after assigning the_ `extraStudents` _students._ Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** classes = \\[\\[1,2\\],\\[3,5\\],\\[2,2\\]\\], `extraStudents` = 2\n**Output:** 0.78333\n**Explanation:** You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.\n\n**Example 2:**\n\n**Input:** classes = \\[\\[2,4\\],\\[3,9\\],\\[4,5\\],\\[2,10\\]\\], `extraStudents` = 4\n**Output:** 0.53485\n\n**Constraints:**\n\n*   `1 <= classes.length <= 105`\n*   `classes[i].length == 2`\n*   `1 <= passi <= totali <= 105`\n*   `1 <= extraStudents <= 105`Pay attention to how much the pass ratio changes when you add a student to the class. If you keep adding students, what happens to the change in pass ratio? The more students you add to a class, the smaller the change in pass ratio becomes. Since the change in the pass ratio is always decreasing with the more students you add, then the very first student you add to each class is the one that makes the biggest change in the pass ratio. Because each class's pass ratio is weighted equally, it's always optimal to put the student in the class that makes the biggest change among all the other classes. Keep a max heap of the current class sizes and order them by the change in pass ratio. For each extra student, take the top of the heap, update the class size, and put it back in the heap.",
          "output": "def most_competitive(nums, k):\n    stack = []\n    n = len(nums)\n\n    for i in range(n):\n        while stack and nums[i] < stack[-1] and len(stack) + n - i > k:\n            stack.pop()\n        if len(stack) < k:\n            stack.append(nums[i])\n\n    return stack\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `nums` **(0-indexed)** and an integer `k`.\n\nThe **score** of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A **good** subarray is a subarray where `i <= k <= j`.\n\nReturn _the maximum possible **score** of a **good** subarray._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,4,3,7,4,5\\], k = 3\n**Output:** 15\n**Explanation:** The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) \\* (5-1+1) = 3 \\* 5 = 15. \n\n**Example 2:**\n\n**Input:** nums = \\[5,5,4,5,4,1,1,1\\], k = 0\n**Output:** 20\n**Explanation:** The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) \\* (4-0+1) = 4 \\* 5 = 20.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 2 * 104`\n*   `0 <= k < nums.length`Try thinking about the prefix before index k and the suffix after index k as two separate arrays. Using two pointers or binary search, we can find the maximum prefix of each array where the numbers are less than or equal to a certain value",
          "output": "def min_moves(nums, limit):\n    n = len(nums)\n    delta = [0] * (2 * limit + 2)\n\n    for i in range(n // 2):\n        lo = min(nums[i], nums[n - 1 - i]) + 1\n        hi = max(nums[i], nums[n - 1 - i]) + limit\n        delta[lo] -= 1\n        delta[nums[i] + nums[n - 1 - i]] -= 1\n        delta[hi + 1] += 1\n\n    moves, current = n, n\n    for i in range(2, 2 * limit + 1):\n        current += delta[i]\n        moves = min(moves, current)\n\n    return moves\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array `responses`, where each `responses[i]` is a string containing space-separated words.\n\nThe **popularity** of a feature is the number of `responses[i]` that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in `features`. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.\n\nReturn _the features in sorted order._\n\n",
          "input": "**Example 1:**\n\n**Input:** features = \\[ \"cooler \", \"lock \", \"touch \"\\], responses = \\[ \"i like cooler cooler \", \"lock touch cool \", \"locker like touch \"\\]\n**Output:** \\[ \"touch \", \"cooler \", \"lock \"\\]\n**Explanation:** appearances( \"cooler \") = 1, appearances( \"lock \") = 1, appearances( \"touch \") = 2. Since  \"cooler \" and  \"lock \" both had 1 appearance,  \"cooler \" comes first because  \"cooler \" came first in the features array.\n\n**Example 2:**\n\n**Input:** features = \\[ \"a \", \"aa \", \"b \", \"c \"\\], responses = \\[ \"a \", \"a aa \", \"a a a a a \", \"b a \"\\]\n**Output:** \\[ \"a \", \"aa \", \"b \", \"c \"\\]\n\n**Constraints:**\n\n*   `1 <= features.length <= 104`\n*   `1 <= features[i].length <= 10`\n*   `features` contains no duplicates.\n*   `features[i]` consists of lowercase letters.\n*   `1 <= responses.length <= 102`\n*   `1 <= responses[i].length <= 103`\n*   `responses[i]` consists of lowercase letters and spaces.\n*   `responses[i]` contains no two consecutive spaces.\n*   `responses[i]` has no leading or trailing spaces.Use a hash map to count the frequency of each word of each string. Use the map for sorting the features.",
          "output": "from sortedcontainers import SortedList\n\nMOD = int(1e9) + 7\n\ndef create_sorted_array(instructions):\n    s = SortedList()\n    cost = 0\n\n    for i in instructions:\n        less_than = s.bisect_left(i)\n        greater_than = len(s) - s.bisect_right(i)\n        cost = (cost + min(less_than, greater_than)) % MOD\n        s.add(i)\n\n    return cost\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\n\nReturn `true` _if the square is white, and_ `false` _if the square is black_.\n\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.\n\n",
          "input": "**Example 1:**\n\n**Input:** coordinates =  \"a1 \"\n**Output:** false\n**Explanation:** From the chessboard above, the square with coordinates  \"a1 \" is black, so return false.\n\n**Example 2:**\n\n**Input:** coordinates =  \"h3 \"\n**Output:** true\n**Explanation:** From the chessboard above, the square with coordinates  \"h3 \" is white, so return true.\n\n**Example 3:**\n\n**Input:** coordinates =  \"c7 \"\n**Output:** false\n\n**Constraints:**\n\n*   `coordinates.length == 2`\n*   `'a' <= coordinates[0] <= 'h'`\n*   `'1' <= coordinates[1] <= '8'`Convert the coordinates to (x, y) - that is, \"a1\" is (1, 1), \"d7\" is (4, 7). Try add the numbers together and look for a pattern.",
          "output": "def reformat_number(number):\n    cleaned_number = ''.join(c for c in number if c.isdigit())\n\n    blocks = []\n    n = len(cleaned_number)\n    i = 0\n    while i < n:\n        if n - i == 2 or n - i == 4:\n            blocks.append(cleaned_number[i:i + 2])\n            i += 2\n        else:\n            blocks.append(cleaned_number[i:i + 3])\n            i += 3\n\n    return '-'.join(blocks)\n"
     },
     {
          "instruction": "Write python code for this problem: A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `\"Hello World \"`, `\"HELLO \"`, `\"hello world hello world \"` are all sentences. Words consist of **only** uppercase and lowercase English letters.\n\nTwo sentences `sentence1` and `sentence2` are **similar** if it is possible to insert an arbitrary sentence **(possibly empty)** inside one of these sentences such that the two sentences become equal. For example, `sentence1 = \"Hello my name is Jane \"` and `sentence2 = \"Hello Jane \"` can be made equal by inserting `\"my name is \"` between `\"Hello \"` and `\"Jane \"` in `sentence2`.\n\nGiven two sentences `sentence1` and `sentence2`, return `true` _if_ `sentence1` _and_ `sentence2` _are similar._ Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence1 =  \"My name is Haley \", sentence2 =  \"My Haley \"\n**Output:** true\n**Explanation:** sentence2 can be turned to sentence1 by inserting  \"name is \" between  \"My \" and  \"Haley \".\n\n**Example 2:**\n\n**Input:** sentence1 =  \"of \", sentence2 =  \"A lot of words \"\n**Output:** false\n**Explanation:** No single sentence can be inserted inside one of the sentences to make it equal to the other.\n\n**Example 3:**\n\n**Input:** sentence1 =  \"Eating right now \", sentence2 =  \"Eating \"\n**Output:** true\n**Explanation:** sentence2 can be turned to sentence1 by inserting  \"right now \" at the end of the sentence.\n\n**Constraints:**\n\n*   `1 <= sentence1.length, sentence2.length <= 100`\n*   `sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.\n*   The words in `sentence1` and `sentence2` are separated by a single space.One way to look at it is to find one sentence as a concatenation of a prefix and suffix from the other sentence. Get the longest common prefix between them and the longest common suffix.",
          "output": "def maximum_unique_subarray(nums):\n    max_sum, current_sum, left = 0, 0, 0\n    elements = set()\n    \n    for right in range(len(nums)):\n        while nums[right] in elements:\n            elements.remove(nums[left])\n            current_sum -= nums[left]\n            left += 1\n        \n        elements.add(nums[right])\n        current_sum += nums[right]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n"
     },
     {
          "instruction": "Write python code for this problem: There is a donuts shop that bakes donuts in batches of `batchSize`. They have a rule where they must serve **all** of the donuts of a batch before serving any donuts of the next batch. You are given an integer `batchSize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. Each customer will get exactly one donut.\n\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\n\nYou can freely rearrange the ordering of the groups. Return _the **maximum** possible number of happy groups after rearranging the groups._\n\n",
          "input": "**Example 1:**\n\n**Input:** batchSize = 3, groups = \\[1,2,3,4,5,6\\]\n**Output:** 4\n**Explanation:** You can arrange the groups as \\[6,2,4,5,1,3\\]. Then the 1st, 2nd, 4th, and 6th groups will be happy.\n\n**Example 2:**\n\n**Input:** batchSize = 4, groups = \\[1,3,2,5,2,2,1,6\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= batchSize <= 9`\n*   `1 <= groups.length <= 30`\n*   `1 <= groups[i] <= 109`The maximum number of happy groups is the maximum number of partitions you can split the groups into such that the sum of group sizes in each partition is 0 mod batchSize. At most one partition is allowed to have a different remainder (the first group will get fresh donuts anyway). Suppose you have an array freq of length k where freq[i] = number of groups of size i mod batchSize. How can you utilize this in a dp solution? Make a DP state dp[freq][r] that represents \"the maximum number of partitions you can form given the current freq and current remainder r\". You can hash the freq array to store it more easily in the dp table. For each i from 0 to batchSize-1, the next DP state is dp[freq`][(r+i)%batchSize] where freq` is freq but with freq[i] decremented by 1. Take the largest of all of the next states and store it in ans. If r == 0, then return ans+1 (because you can form a new partition), otherwise return ans (continuing the current partition).",
          "output": "from typing import List\n\ndef distanceLimitedPathsExist(n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:\n    edgeList.sort(key=lambda x: x[2])\n    queries = sorted(enumerate(queries), key=lambda x: x[1][2])\n\n    def find(x: int, parent: List[int]) -> int:\n        if x != parent[x]:\n            parent[x] = find(parent[x], parent)\n        return parent[x]\n\n    parent = list(range(n))\n    res = [False] * len(queries)\n    idx = 0\n\n    for query_id, query in queries:\n        p, q, limit = query\n        while idx < len(edgeList) and edgeList[idx][2] < limit:\n            u, v = edgeList[idx][:2]\n            ru, rv = find(u, parent), find(v, parent)\n            if ru != rv:\n                parent[ru] = rv\n            idx += 1\n        res[query_id] = find(p, parent) == find(q, parent)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is **nice** if it satisfies all of the following conditions:\n\n*   `0 <= i < j < nums.length`\n*   `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`\n\nReturn _the number of nice pairs of indices_. Since that number can be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[42,11,1,97\\]\n**Output:** 2\n**Explanation:** The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.\n\n**Example 2:**\n\n**Input:** nums = \\[13,10,35,24,76\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 109`The condition can be rearranged to (nums[i] - rev(nums[i])) == (nums[j] - rev(nums[j])). Transform each nums[i] into (nums[i] - rev(nums[i])). Then, count the number of (i, j) pairs that have equal values. Keep a map storing the frequencies of values that you have seen so far. For each i, check if nums[i] is in the map. If it is, then add that count to the overall count. Then, increment the frequency of nums[i].",
          "output": "from collections import deque\n\ndef maxResult(nums, k):\n    n = len(nums)\n    dq = deque()\n    dp = [0] * n\n    \n    dp[0] = nums[0]\n    dq.append(0)\n    \n    for i in range(1, n):\n        while dq and dq[0] < i - k:\n            dq.popleft()\n        \n        dp[i] = nums[i] + dp[dq[0]]\n        \n        while dq and dp[i] >= dp[dq[-1]]:\n            dq.pop()\n        \n        dq.append(i)\n    \n    return dp[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of positive integers `nums`, return the _maximum possible sum of an **ascending** subarray in_ `nums`.\n\nA subarray is defined as a contiguous sequence of numbers in an array.\n\nA subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is **ascending** if for all `i` where `l <= i < r`, `numsi < numsi+1`. Note that a subarray of size `1` is **ascending**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[10,20,30,5,10,50\\]\n**Output:** 65\n**Explanation:** \\[5,10,50\\] is the ascending subarray with the maximum sum of 65.\n\n**Example 2:**\n\n**Input:** nums = \\[10,20,30,40,50\\]\n**Output:** 150\n**Explanation:** \\[10,20,30,40,50\\] is the ascending subarray with the maximum sum of 150.\n\n**Example 3:**\n\n**Input:** nums = \\[12,17,15,13,10,11,12\\]\n**Output:** 33\n**Explanation:** \\[10,11,12\\] is the ascending subarray with the maximum sum of 33.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`It is fast enough to check all possible subarrays The end of each ascending subarray will be the start of the next",
          "output": "def concatenated_binary(n: int) -> int:\n    result = 0\n    mod = 1000000007\n    for i in range(1, n + 1):\n        length = len(bin(i)) - 2\n        result = ((result << length) % mod + i) % mod\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti` orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is:\n\n*   `0` if it is a batch of `buy` orders, or\n*   `1` if it is a batch of `sell` orders.\n\nNote that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.\n\nThere is a **backlog** that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\n\n*   If the order is a `buy` order, you look at the `sell` order with the **smallest** price in the backlog. If that `sell` order's price is **smaller than or equal to** the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.\n*   Vice versa, if the order is a `sell` order, you look at the `buy` order with the **largest** price in the backlog. If that `buy` order's price is **larger than or equal to** the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.\n\nReturn _the total **amount** of orders in the backlog after placing all the orders from the input_. Since this number can be large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** orders = \\[\\[10,5,0\\],\\[15,2,1\\],\\[25,1,1\\],\\[30,4,0\\]\\]\n**Output:** 6\n**Explanation:** Here is what happens with the orders:\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.\n\n**Example 2:**\n\n**Input:** orders = \\[\\[7,1000000000,1\\],\\[15,3,0\\],\\[5,999999995,0\\],\\[5,1,1\\]\\]\n**Output:** 999999984\n**Explanation:** Here is what happens with the orders:\n- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).\n\n**Constraints:**\n\n*   `1 <= orders.length <= 105`\n*   `orders[i].length == 3`\n*   `1 <= pricei, amounti <= 109`\n*   `orderTypei` is either `0` or `1`.Store the backlog buy and sell orders in two heaps, the buy orders in a max heap by price and the sell orders in a min heap by price. Store the orders in batches and update the fields according to new incoming orders. Each batch should only take 1 \"slot\" in the heap.",
          "output": "from heapq import *\n\ndef getNumberOfBacklogOrders(orders):\n    buy_orders, sell_orders = [], []\n    num_orders, mod = 0, int(1e9) + 7\n\n    for price, amount, order_type in orders:\n        if order_type == 0: # buy order\n            while amount and sell_orders and sell_orders[0][0] <= price:\n                x = min(amount, sell_orders[0][1])\n                amount, sell_orders[0][1] = amount - x, sell_orders[0][1] - x\n                if sell_orders[0][1] == 0:\n                    heappop(sell_orders)\n            if amount:\n                heappush(buy_orders, (-price, amount))\n        else: # sell order\n            while amount and buy_orders and -buy_orders[0][0] >= price:\n                x = min(amount, buy_orders[0][1])\n                amount, buy_orders[0][1] = amount - x, buy_orders[0][1] - x\n                if buy_orders[0][1] == 0:\n                    heappop(buy_orders)\n            if amount:\n                heappush(sell_orders, (price, amount))\n    \n    while buy_orders:\n        num_orders = (num_orders + heappop(buy_orders)[1]) % mod\n\n    while sell_orders:\n        num_orders = (num_orders + heappop(sell_orders)[1]) % mod\n\n    return num_orders\n"
     },
     {
          "instruction": "Write python code for this problem: You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (**0-indexed**) that satisfies the following conditions:\n\n*   `nums.length == n`\n*   `nums[i]` is a **positive** integer where `0 <= i < n`.\n*   `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.\n*   The sum of all the elements of `nums` does not exceed `maxSum`.\n*   `nums[index]` is **maximized**.\n\nReturn `nums[index]` _of the constructed array_.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 4, index = 2,  maxSum = 6\n**Output:** 2\n**Explanation:** nums = \\[1,2,**2**,1\\] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums\\[2\\] == 3, so 2 is the maximum nums\\[2\\].\n\n**Example 2:**\n\n**Input:** n = 6, index = 1,  maxSum = 10\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= n <= maxSum <= 109`\n*   `0 <= index < n`What if the problem was instead determining if you could generate a valid array with nums[index] == target? To generate the array, set nums[index] to target, nums[index-i] to target-i, and nums[index+i] to target-i. Then, this will give the minimum possible sum, so check if the sum is less than or equal to maxSum. n is too large to actually generate the array, so you can use the formula 1 + 2 + ... + n = n * (n+1) / 2 to quickly find the sum of nums[0...index] and nums[index...n-1]. Binary search for the target. If it is possible, then move the lower bound up. Otherwise, move the upper bound down.",
          "output": "from collections import deque\n\ndef countStudents(students, sandwiches):\n    queue = deque(students)\n    index, attempts = 0, 0\n\n    while queue:\n        student = queue[0]\n        if student == sandwiches[index]:\n            queue.popleft()\n            index += 1\n            attempts = 0\n        else:\n            queue.rotate(-1)\n            attempts += 1\n\n        if attempts == len(queue):\n            break\n\n    return len(queue)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can **make** some value `x` if you can choose some of your `n` coins such that their values sum up to `x`.\n\nReturn the _maximum number of consecutive integer values that you **can** **make** with your coins **starting** from and **including**_ `0`.\n\nNote that you may have multiple coins of the same value.\n\n",
          "input": "**Example 1:**\n\n**Input:** coins = \\[1,3\\]\n**Output:** 2\n**Explanation:** You can make the following values:\n- 0: take \\[\\]\n- 1: take \\[1\\]\nYou can make 2 consecutive integer values starting from 0.\n\n**Example 2:**\n\n**Input:** coins = \\[1,1,1,4\\]\n**Output:** 8\n**Explanation:** You can make the following values:\n- 0: take \\[\\]\n- 1: take \\[1\\]\n- 2: take \\[1,1\\]\n- 3: take \\[1,1,1\\]\n- 4: take \\[4\\]\n- 5: take \\[4,1\\]\n- 6: take \\[4,1,1\\]\n- 7: take \\[4,1,1,1\\]\nYou can make 8 consecutive integer values starting from 0.\n\n**Example 3:**\n\n**Input:** nums = \\[1,4,10,3,1\\]\n**Output:** 20\n\n**Constraints:**\n\n*   `coins.length == n`\n*   `1 <= n <= 4 * 104`\n*   `1 <= coins[i] <= 4 * 104`If you can make the first x values and you have a value v, then you can make all the values \u2264 v + x Sort the array of coins. You can always make the value 0 so you can start with x = 0. Process the values starting from the smallest and stop when there is a value that cannot be achieved with the current x.",
          "output": "def maxOperations(nums, k):\n    count = {}\n    operations = 0\n\n    for num in nums:\n        if count.get(k - num, 0) > 0:\n            count[k - num] -= 1\n            operations += 1\n        else:\n            count[num] = count.get(num, 0) + 1\n\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: This is an **interactive problem**.\n\nThere is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is **guaranteed** that the starting cell and the target cell are different, and neither of them is blocked.\n\nYou want to find the minimum distance to the target cell. However, you **do not know** the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.\n\nThr `GridMaster` class has the following functions:\n\n*   `boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.\n*   `void move(char direction)` Moves the robot in that direction. If this move would move the robot to a blocked cell or off the grid, the move will be **ignored**, and the robot will remain in the same position.\n*   `boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.\n\nNote that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.\n\nReturn _the **minimum distance** between the robot's initial starting cell and the target cell. If there is no valid path between the cells, return_ `-1`.\n\n**Custom testing:**\n\nThe test input is read as a 2D matrix `grid` of size `m x n` where:\n\n*   `grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell).\n*   `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.\n*   `grid[i][j] == 1` indicates that the cell `(i, j)` is empty.\n*   `grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell.\n\nThere is exactly one `-1` and `2` in `grid`. Remember that you will **not** have this information in your code.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,2\\],\\[-1,0\\]\\]\n**Output:** 2\n**Explanation:** One possible interaction is described below:\nThe robot is initially standing on cell (1, 0), denoted by the -1.\n- master.canMove('U') returns true.\n- master.canMove('D') returns false.\n- master.canMove('L') returns false.\n- master.canMove('R') returns false.\n- master.move('U') moves the robot to the cell (0, 0).\n- master.isTarget() returns false.\n- master.canMove('U') returns false.\n- master.canMove('D') returns true.\n- master.canMove('L') returns false.\n- master.canMove('R') returns true.\n- master.move('R') moves the robot to the cell (0, 1).\n- master.isTarget() returns true. \nWe now know that the target is the cell (0, 1), and the shortest path to the target cell is 2.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,0,-1\\],\\[1,1,1\\],\\[2,0,0\\]\\]\n**Output:** 4\n**Explanation:** The minimum distance between the robot and the target cell is 4.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[-1,0\\],\\[0,2\\]\\]\n**Output:** -1\n**Explanation:** There is no path from the robot to the target cell.\n\n**Constraints:**\n\n*   `1 <= n, m <= 500`\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `grid[i][j]` is either `-1`, `0`, `1`, or `2`.\n*   There is **exactly one** `-1` in `grid`.\n*   There is **exactly one** `2` in `grid`.The grid is at a maximum 500 x 500, so it is clever to assume that the robot's initial cell is grid[501][501] Run a DFS from the robot's position to make sure that you can reach the target, otherwise you should return -1. Now that you are sure you can reach the target, run BFS to find the shortest path.",
          "output": "from functools import lru_cache\n\ndef getMaxGridHappiness(m, n, introvertsCount, extrovertsCount):\n    @lru_cache(None)\n    def maxHappy(y, mask):\n        if y == n:\n            return 0\n\n        ans = 0\n        for x in range(m + 1):\n            happiness = 0\n            if mask >> x & 1:\n                happiness -= 30\n                if x > 0 and mask & 1:\n                    happiness -= 30\n                else:\n                    happiness += 20\n            ans = max(ans, happiness + maxHappy(y + 1, (mask | (1 << x)) >> 1))\n\n        return ans\n\n    return maxHappy(0, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `word` that consists of digits and lowercase English letters.\n\nYou will replace every non-digit character with a space. For example, `\"a123bc34d8ef34 \"` will become `\" 123 34 8 34 \"`. Notice that you are left with some integers that are separated by at least one space: `\"123 \"`, `\"34 \"`, `\"8 \"`, and `\"34 \"`.\n\nReturn _the number of **different** integers after performing the replacement operations on_ `word`.\n\nTwo integers are considered different if their decimal representations **without any leading zeros** are different.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"a123bc34d8ef34 \"\n**Output:** 3\n**Explanation:** The three different integers are  \"123 \",  \"34 \", and  \"8 \". Notice that  \"34 \" is only counted once.\n\n**Example 2:**\n\n**Input:** word =  \"leet1234code234 \"\n**Output:** 2\n\n**Example 3:**\n\n**Input:** word =  \"a1b01c001 \"\n**Output:** 1\n**Explanation:** The three integers  \"1 \",  \"01 \", and  \"001 \" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values.\n\n**Constraints:**\n\n*   `1 <= word.length <= 1000`\n*   `word` consists of digits and lowercase English letters.Try to split the string so that each integer is in a different string. Try to remove each integer's leading zeroes and compare the strings to find how many of them are unique.",
          "output": "def min_moves(nums, k):\n    n = len(nums)\n    ones = [i - j for i, j in enumerate(nums) if j == 1]\n    \n    moves = sum(ones[i] - ones[k // 2] for i in range(k))\n    min_moves = moves\n    \n    for i in range(k, len(ones)):\n        moves += ones[i] - ones[i - k] - k\n        min_moves = min(min_moves, moves)\n    \n    return min_moves\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` that contains some bracket pairs, with each pair containing a **non-empty** key.\n\n*   For example, in the string `\"(name)is(age)yearsold \"`, there are **two** bracket pairs that contain the keys `\"name \"` and `\"age \"`.\n\nYou know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`.\n\nYou are tasked to evaluate **all** of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will:\n\n*   Replace `keyi` and the bracket pair with the key's corresponding `valuei`.\n*   If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `\"? \"` (without the quotation marks).\n\nEach key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`.\n\nReturn _the resulting string after evaluating **all** of the bracket pairs._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"(name)is(age)yearsold \", knowledge = \\[\\[ \"name \", \"bob \"\\],\\[ \"age \", \"two \"\\]\\]\n**Output:**  \"bobistwoyearsold \"\n**Explanation:**\nThe key  \"name \" has a value of  \"bob \", so replace  \"(name) \" with  \"bob \".\nThe key  \"age \" has a value of  \"two \", so replace  \"(age) \" with  \"two \".\n\n**Example 2:**\n\n**Input:** s =  \"hi(name) \", knowledge = \\[\\[ \"a \", \"b \"\\]\\]\n**Output:**  \"hi? \"\n**Explanation:** As you do not know the value of the key  \"name \", replace  \"(name) \" with  \"? \".\n\n**Example 3:**\n\n**Input:** s =  \"(a)(a)(a)aaa \", knowledge = \\[\\[ \"a \", \"yes \"\\]\\]\n**Output:**  \"yesyesyesaaa \"\n**Explanation:** The same key can appear multiple times.\nThe key  \"a \" has a value of  \"yes \", so replace all occurrences of  \"(a) \" with  \"yes \".\nNotice that the  \"a \"s not in a bracket pair are not evaluated.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `0 <= knowledge.length <= 105`\n*   `knowledge[i].length == 2`\n*   `1 <= keyi.length, valuei.length <= 10`\n*   `s` consists of lowercase English letters and round brackets `'('` and `')'`.\n*   Every open bracket `'('` in `s` will have a corresponding close bracket `')'`.\n*   The key in each bracket pair of `s` will be non-empty.\n*   There will not be any nested bracket pairs in `s`.\n*   `keyi` and `valuei` consist of lowercase English letters.\n*   Each `keyi` in `knowledge` is unique.Process pairs from right to left to handle repeats Keep track of the current enclosed string using another string",
          "output": "def minPartitions(n: str) -> int:\n    max_digit = 0\n    for c in n:\n        max_digit = max(max_digit, int(c))\n        if max_digit == 9:\n            break\n    return max_digit\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an **even** integer `n`\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation `perm` of size `n`\u200b\u200b where `perm[i] == i`\u200b **(0-indexed)**\u200b\u200b\u200b\u200b.\n\nIn one operation, you will create a new array `arr`, and for each `i`:\n\n*   If `i % 2 == 0`, then `arr[i] = perm[i / 2]`.\n*   If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.\n\nYou will then assign `arr`\u200b\u200b\u200b\u200b to `perm`.\n\nReturn _the minimum **non-zero** number of operations you need to perform on_ `perm` _to return the permutation to its initial value._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** perm = \\[0,1\\] initially.\nAfter the 1st operation, perm = \\[0,1\\]\nSo it takes only 1 operation.\n\n**Example 2:**\n\n**Input:** n = 4\n**Output:** 2\n**Explanation:** perm = \\[0,1,2,3\\] initially.\nAfter the 1st operation, perm = \\[0,2,1,3\\]\nAfter the 2nd operation, perm = \\[0,1,2,3\\]\nSo it takes only 2 operations.\n\n**Example 3:**\n\n**Input:** n = 6\n**Output:** 4\n\n**Constraints:**\n\n*   `2 <= n <= 1000`\n*   `n`\u200b\u200b\u200b\u200b\u200b\u200b is even.It is safe to assume the number of  operations isn't more than n The number is small enough to apply a brute force solution.",
          "output": "def numberOfMatches(n):\n    return n - 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a positive integer `primeFactors`. You are asked to construct a positive integer `n` that satisfies the following conditions:\n\n*   The number of prime factors of `n` (not necessarily distinct) is **at most** `primeFactors`.\n*   The number of nice divisors of `n` is maximized. Note that a divisor of `n` is **nice** if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not.\n\nReturn _the number of nice divisors of_ `n`. Since that number can be too large, return it **modulo** `109 + 7`.\n\nNote that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. The prime factors of a number `n` is a list of prime numbers such that their product equals `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** primeFactors = 5\n**Output:** 6\n**Explanation:** 200 is a valid value of n.\nIt has 5 prime factors: \\[2,2,2,5,5\\], and it has 6 nice divisors: \\[10,20,40,50,100,200\\].\nThere is not other value of n that has at most 5 prime factors and more nice divisors.\n\n**Example 2:**\n\n**Input:** primeFactors = 8\n**Output:** 18\n\n**Constraints:**\n\n*   `1 <= primeFactors <= 109`The number of nice divisors is equal to the product of the count of each prime factor. Then the problem is reduced to: given n, find a sequence of numbers whose sum equals n and whose product is maximized. This sequence can have no numbers that are larger than 4. Proof: if it contains a number x that is larger than 4, then you can replace x with floor(x/2) and ceil(x/2), and floor(x/2) * ceil(x/2) > x. You can also replace 4s with two 2s. Hence, there will always be optimal solutions with only 2s and 3s. If there are three 2s, you can replace them with two 3s to get a better product. Hence, you'll never have more than two 2s. Keep adding 3s as long as n \u2265 5.",
          "output": "def stoneGame(stones):\n    n = len(stones)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(stones[j] - dp[i][j - 1], stones[i] - dp[i + 1][j])\n    \n    return dp[0][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: There is a garden of `n` flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array `flowers` of size `n` and each `flowers[i]` represents the beauty of the `ith` flower.\n\nA garden is **valid** if it meets these conditions:\n\n*   The garden has at least two flowers.\n*   The first and the last flower of the garden have the same beauty value.\n\nAs the appointed gardener, you have the ability to **remove** any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden **valid**. The beauty of the garden is the sum of the beauty of all the remaining flowers.\n\nReturn the maximum possible beauty of some **valid** garden after you have removed any (possibly none) flowers.\n\n",
          "input": "**Example 1:**\n\n**Input:** flowers = \\[1,2,3,1,2\\]\n**Output:** 8\n**Explanation:** You can produce the valid garden \\[2,3,1,2\\] to have a total beauty of 2 + 3 + 1 + 2 = 8.\n\n**Example 2:**\n\n**Input:** flowers = \\[100,1,1,-3,1\\]\n**Output:** 3\n**Explanation:** You can produce the valid garden \\[1,1,1\\] to have a total beauty of 1 + 1 + 1 = 3.\n\n**Example 3:**\n\n**Input:** flowers = \\[-1,-2,0,-1\\]\n**Output:** -2\n**Explanation:** You can produce the valid garden \\[-1,-1\\] to have a total beauty of -1 + -1 = -2.\n\n**Constraints:**\n\n*   `2 <= flowers.length <= 105`\n*   `-104 <= flowers[i] <= 104`\n*   It is possible to create a valid garden by removing some (possibly none) flowers.Consider every possible beauty and its first and last index in flowers. Remove all flowers with negative beauties within those indices.",
          "output": "def stoneGameVI(aliceValues, bobValues):\n    n = len(aliceValues)\n    sums = sorted([(aliceValues[i] + bobValues[i], i) for i in range(n)], reverse=True)\n    \n    aliceScore = sum(aliceValues[i] for _, i in sums[::2])\n    bobScore = sum(bobValues[i] for _, i in sums[1::2])\n    \n    return 0 if aliceScore == bobScore else 1 if aliceScore > bobScore else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` (**0-indexed**). In one operation, you can choose an element of the array and increment it by `1`.\n\n*   For example, if `nums = [1,2,3]`, you can choose to increment `nums[1]` to make `nums = [1,**3**,3]`.\n\nReturn _the **minimum** number of operations needed to make_ `nums` _**strictly** **increasing**._\n\nAn array `nums` is **strictly increasing** if `nums[i] < nums[i+1]` for all `0 <= i < nums.length - 1`. An array of length `1` is trivially strictly increasing.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 3\n**Explanation:** You can do the following operations:\n1) Increment nums\\[2\\], so nums becomes \\[1,1,**2**\\].\n2) Increment nums\\[1\\], so nums becomes \\[1,**2**,2\\].\n3) Increment nums\\[2\\], so nums becomes \\[1,2,**3**\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,2,4,1\\]\n**Output:** 14\n\n**Example 3:**\n\n**Input:** nums = \\[8\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `1 <= nums[i] <= 104`nums[i+1] must be at least equal to nums[i] + 1. Think greedily. You don't have to increase nums[i+1] beyond nums[i]+1. Iterate on i and set nums[i] = max(nums[i-1]+1, nums[i]) .",
          "output": "def min_operations(nums):\n    operations = 0\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i - 1]:\n            operations += (nums[i - 1] - nums[i]) + 1\n            nums[i] = nums[i - 1] + 1\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `points` where `points[i] = [xi, yi]` is the coordinates of the `ith` point on a 2D plane. Multiple points can have the **same** coordinates.\n\nYou are also given an array `queries` where `queries[j] = [xj, yj, rj]` describes a circle centered at `(xj, yj)` with a radius of `rj`.\n\nFor each query `queries[j]`, compute the number of points **inside** the `jth` circle. Points **on the border** of the circle are considered **inside**.\n\nReturn _an array_ `answer`_, where_ `answer[j]` _is the answer to the_ `jth` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,3\\],\\[3,3\\],\\[5,3\\],\\[2,2\\]\\], queries = \\[\\[2,3,1\\],\\[4,3,1\\],\\[1,1,2\\]\\]\n**Output:** \\[3,2,2\\]\n**Explanation:** The points and circles are shown above.\nqueries\\[0\\] is the green circle, queries\\[1\\] is the red circle, and queries\\[2\\] is the blue circle.\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[5,5\\]\\], queries = \\[\\[1,2,2\\],\\[2,2,2\\],\\[4,3,2\\],\\[4,3,3\\]\\]\n**Output:** \\[2,3,2,4\\]\n**Explanation:** The points and circles are shown above.\nqueries\\[0\\] is green, queries\\[1\\] is red, queries\\[2\\] is blue, and queries\\[3\\] is purple.\n\n**Constraints:**\n\n*   `1 <= points.length <= 500`\n*   `points[i].length == 2`\n*   `0 <= x\u200b\u200b\u200b\u200b\u200b\u200bi, y\u200b\u200b\u200b\u200b\u200b\u200bi <= 500`\n*   `1 <= queries.length <= 500`\n*   `queries[j].length == 3`\n*   `0 <= xj, yj <= 500`\n*   `1 <= rj <= 500`\n*   All coordinates are integers.\n\n**Follow up:** Could you find the answer for each query in better complexity than `O(n)`?For a point to be inside a circle, the euclidean distance between it and the circle's center needs to be less than or equal to the radius. Brute force for each circle and iterate overall points and find those inside it.",
          "output": "def countPoints(points, queries):\n    answer = []\n    for query in queries:\n        inside = 0\n        for point in points:\n            dx = point[0] - query[0]\n            dy = point[1] - query[1]\n            if dx * dx + dy * dy <= query[2] * query[2]:\n                inside += 1\n        answer.append(inside)\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **sorted** array `nums` of `n` non-negative integers and an integer `maximumBit`. You want to perform the following query `n` **times**:\n\n1.  Find a non-negative integer `k < 2maximumBit` such that `nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k` is **maximized**. `k` is the answer to the `ith` query.\n2.  Remove the **last** element from the current array `nums`.\n\nReturn _an array_ `answer`_, where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,1,3\\], maximumBit = 2\n**Output:** \\[0,3,2,3\\]\n**Explanation**: The queries are answered as follows:\n1st query: nums = \\[0,1,1,3\\], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n2nd query: nums = \\[0,1,1\\], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n3rd query: nums = \\[0,1\\], k = 2 since 0 XOR 1 XOR 2 = 3.\n4th query: nums = \\[0\\], k = 3 since 0 XOR 3 = 3.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,4,7\\], maximumBit = 3\n**Output:** \\[5,2,6,5\\]\n**Explanation**: The queries are answered as follows:\n1st query: nums = \\[2,3,4,7\\], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n2nd query: nums = \\[2,3,4\\], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n3rd query: nums = \\[2,3\\], k = 6 since 2 XOR 3 XOR 6 = 7.\n4th query: nums = \\[2\\], k = 5 since 2 XOR 5 = 7.\n\n**Example 3:**\n\n**Input:** nums = \\[0,1,2,2,5,7\\], maximumBit = 3\n**Output:** \\[4,3,6,4,6,7\\]\n\n**Constraints:**\n\n*   `nums.length == n`\n*   `1 <= n <= 105`\n*   `1 <= maximumBit <= 20`\n*   `0 <= nums[i] < 2maximumBit`\n*   `nums`\u200b\u200b\u200b is sorted in **ascending** order.Note that the maximum possible XOR result is always 2^(maximumBit) - 1 So the answer for a prefix is the XOR of that prefix XORed with 2^(maximumBit)-1",
          "output": "def maximumUnits(boxTypes, truckSize):\n    boxTypes.sort(key=lambda x: x[1], reverse=True)\n    \n    totalUnits = 0\n    for box in boxTypes:\n        boxCount = min(truckSize, box[0])\n        totalUnits += boxCount * box[1]\n        truckSize -= boxCount\n        if truckSize == 0:\n            break\n    \n    return totalUnits\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` (**0-indexed**)\u200b\u200b\u200b\u200b\u200b\u200b. You are asked to perform the following operation on `s`\u200b\u200b\u200b\u200b\u200b\u200b until you get a sorted string:\n\n1.  Find **the largest index** `i` such that `1 <= i < s.length` and `s[i] < s[i - 1]`.\n2.  Find **the largest index** `j` such that `i <= j < s.length` and `s[k] < s[i - 1]` for all the possible values of `k` in the range `[i, j]` inclusive.\n3.  Swap the two characters at indices `i - 1`\u200b\u200b\u200b\u200b and `j`\u200b\u200b\u200b\u200b\u200b.\n4.  Reverse the suffix starting at index `i`\u200b\u200b\u200b\u200b\u200b\u200b.\n\nReturn _the number of operations needed to make the string sorted._ Since the answer can be too large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"cba \"\n**Output:** 5\n**Explanation:** The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s\\[1\\] and s\\[2\\] to get s= \"cab \", then reverse the suffix starting at 2. Now, s= \"cab \".\nOperation 2: i=1, j=2. Swap s\\[0\\] and s\\[2\\] to get s= \"bac \", then reverse the suffix starting at 1. Now, s= \"bca \".\nOperation 3: i=2, j=2. Swap s\\[1\\] and s\\[2\\] to get s= \"bac \", then reverse the suffix starting at 2. Now, s= \"bac \".\nOperation 4: i=1, j=1. Swap s\\[0\\] and s\\[1\\] to get s= \"abc \", then reverse the suffix starting at 1. Now, s= \"acb \".\nOperation 5: i=2, j=2. Swap s\\[1\\] and s\\[2\\] to get s= \"abc \", then reverse the suffix starting at 2. Now, s= \"abc \".\n\n**Example 2:**\n\n**Input:** s =  \"aabaa \"\n**Output:** 2\n**Explanation:** The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s\\[2\\] and s\\[4\\] to get s= \"aaaab \", then reverse the substring starting at 3. Now, s= \"aaaba \".\nOperation 2: i=4, j=4. Swap s\\[3\\] and s\\[4\\] to get s= \"aaaab \", then reverse the substring starting at 4. Now, s= \"aaaab \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 3000`\n*   `s`\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.Note that the operations given describe getting the previous permutation of s To solve this problem you need to solve every suffix separately",
          "output": "from collections import defaultdict\n\ndef countPairs(deliciousness):\n    MOD = 10**9 + 7\n    hashMap = defaultdict(int)\n    maxVal = max(deliciousness)\n    maxSum = maxVal * 2\n\n    count = 0\n    for val in deliciousness:\n        for sum in (1 << i for i in range(22)):\n            count = (count + hashMap[sum - val]) % MOD\n        hashMap[val] += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `firstString` and `secondString` that are **0-indexed** and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:\n\n*   `0 <= i <= j < firstString.length`\n*   `0 <= a <= b < secondString.length`\n*   The substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is **equal** to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive).\n*   `j - a` is the **minimum** possible value among all quadruples that satisfy the previous conditions.\n\nReturn _the **number** of such quadruples_.\n\n",
          "input": "**Example 1:**\n\n**Input:** firstString =  \"abcd \", secondString =  \"bccda \"\n**Output:** 1\n**Explanation:** The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a.\n\n**Example 2:**\n\n**Input:** firstString =  \"ab \", secondString =  \"cd \"\n**Output:** 0\n**Explanation:** There are no quadruples satisfying all the conditions.\n\n**Constraints:**\n\n*   `1 <= firstString.length, secondString.length <= 2 * 105`\n*   Both strings consist only of lowercase English letters.If the chosen substrings are of size larger than 1, then you can remove all but the first character from both substrings, and you'll get equal substrings of size 1, with the same a but less j. Hence, it's always optimal to choose substrings of size 1. If you choose a specific letter, then it's optimal to choose its first occurrence in firstString, and its last occurrence in secondString, to minimize j-a.",
          "output": "import heapq\n\ndef minimum_deviation(nums):\n    pq = []\n    min_val = float(\"inf\")\n\n    for num in nums:\n        if num % 2 == 0:\n            heapq.heappush(pq, -num)\n        else:\n            heapq.heappush(pq, -(num * 2))\n        min_val = min(min_val, num)\n\n    result = float(\"inf\")\n    while True:\n        top = -heapq.heappop(pq)\n        result = min(result, top - min_val)\n\n        if top % 2 == 1:\n            break\n        heapq.heappush(pq, -(top // 2))\n        min_val = min(min_val, top // 2)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of **only** uppercase and lowercase English letters (no punctuation).\n\n*   For example, `\"Hello World \"`, `\"HELLO \"`, and `\"hello world hello world \"` are all sentences.\n\nYou are given a sentence `s`\u200b\u200b\u200b\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b\u200b. You want to **truncate** `s`\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the **first** `k`\u200b\u200b\u200b\u200b\u200b\u200b words. Return `s`\u200b\u200b\u200b\u200b_\u200b\u200b after **truncating** it._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"Hello how are you Contestant \", k = 4\n**Output:**  \"Hello how are you \"\n**Explanation:**\nThe words in s are \\[ \"Hello \",  \"how \"  \"are \",  \"you \",  \"Contestant \"\\].\nThe first 4 words are \\[ \"Hello \",  \"how \",  \"are \",  \"you \"\\].\nHence, you should return  \"Hello how are you \".\n\n**Example 2:**\n\n**Input:** s =  \"What is the solution to this problem \", k = 4\n**Output:**  \"What is the solution \"\n**Explanation:**\nThe words in s are \\[ \"What \",  \"is \"  \"the \",  \"solution \",  \"to \",  \"this \",  \"problem \"\\].\nThe first 4 words are \\[ \"What \",  \"is \",  \"the \",  \"solution \"\\].\nHence, you should return  \"What is the solution \".\n\n**Example 3:**\n\n**Input:** s =  \"chopper is not a tanuki \", k = 5\n**Output:**  \"chopper is not a tanuki \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `k` is in the range `[1, the number of words in s]`.\n*   `s` consist of only lowercase and uppercase English letters and spaces.\n*   The words in `s` are separated by a single space.\n*   There are no leading or trailing spaces.It's easier to solve this problem on an array of strings so parse the string to an array of words After return the first k words as a sentence",
          "output": "def truncateSentence(s: str, k: int) -> str:\n    words = s.split()\n    return \" \".join(words[:k])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`.\n\n**Multiple users** can perform actions simultaneously, and a single user can perform **multiple actions** in the same minute.\n\nThe **user active minutes (UAM)** for a given user is defined as the **number of unique minutes** in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.\n\nYou are to calculate a **1-indexed** array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the **number of users** whose **UAM** equals `j`.\n\nReturn _the array_ `answer` _as described above_.\n\n",
          "input": "**Example 1:**\n\n**Input:** logs = \\[\\[0,5\\],\\[1,2\\],\\[0,2\\],\\[0,5\\],\\[1,3\\]\\], k = 5\n**Output:** \\[0,2,0,0,0\\]\n**Explanation:**\nThe user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nSince both users have a UAM of 2, answer\\[2\\] is 2, and the remaining answer\\[j\\] values are 0.\n\n**Example 2:**\n\n**Input:** logs = \\[\\[1,1\\],\\[2,2\\],\\[2,3\\]\\], k = 4\n**Output:** \\[1,1,0,0\\]\n**Explanation:**\nThe user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nThere is one user with a UAM of 1 and one with a UAM of 2.\nHence, answer\\[1\\] = 1, answer\\[2\\] = 1, and the remaining values are 0.\n\n**Constraints:**\n\n*   `1 <= logs.length <= 104`\n*   `0 <= IDi <= 109`\n*   `1 <= timei <= 105`\n*   `k` is in the range `[The maximum **UAM** for a user, 105]`.Try to find the number of different minutes when action happened for each user. For each user increase the value of the answer array index which matches the UAM for this user.",
          "output": "def total_money(n):\n    weeks = n // 7\n    days_remaining = n % 7\n    return 28 * weeks + 7 * weeks * (weeks - 1) // 2 + (weeks + 1) * days_remaining + days_remaining * (days_remaining - 1) // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two positive integer arrays `nums1` and `nums2`, both of length `n`.\n\nThe **absolute sum difference** of arrays `nums1` and `nums2` is defined as the **sum** of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (**0-indexed**).\n\nYou can replace **at most one** element of `nums1` with **any** other element in `nums1` to **minimize** the absolute sum difference.\n\nReturn the _minimum absolute sum difference **after** replacing at most one element in the array `nums1`._ Since the answer may be large, return it **modulo** `109 + 7`.\n\n`|x|` is defined as:\n\n*   `x` if `x >= 0`, or\n*   `-x` if `x < 0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,7,5\\], nums2 = \\[2,3,5\\]\n**Output:** 3\n**Explanation:** There are two possible optimal solutions:\n- Replace the second element with the first: \\[1,**7**,5\\] => \\[1,**1**,5\\], or\n- Replace the second element with the third: \\[1,**7**,5\\] => \\[1,**5**,5\\].\nBoth will yield an absolute sum difference of `|1-2| + (|1-3| or |5-3|) + |5-5| =` 3.\n\n**Example 2:**\n\n**Input:** nums1 = \\[2,4,6,8,10\\], nums2 = \\[2,4,6,8,10\\]\n**Output:** 0\n**Explanation:** nums1 is equal to nums2 so no replacement is needed. This will result in an \nabsolute sum difference of 0.\n\n**Example 3:**\n\n**Input:** nums1 = \\[1,10,4,4,2,7\\], nums2 = \\[9,3,5,1,7,4\\]\n**Output:** 20\n**Explanation:** Replace the first element with the second: \\[**1**,10,4,4,2,7\\] => \\[**10**,10,4,4,2,7\\].\nThis yields an absolute sum difference of `|10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20`\n\n**Constraints:**\n\n*   `n == nums1.length`\n*   `n == nums2.length`\n*   `1 <= n <= 105`\n*   `1 <= nums1[i], nums2[i] <= 105`Go through each element and test the optimal replacements. There are only 2 possible replacements for each element (higher and lower) that are optimal.",
          "output": "def max_points(s, x, y):\n    points = 0\n    s = list(s)\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            points += max(x, y)\n            s[i] = '#'\n    return points\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums` that consists of positive integers.\n\nThe **GCD** of a sequence of numbers is defined as the greatest integer that divides **all** the numbers in the sequence evenly.\n\n*   For example, the GCD of the sequence `[4,6,16]` is `2`.\n\nA **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n*   For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`.\n\nReturn _the **number** of **different** GCDs among all **non-empty** subsequences of_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[6,10,3\\]\n**Output:** 5\n**Explanation:** The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1.\n\n**Example 2:**\n\n**Input:** nums = \\[5,15,40,5,6\\]\n**Output:** 7\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 2 * 105`Think of how to check if a number x is a gcd of a subsequence. If there is such subsequence, then all of it will be divisible by x. Moreover, if you divide each number in the subsequence by x , then the gcd of the resulting numbers will be 1. Adding a number to a subsequence cannot increase its gcd. So, if there is a valid subsequence for x , then the subsequence that contains all multiples of x is a valid one too. Iterate on all possiblex from 1 to 10^5, and check if there is a valid subsequence for x.",
          "output": "def largest_lex_sequence(n: int) -> list[int]:\n    res = [0] * n\n    for i in range(n):\n        res[i] = i % 2\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: There is a function `signFunc(x)` that returns:\n\n*   `1` if `x` is positive.\n*   `-1` if `x` is negative.\n*   `0` if `x` is equal to `0`.\n\nYou are given an integer array `nums`. Let `product` be the product of all values in the array `nums`.\n\nReturn `signFunc(product)`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[-1,-2,-3,-4,3,2,1\\]\n**Output:** 1\n**Explanation:** The product of all values in the array is 144, and signFunc(144) = 1\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,0,2,-3\\]\n**Output:** 0\n**Explanation:** The product of all values in the array is 0, and signFunc(0) = 0\n\n**Example 3:**\n\n**Input:** nums = \\[-1,1,-1,1,-1\\]\n**Output:** -1\n**Explanation:** The product of all values in the array is -1, and signFunc(-1) = -1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-100 <= nums[i] <= 100`If there is a 0 in the array the answer is 0 To avoid overflow make all the negative numbers -1 and all positive numbers 1 and calculate the prod",
          "output": "def signFunc(x):\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\n\ndef arraySign(nums):\n    product = 1\n    for num in nums:\n        product *= signFunc(num)\n    return product\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in **clockwise order**. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.\n\nThe rules of the game are as follows:\n\n1.  **Start** at the `1st` friend.\n2.  Count the next `k` friends in the clockwise direction **including** the friend you started at. The counting wraps around the circle and may count some friends more than once.\n3.  The last friend you counted leaves the circle and loses the game.\n4.  If there is still more than one friend in the circle, go back to step `2` **starting** from the friend **immediately clockwise** of the friend who just lost and repeat.\n5.  Else, the last friend in the circle wins the game.\n\nGiven the number of friends, `n`, and an integer `k`, return _the winner of the game_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, k = 2\n**Output:** 3\n**Explanation:** Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.\n\n**Example 2:**\n\n**Input:** n = 6, k = 5\n**Output:** 1\n**Explanation:** The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.\n\n**Constraints:**\n\n*   `1 <= k <= n <= 500`\n\n**Follow up:**\n\nCould you solve this problem in linear time with constant space?Simulate the process. Maintain in a circular list the people who are still in the circle and the current person you are standing at. In each turn, count k people and remove the last person from the list.",
          "output": "def halves_are_alike(s: str) -> bool:\n    half_length = len(s) // 2\n    count_a, count_b = 0, 0\n\n    for i in range(half_length):\n        if s[i] in \"aeiouAEIOU\": count_a += 1\n\n    for i in range(half_length, len(s)):\n        if s[i] in \"aeiouAEIOU\": count_b += 1\n\n    return count_a == count_b\n"
     },
     {
          "instruction": "Write python code for this problem: There is a **3 lane road** of length `n` that consists of `n + 1` **points** labeled from `0` to `n`. A frog **starts** at point `0` in the **second** lane and wants to jump to point `n`. However, there could be obstacles along the way.\n\nYou are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (**ranging from 0 to 3**) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be **at most one** obstacle in the 3 lanes at each point.\n\n*   For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.\n\nThe frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a **side jump** to jump to **another** lane (even if they are not adjacent) at the **same** point if there is no obstacle on the new lane.\n\n*   For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\n\nReturn _the **minimum number of side jumps** the frog needs to reach **any lane** at point n starting from lane `2` at point 0._\n\n**Note:** There will be no obstacles on points `0` and `n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** obstacles = \\[0,1,2,3,0\\]\n**Output:** 2 \n**Explanation:** The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).\n\n**Example 2:**\n\n**Input:** obstacles = \\[0,1,1,3,3,0\\]\n**Output:** 0\n**Explanation:** There are no obstacles on lane 2. No side jumps are required.\n\n**Example 3:**\n\n**Input:** obstacles = \\[0,2,1,0,3,0\\]\n**Output:** 2\n**Explanation:** The optimal solution is shown by the arrows above. There are 2 side jumps.\n\n**Constraints:**\n\n*   `obstacles.length == n + 1`\n*   `1 <= n <= 5 * 105`\n*   `0 <= obstacles[i] <= 3`\n*   `obstacles[0] == obstacles[n] == 0`At a given point, there are only 3 possible states for where the frog can be. Check all the ways to move from one point to the next and update the minimum side jumps for each lane.",
          "output": "import heapq\n\ndef eatenApples(apples, days):\n    n = len(apples)\n    pq = []\n    ans = 0\n\n    for i in range(n + 1):\n        if i < n and apples[i] > 0:\n            heapq.heappush(pq, (i + days[i], apples[i]))\n\n        while pq and pq[0][0] <= i:\n            heapq.heappop(pq)\n\n        if pq:\n            ans += 1\n            curr_apple = heapq.heappop(pq)\n            if curr_apple[1] > 1:\n                heapq.heappush(pq, (curr_apple[0], curr_apple[1] - 1))\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integers, `m` and `k`, and a stream of integers. You are tasked to implement a data structure that calculates the **MKAverage** for the stream.\n\nThe **MKAverage** can be calculated using these steps:\n\n1.  If the number of the elements in the stream is less than `m` you should consider the **MKAverage** to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container.\n2.  Remove the smallest `k` elements and the largest `k` elements from the container.\n3.  Calculate the average value for the rest of the elements **rounded down to the nearest integer**.\n\nImplement the `MKAverage` class:\n\n*   `MKAverage(int m, int k)` Initializes the **MKAverage** object with an empty stream and the two integers `m` and `k`.\n*   `void addElement(int num)` Inserts a new element `num` into the stream.\n*   `int calculateMKAverage()` Calculates and returns the **MKAverage** for the current stream **rounded down to the nearest integer**.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MKAverage \",  \"addElement \",  \"addElement \",  \"calculateMKAverage \",  \"addElement \",  \"calculateMKAverage \",  \"addElement \",  \"addElement \",  \"addElement \",  \"calculateMKAverage \"\\]\n\\[\\[3, 1\\], \\[3\\], \\[1\\], \\[\\], \\[10\\], \\[\\], \\[5\\], \\[5\\], \\[5\\], \\[\\]\\]\n**Output**\n\\[null, null, null, -1, null, 3, null, null, null, 5\\]\n\n**Explanation**\n`MKAverage obj = new MKAverage(3, 1);  obj.addElement(3);        // current elements are [3] obj.addElement(1);        // current elements are [3,1] obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist. obj.addElement(10);       // current elements are [3,1,10] obj.calculateMKAverage(); // The last 3 elements are [3,1,10].                           // After removing smallest and largest 1 element the container will be [3].                           // The average of [3] equals 3/1 = 3, return 3 obj.addElement(5);        // current elements are [3,1,10,5] obj.addElement(5);        // current elements are [3,1,10,5,5] obj.addElement(5);        // current elements are [3,1,10,5,5,5] obj.calculateMKAverage(); // The last 3 elements are [5,5,5].                           // After removing smallest and largest 1 element the container will be [5].                           // The average of [5] equals 5/1 = 5, return 5`\n\n**Constraints:**\n\n*   `3 <= m <= 105`\n*   `1 <= k*2 < m`\n*   `1 <= num <= 105`\n*   At most `105` calls will be made to `addElement` and `calculateMKAverage`.At each query, try to save and update the sum of the elements needed to calculate MKAverage. You can use BSTs for fast insertion and deletion of the elements.",
          "output": "def minimum_working_time(jobs, k):\n    max_job = max(jobs)\n    sum_jobs = sum(jobs)\n    \n    left, right = max_job, sum_jobs\n    while left < right:\n        mid = left + (right - left) // 2\n        count, current_sum = 1, 0\n\n        for job in jobs:\n            if current_sum + job > mid:\n                count += 1\n                current_sum = 0\n            current_sum += job\n\n        if count <= k:\n            right = mid\n        else:\n            left = mid + 1\n\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s` that has lowercase English letters in its **even** indices and digits in its **odd** indices.\n\nThere is a function `shift(c, x)`, where `c` is a character and `x` is a digit, that returns the `xth` character after `c`.\n\n*   For example, `shift('a', 5) = 'f'` and `shift('x', 0) = 'x'`.\n\nFor every **odd** index `i`, you want to replace the digit `s[i]` with `shift(s[i-1], s[i])`.\n\nReturn `s` _after replacing all digits. It is **guaranteed** that_ `shift(s[i-1], s[i])` _will never exceed_ `'z'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"a1c1e1 \"\n**Output:**  \"abcdef \"\n**Explanation:** The digits are replaced as follows:\n- s\\[1\\] -> shift('a',1) = 'b'\n- s\\[3\\] -> shift('c',1) = 'd'\n- s\\[5\\] -> shift('e',1) = 'f'\n\n**Example 2:**\n\n**Input:** s =  \"a1b2c3d4e \"\n**Output:**  \"abbdcfdhe \"\n**Explanation:** The digits are replaced as follows:\n- s\\[1\\] -> shift('a',1) = 'b'\n- s\\[3\\] -> shift('b',2) = 'd'\n- s\\[5\\] -> shift('c',3) = 'f'\n- s\\[7\\] -> shift('d',4) = 'h'\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists only of lowercase English letters and digits.\n*   `shift(s[i-1], s[i]) <= 'z'` for all **odd** indices `i`.We just need to replace every even positioned character with the character s[i] positions ahead of the character preceding it Get the position of the preceeding character in alphabet then advance it s[i] positions and get the character at that position",
          "output": "def count_balls(low_limit: int, high_limit: int) -> int:\n    box_counts = [0] * 46\n    for i in range(low_limit, high_limit + 1):\n        box_number = sum(map(int, str(i)))\n        box_counts[box_number] += 1\n    return max(box_counts)\n"
     },
     {
          "instruction": "Write python code for this problem: Design a system that manages the reservation state of `n` seats that are numbered from `1` to `n`.\n\nImplement the `SeatManager` class:\n\n*   `SeatManager(int n)` Initializes a `SeatManager` object that will manage `n` seats numbered from `1` to `n`. All seats are initially available.\n*   `int reserve()` Fetches the **smallest-numbered** unreserved seat, reserves it, and returns its number.\n*   `void unreserve(int seatNumber)` Unreserves the seat with the given `seatNumber`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"SeatManager \",  \"reserve \",  \"reserve \",  \"unreserve \",  \"reserve \",  \"reserve \",  \"reserve \",  \"reserve \",  \"unreserve \"\\]\n\\[\\[5\\], \\[\\], \\[\\], \\[2\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[5\\]\\]\n**Output**\n\\[null, 1, 2, null, 2, 3, 4, 5, null\\]\n\n**Explanation**\nSeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are \\[2,3,4,5\\], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are \\[2,3,4,5\\].\nseatManager.reserve();    // The available seats are \\[2,3,4,5\\], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are \\[3,4,5\\], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are \\[4,5\\], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are \\[5\\].\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `1 <= seatNumber <= n`\n*   For each call to `reserve`, it is guaranteed that there will be at least one unreserved seat.\n*   For each call to `unreserve`, it is guaranteed that `seatNumber` will be reserved.\n*   At most `105` calls **in total** will be made to `reserve` and `unreserve`.You need a data structure that maintains the states of the seats. This data structure should also allow you to get the first available seat and flip the state of a seat in a reasonable time. You can let the data structure contain the available seats. Then you want to be able to get the lowest element and erase an element, in a reasonable time. Ordered sets support these operations.",
          "output": "def largestSubmatrix(matrix):\n    m, n = len(matrix), len(matrix[0])\n    height = [0] * n\n    max_area = 0\n\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                height[j] += 1\n            else:\n                height[j] = 0\n        sorted_height = sorted(height)\n        for j in range(n):\n            max_area = max(max_area, sorted_height[j] * (n - j))\n\n    return max_area\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of positive integers `arr`. Perform some operations (possibly none) on `arr` so that it satisfies these conditions:\n\n*   The value of the **first** element in `arr` must be `1`.\n*   The absolute difference between any 2 adjacent elements must be **less than or equal to** `1`. In other words, `abs(arr[i] - arr[i - 1]) <= 1` for each `i` where `1 <= i < arr.length` (**0-indexed**). `abs(x)` is the absolute value of `x`.\n\nThere are 2 types of operations that you can perform any number of times:\n\n*   **Decrease** the value of any element of `arr` to a **smaller positive integer**.\n*   **Rearrange** the elements of `arr` to be in any order.\n\nReturn _the **maximum** possible value of an element in_ `arr` _after performing the operations to satisfy the conditions_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,2,1,2,1\\]\n**Output:** 2\n**Explanation:** \nWe can satisfy the conditions by rearranging `arr` so it becomes `[1,2,2,2,1]`.\nThe largest element in `arr` is 2.\n\n**Example 2:**\n\n**Input:** arr = \\[100,1,1000\\]\n**Output:** 3\n**Explanation:** \nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange `arr` so it becomes `[1,100,1000]`.\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow `arr = [1,2,3], which` satisfies the conditions.\nThe largest element in `arr is 3.`\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,3,4,5\\]\n**Output:** 5\n**Explanation:** The array already satisfies the conditions, and the largest element is 5.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= arr[i] <= 109`Sort the Array. Decrement each element to the largest integer that satisfies the conditions.",
          "output": "def maximumElementAfterDecrementingAndRearranging(arr: List[int]) -> int:\n    arr.sort()\n    arr[0] = 1\n    for i in range(1, len(arr)):\n        arr[i] = min(arr[i], arr[i - 1] + 1)\n    return arr[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: There is a hotel with `n` rooms. The rooms are represented by a 2D integer array `rooms` where `rooms[i] = [roomIdi, sizei]` denotes that there is a room with room number `roomIdi` and size equal to `sizei`. Each `roomIdi` is guaranteed to be **unique**.\n\nYou are also given `k` queries in a 2D array `queries` where `queries[j] = [preferredj, minSizej]`. The answer to the `jth` query is the room number `id` of a room such that:\n\n*   The room has a size of **at least** `minSizej`, and\n*   `abs(id - preferredj)` is **minimized**, where `abs(x)` is the absolute value of `x`.\n\nIf there is a **tie** in the absolute difference, then use the room with the **smallest** such `id`. If there is **no such room**, the answer is `-1`.\n\nReturn _an array_ `answer` _of length_ `k` _where_ `answer[j]` _contains the answer to the_ `jth` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** rooms = \\[\\[2,2\\],\\[1,2\\],\\[3,2\\]\\], queries = \\[\\[3,1\\],\\[3,3\\],\\[5,2\\]\\]\n**Output:** \\[3,-1,3\\]\n**Explanation:** The answers to the queries are as follows:\nQuery = \\[3,1\\]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = \\[3,3\\]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = \\[5,2\\]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.\n\n**Example 2:**\n\n**Input:** rooms = \\[\\[1,4\\],\\[2,3\\],\\[3,5\\],\\[4,1\\],\\[5,2\\]\\], queries = \\[\\[2,3\\],\\[2,4\\],\\[2,5\\]\\]\n**Output:** \\[2,1,3\\]\n**Explanation:** The answers to the queries are as follows:\nQuery = \\[2,3\\]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = \\[2,4\\]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = \\[2,5\\]: Room number 3 is the only room with a size of at least 5. The answer is 3.\n\n**Constraints:**\n\n*   `n == rooms.length`\n*   `1 <= n <= 105`\n*   `k == queries.length`\n*   `1 <= k <= 104`\n*   `1 <= roomIdi, preferredj <= 107`\n*   `1 <= sizei, minSizej <= 107`Is there a way to sort the queries so it's easier to search the closest room larger than the size? Use binary search to speed up the search time.",
          "output": "cript\r\nfunction closestRoom(rooms, queries) {\r\n    rooms.sort((a, b) => b[1] - a[1]);\r\n    \r\n    for (let i = 0; i < queries.length; ++i) {\r\n        queries[i].push(i);\r\n    }\r\n    \r\n    queries.sort((a, b) => b[1] - a[1]);\r\n    \r\n    let result = new Array(queries.length);\r\n    let ids = new Set();\r\n    \r\n    let j = 0;\r\n    for (const q of queries) {\r\n        while (j < rooms.length && rooms[j][1] >= q[1]) {\r\n            ids.add(rooms[j++][0]);\r\n        }\r\n        if (ids.size === 0) {\r\n            result[q[2]] = -1;\r\n        } else {\r\n            let minAbsDiff = Infinity;\r\n            let minId = undefined;\r\n            for (let id = q[0]; id <= 10000000; ++id) {\r\n                if (ids.has(id) && Math.abs(id-q[0]) < minAbsDiff) {\r\n                    minAbsDiff = Math.abs(id - q[0]);\r\n                    minId = id;\r\n                }\r\n                if (ids.has(id-1) && Math.abs(id-1-q[0]) < minAbsDiff) {\r\n                    minAbsDiff = Math.abs(id - 1 - q[0]);\r\n                    minId = id - 1;\r\n                }\r\n                if (minId !== undefined)\r\n                    break;\r\n            }\r\n            result[q[2]] = minId;\r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\r\n"
     },
     {
          "instruction": "Write python code for this problem: This is an **interactive problem**.\n\nThere is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is **guaranteed** that the starting cell and the target cell are different, and neither of them is blocked.\n\nEach cell has a **cost** that you need to pay each time you **move** to the cell. The starting cell's cost is **not** applied before the robot moves.\n\nYou want to find the minimum total cost to move the robot to the target cell. However, you **do not know** the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.\n\nThe `GridMaster` class has the following functions:\n\n*   `boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.\n*   `int move(char direction)` Moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot to a blocked cell or off the grid, the move will be **ignored**, the robot will remain in the same position, and the function will return `-1`.\n*   `boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.\n\nNote that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.\n\nReturn _the **minimum total cost** to get the robot from its initial starting cell to the target cell. If there is no valid path between the cells, return_ `-1`.\n\n**Custom testing:**\n\nThe test input is read as a 2D matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where:\n\n*   `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.\n*   `grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the **cost** to move to that cell.\n*   `(r1, c1)` is the starting cell of the robot.\n*   `(r2, c2)` is the target cell of the robot.\n\nRemember that you will **not** have this information in your code.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[2,3\\],\\[1,1\\]\\], r1 = 0, c1 = 1, r2 = 1, c2 = 0\n**Output:** 2\n**Explanation:** One possible interaction is described below:\nThe robot is initially standing on cell (0, 1), denoted by the 3.\n- master.canMove('U') returns false.\n- master.canMove('D') returns true.\n- master.canMove('L') returns true.\n- master.canMove('R') returns false.\n- master.move('L') moves the robot to the cell (0, 0) and returns 2.\n- master.isTarget() returns false.\n- master.canMove('U') returns false.\n- master.canMove('D') returns true.\n- master.canMove('L') returns false.\n- master.canMove('R') returns true.\n- master.move('D') moves the robot to the cell (1, 0) and returns 1.\n- master.isTarget() returns true.\n- master.move('L') doesn't move the robot and returns -1.\n- master.move('R') moves the robot to the cell (1, 1) and returns 1.\nWe now know that the target is the cell (1, 0), and the minimum total cost to reach it is 2. \n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,3,1\\],\\[3,4,2\\],\\[1,2,0\\]\\], r1 = 2, c1 = 0, r2 = 0, c2 = 2\n**Output:** 9\n**Explanation:** The minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2).\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,0\\],\\[0,1\\]\\], r1 = 0, c1 = 0, r2 = 1, c2 = 1\n**Output:** -1\n**Explanation:** There is no path from the robot to the target cell.\n\n**Constraints:**\n\n*   `1 <= n, m <= 100`\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `0 <= grid[i][j] <= 100`The grid is at a maximum 100 x 100, so it is clever to assume that the robot's initial cell is grid[101][101] Run a DFS from the robot's position to make sure that you can reach the target, otherwise you should return -1. Now that you are sure you can reach the target and that you know the grid, run Dijkstra to find the minimum cost.",
          "output": "class Solution:\n    def findShortestPath(self, master: 'GridMaster') -> int:\n        def dfs(master, x, y):\n            nonlocal target\n            if master.isTarget():\n                target = (x, y)\n            for i in range(4):\n                nx, ny = x + dirs[i], y + dirs[i + 1]\n                if (nx, ny) in grid:\n                    continue\n                if master.canMove(DIR_CHAR[i]):\n                    cost = master.move(DIR_CHAR[i])\n                    grid[(nx, ny)] = cost\n                    dfs(master, nx, ny)\n                    master.move(OPPOSITE_DIR_CHAR[i])\n                    \n        def bfs():\n            q = deque([(0, 0)])\n            grid[(0, 0)] = 0\n            while q:\n                x, y = q.popleft()\n                for i in range(4):\n                    nx, ny = x + dirs[i], y + dirs[i + 1]\n                    cost = grid[(x, y)] + grid.get((nx, ny), 0)\n                    if (nx, ny) in grid and grid[(nx, ny)] > cost:\n                        grid[(nx, ny)] = cost\n                        if (nx, ny) != target:\n                            q.append((nx, ny))\n            return grid.get(target, -1)\n        \n        dirs = [-1, 0, 1, 0, -1]\n        DIR_CHAR = \"URDL\"\n        OPPOSITE_DIR_CHAR = \"DLUR\"\n        grid = {}\n        target = None\n        \n        dfs(master, 0, 0)\n        if target is None:\n            return -1\n        \n        return bfs()\n"
     },
     {
          "instruction": "Write python code for this problem: A **pangram** is a sentence where every letter of the English alphabet appears at least once.\n\nGiven a string `sentence` containing only lowercase English letters, return `true` _if_ `sentence` _is a **pangram**, or_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence =  \"thequickbrownfoxjumpsoverthelazydog \"\n**Output:** true\n**Explanation:** sentence contains at least one of every letter of the English alphabet.\n\n**Example 2:**\n\n**Input:** sentence =  \"leetcode \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 1000`\n*   `sentence` consists of lowercase English letters.Iterate over the string and mark each character as found (using a boolean array, bitmask, or any other similar way). Check if the number of found characters equals the alphabet length.",
          "output": "from bisect import bisect_left\n\ndef min_operations(target, arr):\n    index_map = {num: i for i, num in enumerate(target)}\n\n    lis = []\n    for num in arr:\n        if num in index_map:\n            pos = bisect_left(lis, index_map[num])\n            if pos == len(lis):\n                lis.append(index_map[num])\n            else:\n                lis[pos] = index_map[num]\n\n    return len(target) - len(lis)\n"
     },
     {
          "instruction": "Write python code for this problem: It is a sweltering summer day, and a boy wants to buy some ice cream bars.\n\nAt the store, there are `n` ice cream bars. You are given an array `costs` of length `n`, where `costs[i]` is the price of the `ith` ice cream bar in coins. The boy initially has `coins` coins to spend, and he wants to buy as many ice cream bars as possible.\n\n**Note:** The boy can buy the ice cream bars in any order.\n\nReturn _the **maximum** number of ice cream bars the boy can buy with_ `coins` _coins._\n\nYou must solve the problem by counting sort.\n\n",
          "input": "**Example 1:**\n\n**Input:** costs = \\[1,3,2,4,1\\], coins = 7\n**Output:** 4\n**Explanation:** The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n\n**Example 2:**\n\n**Input:** costs = \\[10,6,8,7,7,8\\], coins = 5\n**Output:** 0\n**Explanation:** The boy cannot afford any of the ice cream bars.\n\n**Example 3:**\n\n**Input:** costs = \\[1,6,3,1,2,5\\], coins = 20\n**Output:** 6\n**Explanation:** The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\n\n**Constraints:**\n\n*   `costs.length == n`\n*   `1 <= n <= 105`\n*   `1 <= costs[i] <= 105`\n*   `1 <= coins <= 108`It is always optimal to buy the least expensive ice cream bar first. Sort the prices so that the cheapest ice cream bar comes first.",
          "output": "def largestAltitude(gain):\n    max_altitude, current_altitude = 0, 0\n    for i in gain:\n        current_altitude += i\n        max_altitude = max(max_altitude, current_altitude)\n    return max_altitude\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `n`\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from `0` to `n - 1` represented by a 2D integer array `tasks`, where `tasks[i] = [enqueueTimei, processingTimei]` means that the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task will be available to process at `enqueueTimei` and will take `processingTimei` to finish processing.\n\nYou have a single-threaded CPU that can process **at most one** task at a time and will act in the following way:\n\n*   If the CPU is idle and there are no available tasks to process, the CPU remains idle.\n*   If the CPU is idle and there are available tasks, the CPU will choose the one with the **shortest processing time**. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\n*   Once a task is started, the CPU will **process the entire task** without stopping.\n*   The CPU can finish a task then start a new one instantly.\n\nReturn _the order in which the CPU will process the tasks._\n\n",
          "input": "**Example 1:**\n\n**Input:** tasks = \\[\\[1,2\\],\\[2,4\\],\\[3,2\\],\\[4,1\\]\\]\n**Output:** \\[0,2,3,1\\]\n**Explanation:** The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n\n**Example 2:**\n\n**Input:** tasks = \\[\\[7,10\\],\\[7,12\\],\\[7,5\\],\\[7,4\\],\\[7,2\\]\\]\n**Output:** \\[4,3,2,0,1\\]\n**Explanation****:** The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\n\n**Constraints:**\n\n*   `tasks.length == n`\n*   `1 <= n <= 105`\n*   `1 <= enqueueTimei, processingTimei <= 109`To simulate the problem we first need to note that if at any point in time there are no enqueued tasks we need to wait to the smallest enqueue time of a non-processed element We need a data structure like a min-heap to support choosing the task with the smallest processing time from all the enqueued tasks",
          "output": "def minimum_teachings(n, languages, friendships):\n    language_users = {}\n    unconnected_users = set()\n\n    for u, v in friendships:\n        can_communicate = any(lang in languages[v-1] for lang in languages[u-1])\n        if not can_communicate:\n            unconnected_users.add(u)\n            unconnected_users.add(v)\n\n    res = len(unconnected_users)\n    for i in range(1, n+1):\n        cnt = sum(i not in languages[user-1] for user in unconnected_users)\n        res = min(res, cnt)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: The **XOR sum** of a list is the bitwise `XOR` of all its elements. If the list only contains one element, then its **XOR sum** will be equal to this element.\n\n*   For example, the **XOR sum** of `[1,2,3,4]` is equal to `1 XOR 2 XOR 3 XOR 4 = 4`, and the **XOR sum** of `[3]` is equal to `3`.\n\nYou are given two **0-indexed** arrays `arr1` and `arr2` that consist only of non-negative integers.\n\nConsider the list containing the result of `arr1[i] AND arr2[j]` (bitwise `AND`) for every `(i, j)` pair where `0 <= i < arr1.length` and `0 <= j < arr2.length`.\n\nReturn _the **XOR sum** of the aforementioned list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr1 = \\[1,2,3\\], arr2 = \\[6,5\\]\n**Output:** 0\n**Explanation:** The list = \\[1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5\\] = \\[0,1,2,0,2,1\\].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.\n\n**Example 2:**\n\n**Input:** arr1 = \\[12\\], arr2 = \\[4\\]\n**Output:** 4\n**Explanation:** The list = \\[12 AND 4\\] = \\[4\\]. The XOR sum = 4.\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length <= 105`\n*   `0 <= arr1[i], arr2[j] <= 109`Think about (a&b) ^ (a&c). Can you simplify this expression? It is equal to a&(b^c). Then, (arr1[i]&arr2[0])^(arr1[i]&arr2[1]).. = arr1[i]&(arr2[0]^arr2[1]^arr[2]...). Let arr2XorSum = (arr2[0]^arr2[1]^arr2[2]...), arr1XorSum = (arr1[0]^arr1[1]^arr1[2]...) so the final answer is (arr2XorSum&arr1[0]) ^ (arr2XorSum&arr1[1]) ^ (arr2XorSum&arr1[2]) ^ ... = arr2XorSum & arr1XorSum.",
          "output": "def decode(encoded):\n    n = len(encoded) + 1\n    total_xor = 0\n    for i in range(1, n + 1):\n        total_xor ^= i\n    encoded_xor = 0\n    for i in range(1, n - 1, 2):\n        encoded_xor ^= encoded[i]\n    perm = [total_xor ^ encoded_xor]\n    for i in range(1, n):\n        perm.append(perm[-1] ^ encoded[i - 1])\n    return perm\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n` (in base `10`) and a base `k`, return _the **sum** of the digits of_ `n` _**after** converting_ `n` _from base_ `10` _to base_ `k`.\n\nAfter converting, each digit should be interpreted as a base `10` number, and the sum should be returned in base `10`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 34, k = 6\n**Output:** 9\n**Explanation:** 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.\n\n**Example 2:**\n\n**Input:** n = 10, k = 10\n**Output:** 1\n**Explanation:** n is already in base 10. 1 + 0 = 1.\n\n**Constraints:**\n\n*   `1 <= n <= 100`\n*   `2 <= k <= 10`Convert the given number into base k. Use mod-10 to find what each digit is after the conversion and sum the digits.",
          "output": "def sum_base(n: int, k: int) -> int:\n    s = 0\n    while n:\n        s += n % k\n        n //= k\n    return s\n"
     },
     {
          "instruction": "Write python code for this problem: The **frequency** of an element is the number of times it occurs in an array.\n\nYou are given an integer array `nums` and an integer `k`. In one operation, you can choose an index of `nums` and increment the element at that index by `1`.\n\nReturn _the **maximum possible frequency** of an element after performing **at most**_ `k` _operations_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,4\\], k = 5\n**Output:** 3\n**Explanation:** Increment the first element three times and the second element two times to make nums = \\[4,4,4\\].\n4 has a frequency of 3.\n\n**Example 2:**\n\n**Input:** nums = \\[1,4,8,13\\], k = 5\n**Output:** 2\n**Explanation:** There are multiple optimal solutions:\n- Increment the first element three times to make nums = \\[4,4,8,13\\]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = \\[1,8,8,13\\]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = \\[1,4,13,13\\]. 13 has a frequency of 2.\n\n**Example 3:**\n\n**Input:** nums = \\[3,9,6\\], k = 2\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`\n*   `1 <= k <= 105`Note that you can try all values in a brute force manner and find the maximum frequency of that value. To find the maximum frequency of a value consider the biggest elements smaller than or equal to this value",
          "output": "def maxFrequency(nums: List[int], k: int) -> int:\n    nums.sort()\n    n, i, s, max_freq = len(nums), 0, 0, 0\n\n    for j in range(n):\n        s += nums[j]\n        while s + k < nums[j] * (j - i + 1):\n            s -= nums[i]\n            i += 1\n        max_freq = max(max_freq, j - i + 1)\n\n    return max_freq\n"
     },
     {
          "instruction": "Write python code for this problem: A string is considered **beautiful** if it satisfies the following conditions:\n\n*   Each of the 5 English vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) must appear **at least once** in it.\n*   The letters must be sorted in **alphabetical order** (i.e. all `'a'`s before `'e'`s, all `'e'`s before `'i'`s, etc.).\n\nFor example, strings `\"aeiou \"` and `\"aaaaaaeiiiioou \"` are considered **beautiful**, but `\"uaeio \"`, `\"aeoiu \"`, and `\"aaaeeeooo \"` are **not beautiful**.\n\nGiven a string `word` consisting of English vowels, return _the **length of the longest beautiful substring** of_ `word`_. If no such substring exists, return_ `0`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"aeiaaioaaaaeiiiiouuuooaauuaeiu \"\n**Output:** 13\n**Explanation:** The longest beautiful substring in word is  \"aaaaeiiiiouuu \" of length 13.\n\n**Example 2:**\n\n**Input:** word =  \"aeeeiiiioooauuuaeiou \"\n**Output:** 5\n**Explanation:** The longest beautiful substring in word is  \"aeiou \" of length 5.\n\n**Example 3:**\n\n**Input:** word =  \"a \"\n**Output:** 0\n**Explanation:** There is no beautiful substring, so return 0.\n\n**Constraints:**\n\n*   `1 <= word.length <= 5 * 105`\n*   `word` consists of characters `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.Start from each 'a' and find the longest beautiful substring starting at that index. Based on the current character decide if you should include the next character in the beautiful substring.",
          "output": "def decode(encoded, first):\n    arr = [first]\n    for num in encoded:\n        arr.append(arr[-1] ^ num)\n    return arr\n"
     },
     {
          "instruction": "Write python code for this problem: You want to build `n` new buildings in a city. The new buildings will be built in a line and are labeled from `1` to `n`.\n\nHowever, there are city restrictions on the heights of the new buildings:\n\n*   The height of each building must be a non-negative integer.\n*   The height of the first building **must** be `0`.\n*   The height difference between any two adjacent buildings **cannot exceed** `1`.\n\nAdditionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array `restrictions` where `restrictions[i] = [idi, maxHeighti]` indicates that building `idi` must have a height **less than or equal to** `maxHeighti`.\n\nIt is guaranteed that each building will appear **at most once** in `restrictions`, and building `1` will **not** be in `restrictions`.\n\nReturn _the **maximum possible height** of the **tallest** building_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, restrictions = \\[\\[2,1\\],\\[4,1\\]\\]\n**Output:** 2\n**Explanation:** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights \\[0,1,2,1,2\\], and the tallest building has a height of 2.\n\n**Example 2:**\n\n**Input:** n = 6, restrictions = \\[\\]\n**Output:** 5\n**Explanation:** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights \\[0,1,2,3,4,5\\], and the tallest building has a height of 5.\n\n**Example 3:**\n\n**Input:** n = 10, restrictions = \\[\\[5,3\\],\\[2,5\\],\\[7,4\\],\\[10,3\\]\\]\n**Output:** 5\n**Explanation:** The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights \\[0,1,2,3,3,4,4,5,4,3\\], and the tallest building has a height of 5.\n\n**Constraints:**\n\n*   `2 <= n <= 109`\n*   `0 <= restrictions.length <= min(n - 1, 105)`\n*   `2 <= idi <= n`\n*   `idi` is **unique**.\n*   `0 <= maxHeighti <= 109`Is it possible to find the max height if given the height range of a particular building? You can find the height range of a restricted building by doing 2 passes from the left and right.",
          "output": "from collections import defaultdict\n\ndef dfs(node, visited, graph, group):\n    if visited[node]:\n        return\n    visited[node] = 1\n    group.append(node)\n    for neighbor in graph[node]:\n        dfs(neighbor, visited, graph, group)\n\ndef minimumHammingDistance(source, target, allowedSwaps):\n    n = len(source)\n    graph = defaultdict(list)\n    for a, b in allowedSwaps:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    res = 0\n    visited = [0] * n\n    for i in range(n):\n        if not visited[i]:\n            group = []\n            dfs(i, visited, graph, group)\n            count = defaultdict(int)\n\n            for node in group:\n                count[source[node]] += 1\n            for node in group:\n                if count[target[node]] > 0:\n                    res += 1\n                    count[target[node]] -= 1\n\n    return n - res\n"
     },
     {
          "instruction": "Write python code for this problem: There are `m` boys and `n` girls in a class attending an upcoming party.\n\nYou are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most **one girl**, and a girl can accept at most **one invitation** from a boy.\n\nReturn _the **maximum** possible number of accepted invitations._\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,1\\],\n               \\[1,0,1\\],\n               \\[0,0,1\\]\\]\n**Output:** 3\n**Explanation:** The invitations are sent as follows:\n- The 1st boy invites the 2nd girl.\n- The 2nd boy invites the 1st girl.\n- The 3rd boy invites the 3rd girl.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0,1,0\\],\n               \\[1,0,0,0\\],\n               \\[0,0,1,0\\],\n               \\[1,1,1,0\\]\\]\n**Output:** 3\n**Explanation:** The invitations are sent as follows:\n-The 1st boy invites the 3rd girl.\n-The 2nd boy invites the 1st girl.\n-The 3rd boy invites no one.\n-The 4th boy invites the 2nd girl.\n\n**Constraints:**\n\n*   `grid.length == m`\n*   `grid[i].length == n`\n*   `1 <= m, n <= 200`\n*   `grid[i][j]` is either `0` or `1`.We can see that the problem can be represented as a directed graph with an edge from each boy to the girl he invited. We need to choose a set of edges such that no to source points in the graph (i.e., boys) have an edge with the same endpoint (i.e., the same girl). The problem is maximum bipartite matching in the graph.",
          "output": "def count_trees(pairs):\n    nodes = len(pairs) + 1\n    in_degrees = [0] * nodes\n    for x, y in pairs:\n        in_degrees[y] += 1\n    \n    res = 1\n    for in_degree in in_degrees[1:]:\n        res *= in_degree\n    \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\n\nA sentence can be **shuffled** by appending the **1-indexed word position** to each word then rearranging the words in the sentence.\n\n*   For example, the sentence `\"This is a sentence \"` can be shuffled as `\"sentence4 a3 is2 This1 \"` or `\"is2 sentence4 This1 a3 \"`.\n\nGiven a **shuffled sentence** `s` containing no more than `9` words, reconstruct and return _the original sentence_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"is2 sentence4 This1 a3 \"\n**Output:**  \"This is a sentence \"\n**Explanation:** Sort the words in s to their original positions  \"This1 is2 a3 sentence4 \", then remove the numbers.\n\n**Example 2:**\n\n**Input:** s =  \"Myself2 Me1 I4 and3 \"\n**Output:**  \"Me Myself and I \"\n**Explanation:** Sort the words in s to their original positions  \"Me1 Myself2 and3 I4 \", then remove the numbers.\n\n**Constraints:**\n\n*   `2 <= s.length <= 200`\n*   `s` consists of lowercase and uppercase English letters, spaces, and digits from `1` to `9`.\n*   The number of words in `s` is between `1` and `9`.\n*   The words in `s` are separated by a single space.\n*   `s` contains no leading or trailing spaces.\n\n1\\. All characters in a are strictly less than those in b (i.e., a\\[i\\] < b\\[i\\] for all i). 2. All characters in b are strictly less than those in a (i.e., a\\[i\\] > b\\[i\\] for all i). 3. All characters in a and b are the same (i.e., a\\[i\\] = b\\[i\\] for all i).Divide the string into the words as an array of strings Sort the words by removing the last character from each word and sorting according to it",
          "output": "def min_operations_to_satisfy_conditions(a: str, b: str) -> int:\n    same, less, greater = 0, 0, 0\n\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            same += 1\n        elif a[i] < b[i]:\n            less += 1\n        else:\n            greater += 1\n\n    return min(same + max(less, greater), less, greater)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integers `memory1` and `memory2` representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\n\nAt the `ith` second (starting from 1), `i` bits of memory are allocated to the stick with **more available memory** (or from the first memory stick if both have the same available memory). If neither stick has at least `i` bits of available memory, the program **crashes**.\n\nReturn _an array containing_ `[crashTime, memory1crash, memory2crash]`_, where_ `crashTime` _is the time (in seconds) when the program crashed and_ `memory1crash` _and_ `memory2crash` _are the available bits of memory in the first and second sticks respectively_.\n\n",
          "input": "**Example 1:**\n\n**Input:** memory1 = 2, memory2 = 2\n**Output:** \\[3,1,0\\]\n**Explanation:** The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively.\n\n**Example 2:**\n\n**Input:** memory1 = 8, memory2 = 11\n**Output:** \\[6,0,4\\]\n**Explanation:** The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.\n\n**Constraints:**\n\n*   `0 <= memory1, memory2 <= 231 - 1`What is the upper bound for the number of seconds? Simulate the process of allocating memory.",
          "output": "import heapq\n\ndef kthLargestValue(matrix, k):\n    m, n = len(matrix), len(matrix[0])\n    prefix_xor = [[0] * (n + 1) for _ in range(m + 1)]\n    pq = []\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_xor[i][j] = matrix[i - 1][j - 1] ^ prefix_xor[i - 1][j] ^ prefix_xor[i][j - 1] ^ prefix_xor[i - 1][j - 1]\n            heapq.heappush(pq, prefix_xor[i][j])\n            if len(pq) > k:\n                heapq.heappop(pq)\n    return pq[0]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` matrix of characters `box` representing a side-view of a box. Each cell of the box is one of the following:\n\n*   A stone `'#'`\n*   A stationary obstacle `'*'`\n*   Empty `'.'`\n\nThe box is rotated **90 degrees clockwise**, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity **does not** affect the obstacles' positions, and the inertia from the box's rotation **does not** affect the stones' horizontal positions.\n\nIt is **guaranteed** that each stone in `box` rests on an obstacle, another stone, or the bottom of the box.\n\nReturn _an_ `n x m` _matrix representing the box after the rotation described above_.\n\n",
          "input": "**Example 1:**\n\n**Input:** box = \\[\\[ \"# \", \". \", \"# \"\\]\\]\n**Output:** \\[\\[ \". \"\\],\n         \\[ \"# \"\\],\n         \\[ \"# \"\\]\\]\n\n**Example 2:**\n\n**Input:** box = \\[\\[ \"# \", \". \", \"\\* \", \". \"\\],\n              \\[ \"# \", \"# \", \"\\* \", \". \"\\]\\]\n**Output:** \\[\\[ \"# \", \". \"\\],\n         \\[ \"# \", \"# \"\\],\n         \\[ \"\\* \", \"\\* \"\\],\n         \\[ \". \", \". \"\\]\\]\n\n**Example 3:**\n\n**Input:** box = \\[\\[ \"# \", \"# \", \"\\* \", \". \", \"\\* \", \". \"\\],\n              \\[ \"# \", \"# \", \"# \", \"\\* \", \". \", \". \"\\],\n              \\[ \"# \", \"# \", \"# \", \". \", \"# \", \". \"\\]\\]\n**Output:** \\[\\[ \". \", \"# \", \"# \"\\],\n         \\[ \". \", \"# \", \"# \"\\],\n         \\[ \"# \", \"# \", \"\\* \"\\],\n         \\[ \"# \", \"\\* \", \". \"\\],\n         \\[ \"# \", \". \", \"\\* \"\\],\n         \\[ \"# \", \". \", \". \"\\]\\]\n\n**Constraints:**\n\n*   `m == box.length`\n*   `n == box[i].length`\n*   `1 <= m, n <= 500`\n*   `box[i][j]` is either `'#'`, `'*'`, or `'.'`.Rotate the box using the relation rotatedBox[i][j] = box[m - 1 - j][i]. Start iterating from the bottom of the box and for each empty cell check if there is any stone above it with no obstacles between them.",
          "output": "def min_boxes_touching_floor(n):\n    return (n + 1) // 2\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` **(0-indexed)** and two integers `target` and `start`, find an index `i` such that `nums[i] == target` and `abs(i - start)` is **minimized**. Note that `abs(x)` is the absolute value of `x`.\n\nReturn `abs(i - start)`.\n\nIt is **guaranteed** that `target` exists in `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5\\], target = 5, start = 3\n**Output:** 1\n**Explanation:** nums\\[4\\] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.\n\n**Example 2:**\n\n**Input:** nums = \\[1\\], target = 1, start = 0\n**Output:** 0\n**Explanation:** nums\\[0\\] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1,1,1,1,1,1,1,1\\], target = 1, start = 0\n**Output:** 0\n**Explanation:** Every value of nums is 1, but nums\\[0\\] minimizes abs(i - start), which is abs(0 - 0) = 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 104`\n*   `0 <= start < nums.length`\n*   `target` is in `nums`.Loop in both directions until you find the target element. For each index i such that nums[i] == target calculate abs(i - start).",
          "output": "def sum_of_unique_elements(nums):\n    elem_count = {}\n    for num in nums:\n        elem_count[num] = elem_count.get(num, 0) + 1\n    sum = 0\n    for elem, count in elem_count.items():\n        if count == 1:\n            sum += elem\n    return sum\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` that consists of only digits.\n\nCheck if we can split `s` into **two or more non-empty substrings** such that the **numerical values** of the substrings are in **descending order** and the **difference** between numerical values of every two **adjacent** **substrings** is equal to `1`.\n\n*   For example, the string `s = \"0090089 \"` can be split into `[ \"0090 \", \"089 \"]` with numerical values `[90,89]`. The values are in descending order and adjacent values differ by `1`, so this way is valid.\n*   Another example, the string `s = \"001 \"` can be split into `[ \"0 \", \"01 \"]`, `[ \"00 \", \"1 \"]`, or `[ \"0 \", \"0 \", \"1 \"]`. However all the ways are invalid because they have numerical values `[0,1]`, `[0,1]`, and `[0,0,1]` respectively, all of which are not in descending order.\n\nReturn `true` _if it is possible to split_ `s`\u200b\u200b\u200b\u200b\u200b\u200b _as described above__, or_ `false` _otherwise._\n\nA **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1234 \"\n**Output:** false\n**Explanation:** There is no valid way to split s.\n\n**Example 2:**\n\n**Input:** s =  \"050043 \"\n**Output:** true\n**Explanation:** s can be split into \\[ \"05 \",  \"004 \",  \"3 \"\\] with numerical values \\[5,4,3\\].\nThe values are in descending order with adjacent values differing by 1.\n\n**Example 3:**\n\n**Input:** s =  \"9080701 \"\n**Output:** false\n**Explanation:** There is no valid way to split s.\n\n**Constraints:**\n\n*   `1 <= s.length <= 20`\n*   `s` only consists of digits.One solution is to try all possible splits using backtrack Look out for trailing zeros in string",
          "output": "def maxAbsoluteSum(nums):\n    max_sum, min_sum, max_so_far, min_so_far = 0, 0, 0, 0\n    for num in nums:\n        max_so_far = max(num, max_so_far + num)\n        max_sum = max(max_sum, max_so_far)\n\n        min_so_far = min(num, min_so_far + num)\n        min_sum = min(min_sum, min_so_far)\n    return max(max_sum, abs(min_sum))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `intervals`, where `intervals[i] = [lefti, righti]` describes the `ith` interval starting at `lefti` and ending at `righti` **(inclusive)**. The **size** of an interval is defined as the number of integers it contains, or more formally `righti - lefti + 1`.\n\nYou are also given an integer array `queries`. The answer to the `jth` query is the **size of the smallest interval** `i` such that `lefti <= queries[j] <= righti`. If no such interval exists, the answer is `-1`.\n\nReturn _an array containing the answers to the queries_.\n\n",
          "input": "**Example 1:**\n\n**Input:** intervals = \\[\\[1,4\\],\\[2,4\\],\\[3,6\\],\\[4,4\\]\\], queries = \\[2,3,4,5\\]\n**Output:** \\[3,3,1,4\\]\n**Explanation:** The queries are processed as follows:\n- Query = 2: The interval \\[2,4\\] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval \\[2,4\\] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval \\[4,4\\] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval \\[3,6\\] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[2,3\\],\\[2,5\\],\\[1,8\\],\\[20,25\\]\\], queries = \\[2,19,5,22\\]\n**Output:** \\[2,-1,4,6\\]\n**Explanation:** The queries are processed as follows:\n- Query = 2: The interval \\[2,3\\] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval \\[2,5\\] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval \\[20,25\\] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.\n\n**Constraints:**\n\n*   `1 <= intervals.length <= 105`\n*   `1 <= queries.length <= 105`\n*   `intervals[i].length == 2`\n*   `1 <= lefti <= righti <= 107`\n*   `1 <= queries[j] <= 107`Is there a way to order the intervals and queries such that it takes less time to query? Is there a way to add and remove intervals by going from the smallest query to the largest query to find the minimum size?",
          "output": "from bisect import bisect_left\n\ndef maxValue(events, k):\n    events.sort(key=lambda x: x[1])\n    n = len(events)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        start = -1\n        for j in range(i - 1, 0, -1):\n            if events[j - 1][1] < events[i - 1][0]:\n                start = j\n                break\n\n        for j in range(1, k + 1):\n            if start == -1:\n                dp[i][j] = max(dp[i - 1][j], events[i - 1][2])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[start][j - 1] + events[i - 1][2])\n\n    return dp[n][k]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `num`, representing a large integer, and an integer `k`.\n\nWe call some integer **wonderful** if it is a **permutation** of the digits in `num` and is **greater in value** than `num`. There can be many wonderful integers. However, we only care about the **smallest-valued** ones.\n\n*   For example, when `num = \"5489355142 \"`:\n    *   The 1st smallest wonderful integer is `\"5489355214 \"`.\n    *   The 2nd smallest wonderful integer is `\"5489355241 \"`.\n    *   The 3rd smallest wonderful integer is `\"5489355412 \"`.\n    *   The 4th smallest wonderful integer is `\"5489355421 \"`.\n\nReturn _the **minimum number of adjacent digit swaps** that needs to be applied to_ `num` _to reach the_ `kth` _**smallest wonderful** integer_.\n\nThe tests are generated in such a way that `kth` smallest wonderful integer exists.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"5489355142 \", k = 4\n**Output:** 2\n**Explanation:** The 4th smallest wonderful number is  \"5489355421 \". To get this number:\n- Swap index 7 with index 8:  \"5489355142 \" ->  \"5489355412 \"\n- Swap index 8 with index 9:  \"5489355412 \" ->  \"5489355421 \"\n\n**Example 2:**\n\n**Input:** num =  \"11112 \", k = 4\n**Output:** 4\n**Explanation:** The 4th smallest wonderful number is  \"21111 \". To get this number:\n- Swap index 3 with index 4:  \"11112 \" ->  \"11121 \"\n- Swap index 2 with index 3:  \"11121 \" ->  \"11211 \"\n- Swap index 1 with index 2:  \"11211 \" ->  \"12111 \"\n- Swap index 0 with index 1:  \"12111 \" ->  \"21111 \"\n\n**Example 3:**\n\n**Input:** num =  \"00123 \", k = 1\n**Output:** 1\n**Explanation:** The 1st smallest wonderful number is  \"00132 \". To get this number:\n- Swap index 3 with index 4:  \"00123 \" ->  \"00132 \"\n\n**Constraints:**\n\n*   `2 <= num.length <= 1000`\n*   `1 <= k <= 1000`\n*   `num` only consists of digits.Find the next permutation of the given string k times. Try to move each element to its correct position and calculate the number of steps.",
          "output": "def min_length_after_operations(s: str) -> int:\n    a_count = s.count('a')\n    b_count = s.count('b')\n    c_count = s.count('c')\n\n    if a_count % 2 == b_count % 2 and b_count % 2 == c_count % 2:\n        return len(s) % 2\n    return (len(s) + 1) % 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a game of tag with your friends. In tag, people are divided into two teams: people who are \"it \", and people who are not \"it \". The people who are \"it \" want to catch as many people as possible who are not \"it \".\n\nYou are given a **0-indexed** integer array `team` containing only zeros (denoting people who are **not** \"it \") and ones (denoting people who are \"it \"), and an integer `dist`. A person who is \"it \" at index `i` can catch any **one** person whose index is in the range `[i - dist, i + dist]` (**inclusive**) and is **not** \"it \".\n\nReturn _the **maximum** number of people that the people who are \"it \" can catch_.\n\n",
          "input": "**Example 1:**\n\n**Input:** team = \\[0,1,0,1,0\\], dist = 3\n**Output:** 2\n**Explanation:**\nThe person who is  \"it \" at index 1 can catch people in the range \\[i-dist, i+dist\\] = \\[1-3, 1+3\\] = \\[-2, 4\\].\nThey can catch the person who is not  \"it \" at index 2.\nThe person who is  \"it \" at index 3 can catch people in the range \\[i-dist, i+dist\\] = \\[3-3, 3+3\\] = \\[0, 6\\].\nThey can catch the person who is not  \"it \" at index 0.\nThe person who is not  \"it \" at index 4 will not be caught because the people at indices 1 and 3 are already catching one person.\n\n**Example 2:**\n\n**Input:** team = \\[1\\], dist = 1\n**Output:** 0\n**Explanation:**\nThere are no people who are not  \"it \" to catch.\n\n**Example 3:**\n\n**Input:** team = \\[0\\], dist = 1\n**Output:** 0\n**Explanation:**\nThere are no people who are  \"it \" to catch people.\n\n**Constraints:**\n\n*   `1 <= team.length <= 105`\n*   `0 <= team[i] <= 1`\n*   `1 <= dist <= team.length`Try to use as much of the range of a person who is \"it\" as possible. Find the leftmost person who is \"it\" that has not caught anyone yet, and the leftmost person who is not \"it\" that has not been caught yet. If the person who is not \"it\" can be caught, pair them together and repeat the process. If the person who is not \"it\" cannot be caught, and the person who is not \"it\" is on the left of the person who is \"it\", find the next leftmost person who is not \"it\". If the person who is not \"it\" cannot be caught, and the person who is \"it\" is on the left of the person who is not \"it\", find the next leftmost person who is \"it\".",
          "output": "def minimum_xor_sum(nums1, nums2):\n    nums2.sort()\n    xor_sum = 0\n    for i in range(len(nums1)):\n        xor_sum += nums1[i] ^ nums2[i]\n    return xor_sum\n"
     },
     {
          "instruction": "Write python code for this problem: An experiment is being conducted in a lab. To ensure accuracy, there are **two** sensors collecting data simultaneously. You are given two arrays `sensor1` and `sensor2`, where `sensor1[i]` and `sensor2[i]` are the `ith` data points collected by the two sensors.\n\nHowever, this type of sensor has a chance of being defective, which causes **exactly one** data point to be dropped. After the data is dropped, all the data points to the **right** of the dropped data are **shifted** one place to the left, and the last data point is replaced with some **random value**. It is guaranteed that this random value will **not** be equal to the dropped value.\n\n*   For example, if the correct data is `[1,2,**3**,4,5]` and `3` is dropped, the sensor could return `[1,2,4,5,**7**]` (the last position can be **any** value, not just `7`).\n\nWe know that there is a defect in **at most one** of the sensors. Return _the sensor number (_`1` _or_ `2`_) with the defect. If there is **no defect** in either sensor or if it is **impossible** to determine the defective sensor, return_ `-1`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** sensor1 = \\[2,3,4,5\\], sensor2 = \\[2,1,3,4\\]\n**Output:** 1\n**Explanation:** Sensor 2 has the correct values.\nThe second data point from sensor 2 is dropped, and the last value of sensor 1 is replaced by a 5.\n\n**Example 2:**\n\n**Input:** sensor1 = \\[2,2,2,2,2\\], sensor2 = \\[2,2,2,2,5\\]\n**Output:** -1\n**Explanation:** It is impossible to determine which sensor has a defect.\nDropping the last value for either sensor could produce the output for the other sensor.\n\n**Example 3:**\n\n**Input:** sensor1 = \\[2,3,2,2,3,2\\], sensor2 = \\[2,3,2,3,2,7\\]\n**Output:** 2\n**Explanation:** Sensor 1 has the correct values.\nThe fourth data point from sensor 1 is dropped, and the last value of sensor 1 is replaced by a 7.\n\n**Constraints:**\n\n*   `sensor1.length == sensor2.length`\n*   `1 <= sensor1.length <= 100`\n*   `1 <= sensor1[i], sensor2[i] <= 100`Check for a common prefix of the two arrays. After this common prefix, there should be one array similar to the other but shifted by one. If both arrays can be shifted, return -1.",
          "output": "def maximizeXor(nums, queries):\n    trie = {}\n    nums.sort()\n\n    new_queries = sorted([(x, m, i) for i, (x, m) in enumerate(queries)], key=lambda x: x[1])\n\n    ans = [0] * len(queries)\n\n    idx = 0\n    for x, m, i in new_queries:\n        while idx < len(nums) and nums[idx] <= m:\n            t = nums[idx]\n            idx += 1\n            cur = trie\n            for j in range(31, -1, -1):\n                bit = (t >> j) & 1\n                cur = cur.setdefault(bit, {})\n        cur = trie\n        xor_value = 0\n        for j in range(31, -1, -1):\n            bit = (x >> j) & 1\n            if 1 ^ bit in cur:\n                cur = cur[1 ^ bit]\n                xor_value |= 1 << j\n            else:\n                cur = cur[bit]\n        ans[i] = xor_value if cur else -1\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a linked list, find all the values that appear **more than once** in the list and delete the nodes that have any of those values.\n\nReturn _the linked list after the deletions._\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,2,3,2\\]\n**Output:** \\[1,3\\]\n**Explanation:** 2 appears twice in the linked list, so all 2's should be deleted. After deleting all 2's, we are left with \\[1,3\\].\n\n**Example 2:**\n\n**Input:** head = \\[2,1,1,2\\]\n**Output:** \\[\\]\n**Explanation:** 2 and 1 both appear twice. All the elements should be deleted.\n\n**Example 3:**\n\n**Input:** head = \\[3,2,2,1,3,2,4\\]\n**Output:** \\[1,4\\]\n**Explanation:** 3 appears twice and 2 appears three times. After deleting all 3's and 2's, we are left with \\[1,4\\].\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 105]`\n*   `1 <= Node.val <= 105`Is there a way we can know beforehand which nodes to delete? Count the number of appearances for each number.",
          "output": "from collections import defaultdict\nfrom typing import List\n\nMOD = 10**9 + 7\n\ndef product_ways(queries: List[List[int]]) -> List[int]:\n    res = []\n    for n, k in queries:\n        pf = []\n        pm = defaultdict(int)\n\n        i = 2\n        while i * i <= k:\n            cnt = 0\n            while k % i == 0:\n                cnt += 1\n                k //= i\n            if cnt:\n                pf.append(cnt)\n                pm[cnt] += 1\n            i += 1\n\n        if k > 1:\n            pm[k] += 1\n            pf.append(1)\n\n        ans = 1\n        for p in pf:\n            ans = (ans * (p * (n - 1) + 1)) % MOD\n\n        res.append(ans)\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `logs` where each `logs[i] = [birthi, deathi]` indicates the birth and death years of the `ith` person.\n\nThe **population** of some year `x` is the number of people alive during that year. The `ith` person is counted in year `x`'s population if `x` is in the **inclusive** range `[birthi, deathi - 1]`. Note that the person is **not** counted in the year that they die.\n\nReturn _the **earliest** year with the **maximum population**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** logs = \\[\\[1993,1999\\],\\[2000,2010\\]\\]\n**Output:** 1993\n**Explanation:** The maximum population is 1, and 1993 is the earliest year with this population.\n\n**Example 2:**\n\n**Input:** logs = \\[\\[1950,1961\\],\\[1960,1971\\],\\[1970,1981\\]\\]\n**Output:** 1960\n**Explanation:** \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.\n\n**Constraints:**\n\n*   `1 <= logs.length <= 100`\n*   `1950 <= birthi < deathi <= 2050`For each year find the number of people whose birth_i \u2264 year and death_i > year. Find the maximum value between all years.",
          "output": "def maxAliveYear(logs):\n    years = [0] * 101\n    for log in logs:\n        years[log[0] - 1950] += 1\n        years[log[1] - 1950] -= 1\n    max_population = years[0]\n    max_year = 1950\n    for i in range(1, 101):\n        years[i] += years[i - 1]\n        if years[i] > max_population:\n            max_population = years[i]\n            max_year = i + 1950\n    return max_year\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **non-increasing 0-indexed** integer arrays `nums1`\u200b\u200b\u200b\u200b\u200b\u200b and `nums2`\u200b\u200b\u200b\u200b\u200b\u200b.\n\nA pair of indices `(i, j)`, where `0 <= i < nums1.length` and `0 <= j < nums2.length`, is **valid** if both `i <= j` and `nums1[i] <= nums2[j]`. The **distance** of the pair is `j - i`\u200b\u200b\u200b\u200b.\n\nReturn _the **maximum distance** of any **valid** pair_ `(i, j)`_. If there are no valid pairs, return_ `0`.\n\nAn array `arr` is **non-increasing** if `arr[i-1] >= arr[i]` for every `1 <= i < arr.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[55,30,5,4,2\\], nums2 = \\[100,20,10,10,5\\]\n**Output:** 2\n**Explanation:** The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4).\n\n**Example 2:**\n\n**Input:** nums1 = \\[2,2,2\\], nums2 = \\[10,10,1\\]\n**Output:** 1\n**Explanation:** The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1).\n\n**Example 3:**\n\n**Input:** nums1 = \\[30,29,19,5\\], nums2 = \\[25,25,25,25,25\\]\n**Output:** 2\n**Explanation:** The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4).\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 105`\n*   `1 <= nums1[i], nums2[j] <= 105`\n*   Both `nums1` and `nums2` are **non-increasing**.Since both arrays are sorted in a non-increasing way this means that for each value in the first array. We can find the farthest value smaller than it using binary search. There is another solution using a two pointers approach since the first array is non-increasing the farthest j such that nums2[j] \u2265 nums1[i] is at least as far as the farthest j such that nums2[j] \u2265 nums1[i-1]",
          "output": "def maxDistance(nums1, nums2):\n    i, j, maxDist = 0, 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] > nums2[j]:\n            i += 1\n        else:\n            maxDist = max(maxDist, j - i)\n            j += 1\n    return maxDist\n"
     },
     {
          "instruction": "Write python code for this problem: The **min-product** of an array is equal to the **minimum value** in the array **multiplied by** the array's **sum**.\n\n*   For example, the array `[3,2,5]` (minimum value is `2`) has a min-product of `2 * (3+2+5) = 2 * 10 = 20`.\n\nGiven an array of integers `nums`, return _the **maximum min-product** of any **non-empty subarray** of_ `nums`. Since the answer may be large, return it **modulo** `109 + 7`.\n\nNote that the min-product should be maximized **before** performing the modulo operation. Testcases are generated such that the maximum min-product **without** modulo will fit in a **64-bit signed integer**.\n\nA **subarray** is a **contiguous** part of an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,2\\]\n**Output:** 14\n**Explanation:** The maximum min-product is achieved with the subarray \\[2,3,2\\] (minimum value is 2).\n2 \\* (2+3+2) = 2 \\* 7 = 14.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,3,1,2\\]\n**Output:** 18\n**Explanation:** The maximum min-product is achieved with the subarray \\[3,3\\] (minimum value is 3).\n3 \\* (3+3) = 3 \\* 6 = 18.\n\n**Example 3:**\n\n**Input:** nums = \\[3,1,5,6,4,2\\]\n**Output:** 60\n**Explanation:** The maximum min-product is achieved with the subarray \\[5,6,4\\] (minimum value is 4).\n4 \\* (5+6+4) = 4 \\* 15 = 60.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 107`Is there a way we can sort the elements to simplify the problem? Can we find the maximum min-product for every value in the array?",
          "output": "def maxSumMinProduct(nums: list[int]) -> int:\n    MOD = int(1e9 + 7)\n    max_product = 0\n    stk = []\n    prefix_sum = [0] * (len(nums) + 1)\n\n    for i in range(len(nums)):\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n    for i in range(len(nums)):\n        while stk and nums[stk[-1]] > nums[i]:\n            min_val = nums[stk.pop()]\n            max_product = max(max_product, min_val * (prefix_sum[i] - prefix_sum[stk[-1] + 1 if stk else 0]))\n        stk.append(i)\n       \n    while stk:\n        min_val = nums[stk.pop()]\n        max_product = max(max_product, min_val * (prefix_sum[len(nums)] - prefix_sum[stk[-1] + 1 if stk else 0]))\n\n    return max_product % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: There is a **directed graph** of `n` colored nodes and `m` edges. The nodes are numbered from `0` to `n - 1`.\n\nYou are given a string `colors` where `colors[i]` is a lowercase English letter representing the **color** of the `ith` node in this graph (**0-indexed**). You are also given a 2D array `edges` where `edges[j] = [aj, bj]` indicates that there is a **directed edge** from node `aj` to node `bj`.\n\nA valid **path** in the graph is a sequence of nodes `x1 -> x2 -> x3 -> ... -> xk` such that there is a directed edge from `xi` to `xi+1` for every `1 <= i < k`. The **color value** of the path is the number of nodes that are colored the **most frequently** occurring color along that path.\n\nReturn _the **largest color value** of any valid path in the given graph, or_ `-1` _if the graph contains a cycle_.\n\n",
          "input": "**Example 1:**\n\n**Input:** colors =  \"abaca \", edges = \\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[3,4\\]\\]\n**Output:** 3\n**Explanation:** The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored ` \"a \" (red in the above image)`.\n\n**Example 2:**\n\n**Input:** colors =  \"a \", edges = \\[\\[0,0\\]\\]\n**Output:** -1\n**Explanation:** There is a cycle from 0 to 0.\n\n**Constraints:**\n\n*   `n == colors.length`\n*   `m == edges.length`\n*   `1 <= n <= 105`\n*   `0 <= m <= 105`\n*   `colors` consists of lowercase English letters.\n*   `0 <= aj, bj < n`Use topological sort. let dp[u][c] := the maximum count of vertices with color c of any path starting from vertex u. (by JerryJin2905)",
          "output": "from collections import deque\n\ndef largestPathValue(colors: str, edges: List[List[int]]) -> int:\n    n = len(colors)\n    adj = [[] for _ in range(n)]\n    \n    in_degrees = [0] * n\n    for e in edges:\n        adj[e[0]].append(e[1])\n        in_degrees[e[1]] += 1\n        \n    color_counts = [[0] * 26 for _ in range(n)]\n    queue = deque()\n    \n    for i in range(n):\n        if in_degrees[i] == 0:\n            queue.append(i)\n            \n    visited_nodes = 0\n    max_color_value = 0\n    \n    while queue:\n        node = queue.pop()\n        color = ord(colors[node]) - ord('a')\n        visited_nodes += 1\n        \n        for neighbor in adj[node]:\n            for c in range(26):\n                count = color_counts[node][c] + (c == color)\n                color_counts[neighbor][c] = max(color_counts[neighbor][c], count)\n                max_color_value = max(max_color_value, count)\n                \n            in_degrees[neighbor] -= 1\n            if in_degrees[neighbor] == 0:\n                queue.append(neighbor)\n                \n    return max_color_value if visited_nodes == n else -1\n"
     },
     {
          "instruction": "Write python code for this problem: A string is **good** if there are no repeated characters.\n\nGiven a string `s`\u200b\u200b\u200b\u200b\u200b, return _the number of **good substrings** of length **three** in_ `s`\u200b\u200b\u200b\u200b\u200b\u200b.\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"xyzzaz \"\n**Output:** 1\n**Explanation:** There are 4 substrings of size 3:  \"xyz \",  \"yzz \",  \"zza \", and  \"zaz \". \nThe only good substring of length 3 is  \"xyz \".\n\n**Example 2:**\n\n**Input:** s =  \"aababcabc \"\n**Output:** 4\n**Explanation:** There are 7 substrings of size 3:  \"aab \",  \"aba \",  \"bab \",  \"abc \",  \"bca \",  \"cab \", and  \"abc \".\nThe good substrings are  \"abc \",  \"bca \",  \"cab \", and  \"abc \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s`\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.Try using a set to find out the number of distinct characters in a substring.",
          "output": "from collections import deque\n\ndef highest_island(is_water):\n    m, n = len(is_water), len(is_water[0])\n    height = [[-1] * n for _ in range(m)]\n    q = deque()\n\n    for i in range(m):\n        for j in range(n):\n            if is_water[i][j] == 1:\n                height[i][j] = 0\n                q.append((i, j))\n\n    dx = [-1, 0, 1, 0]\n    dy = [0, 1, 0, -1]\n\n    while q:\n        x, y = q.popleft()\n\n        for i in range(4):\n            newX = x + dx[i]\n            newY = y + dy[i]\n\n            if 0 <= newX < m and 0 <= newY < n and height[newX][newY] == -1:\n                height[newX][newY] = height[x][y] + 1\n                q.append((newX, newY))\n\n    return height\n"
     },
     {
          "instruction": "Write python code for this problem: The **pair sum** of a pair `(a,b)` is equal to `a + b`. The **maximum pair sum** is the largest **pair sum** in a list of pairs.\n\n*   For example, if we have pairs `(1,5)`, `(2,3)`, and `(4,4)`, the **maximum pair sum** would be `max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8`.\n\nGiven an array `nums` of **even** length `n`, pair up the elements of `nums` into `n / 2` pairs such that:\n\n*   Each element of `nums` is in **exactly one** pair, and\n*   The **maximum pair sum** is **minimized**.\n\nReturn _the minimized **maximum pair sum** after optimally pairing up the elements_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,5,2,3\\]\n**Output:** 7\n**Explanation:** The elements can be paired up into pairs (3,3) and (5,2).\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.\n\n**Example 2:**\n\n**Input:** nums = \\[3,5,4,2,4,6\\]\n**Output:** 8\n**Explanation:** The elements can be paired up into pairs (3,5), (4,4), and (6,2).\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `2 <= n <= 105`\n*   `n` is **even**.\n*   `1 <= nums[i] <= 105`Would sorting help find the optimal order? Given a specific element, how would you minimize its specific pairwise sum?",
          "output": "def minPairSum(nums):\n    nums.sort()\n    max_sum = 0\n    for i in range(len(nums) // 2):\n        max_sum = max(max_sum, nums[i] + nums[-1 - i])\n    return max_sum\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2` of length `n`.\n\nThe **XOR sum** of the two integer arrays is `(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1])` (**0-indexed**).\n\n*   For example, the **XOR sum** of `[1,2,3]` and `[3,2,1]` is equal to `(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4`.\n\nRearrange the elements of `nums2` such that the resulting **XOR sum** is **minimized**.\n\nReturn _the **XOR sum** after the rearrangement_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2\\], nums2 = \\[2,3\\]\n**Output:** 2\n**Explanation:** Rearrange `nums2` so that it becomes `[3,2]`.\nThe XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2.\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,0,3\\], nums2 = \\[5,3,4\\]\n**Output:** 8\n**Explanation:** Rearrange `nums2` so that it becomes `[5,4,3]`. \nThe XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.\n\n**Constraints:**\n\n*   `n == nums1.length`\n*   `n == nums2.length`\n*   `1 <= n <= 14`\n*   `0 <= nums1[i], nums2[i] <= 107`Since n <= 14, we can consider every subset of nums2. We can represent every subset of nums2 using bitmasks.",
          "output": "def max_score(a: int, b: int, c: int) -> int:\n    return (a + b + c - max(a, b, c)) // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer matrix `grid`\u200b\u200b\u200b.\n\nA **rhombus sum** is the sum of the elements that form **the** **border** of a regular rhombus shape in `grid`\u200b\u200b\u200b. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each **rhombus sum**:\n\nNote that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\n\nReturn _the biggest three **distinct rhombus sums** in the_ `grid` _in **descending order**__. If there are less than three distinct values, return all of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[3,4,5,1,3\\],\\[3,3,4,2,3\\],\\[20,30,200,40,10\\],\\[1,5,5,4,1\\],\\[4,3,2,2,5\\]\\]\n**Output:** \\[228,216,211\\]\n**Explanation:** The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 20 + 3 + 200 + 5 = 228\n- Red: 200 + 2 + 10 + 4 = 216\n- Green: 5 + 200 + 4 + 2 = 211\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** \\[20,9,8\\]\n**Explanation:** The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 4 + 2 + 6 + 8 = 20\n- Red: 9 (area 0 rhombus in the bottom right corner)\n- Green: 8 (area 0 rhombus in the bottom middle)\n\n**Example 3:**\n\n**Input:** grid = \\[\\[7,7,7\\]\\]\n**Output:** \\[7\\]\n**Explanation:** All three possible rhombus sums are the same, so return \\[7\\].\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `1 <= grid[i][j] <= 105`You need to maintain only the biggest 3 distinct sums The limits are small enough for you to iterate over all rhombus sizes then iterate over all possible borders to get the sums",
          "output": "def check(nums):\n    count = 0\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or nums[0] >= nums[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `head` of a singly linked list that is sorted in **non-decreasing** order using the **absolute values** of its nodes, return _the list sorted in **non-decreasing** order using the **actual values** of its nodes_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[0,2,-5,5,10,-10\\]\n**Output:** \\[-10,-5,0,2,5,10\\]\n**Explanation:**\nThe list sorted in non-descending order using the absolute values of the nodes is \\[0,2,-5,5,10,-10\\].\nThe list sorted in non-descending order using the actual values is \\[-10,-5,0,2,5,10\\].\n\n**Example 2:**\n\n**Input:** head = \\[0,1,2\\]\n**Output:** \\[0,1,2\\]\n**Explanation:**\nThe linked list is already sorted in non-decreasing order.\n\n**Example 3:**\n\n**Input:** head = \\[1\\]\n**Output:** \\[1\\]\n**Explanation:**\nThe linked list is already sorted in non-decreasing order.\n\n**Constraints:**\n\n*   The number of nodes in the list is the range `[1, 105]`.\n*   `-5000 <= Node.val <= 5000`\n*   `head` is sorted in non-decreasing order using the absolute value of its nodes.\n\n**Follow up:**\n\n*   Can you think of a solution with `O(n)` time complexity?The nodes with positive values are already in the correct order. Nodes with negative values need to be moved to the front. Nodes with negative values are in reversed order.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef sortedList(head):\n    if not head or not head.next:\n        return head\n\n    prev = head\n    cur = head.next\n\n    while cur:\n        if cur.val < prev.val:\n            prev.next = cur.next\n            cur.next = head\n            head = cur\n            cur = prev\n        else:\n            prev = cur\n        cur = cur.next\n    return head\n"
     },
     {
          "instruction": "Write python code for this problem: The **XOR total** of an array is defined as the bitwise `XOR` of **all its elements**, or `0` if the array is **empty**.\n\n*   For example, the **XOR total** of the array `[2,5,6]` is `2 XOR 5 XOR 6 = 1`.\n\nGiven an array `nums`, return _the **sum** of all **XOR totals** for every **subset** of_ `nums`.\n\n**Note:** Subsets with the **same** elements should be counted **multiple** times.\n\nAn array `a` is a **subset** of an array `b` if `a` can be obtained from `b` by deleting some (possibly zero) elements of `b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3\\]\n**Output:** 6\n**Explanation:** The 4 subsets of \\[1,3\\] are:\n- The empty subset has an XOR total of 0.\n- \\[1\\] has an XOR total of 1.\n- \\[3\\] has an XOR total of 3.\n- \\[1,3\\] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6\n\n**Example 2:**\n\n**Input:** nums = \\[5,1,6\\]\n**Output:** 28\n**Explanation:** The 8 subsets of \\[5,1,6\\] are:\n- The empty subset has an XOR total of 0.\n- \\[5\\] has an XOR total of 5.\n- \\[1\\] has an XOR total of 1.\n- \\[6\\] has an XOR total of 6.\n- \\[5,1\\] has an XOR total of 5 XOR 1 = 4.\n- \\[5,6\\] has an XOR total of 5 XOR 6 = 3.\n- \\[1,6\\] has an XOR total of 1 XOR 6 = 7.\n- \\[5,1,6\\] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28\n\n**Example 3:**\n\n**Input:** nums = \\[3,4,5,6,7,8\\]\n**Output:** 480\n**Explanation:** The sum of all XOR totals for every subset is 480.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 12`\n*   `1 <= nums[i] <= 20`Is there a way to iterate through all the subsets of the array? Can we use recursion to efficiently iterate through all the subsets?",
          "output": "def subsetXORSum(nums):\n    ans = 0\n    n = len(nums)\n    max_val = 1 << n\n    for i in range(1, max_val):\n        xor_total = 0\n        for j in range(n):\n            if i & (1 << j):\n                xor_total ^= nums[j]\n        ans += xor_total\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s`, return _the **minimum** number of character swaps to make it **alternating**, or_ `-1` _if it is impossible._\n\nThe string is called **alternating** if no two adjacent characters are equal. For example, the strings `\"010 \"` and `\"1010 \"` are alternating, while the string `\"0100 \"` is not.\n\nAny two characters may be swapped, even if they are **not adjacent**.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"111000 \"\n**Output:** 1\n**Explanation:** Swap positions 1 and 4:  \"111000 \" ->  \"101010 \"\nThe string is now alternating.\n\n**Example 2:**\n\n**Input:** s =  \"010 \"\n**Output:** 0\n**Explanation:** The string is already alternating, no swaps are needed.\n\n**Example 3:**\n\n**Input:** s =  \"1110 \"\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'0'` or `'1'`.Think about all valid strings of length n. Try to count the mismatched positions with each valid string of length n.",
          "output": "def minSwaps(s):\n    zeroCount = s.count('0')\n    oneCount = len(s) - zeroCount\n\n    if abs(zeroCount - oneCount) > 1:\n        return -1\n\n    swaps1 = swaps2 = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c != '0':\n            swaps1 += 1\n        if i % 2 == 1 and c != '1':\n            swaps1 += 1\n    swaps1 = swaps1 // 2\n\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c != '1':\n            swaps2 += 1\n        if i % 2 == 1 and c != '0':\n            swaps2 += 1\n    swaps2 = swaps2 // 2\n\n    if zeroCount == oneCount:\n        return min(swaps1, swaps2)\n    return swaps2 if zeroCount > oneCount else swaps1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integer arrays `nums1` and `nums2`. You are tasked to implement a data structure that supports queries of two types:\n\n1.  **Add** a positive integer to an element of a given index in the array `nums2`.\n2.  **Count** the number of pairs `(i, j)` such that `nums1[i] + nums2[j]` equals a given value (`0 <= i < nums1.length` and `0 <= j < nums2.length`).\n\nImplement the `FindSumPairs` class:\n\n*   `FindSumPairs(int[] nums1, int[] nums2)` Initializes the `FindSumPairs` object with two integer arrays `nums1` and `nums2`.\n*   `void add(int index, int val)` Adds `val` to `nums2[index]`, i.e., apply `nums2[index] += val`.\n*   `int count(int tot)` Returns the number of pairs `(i, j)` such that `nums1[i] + nums2[j] == tot`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"FindSumPairs \",  \"count \",  \"add \",  \"count \",  \"count \",  \"add \",  \"add \",  \"count \"\\]\n\\[\\[\\[1, 1, 2, 2, 2, 3\\], \\[1, 4, 5, 2, 5, 4\\]\\], \\[7\\], \\[3, 2\\], \\[8\\], \\[4\\], \\[0, 1\\], \\[1, 1\\], \\[7\\]\\]\n**Output**\n\\[null, 8, null, 2, 1, null, null, 11\\]\n\n**Explanation**\nFindSumPairs findSumPairs = new FindSumPairs(\\[1, 1, 2, 2, 2, 3\\], \\[1, 4, 5, 2, 5, 4\\]);\nfindSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = \\[1,4,5,**4**`,5,4`\\]\nfindSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = \\[**`2`**,4,5,4`,5,4`\\]\nfindSumPairs.add(1, 1); // now nums2 = \\[`2`,**5**,5,4`,5,4`\\]\nfindSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4\n\n**Constraints:**\n\n*   `1 <= nums1.length <= 1000`\n*   `1 <= nums2.length <= 105`\n*   `1 <= nums1[i] <= 109`\n*   `1 <= nums2[i] <= 105`\n*   `0 <= index < nums2.length`\n*   `1 <= val <= 105`\n*   `1 <= tot <= 109`\n*   At most `1000` calls are made to `add` and `count` **each**.The length of nums1 is small in comparison to that of nums2 If we iterate over elements of nums1 we just need to find the count of tot - element for all elements in nums1",
          "output": "from collections import defaultdict\n\nclass FindSumPairs:\n    def __init__(self, nums1: list[int], nums2: list[int]):\n        self.nums1 = nums1\n        self.nums2 = nums2\n        self.nums2_map = defaultdict(int)\n        for num in nums2:\n            self.nums2_map[num] += 1\n\n    def add(self, index: int, val: int) -> None:\n        self.nums2_map[self.nums2[index]] -= 1\n        self.nums2[index] += val\n        self.nums2_map[self.nums2[index]] += 1\n\n    def count(self, tot: int) -> int:\n        return sum(self.nums2_map.get(tot - num, 0) for num in self.nums1)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` uniquely-sized sticks whose lengths are integers from `1` to `n`. You want to arrange the sticks such that **exactly** `k` sticks are **visible** from the left. A stick is **visible** from the left if there are no **longer** sticks to the **left** of it.\n\n*   For example, if the sticks are arranged `[1,3,2,5,4]`, then the sticks with lengths `1`, `3`, and `5` are visible from the left.\n\nGiven `n` and `k`, return _the **number** of such arrangements_. Since the answer may be large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, k = 2\n**Output:** 3\n**Explanation:** \\[1,3,2\\], \\[2,3,1\\], and \\[2,1,3\\] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined.\n\n**Example 2:**\n\n**Input:** n = 5, k = 5\n**Output:** 1\n**Explanation:** \\[1,2,3,4,5\\] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined.\n\n**Example 3:**\n\n**Input:** n = 20, k = 11\n**Output:** 647427950\n**Explanation:** There are 647427950 (mod 109 \\+ 7) ways to rearrange the sticks such that exactly 11 sticks are visible.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `1 <= k <= n`Is there a way to build the solution from a base case? How many ways are there if we fix the position of one stick?",
          "output": "from collections import defaultdict\n\ndef restoreArray(adjacentPairs):\n    graph = defaultdict(list)\n    for pair in adjacentPairs:\n        graph[pair[0]].append(pair[1])\n        graph[pair[1]].append(pair[0])\n\n    n = len(graph)\n    nums = [0] * n\n    for key, nodes in graph.items():\n        if len(nodes) == 1:\n            nums[0] = key\n            break\n\n    nums[1] = graph[nums[0]][0]\n    for i in range(2, n):\n        nums[i] = (graph[nums[i - 1]][1]\n                   if (nums[i - 2] == graph[nums[i - 1]][0])\n                   else graph[nums[i - 1]][0])\n\n    return nums\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a numeric string `num`, representing a very large **palindrome**.\n\nReturn _the **smallest palindrome larger than**_ `num` _that can be created by rearranging its digits. If no such palindrome exists, return an empty string_ `\" \"`.\n\nA **palindrome** is a number that reads the same backward as forward.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"1221 \"\n**Output:**  \"2112 \"\n**Explanation:** The next palindrome larger than  \"1221 \" is  \"2112 \".\n\n**Example 2:**\n\n**Input:** num =  \"32123 \"\n**Output:**  \" \"\n**Explanation:** No palindromes larger than  \"32123 \" can be made by rearranging the digits.\n\n**Example 3:**\n\n**Input:** num =  \"45544554 \"\n**Output:**  \"54455445 \"\n**Explanation:** The next palindrome larger than  \"45544554 \" is  \"54455445 \".\n\n**Constraints:**\n\n*   `1 <= num.length <= 105`\n*   `num` is a **palindrome**.Is it possible to swap one character in the first half of the palindrome to make the next one? Are there different cases for when the length is odd and even?",
          "output": "from itertools import permutations\n\ndef nextPalindrome(num: str) -> str:\n    n = len(num)\n    first_half = num[:(n + 1) // 2]\n    candidates = sorted(set(int(\"\".join(p)) for p in permutations(first_half)))\n\n    for c in candidates:\n        c_str = str(c)\n        second_half = c_str[::-1]\n        if n % 2 == 1: second_half = second_half[1:]\n        candidate_str = c_str + second_half\n\n        if candidate_str > num:\n            return candidate_str\n\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: Given a binary string `s`, return `true` _if the **longest** contiguous segment of_ `1`'_s is **strictly longer** than the **longest** contiguous segment of_ `0`'_s in_ `s`, or return `false` _otherwise_.\n\n*   For example, in `s = \"110100010 \"` the longest continuous segment of `1`s has length `2`, and the longest continuous segment of `0`s has length `3`.\n\nNote that if there are no `0`'s, then the longest continuous segment of `0`'s is considered to have a length `0`. The same applies if there is no `1`'s.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1101 \"\n**Output:** true\n**Explanation:**\nThe longest contiguous segment of 1s has length 2:  \"1101 \"\nThe longest contiguous segment of 0s has length 1:  \"1101 \"\nThe segment of 1s is longer, so return true.\n\n**Example 2:**\n\n**Input:** s =  \"111000 \"\n**Output:** false\n**Explanation:**\nThe longest contiguous segment of 1s has length 3:  \"111000 \"\nThe longest contiguous segment of 0s has length 3:  \"111000 \"\nThe segment of 1s is not longer, so return false.\n\n**Example 3:**\n\n**Input:** s =  \"110100010 \"\n**Output:** false\n**Explanation:**\nThe longest contiguous segment of 1s has length 2:  \"110100010 \"\nThe longest contiguous segment of 0s has length 3:  \"110100010 \"\nThe segment of 1s is not longer, so return false.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s[i]` is either `'0'` or `'1'`.Check every possible segment of 0s and 1s. Is there a way to iterate through the string to keep track of the current character and its count?",
          "output": "def checkZeroOnes(s: str) -> bool:\n    max_ones, max_zeros, current_ones, current_zeros = 0, 0, 0, 0\n    for c in s:\n        if c == '1':\n            current_ones += 1\n            current_zeros = 0\n        else:\n            current_zeros += 1\n            current_ones = 0\n        max_ones = max(max_ones, current_ones)\n        max_zeros = max(max_zeros, current_zeros)\n    return max_ones > max_zeros\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a floating-point number `hour`, representing the amount of time you have to reach the office. To commute to the office, you must take `n` trains in sequential order. You are also given an integer array `dist` of length `n`, where `dist[i]` describes the distance (in kilometers) of the `ith` train ride.\n\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\n\n*   For example, if the `1st` train ride takes `1.5` hours, you must wait for an additional `0.5` hours before you can depart on the `2nd` train ride at the 2 hour mark.\n\nReturn _the **minimum positive integer** speed **(in kilometers per hour)** that all the trains must travel at for you to reach the office on time, or_ `-1` _if it is impossible to be on time_.\n\nTests are generated such that the answer will not exceed `107` and `hour` will have **at most two digits after the decimal point**.\n\n",
          "input": "**Example 1:**\n\n**Input:** dist = \\[1,3,2\\], hour = 6\n**Output:** 1\n**Explanation:** At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.\n\n**Example 2:**\n\n**Input:** dist = \\[1,3,2\\], hour = 2.7\n**Output:** 3\n**Explanation:** At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.\n\n**Example 3:**\n\n**Input:** dist = \\[1,3,2\\], hour = 1.9\n**Output:** -1\n**Explanation:** It is impossible because the earliest the third train can depart is at the 2 hour mark.\n\n**Constraints:**\n\n*   `n == dist.length`\n*   `1 <= n <= 105`\n*   `1 <= dist[i] <= 105`\n*   `1 <= hour <= 109`\n*   There will be at most two digits after the decimal point in `hour`.Given the speed the trains are traveling at, can you find the total time it takes for you to arrive? Is there a cutoff where any speeds larger will always allow you to arrive on time?",
          "output": "from math import ceil\n\ndef minSpeedOnTime(dist, hour):\n    max_time = hour - len(dist) + 1\n    lower, upper = 1.0, 1e7\n    while upper - lower >= 1e-9:\n        mid = (lower + upper) / 2\n        time_taken = sum(ceil(d / mid) - (0 if i == len(dist) - 1 else 1) for i, d in enumerate(dist))\n        if time_taken <= max_time:\n            upper = mid\n        else:\n            lower = mid\n    return ceil(lower) if lower <= 1e7 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** binary string `s` and two integers `minJump` and `maxJump`. In the beginning, you are standing at index `0`, which is equal to `'0'`. You can move from index `i` to index `j` if the following conditions are fulfilled:\n\n*   `i + minJump <= j <= min(i + maxJump, s.length - 1)`, and\n*   `s[j] == '0'`.\n\nReturn `true` _if you can reach index_ `s.length - 1` _in_ `s`_, or_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"011010 \", minJump = 2, maxJump = 3\n**Output:** true\n**Explanation:**\nIn the first step, move from index 0 to index 3. \nIn the second step, move from index 3 to index 5.\n\n**Example 2:**\n\n**Input:** s =  \"01101110 \", minJump = 2, maxJump = 3\n**Output:** false\n\n**Constraints:**\n\n*   `2 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`.\n*   `s[0] == '0'`\n*   `1 <= minJump <= maxJump < s.length`Consider for each reachable index i the interval [i + a, i + b]. Use partial sums to mark the intervals as reachable.",
          "output": "def is_palindrome(s, l, r):\n    while l < r:\n        if s[l] != s[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\n\ndef check_partitioning(s):\n    n = len(s)\n    for i in range(n - 2):\n        if is_palindrome(s, 0, i):\n            for j in range(i + 1, n - 1):\n                if is_palindrome(s, i + 1, j) and is_palindrome(s, j + 1, n - 1):\n                    return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob take turns playing a game, with **Alice starting first**.\n\nThere are `n` stones arranged in a row. On each player's turn, while the number of stones is **more than one**, they will do the following:\n\n1.  Choose an integer `x > 1`, and **remove** the leftmost `x` stones from the row.\n2.  Add the **sum** of the **removed** stones' values to the player's score.\n3.  Place a **new stone**, whose value is equal to that sum, on the left side of the row.\n\nThe game stops when **only** **one** stone is left in the row.\n\nThe **score difference** between Alice and Bob is `(Alice's score - Bob's score)`. Alice's goal is to **maximize** the score difference, and Bob's goal is the **minimize** the score difference.\n\nGiven an integer array `stones` of length `n` where `stones[i]` represents the value of the `ith` stone **from the left**, return _the **score difference** between Alice and Bob if they both play **optimally**._\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[-1,2,-3,4,-5\\]\n**Output:** 5\n**Explanation:**\n- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of\n  value 2 on the left. stones = \\[2,-5\\].\n- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on\n  the left. stones = \\[-3\\].\nThe difference between their scores is 2 - (-3) = 5.\n\n**Example 2:**\n\n**Input:** stones = \\[7,-6,5,10,5,-2,-6\\]\n**Output:** 13\n**Explanation:**\n- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a\n  stone of value 13 on the left. stones = \\[13\\].\nThe difference between their scores is 13 - 0 = 13.\n\n**Example 3:**\n\n**Input:** stones = \\[-10,-12\\]\n**Output:** -22\n**Explanation:**\n- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her\n  score and places a stone of value -22 on the left. stones = \\[-22\\].\nThe difference between their scores is (-22) - 0 = -22.\n\n**Constraints:**\n\n*   `n == stones.length`\n*   `2 <= n <= 105`\n*   `-104 <= stones[i] <= 104`Let's note that the only thing that matters is how many stones were removed so we can maintain dp[numberOfRemovedStones] dp[x] = max(sum of all elements up to y - dp[y]) for all y > x",
          "output": "def can_eat(candiesCount, queries):\n    prefix_sum = [0] * (len(candiesCount) + 1)\n    for i in range(len(candiesCount)):\n        prefix_sum[i + 1] = prefix_sum[i] + candiesCount[i]\n\n    result = [False] * len(queries)\n    for i in range(len(queries)):\n        favoriteType, favoriteDay, dailyCap = queries[i]\n        x1 = favoriteDay + 1\n        y1 = (favoriteDay + 1) * dailyCap\n\n        x2 = prefix_sum[favoriteType] + 1\n        y2 = prefix_sum[favoriteType + 1]\n\n        result[i] = not (x1 > y2 or y1 < x2)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, you are asked to construct the array `ans` of size `n-k+1` where `ans[i]` is the number of **distinct** numbers in the subarray `nums[i:i+k-1] = [nums[i], nums[i+1], ..., nums[i+k-1]]`.\n\nReturn _the array_ `ans`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,2,2,1,3\\], k = 3\n**Output:** \\[3,2,2,2,3\\]\n**Explanation:** The number of distinct elements in each subarray goes as follows:\n- nums\\[0:2\\] = \\[1,2,3\\] so ans\\[0\\] = 3\n- nums\\[1:3\\] = \\[2,3,2\\] so ans\\[1\\] = 2\n- nums\\[2:4\\] = \\[3,2,2\\] so ans\\[2\\] = 2\n- nums\\[3:5\\] = \\[2,2,1\\] so ans\\[3\\] = 2\n- nums\\[4:6\\] = \\[2,1,3\\] so ans\\[4\\] = 3\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1,2,3,4\\], k = 4\n**Output:** \\[1,2,3,4\\]\n**Explanation:** The number of distinct elements in each subarray goes as follows:\n- nums\\[0:3\\] = \\[1,1,1,1\\] so ans\\[0\\] = 1\n- nums\\[1:4\\] = \\[1,1,1,2\\] so ans\\[1\\] = 2\n- nums\\[2:5\\] = \\[1,1,2,3\\] so ans\\[2\\] = 3\n- nums\\[3:6\\] = \\[1,2,3,4\\] so ans\\[3\\] = 4\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`Keep a frequency map of the elements in each window. When the frequency of the element is 0, remove it from the map. The answer to each window is the size of the map.",
          "output": "def distinct_numbers_in_subarrays(nums, k):\n    counts = {}\n    ans = []\n    for i, num in enumerate(nums):\n        counts[num] = counts.get(num, 0) + 1\n        if i >= k:\n            counts[nums[i - k]] -= 1\n            if counts[nums[i - k]] == 0:\n                del counts[nums[i - k]]\n        if i >= k - 1:\n            ans.append(len(counts))\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `ranges` and two integers `left` and `right`. Each `ranges[i] = [starti, endi]` represents an **inclusive** interval between `starti` and `endi`.\n\nReturn `true` _if each integer in the inclusive range_ `[left, right]` _is covered by **at least one** interval in_ `ranges`. Return `false` _otherwise_.\n\nAn integer `x` is covered by an interval `ranges[i] = [starti, endi]` if `starti <= x <= endi`.\n\n",
          "input": "**Example 1:**\n\n**Input:** ranges = \\[\\[1,2\\],\\[3,4\\],\\[5,6\\]\\], left = 2, right = 5\n**Output:** true\n**Explanation:** Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range.\n\n**Example 2:**\n\n**Input:** ranges = \\[\\[1,10\\],\\[10,20\\]\\], left = 21, right = 21\n**Output:** false\n**Explanation:** 21 is not covered by any range.\n\n**Constraints:**\n\n*   `1 <= ranges.length <= 50`\n*   `1 <= starti <= endi <= 50`\n*   `1 <= left <= right <= 50`Iterate over every integer point in the range [left, right]. For each of these points check if it is included in one of the ranges.",
          "output": "def isCovered(ranges: List[List[int]], left: int, right: int) -> bool:\n    for i in range(left, right + 1):\n        found = False\n        for _range in ranges:\n            if _range[0] <= i <= _range[1]:\n                found = True\n                break\n        if not found:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` students in a class numbered from `0` to `n - 1`. The teacher will give each student a problem starting with the student number `0`, then the student number `1`, and so on until the teacher reaches the student number `n - 1`. After that, the teacher will restart the process, starting with the student number `0` again.\n\nYou are given a **0-indexed** integer array `chalk` and an integer `k`. There are initially `k` pieces of chalk. When the student number `i` is given a problem to solve, they will use `chalk[i]` pieces of chalk to solve that problem. However, if the current number of chalk pieces is **strictly less** than `chalk[i]`, then the student number `i` will be asked to **replace** the chalk.\n\nReturn _the **index** of the student that will **replace** the chalk pieces_.\n\n",
          "input": "**Example 1:**\n\n**Input:** chalk = \\[5,1,5\\], k = 22\n**Output:** 0\n**Explanation:** The students go in turns as follows:\n- Student number 0 uses 5 chalk, so k = 17.\n- Student number 1 uses 1 chalk, so k = 16.\n- Student number 2 uses 5 chalk, so k = 11.\n- Student number 0 uses 5 chalk, so k = 6.\n- Student number 1 uses 1 chalk, so k = 5.\n- Student number 2 uses 5 chalk, so k = 0.\nStudent number 0 does not have enough chalk, so they will have to replace it.\n\n**Example 2:**\n\n**Input:** chalk = \\[3,4,1,2\\], k = 25\n**Output:** 1\n**Explanation:** The students go in turns as follows:\n- Student number 0 uses 3 chalk so k = 22.\n- Student number 1 uses 4 chalk so k = 18.\n- Student number 2 uses 1 chalk so k = 17.\n- Student number 3 uses 2 chalk so k = 15.\n- Student number 0 uses 3 chalk so k = 12.\n- Student number 1 uses 4 chalk so k = 8.\n- Student number 2 uses 1 chalk so k = 7.\n- Student number 3 uses 2 chalk so k = 5.\n- Student number 0 uses 3 chalk so k = 2.\nStudent number 1 does not have enough chalk, so they will have to replace it.\n\n**Constraints:**\n\n*   `chalk.length == n`\n*   `1 <= n <= 105`\n*   `1 <= chalk[i] <= 105`\n*   `1 <= k <= 109`Subtract the sum of chalk[i] from k until k is less than that sum Now just iterate over the array if chalk[i] is less thank k this is your answer otherwise this i is the answer",
          "output": "def merge_alternately(word1, word2):\n    merged = []\n    i, j = 0, 0\n    while i < len(word1) or j < len(word2):\n        if i < len(word1):\n            merged.append(word1[i])\n            i += 1\n        if j < len(word2):\n            merged.append(word2[j])\n            j += 1\n    return \"\".join(merged)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **valid** boolean expression as a string `expression` consisting of the characters `'1'`,`'0'`,`'&'` (bitwise **AND** operator),`'|'` (bitwise **OR** operator),`'('`, and `')'`.\n\n*   For example, `\"()1|1 \"` and `\"(1)&() \"` are **not valid** while `\"1 \"`, `\"(((1))|(0)) \"`, and `\"1|(0&(1)) \"` are **valid** expressions.\n\nReturn _the **minimum cost** to change the final value of the expression_.\n\n*   For example, if `expression = \"1|1|(0&0)&1 \"`, its **value** is `1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1`. We want to apply operations so that the **new** expression evaluates to `0`.\n\nThe **cost** of changing the final value of an expression is the **number of operations** performed on the expression. The types of **operations** are described as follows:\n\n*   Turn a `'1'` into a `'0'`.\n*   Turn a `'0'` into a `'1'`.\n*   Turn a `'&'` into a `'|'`.\n*   Turn a `'|'` into a `'&'`.\n\n**Note:** `'&'` does **not** take precedence over `'|'` in the **order of calculation**. Evaluate parentheses **first**, then in **left-to-right** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"1&(0|1) \"\n**Output:** 1\n**Explanation:** We can turn  \"1&(0**|**1) \" into  \"1&(0**&**1) \" by changing the '|' to a '&' using 1 operation.\nThe new expression evaluates to 0. \n\n**Example 2:**\n\n**Input:** expression =  \"(0&0)&(0&0&0) \"\n**Output:** 3\n**Explanation:** We can turn  \"(0**&0**)**&**(0&0&0) \" into  \"(0**|1**)**|**(0&0&0) \" using 3 operations.\nThe new expression evaluates to 1.\n\n**Example 3:**\n\n**Input:** expression =  \"(0|(1|0&1)) \"\n**Output:** 1\n**Explanation:** We can turn  \"(0|(**1**|0&1)) \" into  \"(0|(**0**|0&1)) \" using 1 operation.\nThe new expression evaluates to 0.\n\n**Constraints:**\n\n*   `1 <= expression.length <= 105`\n*   `expression` only contains `'1'`,`'0'`,`'&'`,`'|'`,`'('`, and `')'`\n*   All parentheses are properly matched.\n*   There will be no empty parentheses (i.e: `\"() \"` is not a substring of `expression`).How many possible states are there for a given expression? Is there a data structure that we can use to solve the problem optimally?",
          "output": "def maximumScore(nums, multipliers):\n    n, m = len(nums), len(multipliers)\n    dp = [[0] * (m + 1) for _ in range(m + 1)]\n    maxScore = float('-inf')\n\n    for i in range(m + 1):\n        for j in range(m - i + 1):\n            if i == 0 and j == 0:\n                continue\n            score = 0\n            if i == 0:\n                score = dp[i][j - 1] + nums[n - j] * multipliers[i + j - 1]\n            elif j == 0:\n                score = dp[i - 1][j] + nums[i - 1] * multipliers[i + j - 1]\n            else:\n                score = max(dp[i - 1][j] + nums[i - 1] * multipliers[i + j - 1],\n                            dp[i][j - 1] + nums[n - j] * multipliers[i + j - 1])\n            dp[i][j] = score\n            if i + j == m:\n                maxScore = max(maxScore, score)\n\n    return maxScore\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words`, find the **longest** string in `words` such that **every prefix** of it is also in `words`.\n\n*   For example, let `words = [ \"a \", \"app \", \"ap \"]`. The string `\"app \"` has prefixes `\"ap \"` and `\"a \"`, all of which are in `words`.\n\nReturn _the string described above. If there is more than one string with the same length, return the **lexicographically smallest** one, and if no string exists, return_ `\" \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"k \", \"ki \", \"kir \", \"kira \",  \"kiran \"\\]\n**Output:**  \"kiran \"\n**Explanation:**  \"kiran \" has prefixes  \"kira \",  \"kir \",  \"ki \", and  \"k \", and all of them appear in words.\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \",  \"banana \",  \"app \",  \"appl \",  \"ap \",  \"apply \",  \"apple \"\\]\n**Output:**  \"apple \"\n**Explanation:** Both  \"apple \" and  \"apply \" have all their prefixes in words.\nHowever,  \"apple \" is lexicographically smaller, so we return that.\n\n**Example 3:**\n\n**Input:** words = \\[ \"abc \",  \"bc \",  \"ab \",  \"qwe \"\\]\n**Output:**  \" \"\n\n**Constraints:**\n\n*   `1 <= words.length <= 105`\n*   `1 <= words[i].length <= 105`\n*   `1 <= sum(words[i].length) <= 105`Add all the words to a trie. Check the longest path where all the nodes are words.",
          "output": "def maximum_time(time: str) -> str:\n    time = list(time)\n    if time[0] == \"?\":\n        time[0] = \"2\" if time[1] == \"?\" or int(time[1]) < 4 else \"1\"\n    if time[1] == \"?\":\n        time[1] = \"3\" if time[0] == \"2\" else \"9\"\n    if time[3] == \"?\":\n        time[3] = \"5\"\n    if time[4] == \"?\":\n        time[4] = \"9\"\n    return \"\".join(time)\n"
     },
     {
          "instruction": "Write python code for this problem: The **letter value** of a letter is its position in the alphabet **starting from 0** (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, etc.).\n\nThe **numerical value** of some string of lowercase English letters `s` is the **concatenation** of the **letter values** of each letter in `s`, which is then **converted** into an integer.\n\n*   For example, if `s = \"acb \"`, we concatenate each letter's letter value, resulting in `\"021 \"`. After converting it, we get `21`.\n\nYou are given three strings `firstWord`, `secondWord`, and `targetWord`, each consisting of lowercase English letters `'a'` through `'j'` **inclusive**.\n\nReturn `true` _if the **summation** of the **numerical values** of_ `firstWord` _and_ `secondWord` _equals the **numerical value** of_ `targetWord`_, or_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** firstWord =  \"acb \", secondWord =  \"cba \", targetWord =  \"cdb \"\n**Output:** true\n**Explanation:**\nThe numerical value of firstWord is  \"acb \" ->  \"021 \" -> 21.\nThe numerical value of secondWord is  \"cba \" ->  \"210 \" -> 210.\nThe numerical value of targetWord is  \"cdb \" ->  \"231 \" -> 231.\nWe return true because 21 + 210 == 231.\n\n**Example 2:**\n\n**Input:** firstWord =  \"aaa \", secondWord =  \"a \", targetWord =  \"aab \"\n**Output:** false\n**Explanation:** \nThe numerical value of firstWord is  \"aaa \" ->  \"000 \" -> 0.\nThe numerical value of secondWord is  \"a \" ->  \"0 \" -> 0.\nThe numerical value of targetWord is  \"aab \" ->  \"001 \" -> 1.\nWe return false because 0 + 0 != 1.\n\n**Example 3:**\n\n**Input:** firstWord =  \"aaa \", secondWord =  \"a \", targetWord =  \"aaaa \"\n**Output:** true\n**Explanation:** \nThe numerical value of firstWord is  \"aaa \" ->  \"000 \" -> 0.\nThe numerical value of secondWord is  \"a \" ->  \"0 \" -> 0.\nThe numerical value of targetWord is  \"aaaa \" ->  \"0000 \" -> 0.\nWe return true because 0 + 0 == 0.\n\n**Constraints:**\n\n*   `1 <= firstWord.length,` `secondWord.length,` `targetWord.length <= 8`\n*   `firstWord`, `secondWord`, and `targetWord` consist of lowercase English letters from `'a'` to `'j'` **inclusive**.Convert each character of each word to its numerical value. Check if the numerical values satisfies the condition.",
          "output": "def largest_merge(word1: str, word2: str) -> str:\n    merge = []\n    while word1 or word2:\n        if word1 > word2:\n            merge.append(word1[0])\n            word1 = word1[1:]\n        else:\n            merge.append(word2[0])\n            word2 = word2[1:]\n    return ''.join(merge)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a very large integer `n`, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit `x`. The digits in `n` and the digit `x` are in the **inclusive** range `[1, 9]`, and `n` may represent a **negative** number.\n\nYou want to **maximize** `n`**'s numerical value** by inserting `x` anywhere in the decimal representation of `n`\u200b\u200b\u200b\u200b\u200b\u200b. You **cannot** insert `x` to the left of the negative sign.\n\n*   For example, if `n = 73` and `x = 6`, it would be best to insert it between `7` and `3`, making `n = 763`.\n*   If `n = -55` and `x = 2`, it would be best to insert it before the first `5`, making `n = -255`.\n\nReturn _a string representing the **maximum** value of_ `n`_\u200b\u200b\u200b\u200b\u200b\u200b after the insertion_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n =  \"99 \", x = 9\n**Output:**  \"999 \"\n**Explanation:** The result is the same regardless of where you insert 9.\n\n**Example 2:**\n\n**Input:** n =  \"-13 \", x = 2\n**Output:**  \"-123 \"\n**Explanation:** You can make n one of {-213, -123, -132}, and the largest of those three is -123.\n\n**Constraints:**\n\n*   `1 <= n.length <= 105`\n*   `1 <= x <= 9`\n*   The digits in `n`\u200b\u200b\u200b are in the range `[1, 9]`.\n*   `n` is a valid representation of an integer.\n*   In the case of a negative `n`,\u200b\u200b\u200b\u200b\u200b\u200b it will begin with `'-'`.Note that if the number is negative it's the same as positive but you look for the minimum instead. In the case of maximum, if s[i] < x it's optimal that x is put before s[i]. In the case of minimum, if s[i] > x it's optimal that x is put before s[i].",
          "output": "from itertools import combinations\n\ndef minAbsDifference(nums, goal):\n    n = len(nums)\n    left = nums[:n//2]\n    right = nums[n//2:]\n\n    sums_left = set()\n\n    for i in range(len(left) + 1):\n        for comb in combinations(left, i):\n            sums_left.add(sum(comb))\n\n    ans = abs(goal)\n\n    for i in range(len(right) + 1):\n        for comb in combinations(right, i):\n            sum_r = sum(comb)\n            sum_goal = goal - sum_r\n            sum_l = min(sums_left, key=lambda x: abs(x - sum_goal))\n\n            ans = min(ans, abs(sum_l + sum_r - goal))\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **0-indexed** integer arrays `servers` and `tasks` of lengths `n`\u200b\u200b\u200b\u200b\u200b\u200b and `m`\u200b\u200b\u200b\u200b\u200b\u200b respectively. `servers[i]` is the **weight** of the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b server, and `tasks[j]` is the **time needed** to process the `j\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task **in seconds**.\n\nTasks are assigned to the servers using a **task queue**. Initially, all servers are free, and the queue is **empty**.\n\nAt second `j`, the `jth` task is **inserted** into the queue (starting with the `0th` task being inserted at second `0`). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the **smallest weight**, and in case of a tie, it is assigned to a free server with the **smallest index**.\n\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned **in order of insertion** following the weight and index priorities above.\n\nA server that is assigned task `j` at second `t` will be free again at second `t + tasks[j]`.\n\nBuild an array `ans`\u200b\u200b\u200b\u200b of length `m`, where `ans[j]` is the **index** of the server the `j\u200b\u200b\u200b\u200b\u200b\u200bth` task will be assigned to.\n\nReturn _the array_ `ans`\u200b\u200b\u200b\u200b.\n\n",
          "input": "**Example 1:**\n\n**Input:** servers = \\[3,3,2\\], tasks = \\[1,2,3,2,1,2\\]\n**Output:** \\[2,2,0,2,1,2\\]\n**Explanation:** Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.\n\n**Example 2:**\n\n**Input:** servers = \\[5,1,4,3,2\\], tasks = \\[2,1,2,4,5,2,1\\]\n**Output:** \\[1,4,1,4,1,3,2\\]\n**Explanation:** Events in chronological order go as follows: \n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. \n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. \n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7.\n\n**Constraints:**\n\n*   `servers.length == n`\n*   `tasks.length == m`\n*   `1 <= n, m <= 2 * 105`\n*   `1 <= servers[i], tasks[j] <= 2 * 105`You can maintain a Heap of available Servers and a Heap of unavailable servers Note that the tasks will be processed in the input order so you just need to find the x-th server that will be available according to the rules",
          "output": "import heapq\nfrom typing import List\n\ndef assignTasks(servers: List[int], tasks: List[int]) -> List[int]:\n    free_servers = [(servers[i], i) for i in range(len(servers))]\n    heapq.heapify(free_servers)\n    busy_servers = []\n    result = [0] * len(tasks)\n\n    for time in range(len(tasks)):\n        while busy_servers and busy_servers[0][0] <= time:\n            _, server_elem = heapq.heappop(busy_servers)\n            heapq.heappush(free_servers, server_elem)\n        \n        if free_servers:\n            server_elem = heapq.heappop(free_servers)\n            result[time] = server_elem[1]\n            heapq.heappush(busy_servers, (time + tasks[time], server_elem))\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `hoursBefore`, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through `n` roads. The road lengths are given as an integer array `dist` of length `n`, where `dist[i]` describes the length of the `ith` road in **kilometers**. In addition, you are given an integer `speed`, which is the speed (in **km/h**) you will travel at.\n\nAfter you travel road `i`, you must rest and wait for the **next integer hour** before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.\n\n*   For example, if traveling a road takes `1.4` hours, you must wait until the `2` hour mark before traveling the next road. If traveling a road takes exactly `2` hours, you do not need to wait.\n\nHowever, you are allowed to **skip** some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.\n\n*   For example, suppose traveling the first road takes `1.4` hours and traveling the second road takes `0.6` hours. Skipping the rest after the first road will mean you finish traveling the second road right at the `2` hour mark, letting you start traveling the third road immediately.\n\nReturn _the **minimum number of skips required** to arrive at the meeting on time, or_ `-1` _if it is **impossible**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** dist = \\[1,3,2\\], speed = 4, hoursBefore = 2\n**Output:** 1\n**Explanation:**\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.\n\n**Example 2:**\n\n**Input:** dist = \\[7,3,5,5\\], speed = 2, hoursBefore = 10\n**Output:** 2\n**Explanation:**\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.\n\n**Example 3:**\n\n**Input:** dist = \\[7,3,5,5\\], speed = 1, hoursBefore = 10\n**Output:** -1\n**Explanation:** It is impossible to arrive at the meeting on time even if you skip all the rests.\n\n**Constraints:**\n\n*   `n == dist.length`\n*   `1 <= n <= 1000`\n*   `1 <= dist[i] <= 105`\n*   `1 <= speed <= 106`\n*   `1 <= hoursBefore <= 107`Is there something you can keep track of from one road to another? How would knowing the start time for each state help us solve the problem?",
          "output": "def minSkips(dist, speed, hoursBefore):\n    n = len(dist)\n    dp = [[1e9] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(n):\n        for j in range(i+1):\n            t = dist[i] / speed + (1 if j else 0)\n            dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + t)\n            skipped_t = -(-dist[i] / speed) - dp[i][j]\n            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + skipped_t)\n\n    for i in range(n + 1):\n        if dp[n][i] <= hoursBefore:\n            return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given two `n x n` binary matrices `mat` and `target`, return `true` _if it is possible to make_ `mat` _equal to_ `target` _by **rotating**_ `mat` _in **90-degree increments**, or_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[0,1\\],\\[1,0\\]\\], target = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** true\n**Explanation:** We can rotate mat 90 degrees clockwise to make mat equal target.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[0,1\\],\\[1,1\\]\\], target = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** false\n**Explanation:** It is impossible to make mat equal to target by rotating mat.\n\n**Example 3:**\n\n**Input:** mat = \\[\\[0,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\], target = \\[\\[1,1,1\\],\\[0,1,0\\],\\[0,0,0\\]\\]\n**Output:** true\n**Explanation:** We can rotate mat 90 degrees clockwise two times to make mat equal target.\n\n**Constraints:**\n\n*   `n == mat.length == target.length`\n*   `n == mat[i].length == target[i].length`\n*   `1 <= n <= 10`\n*   `mat[i][j]` and `target[i][j]` are either `0` or `1`.What is the maximum number of rotations you have to check? Is there a formula you can use to rotate a matrix 90 degrees?",
          "output": "import heapq\n\ndef minimumSize(nums, maxOperations):\n    pq = [-num for num in nums] # Negative numbers to simulate max heap\n    heapq.heapify(pq)\n    while maxOperations > 0:\n        maxBalls = -heapq.heappop(pq)\n        heapq.heappush(pq, -maxBalls // 2)\n        heapq.heappush(pq, -(maxBalls - (maxBalls // 2)))\n        maxOperations -= 1\n    return -pq[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, your goal is to make all elements in `nums` equal. To complete one operation, follow these steps:\n\n1.  Find the **largest** value in `nums`. Let its index be `i` (**0-indexed**) and its value be `largest`. If there are multiple elements with the largest value, pick the smallest `i`.\n2.  Find the **next largest** value in `nums` **strictly smaller** than `largest`. Let its value be `nextLargest`.\n3.  Reduce `nums[i]` to `nextLargest`.\n\nReturn _the number of operations to make all elements in_ `nums` _equal_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,1,3\\]\n**Output:** 3\n**Explanation:** It takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums\\[0\\] to 3. nums = \\[3,1,3\\].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums\\[0\\] to 1. nums = \\[1,1,3\\].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums\\[2\\] to 1. nums = \\[1,1,1\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 0\n**Explanation:** All elements in nums are already equal.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,2,2,3\\]\n**Output:** 4\n**Explanation:** It takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums\\[4\\] to 2. nums = \\[1,1,2,2,2\\].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums\\[2\\] to 1. nums = \\[1,1,1,2,2\\].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums\\[3\\] to 1. nums = \\[1,1,1,1,2\\].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums\\[4\\] to 1. nums = \\[1,1,1,1,1\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5 * 104`\n*   `1 <= nums[i] <= 5 * 104`Sort the array. Try to reduce all elements with maximum value to the next maximum value in one operation.",
          "output": "from collections import defaultdict\n\ndef min_trio_degree(n, edges):\n    graph = defaultdict(dict)\n    degree = [0] * (n + 1)\n\n    for u, v in edges:\n        graph[u][v] = graph[v][u] = True\n        degree[u] += 1\n        degree[v] += 1\n\n    min_degree = float('inf')\n    for u, v in edges:\n        for w in range(1, n + 1):\n            if graph[u].get(w) and graph[v].get(w):\n                min_degree = min(min_degree, degree[u] + degree[v] + degree[w] - 6)\n\n    return min_degree if min_degree != float('inf') else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a binary string `s`. You are allowed to perform two types of operations on the string in any sequence:\n\n*   **Type-1: Remove** the character at the start of the string `s` and **append** it to the end of the string.\n*   **Type-2: Pick** any character in `s` and **flip** its value, i.e., if its value is `'0'` it becomes `'1'` and vice-versa.\n\nReturn _the **minimum** number of **type-2** operations you need to perform_ _such that_ `s` _becomes **alternating**._\n\nThe string is called **alternating** if no two adjacent characters are equal.\n\n*   For example, the strings `\"010 \"` and `\"1010 \"` are alternating, while the string `\"0100 \"` is not.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"111000 \"\n**Output:** 2\n**Explanation**: Use the first operation two times to make s =  \"100011 \".\nThen, use the second operation on the third and sixth elements to make s =  \"101010 \".\n\n**Example 2:**\n\n**Input:** s =  \"010 \"\n**Output:** 0\n**Explanation**: The string is already alternating.\n\n**Example 3:**\n\n**Input:** s =  \"1110 \"\n**Output:** 1\n**Explanation**: Use the second operation on the second element to make s =  \"1010 \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`.Note what actually matters is how many 0s and 1s are in odd and even positions For every cyclic shift we need to count how many 0s and 1s are at each parity and convert the minimum between them for each parity",
          "output": "def nearestValidPoint(x, y, points):\n    min_distance = float('inf')\n    min_index = -1\n\n    for i, point in enumerate(points):\n        if x == point[0] or y == point[1]:\n            distance = abs(x - point[0]) + abs(y - point[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_index = i\n\n    return min_index\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` packages that you are trying to place in boxes, **one package in each box**. There are `m` suppliers that each produce boxes of **different sizes** (with infinite supply). A package can be placed in a box if the size of the package is **less than or equal to** the size of the box.\n\nThe package sizes are given as an integer array `packages`, where `packages[i]` is the **size** of the `ith` package. The suppliers are given as a 2D integer array `boxes`, where `boxes[j]` is an array of **box sizes** that the `jth` supplier produces.\n\nYou want to choose a **single supplier** and use boxes from them such that the **total wasted space** is **minimized**. For each package in a box, we define the space **wasted** to be `size of the box - size of the package`. The **total wasted space** is the sum of the space wasted in **all** the boxes.\n\n*   For example, if you have to fit packages with sizes `[2,3,5]` and the supplier offers boxes of sizes `[4,8]`, you can fit the packages of size-`2` and size-`3` into two boxes of size-`4` and the package with size-`5` into a box of size-`8`. This would result in a waste of `(4-2) + (4-3) + (8-5) = 6`.\n\nReturn _the **minimum total wasted space** by choosing the box supplier **optimally**, or_ `-1` _if it is **impossible** to fit all the packages inside boxes._ Since the answer may be **large**, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** packages = \\[2,3,5\\], boxes = \\[\\[4,8\\],\\[2,8\\]\\]\n**Output:** 6\n**Explanation**: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6.\n\n**Example 2:**\n\n**Input:** packages = \\[2,3,5\\], boxes = \\[\\[1,4\\],\\[2,3\\],\\[3,4\\]\\]\n**Output:** -1\n**Explanation:** There is no box that the package of size 5 can fit in.\n\n**Example 3:**\n\n**Input:** packages = \\[3,5,8,10,11,12\\], boxes = \\[\\[12\\],\\[11,9\\],\\[10,5,14\\]\\]\n**Output:** 9\n**Explanation:** It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.\n\n**Constraints:**\n\n*   `n == packages.length`\n*   `m == boxes.length`\n*   `1 <= n <= 105`\n*   `1 <= m <= 105`\n*   `1 <= packages[i] <= 105`\n*   `1 <= boxes[j].length <= 105`\n*   `1 <= boxes[j][k] <= 105`\n*   `sum(boxes[j].length) <= 105`\n*   The elements in `boxes[j]` are **distinct**.Given a fixed size box, is there a way to quickly query which packages (i.e., count and sizes) should end up in that box size? Do we have to order the boxes a certain way to allow us to answer the query quickly?",
          "output": "def check_powers_of_three(n: int) -> bool:\n    while n > 0:\n        if n % 3 == 2:\n            return False\n        n //= 3\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: **Run-length encoding** is a compression algorithm that allows for an integer array `nums` with many segments of **consecutive repeated** numbers to be represented by a (generally smaller) 2D array `encoded`. Each `encoded[i] = [vali, freqi]` describes the `ith` segment of repeated numbers in `nums` where `vali` is the value that is repeated `freqi` times.\n\n*   For example, `nums = [1,1,1,2,2,2,2,2]` is represented by the **run-length encoded** array `encoded = [[1,3],[2,5]]`. Another way to read this is \"three `1`'s followed by five `2`'s \".\n\nThe **product** of two run-length encoded arrays `encoded1` and `encoded2` can be calculated using the following steps:\n\n1.  **Expand** both `encoded1` and `encoded2` into the full arrays `nums1` and `nums2` respectively.\n2.  Create a new array `prodNums` of length `nums1.length` and set `prodNums[i] = nums1[i] * nums2[i]`.\n3.  **Compress** `prodNums` into a run-length encoded array and return it.\n\nYou are given two **run-length encoded** arrays `encoded1` and `encoded2` representing full arrays `nums1` and `nums2` respectively. Both `nums1` and `nums2` have the **same length**. Each `encoded1[i] = [vali, freqi]` describes the `ith` segment of `nums1`, and each `encoded2[j] = [valj, freqj]` describes the `jth` segment of `nums2`.\n\nReturn _the **product** of_ `encoded1` _and_ `encoded2`.\n\n**Note:** Compression should be done such that the run-length encoded array has the **minimum** possible length.\n\n",
          "input": "**Example 1:**\n\n**Input:** encoded1 = \\[\\[1,3\\],\\[2,3\\]\\], encoded2 = \\[\\[6,3\\],\\[3,3\\]\\]\n**Output:** \\[\\[6,6\\]\\]\n**Explanation:** encoded1 expands to \\[1,1,1,2,2,2\\] and encoded2 expands to \\[6,6,6,3,3,3\\].\nprodNums = \\[6,6,6,6,6,6\\], which is compressed into the run-length encoded array \\[\\[6,6\\]\\].\n\n**Example 2:**\n\n**Input:** encoded1 = \\[\\[1,3\\],\\[2,1\\],\\[3,2\\]\\], encoded2 = \\[\\[2,3\\],\\[3,3\\]\\]\n**Output:** \\[\\[2,3\\],\\[6,1\\],\\[9,2\\]\\]\n**Explanation:** encoded1 expands to \\[1,1,1,2,3,3\\] and encoded2 expands to \\[2,2,2,3,3,3\\].\nprodNums = \\[2,2,2,6,9,9\\], which is compressed into the run-length encoded array \\[\\[2,3\\],\\[6,1\\],\\[9,2\\]\\].\n\n**Constraints:**\n\n*   `1 <= encoded1.length, encoded2.length <= 105`\n*   `encoded1[i].length == 2`\n*   `encoded2[j].length == 2`\n*   `1 <= vali, freqi <= 104` for each `encoded1[i]`.\n*   `1 <= valj, freqj <= 104` for each `encoded2[j]`.\n*   The full arrays that `encoded1` and `encoded2` represent are the same length.Keep track of the indices on both RLE arrays and join the parts together. What is the maximum number of segments if we took the minimum number of elements left on both the current segments every time?",
          "output": "def findRLEProduct(encoded1, encoded2):\n    result = []\n    i, j, count1, count2 = 0, 0, 0, 0\n\n    while i < len(encoded1) and j < len(encoded2):\n        product = encoded1[i][0] * encoded2[j][0]\n        count = min(encoded1[i][1] - count1, encoded2[j][1] - count2)\n        count1 += count\n        count2 += count\n\n        if result and result[-1][0] == product:\n            result[-1][1] += count\n        else:\n            result.append([product, count])\n\n        if count1 == encoded1[i][1]:\n            i += 1\n            count1 = 0\n\n        if count2 == encoded2[j][1]:\n            j += 1\n            count2 = 0\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **0-indexed** integer array `nums`, return `true` _if it can be made **strictly increasing** after removing **exactly one** element, or_ `false` _otherwise. If the array is already strictly increasing, return_ `true`.\n\nThe array `nums` is **strictly increasing** if `nums[i - 1] < nums[i]` for each index `(1 <= i < nums.length).`\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,10,5,7\\]\n**Output:** true\n**Explanation:** By removing 10 at index 2 from nums, it becomes \\[1,2,5,7\\].\n\\[1,2,5,7\\] is strictly increasing, so return true.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,1,2\\]\n**Output:** false\n**Explanation:**\n\\[3,1,2\\] is the result of removing the element at index 0.\n\\[2,1,2\\] is the result of removing the element at index 1.\n\\[2,3,2\\] is the result of removing the element at index 2.\n\\[2,3,1\\] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** false\n**Explanation:** The result of removing any element is \\[1,1\\].\n\\[1,1\\] is not strictly increasing, so return false.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`For each index i in nums remove this index. If the array becomes sorted return true, otherwise revert to the original array and try different index.",
          "output": "def canBeIncreasing(nums):\n    count = 0\n    for i in range(1, len(nums)):\n        if nums[i - 1] >= nums[i]:\n            count += 1\n            if count > 1: return False\n            if i > 1 and nums[i - 2] >= nums[i] and i < len(nums) - 1 and nums[i - 1] >= nums[i + 1]: return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given two strings `s` and `part`, perform the following operation on `s` until **all** occurrences of the substring `part` are removed:\n\n*   Find the **leftmost** occurrence of the substring `part` and **remove** it from `s`.\n\nReturn `s` _after removing all occurrences of_ `part`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"daabcbaabcbc \", part =  \"abc \"\n**Output:**  \"dab \"\n**Explanation**: The following operations are done:\n- s =  \"da**abc**baabcbc \", remove  \"abc \" starting at index 2, so s =  \"dabaabcbc \".\n- s =  \"daba**abc**bc \", remove  \"abc \" starting at index 4, so s =  \"dababc \".\n- s =  \"dab**abc** \", remove  \"abc \" starting at index 3, so s =  \"dab \".\nNow s has no occurrences of  \"abc \".\n\n**Example 2:**\n\n**Input:** s =  \"axxxxyyyyb \", part =  \"xy \"\n**Output:**  \"ab \"\n**Explanation**: The following operations are done:\n- s =  \"axxx**xy**yyyb \", remove  \"xy \" starting at index 4 so s =  \"axxxyyyb \".\n- s =  \"axx**xy**yyb \", remove  \"xy \" starting at index 3 so s =  \"axxyyb \".\n- s =  \"ax**xy**yb \", remove  \"xy \" starting at index 2 so s =  \"axyb \".\n- s =  \"a**xy**b \", remove  \"xy \" starting at index 1 so s =  \"ab \".\nNow s has no occurrences of  \"xy \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `1 <= part.length <= 1000`\n*   `s`\u200b\u200b\u200b\u200b\u200b\u200b and `part` consists of lowercase English letters.Note that a new occurrence of pattern can appear if you remove an old one, For example, s = \"ababcc\" and pattern = \"abc\". You can maintain a stack of characters and if the last character of the pattern size in the stack match the pattern remove them",
          "output": "def check_ones_segment(s: str) -> bool:\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            if i > 0 and s[i - 1] == '0':\n                count += 1\n    return count <= 1\n"
     },
     {
          "instruction": "Write python code for this problem: The **alternating sum** of a **0-indexed** array is defined as the **sum** of the elements at **even** indices **minus** the **sum** of the elements at **odd** indices.\n\n*   For example, the alternating sum of `[4,2,5,3]` is `(4 + 5) - (2 + 3) = 4`.\n\nGiven an array `nums`, return _the **maximum alternating sum** of any subsequence of_ `nums` _(after **reindexing** the elements of the subsequence)_.\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,2,5,3\\]\n**Output:** 7\n**Explanation:** It is optimal to choose the subsequence \\[4,2,5\\] with alternating sum (4 + 5) - 2 = 7.\n\n**Example 2:**\n\n**Input:** nums = \\[5,6,7,8\\]\n**Output:** 8\n**Explanation:** It is optimal to choose the subsequence \\[8\\] with alternating sum 8.\n\n**Example 3:**\n\n**Input:** nums = \\[6,2,1,2,4,5\\]\n**Output:** 10\n**Explanation:** It is optimal to choose the subsequence \\[6,1,5\\] with alternating sum (6 + 5) - 1 = 10.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`Is only tracking a single sum enough to solve the problem? How does tracking an odd sum and an even sum reduce the number of states?",
          "output": "def min_elements(nums, limit, goal):\n    total_sum = sum(nums)\n    diff = abs(goal - total_sum)\n    return (diff + limit - 1) // limit\n"
     },
     {
          "instruction": "Write python code for this problem: You have a movie renting company consisting of `n` shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.\n\nEach movie is given as a 2D integer array `entries` where `entries[i] = [shopi, moviei, pricei]` indicates that there is a copy of movie `moviei` at shop `shopi` with a rental price of `pricei`. Each shop carries **at most one** copy of a movie `moviei`.\n\nThe system should support the following functions:\n\n*   **Search**: Finds the **cheapest 5 shops** that have an **unrented copy** of a given movie. The shops should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopi` should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned.\n*   **Rent**: Rents an **unrented copy** of a given movie from a given shop.\n*   **Drop**: Drops off a **previously rented copy** of a given movie at a given shop.\n*   **Report**: Returns the **cheapest 5 rented movies** (possibly of the same movie ID) as a 2D list `res` where `res[j] = [shopj, moviej]` describes that the `jth` cheapest rented movie `moviej` was rented from the shop `shopj`. The movies in `res` should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopj` should appear first, and if there is still tie, the one with the **smaller** `moviej` should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned.\n\nImplement the `MovieRentingSystem` class:\n\n*   `MovieRentingSystem(int n, int[][] entries)` Initializes the `MovieRentingSystem` object with `n` shops and the movies in `entries`.\n*   `List search(int movie)` Returns a list of shops that have an **unrented copy** of the given `movie` as described above.\n*   `void rent(int shop, int movie)` Rents the given `movie` from the given `shop`.\n*   `void drop(int shop, int movie)` Drops off a previously rented `movie` at the given `shop`.\n*   `List> report()` Returns a list of cheapest **rented** movies as described above.\n\n**Note:** The test cases will be generated such that `rent` will only be called if the shop has an **unrented** copy of the movie, and `drop` will only be called if the shop had **previously rented** out the movie.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"MovieRentingSystem \",  \"search \",  \"rent \",  \"rent \",  \"report \",  \"drop \",  \"search \"\\]\n\\[\\[3, \\[\\[0, 1, 5\\], \\[0, 2, 6\\], \\[0, 3, 7\\], \\[1, 1, 4\\], \\[1, 2, 7\\], \\[2, 1, 5\\]\\]\\], \\[1\\], \\[0, 1\\], \\[1, 2\\], \\[\\], \\[1, 2\\], \\[2\\]\\]\n**Output**\n\\[null, \\[1, 0, 2\\], null, null, \\[\\[0, 1\\], \\[1, 2\\]\\], null, \\[0, 1\\]\\]\n\n**Explanation**\nMovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, \\[\\[0, 1, 5\\], \\[0, 2, 6\\], \\[0, 3, 7\\], \\[1, 1, 4\\], \\[1, 2, 7\\], \\[2, 1, 5\\]\\]);\nmovieRentingSystem.search(1);  // return \\[1, 0, 2\\], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now \\[2,3\\].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now \\[1\\].\nmovieRentingSystem.report();   // return \\[\\[0, 1\\], \\[1, 2\\]\\]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now \\[1,2\\].\nmovieRentingSystem.search(2);  // return \\[0, 1\\]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.\n\n**Constraints:**\n\n*   `1 <= n <= 3 * 105`\n*   `1 <= entries.length <= 105`\n*   `0 <= shopi < n`\n*   `1 <= moviei, pricei <= 104`\n*   Each shop carries **at most one** copy of a movie `moviei`.\n*   At most `105` calls **in total** will be made to `search`, `rent`, `drop` and `report`.You need to maintain a sorted list for each movie and a sorted list for rented movies When renting a movie remove it from its movies sorted list and added it to the rented list and vice versa in the case of dropping a movie",
          "output": "from heapq import heappush, heappop\nfrom collections import defaultdict\nfrom functools import lru_cache\n\nmod = 10**9 + 7\n\ndef countRestrictedPaths(n, edges):\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    dist = [float('inf')] * (n + 1)\n    dist[n] = 0\n    pq = [(0, n)] # (distance, node)\n    \n    while pq:\n        d, u = heappop(pq)\n        if d != dist[u]:\n            continue\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n                heappush(pq, (dist[v], v))\n\n    @lru_cache(None)\n    def dfs(u):\n        if u == n:\n            return 1\n        ans = 0\n        for v, _ in graph[u]:\n            if dist[v] < dist[u]:\n                ans = (ans + dfs(v)) % mod\n        return ans\n\n    return dfs(1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `words` (**0-indexed**).\n\nIn one operation, pick two **distinct** indices `i` and `j`, where `words[i]` is a non-empty string, and move **any** character from `words[i]` to **any** position in `words[j]`.\n\nReturn `true` _if you can make **every** string in_ `words` _**equal** using **any** number of operations_, _and_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"abc \", \"aabc \", \"bc \"\\]\n**Output:** true\n**Explanation:** Move the first 'a' in `words[1] to the front of words[2], to make` `words[1]` =  \"abc \" and words\\[2\\] =  \"abc \".\nAll the strings are now equal to  \"abc \", so return `true`.\n\n**Example 2:**\n\n**Input:** words = \\[ \"ab \", \"a \"\\]\n**Output:** false\n**Explanation:** It is impossible to make all the strings equal using the operation.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists of lowercase English letters.Characters are independent\u2014only the frequency of characters matters. It is possible to distribute characters if all characters can be divided equally among all strings.",
          "output": "def longestPalindromeSubseq(word1, word2):\n    n, m = len(word1), len(word2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n):\n        for j in range(m):\n            if word1[i] == word2[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n\n    return dp[n][m]\n"
     },
     {
          "instruction": "Write python code for this problem: A **triplet** is an array of three integers. You are given a 2D integer array `triplets`, where `triplets[i] = [ai, bi, ci]` describes the `ith` **triplet**. You are also given an integer array `target = [x, y, z]` that describes the **triplet** you want to obtain.\n\nTo obtain `target`, you may apply the following operation on `triplets` **any number** of times (possibly **zero**):\n\n*   Choose two indices (**0-indexed**) `i` and `j` (`i != j`) and **update** `triplets[j]` to become `[max(ai, aj), max(bi, bj), max(ci, cj)]`.\n    *   For example, if `triplets[i] = [2, 5, 3]` and `triplets[j] = [1, 7, 5]`, `triplets[j]` will be updated to `[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]`.\n\nReturn `true` _if it is possible to obtain the_ `target` _**triplet**_ `[x, y, z]` _as an **element** of_ `triplets`_, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** triplets = \\[\\[2,5,3\\],\\[1,8,4\\],\\[1,7,5\\]\\], target = \\[2,7,5\\]\n**Output:** true\n**Explanation:** Perform the following operations:\n- Choose the first and last triplets \\[\\[2,5,3\\],\\[1,8,4\\],\\[1,7,5\\]\\]. Update the last triplet to be \\[max(2,1), max(5,7), max(3,5)\\] = \\[2,7,5\\]. triplets = \\[\\[2,5,3\\],\\[1,8,4\\],\\[2,7,5\\]\\]\nThe target triplet \\[2,7,5\\] is now an element of triplets.\n\n**Example 2:**\n\n**Input:** triplets = \\[\\[3,4,5\\],\\[4,5,6\\]\\], target = \\[3,2,5\\]\n**Output:** false\n**Explanation:** It is impossible to have \\[3,2,5\\] as an element because there is no 2 in any of the triplets.\n\n**Example 3:**\n\n**Input:** triplets = \\[\\[2,5,3\\],\\[2,3,4\\],\\[1,2,5\\],\\[5,2,3\\]\\], target = \\[5,5,5\\]\n**Output:** true\n**Explanation:** Perform the following operations:\n- Choose the first and third triplets \\[\\[2,5,3\\],\\[2,3,4\\],\\[1,2,5\\],\\[5,2,3\\]\\]. Update the third triplet to be \\[max(2,1), max(5,2), max(3,5)\\] = \\[2,5,5\\]. triplets = \\[\\[2,5,3\\],\\[2,3,4\\],\\[2,5,5\\],\\[5,2,3\\]\\].\n- Choose the third and fourth triplets \\[\\[2,5,3\\],\\[2,3,4\\],\\[2,5,5\\],\\[5,2,3\\]\\]. Update the fourth triplet to be \\[max(2,5), max(5,2), max(5,3)\\] = \\[5,5,5\\]. triplets = \\[\\[2,5,3\\],\\[2,3,4\\],\\[2,5,5\\],\\[5,5,5\\]\\].\nThe target triplet \\[5,5,5\\] is now an element of triplets.\n\n**Constraints:**\n\n*   `1 <= triplets.length <= 105`\n*   `triplets[i].length == target.length == 3`\n*   `1 <= ai, bi, ci, x, y, z <= 1000`Which triplets do you actually care about? What property of max can you use to solve the problem?",
          "output": "def count_matches(items, rule_key, rule_value):\n    rule = {\"type\": 0, \"color\": 1, \"name\": 2}\n    count = 0\n\n    for item in items:\n        if item[rule[rule_key]] == rule_value:\n            count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `s` and `p` where `p` is a **subsequence** of `s`. You are also given a **distinct 0-indexed** integer array `removable` containing a subset of indices of `s` (`s` is also **0-indexed**).\n\nYou want to choose an integer `k` (`0 <= k <= removable.length`) such that, after removing `k` characters from `s` using the **first** `k` indices in `removable`, `p` is still a **subsequence** of `s`. More formally, you will mark the character at `s[removable[i]]` for each `0 <= i < k`, then remove all marked characters and check if `p` is still a subsequence.\n\nReturn _the **maximum**_ `k` _you can choose such that_ `p` _is still a **subsequence** of_ `s` _after the removals_.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcacb \", p =  \"ab \", removable = \\[3,1,0\\]\n**Output:** 2\n**Explanation**: After removing the characters at indices 3 and 1,  \"a**b**c**a**cb \" becomes  \"accb \".\n \"ab \" is a subsequence of  \"**a**cc**b** \".\nIf we remove the characters at indices 3, 1, and 0,  \"**ab**c**a**cb \" becomes  \"ccb \", and  \"ab \" is no longer a subsequence.\nHence, the maximum k is 2.\n\n**Example 2:**\n\n**Input:** s =  \"abcbddddd \", p =  \"abcd \", removable = \\[3,2,1,4,5,6\\]\n**Output:** 1\n**Explanation**: After removing the character at index 3,  \"abc**b**ddddd \" becomes  \"abcddddd \".\n \"abcd \" is a subsequence of  \"**abcd**dddd \".\n\n**Example 3:**\n\n**Input:** s =  \"abcab \", p =  \"abc \", removable = \\[0,1,2,3,4\\]\n**Output:** 0\n**Explanation**: If you remove the first index in the array removable,  \"abc \" is no longer a subsequence.\n\n**Constraints:**\n\n*   `1 <= p.length <= s.length <= 105`\n*   `0 <= removable.length < s.length`\n*   `0 <= removable[i] < s.length`\n*   `p` is a **subsequence** of `s`.\n*   `s` and `p` both consist of lowercase English letters.\n*   The elements in `removable` are **distinct**.First, we need to think about solving an easier problem, If we remove a set of indices from the string does P exist in S as a subsequence We can binary search the K and check by solving the above problem.",
          "output": "def maximumRemovals(s: str, p: str, removable: List[int]) -> int:\n    low, high = 0, len(removable)\n    while low < high:\n        mid = (low + high + 1) // 2\n        temp_s = list(s)\n        for i in range(mid):\n            temp_s[removable[i]] = '-'\n        i, j = 0, 0\n        while i < len(temp_s) and j < len(p):\n            if temp_s[i] == p[j]:\n                j += 1\n            i += 1\n        if j == len(p):\n            low = mid\n        else:\n            high = mid - 1\n    return low\n"
     },
     {
          "instruction": "Write python code for this problem: There is a tournament where `n` players are participating. The players are standing in a single row and are numbered from `1` to `n` based on their **initial** standing position (player `1` is the first player in the row, player `2` is the second player in the row, etc.).\n\nThe tournament consists of multiple rounds (starting from round number `1`). In each round, the `ith` player from the front of the row competes against the `ith` player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.\n\n*   For example, if the row consists of players `1, 2, 4, 6, 7`\n    *   Player `1` competes against player `7`.\n    *   Player `2` competes against player `6`.\n    *   Player `4` automatically advances to the next round.\n\nAfter each round is over, the winners are lined back up in the row based on the **original ordering** assigned to them initially (ascending order).\n\nThe players numbered `firstPlayer` and `secondPlayer` are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may **choose** the outcome of this round.\n\nGiven the integers `n`, `firstPlayer`, and `secondPlayer`, return _an integer array containing two values, the **earliest** possible round number and the **latest** possible round number in which these two players will compete against each other, respectively_.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 11, firstPlayer = 2, secondPlayer = 4\n**Output:** \\[3,4\\]\n**Explanation:**\nOne possible scenario which leads to the earliest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 2, 3, 4, 5, 6, 11\nThird round: 2, 3, 4\nOne possible scenario which leads to the latest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 1, 2, 3, 4, 5, 6\nThird round: 1, 2, 4\nFourth round: 2, 4\n\n**Example 2:**\n\n**Input:** n = 5, firstPlayer = 1, secondPlayer = 5\n**Output:** \\[1,1\\]\n**Explanation:** The players numbered 1 and 5 compete in the first round.\nThere is no way to make them compete in any other round.\n\n**Constraints:**\n\n*   `2 <= n <= 28`\n*   `1 <= firstPlayer < secondPlayer <= n`Brute force using bitmasks and simulate the rounds. Calculate each state one time and save its solution.",
          "output": "def closest_cost(base_costs, topping_costs, target):\n    closest = base_costs[0]\n    \n    for base in base_costs:\n        cost = base\n        \n        for i in range(1 << (len(topping_costs) * 2)):\n            bit_mask = i\n            \n            for j, topping_cost in enumerate(topping_costs):\n                cost += (bit_mask & 3) * topping_cost\n                bit_mask >>= 2\n                \n            if abs(target - cost) < abs(target - closest):\n                closest = cost\n            elif abs(target - cost) == abs(target - closest) and cost < closest:\n                closest = cost\n                \n            cost = base\n            \n    return closest\n"
     },
     {
          "instruction": "Write python code for this problem: The **product sum** of two equal-length arrays `a` and `b` is equal to the sum of `a[i] * b[i]` for all `0 <= i < a.length` (**0-indexed**).\n\n*   For example, if `a = [1,2,3,4]` and `b = [5,2,3,1]`, the **product sum** would be `1*5 + 2*2 + 3*3 + 4*1 = 22`.\n\nGiven two arrays `nums1` and `nums2` of length `n`, return _the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in_ `nums1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[5,3,4,2\\], nums2 = \\[4,2,2,5\\]\n**Output:** 40\n**Explanation:** We can rearrange nums1 to become \\[3,5,4,2\\]. The product sum of \\[3,5,4,2\\] and \\[4,2,2,5\\] is 3\\*4 + 5\\*2 + 4\\*2 + 2\\*5 = 40.\n\n**Example 2:**\n\n**Input:** nums1 = \\[2,1,4,5,7\\], nums2 = \\[3,2,4,8,6\\]\n**Output:** 65\n**Explanation:** We can rearrange nums1 to become \\[5,7,4,1,2\\]. The product sum of \\[5,7,4,1,2\\] and \\[3,2,4,8,6\\] is 5\\*3 + 7\\*2 + 4\\*4 + 1\\*8 + 2\\*6 = 65.\n\n**Constraints:**\n\n*   `n == nums1.length == nums2.length`\n*   `1 <= n <= 105`\n*   `1 <= nums1[i], nums2[i] <= 100`Is there a particular way we should order the arrays such that the product sum is minimized? Would you want to multiply two numbers that are closer to one another or further?",
          "output": "def can_choose(groups, nums):\n    g_i, n_i = 0, 0\n    while g_i < len(groups) and n_i + len(groups[g_i]) <= len(nums):\n        if nums[n_i : n_i + len(groups[g_i])] == groups[g_i]:\n            n_i += len(groups[g_i])\n            g_i += 1\n        else:\n            n_i += 1\n    return g_i == len(groups)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given **two identical** eggs and you have access to a building with `n` floors labeled from `1` to `n`.\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**.\n\nIn each move, you may take an **unbroken** egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves.\n\nReturn _the **minimum number of moves** that you need to determine **with certainty** what the value of_ `f` is.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** 2\n**Explanation:** We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn't, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2.\n\n**Example 2:**\n\n**Input:** n = 100\n**Output:** 14\n**Explanation:** One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`Is it really optimal to always drop the egg on the middle floor for each move? Can we create states based on the number of unbroken eggs and floors to build our solution?",
          "output": "def min_operations_to_alternate(s: str) -> int:\n    count_a, count_b = 0, 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            if c == '0':\n                count_a += 1\n            else:\n                count_b += 1\n        else:\n            if c == '0':\n                count_b += 1\n            else:\n                count_a += 1\n    return min(count_a, count_b)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `num`, representing a large integer. Return _the **largest-valued odd** integer (as a string) that is a **non-empty substring** of_ `num`_, or an empty string_ `\" \"` _if no odd integer exists_.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"52 \"\n**Output:**  \"5 \"\n**Explanation:** The only non-empty substrings are  \"5 \",  \"2 \", and  \"52 \".  \"5 \" is the only odd number.\n\n**Example 2:**\n\n**Input:** num =  \"4206 \"\n**Output:**  \" \"\n**Explanation:** There are no odd numbers in  \"4206 \".\n\n**Example 3:**\n\n**Input:** num =  \"35427 \"\n**Output:**  \"35427 \"\n**Explanation:**  \"35427 \" is already an odd number.\n\n**Constraints:**\n\n*   `1 <= num.length <= 105`\n*   `num` only consists of digits and does not contain any leading zeros.In what order should you iterate through the digits? If an odd number exists, where must the number start from?",
          "output": "def largest_odd_number(num: str) -> str:\n    for i in range(len(num) - 1, -1, -1):\n        if int(num[i]) % 2 != 0:\n            return num[:i + 1]\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are participating in an online chess tournament. There is a chess round that starts every `15` minutes. The first round of the day starts at `00:00`, and after every `15` minutes, a new round starts.\n\n*   For example, the second round starts at `00:15`, the fourth round starts at `00:45`, and the seventh round starts at `01:30`.\n\nYou are given two strings `loginTime` and `logoutTime` where:\n\n*   `loginTime` is the time you will login to the game, and\n*   `logoutTime` is the time you will logout from the game.\n\nIf `logoutTime` is **earlier** than `loginTime`, this means you have played from `loginTime` to midnight and from midnight to `logoutTime`.\n\nReturn _the number of full chess rounds you have played in the tournament_.\n\n**Note:** All the given times follow the 24-hour clock. That means the first round of the day starts at `00:00` and the last round of the day starts at `23:45`.\n\n",
          "input": "**Example 1:**\n\n**Input:** loginTime =  \"09:31 \", logoutTime =  \"10:14 \"\n**Output:** 1\n**Explanation:** You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.\n\n**Example 2:**\n\n**Input:** loginTime =  \"21:30 \", logoutTime =  \"03:00 \"\n**Output:** 22\n**Explanation:** You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22.\n\n**Constraints:**\n\n*   `loginTime` and `logoutTime` are in the format `hh:mm`.\n*   `00 <= hh <= 23`\n*   `00 <= mm <= 59`\n*   `loginTime` and `logoutTime` are not equal.Consider the day as 48 hours instead of 24. For each round check if you were playing.",
          "output": "def second_largest_digit(s: str) -> int:\n    largest = -1\n    second_largest = -1\n    for c in s:\n        if c.isdigit():\n            digit = int(c)\n            if digit > largest:\n                second_largest = largest\n                largest = digit\n            elif digit != largest and digit > second_largest:\n                second_largest = digit\n    return second_largest\n"
     },
     {
          "instruction": "Write python code for this problem: The **minimum absolute difference** of an array `a` is defined as the **minimum value** of `|a[i] - a[j]|`, where `0 <= i < j < a.length` and `a[i] != a[j]`. If all elements of `a` are the **same**, the minimum absolute difference is `-1`.\n\n*   For example, the minimum absolute difference of the array `[5,2,3,7,2]` is `|2 - 3| = 1`. Note that it is not `0` because `a[i]` and `a[j]` must be different.\n\nYou are given an integer array `nums` and the array `queries` where `queries[i] = [li, ri]`. For each query `i`, compute the **minimum absolute difference** of the **subarray** `nums[li...ri]` containing the elements of `nums` between the **0-based** indices `li` and `ri` (**inclusive**).\n\nReturn _an **array**_ `ans` _where_ `ans[i]` _is the answer to the_ `ith` _query_.\n\nA **subarray** is a contiguous sequence of elements in an array.\n\nThe value of `|x|` is defined as:\n\n*   `x` if `x >= 0`.\n*   `-x` if `x < 0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,3,4,8\\], queries = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\],\\[0,3\\]\\]\n**Output:** \\[2,1,4,1\\]\n**Explanation:** The queries are processed as follows:\n- queries\\[0\\] = \\[0,1\\]: The subarray is \\[1,3\\] and the minimum absolute difference is |1-3| = 2.\n- queries\\[1\\] = \\[1,2\\]: The subarray is \\[3,4\\] and the minimum absolute difference is |3-4| = 1.\n- queries\\[2\\] = \\[2,3\\]: The subarray is \\[4,8\\] and the minimum absolute difference is |4-8| = 4.\n- queries\\[3\\] = \\[0,3\\]: The subarray is \\[1,3,4,8\\] and the minimum absolute difference is |3-4| = 1.\n\n**Example 2:**\n\n**Input:** nums = \\[4,5,2,2,7,10\\], queries = \\[\\[2,3\\],\\[0,2\\],\\[0,5\\],\\[3,5\\]\\]\n**Output:** \\[-1,1,1,3\\]\n**Explanation:** The queries are processed as follows:\n- queries\\[0\\] = \\[2,3\\]: The subarray is \\[2,2\\] and the minimum absolute difference is -1 because all the\n  elements are the same.\n- queries\\[1\\] = \\[0,2\\]: The subarray is \\[4,5,2\\] and the minimum absolute difference is |4-5| = 1.\n- queries\\[2\\] = \\[0,5\\]: The subarray is \\[4,5,2,2,7,10\\] and the minimum absolute difference is |4-5| = 1.\n- queries\\[3\\] = \\[3,5\\]: The subarray is \\[2,7,10\\] and the minimum absolute difference is |7-10| = 3.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 105`\n*   `1 <= nums[i] <= 100`\n*   `1 <= queries.length <= 2 * 104`\n*   `0 <= li < ri < nums.length`How does the maximum value being 100 help us? How can we tell if a number exists in a given range?",
          "output": "from functools import lru_cache\nfrom math import gcd\n\ndef maxScore(nums):\n    n = len(nums)\n\n    @lru_cache(None)\n    def dfs(i, j):\n        if i > n:\n            return 0\n        ans = 0\n        for k in range(j + 1, n * 2):\n            ans = max(ans, dfs(i + 1, k) + i * gcd(nums[j], nums[k]))\n        return ans\n\n    return dfs(1, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two `m x n` binary matrices `grid1` and `grid2` containing only `0`'s (representing water) and `1`'s (representing land). An **island** is a group of `1`'s connected **4-directionally** (horizontal or vertical). Any cells outside of the grid are considered water cells.\n\nAn island in `grid2` is considered a **sub-island** if there is an island in `grid1` that contains **all** the cells that make up **this** island in `grid2`.\n\nReturn the _**number** of islands in_ `grid2` _that are considered **sub-islands**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid1 = \\[\\[1,1,1,0,0\\],\\[0,1,1,1,1\\],\\[0,0,0,0,0\\],\\[1,0,0,0,0\\],\\[1,1,0,1,1\\]\\], grid2 = \\[\\[1,1,1,0,0\\],\\[0,0,1,1,1\\],\\[0,1,0,0,0\\],\\[1,0,1,1,0\\],\\[0,1,0,1,0\\]\\]\n**Output:** 3\n**Explanation:** In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.\n\n**Example 2:**\n\n**Input:** grid1 = \\[\\[1,0,1,0,1\\],\\[1,1,1,1,1\\],\\[0,0,0,0,0\\],\\[1,1,1,1,1\\],\\[1,0,1,0,1\\]\\], grid2 = \\[\\[0,0,0,0,0\\],\\[1,1,1,1,1\\],\\[0,1,0,1,0\\],\\[0,1,0,1,0\\],\\[1,0,0,0,1\\]\\]\n**Output:** 2 \n**Explanation:** In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.\n\n**Constraints:**\n\n*   `m == grid1.length == grid2.length`\n*   `n == grid1[i].length == grid2[i].length`\n*   `1 <= m, n <= 500`\n*   `grid1[i][j]` and `grid2[i][j]` are either `0` or `1`.Let's use floodfill to iterate over the islands of the second grid Let's note that if all the cells in an island in the second grid if they are represented by land in the first grid then they are connected hence making that island a sub-island",
          "output": "enticationManager {\n    constructor(timeToLive) {\n        this.timeToLive = timeToLive;\n        this.tokens = new Map();\n    }\n\n    generate(tokenId, currentTime) {\n        this.tokens.set(tokenId, currentTime + this.timeToLive);\n    }\n\n    renew(tokenId, currentTime) {\n        if (this.tokens.has(tokenId) && this.tokens.get(tokenId) > currentTime) {\n            this.tokens.set(tokenId, currentTime + this.timeToLive);\n        }\n    }\n\n    countUnexpiredTokens(currentTime) {\n        let count = 0;\n        for (const expirationTime of this.tokens.values()) {\n            if (expirationTime > currentTime) count++;\n        }\n        return count;\n    }\n}\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`.\n\nReturn _the **number of pairs** satisfying the condition._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[2,1,2,1\\], nums2 = \\[1,2,1,2\\]\n**Output:** 1\n**Explanation**: The pairs satisfying the condition are:\n- (0, 2) where 2 + 2 > 1 + 1.\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,10,6,2\\], nums2 = \\[1,4,1,5\\]\n**Output:** 5\n**Explanation**: The pairs satisfying the condition are:\n- (0, 1) where 1 + 10 > 1 + 4.\n- (0, 2) where 1 + 6 > 1 + 1.\n- (1, 2) where 10 + 6 > 4 + 1.\n- (1, 3) where 10 + 2 > 4 + 5.\n- (2, 3) where 6 + 2 > 1 + 5.\n\n**Constraints:**\n\n*   `n == nums1.length == nums2.length`\n*   `1 <= n <= 105`\n*   `1 <= nums1[i], nums2[i] <= 105`We can write it as nums1[i] - nums2[i] > nums2[j] - nums1[j] instead of nums1[i] + nums1[j] > nums2[i] + nums2[j]. Store nums1[idx] - nums2[idx] in a data structure. Store nums2[idx] - nums1[idx] in a different data structure. For each integer in the first data structure, count the number of the strictly smaller integers in the second data structure with a larger index in the original array.",
          "output": "def count_homogenous(s: str) -> int:\n    res, count, mod = 0, 1, 10**9 + 7\n    for i in range(1, len(s)):\n        count = count + 1 if s[i] == s[i - 1] else 1\n        res = (res + count) % mod\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: A **square triple** `(a,b,c)` is a triple where `a`, `b`, and `c` are **integers** and `a2 + b2 = c2`.\n\nGiven an integer `n`, return _the number of **square triples** such that_ `1 <= a, b, c <= n`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation**: The square triples are (3,4,5) and (4,3,5).\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 4\n**Explanation**: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).\n\n**Constraints:**\n\n*   `1 <= n <= 250`Iterate over all possible pairs (a,b) and check that the square root of a * a + b * b is an integers less than or equal n You can check that the square root of an integer is an integer using binary seach or a builtin function like sqrt",
          "output": "def reverse(x):\n    rev = 0\n\n    while x != 0:\n        rev = rev * 10 + x % 10\n        x = x // 10\n\n    return rev\n\ndef count_nice_pairs(nums):\n    MOD = 1_000_000_007\n    count = {}\n    result = 0\n\n    for num in nums:\n        diff = num - reverse(num)\n        count[diff] = count.get(diff, 0) + 1\n\n    for val in count.values():\n        result = (result + ((val * (val - 1)) // 2) % MOD) % MOD\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` matrix `maze` (**0-indexed**) with empty cells (represented as `'.'`) and walls (represented as `'+'`). You are also given the `entrance` of the maze, where `entrance = [entrancerow, entrancecol]` denotes the row and column of the cell you are initially standing at.\n\nIn one step, you can move one cell **up**, **down**, **left**, or **right**. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the **nearest exit** from the `entrance`. An **exit** is defined as an **empty cell** that is at the **border** of the `maze`. The `entrance` **does not count** as an exit.\n\nReturn _the **number of steps** in the shortest path from the_ `entrance` _to the nearest exit, or_ `-1` _if no such path exists_.\n\n",
          "input": "**Example 1:**\n\n**Input:** maze = \\[\\[ \"+ \", \"+ \", \". \", \"+ \"\\],\\[ \". \", \". \", \". \", \"+ \"\\],\\[ \"+ \", \"+ \", \"+ \", \". \"\\]\\], entrance = \\[1,2\\]\n**Output:** 1\n**Explanation:** There are 3 exits in this maze at \\[1,0\\], \\[0,2\\], and \\[2,3\\].\nInitially, you are at the entrance cell \\[1,2\\].\n- You can reach \\[1,0\\] by moving 2 steps left.\n- You can reach \\[0,2\\] by moving 1 step up.\nIt is impossible to reach \\[2,3\\] from the entrance.\nThus, the nearest exit is \\[0,2\\], which is 1 step away.\n\n**Example 2:**\n\n**Input:** maze = \\[\\[ \"+ \", \"+ \", \"+ \"\\],\\[ \". \", \". \", \". \"\\],\\[ \"+ \", \"+ \", \"+ \"\\]\\], entrance = \\[1,0\\]\n**Output:** 2\n**Explanation:** There is 1 exit in this maze at \\[1,2\\].\n\\[1,0\\] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell \\[1,0\\].\n- You can reach \\[1,2\\] by moving 2 steps right.\nThus, the nearest exit is \\[1,2\\], which is 2 steps away.\n\n**Example 3:**\n\n**Input:** maze = \\[\\[ \". \", \"+ \"\\]\\], entrance = \\[0,0\\]\n**Output:** -1\n**Explanation:** There are no exits in this maze.\n\n**Constraints:**\n\n*   `maze.length == m`\n*   `maze[i].length == n`\n*   `1 <= m, n <= 100`\n*   `maze[i][j]` is either `'.'` or `'+'`.\n*   `entrance.length == 2`\n*   `0 <= entrancerow < m`\n*   `0 <= entrancecol < n`\n*   `entrance` will always be an empty cell.Which type of traversal lets you find the distance from a point? Try using a Breadth First Search.",
          "output": "from collections import deque\n\ndef nearest_exit(maze, entrance):\n    m, n = len(maze), len(maze[0])\n    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    q = deque([tuple(entrance)])\n    \n    steps = -1\n    while q:\n        steps += 1\n        for _ in range(len(q)):\n            r, c = q.popleft()\n            if maze[r][c] == '+': continue\n            if r == 0 or r == m-1 or c == 0 or c == n-1:\n                if r != entrance[0] or c != entrance[1]: return steps\n            maze[r][c] = '+'\n            for dr, dc in moves:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    q.append((nr, nc))\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob take turns playing a game, with **Alice** **starting first**.\n\nYou are given a string `num` of **even length** consisting of digits and `'?'` characters. On each turn, a player will do the following if there is still at least one `'?'` in `num`:\n\n1.  Choose an index `i` where `num[i] == '?'`.\n2.  Replace `num[i]` with any digit between `'0'` and `'9'`.\n\nThe game ends when there are no more `'?'` characters in `num`.\n\nFor Bob to win, the sum of the digits in the first half of `num` must be **equal** to the sum of the digits in the second half. For Alice to win, the sums must **not be equal**.\n\n*   For example, if the game ended with `num = \"243801 \"`, then Bob wins because `2+4+3 = 8+0+1`. If the game ended with `num = \"243803 \"`, then Alice wins because `2+4+3 != 8+0+3`.\n\nAssuming Alice and Bob play **optimally**, return `true` _if Alice will win and_ `false` _if Bob will win_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"5023 \"\n**Output:** false\n**Explanation:** There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.\n\n**Example 2:**\n\n**Input:** num =  \"25?? \"\n**Output:** true\n**Explanation:** Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.\n\n**Example 3:**\n\n**Input:** num =  \"?3295??? \"\n**Output:** false\n**Explanation:** It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first '?' with '9'. num =  \"93295??? \".\n- Bob replaces one of the '?' in the right half with '9'. num =  \"932959?? \".\n- Alice replaces one of the '?' in the right half with '2'. num =  \"9329592? \".\n- Bob replaces the last '?' in the right half with '7'. num =  \"93295927 \".\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.\n\n**Constraints:**\n\n*   `2 <= num.length <= 105`\n*   `num.length` is **even**.\n*   `num` consists of only digits and `'?'`.Bob can always make the total sum of both sides equal in mod 9. Why does the difference between the number of question marks on the left and right side matter?",
          "output": "def max_ascending_sum(nums):\n    max_sum = current_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            current_sum += nums[i]\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = nums[i]\n\n    return max(max_sum, current_sum)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a country of `n` cities numbered from `0` to `n - 1` where **all the cities are connected** by bi-directional roads. The roads are represented as a 2D integer array `edges` where `edges[i] = [xi, yi, timei]` denotes a road between cities `xi` and `yi` that takes `timei` minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.\n\nEach time you pass through a city, you must pay a passing fee. This is represented as a **0-indexed** integer array `passingFees` of length `n` where `passingFees[j]` is the amount of dollars you must pay when you pass through city `j`.\n\nIn the beginning, you are at city `0` and want to reach city `n - 1` in `maxTime` **minutes or less**. The **cost** of your journey is the **summation of passing fees** for each city that you passed through at some moment of your journey (**including** the source and destination cities).\n\nGiven `maxTime`, `edges`, and `passingFees`, return _the **minimum cost** to complete your journey, or_ `-1` _if you cannot complete it within_ `maxTime` _minutes_.\n\n",
          "input": "**Example 1:**\n\n**Input:** maxTime = 30, edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[2,5,10\\],\\[0,3,1\\],\\[3,4,10\\],\\[4,5,15\\]\\], passingFees = \\[5,1,2,20,20,3\\]\n**Output:** 11\n**Explanation:** The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees.\n\n**Example 2:**\n\n**Input:** maxTime = 29, edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[2,5,10\\],\\[0,3,1\\],\\[3,4,10\\],\\[4,5,15\\]\\], passingFees = \\[5,1,2,20,20,3\\]\n**Output:** 48\n**Explanation:** The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees.\nYou cannot take path 0 -> 1 -> 2 -> 5 since it would take too long.\n\n**Example 3:**\n\n**Input:** maxTime = 25, edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[2,5,10\\],\\[0,3,1\\],\\[3,4,10\\],\\[4,5,15\\]\\], passingFees = \\[5,1,2,20,20,3\\]\n**Output:** -1\n**Explanation:** There is no way to reach city 5 from city 0 within 25 minutes.\n\n**Constraints:**\n\n*   `1 <= maxTime <= 1000`\n*   `n == passingFees.length`\n*   `2 <= n <= 1000`\n*   `n - 1 <= edges.length <= 1000`\n*   `0 <= xi, yi <= n - 1`\n*   `1 <= timei <= 1000`\n*   `1 <= passingFees[j] <= 1000`\n*   The graph may contain multiple edges between two nodes.\n*   The graph does not contain self loops.Consider a new graph where each node is one of the old nodes at a specific time. For example, node 0 at time 5. You need to find the shortest path in the new graph.",
          "output": "from heapq import heappush, heappop\n\ndef getNumberOfBacklogOrders(orders):\n    buy, sell = [], []\n\n    for price, amount, orderType in orders:\n        if orderType == 0:\n            while amount > 0 and sell and -sell[0][0] <= price:\n                executedAmount = min(amount, sell[0][1])\n                amount -= executedAmount\n                sell[0] = [-sell[0][0], sell[0][1] - executedAmount]\n                if sell[0][1] == 0:\n                    heappop(sell)\n            if amount:\n                heappush(buy, [-price, amount])\n        else:\n            while amount > 0 and buy and buy[0][0] >= price:\n                executedAmount = min(amount, buy[0][1])\n                amount -= executedAmount\n                buy[0] = [buy[0][0], buy[0][1] - executedAmount]\n                if buy[0][1] == 0:\n                    heappop(buy)\n            if amount:\n                heappush(sell, [-price, amount])\n\n    res = sum(item[1] for item in buy) + sum(item[1] for item in sell)\n    return res % 1000000007\n"
     },
     {
          "instruction": "Write python code for this problem: The **product difference** between two pairs `(a, b)` and `(c, d)` is defined as `(a * b) - (c * d)`.\n\n*   For example, the product difference between `(5, 6)` and `(2, 7)` is `(5 * 6) - (2 * 7) = 16`.\n\nGiven an integer array `nums`, choose four **distinct** indices `w`, `x`, `y`, and `z` such that the **product difference** between pairs `(nums[w], nums[x])` and `(nums[y], nums[z])` is **maximized**.\n\nReturn _the **maximum** such product difference_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,6,2,7,4\\]\n**Output:** 34\n**Explanation:** We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\nThe product difference is (6 \\* 7) - (2 \\* 4) = 34.\n\n**Example 2:**\n\n**Input:** nums = \\[4,2,5,9,7,4,8\\]\n**Output:** 64\n**Explanation:** We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\nThe product difference is (9 \\* 8) - (2 \\* 4) = 64.\n\n**Constraints:**\n\n*   `4 <= nums.length <= 104`\n*   `1 <= nums[i] <= 104`If you only had to find the maximum product of 2 numbers in an array, which 2 numbers should you choose? We only need to worry about 4 numbers in the array.",
          "output": "def min_changes(nums, k):\n    n = len(nums)\n    xor_prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        xor_prefix[i] = xor_prefix[i - 1] ^ nums[i - 1]\n\n    dp = [{} for _ in range(k)]\n    min_dp = [n] * k\n\n    for i in range(1, n + 1):\n        x = xor_prefix[i] ^ xor_prefix[i - k]\n\n        if i >= k:\n            dp[0][x] = dp[0].get(x, 0) + 1\n\n        for j in range(1, 1 + (i - j * k) // k):\n            if x in dp[j - 1]:\n                dp[j][x] = dp[j].get(x, 0) + 1\n                min_dp[j] = min(min_dp[j], dp[j - 1][x] - dp[j][x])\n\n    return min(n, [min_dp[j] + j for j in range(k)])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer matrix `grid`\u200b\u200b\u200b, where `m` and `n` are both **even** integers, and an integer `k`.\n\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\n\nA cyclic rotation of the matrix is done by cyclically rotating **each layer** in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the **counter-clockwise** direction. An example rotation is shown below:\n\nReturn _the matrix after applying_ `k` _cyclic rotations to it_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[40,10\\],\\[30,20\\]\\], k = 1\n**Output:** \\[\\[10,20\\],\\[40,30\\]\\]\n**Explanation:** The figures above represent the grid at every state.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,2,3,4\\],\\[5,6,7,8\\],\\[9,10,11,12\\],\\[13,14,15,16\\]\\], k = 2\n**Output:** \\[\\[3,4,8,12\\],\\[2,11,10,16\\],\\[1,7,6,15\\],\\[5,9,13,14\\]\\]\n**Explanation:** The figures above represent the grid at every state.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `2 <= m, n <= 50`\n*   Both `m` and `n` are **even** integers.\n*   `1 <= grid[i][j] <= 5000`\n*   `1 <= k <= 109`First, you need to consider each layer separately as an array. Just cycle this array and then re-assign it.",
          "output": "def rotateGrid(grid, k):\n    if not grid: return grid\n    \n    m, n = len(grid), len(grid[0])\n    numLayers = min(m, n) // 2\n\n    for layer in range(numLayers):\n        numToRotate = (m - 2 * layer) * 2 + (n - 2 * layer - 2) * 2\n        effective_k = k % numToRotate\n\n        while effective_k:\n            temp = grid[layer][layer]\n            for i in range(layer + 1, m - layer): temp, grid[i][layer] = grid[i][layer], temp\n            for j in range(layer + 1, n - layer): temp, grid[m - layer - 1][j] = grid[m - layer - 1][j], temp\n            for i in range(m - layer - 2, layer - 1, -1): temp, grid[i][n - layer - 1] = grid[i][n - layer - 1], temp\n            for j in range(n - layer - 2, layer, -1): temp, grid[layer][j] = grid[layer][j], temp\n            effective_k -= 1\n\n    return grid\n"
     },
     {
          "instruction": "Write python code for this problem: A **wonderful** string is a string where **at most one** letter appears an **odd** number of times.\n\n*   For example, `\"ccjjc \"` and `\"abab \"` are wonderful, but `\"ab \"` is not.\n\nGiven a string `word` that consists of the first ten lowercase English letters (`'a'` through `'j'`), return _the **number of wonderful non-empty substrings** in_ `word`_. If the same substring appears multiple times in_ `word`_, then count **each occurrence** separately._\n\nA **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"aba \"\n**Output:** 4\n**Explanation:** The four wonderful substrings are underlined below:\n-  \"**a**ba \" ->  \"a \"\n-  \"a**b**a \" ->  \"b \"\n-  \"ab**a** \" ->  \"a \"\n-  \"**aba** \" ->  \"aba \"\n\n**Example 2:**\n\n**Input:** word =  \"aabb \"\n**Output:** 9\n**Explanation:** The nine wonderful substrings are underlined below:\n-  \"**a**abb \" ->  \"a \"\n-  \"**aa**bb \" ->  \"aa \"\n-  \"**aab**b \" ->  \"aab \"\n-  \"**aabb** \" ->  \"aabb \"\n-  \"a**a**bb \" ->  \"a \"\n-  \"a**abb** \" ->  \"abb \"\n-  \"aa**b**b \" ->  \"b \"\n-  \"aa**bb** \" ->  \"bb \"\n-  \"aab**b** \" ->  \"b \"\n\n**Example 3:**\n\n**Input:** word =  \"he \"\n**Output:** 2\n**Explanation:** The two wonderful substrings are underlined below:\n-  \"**h**e \" ->  \"h \"\n-  \"h**e** \" ->  \"e \"\n\n**Constraints:**\n\n*   `1 <= word.length <= 105`\n*   `word` consists of lowercase English letters from `'a'` to `'j'`.For each prefix of the string, check which characters are of even frequency and which are not and represent it by a bitmask. Find the other prefixes whose masks differs from the current prefix mask by at most one bit.",
          "output": "def are_almost_equal(s1, s2):\n    diff_count = 0\n    first_diff = -1\n    second_diff = -1\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            diff_count += 1\n            if diff_count == 1:\n                first_diff = i\n            elif diff_count == 2:\n                second_diff = i\n            else:\n                return False\n    return diff_count == 0 or (diff_count == 2 and s1[first_diff] == s2[second_diff] and s1[second_diff] == s2[first_diff])\n"
     },
     {
          "instruction": "Write python code for this problem: A **peak** element in a 2D grid is an element that is **strictly greater** than all of its **adjacent** neighbors to the left, right, top, and bottom.\n\nGiven a **0-indexed** `m x n` matrix `mat` where **no two adjacent cells are equal**, find **any** peak element `mat[i][j]` and return _the length 2 array_ `[i,j]`.\n\nYou may assume that the entire matrix is surrounded by an **outer perimeter** with the value `-1` in each cell.\n\nYou must write an algorithm that runs in `O(m log(n))` or `O(n log(m))` time.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,4\\],\\[3,2\\]\\]\n**Output:** \\[0,1\\]\n**Explanation:** Both 3 and 4 are peak elements so \\[1,0\\] and \\[0,1\\] are both acceptable answers.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[10,20,15\\],\\[21,30,14\\],\\[7,16,32\\]\\]\n**Output:** \\[1,1\\]\n**Explanation:** Both 30 and 32 are peak elements so \\[1,1\\] and \\[2,2\\] are both acceptable answers.\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 500`\n*   `1 <= mat[i][j] <= 105`\n*   No two adjacent cells are equal.Let's assume that the width of the array is bigger than the height, otherwise, we will split in another direction. Split the array into three parts: central column left side and right side. Go through the central column and two neighbor columns and look for maximum. If it's in the central column - this is our peak. If it's on the left side, run this algorithm on subarray left_side + central_column. If it's on the right side, run this algorithm on subarray right_side + central_column",
          "output": "def min_operations(nums1, nums2):\n    sum1, sum2 = sum(nums1), sum(nums2)\n    if sum1 == sum2: return 0\n    if sum1 < sum2: nums1, nums2 = nums2, nums1\n    nums1.sort(reverse=True)\n    nums2.sort()\n    diff, operations, i, j = abs(sum1 - sum2), 0, 0, 0\n    while diff > 0 and (i < len(nums1) or j < len(nums2)):\n        option1 = nums1[i] - 1 if i < len(nums1) else 0\n        option2 = 6 - nums2[j] if j < len(nums2) else 0\n        if option1 > option2:\n            diff -= option1\n            i += 1\n        else:\n            diff -= option2\n            j += 1\n        operations += 1\n    return operations if diff == 0 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **zero-based permutation** `nums` (**0-indexed**), build an array `ans` of the **same length** where `ans[i] = nums[nums[i]]` for each `0 <= i < nums.length` and return it.\n\nA **zero-based permutation** `nums` is an array of **distinct** integers from `0` to `nums.length - 1` (**inclusive**).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,2,1,5,3,4\\]\n**Output:** \\[0,1,2,4,5,3\\]\n**Explanation:** The array ans is built as follows: \nans = \\[nums\\[nums\\[0\\]\\], nums\\[nums\\[1\\]\\], nums\\[nums\\[2\\]\\], nums\\[nums\\[3\\]\\], nums\\[nums\\[4\\]\\], nums\\[nums\\[5\\]\\]\\]\n    = \\[nums\\[0\\], nums\\[2\\], nums\\[1\\], nums\\[5\\], nums\\[3\\], nums\\[4\\]\\]\n    = \\[0,1,2,4,5,3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[5,0,1,2,3,4\\]\n**Output:** \\[4,5,0,1,2,3\\]\n**Explanation:** The array ans is built as follows:\nans = \\[nums\\[nums\\[0\\]\\], nums\\[nums\\[1\\]\\], nums\\[nums\\[2\\]\\], nums\\[nums\\[3\\]\\], nums\\[nums\\[4\\]\\], nums\\[nums\\[5\\]\\]\\]\n    = \\[nums\\[5\\], nums\\[0\\], nums\\[1\\], nums\\[2\\], nums\\[3\\], nums\\[4\\]\\]\n    = \\[4,5,0,1,2,3\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] < nums.length`\n*   The elements in `nums` are **distinct**.\n\n**Follow-up:** Can you solve it without using an extra space (i.e., `O(1)` memory)?Just apply what's said in the statement. Notice that you can't apply it on the same array directly since some elements will change after application",
          "output": "def square_is_white(coordinates: str) -> bool:\n    return (ord(coordinates[0]) - ord('a') + ord(coordinates[1]) - ord('1')) % 2 == 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a video game where you are defending your city from a group of `n` monsters. You are given a **0-indexed** integer array `dist` of size `n`, where `dist[i]` is the **initial distance** in kilometers of the `ith` monster from the city.\n\nThe monsters walk toward the city at a **constant** speed. The speed of each monster is given to you in an integer array `speed` of size `n`, where `speed[i]` is the speed of the `ith` monster in kilometers per minute.\n\nYou have a weapon that, once fully charged, can eliminate a **single** monster. However, the weapon takes **one minute** to charge.The weapon is fully charged at the very start.\n\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a **loss**, and the game ends before you can use your weapon.\n\nReturn _the **maximum** number of monsters that you can eliminate before you lose, or_ `n` _if you can eliminate all the monsters before they reach the city._\n\n",
          "input": "**Example 1:**\n\n**Input:** dist = \\[1,3,4\\], speed = \\[1,1,1\\]\n**Output:** 3\n**Explanation:**\nIn the beginning, the distances of the monsters are \\[1,3,4\\]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are \\[X,2,3\\]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are \\[X,X,2\\]. You eliminate the thrid monster.\nAll 3 monsters can be eliminated.\n\n**Example 2:**\n\n**Input:** dist = \\[1,1,2,3\\], speed = \\[1,1,1,1\\]\n**Output:** 1\n**Explanation:**\nIn the beginning, the distances of the monsters are \\[1,1,2,3\\]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are \\[X,0,1,2\\], so you lose.\nYou can only eliminate 1 monster.\n\n**Example 3:**\n\n**Input:** dist = \\[3,2,4\\], speed = \\[5,3,2\\]\n**Output:** 1\n**Explanation:**\nIn the beginning, the distances of the monsters are \\[3,2,4\\]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are \\[X,0,2\\], so you lose.\nYou can only eliminate 1 monster.\n\n**Constraints:**\n\n*   `n == dist.length == speed.length`\n*   `1 <= n <= 105`\n*   `1 <= dist[i], speed[i] <= 105`Find the amount of time it takes each monster to arrive. Find the order in which the monsters will arrive.",
          "output": "def eliminate_maximum(dist, speed):\n    n = len(dist)\n    time_to_reach_city = [(dist[i] + speed[i] - 1) // speed[i] for i in range(n)]\n    time_to_reach_city.sort()\n    eliminated = 0\n    for i in range(n):\n        if time_to_reach_city[i] > i:\n            eliminated += 1\n        else:\n            break\n    return eliminated\n"
     },
     {
          "instruction": "Write python code for this problem: A digit string is **good** if the digits **(0-indexed)** at **even** indices are **even** and the digits at **odd** indices are **prime** (`2`, `3`, `5`, or `7`).\n\n*   For example, `\"2582 \"` is good because the digits (`2` and `8`) at even positions are even and the digits (`5` and `2`) at odd positions are prime. However, `\"3245 \"` is **not** good because `3` is at an even index but is not even.\n\nGiven an integer `n`, return _the **total** number of good digit strings of length_ `n`. Since the answer may be large, **return it modulo** `109 + 7`.\n\nA **digit string** is a string consisting of digits `0` through `9` that may contain leading zeros.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 5\n**Explanation:** The good numbers of length 1 are  \"0 \",  \"2 \",  \"4 \",  \"6 \",  \"8 \".\n\n**Example 2:**\n\n**Input:** n = 4\n**Output:** 400\n\n**Example 3:**\n\n**Input:** n = 50\n**Output:** 564908303\n\n**Constraints:**\n\n*   `1 <= n <= 1015`Is there a formula we can use to find the count of all the good numbers? Exponentiation can be done very fast if we looked at the binary bits of n.",
          "output": "def goodDigitStrings(n: int) -> int:\n    MOD = 1000000007\n    even_count, prime_count = 1, 1\n    for i in range(n):\n        if i % 2 == 0:\n            even_count = (even_count * 5) % MOD\n        else:\n            prime_count = (prime_count * 4) % MOD\n    return (even_count * prime_count) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: There is a country of `n` cities numbered from `0` to `n - 1`. In this country, there is a road connecting **every pair** of cities.\n\nThere are `m` friends numbered from `0` to `m - 1` who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city **more than once**, but the same city will not be listed consecutively.\n\nGiven an integer `n` and a 2D integer array `paths` where `paths[i]` is an integer array representing the path of the `ith` friend, return _the length of the **longest common subpath** that is shared by **every** friend's path, or_ `0` _if there is no common subpath at all_.\n\nA **subpath** of a path is a contiguous sequence of cities within that path.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, paths = \\[\\[0,1,2,3,4\\],\n                       \\[2,3,4\\],\n                       \\[4,0,1,2,3\\]\\]\n**Output:** 2\n**Explanation:** The longest common subpath is \\[2,3\\].\n\n**Example 2:**\n\n**Input:** n = 3, paths = \\[\\[0\\],\\[1\\],\\[2\\]\\]\n**Output:** 0\n**Explanation:** There is no common subpath shared by the three paths.\n\n**Example 3:**\n\n**Input:** n = 5, paths = \\[\\[0,1,2,3,4\\],\n                       \\[4,3,2,1,0\\]\\]\n**Output:** 1\n**Explanation:** The possible longest common subpaths are \\[0\\], \\[1\\], \\[2\\], \\[3\\], and \\[4\\]. All have a length of 1.\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `m == paths.length`\n*   `2 <= m <= 105`\n*   `sum(paths[i].length) <= 105`\n*   `0 <= paths[i][j] < n`\n*   The same city is not listed multiple times consecutively in `paths[i]`.If there is a common path with length x, there is for sure a common path of length y where y < x. We can use binary search over the answer with the range [0, min(path[i].length)]. Using binary search, we want to verify if we have a common path of length m. We can achieve this using hashing.",
          "output": "def are_sentences_similar(sentence1, sentence2):\n    words1 = sentence1.split()\n    words2 = sentence2.split()\n\n    while words1 and words2 and words1[0] == words2[0]:\n        words1.pop(0)\n        words2.pop(0)\n    \n    while words1 and words2 and words1[-1] == words2[-1]:\n        words1.pop()\n        words2.pop()\n\n    return not words1 or not words2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `order` of length `n`, a **permutation** of integers from `1` to `n` representing the **order** of insertion into a **binary search tree**.\n\nA binary search tree is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\nThe binary search tree is constructed as follows:\n\n*   `order[0]` will be the **root** of the binary search tree.\n*   All subsequent elements are inserted as the **child** of **any** existing node such that the binary search tree properties hold.\n\nReturn _the **depth** of the binary search tree_.\n\nA binary tree's **depth** is the number of **nodes** along the **longest path** from the root node down to the farthest leaf node.\n\n",
          "input": "**Example 1:**\n\n**Input:** order = \\[2,1,4,3\\]\n**Output:** 3\n**Explanation:** The binary search tree has a depth of 3 with path 2->3->4.\n\n**Example 2:**\n\n**Input:** order = \\[2,1,3,4\\]\n**Output:** 3\n**Explanation:** The binary search tree has a depth of 3 with path 2->3->4.\n\n**Example 3:**\n\n**Input:** order = \\[1,2,3,4\\]\n**Output:** 4\n**Explanation:** The binary search tree has a depth of 4 with path 1->2->3->4.\n\n**Constraints:**\n\n*   `n == order.length`\n*   `1 <= n <= 105`\n*   `order` is a permutation of integers between `1` and `n`.There are at most 2 possible places where a new node can be inserted? How can we keep track of the depth of each node?",
          "output": "def get_collision_times(cars):\n    n = len(cars)\n    collisions = [-1] * n\n    for i in range(n-1, -1, -1):\n        time_to_collision = 1e9\n        for j in range(i+1, n):\n            if cars[j][1] > cars[i][1]:\n                continue\n            current_collision = (cars[j][0] - cars[i][0]) / (cars[i][1] - cars[j][1])\n            if current_collision < time_to_collision:\n                time_to_collision = min(time_to_collision, min(collisions[j], current_collision))\n        collisions[i] = -1.0 if time_to_collision == 1e9 else time_to_collision\n    return collisions\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return `true` _if_ `s` _is a **good** string, or_ `false` _otherwise_.\n\nA string `s` is **good** if **all** the characters that appear in `s` have the **same** number of occurrences (i.e., the same frequency).\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abacbc \"\n**Output:** true\n**Explanation:** The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.\n\n**Example 2:**\n\n**Input:** s =  \"aaabb \"\n**Output:** false\n**Explanation:** The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of lowercase English letters.Build a dictionary containing the frequency of each character appearing in s Check if all values in the dictionary are the same.",
          "output": "def make_string_sorted(s):\n    mod = 1000000007\n    n = len(s)\n    fact = [1] * (n + 1)\n    inv = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % mod\n        inv[i] = inv[i - 1] * (mod - mod // i) % mod\n        \n    ans = 0\n    for i in range(n):\n        less_than = 0\n        for j in range(i + 1, n):\n            if s[j] < s[i]:\n                less_than += 1\n        ans = (ans + less_than * fact[n - i - 1]) % mod\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There is a party where `n` friends numbered from `0` to `n - 1` are attending. There is an **infinite** number of chairs in this party that are numbered from `0` to `infinity`. When a friend arrives at the party, they sit on the unoccupied chair with the **smallest number**.\n\n*   For example, if chairs `0`, `1`, and `5` are occupied when a friend comes, they will sit on chair number `2`.\n\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.\n\nYou are given a **0-indexed** 2D integer array `times` where `times[i] = [arrivali, leavingi]`, indicating the arrival and leaving times of the `ith` friend respectively, and an integer `targetFriend`. All arrival times are **distinct**.\n\nReturn _the **chair number** that the friend numbered_ `targetFriend` _will sit on_.\n\n",
          "input": "**Example 1:**\n\n**Input:** times = \\[\\[1,4\\],\\[2,3\\],\\[4,6\\]\\], targetFriend = 1\n**Output:** 1\n**Explanation:** \n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1.\n\n**Example 2:**\n\n**Input:** times = \\[\\[3,10\\],\\[1,5\\],\\[2,6\\]\\], targetFriend = 0\n**Output:** 2\n**Explanation:** \n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2.\n\n**Constraints:**\n\n*   `n == times.length`\n*   `2 <= n <= 104`\n*   `times[i].length == 2`\n*   `1 <= arrivali < leavingi <= 105`\n*   `0 <= targetFriend <= n - 1`\n*   Each `arrivali` time is **distinct**.Sort times by arrival time. for each arrival_i find the smallest unoccupied chair and mark it as occupied until leaving_i.",
          "output": "from sortedcontainers import SortedDict\nfrom sortedcontainers import SortedSet\n\ndef smallestChair(times, targetFriend):\n    events = SortedDict()\n    for i, (arrival, leaving) in enumerate(times):\n        events[arrival] = i\n        events[leaving] = ~i\n\n    availableChairs = SortedSet(range(len(times)))\n    assignedChair = [0] * len(times)\n\n    for time, idx in events.items():\n        if idx >= 0:\n            chair = availableChairs.pop(0)\n            assignedChair[idx] = chair\n            if idx == targetFriend:\n                return chair\n        else:\n            availableChairs.add(assignedChair[~idx])\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a **unique** color. You are given a 2D integer array `segments`, where `segments[i] = [starti, endi, colori]` represents the **half-closed segment** `[starti, endi)` with `colori` as the color.\n\nThe colors in the overlapping segments of the painting were **mixed** when it was painted. When two or more colors mix, they form a new color that can be represented as a **set** of mixed colors.\n\n*   For example, if colors `2`, `4`, and `6` are mixed, then the resulting mixed color is `{2,4,6}`.\n\nFor the sake of simplicity, you should only output the **sum** of the elements in the set rather than the full set.\n\nYou want to **describe** the painting with the **minimum** number of non-overlapping **half-closed segments** of these mixed colors. These segments can be represented by the 2D array `painting` where `painting[j] = [leftj, rightj, mixj]` describes a **half-closed segment** `[leftj, rightj)` with the mixed color **sum** of `mixj`.\n\n*   For example, the painting created with `segments = [[1,4,5],[1,7,7]]` can be described by `painting = [[1,4,12],[4,7,7]]` because:\n    *   `[1,4)` is colored `{5,7}` (with a sum of `12`) from both the first and second segments.\n    *   `[4,7)` is colored `{7}` from only the second segment.\n\nReturn _the 2D array_ `painting` _describing the finished painting (excluding any parts that are **not** painted). You may return the segments in **any order**_.\n\nA **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** segments = \\[\\[1,4,5\\],\\[4,7,7\\],\\[1,7,9\\]\\]\n**Output:** \\[\\[1,4,14\\],\\[4,7,16\\]\\]\n**Explanation:** The painting can be described as follows:\n- \\[1,4) is colored {5,9} (with a sum of 14) from the first and third segments.\n- \\[4,7) is colored {7,9} (with a sum of 16) from the second and third segments.\n\n**Example 2:**\n\n**Input:** segments = \\[\\[1,7,9\\],\\[6,8,15\\],\\[8,10,7\\]\\]\n**Output:** \\[\\[1,6,9\\],\\[6,7,24\\],\\[7,8,15\\],\\[8,10,7\\]\\]\n**Explanation:** The painting can be described as follows:\n- \\[1,6) is colored 9 from the first segment.\n- \\[6,7) is colored {9,15} (with a sum of 24) from the first and second segments.\n- \\[7,8) is colored 15 from the second segment.\n- \\[8,10) is colored 7 from the third segment.\n\n**Example 3:**\n\n**Input:** segments = \\[\\[1,4,5\\],\\[1,4,7\\],\\[4,7,1\\],\\[4,7,11\\]\\]\n**Output:** \\[\\[1,4,12\\],\\[4,7,12\\]\\]\n**Explanation:** The painting can be described as follows:\n- \\[1,4) is colored {5,7} (with a sum of 12) from the first and second segments.\n- \\[4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.\nNote that returning a single segment \\[1,7) is incorrect because the mixed color sets are different.\n\n**Constraints:**\n\n*   `1 <= segments.length <= 2 * 104`\n*   `segments[i].length == 3`\n*   `1 <= starti < endi <= 105`\n*   `1 <= colori <= 109`\n*   Each `colori` is distinct.Can we sort the segments in a way to help solve the problem? How can we dynamically keep track of the sum of the current segment(s)?",
          "output": "def splitPainting(segments):\n    line = {}\n    for s in segments:\n        start, end, color = s\n        if start not in line:\n            line[start] = 0\n        if end not in line:\n            line[end] = 0\n        line[start] += color\n        line[end] -= color\n    res = []\n    pre = 0\n    sum = 0\n    for key in sorted(line.keys()):\n        if pre > 0:\n            if sum > 0:\n                res.append([pre, key, sum])\n        pre = key\n        sum += line[key]\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of length `n`, you want to create an array `ans` of length `2n` where `ans[i] == nums[i]` and `ans[i + n] == nums[i]` for `0 <= i < n` (**0-indexed**).\n\nSpecifically, `ans` is the **concatenation** of two `nums` arrays.\n\nReturn _the array_ `ans`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,1\\]\n**Output:** \\[1,2,1,1,2,1\\]\n**Explanation:** The array ans is formed as follows:\n- ans = \\[nums\\[0\\],nums\\[1\\],nums\\[2\\],nums\\[0\\],nums\\[1\\],nums\\[2\\]\\]\n- ans = \\[1,2,1,1,2,1\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,2,1\\]\n**Output:** \\[1,3,2,1,1,3,2,1\\]\n**Explanation:** The array ans is formed as follows:\n- ans = \\[nums\\[0\\],nums\\[1\\],nums\\[2\\],nums\\[3\\],nums\\[0\\],nums\\[1\\],nums\\[2\\],nums\\[3\\]\\]\n- ans = \\[1,3,2,1,1,3,2,1\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 1000`\n*   `1 <= nums[i] <= 1000`Build an array of size 2 * n and assign num[i] to ans[i] and ans[i + n]",
          "output": "def maxValue(n, index, maxSum):\n    maxSum -= n\n    left, right, ans = 0, maxSum, 0\n    while left <= right:\n        mid = left + (right - left) // 2\n        sum = min(mid, index) * (min(mid, index) + 1) // 2 + min(mid, n - index - 1) * (min(mid, n - index) + 1) // 2\n        if mid > index:\n            sum += (mid - index - 1) * (mid - index) // 2\n        if mid > n - index:\n            sum += (mid - n + index) * (mid - n + index + 1) // 2\n        if sum <= maxSum:\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return ans + 1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, return _the number of **unique palindromes of length three** that are a **subsequence** of_ `s`.\n\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted **once**.\n\nA **palindrome** is a string that reads the same forwards and backwards.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n*   For example, `\"ace \"` is a subsequence of `\"abcde \"`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aabca \"\n**Output:** 3\n**Explanation:** The 3 palindromic subsequences of length 3 are:\n-  \"aba \" (subsequence of  \"aabca \")\n-  \"aaa \" (subsequence of  \"aabca \")\n-  \"aca \" (subsequence of  \"aabca \")\n\n**Example 2:**\n\n**Input:** s =  \"adc \"\n**Output:** 0\n**Explanation:** There are no palindromic subsequences of length 3 in  \"adc \".\n\n**Example 3:**\n\n**Input:** s =  \"bbcbaba \"\n**Output:** 4\n**Explanation:** The 4 palindromic subsequences of length 3 are:\n-  \"bbb \" (subsequence of  \"bbcbaba \")\n-  \"bcb \" (subsequence of  \"bbcbaba \")\n-  \"bab \" (subsequence of  \"bbcbaba \")\n-  \"aba \" (subsequence of  \"bbcbaba \")\n\n**Constraints:**\n\n*   `3 <= s.length <= 105`\n*   `s` consists of only lowercase English letters.What is the maximum number of length-3 palindromic strings? How can we keep track of the characters that appeared to the left of a given position?",
          "output": "def max_consecutive_values(coins):\n    coins.sort()\n    max_value = 0    \n    for coin in coins:\n        if coin <= max_value + 1:\n            max_value += coin\n        else:\n            break\n    return max_value + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `n` **BST (binary search tree) root nodes** for `n` separate BSTs stored in an array `trees` (**0-indexed**). Each BST in `trees` has **at most 3 nodes**, and no two roots have the same value. In one operation, you can:\n\n*   Select two **distinct** indices `i` and `j` such that the value stored at one of the **leaves** of `trees[i]` is equal to the **root value** of `trees[j]`.\n*   Replace the leaf node in `trees[i]` with `trees[j]`.\n*   Remove `trees[j]` from `trees`.\n\nReturn _the **root** of the resulting BST if it is possible to form a valid BST after performing_ `n - 1` _operations, or_ `null` _if it is impossible to create a valid BST_.\n\nA BST (binary search tree) is a binary tree where each node satisfies the following property:\n\n*   Every node in the node's left subtree has a value **strictly less** than the node's value.\n*   Every node in the node's right subtree has a value **strictly greater** than the node's value.\n\nA leaf is a node that has no children.\n\n",
          "input": "**Example 1:**\n\n**Input:** trees = \\[\\[2,1\\],\\[3,2,5\\],\\[5,4\\]\\]\n**Output:** \\[3,2,5,1,null,4\\]\n**Explanation:**\nIn the first operation, pick i=1 and j=0, and merge trees\\[0\\] into trees\\[1\\].\nDelete trees\\[0\\], so trees = \\[\\[3,2,5,1\\],\\[5,4\\]\\].\n \nIn the second operation, pick i=0 and j=1, and merge trees\\[1\\] into trees\\[0\\].\nDelete trees\\[1\\], so trees = \\[\\[3,2,5,1,null,4\\]\\].\n \nThe resulting tree, shown above, is a valid BST, so return its root.\n\n**Example 2:**\n\n**Input:** trees = \\[\\[5,3,8\\],\\[3,2,6\\]\\]\n**Output:** \\[\\]\n**Explanation:**\nPick i=0 and j=1 and merge trees\\[1\\] into trees\\[0\\].\nDelete trees\\[1\\], so trees = \\[\\[5,3,8,2,6\\]\\].\n \nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null.\n\n**Example 3:**\n\n**Input:** trees = \\[\\[5,4\\],\\[3\\]\\]\n**Output:** \\[\\]\n**Explanation:** It is impossible to perform any operations.\n\n**Constraints:**\n\n*   `n == trees.length`\n*   `1 <= n <= 5 * 104`\n*   The number of nodes in each tree is in the range `[1, 3]`.\n*   Each node in the input may have children but no grandchildren.\n*   No two roots of `trees` have the same value.\n*   All the trees in the input are **valid BSTs**.\n*   `1 <= TreeNode.val <= 5 * 104`.Is it possible to have multiple leaf nodes with the same values? How many possible positions are there for each tree? The root value of the final tree does not occur as a value in any of the leaves of the original tree.",
          "output": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef canMerge(trees):\n    leaf_count = {}\n    root_map = {}\n    \n    for tree in trees:\n        if tree.left:\n            leaf_count[tree.left.val] = leaf_count.get(tree.left.val, 0) + 1\n        if tree.right:\n            leaf_count[tree.right.val] = leaf_count.get(tree.right.val, 0) + 1\n        root_map[tree.val] = tree\n\n    def is_valid_bst(node, min_val, max_val):\n        if not node:\n            return True\n        if node.val <= min_val or node.val >= max_val:\n            return False\n        if node.left and node.left.val in root_map:\n            left_child = root_map.pop(node.left.val)\n            leaf_count[tree.left.val] -= 1\n            tree.left = left_child\n        if node.right and node.right.val in root_map:\n            right_child = root_map.pop(node.right.val)\n            leaf_count[tree.right.val] -= 1\n            tree.right = right_child\n        return is_valid_bst(node.left, min_val, node.val) and is_valid_bst(node.right, node.val, max_val)\n            \n\n    for tree in trees:\n        if leaf_count.get(tree.val, 0) == 0:\n            if is_valid_bst(tree, 0, 5e4 + 1):\n                return tree\n            break\n\n    return None\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two integers `m` and `n`. Consider an `m x n` grid where each cell is initially white. You can paint each cell **red**, **green**, or **blue**. All cells **must** be painted.\n\nReturn _the number of ways to color the grid with **no two adjacent cells having the same color**_. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** m = 1, n = 1\n**Output:** 3\n**Explanation:** The three possible colorings are shown in the image above.\n\n**Example 2:**\n\n**Input:** m = 1, n = 2\n**Output:** 6\n**Explanation:** The six possible colorings are shown in the image above.\n\n**Example 3:**\n\n**Input:** m = 5, n = 5\n**Output:** 580986\n\n**Constraints:**\n\n*   `1 <= m <= 5`\n*   `1 <= n <= 1000`Represent each colored column by a bitmask based on each cell color. Use bitmasks DP with state (currentCell, prevColumn).",
          "output": "def numOfWays(m, n):\n    mod = 1000000007\n    a, b, c, d = 6, 6, 3, 3\n    while n > 1:\n        n -= 1\n        temp_a = a\n        temp_c = c\n        a = (a * 3 + b * 2) % mod\n        b = (temp_a * 2 + b * 2) % mod\n        c = (c * 3 + d * 2) % mod\n        d = (temp_c * 2 + d * 2) % mod\n    return b if m == 1 else (a + c) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob take turns playing a game with **Alice starting first**.\n\nIn this game, there are `n` piles of stones. On each player's turn, the player should remove any **positive** number of stones from a non-empty pile **of his or her choice**. The first player who cannot make a move loses, and the other player wins.\n\nGiven an integer array `piles`, where `piles[i]` is the number of stones in the `ith` pile, return `true` _if Alice wins, or_ `false` _if Bob wins_.\n\nBoth Alice and Bob play **optimally**.\n\n",
          "input": "**Example 1:**\n\n**Input:** piles = \\[1\\]\n**Output:** true\n**Explanation:** There is only one possible scenario:\n- On the first turn, Alice removes one stone from the first pile. piles = \\[0\\].\n- On the second turn, there are no stones left for Bob to remove. Alice wins.\n\n**Example 2:**\n\n**Input:** piles = \\[1,1\\]\n**Output:** false\n**Explanation:** It can be proven that Bob will always win. One possible scenario is:\n- On the first turn, Alice removes one stone from the first pile. piles = \\[0,1\\].\n- On the second turn, Bob removes one stone from the second pile. piles = \\[0,0\\].\n- On the third turn, there are no stones left for Alice to remove. Bob wins.\n\n**Example 3:**\n\n**Input:** piles = \\[1,2,3\\]\n**Output:** false\n**Explanation:** It can be proven that Bob will always win. One possible scenario is:\n- On the first turn, Alice removes three stones from the third pile. piles = \\[1,2,0\\].\n- On the second turn, Bob removes one stone from the second pile. piles = \\[1,1,0\\].\n- On the third turn, Alice removes one stone from the first pile. piles = \\[0,1,0\\].\n- On the fourth turn, Bob removes one stone from the second pile. piles = \\[0,0,0\\].\n- On the fifth turn, there are no stones left for Alice to remove. Bob wins.\n\n**Constraints:**\n\n*   `n == piles.length`\n*   `1 <= n <= 7`\n*   `1 <= piles[i] <= 7`\n\n**Follow-up:** Could you find a linear time solution? Although the linear time solution may be beyond the scope of an interview, it could be interesting to know.Simulate the game and try all possible moves for each player.",
          "output": "def alice_wins(piles):\n    xor_sum = 0\n    for pile in piles:\n        xor_sum ^= pile\n    return xor_sum != 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **strictly increasing** integer array `rungs` that represents the **height** of rungs on a ladder. You are currently on the **floor** at height `0`, and you want to reach the last rung.\n\nYou are also given an integer `dist`. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is **at most** `dist`. You are able to insert rungs at any positive **integer** height if a rung is not already there.\n\nReturn _the **minimum** number of rungs that must be added to the ladder in order for you to climb to the last rung._\n\n",
          "input": "**Example 1:**\n\n**Input:** rungs = \\[1,3,5,10\\], dist = 2\n**Output:** 2\n**Explanation:**\nYou currently cannot reach the last rung.\nAdd rungs at heights 7 and 8 to climb this ladder. \nThe ladder will now have rungs at \\[1,3,5,7,8,10\\].\n\n**Example 2:**\n\n**Input:** rungs = \\[3,6,8,10\\], dist = 3\n**Output:** 0\n**Explanation:**\nThis ladder can be climbed without adding additional rungs.\n\n**Example 3:**\n\n**Input:** rungs = \\[3,4,6,7\\], dist = 2\n**Output:** 1\n**Explanation:**\nYou currently cannot reach the first rung from the ground.\nAdd a rung at height 1 to climb this ladder.\nThe ladder will now have rungs at \\[1,3,4,6,7\\].\n\n**Constraints:**\n\n*   `1 <= rungs.length <= 105`\n*   `1 <= rungs[i] <= 109`\n*   `1 <= dist <= 109`\n*   `rungs` is **strictly increasing**.Go as far as you can on the available rungs before adding new rungs. If you have to add a new rung, add it as high up as possible. Try using division to decrease the number of computations.",
          "output": "def numberOfNiceDivisors(primeFactors):\n    MOD = 1000000007\n    result = 1\n    p = 2\n    while p <= primeFactors:\n        if primeFactors % p == 0:\n            count = 0\n            while primeFactors % p == 0:\n                primeFactors //= p\n                count += 1\n            result = (result * (count * 2 + 1)) % MOD\n        p += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer matrix `points` (**0-indexed**). Starting with `0` points, you want to **maximize** the number of points you can get from the matrix.\n\nTo gain points, you must pick one cell in **each row**. Picking the cell at coordinates `(r, c)` will **add** `points[r][c]` to your score.\n\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows `r` and `r + 1` (where `0 <= r < m - 1`), picking cells at coordinates `(r, c1)` and `(r + 1, c2)` will **subtract** `abs(c1 - c2)` from your score.\n\nReturn _the **maximum** number of points you can achieve_.\n\n`abs(x)` is defined as:\n\n*   `x` for `x >= 0`.\n*   `-x` for `x < 0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,2,3\\],\\[1,5,1\\],\\[3,1,1\\]\\]\n**Output:** 9\n**Explanation:**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9.\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,5\\],\\[2,3\\],\\[4,2\\]\\]\n**Output:** 11\n**Explanation:**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11.\n\n**Constraints:**\n\n*   `m == points.length`\n*   `n == points[r].length`\n*   `1 <= m, n <= 105`\n*   `1 <= m * n <= 105`\n*   `0 <= points[r][c] <= 105`Try using dynamic programming. dp[i][j] is the maximum number of points you can have if points[i][j] is the most recent cell you picked.",
          "output": "def maxPoints(points):\n    m, n = len(points), len(points[0])\n    dp = [0] * n\n    for row in points:\n        next_dp = [0] * n\n        for c1 in range(n):\n            score = dp[c1] + row[c1] - c1\n            for c2 in range(n):\n                next_dp[c2] = max(next_dp[c2], score - row[c1] + c2)\n        dp = next_dp\n    return max(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a rooted tree consisting of `n` nodes numbered `0` to `n - 1`. Each node's number denotes its **unique genetic value** (i.e. the genetic value of node `x` is `x`). The **genetic difference** between two genetic values is defined as the **bitwise-****XOR** of their values. You are given the integer array `parents`, where `parents[i]` is the parent for node `i`. If node `x` is the **root** of the tree, then `parents[x] == -1`.\n\nYou are also given the array `queries` where `queries[i] = [nodei, vali]`. For each query `i`, find the **maximum genetic difference** between `vali` and `pi`, where `pi` is the genetic value of any node that is on the path between `nodei` and the root (including `nodei` and the root). More formally, you want to maximize `vali XOR pi`.\n\nReturn _an array_ `ans` _where_ `ans[i]` _is the answer to the_ `ith` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** parents = \\[-1,0,1,1\\], queries = \\[\\[0,2\\],\\[3,2\\],\\[2,5\\]\\]\n**Output:** \\[2,3,7\\]\n**Explanation:** The queries are processed as follows:\n- \\[0,2\\]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- \\[3,2\\]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- \\[2,5\\]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n\n**Example 2:**\n\n**Input:** parents = \\[3,7,-1,2,0,7,0,2\\], queries = \\[\\[4,6\\],\\[1,15\\],\\[0,5\\]\\]\n**Output:** \\[6,14,7\\]\n**Explanation:** The queries are processed as follows:\n- \\[4,6\\]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- \\[1,15\\]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- \\[0,5\\]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n\n**Constraints:**\n\n*   `2 <= parents.length <= 105`\n*   `0 <= parents[i] <= parents.length - 1` for every node `i` that is **not** the root.\n*   `parents[root] == -1`\n*   `1 <= queries.length <= 3 * 104`\n*   `0 <= nodei <= parents.length - 1`\n*   `0 <= vali <= 2 * 105`How can we use a trie to store all the XOR values in the path from a node to the root? How can we dynamically add the XOR values with a DFS search?",
          "output": "def min_operations(nums):\n    operations = 0\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i - 1]:\n            operations += nums[i - 1] - nums[i] + 1\n            nums[i] = nums[i - 1] + 1\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` of length `n` and an integer `k`, return _the_ `kth` _**smallest subarray sum**._\n\nA **subarray** is defined as a **non-empty** contiguous sequence of elements in an array. A **subarray sum** is the sum of all elements in the subarray.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,3\\], k = 4\n**Output:** 3\n**Explanation:** The subarrays of \\[2,1,3\\] are:\n- \\[2\\] with sum 2\n- \\[1\\] with sum 1\n- \\[3\\] with sum 3\n- \\[2,1\\] with sum 3\n- \\[1,3\\] with sum 4\n- \\[2,1,3\\] with sum 6 \nOrdering the sums from smallest to largest gives 1, 2, 3, 3, 4, 6. The 4th smallest is 3.\n\n**Example 2:**\n\n**Input:** nums = \\[3,3,5,5\\], k = 7\n**Output:** 10\n**Explanation:** The subarrays of \\[3,3,5,5\\] are:\n- \\[3\\] with sum 3\n- \\[3\\] with sum 3\n- \\[5\\] with sum 5\n- \\[5\\] with sum 5\n- \\[3,3\\] with sum 6\n- \\[3,5\\] with sum 8\n- \\[5,5\\] with sum 10\n- \\[3,3,5\\], with sum 11\n- \\[3,5,5\\] with sum 13\n- \\[3,3,5,5\\] with sum 16\nOrdering the sums from smallest to largest gives 3, 3, 5, 5, 6, 8, 10, 11, 13, 16. The 7th smallest is 10.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 2 * 104`\n*   `1 <= nums[i] <= 5 * 104`\n*   `1 <= k <= n * (n + 1) / 2`How can you compute the number of subarrays with a sum less than a given value? Can we use binary search to help find the answer?",
          "output": "def maxScore(nums: List[int], k: int) -> int:\n    n = len(nums)\n    result = 0\n    for i in range(k, -1, -1):\n        for j in range(k, n):\n            min_val = min(nums[i:j+1])\n            result = max(result, min_val * (j - i + 1))\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A **value-equal** string is a string where **all** characters are the same.\n\n*   For example, `\"1111 \"` and `\"33 \"` are value-equal strings.\n*   In contrast, `\"123 \"` is not a value-equal string.\n\nGiven a digit string `s`, decompose the string into some number of **consecutive value-equal** substrings where **exactly one** substring has a **length of** `2` and the remaining substrings have a **length of** `3`.\n\nReturn `true` _if you can decompose_ `s` _according to the above rules. Otherwise, return_ `false`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"000111000 \"\n**Output:** false\n**Explanation:** s cannot be decomposed according to the rules because \\[ \"000 \",  \"111 \",  \"000 \"\\] does not have a substring of length 2.\n\n**Example 2:**\n\n**Input:** s =  \"00011111222 \"\n**Output:** true\n**Explanation:** s can be decomposed into \\[ \"000 \",  \"111 \",  \"11 \",  \"222 \"\\].\n\n**Example 3:**\n\n**Input:** s =  \"011100022233 \"\n**Output:** false\n**Explanation:** s cannot be decomposed according to the rules because of the first '0'.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of only digits `'0'` through `'9'`.Keep looking for 3-equals, if you find a 3-equal, keep going. If you don't find a 3-equal, check if it is a 2-equal. Make sure that it is the only 2-equal. If it is neither a 3-equal nor a 2-equal, then it is impossible.",
          "output": "def num_different_integers(word):\n    for c in word:\n        if not c.isdigit():\n            word = word.replace(c, ' ')\n    nums = word.split()\n    unique_nums = set()\n    for num in nums:\n        num = num.lstrip('0') or '0'\n        unique_nums.add(num)\n    return len(unique_nums)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of size `n`. You are asked to solve `n` queries for each integer `i` in the range `0 <= i < n`.\n\nTo solve the `ith` query:\n\n1.  Find the **minimum value** in each possible subarray of size `i + 1` of the array `nums`.\n2.  Find the **maximum** of those minimum values. This maximum is the **answer** to the query.\n\nReturn _a **0-indexed** integer array_ `ans` _of size_ `n` _such that_ `ans[i]` _is the answer to the_ `ith` _query_.\n\nA **subarray** is a contiguous sequence of elements in an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,2,4\\]\n**Output:** \\[4,2,1,0\\]\n**Explanation:**\ni=0:\n- The subarrays of size 1 are \\[0\\], \\[1\\], \\[2\\], \\[4\\]. The minimum values are 0, 1, 2, 4.\n- The maximum of the minimum values is 4.\ni=1:\n- The subarrays of size 2 are \\[0,1\\], \\[1,2\\], \\[2,4\\]. The minimum values are 0, 1, 2.\n- The maximum of the minimum values is 2.\ni=2:\n- The subarrays of size 3 are \\[0,1,2\\], \\[1,2,4\\]. The minimum values are 0, 1.\n- The maximum of the minimum values is 1.\ni=3:\n- There is one subarray of size 4, which is \\[0,1,2,4\\]. The minimum value is 0.\n- There is only one value, so the maximum is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[10,20,50,10\\]\n**Output:** \\[50,20,10,10\\]\n**Explanation:**\ni=0:\n- The subarrays of size 1 are \\[10\\], \\[20\\], \\[50\\], \\[10\\]. The minimum values are 10, 20, 50, 10.\n- The maximum of the minimum values is 50.\ni=1:\n- The subarrays of size 2 are \\[10,20\\], \\[20,50\\], \\[50,10\\]. The minimum values are 10, 20, 10.\n- The maximum of the minimum values is 20.\ni=2:\n- The subarrays of size 3 are \\[10,20,50\\], \\[20,50,10\\]. The minimum values are 10, 10.\n- The maximum of the minimum values is 10.\ni=3:\n- There is one subarray of size 4, which is \\[10,20,50,10\\]. The minimum value is 10.\n- There is only one value, so the maximum is 10.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `0 <= nums[i] <= 109`Imagine the array is empty, and each element is coming to its index one by one, starting with the smallest element. For each coming element nums[i], calculate L and R, the indices of the first smallest elements on the left and the right respectively. The answer of the queries from 1 to R-L+1 will be at least this element.",
          "output": "def sign_func(x):\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\n\ndef array_sign(nums):\n    product = 1\n    for x in nums:\n        product *= x\n    return sign_func(product)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` **unique** virus variants in an infinite 2D grid. You are given a 2D array `points`, where `points[i] = [xi, yi]` represents a virus originating at `(xi, yi)` on day `0`. Note that it is possible for **multiple** virus variants to originate at the **same** point.\n\nEvery day, each cell infected with a virus variant will spread the virus to **all** neighboring points in the **four** cardinal directions (i.e. up, down, left, and right). If a cell has multiple variants, all the variants will spread without interfering with each other.\n\nGiven an integer `k`, return _the **minimum integer** number of days for **any** point to contain **at least**_ `k` _of the unique virus variants_.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[6,1\\]\\], k = 2\n**Output:** 3\n**Explanation:** On day 3, points (3,1) and (4,1) will contain both virus variants. Note that these are not the only points that will contain both virus variants.\n\n**Example 2:**\n\n**Input:** points = \\[\\[3,3\\],\\[1,2\\],\\[9,2\\]\\], k = 2\n**Output:** 2\n**Explanation:** On day 2, points (1,3), (2,3), (2,2), and (3,2) will contain the first two viruses. Note that these are not the only points that will contain both virus variants.\n\n**Example 3:**\n\n**Input:** points = \\[\\[3,3\\],\\[1,2\\],\\[9,2\\]\\], k = 3\n**Output:** 4\n**Explanation:** On day 4, the point (5,2) will contain all 3 viruses. Note that this is not the only point that will contain all 3 virus variants.\n\n**Constraints:**\n\n*   `n == points.length`\n*   `2 <= n <= 50`\n*   `points[i].length == 2`\n*   `1 <= xi, yi <= 100`\n*   `2 <= k <= n`n is very small, how can we use that? What shape is the region when two viruses intersect?",
          "output": "def max_element(arr):\n    max_val = max(arr)\n    return max_val // 2\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `trees` where `trees[i] = [xi, yi]` represents the location of the `ith` tree in the garden.\n\nYou are asked to fence the entire garden using the minimum length of rope possible. The garden is well-fenced only if **all the trees are enclosed** and the rope used **forms a perfect circle**. A tree is considered enclosed if it is inside or on the border of the circle.\n\nMore formally, you must form a circle using the rope with a center `(x, y)` and radius `r` where all trees lie inside or on the circle and `r` is **minimum**.\n\nReturn _the center and radius of the circle as a length 3 array_ `[x, y, r]`_._ Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** trees = \\[\\[1,1\\],\\[2,2\\],\\[2,0\\],\\[2,4\\],\\[3,3\\],\\[4,2\\]\\]\n**Output:** \\[2.00000,2.00000,2.00000\\]\n**Explanation:** The fence will have center = (2, 2) and radius = 2\n\n**Example 2:**\n\n**Input:** trees = \\[\\[1,2\\],\\[2,2\\],\\[4,2\\]\\]\n**Output:** \\[2.50000,2.00000,1.50000\\]\n**Explanation:** The fence will have center = (2.5, 2) and radius = 1.5\n\n**Constraints:**\n\n*   `1 <= trees.length <= 3000`\n*   `trees[i].length == 2`\n*   `0 <= xi, yi <= 3000`First, we need to note that this is a classic problem given n points you need to find the minimum enclosing circle to bind them Second, we need to apply a well known algorithm called welzls algorithm to help us find the minimum enclosing circle",
          "output": "def max_happy_groups(batchSize, groups):\n    remainders = [0] * batchSize\n    for g in groups:\n        remainders[g % batchSize] += 1\n\n    result = remainders[0]\n    i, j = 1, batchSize - 1\n\n    while i < j:\n        result += min(remainders[i], remainders[j])\n        i += 1\n        j -= 1\n\n    if i == j:\n        result += remainders[i] // 2\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A perfectly straight street is represented by a number line. The street has street lamp(s) on it and is represented by a 2D integer array `lights`. Each `lights[i] = [positioni, rangei]` indicates that there is a street lamp at position `positioni` that lights up the area from `[positioni - rangei, positioni + rangei]` (**inclusive**).\n\nThe **brightness** of a position `p` is defined as the number of street lamp that light up the position `p`.\n\nGiven `lights`, return _the **brightest** position on the_ _street. If there are multiple brightest positions, return the **smallest** one._\n\n",
          "input": "**Example 1:**\n\n**Input:** lights = \\[\\[-3,2\\],\\[1,2\\],\\[3,3\\]\\]\n**Output:** -1\n**Explanation:**\nThe first street lamp lights up the area from \\[(-3) - 2, (-3) + 2\\] = \\[-5, -1\\].\nThe second street lamp lights up the area from \\[1 - 2, 1 + 2\\] = \\[-1, 3\\].\nThe third street lamp lights up the area from \\[3 - 3, 3 + 3\\] = \\[0, 6\\].\n\nPosition -1 has a brightness of 2, illuminated by the first and second street light.\nPositions 0, 1, 2, and 3 have a brightness of 2, illuminated by the second and third street light.\nOut of all these positions, -1 is the smallest, so return it.\n\n**Example 2:**\n\n**Input:** lights = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** 1\n**Explanation:**\nThe first street lamp lights up the area from \\[1 - 0, 1 + 0\\] = \\[1, 1\\].\nThe second street lamp lights up the area from \\[0 - 1, 0 + 1\\] = \\[-1, 1\\].\n\nPosition 1 has a brightness of 2, illuminated by the first and second street light.\nReturn 1 because it is the brightest position on the street.\n\n**Example 3:**\n\n**Input:** lights = \\[\\[1,2\\]\\]\n**Output:** -1\n**Explanation:**\nThe first street lamp lights up the area from \\[1 - 2, 1 + 2\\] = \\[-1, 3\\].\n\nPositions -1, 0, 1, 2, and 3 have a brightness of 1, illuminated by the first street light.\nOut of all these positions, -1 is the smallest, so return it.\n\n**Constraints:**\n\n*   `1 <= lights.length <= 105`\n*   `lights[i].length == 2`\n*   `-108 <= positioni <= 108`\n*   `0 <= rangei <= 108`Convert lights into an array of ranges representing the range where each street light can light up and sort the start and end points of the ranges. Do we need to traverse all possible positions on the street? No, we don't, we only need to go to the start and end points of the ranges for each streetlight.",
          "output": "def remove_occurrences(s, part):\n    while part in s:\n        s = s.replace(part, '', 1)\n    return s\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` consisting of lowercase English letters, and an integer `k`.\n\nFirst, **convert** `s` into an integer by replacing each letter with its position in the alphabet (i.e., replace `'a'` with `1`, `'b'` with `2`, ..., `'z'` with `26`). Then, **transform** the integer by replacing it with the **sum of its digits**. Repeat the **transform** operation `k` **times** in total.\n\nFor example, if `s = \"zbax \"` and `k = 2`, then the resulting integer would be `8` by the following operations:\n\n*   **Convert**: `\"zbax \" \u279d \"(26)(2)(1)(24) \" \u279d \"262124 \" \u279d 262124`\n*   **Transform #1**: `262124 \u279d 2 + 6 + 2 + 1 + 2 + 4 \u279d 17`\n*   **Transform #2**: `17 \u279d 1 + 7 \u279d 8`\n\nReturn _the resulting integer after performing the operations described above_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"iiii \", k = 1\n**Output:** 36\n**Explanation:** The operations are as follows:\n- Convert:  \"iiii \" \u279d  \"(9)(9)(9)(9) \" \u279d  \"9999 \" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36.\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \", k = 2\n**Output:** 6\n**Explanation:** The operations are as follows:\n- Convert:  \"leetcode \" \u279d  \"(12)(5)(5)(20)(3)(15)(4)(5) \" \u279d  \"12552031545 \" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6.\n\n**Example 3:**\n\n**Input:** s =  \"zbax \", k = 2\n**Output:** 8\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `1 <= k <= 10`\n*   `s` consists of lowercase English letters.First, let's note that after the first transform the value will be at most 100 * 9 which is not much After The first transform, we can just do the rest of the transforms by brute force",
          "output": "from collections import defaultdict\n\ndef finding_users_active_minutes(logs, k):\n    user_minutes = defaultdict(set)\n    for log in logs:\n        user_minutes[log[0]].add(log[1])\n    result = [0] * k\n    for minutes in user_minutes.values():\n        if len(minutes) <= k:\n            result[len(minutes) - 1] += 1\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `num`, which represents a large integer. You are also given a **0-indexed** integer array `change` of length `10` that maps each digit `0-9` to another digit. More formally, digit `d` maps to digit `change[d]`.\n\nYou may **choose** to **mutate a single substring** of `num`. To mutate a substring, replace each digit `num[i]` with the digit it maps to in `change` (i.e. replace `num[i]` with `change[num[i]]`).\n\nReturn _a string representing the **largest** possible integer after **mutating** (or choosing not to) a **single substring** of_ `num`.\n\nA **substring** is a contiguous sequence of characters within the string.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"132 \", change = \\[9,8,5,0,3,6,4,2,6,8\\]\n**Output:**  \"832 \"\n**Explanation:** Replace the substring  \"1 \":\n- 1 maps to change\\[1\\] = 8.\nThus,  \"132 \" becomes  \"832 \".\n \"832 \" is the largest number that can be created, so return it.\n\n**Example 2:**\n\n**Input:** num =  \"021 \", change = \\[9,4,3,5,7,2,1,9,0,6\\]\n**Output:**  \"934 \"\n**Explanation:** Replace the substring  \"021 \":\n- 0 maps to change\\[0\\] = 9.\n- 2 maps to change\\[2\\] = 3.\n- 1 maps to change\\[1\\] = 4.\nThus,  \"021 \" becomes  \"934 \".\n \"934 \" is the largest number that can be created, so return it.\n\n**Example 3:**\n\n**Input:** num =  \"5 \", change = \\[1,4,7,5,3,2,5,6,9,4\\]\n**Output:**  \"5 \"\n**Explanation:**  \"5 \" is already the largest number that can be created, so return it.\n\n**Constraints:**\n\n*   `1 <= num.length <= 105`\n*   `num` consists of only digits `0-9`.\n*   `change.length == 10`\n*   `0 <= change[d] <= 9`Should you change a digit if the new digit is smaller than the original? If changing the first digit and the last digit both make the number bigger, but you can only change one of them; which one should you change? Changing numbers closer to the front is always better",
          "output": "import bisect\n\ndef minAbsoluteSumDiff(nums1, nums2):\n    n = len(nums1)\n    total = 0\n    max_diff = 0\n    mod = 10**9 + 7\n    sorted_nums1 = sorted(nums1)\n    \n    for i in range(n):\n        diff = abs(nums1[i] - nums2[i])\n        total += diff\n        \n        pos = bisect_left(sorted_nums1, nums2[i])\n        if pos != n:\n            max_diff = max(max_diff, diff - abs(sorted_nums1[pos] - nums2[i]))\n        if pos != 0:\n            max_diff = max(max_diff, diff - abs(sorted_nums1[pos - 1] - nums2[i]))\n    \n    return (total - max_diff + mod) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: There is a survey that consists of `n` questions where each question's answer is either `0` (no) or `1` (yes).\n\nThe survey was given to `m` students numbered from `0` to `m - 1` and `m` mentors numbered from `0` to `m - 1`. The answers of the students are represented by a 2D integer array `students` where `students[i]` is an integer array that contains the answers of the `ith` student (**0-indexed**). The answers of the mentors are represented by a 2D integer array `mentors` where `mentors[j]` is an integer array that contains the answers of the `jth` mentor (**0-indexed**).\n\nEach student will be assigned to **one** mentor, and each mentor will have **one** student assigned to them. The **compatibility score** of a student-mentor pair is the number of answers that are the same for both the student and the mentor.\n\n*   For example, if the student's answers were `[1, 0, 1]` and the mentor's answers were `[0, 0, 1]`, then their compatibility score is 2 because only the second and the third answers are the same.\n\nYou are tasked with finding the optimal student-mentor pairings to **maximize** the **sum of the compatibility scores**.\n\nGiven `students` and `mentors`, return _the **maximum compatibility score sum** that can be achieved._\n\n",
          "input": "**Example 1:**\n\n**Input:** students = \\[\\[1,1,0\\],\\[1,0,1\\],\\[0,0,1\\]\\], mentors = \\[\\[1,0,0\\],\\[0,0,1\\],\\[1,1,0\\]\\]\n**Output:** 8\n**Explanation:** We assign students to mentors in the following way:\n- student 0 to mentor 2 with a compatibility score of 3.\n- student 1 to mentor 0 with a compatibility score of 2.\n- student 2 to mentor 1 with a compatibility score of 3.\nThe compatibility score sum is 3 + 2 + 3 = 8.\n\n**Example 2:**\n\n**Input:** students = \\[\\[0,0\\],\\[0,0\\],\\[0,0\\]\\], mentors = \\[\\[1,1\\],\\[1,1\\],\\[1,1\\]\\]\n**Output:** 0\n**Explanation:** The compatibility score of any student-mentor pair is 0.\n\n**Constraints:**\n\n*   `m == students.length == mentors.length`\n*   `n == students[i].length == mentors[j].length`\n*   `1 <= m, n <= 8`\n*   `students[i][k]` is either `0` or `1`.\n*   `mentors[j][k]` is either `0` or `1`.Calculate the compatibility score for each student-mentor pair. Try every permutation of students with the original mentors array.",
          "output": "def count_different_subsequence_GCDs(nums):\n    maximum = max(nums)\n    gcd_count = [0] * (maximum + 1)\n    \n    for num in nums:\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                gcd_count[i] += 1\n                if i * i != num:\n                    gcd_count[num // i] += 1\n                    \n    different_GCDs = sum(1 for count in gcd_count if count > 0)\n    \n    return different_GCDs\n"
     },
     {
          "instruction": "Write python code for this problem: Due to a bug, there are many duplicate folders in a file system. You are given a 2D array `paths`, where `paths[i]` is an array representing an absolute path to the `ith` folder in the file system.\n\n*   For example, `[ \"one \", \"two \", \"three \"]` represents the path `\"/one/two/three \"`.\n\nTwo folders (not necessarily on the same level) are **identical** if they contain the **same non-empty** set of identical subfolders and underlying subfolder structure. The folders **do not** need to be at the root level to be identical. If two or more folders are **identical**, then **mark** the folders as well as all their subfolders.\n\n*   For example, folders `\"/a \"` and `\"/b \"` in the file structure below are identical. They (as well as their subfolders) should **all** be marked:\n    *   `/a`\n    *   `/a/x`\n    *   `/a/x/y`\n    *   `/a/z`\n    *   `/b`\n    *   `/b/x`\n    *   `/b/x/y`\n    *   `/b/z`\n*   However, if the file structure also included the path `\"/b/w \"`, then the folders `\"/a \"` and `\"/b \"` would not be identical. Note that `\"/a/x \"` and `\"/b/x \"` would still be considered identical even with the added folder.\n\nOnce all the identical folders and their subfolders have been marked, the file system will **delete** all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.\n\nReturn _the 2D array_ `ans` _containing the paths of the **remaining** folders after deleting all the marked folders. The paths may be returned in **any** order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** paths = \\[\\[ \"a \"\\],\\[ \"c \"\\],\\[ \"d \"\\],\\[ \"a \", \"b \"\\],\\[ \"c \", \"b \"\\],\\[ \"d \", \"a \"\\]\\]\n**Output:** \\[\\[ \"d \"\\],\\[ \"d \", \"a \"\\]\\]\n**Explanation:** The file structure is as shown.\nFolders  \"/a \" and  \"/c \" (and their subfolders) are marked for deletion because they both contain an empty\nfolder named  \"b \".\n\n**Example 2:**\n\n**Input:** paths = \\[\\[ \"a \"\\],\\[ \"c \"\\],\\[ \"a \", \"b \"\\],\\[ \"c \", \"b \"\\],\\[ \"a \", \"b \", \"x \"\\],\\[ \"a \", \"b \", \"x \", \"y \"\\],\\[ \"w \"\\],\\[ \"w \", \"y \"\\]\\]\n**Output:** \\[\\[ \"c \"\\],\\[ \"c \", \"b \"\\],\\[ \"a \"\\],\\[ \"a \", \"b \"\\]\\]\n**Explanation:** The file structure is as shown. \nFolders  \"/a/b/x \" and  \"/w \" (and their subfolders) are marked for deletion because they both contain an empty folder named  \"y \".\nNote that folders  \"/a \" and  \"/c \" are identical after the deletion, but they are not deleted because they were not marked beforehand.\n\n**Example 3:**\n\n**Input:** paths = \\[\\[ \"a \", \"b \"\\],\\[ \"c \", \"d \"\\],\\[ \"c \"\\],\\[ \"a \"\\]\\]\n**Output:** \\[\\[ \"c \"\\],\\[ \"c \", \"d \"\\],\\[ \"a \"\\],\\[ \"a \", \"b \"\\]\\]\n**Explanation:** All folders are unique in the file system.\nNote that the returned array can be in a different order as the order does not matter.\n\n**Constraints:**\n\n*   `1 <= paths.length <= 2 * 104`\n*   `1 <= paths[i].length <= 500`\n*   `1 <= paths[i][j].length <= 10`\n*   `1 <= sum(paths[i][j].length) <= 2 * 105`\n*   `path[i][j]` consists of lowercase English letters.\n*   No two paths lead to the same folder.\n*   For any folder not at the root level, its parent folder will also be in the input.Can we use a trie to build the folder structure? Can we utilize hashing to hash the folder structures?",
          "output": "from collections import defaultdict\n\ndef delete_duplicate_folder(paths):\n    folder_counts = defaultdict(int)\n    \n    for path in paths:\n        path_string = '/' + '/'.join(path)\n        folder_counts[path_string] += 1\n\n    remaining_paths = []\n\n    for path in paths:\n        path_string = '/' + path[0]\n        not_duplicate = folder_counts[path_string] == 1\n        for i in range(1, len(path)):\n            path_string += '/' + path[i]\n            if folder_counts[path_string] > 1:\n                not_duplicate = False\n                break\n        if not_duplicate:\n            remaining_paths.append(path)\n\n    return remaining_paths\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** `8 x 8` grid `board`, where `board[r][c]` represents the cell `(r, c)` on a game board. On the board, free cells are represented by `'.'`, white cells are represented by `'W'`, and black cells are represented by `'B'`.\n\nEach move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only **legal** if, after changing it, the cell becomes the **endpoint of a good line** (horizontal, vertical, or diagonal).\n\nA **good line** is a line of **three or more cells (including the endpoints)** where the endpoints of the line are **one color**, and the remaining cells in the middle are the **opposite color** (no cells in the line are free). You can find examples for good lines in the figure below:\n\nGiven two integers `rMove` and `cMove` and a character `color` representing the color you are playing as (white or black), return `true` _if changing cell_ `(rMove, cMove)` _to color_ `color` _is a **legal** move, or_ `false` _if it is not legal_.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\],\\[ \"W \", \"B \", \"B \", \". \", \"W \", \"W \", \"W \", \"B \"\\],\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \". \", \". \", \". \", \". \"\\]\\], rMove = 4, cMove = 3, color =  \"B \"\n**Output:** true\n**Explanation:** '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.\nThe two good lines with the chosen cell as an endpoint are annotated above with the red rectangles.\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \"B \", \". \", \". \", \"W \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \"W \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"W \", \"B \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \"B \", \"W \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \"W \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \"B \"\\]\\], rMove = 4, cMove = 4, color =  \"W \"\n**Output:** false\n**Explanation:** While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.\n\n**Constraints:**\n\n*   `board.length == board[r].length == 8`\n*   `0 <= rMove, cMove < 8`\n*   `board[rMove][cMove] == '.'`\n*   `color` is either `'B'` or `'W'`.For each line starting at the given cell check if it's a good line To do that iterate over all directions horizontal, vertical, and diagonals then check good lines naively",
          "output": "def checkMove(board, rMove, cMove, color):\n    directions = ((-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1))\n    opposite_color = 'B' if color == 'W' else 'W'\n\n    for d in directions:\n        x, y = rMove + d[0], cMove + d[1]\n        count = 0\n        while 0 <= x < 8 and 0 <= y < 8 and board[x][y] == opposite_color:\n            x += d[0]\n            y += d[1]\n            count += 1\n\n        if count > 0 and 0 <= x < 8 and 0 <= y < 8 and board[x][y] == color:\n            return True\n\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are currently designing a dynamic array. You are given a **0-indexed** integer array `nums`, where `nums[i]` is the number of elements that will be in the array at time `i`. In addition, you are given an integer `k`, the **maximum** number of times you can **resize** the array (to **any** size).\n\nThe size of the array at time `t`, `sizet`, must be at least `nums[t]` because there needs to be enough space in the array to hold all the elements. The **space wasted** at time `t` is defined as `sizet - nums[t]`, and the **total** space wasted is the **sum** of the space wasted across every time `t` where `0 <= t < nums.length`.\n\nReturn _the **minimum** **total space wasted** if you can resize the array at most_ `k` _times_.\n\n**Note:** The array can have **any size** at the start and does **not** count towards the number of resizing operations.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[10,20\\], k = 0\n**Output:** 10\n**Explanation:** size = \\[20,20\\].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10.\n\n**Example 2:**\n\n**Input:** nums = \\[10,20,30\\], k = 1\n**Output:** 10\n**Explanation:** size = \\[20,20,30\\].\nWe can set the initial size to be 20 and resize to 30 at time 2. \nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.\n\n**Example 3:**\n\n**Input:** nums = \\[10,20,15,30,20\\], k = 2\n**Output:** 15\n**Explanation:** size = \\[10,20,20,30,30\\].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 200`\n*   `1 <= nums[i] <= 106`\n*   `0 <= k <= nums.length - 1`Given a range, how can you find the minimum waste if you can't perform any resize operations? Can we build our solution using dynamic programming using the current index and the number of resizing operations performed as the states?",
          "output": "def minSpaceWastedKResizing(nums, k):\n    n = len(nums)\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    sum_nums = [0] * (n + 1)\n    dp[0][0] = 0\n    \n    for i in range(1, n + 1):\n        sum_nums[i] = sum_nums[i - 1] + nums[i - 1]\n        max_val = nums[i - 1]\n        for j in range(i - 1, -1, -1):\n            max_val = max(max_val, nums[j])\n            waste = max_val * (i - j) - (sum_nums[i] - sum_nums[j])\n            for c in range(k):\n                dp[i][c + 1] = min(dp[i][c + 1], dp[j][c] + waste)\n\n    return dp[n][k]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `sentence` containing words separated by spaces, and an integer `k`. Your task is to separate `sentence` into **rows** where the number of characters in each row is **at most** `k`. You may assume that `sentence` does not begin or end with a space, and the words in `sentence` are separated by a single space.\n\nYou can split `sentence` into rows by inserting line breaks between words in `sentence`. A word **cannot** be split between two rows. Each word must be used exactly once, and the word order cannot be rearranged. Adjacent words in a row should be separated by a single space, and rows should not begin or end with spaces.\n\nThe **cost** of a row with length `n` is `(k - n)2`, and the **total cost** is the sum of the **costs** for all rows **except** the last one.\n\n*   For example if `sentence = \"i love leetcode \"` and `k = 12`:\n    *   Separating `sentence` into `\"i \"`, `\"love \"`, and `\"leetcode \"` has a cost of `(12 - 1)2 + (12 - 4)2 = 185`.\n    *   Separating `sentence` into `\"i love \"`, and `\"leetcode \"` has a cost of `(12 - 6)2 = 36`.\n    *   Separating `sentence` into `\"i \"`, and `\"love leetcode \"` is not possible because the length of `\"love leetcode \"` is greater than `k`.\n\nReturn _the **minimum** possible total cost of separating_ `sentence` _into rows._\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence =  \"i love leetcode \", k = 12\n**Output:** 36\n**Explanation:**\nSeparating sentence into  \"i \",  \"love \", and  \"leetcode \" has a cost of (12 - 1)2 + (12 - 4)2 = 185.\nSeparating sentence into  \"i love \", and  \"leetcode \" has a cost of (12 - 6)2 = 36.\nSeparating sentence into  \"i \",  \"love leetcode \" is not possible because  \"love leetcode \" has length 13.\n36 is the minimum possible total cost so return it.\n\n**Example 2:**\n\n**Input:** sentence =  \"apples and bananas taste great \", k = 7\n**Output:** 21\n**Explanation**\nSeparating sentence into  \"apples \",  \"and \",  \"bananas \",  \"taste \", and  \"great \" has a cost of (7 - 6)2 + (7 - 3)2 + (7 - 7)2 + (7 - 5)2 \\= 21.\n21 is the minimum possible total cost so return it.\n\n**Example 3:**\n\n**Input:** sentence =  \"a \", k = 5\n**Output:** 0\n**Explanation:**\nThe cost of the last row is not included in the total cost, and since there is only one row, return 0.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 5000`\n*   `1 <= k <= 5000`\n*   The length of each word in `sentence` is at most `k`.\n*   `sentence` consists of only lowercase English letters and spaces.\n*   `sentence` does not begin or end with a space.\n*   Words in `sentence` are separated by a single space.Create an array storing all of the words in sentence separated. Try dynamic programming. Build a dp array where dp[i] represents the minimum total cost for the first i + 1 words.",
          "output": "def minCost(sentence: str, k: int) -> int:\n    words = sentence.split()\n    dp = [float('inf')] * (len(words) + 1)\n    dp[0] = 0\n    for i in range(len(words)):\n        length = 0\n        j = i\n        while j >= 0:\n            length += len(words[j])\n            if length + (i - j) <= k:\n                dp[i + 1] = min(dp[i + 1], dp[j] + (k - length - (i - j)) * (k - length - (i - j)))\n            else:\n                break\n            length += 1\n            j -= 1\n    return dp[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `n`, return `true` _if_ `n` _has **exactly three positive divisors**. Otherwise, return_ `false`.\n\nAn integer `m` is a **divisor** of `n` if there exists an integer `k` such that `n = k * m`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2\n**Output:** false\n**Explantion:** 2 has only two divisors: 1 and 2.\n\n**Example 2:**\n\n**Input:** n = 4\n**Output:** true\n**Explantion:** 4 has three divisors: 1, 2, and 4.\n\n**Constraints:**\n\n*   `1 <= n <= 104`You can count the number of divisors and just check that they are 3 Beware of the case of n equal 1 as some solutions might fail in it",
          "output": "def minSideJumps(obstacles):\n    n = len(obstacles)\n    dp = [[n] * 3 for _ in range(n)]\n    dp[0][1] = 0\n    dp[0][0] = dp[0][2] = 1\n\n    for i in range(1, n):\n        if obstacles[i] != 1:\n            dp[i][0] = min(dp[i - 1][0], dp[i - 1][1] + 1, dp[i - 1][2] + 1)\n        if obstacles[i] != 2:\n            dp[i][1] = min(dp[i - 1][1], dp[i - 1][0] + 1, dp[i - 1][2] + 1)\n        if obstacles[i] != 3:\n            dp[i][2] = min(dp[i - 1][2], dp[i - 1][0] + 1, dp[i - 1][1] + 1)\n\n    return min(dp[-1])\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` projects numbered from `0` to `n - 1`. You are given an integer array `milestones` where each `milestones[i]` denotes the number of milestones the `ith` project has.\n\nYou can work on the projects following these two rules:\n\n*   Every week, you will finish **exactly one** milestone of **one** project. You **must** work every week.\n*   You **cannot** work on two milestones from the same project for two **consecutive** weeks.\n\nOnce all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will **stop working**. Note that you may not be able to finish every project's milestones due to these constraints.\n\nReturn _the **maximum** number of weeks you would be able to work on the projects without violating the rules mentioned above_.\n\n",
          "input": "**Example 1:**\n\n**Input:** milestones = \\[1,2,3\\]\n**Output:** 6\n**Explanation:** One possible scenario is:\n\u200b\u200b\u200b\u200b- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 2.\n- During the 3rd week, you will work on a milestone of project 1.\n- During the 4th week, you will work on a milestone of project 2.\n- During the 5th week, you will work on a milestone of project 1.\n- During the 6th week, you will work on a milestone of project 2.\nThe total number of weeks is 6.\n\n**Example 2:**\n\n**Input:** milestones = \\[5,2,1\\]\n**Output:** 7\n**Explanation:** One possible scenario is:\n- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 1.\n- During the 3rd week, you will work on a milestone of project 0.\n- During the 4th week, you will work on a milestone of project 1.\n- During the 5th week, you will work on a milestone of project 0.\n- During the 6th week, you will work on a milestone of project 2.\n- During the 7th week, you will work on a milestone of project 0.\nThe total number of weeks is 7.\nNote that you cannot work on the last milestone of project 0 on 8th week because it would violate the rules.\nThus, one milestone in project 0 will remain unfinished.\n\n**Constraints:**\n\n*   `n == milestones.length`\n*   `1 <= n <= 105`\n*   `1 <= milestones[i] <= 109`Work on the project with the largest number of milestones as long as it is possible. Does the project with the largest number of milestones affect the number of weeks?",
          "output": "from collections import deque\nfrom sortedcontainers import SortedList\n\nclass MKAverage:\n\n    def __init__(self, m: int, k: int):\n        self.m = m\n        self.k = k\n        self.sum = 0\n        self.min_set = SortedList()\n        self.mid_set = SortedList()\n        self.max_set = SortedList()\n        self.q = deque()\n\n    def add_element(self, num: int) -> None:\n        if len(self.q) == self.m:\n            self.remove_element()\n\n        self.min_set.add(num)\n        self.sum += num\n        \n        if len(self.min_set) > self.k:\n            temp = self.min_set.pop()\n            self.mid_set.add(temp)\n            self.sum += temp\n\n        if self.min_set and self.mid_set and self.min_set[-1] > self.mid_set[0]:\n            temp1 = self.min_set.pop()\n            temp2 = self.mid_set.pop(0)\n            self.min_set.add(temp2)\n            self.mid_set.add(temp1)\n            self.sum += temp2 - temp1\n\n        self.max_set.add(self.mid_set.pop())\n        self.sum -= self.mid_set.pop()\n        self.mid_set.add(self.max_set.pop(0))\n\n        if len(self.max_set) > self.k:\n            temp = self.max_set.pop(0)\n            self.mid_set.add(temp)\n            self.sum += temp\n        \n        self.q.append(num)\n\n    def calculate_mkaverage(self) -> int:\n        if len(self.q) < self.m:\n            return -1\n        return self.sum // (self.m - 2 * self.k)\n\n    def remove_element(self) -> None:\n        temp = self.q.popleft()\n\n        if temp in self.min_set:\n            self.min_set.remove(temp)\n        elif temp in self.mid_set:\n            self.mid_set.remove(temp)\n            self.sum -= temp\n        else:\n            self.max_set.remove(temp)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array `nums` of **distinct** integers. You want to rearrange the elements in the array such that every element in the rearranged array is **not** equal to the **average** of its neighbors.\n\nMore formally, the rearranged array should have the property such that for every `i` in the range `1 <= i < nums.length - 1`, `(nums[i-1] + nums[i+1]) / 2` is **not** equal to `nums[i]`.\n\nReturn _**any** rearrangement of_ `nums` _that meets the requirements_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5\\]\n**Output:** \\[1,2,4,5,3\\]\n**Explanation:**\nWhen i=1, nums\\[i\\] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums\\[i\\] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums\\[i\\] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.\n\n**Example 2:**\n\n**Input:** nums = \\[6,2,0,9,7\\]\n**Output:** \\[9,7,6,2,0\\]\n**Explanation:**\nWhen i=1, nums\\[i\\] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums\\[i\\] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums\\[i\\] = 2, and the average of its neighbors is (6+0) / 2 = 3.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 105`\n*   `0 <= nums[i] <= 105`A number can be the average of its neighbors if one neighbor is smaller than the number and the other is greater than the number. We can put numbers smaller than the median on odd indices and the rest on even indices.",
          "output": "def max_building(n, restrictions):\n    restrictions += [[1, 0], [n, n - 1]]\n    restrictions.sort()\n\n    for i in range(1, len(restrictions)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i - 1][1] + restrictions[i][0] - restrictions[i - 1][0])\n\n    for i in range(len(restrictions) - 2, -1, -1):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i + 1][1] + restrictions[i + 1][0] - restrictions[i][0])\n\n    maxHeight = 0\n    for i in range(1, len(restrictions)):\n        height = (restrictions[i][1] + restrictions[i - 1][1] + restrictions[i][0] - restrictions[i - 1][0]) // 2\n        maxHeight = max(maxHeight, height)\n\n    return maxHeight\n"
     },
     {
          "instruction": "Write python code for this problem: A sequence is **special** if it consists of a **positive** number of `0`s, followed by a **positive** number of `1`s, then a **positive** number of `2`s.\n\n*   For example, `[0,1,2]` and `[0,0,1,1,1,2]` are special.\n*   In contrast, `[2,1,0]`, `[1]`, and `[0,1,2,0]` are not special.\n\nGiven an array `nums` (consisting of **only** integers `0`, `1`, and `2`), return _the **number of different subsequences** that are special_. Since the answer may be very large, **return it modulo** `109 + 7`.\n\nA **subsequence** of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are **different** if the **set of indices** chosen are different.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,2,2\\]\n**Output:** 3\n**Explanation:** The special subsequences are bolded \\[**0**,**1**,**2**,2\\], \\[**0**,**1**,2,**2**\\], and \\[**0**,**1**,**2**,**2**\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,0,0\\]\n**Output:** 0\n**Explanation:** There are no special subsequences in \\[2,2,0,0\\].\n\n**Example 3:**\n\n**Input:** nums = \\[0,1,2,0,1,2\\]\n**Output:** 7\n**Explanation:** The special subsequences are bolded:\n- \\[**0**,**1**,**2**,0,1,2\\]\n- \\[**0**,**1**,2,0,1,**2**\\]\n- \\[**0**,**1**,**2**,0,1,**2**\\]\n- \\[**0**,**1**,2,0,**1**,**2**\\]\n- \\[**0**,1,2,**0**,**1**,**2**\\]\n- \\[**0**,1,2,0,**1**,**2**\\]\n- \\[0,1,2,**0**,**1**,**2**\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 2`Can we first solve a simpler problem? Counting the number of subsequences with 1s followed by 0s. How can we keep track of the partially matched subsequences to help us find the answer?",
          "output": "import heapq\n\nclass SeatManager:\n    def __init__(self, n: int):\n        self.available_seats = [i for i in range(1, n + 1)]\n        heapq.heapify(self.available_seats)\n\n    def reserve(self) -> int:\n        return heapq.heappop(self.available_seats)\n\n    def unreserve(self, seatNumber: int) -> None:\n        heapq.heappush(self.available_seats, seatNumber)\n"
     },
     {
          "instruction": "Write python code for this problem: There is a special typewriter with lowercase English letters `'a'` to `'z'` arranged in a **circle** with a **pointer**. A character can **only** be typed if the pointer is pointing to that character. The pointer is **initially** pointing to the character `'a'`.\n\nEach second, you may perform one of the following operations:\n\n*   Move the pointer one character **counterclockwise** or **clockwise**.\n*   Type the character the pointer is **currently** on.\n\nGiven a string `word`, return the **minimum** number of seconds to type out the characters in `word`.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"abc \"\n**Output:** 5\n**Explanation:** \nThe characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second.\n\n**Example 2:**\n\n**Input:** word =  \"bza \"\n**Output:** 7\n**Explanation:**\nThe characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second.\n\n**Example 3:**\n\n**Input:** word =  \"zjpc \"\n**Output:** 34\n**Explanation:**\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second.\n\n**Constraints:**\n\n*   `1 <= word.length <= 100`\n*   `word` consists of lowercase English letters.There are only two possible directions you can go when you move to the next letter. When moving to the next letter, you will always go in the direction that takes the least amount of time.",
          "output": "def minTimeToType(word: str) -> int:\n    time = 0\n    position = 0\n    for c in word:\n        next_position = ord(c) - ord('a')\n        diff = abs(next_position - position)\n        time += min(diff, 26 - diff) + 1\n        position = next_position\n    return time\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `n x n` integer `matrix`. You can do the following operation **any** number of times:\n\n*   Choose any two **adjacent** elements of `matrix` and **multiply** each of them by `-1`.\n\nTwo elements are considered **adjacent** if and only if they share a **border**.\n\nYour goal is to **maximize** the summation of the matrix's elements. Return _the **maximum** sum of the matrix's elements using the operation mentioned above._\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,-1\\],\\[-1,1\\]\\]\n**Output:** 4\n**Explanation:** We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[-1,-2,-3\\],\\[1,2,3\\]\\]\n**Output:** 16\n**Explanation:** We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1.\n\n**Constraints:**\n\n*   `n == matrix.length == matrix[i].length`\n*   `2 <= n <= 250`\n*   `-105 <= matrix[i][j] <= 105`Try to use the operation so that each row has only one negative number. If you have only one negative element you cannot convert it to positive.",
          "output": "def find_target_distance(nums, target, start):\n    min_distance = float('inf')\n    for i, num in enumerate(nums):\n        if num == target:\n            distance = abs(i - start)\n            min_distance = min(min_distance, distance)\n    return min_distance\n"
     },
     {
          "instruction": "Write python code for this problem: You are in a city that consists of `n` intersections numbered from `0` to `n - 1` with **bi-directional** roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.\n\nYou are given an integer `n` and a 2D integer array `roads` where `roads[i] = [ui, vi, timei]` means that there is a road between intersections `ui` and `vi` that takes `timei` minutes to travel. You want to know in how many ways you can travel from intersection `0` to intersection `n - 1` in the **shortest amount of time**.\n\nReturn _the **number of ways** you can arrive at your destination in the **shortest amount of time**_. Since the answer may be large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 7, roads = \\[\\[0,6,7\\],\\[0,1,2\\],\\[1,2,3\\],\\[1,3,3\\],\\[6,3,3\\],\\[3,5,1\\],\\[6,5,1\\],\\[2,5,1\\],\\[0,4,5\\],\\[4,6,2\\]\\]\n**Output:** 4\n**Explanation:** The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.\nThe four ways to get there in 7 minutes are:\n- 0 \u279d 6\n- 0 \u279d 4 \u279d 6\n- 0 \u279d 1 \u279d 2 \u279d 5 \u279d 6\n- 0 \u279d 1 \u279d 3 \u279d 5 \u279d 6\n\n**Example 2:**\n\n**Input:** n = 2, roads = \\[\\[1,0,10\\]\\]\n**Output:** 1\n**Explanation:** There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.\n\n**Constraints:**\n\n*   `1 <= n <= 200`\n*   `n - 1 <= roads.length <= n * (n - 1) / 2`\n*   `roads[i].length == 3`\n*   `0 <= ui, vi <= n - 1`\n*   `1 <= timei <= 109`\n*   `ui != vi`\n*   There is at most one road connecting any two intersections.\n*   You can reach any intersection from any other intersection.First use any shortest path algorithm to get edges where dist[u] + weight = dist[v], here dist[x] is the shortest distance between node 0 and x Using those edges only the graph turns into a dag now we just need to know the number of ways to get from node 0 to node n - 1 on a dag using dp",
          "output": "def can_split_string(s: str) -> bool:\n    count = [0] * 10\n\n    for c in s:\n        count[int(c)] += 1\n\n    for i in range(1, 10):\n        if count[i] > 0 and count[i] == count[i - 1]:\n            return True\n\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You wrote down many **positive** integers in a string called `num`. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was **non-decreasing** and that **no** integer had leading zeros.\n\nReturn _the **number of possible lists of integers** that you could have written down to get the string_ `num`. Since the answer may be large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num =  \"327 \"\n**Output:** 2\n**Explanation:** You could have written down the numbers:\n3, 27\n327\n\n**Example 2:**\n\n**Input:** num =  \"094 \"\n**Output:** 0\n**Explanation:** No numbers can have leading zeros and all numbers must be positive.\n\n**Example 3:**\n\n**Input:** num =  \"0 \"\n**Output:** 0\n**Explanation:** No numbers can have leading zeros and all numbers must be positive.\n\n**Constraints:**\n\n*   `1 <= num.length <= 3500`\n*   `num` consists of digits `'0'` through `'9'`.If we know the current number has d digits, how many digits can the previous number have? Is there a quick way of calculating the number of possibilities for the previous number if we know that it must have less than or equal to d digits? Try to do some pre-processing.",
          "output": "def intervalFinding(intervals, queries):\n    intervals.sort(key=lambda x: x[0])\n    ans = []\n    for q in queries:\n        min_size = float('inf')\n        for interval in intervals:\n            if interval[0] <= q <= interval[1]:\n                min_size = min(min_size, interval[1] - interval[0] + 1)\n        ans.append(-1 if min_size == float('inf') else min_size)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` and an array of strings `words`, determine whether `s` is a **prefix string** of `words`.\n\nA string `s` is a **prefix string** of `words` if `s` can be made by concatenating the first `k` strings in `words` for some **positive** `k` no larger than `words.length`.\n\nReturn `true` _if_ `s` _is a **prefix string** of_ `words`_, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"iloveleetcode \", words = \\[ \"i \", \"love \", \"leetcode \", \"apples \"\\]\n**Output:** true\n**Explanation:**\ns can be made by concatenating  \"i \",  \"love \", and  \"leetcode \" together.\n\n**Example 2:**\n\n**Input:** s =  \"iloveleetcode \", words = \\[ \"apples \", \"i \", \"love \", \"leetcode \"\\]\n**Output:** false\n**Explanation:**\nIt is impossible to make s using a prefix of arr.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 20`\n*   `1 <= s.length <= 1000`\n*   `words[i]` and `s` consist of only lowercase English letters.There are only words.length prefix strings. Create all of them and see if s is one of them.",
          "output": "def max_ice_cream(costs, coins):\n    costs.sort()\n    count = 0\n    for cost in costs:\n        if coins >= cost:\n            coins -= cost\n            count += 1\n        else:\n            break\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `piles`, where `piles[i]` represents the number of stones in the `ith` pile, and an integer `k`. You should apply the following operation **exactly** `k` times:\n\n*   Choose any `piles[i]` and **remove** `floor(piles[i] / 2)` stones from it.\n\n**Notice** that you can apply the operation on the **same** pile more than once.\n\nReturn _the **minimum** possible total number of stones remaining after applying the_ `k` _operations_.\n\n`floor(x)` is the **greatest** integer that is **smaller** than or **equal** to `x` (i.e., rounds `x` down).\n\n",
          "input": "**Example 1:**\n\n**Input:** piles = \\[5,4,9\\], k = 2\n**Output:** 12\n**Explanation:** Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are \\[5,4,5\\].\n- Apply the operation on pile 0. The resulting piles are \\[3,4,5\\].\nThe total number of stones in \\[3,4,5\\] is 12.\n\n**Example 2:**\n\n**Input:** piles = \\[4,3,6,7\\], k = 3\n**Output:** 12\n**Explanation:** Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are \\[4,3,3,7\\].\n- Apply the operation on pile 3. The resulting piles are \\[4,3,3,4\\].\n- Apply the operation on pile 0. The resulting piles are \\[2,3,3,4\\].\nThe total number of stones in \\[2,3,3,4\\] is 12.\n\n**Constraints:**\n\n*   `1 <= piles.length <= 105`\n*   `1 <= piles[i] <= 104`\n*   `1 <= k <= 105`Choose the pile with the maximum number of stones each time. Use a data structure that helps you find the mentioned pile each time efficiently. One such data structure is a Priority Queue.",
          "output": "from queue import PriorityQueue\n\ndef getOrder(tasks):\n    task_indices = sorted(range(len(tasks)), key=lambda i: tasks[i][0])\n    min_heap = PriorityQueue()\n    time = 0\n    task_idx = 0\n    result = []\n\n    while task_indices:\n        while task_idx < len(task_indices) and tasks[task_indices[task_idx]][0] <= time:\n            idx = task_indices[task_idx]\n            min_heap.put((tasks[idx][1], idx))\n            task_idx += 1\n\n        if not min_heap.empty():\n            processing_time, index = min_heap.get()\n            time += processing_time\n            result.append(index)\n            task_indices.remove(index)\n        elif task_idx < len(task_indices):\n            time = max(time, tasks[task_indices[task_idx]][0])\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s` of **even** length `n`. The string consists of **exactly** `n / 2` opening brackets `'['` and `n / 2` closing brackets `']'`.\n\nA string is called **balanced** if and only if:\n\n*   It is the empty string, or\n*   It can be written as `AB`, where both `A` and `B` are **balanced** strings, or\n*   It can be written as `[C]`, where `C` is a **balanced** string.\n\nYou may swap the brackets at **any** two indices **any** number of times.\n\nReturn _the **minimum** number of swaps to make_ `s` _**balanced**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"\\]\\[\\]\\[ \"\n**Output:** 1\n**Explanation:** You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is  \"\\[\\[\\]\\] \".\n\n**Example 2:**\n\n**Input:** s =  \"\\]\\]\\]\\[\\[\\[ \"\n**Output:** 2\n**Explanation:** You can do the following to make the string balanced:\n- Swap index 0 with index 4. s =  \"\\[\\]\\]\\[\\]\\[ \".\n- Swap index 1 with index 5. s =  \"\\[\\[\\]\\[\\]\\] \".\nThe resulting string is  \"\\[\\[\\]\\[\\]\\] \".\n\n**Example 3:**\n\n**Input:** s =  \"\\[\\] \"\n**Output:** 0\n**Explanation:** The string is already balanced.\n\n**Constraints:**\n\n*   `n == s.length`\n*   `2 <= n <= 106`\n*   `n` is even.\n*   `s[i]` is either `'['` or `']'`.\n*   The number of opening brackets `'['` equals `n / 2`, and the number of closing brackets `']'` equals `n / 2`.Iterate over the string and keep track of the number of opening and closing brackets on each step. If the number of closing brackets is ever larger, you need to make a swap. Swap it with the opening bracket closest to the end of s.",
          "output": "def get_xor_sum(arr1, arr2):\n    xor_arr1 = xor_arr2 = 0\n    for i in arr1:\n        xor_arr1 ^= i\n    for j in arr2:\n        xor_arr2 ^= j\n    return xor_arr1 & xor_arr2\n"
     },
     {
          "instruction": "Write python code for this problem: You want to build some obstacle courses. You are given a **0-indexed** integer array `obstacles` of length `n`, where `obstacles[i]` describes the height of the `ith` obstacle.\n\nFor every index `i` between `0` and `n - 1` (**inclusive**), find the length of the **longest obstacle course** in `obstacles` such that:\n\n*   You choose any number of obstacles between `0` and `i` **inclusive**.\n*   You must include the `ith` obstacle in the course.\n*   You must put the chosen obstacles in the **same order** as they appear in `obstacles`.\n*   Every obstacle (except the first) is **taller** than or the **same height** as the obstacle immediately before it.\n\nReturn _an array_ `ans` _of length_ `n`, _where_ `ans[i]` _is the length of the **longest obstacle course** for index_ `i` _as described above_.\n\n",
          "input": "**Example 1:**\n\n**Input:** obstacles = \\[1,2,3,2\\]\n**Output:** \\[1,2,3,3\\]\n**Explanation:** The longest valid obstacle course at each position is:\n- i = 0: \\[1\\], \\[1\\] has length 1.\n- i = 1: \\[1,2\\], \\[1,2\\] has length 2.\n- i = 2: \\[1,2,3\\], \\[1,2,3\\] has length 3.\n- i = 3: \\[1,2,3,2\\], \\[1,2,2\\] has length 3.\n\n**Example 2:**\n\n**Input:** obstacles = \\[2,2,1\\]\n**Output:** \\[1,2,1\\]\n**Explanation:** The longest valid obstacle course at each position is:\n- i = 0: \\[2\\], \\[2\\] has length 1.\n- i = 1: \\[2,2\\], \\[2,2\\] has length 2.\n- i = 2: \\[2,2,1\\], \\[1\\] has length 1.\n\n**Example 3:**\n\n**Input:** obstacles = \\[3,1,5,6,4,2\\]\n**Output:** \\[1,1,2,3,2,2\\]\n**Explanation:** The longest valid obstacle course at each position is:\n- i = 0: \\[3\\], \\[3\\] has length 1.\n- i = 1: \\[3,1\\], \\[1\\] has length 1.\n- i = 2: \\[3,1,5\\], \\[3,5\\] has length 2. \\[1,5\\] is also valid.\n- i = 3: \\[3,1,5,6\\], \\[3,5,6\\] has length 3. \\[1,5,6\\] is also valid.\n- i = 4: \\[3,1,5,6,4\\], \\[3,4\\] has length 2. \\[1,4\\] is also valid.\n- i = 5: \\[3,1,5,6,4,2\\], \\[1,2\\] has length 2.\n\n**Constraints:**\n\n*   `n == obstacles.length`\n*   `1 <= n <= 105`\n*   `1 <= obstacles[i] <= 107`Can you keep track of the minimum height for each obstacle course length? You can use binary search to find the longest previous obstacle course length that satisfies the conditions.",
          "output": "def longest_obstacle_course(obstacles):\n    dp = []\n    ans = [0] * len(obstacles)\n\n    for obstacle in obstacles:\n        index = bisect_left(dp, obstacle)\n        ans[index] = index + 1\n        if index == len(dp):\n            dp.append(obstacle)\n        else:\n            dp[index] = obstacle\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `patterns` and a string `word`, return _the **number** of strings in_ `patterns` _that exist as a **substring** in_ `word`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** patterns = \\[ \"a \", \"abc \", \"bc \", \"d \"\\], word =  \"abc \"\n**Output:** 3\n**Explanation:**\n-  \"a \" appears as a substring in  \"abc \".\n-  \"abc \" appears as a substring in  \"abc \".\n-  \"bc \" appears as a substring in  \"abc \".\n-  \"d \" does not appear as a substring in  \"abc \".\n3 of the strings in patterns appear as a substring in word.\n\n**Example 2:**\n\n**Input:** patterns = \\[ \"a \", \"b \", \"c \"\\], word =  \"aaaaabbbbb \"\n**Output:** 2\n**Explanation:**\n-  \"a \" appears as a substring in  \"aaaaabbbbb \".\n-  \"b \" appears as a substring in  \"aaaaabbbbb \".\n-  \"c \" does not appear as a substring in  \"aaaaabbbbb \".\n2 of the strings in patterns appear as a substring in word.\n\n**Example 3:**\n\n**Input:** patterns = \\[ \"a \", \"a \", \"a \"\\], word =  \"ab \"\n**Output:** 3\n**Explanation:** Each of the patterns appears as a substring in word  \"ab \".\n\n**Constraints:**\n\n*   `1 <= patterns.length <= 100`\n*   `1 <= patterns[i].length <= 100`\n*   `1 <= word.length <= 100`\n*   `patterns[i]` and `word` consist of lowercase English letters.Deal with each of the patterns individually. Use the built-in function in the language you are using to find if the pattern exists as a substring in word.",
          "output": "def longest_beautiful_substring(word: str) -> int:\n    if len(word) < 5:\n        return 0\n\n    max_length = current_length = 1\n    current_vowels = word[0]\n\n    for i in range(1, len(word)):\n        if word[i] >= current_vowels[-1] and word[i] not in current_vowels:\n            current_vowels += word[i]\n        elif word[i] == current_vowels[-1]:\n            pass\n        else:\n            current_vowels = word[i]\n            current_length = 0\n\n        current_length += 1\n\n        if current_vowels == \"aeiou\":\n            max_length = max(max_length, current_length)\n\n    return max_length\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a positive integer `p`. Consider an array `nums` (**1-indexed**) that consists of the integers in the **inclusive** range `[1, 2p - 1]` in their binary representations. You are allowed to do the following operation **any** number of times:\n\n*   Choose two elements `x` and `y` from `nums`.\n*   Choose a bit in `x` and swap it with its corresponding bit in `y`. Corresponding bit refers to the bit that is in the **same position** in the other integer.\n\nFor example, if `x = 1101` and `y = 0011`, after swapping the `2nd` bit from the right, we have `x = 1111` and `y = 0001`.\n\nFind the **minimum non-zero** product of `nums` after performing the above operation **any** number of times. Return _this product_ _**modulo**_ `109 + 7`.\n\n**Note:** The answer should be the minimum product **before** the modulo operation is done.\n\n",
          "input": "**Example 1:**\n\n**Input:** p = 1\n**Output:** 1\n**Explanation:** nums = \\[1\\].\nThere is only one element, so the product equals that element.\n\n**Example 2:**\n\n**Input:** p = 2\n**Output:** 6\n**Explanation:** nums = \\[01, 10, 11\\].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 \\* 2 \\* 3 = 6 is already minimized.\n\n**Example 3:**\n\n**Input:** p = 3\n**Output:** 1512\n**Explanation:** nums = \\[001, 010, 011, 100, 101, 110, 111\\]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n    - The resulting array is \\[001, 110, 011, 100, 001, 110, 111\\].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n    - The resulting array is \\[001, 110, 001, 110, 001, 110, 111\\].\nThe array product is 1 \\* 6 \\* 1 \\* 6 \\* 1 \\* 6 \\* 7 = 1512, which is the minimum possible product.\n\n**Constraints:**\n\n*   `1 <= p <= 60`Try to minimize each element by swapping bits with any of the elements after it. If you swap out all the 1s in some element, this will lead to a product of zero.",
          "output": "def minNonZeroProduct(p: int) -> int:\n    mod = 10**9 + 7\n    x = (1 << p) - 1\n    y = (1 << p) - 2\n    z = pow(y, x - 1, mod)\n    return x * z % mod\n"
     },
     {
          "instruction": "Write python code for this problem: There is a **1-based** binary matrix where `0` represents land and `1` represents water. You are given integers `row` and `col` representing the number of rows and columns in the matrix, respectively.\n\nInitially on day `0`, the **entire** matrix is **land**. However, each day a new cell becomes flooded with **water**. You are given a **1-based** 2D array `cells`, where `cells[i] = [ri, ci]` represents that on the `ith` day, the cell on the `rith` row and `cith` column (**1-based** coordinates) will be covered with **water** (i.e., changed to `1`).\n\nYou want to find the **last** day that it is possible to walk from the **top** to the **bottom** by only walking on land cells. You can start from **any** cell in the top row and end at **any** cell in the bottom row. You can only travel in the **four** cardinal directions (left, right, up, and down).\n\nReturn _the **last** day where it is possible to walk from the **top** to the **bottom** by only walking on land cells_.\n\n",
          "input": "**Example 1:**\n\n**Input:** row = 2, col = 2, cells = \\[\\[1,1\\],\\[2,1\\],\\[1,2\\],\\[2,2\\]\\]\n**Output:** 2\n**Explanation:** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.\n\n**Example 2:**\n\n**Input:** row = 2, col = 2, cells = \\[\\[1,1\\],\\[1,2\\],\\[2,1\\],\\[2,2\\]\\]\n**Output:** 1\n**Explanation:** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.\n\n**Example 3:**\n\n**Input:** row = 3, col = 3, cells = \\[\\[1,2\\],\\[2,1\\],\\[3,3\\],\\[2,2\\],\\[1,1\\],\\[1,3\\],\\[2,3\\],\\[3,2\\],\\[3,1\\]\\]\n**Output:** 3\n**Explanation:** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.\n\n**Constraints:**\n\n*   `2 <= row, col <= 2 * 104`\n*   `4 <= row * col <= 2 * 104`\n*   `cells.length == row * col`\n*   `1 <= ri <= row`\n*   `1 <= ci <= col`\n*   All the values of `cells` are **unique**.What graph algorithm allows us to find whether a path exists? Can we use binary search to help us solve the problem?",
          "output": "def sort_sentence(s: str) -> str:\n    tokens = s.split()\n    words = [''] * len(tokens)\n    \n    for token in tokens:\n        pos = int(token[-1]) - 1\n        words[pos] = token[:-1]\n    \n    return ' '.join(words)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **0-indexed** integer array `nums`, find the **leftmost** `middleIndex` (i.e., the smallest amongst all the possible ones).\n\nA `middleIndex` is an index where `nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]`.\n\nIf `middleIndex == 0`, the left side sum is considered to be `0`. Similarly, if `middleIndex == nums.length - 1`, the right side sum is considered to be `0`.\n\nReturn _the **leftmost**_ `middleIndex` _that satisfies the condition, or_ `-1` _if there is no such index_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,3,-1,8,4\\]\n**Output:** 3\n**Explanation:** The sum of the numbers before index 3 is: 2 + 3 + -1 = 4\nThe sum of the numbers after index 3 is: 4 = 4\n\n**Example 2:**\n\n**Input:** nums = \\[1,-1,4\\]\n**Output:** 2\n**Explanation:** The sum of the numbers before index 2 is: 1 + -1 = 0\nThe sum of the numbers after index 2 is: 0\n\n**Example 3:**\n\n**Input:** nums = \\[2,5\\]\n**Output:** -1\n**Explanation:** There is no valid middleIndex.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-1000 <= nums[i] <= 1000`\n\n**Note:** This question is the same as 724: [https://leetcode.com/problems/find-pivot-index/](https://leetcode.com/problems/find-pivot-index/)Could we go from left to right and check to see if an index is a middle index? Do we need to sum every number to the left and right of an index each time? Use a prefix sum array where prefix[i] = nums[0] + nums[1] + ... + nums[i].",
          "output": "def findMiddleIndex(nums):\n    total_sum = sum(nums)\n    left_sum = 0\n\n    for i, num in enumerate(nums):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** `m x n` binary matrix `land` where a `0` represents a hectare of forested land and a `1` represents a hectare of farmland.\n\nTo keep the land organized, there are designated rectangular areas of hectares that consist **entirely** of farmland. These rectangular areas are called **groups**. No two groups are adjacent, meaning farmland in one group is **not** four-directionally adjacent to another farmland in a different group.\n\n`land` can be represented by a coordinate system where the top left corner of `land` is `(0, 0)` and the bottom right corner of `land` is `(m-1, n-1)`. Find the coordinates of the top left and bottom right corner of each **group** of farmland. A **group** of farmland with a top left corner at `(r1, c1)` and a bottom right corner at `(r2, c2)` is represented by the 4-length array `[r1, c1, r2, c2].`\n\nReturn _a 2D array containing the 4-length arrays described above for each **group** of farmland in_ `land`_. If there are no groups of farmland, return an empty array. You may return the answer in **any order**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** land = \\[\\[1,0,0\\],\\[0,1,1\\],\\[0,1,1\\]\\]\n**Output:** \\[\\[0,0,0,0\\],\\[1,1,2,2\\]\\]\n**Explanation:**\nThe first group has a top left corner at land\\[0\\]\\[0\\] and a bottom right corner at land\\[0\\]\\[0\\].\nThe second group has a top left corner at land\\[1\\]\\[1\\] and a bottom right corner at land\\[2\\]\\[2\\].\n\n**Example 2:**\n\n**Input:** land = \\[\\[1,1\\],\\[1,1\\]\\]\n**Output:** \\[\\[0,0,1,1\\]\\]\n**Explanation:**\nThe first group has a top left corner at land\\[0\\]\\[0\\] and a bottom right corner at land\\[1\\]\\[1\\].\n\n**Example 3:**\n\n**Input:** land = \\[\\[0\\]\\]\n**Output:** \\[\\]\n**Explanation:**\nThere are no groups of farmland.\n\n**Constraints:**\n\n*   `m == land.length`\n*   `n == land[i].length`\n*   `1 <= m, n <= 300`\n*   `land` consists of only `0`'s and `1`'s.\n*   Groups of farmland are **rectangular** in shape.Since every group of farmland is rectangular, the top left corner of each group will have the smallest x-coordinate and y-coordinate of any farmland in the group. Similarly, the bootm right corner of each group will have the largest x-coordinate and y-coordinate of any farmland in the group. Use DFS to traverse through different groups of farmlands and keep track of the smallest and largest x-coordinate and y-coordinates you have seen in each group.",
          "output": "def findFarmland(land):\n    m, n = len(land), len(land[0])\n    groups = []\n    \n    for i in range(m):\n        for j in range(n):\n            if land[i][j] == 1:\n                r1, c1 = i, j\n                while j + 1 < n and land[i][j + 1] == 1:\n                    j += 1\n                r2, c2 = i, j\n                while r2 + 1 < m and land[r2 + 1][j] == 1:\n                    r2 += 1\n                for r in range(r1, r2 + 1):\n                    for c in range(c1, c2 + 1):\n                        land[r][c] = 0\n                groups.append([r1, c1, r2, c2])\n\n    return groups\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of the `ith` node. The root of the tree is node `0`, so `parent[0] = -1` since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.\n\nThe data structure should support the following functions:\n\n*   **Lock:** **Locks** the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked.\n*   **Unlock: Unlocks** the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user.\n*   **Upgrade****: Locks** the given node for the given user and **unlocks** all of its descendants **regardless** of who locked it. You may only upgrade a node if **all** 3 conditions are true:\n    *   The node is unlocked,\n    *   It has at least one locked descendant (by **any** user), and\n    *   It does not have any locked ancestors.\n\nImplement the `LockingTree` class:\n\n*   `LockingTree(int[] parent)` initializes the data structure with the parent array.\n*   `lock(int num, int user)` returns `true` if it is possible for the user with id `user` to lock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **locked** by the user with id `user`.\n*   `unlock(int num, int user)` returns `true` if it is possible for the user with id `user` to unlock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **unlocked**.\n*   `upgrade(int num, int user)` returns `true` if it is possible for the user with id `user` to upgrade the node `num`, or `false` otherwise. If it is possible, the node `num` will be **upgraded**.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"LockingTree \",  \"lock \",  \"unlock \",  \"unlock \",  \"lock \",  \"upgrade \",  \"lock \"\\]\n\\[\\[\\[-1, 0, 0, 1, 1, 2, 2\\]\\], \\[2, 2\\], \\[2, 3\\], \\[2, 2\\], \\[4, 5\\], \\[0, 1\\], \\[0, 1\\]\\]\n**Output**\n\\[null, true, false, true, true, true, false\\]\n\n**Explanation**\nLockingTree lockingTree = new LockingTree(\\[-1, 0, 0, 1, 1, 2, 2\\]);\nlockingTree.lock(2, 2);    // return true because node 2 is unlocked.\n                           // Node 2 will now be locked by user 2.\nlockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2.\nlockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.\n                           // Node 2 will now be unlocked.\nlockingTree.lock(4, 5);    // return true because node 4 is unlocked.\n                           // Node 4 will now be locked by user 5.\nlockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).\n                           // Node 0 will now be locked by user 1 and node 4 will now be unlocked.\nlockingTree.lock(0, 1);    // return false because node 0 is already locked.\n\n**Constraints:**\n\n*   `n == parent.length`\n*   `2 <= n <= 2000`\n*   `0 <= parent[i] <= n - 1` for `i != 0`\n*   `parent[0] == -1`\n*   `0 <= num <= n - 1`\n*   `1 <= user <= 104`\n*   `parent` represents a valid tree.\n*   At most `2000` calls **in total** will be made to `lock`, `unlock`, and `upgrade`.How can we use the small constraints to help us solve the problem? How can we traverse the ancestors and descendants of a node?",
          "output": "def subset_xor_sum(nums):\n    result = 0\n    n = len(nums)\n    num_subsets = 1 << n\n\n    for i in range(num_subsets):\n        subset_xor = 0\n        for j in range(n):\n            if i & (1 << j):\n                subset_xor ^= nums[j]\n        result += subset_xor\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. We call a subset of `nums` **good** if its product can be represented as a product of one or more **distinct prime** numbers.\n\n*   For example, if `nums = [1, 2, 3, 4]`:\n    *   `[2, 3]`, `[1, 2, 3]`, and `[1, 3]` are **good** subsets with products `6 = 2*3`, `6 = 2*3`, and `3 = 3` respectively.\n    *   `[1, 4]` and `[4]` are not **good** subsets with products `4 = 2*2` and `4 = 2*2` respectively.\n\nReturn _the number of different **good** subsets in_ `nums` _**modulo**_ `109 + 7`.\n\nA **subset** of `nums` is any array that can be obtained by deleting some (possibly none or all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 6\n**Explanation:** The good subsets are:\n- \\[1,2\\]: product is 2, which is the product of distinct prime 2.\n- \\[1,2,3\\]: product is 6, which is the product of distinct primes 2 and 3.\n- \\[1,3\\]: product is 3, which is the product of distinct prime 3.\n- \\[2\\]: product is 2, which is the product of distinct prime 2.\n- \\[2,3\\]: product is 6, which is the product of distinct primes 2 and 3.\n- \\[3\\]: product is 3, which is the product of distinct prime 3.\n\n**Example 2:**\n\n**Input:** nums = \\[4,2,3,15\\]\n**Output:** 5\n**Explanation:** The good subsets are:\n- \\[2\\]: product is 2, which is the product of distinct prime 2.\n- \\[2,3\\]: product is 6, which is the product of distinct primes 2 and 3.\n- \\[2,15\\]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- \\[3\\]: product is 3, which is the product of distinct prime 3.\n- \\[15\\]: product is 15, which is the product of distinct primes 3 and 5.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 30`Consider only the numbers which have a good prime factorization. Use brute force to find all possible good subsets and then calculate its frequency in nums.",
          "output": "def min_swaps(s: str) -> int:\n    zeros, ones = 0, 0\n    for c in s:\n        if c == '0':\n            zeros += 1\n        else:\n            ones += 1\n\n    if abs(zeros - ones) > 1:\n        return -1\n\n    mismatch_count1, mismatch_count2 = 0, 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            if c != '0': mismatch_count1 += 1\n            if c != '1': mismatch_count2 += 1\n        else:\n            if c != '1': mismatch_count1 += 1\n            if c != '0': mismatch_count2 += 1\n\n    return min(mismatch_count1, mismatch_count2) // 2\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the **greatest common divisor** of the smallest number and largest number in_ `nums`.\n\nThe **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,5,6,9,10\\]\n**Output:** 2\n**Explanation:**\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2.\n\n**Example 2:**\n\n**Input:** nums = \\[7,5,6,8,3\\]\n**Output:** 1\n**Explanation:**\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1.\n\n**Example 3:**\n\n**Input:** nums = \\[3,3\\]\n**Output:** 3\n**Explanation:**\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`Find the minimum and maximum in one iteration. Let them be mn and mx. Try all the numbers in the range [1, mn] and check the largest number which divides both of them.",
          "output": "def findGCD(nums):\n    min_val, max_val = min(nums), max(nums)\n    while max_val % min_val != 0:\n        min_val, max_val = max_val % min_val, min_val\n    return min_val\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `nums` containing `n` **unique** binary strings each of length `n`, return _a binary string of length_ `n` _that **does not appear** in_ `nums`_. If there are multiple answers, you may return **any** of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[ \"01 \", \"10 \"\\]\n**Output:**  \"11 \"\n**Explanation:**  \"11 \" does not appear in nums.  \"00 \" would also be correct.\n\n**Example 2:**\n\n**Input:** nums = \\[ \"00 \", \"01 \"\\]\n**Output:**  \"11 \"\n**Explanation:**  \"11 \" does not appear in nums.  \"10 \" would also be correct.\n\n**Example 3:**\n\n**Input:** nums = \\[ \"111 \", \"011 \", \"001 \"\\]\n**Output:**  \"101 \"\n**Explanation:**  \"101 \" does not appear in nums.  \"000 \",  \"010 \",  \"100 \", and  \"110 \" would also be correct.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 16`\n*   `nums[i].length == n`\n*   `nums[i]` is either `'0'` or `'1'`.\n*   All the strings of `nums` are **unique**.We can convert the given strings into base 10 integers. Can we use recursion to generate all possible strings?",
          "output": "def findDifferentBinaryString(nums):\n    s = set(nums)\n    n = len(nums)\n    \n    for i in range(1 << n):\n        candidate = ''.join(['1' if i & (1 << j) else '0' for j in range(n)])\n        if candidate not in s:\n            return candidate\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` integer matrix `mat` and an integer `target`.\n\nChoose one integer from **each row** in the matrix such that the **absolute difference** between `target` and the **sum** of the chosen elements is **minimized**.\n\nReturn _the **minimum absolute difference**_.\n\nThe **absolute difference** between two numbers `a` and `b` is the absolute value of `a - b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** mat = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], target = 13\n**Output:** 0\n**Explanation:** One possible choice is to:\n- Choose 1 from the first row.\n- Choose 5 from the second row.\n- Choose 7 from the third row.\nThe sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1\\],\\[2\\],\\[3\\]\\], target = 100\n**Output:** 94\n**Explanation:** The best possible choice is to:\n- Choose 1 from the first row.\n- Choose 2 from the second row.\n- Choose 3 from the third row.\nThe sum of the chosen elements is 6, and the absolute difference is 94.\n\n**Example 3:**\n\n**Input:** mat = \\[\\[1,2,9,8,7\\]\\], target = 6\n**Output:** 1\n**Explanation:** The best choice is to choose 7 from the first row.\nThe absolute difference is 1.\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 70`\n*   `1 <= mat[i][j] <= 70`\n*   `1 <= target <= 800`The sum of chosen elements will not be too large. Consider using a hash set to record all possible sums while iterating each row. Instead of keeping track of all possible sums, since in each row, we are adding positive numbers, only keep those that can be a candidate, not exceeding the target by too much.",
          "output": "def minimizeTheDifference(mat, target):\n    m, n = len(mat), len(mat[0])\n    dp = [[0 for _ in range(800 * 70 + 1)] for _ in range(m)]\n    dp[0] = mat[0]\n\n    for i in range(1, m):\n        for j in range(n):\n            for k in range(800 * 70, 0, -1):\n                if k - mat[i][j] >= 0 and dp[i - 1][k - mat[i][j]]:\n                    dp[i][k] = 1\n\n    min_diff = float('inf')\n    for k in range(800 * 70 + 1):\n        if dp[-1][k]:\n            min_diff = min(min_diff, abs(k - target))\n\n    return min_diff\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` representing the length of an unknown array that you are trying to recover. You are also given an array `sums` containing the values of all `2n` **subset sums** of the unknown array (in no particular order).\n\nReturn _the array_ `ans` _of length_ `n` _representing the unknown array. If **multiple** answers exist, return **any** of them_.\n\nAn array `sub` is a **subset** of an array `arr` if `sub` can be obtained from `arr` by deleting some (possibly zero or all) elements of `arr`. The sum of the elements in `sub` is one possible **subset sum** of `arr`. The sum of an empty array is considered to be `0`.\n\n**Note:** Test cases are generated such that there will **always** be at least one correct answer.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, sums = \\[-3,-2,-1,0,0,1,2,3\\]\n**Output:** \\[1,2,-3\\]\n**Explanation:** \\[1,2,-3\\] is able to achieve the given subset sums:\n- \\[\\]: sum is 0\n- \\[1\\]: sum is 1\n- \\[2\\]: sum is 2\n- \\[1,2\\]: sum is 3\n- \\[-3\\]: sum is -3\n- \\[1,-3\\]: sum is -2\n- \\[2,-3\\]: sum is -1\n- \\[1,2,-3\\]: sum is 0\nNote that any permutation of \\[1,2,-3\\] and also any permutation of \\[-1,-2,3\\] will also be accepted.\n\n**Example 2:**\n\n**Input:** n = 2, sums = \\[0,0,0,0\\]\n**Output:** \\[0,0\\]\n**Explanation:** The only correct answer is \\[0,0\\].\n\n**Example 3:**\n\n**Input:** n = 4, sums = \\[0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8\\]\n**Output:** \\[0,-1,4,5\\]\n**Explanation:** \\[0,-1,4,5\\] is able to achieve the given subset sums.\n\n**Constraints:**\n\n*   `1 <= n <= 15`\n*   `sums.length == 2n`\n*   `-104 <= sums[i] <= 104`What information do the two largest elements tell us? Can we use recursion to check all possible states?",
          "output": "from collections import Counter\n\ndef recoverArray(n, sums):\n    sums = Counter(sums)\n    ans = []\n\n    while len(ans) < n:\n        # remove the 0 sum\n        sums[0] -= 1\n        if sums[0] == 0: del sums[0]\n\n        # selected next value\n        cur = next(iter(sums))\n        sums[cur] -= 1\n        if sums[cur] == 0: del sums[cur]\n\n        # update sums\n        tmp = Counter()\n        for k, v in sums.items():\n            cnt = v - Ans.count(k - cur)\n            if cnt > 0:\n                tmp[k] = cnt\n        sums = tmp\n        ans.append(cur)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Consider a function that implements an algorithm **similar** to [Binary Search](https://leetcode.com/explore/learn/card/binary-search/). The function has two input parameters: `sequence` is a sequence of integers, and `target` is an integer value. The purpose of the function is to find if the `target` exists in the `sequence`.\n\nThe pseudocode of the function is as follows:\n\nfunc(sequence, target)\n  while sequence is not empty\n    **randomly** choose an element from sequence as the pivot\n    if pivot = target, return **true**\n    else if pivot < target, remove pivot and all elements to its left from the sequence\n    else, remove pivot and all elements to its right from the sequence\n  end while\n  return **false**\n\nWhen the `sequence` is sorted, the function works correctly for **all** values. When the `sequence` is not sorted, the function does not work for all values, but may still work for **some** values.\n\nGiven an integer array `nums`, representing the `sequence`, that contains **unique** numbers and **may or may not be sorted**, return _the number of values that are **guaranteed** to be found using the function, for **every possible** pivot selection_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[7\\]\n**Output:** 1\n**Explanation**: \nSearching for value 7 is guaranteed to be found.\nSince the sequence has only one element, 7 will be chosen as the pivot. Because the pivot equals the target, the function will return true.\n\n**Example 2:**\n\n**Input:** nums = \\[-1,5,2\\]\n**Output:** 1\n**Explanation**: \nSearching for value -1 is guaranteed to be found.\nIf -1 was chosen as the pivot, the function would return true.\nIf 5 was chosen as the pivot, 5 and 2 would be removed. In the next loop, the sequence would have only -1 and the function would return true.\nIf 2 was chosen as the pivot, 2 would be removed. In the next loop, the sequence would have -1 and 5. No matter which number was chosen as the next pivot, the function would find -1 and return true.\n\nSearching for value 5 is NOT guaranteed to be found.\nIf 2 was chosen as the pivot, -1, 5 and 2 would be removed. The sequence would be empty and the function would return false.\n\nSearching for value 2 is NOT guaranteed to be found.\nIf 5 was chosen as the pivot, 5 and 2 would be removed. In the next loop, the sequence would have only -1 and the function would return false.\n\nBecause only -1 is guaranteed to be found, you should return 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-105 <= nums[i] <= 105`\n*   All the values of `nums` are **unique**.\n\n**Follow-up:** If `nums` has **duplicates**, would you modify your algorithm? If so, how?The target will not be found if it is removed from the sequence. When does this occur? If a pivot is to the left of and is greater than the target, then the target will be removed. The same occurs when the pivot is to the right of and is less than the target. Since any element can be chosen as the pivot, for any target NOT to be removed, the condition described in the previous hint must never occur.",
          "output": "def maxFrequency(nums, k):\n    nums.sort()\n    max_freq, n, total = 1, len(nums), 0\n    i = 0\n    for j in range(n):\n        total += nums[j]\n        while total < nums[j] * (j - i + 1) - k:\n            total -= nums[i]\n            i += 1\n        max_freq = max(max_freq, j - i + 1)\n    return max_freq\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`, where `nums[i]` represents the score of the `ith` student. You are also given an integer `k`.\n\nPick the scores of any `k` students from the array so that the **difference** between the **highest** and the **lowest** of the `k` scores is **minimized**.\n\nReturn _the **minimum** possible difference_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[90\\], k = 1\n**Output:** 0\n**Explanation:** There is one way to pick score(s) of one student:\n- \\[**90**\\]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[9,4,1,7\\], k = 2\n**Output:** 2\n**Explanation:** There are six ways to pick score(s) of two students:\n- \\[**9**,**4**,1,7\\]. The difference between the highest and lowest score is 9 - 4 = 5.\n- \\[**9**,4,**1**,7\\]. The difference between the highest and lowest score is 9 - 1 = 8.\n- \\[**9**,4,1,**7**\\]. The difference between the highest and lowest score is 9 - 7 = 2.\n- \\[9,**4**,**1**,7\\]. The difference between the highest and lowest score is 4 - 1 = 3.\n- \\[9,**4**,1,**7**\\]. The difference between the highest and lowest score is 7 - 4 = 3.\n- \\[9,4,**1**,**7**\\]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2.\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 1000`\n*   `0 <= nums[i] <= 105`For the difference between the highest and lowest element to be minimized, the k chosen scores need to be as close to each other as possible. What if the array was sorted? After sorting the scores, any contiguous k scores are as close to each other as possible. Apply a sliding window solution to iterate over each contiguous k scores, and find the minimum of the differences of all windows.",
          "output": "def max_distance(nums1, nums2):\n    i, j, max_dist = 0, 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if i <= j and nums1[i] <= nums2[j]:\n            max_dist = max(max_dist, j - i)\n            j += 1\n        else:\n            i += 1\n    return max_dist\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `nums` and an integer `k`. Each string in `nums` represents an integer without leading zeros.\n\nReturn _the string that represents the_ `kth` _**largest integer** in_ `nums`.\n\n**Note**: Duplicate numbers should be counted distinctly. For example, if `nums` is `[ \"1 \", \"2 \", \"2 \"]`, `\"2 \"` is the first largest integer, `\"2 \"` is the second-largest integer, and `\"1 \"` is the third-largest integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[ \"3 \", \"6 \", \"7 \", \"10 \"\\], k = 4\n**Output:**  \"3 \"\n**Explanation:**\nThe numbers in nums sorted in non-decreasing order are \\[ \"3 \", \"6 \", \"7 \", \"10 \"\\].\nThe 4th largest integer in nums is  \"3 \".\n\n**Example 2:**\n\n**Input:** nums = \\[ \"2 \", \"21 \", \"12 \", \"1 \"\\], k = 3\n**Output:**  \"2 \"\n**Explanation:**\nThe numbers in nums sorted in non-decreasing order are \\[ \"1 \", \"2 \", \"12 \", \"21 \"\\].\nThe 3rd largest integer in nums is  \"2 \".\n\n**Example 3:**\n\n**Input:** nums = \\[ \"0 \", \"0 \"\\], k = 2\n**Output:**  \"0 \"\n**Explanation:**\nThe numbers in nums sorted in non-decreasing order are \\[ \"0 \", \"0 \"\\].\nThe 2nd largest integer in nums is  \"0 \".\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 104`\n*   `1 <= nums[i].length <= 100`\n*   `nums[i]` consists of only digits.\n*   `nums[i]` will not have any leading zeros.If two numbers have different lengths, which one will be larger? The longer number is the larger number. If two numbers have the same length, which one will be larger? Compare the two numbers starting from the most significant digit. Once you have found the first digit that differs, the one with the larger digit is the larger number.",
          "output": "def maxMinProduct(nums):\n    res, mod = 0, 10**9 + 7\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    stack = []\n\n    for i in range(n):\n        prefix[i + 1] = (prefix[i] + nums[i]) % mod\n\n    for i in range(n + 1):\n        while stack and (i == n or nums[stack[-1]] > nums[i]):\n            j = stack.pop()\n            res = max(res, nums[j] * (prefix[i] - prefix[stack[-1] + 1 if stack else 0]) % mod)\n        stack.append(i)\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` tasks assigned to you. The task times are represented as an integer array `tasks` of length `n`, where the `ith` task takes `tasks[i]` hours to finish. A **work session** is when you work for **at most** `sessionTime` consecutive hours and then take a break.\n\nYou should finish the given tasks in a way that satisfies the following conditions:\n\n*   If you start a task in a work session, you must complete it in the **same** work session.\n*   You can start a new task **immediately** after finishing the previous one.\n*   You may complete the tasks in **any order**.\n\nGiven `tasks` and `sessionTime`, return _the **minimum** number of **work sessions** needed to finish all the tasks following the conditions above._\n\nThe tests are generated such that `sessionTime` is **greater** than or **equal** to the **maximum** element in `tasks[i]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** tasks = \\[1,2,3\\], sessionTime = 3\n**Output:** 2\n**Explanation:** You can finish the tasks in two work sessions.\n- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.\n- Second work session: finish the third task in 3 hours.\n\n**Example 2:**\n\n**Input:** tasks = \\[3,1,3,1,1\\], sessionTime = 8\n**Output:** 2\n**Explanation:** You can finish the tasks in two work sessions.\n- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.\n- Second work session: finish the last task in 1 hour.\n\n**Example 3:**\n\n**Input:** tasks = \\[1,2,3,4,5\\], sessionTime = 15\n**Output:** 1\n**Explanation:** You can finish all the tasks in one work session.\n\n**Constraints:**\n\n*   `n == tasks.length`\n*   `1 <= n <= 14`\n*   `1 <= tasks[i] <= 10`\n*   `max(tasks[i]) <= sessionTime <= 15`Try all possible ways of assignment. If we can store the assignments in form of a state then we can reuse that state and solve the problem in a faster way.",
          "output": "from collections import defaultdict\n\n\ndef largestPathValue(colors, edges):\n    def dfs(node):\n        if not cache[node][ord(colors[node]) - ord('a')]:\n            cache[node][ord(colors[node]) - ord('a')] = 1\n            for neighbor in graph[node]:\n                cache[node][ord(colors[node]) - ord('a')] = max(cache[node][ord(colors[node]) - ord('a')],\n                                                               1 + dfs(neighbor))\n        return cache[node][ord(colors[node]) - ord('a')]\n\n    n = len(colors)\n    graph = [set() for _ in range(n)]\n    for a, b in edges:\n        graph[a].add(b)\n\n    cache = [[0] * 26 for _ in range(n)]\n    in_degree = [0] * n\n    for a, b in edges:\n        in_degree[b] += 1\n    res = -1\n    for i in range(n):\n        if in_degree[i] == 0:\n            res = max(res, dfs(i))\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a binary string `binary`. A **subsequence** of `binary` is considered **good** if it is **not empty** and has **no leading zeros** (with the exception of `\"0 \"`).\n\nFind the number of **unique good subsequences** of `binary`.\n\n*   For example, if `binary = \"001 \"`, then all the **good** subsequences are `[ \"0 \", \"0 \", \"1 \"]`, so the **unique** good subsequences are `\"0 \"` and `\"1 \"`. Note that subsequences `\"00 \"`, `\"01 \"`, and `\"001 \"` are not good because they have leading zeros.\n\nReturn _the number of **unique good subsequences** of_ `binary`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** binary =  \"001 \"\n**Output:** 2\n**Explanation:** The good subsequences of binary are \\[ \"0 \",  \"0 \",  \"1 \"\\].\nThe unique good subsequences are  \"0 \" and  \"1 \".\n\n**Example 2:**\n\n**Input:** binary =  \"11 \"\n**Output:** 2\n**Explanation:** The good subsequences of binary are \\[ \"1 \",  \"1 \",  \"11 \"\\].\nThe unique good subsequences are  \"1 \" and  \"11 \".\n\n**Example 3:**\n\n**Input:** binary =  \"101 \"\n**Output:** 5\n**Explanation:** The good subsequences of binary are \\[ \"1 \",  \"0 \",  \"1 \",  \"10 \",  \"11 \",  \"101 \"\\]. \nThe unique good subsequences are  \"0 \",  \"1 \",  \"10 \",  \"11 \", and  \"101 \".\n\n**Constraints:**\n\n*   `1 <= binary.length <= 105`\n*   `binary` consists of only `'0'`s and `'1'`s.The number of unique good subsequences is equal to the number of unique decimal values there are for all possible subsequences. Find the answer at each index based on the previous indexes' answers.",
          "output": "def count_good_substrings(s: str) -> int:\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums` and an integer `k`, return _the number of pairs_ `(i, j)` _where_ `i < j` _such that_ `|nums[i] - nums[j]| == k`.\n\nThe value of `|x|` is defined as:\n\n*   `x` if `x >= 0`.\n*   `-x` if `x < 0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,2,1\\], k = 1\n**Output:** 4\n**Explanation:** The pairs with an absolute difference of 1 are:\n- \\[**1**,**2**,2,1\\]\n- \\[**1**,2,**2**,1\\]\n- \\[1,**2**,2,**1**\\]\n- \\[1,2,**2**,**1**\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,3\\], k = 3\n**Output:** 0\n**Explanation:** There are no pairs with an absolute difference of 3.\n\n**Example 3:**\n\n**Input:** nums = \\[3,2,1,5,4\\], k = 2\n**Output:** 3\n**Explanation:** The pairs with an absolute difference of 2 are:\n- \\[**3**,2,**1**,5,4\\]\n- \\[**3**,2,1,**5**,4\\]\n- \\[3,**2**,1,5,**4**\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 200`\n*   `1 <= nums[i] <= 100`\n*   `1 <= k <= 99`Can we check every possible pair? Can we use a nested for loop to solve this problem?",
          "output": "def chalk_replacer(chalk, k):\n    total_chalk = sum(chalk)\n    k %= total_chalk\n    for i, val in enumerate(chalk):\n        if k < val:\n            return i\n        k -= val\n    return 0\n"
     },
     {
          "instruction": "Write python code for this problem: An integer array `original` is transformed into a **doubled** array `changed` by appending **twice the value** of every element in `original`, and then randomly **shuffling** the resulting array.\n\nGiven an array `changed`, return `original` _if_ `changed` _is a **doubled** array. If_ `changed` _is not a **doubled** array, return an empty array. The elements in_ `original` _may be returned in **any** order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** changed = \\[1,3,4,2,6,8\\]\n**Output:** \\[1,3,4\\]\n**Explanation:** One possible original array could be \\[1,3,4\\]:\n- Twice the value of 1 is 1 \\* 2 = 2.\n- Twice the value of 3 is 3 \\* 2 = 6.\n- Twice the value of 4 is 4 \\* 2 = 8.\nOther original arrays could be \\[4,3,1\\] or \\[3,1,4\\].\n\n**Example 2:**\n\n**Input:** changed = \\[6,3,0,1\\]\n**Output:** \\[\\]\n**Explanation:** changed is not a doubled array.\n\n**Example 3:**\n\n**Input:** changed = \\[1\\]\n**Output:** \\[\\]\n**Explanation:** changed is not a doubled array.\n\n**Constraints:**\n\n*   `1 <= changed.length <= 105`\n*   `0 <= changed[i] <= 105`If changed is a doubled array, you should be able to delete elements and their doubled values until the array is empty. Which element is guaranteed to not be a doubled value? It is the smallest element. After removing the smallest element and its double from changed, is there another number that is guaranteed to not be a doubled value?",
          "output": "def find_original_array(changed):\n    if len(changed) % 2 != 0:\n        return []\n\n    count = {}\n    for num in changed:\n        count[num] = count.get(num, 0) + 1\n\n    original = []\n    for num, freq in count.items():\n        if freq > count.get(num * 2, 0):\n            return []\n\n        for _ in range(freq):\n            original.append(num)\n\n    return original\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` points on a road you are driving your taxi on. The `n` points on the road are labeled from `1` to `n` in the direction you are going, and you want to drive from point `1` to point `n` to make money by picking up passengers. You cannot change the direction of the taxi.\n\nThe passengers are represented by a **0-indexed** 2D integer array `rides`, where `rides[i] = [starti, endi, tipi]` denotes the `ith` passenger requesting a ride from point `starti` to point `endi` who is willing to give a `tipi` dollar tip.\n\nFor **each** passenger `i` you pick up, you **earn** `endi - starti + tipi` dollars. You may only drive **at most one** passenger at a time.\n\nGiven `n` and `rides`, return _the **maximum** number of dollars you can earn by picking up the passengers optimally._\n\n**Note:** You may drop off a passenger and pick up a different passenger at the same point.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, rides = \\[\\[2,5,4\\],\\[1,5,1\\]\\]\n**Output:** 7\n**Explanation:** We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.\n\n**Example 2:**\n\n**Input:** n = 20, rides = \\[\\[1,6,1\\],\\[3,10,2\\],\\[10,12,3\\],\\[11,12,2\\],\\[12,15,2\\],\\[13,18,1\\]\\]\n**Output:** 20\n**Explanation:** We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total.\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `1 <= rides.length <= 3 * 104`\n*   `rides[i].length == 3`\n*   `1 <= starti < endi <= n`\n*   `1 <= tipi <= 105`Can we sort the array to help us solve the problem? We can use dynamic programming to keep track of the maximum at each position.",
          "output": "def minOperationsToFlip(expression: str) -> int:\n    zero, one, op = [0], [0], []\n    for c in expression:\n        if c == '&':\n            op.append(1)\n        elif c == '|':\n            op.append(2)\n        elif c.isdigit():\n            if c == '0':\n                one.append(1)\n                zero.append(0)\n            else:\n                zero.append(1)\n                one.append(0)\n        elif c == ')':\n            cur_op = op.pop()\n            x = zero.pop()\n            y = one.pop() + 1\n            if cur_op == 1:\n                new_zero = max(x, y)\n                new_one = one[-1] + min(x, zero[-1])\n            else:\n                new_zero = zero[-1] + min(x, one[-1])\n                new_one = max(y, one[-1])\n            zero.pop()\n            one.pop()\n            zero.append(new_zero)\n            one.append(new_one)\n    return zero[-1] + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. In one operation, you can replace **any** element in `nums` with **any** integer.\n\n`nums` is considered **continuous** if both of the following conditions are fulfilled:\n\n*   All elements in `nums` are **unique**.\n*   The difference between the **maximum** element and the **minimum** element in `nums` equals `nums.length - 1`.\n\nFor example, `nums = [4, 2, 5, 3]` is **continuous**, but `nums = [1, 2, 3, 5, 6]` is **not continuous**.\n\nReturn _the **minimum** number of operations to make_ `nums` **_continuous_**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,2,5,3\\]\n**Output:** 0\n**Explanation:** nums is already continuous.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,5,6\\]\n**Output:** 1\n**Explanation:** One possible solution is to change the last element to 4.\nThe resulting array is \\[1,2,3,5,4\\], which is continuous.\n\n**Example 3:**\n\n**Input:** nums = \\[1,10,100,1000\\]\n**Output:** 3\n**Explanation:** One possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is \\[1,2,3,4\\], which is continuous.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`Sort the array. For every index do a binary search to get the possible right end of the window and calculate the possible answer.",
          "output": "def min_operations(nums):\n    n = len(nums)\n    s = sorted(set(nums))\n    res = float('inf')\n    j = 0\n    \n    for i in range(len(s)):\n        while j < len(s) and s[j] <= s[i] + n - 1:\n            j += 1\n        res = min(res, n - (j - i))\n        \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: There is a **bi-directional** graph with `n` vertices, where each vertex is labeled from `0` to `n - 1` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself.\n\nYou want to determine if there is a **valid path** that exists from vertex `source` to vertex `destination`.\n\nGiven `edges` and the integers `n`, `source`, and `destination`, return `true` _if there is a **valid path** from_ `source` _to_ `destination`_, or_ `false` _otherwise__._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,0\\]\\], source = 0, destination = 2\n**Output:** true\n**Explanation:** There are two paths from vertex 0 to vertex 2:\n- 0 -> 1 -> 2\n- 0 -> 2\n\n**Example 2:**\n\n**Input:** n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[3,5\\],\\[5,4\\],\\[4,3\\]\\], source = 0, destination = 5\n**Output:** false\n**Explanation:** There is no path from vertex 0 to vertex 5.\n\n**Constraints:**\n\n*   `1 <= n <= 2 * 105`\n*   `0 <= edges.length <= 2 * 105`\n*   `edges[i].length == 2`\n*   `0 <= ui, vi <= n - 1`\n*   `ui != vi`\n*   `0 <= source, destination <= n - 1`\n*   There are no duplicate edges.\n*   There are no self edges.",
          "output": "def mem_sticks_crash(memory1, memory2):\n    crash_time = 1\n    while True:\n        if memory1 >= memory2:\n            if memory1 >= crash_time:\n                memory1 -= crash_time\n            else:\n                break\n        else:\n            if memory2 >= crash_time:\n                memory2 -= crash_time\n            else:\n                break\n        crash_time += 1\n    return [crash_time, memory1, memory2]\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a game that contains multiple characters, and each of the characters has **two** main properties: **attack** and **defense**. You are given a 2D integer array `properties` where `properties[i] = [attacki, defensei]` represents the properties of the `ith` character in the game.\n\nA character is said to be **weak** if any other character has **both** attack and defense levels **strictly greater** than this character's attack and defense levels. More formally, a character `i` is said to be **weak** if there exists another character `j` where `attackj > attacki` and `defensej > defensei`.\n\nReturn _the number of **weak** characters_.\n\n",
          "input": "**Example 1:**\n\n**Input:** properties = \\[\\[5,5\\],\\[6,3\\],\\[3,6\\]\\]\n**Output:** 0\n**Explanation:** No character has strictly greater attack and defense than the other.\n\n**Example 2:**\n\n**Input:** properties = \\[\\[2,2\\],\\[3,3\\]\\]\n**Output:** 1\n**Explanation:** The first character is weak because the second character has a strictly greater attack and defense.\n\n**Example 3:**\n\n**Input:** properties = \\[\\[1,5\\],\\[10,4\\],\\[4,3\\]\\]\n**Output:** 1\n**Explanation:** The third character is weak because the second character has a strictly greater attack and defense.\n\n**Constraints:**\n\n*   `2 <= properties.length <= 105`\n*   `properties[i].length == 2`\n*   `1 <= attacki, defensei <= 105`Sort the array on the basis of the attack values and group characters with the same attack together. How can you use these groups? Characters in one group will always have a lesser attack value than the characters of the next group. Hence, we will only need to check if there is a higher defense value present in the next groups.",
          "output": "def numberOfSticks(n, k):\n    MOD = 10**9 + 7\n    if n < k: return 0\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        dp[i][1] = 1\n        for j in range(2, i+1):\n            dp[i][j] = (dp[i-1][j-1] + (i-1) * dp[i-1][j]) % MOD\n\n    return dp[n][k]\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` rooms you need to visit, labeled from `0` to `n - 1`. Each day is labeled, starting from `0`. You will go in and visit one room a day.\n\nInitially on day `0`, you visit room `0`. The **order** you visit the rooms for the coming days is determined by the following **rules** and a given **0-indexed** array `nextVisit` of length `n`:\n\n*   Assuming that on a day, you visit room `i`,\n*   if you have been in room `i` an **odd** number of times (**including** the current visit), on the **next** day you will visit a room with a **lower or equal room number** specified by `nextVisit[i]` where `0 <= nextVisit[i] <= i`;\n*   if you have been in room `i` an **even** number of times (**including** the current visit), on the **next** day you will visit room `(i + 1) mod n`.\n\nReturn _the label of the **first** day where you have been in **all** the rooms_. It can be shown that such a day exists. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nextVisit = \\[0,0\\]\n**Output:** 2\n**Explanation:**\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\n  On the next day you will visit room nextVisit\\[0\\] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\n  On the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms.\n\n**Example 2:**\n\n**Input:** nextVisit = \\[0,0,2\\]\n**Output:** 6\n**Explanation:**\nYour room visiting order for each day is: \\[0,0,1,0,0,1,2,...\\].\nDay 6 is the first day where you have been in all the rooms.\n\n**Example 3:**\n\n**Input:** nextVisit = \\[0,1,2,0\\]\n**Output:** 6\n**Explanation:**\nYour room visiting order for each day is: \\[0,0,1,1,2,2,3,...\\].\nDay 6 is the first day where you have been in all the rooms.\n\n**Constraints:**\n\n*   `n == nextVisit.length`\n*   `2 <= n <= 105`\n*   `0 <= nextVisit[i] <= i`The only way to get to room i+1 is when you are visiting room i and room i has been visited an even number of times. After visiting room i an odd number of times, you are required to visit room nextVisit[i] where nextVisit[i] <= i. It takes a fixed amount of days for you to come back from room nextVisit[i] to room i. Then, you have visited room i even number of times.nextVisit[i] Can you use Dynamic Programming to avoid recomputing the number of days it takes to visit room i from room nextVisit[i]?",
          "output": "def firstDayBeenInAllRooms(nextVisit):\n    n = len(nextVisit)\n    MOD = 10**9 + 7\n    dp = [0] * n\n\n    for i in range(1, n):\n        dp[i] = (dp[i - 1] * 2 - dp[nextVisit[i - 1]] + 2) % MOD\n\n    return dp[n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`, and you can perform the following operation **any** number of times on `nums`:\n\n*   Swap the positions of two elements `nums[i]` and `nums[j]` if `gcd(nums[i], nums[j]) > 1` where `gcd(nums[i], nums[j])` is the **greatest common divisor** of `nums[i]` and `nums[j]`.\n\nReturn `true` _if it is possible to sort_ `nums` _in **non-decreasing** order using the above swap method, or_ `false` _otherwise._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[7,21,3\\]\n**Output:** true\n**Explanation:** We can sort \\[7,21,3\\] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = \\[**21**,**7**,3\\]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = \\[**3**,7,**21**\\]\n\n**Example 2:**\n\n**Input:** nums = \\[5,2,6,2\\]\n**Output:** false\n**Explanation:** It is impossible to sort the array because 5 cannot be swapped with any other element.\n\n**Example 3:**\n\n**Input:** nums = \\[10,5,9,3,15\\]\n**Output:** true\nWe can sort \\[10,5,9,3,15\\] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = \\[**15**,5,9,3,**10**\\]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = \\[**3**,5,9,**15**,10\\]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = \\[3,5,9,**10**,**15**\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `2 <= nums[i] <= 105`Can we build a graph with all the prime numbers and the original array? We can use union-find to determine which indices are connected (i.e., which indices can be swapped).",
          "output": "from math import gcd\n\ndef can_be_sorted(nums):\n    sorted_nums = sorted(nums)\n    for i in range(len(nums)):\n        if nums[i] != sorted_nums[i] and gcd(nums[i], sorted_nums[i]) == 1:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Given the `root` of a binary tree, return _the number of nodes where the value of the node is equal to the **sum** of the values of its descendants_.\n\nA **descendant** of a node `x` is any node that is on the path from node `x` to some leaf node. The sum is considered to be `0` if the node has no descendants.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[10,3,4,2,1\\]\n**Output:** 2\n**Explanation:**\nFor the node with value 10: The sum of its descendants is 3+4+2+1 = 10.\nFor the node with value 3: The sum of its descendants is 2+1 = 3.\n\n**Example 2:**\n\n**Input:** root = \\[2,3,null,2,null\\]\n**Output:** 0\n**Explanation:**\nNo node has a value that is equal to the sum of its descendants.\n\n**Example 3:**\n\n**Input:** root = \\[0\\]\n**Output:** 1\nFor the node with value 0: The sum of its descendants is 0 since it has no descendants.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 105]`.\n*   `0 <= Node.val <= 105`Can we reuse previously calculated information? How can we calculate the sum of the current subtree using the sum of the child's subtree?",
          "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def dfs(self, root, count):\n        if not root:\n            return 0\n        left_sum = self.dfs(root.left, count)\n        right_sum = self.dfs(root.right, count)\n        if root.val == left_sum + right_sum:\n            count[0] += 1\n        return root.val + left_sum + right_sum\n\n    def equalToDescendants(self, root):\n        count = [0]\n        self.dfs(root, count)\n        return count[0]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **0-indexed** string `word` and a character `ch`, **reverse** the segment of `word` that starts at index `0` and ends at the index of the **first occurrence** of `ch` (**inclusive**). If the character `ch` does not exist in `word`, do nothing.\n\n*   For example, if `word = \"abcdefd \"` and `ch = \"d \"`, then you should **reverse** the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"dcbaefd \"`.\n\nReturn _the resulting string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"abcdefd \", ch =  \"d \"\n**Output:**  \"dcbaefd \"\n**Explanation:** The first occurrence of  \"d \" is at index 3. \nReverse the part of word from 0 to 3 (inclusive), the resulting string is  \"dcbaefd \".\n\n**Example 2:**\n\n**Input:** word =  \"xyxzxe \", ch =  \"z \"\n**Output:**  \"zxyxxe \"\n**Explanation:** The first and only occurrence of  \"z \" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is  \"zxyxxe \".\n\n**Example 3:**\n\n**Input:** word =  \"abcd \", ch =  \"z \"\n**Output:**  \"abcd \"\n**Explanation:**  \"z \" does not exist in word.\nYou should not do any reverse operation, the resulting string is  \"abcd \".\n\n**Constraints:**\n\n*   `1 <= word.length <= 250`\n*   `word` consists of lowercase English letters.\n*   `ch` is a lowercase English letter.Find the first index where ch appears. Find a way to reverse a substring of word.",
          "output": "import math\ndef minimum_speed(n, hour, dist):\n    if n > math.ceil(hour): return -1\n    low, high = 1, int(1e7)\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        time = sum(math.ceil(d / mid) for d in dist)\n        if time <= hour:\n            speed = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return speed\n"
     },
     {
          "instruction": "Write python code for this problem: You are given `n` rectangles represented by a **0-indexed** 2D integer array `rectangles`, where `rectangles[i] = [widthi, heighti]` denotes the width and height of the `ith` rectangle.\n\nTwo rectangles `i` and `j` (`i < j`) are considered **interchangeable** if they have the **same** width-to-height ratio. More formally, two rectangles are **interchangeable** if `widthi/heighti == widthj/heightj` (using decimal division, not integer division).\n\nReturn _the **number** of pairs of **interchangeable** rectangles in_ `rectangles`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rectangles = \\[\\[4,8\\],\\[3,6\\],\\[10,20\\],\\[15,30\\]\\]\n**Output:** 6\n**Explanation:** The following are the interchangeable pairs of rectangles by index (0-indexed):\n- Rectangle 0 with rectangle 1: 4/8 == 3/6.\n- Rectangle 0 with rectangle 2: 4/8 == 10/20.\n- Rectangle 0 with rectangle 3: 4/8 == 15/30.\n- Rectangle 1 with rectangle 2: 3/6 == 10/20.\n- Rectangle 1 with rectangle 3: 3/6 == 15/30.\n- Rectangle 2 with rectangle 3: 10/20 == 15/30.\n\n**Example 2:**\n\n**Input:** rectangles = \\[\\[4,5\\],\\[7,8\\]\\]\n**Output:** 0\n**Explanation:** There are no interchangeable pairs of rectangles.\n\n**Constraints:**\n\n*   `n == rectangles.length`\n*   `1 <= n <= 105`\n*   `rectangles[i].length == 2`\n*   `1 <= widthi, heighti <= 105`Store the rectangle height and width ratio in a hashmap. Traverse the ratios, and for each ratio, use the frequency of the ratio to add to the total pair count.",
          "output": "def canReach(s: str, minJump: int, maxJump: int) -> bool:\n    n = len(s)\n    dp = [False] * n\n    dp[0] = True\n    pre = 0\n    for i in range(1, n):\n        if i >= minJump:\n            pre += dp[i - minJump]\n        if i > maxJump:\n            pre -= dp[i - maxJump - 1]\n        dp[i] = pre > 0 and s[i] == '0'\n    return dp[n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s`, find two **disjoint palindromic subsequences** of `s` such that the **product** of their lengths is **maximized**. The two subsequences are **disjoint** if they do not both pick a character at the same index.\n\nReturn _the **maximum** possible **product** of the lengths of the two palindromic subsequences_.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is **palindromic** if it reads the same forward and backward.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leetcodecom \"\n**Output:** 9\n**Explanation**: An optimal solution is to choose  \"ete \" for the 1st subsequence and  \"cdc \" for the 2nd subsequence.\nThe product of their lengths is: 3 \\* 3 = 9.\n\n**Example 2:**\n\n**Input:** s =  \"bb \"\n**Output:** 1\n**Explanation**: An optimal solution is to choose  \"b \" (the first character) for the 1st subsequence and  \"b \" (the second character) for the 2nd subsequence.\nThe product of their lengths is: 1 \\* 1 = 1.\n\n**Example 3:**\n\n**Input:** s =  \"accbcaxxcxx \"\n**Output:** 25\n**Explanation**: An optimal solution is to choose  \"accca \" for the 1st subsequence and  \"xxcxx \" for the 2nd subsequence.\nThe product of their lengths is: 5 \\* 5 = 25.\n\n**Constraints:**\n\n*   `2 <= s.length <= 12`\n*   `s` consists of lowercase English letters only.Could you generate all possible pairs of disjoint subsequences? Could you find the maximum length palindrome in each subsequence for a pair of disjoint subsequences?",
          "output": "def stoneGameVII(stones):\n    n = len(stones)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(stones[i] - dp[i + 1][j], stones[j] - dp[i][j - 1])\n\n    return dp[0][n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: There is a **family tree** rooted at `0` consisting of `n` nodes numbered `0` to `n - 1`. You are given a **0-indexed** integer array `parents`, where `parents[i]` is the parent for node `i`. Since node `0` is the **root**, `parents[0] == -1`.\n\nThere are `105` genetic values, each represented by an integer in the **inclusive** range `[1, 105]`. You are given a **0-indexed** integer array `nums`, where `nums[i]` is a **distinct** genetic value for node `i`.\n\nReturn _an array_ `ans` _of length_ `n` _where_ `ans[i]` _is_ _the **smallest** genetic value that is **missing** from the subtree rooted at node_ `i`.\n\nThe **subtree** rooted at a node `x` contains node `x` and all of its **descendant** nodes.\n\n",
          "input": "**Example 1:**\n\n**Input:** parents = \\[-1,0,0,2\\], nums = \\[1,2,3,4\\]\n**Output:** \\[5,1,1,1\\]\n**Explanation:** The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes \\[0,1,2,3\\] with values \\[1,2,3,4\\]. 5 is the smallest missing value.\n- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.\n- 2: The subtree contains nodes \\[2,3\\] with values \\[3,4\\]. 1 is the smallest missing value.\n- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.\n\n**Example 2:**\n\n**Input:** parents = \\[-1,0,1,0,3,3\\], nums = \\[5,4,6,2,1,3\\]\n**Output:** \\[7,1,1,4,2,1\\]\n**Explanation:** The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes \\[0,1,2,3,4,5\\] with values \\[5,4,6,2,1,3\\]. 7 is the smallest missing value.\n- 1: The subtree contains nodes \\[1,2\\] with values \\[4,6\\]. 1 is the smallest missing value.\n- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.\n- 3: The subtree contains nodes \\[3,4,5\\] with values \\[2,1,3\\]. 4 is the smallest missing value.\n- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.\n- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.\n\n**Example 3:**\n\n**Input:** parents = \\[-1,2,3,0,2,4,1\\], nums = \\[2,3,4,5,6,7,8\\]\n**Output:** \\[1,1,1,1,1,1,1\\]\n**Explanation:** The value 1 is missing from all the subtrees.\n\n**Constraints:**\n\n*   `n == parents.length == nums.length`\n*   `2 <= n <= 105`\n*   `0 <= parents[i] <= n - 1` for `i != 0`\n*   `parents[0] == -1`\n*   `parents` represents a valid tree.\n*   `1 <= nums[i] <= 105`\n*   Each `nums[i]` is distinct.If the subtree doesn't contain 1, then the missing value will always be 1. What data structure allows us to dynamically update the values that are currently not present?",
          "output": "from collections import defaultdict\n\ndef smallestMissingValueSubtree(parents, nums):\n    n = len(parents)\n    children = defaultdict(set)\n    for i in range(1, n):\n        children[parents[i]].add(nums[i])\n\n    ans = [0] * n\n    dfs(0, parents, nums, children, ans)\n    return ans\n\ndef dfs(node, parents, nums, children, ans):\n    for child in list(children[node]):\n        dfs(child, parents, nums, children, ans)\n        children[node].remove(child)\n        children[node].add(ans[child])\n    it = next((x for x in children[node] if x > nums[node]), nums[node] + 1)\n    ans[node] = it - 1 if it != nums[node] + 1 else it\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** 1-dimensional (1D) integer array `original`, and two integers, `m` and `n`. You are tasked with creating a 2-dimensional (2D) array with `m` rows and `n` columns using **all** the elements from `original`.\n\nThe elements from indices `0` to `n - 1` (**inclusive**) of `original` should form the first row of the constructed 2D array, the elements from indices `n` to `2 * n - 1` (**inclusive**) should form the second row of the constructed 2D array, and so on.\n\nReturn _an_ `m x n` _2D array constructed according to the above procedure, or an empty 2D array if it is impossible_.\n\n",
          "input": "**Example 1:**\n\n**Input:** original = \\[1,2,3,4\\], m = 2, n = 2\n**Output:** \\[\\[1,2\\],\\[3,4\\]\\]\n**Explanation:** The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, \\[1,2\\], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, \\[3,4\\], becomes the second row in the constructed 2D array.\n\n**Example 2:**\n\n**Input:** original = \\[1,2,3\\], m = 1, n = 3\n**Output:** \\[\\[1,2,3\\]\\]\n**Explanation:** The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array.\n\n**Example 3:**\n\n**Input:** original = \\[1,2\\], m = 1, n = 1\n**Output:** \\[\\]\n**Explanation:** There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.\n\n**Constraints:**\n\n*   `1 <= original.length <= 5 * 104`\n*   `1 <= original[i] <= 105`\n*   `1 <= m, n <= 4 * 104`When is it possible to convert original into a 2D array and when is it impossible? It is possible if and only if m * n == original.length If it is possible to convert original to a 2D array, keep an index i such that original[i] is the next element to add to the 2D array.",
          "output": "def max_alternating_sum(nums):\n    even_sum = odd_sum = 0\n    for num in nums:\n        even_sum, odd_sum = max(even_sum + num, odd_sum), even_sum - num\n    return even_sum\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of **digit** strings `nums` and a **digit** string `target`, return _the number of pairs of indices_ `(i, j)` _(where_ `i != j`_) such that the **concatenation** of_ `nums[i] + nums[j]` _equals_ `target`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[ \"777 \", \"7 \", \"77 \", \"77 \"\\], target =  \"7777 \"\n**Output:** 4\n**Explanation:** Valid pairs are:\n- (0, 1):  \"777 \" +  \"7 \"\n- (1, 0):  \"7 \" +  \"777 \"\n- (2, 3):  \"77 \" +  \"77 \"\n- (3, 2):  \"77 \" +  \"77 \"\n\n**Example 2:**\n\n**Input:** nums = \\[ \"123 \", \"4 \", \"12 \", \"34 \"\\], target =  \"1234 \"\n**Output:** 2\n**Explanation:** Valid pairs are:\n- (0, 1):  \"123 \" +  \"4 \"\n- (2, 3):  \"12 \" +  \"34 \"\n\n**Example 3:**\n\n**Input:** nums = \\[ \"1 \", \"1 \", \"1 \"\\], target =  \"11 \"\n**Output:** 6\n**Explanation:** Valid pairs are:\n- (0, 1):  \"1 \" +  \"1 \"\n- (1, 0):  \"1 \" +  \"1 \"\n- (0, 2):  \"1 \" +  \"1 \"\n- (2, 0):  \"1 \" +  \"1 \"\n- (1, 2):  \"1 \" +  \"1 \"\n- (2, 1):  \"1 \" +  \"1 \"\n\n**Constraints:**\n\n*   `2 <= nums.length <= 100`\n*   `1 <= nums[i].length <= 100`\n*   `2 <= target.length <= 100`\n*   `nums[i]` and `target` consist of digits.\n*   `nums[i]` and `target` do not have leading zeros.Try to concatenate every two different strings from the list. Count the number of pairs with concatenation equals to target.",
          "output": "from collections import defaultdict\nfrom sortedcontainers import SortedList\n\nclass MovieRentingSystem:\n\n    def __init__(self, n: int, entries: List[List[int]]):\n        self.price = defaultdict(dict)\n        self.rented = SortedList(key=lambda x: (x[0], x[1]))\n        self.available = defaultdict(SortedList)\n        for shop, movie, p in entries:\n            self.price[shop][movie] = p\n            self.available[movie].add((p, shop))\n\n    def search(self, movie: int) -> List[int]:\n        return [x[1] for x in self.available[movie][:5]]\n\n    def rent(self, shop: int, movie: int) -> None:\n        p = self.price[shop][movie]\n        self.rented.add((p, shop))\n        self.available[movie].discard((p, shop))\n\n    def drop(self, shop: int, movie: int) -> None:\n        p = self.price[shop][movie]\n        self.rented.discard((p, shop))\n        self.available[movie].add((p, shop))\n\n    def report(self) -> List[List[int]]:\n        return [[shop, movie] for p, shop, movie in self.rented]\n\n"
     },
     {
          "instruction": "Write python code for this problem: A teacher is writing a test with `n` true/false questions, with `'T'` denoting true and `'F'` denoting false. He wants to confuse the students by **maximizing** the number of **consecutive** questions with the **same** answer (multiple trues or multiple falses in a row).\n\nYou are given a string `answerKey`, where `answerKey[i]` is the original answer to the `ith` question. In addition, you are given an integer `k`, the maximum number of times you may perform the following operation:\n\n*   Change the answer key for any question to `'T'` or `'F'` (i.e., set `answerKey[i]` to `'T'` or `'F'`).\n\nReturn _the **maximum** number of consecutive_ `'T'`s or `'F'`s _in the answer key after performing the operation at most_ `k` _times_.\n\n",
          "input": "**Example 1:**\n\n**Input:** answerKey =  \"TTFF \", k = 2\n**Output:** 4\n**Explanation:** We can replace both the 'F's with 'T's to make answerKey =  \"TTTT \".\nThere are four consecutive 'T's.\n\n**Example 2:**\n\n**Input:** answerKey =  \"TFFT \", k = 1\n**Output:** 3\n**Explanation:** We can replace the first 'T' with an 'F' to make answerKey =  \"FFFT \".\nAlternatively, we can replace the second 'T' with an 'F' to make answerKey =  \"TFFF \".\nIn both cases, there are three consecutive 'F's.\n\n**Example 3:**\n\n**Input:** answerKey =  \"TTFTTFTT \", k = 1\n**Output:** 5\n**Explanation:** We can replace the first 'F' to make answerKey =  \"TTTTTFTT \"\nAlternatively, we can replace the second 'F' to make answerKey =  \"TTFTTTTT \". \nIn both cases, there are five consecutive 'T's.\n\n**Constraints:**\n\n*   `n == answerKey.length`\n*   `1 <= n <= 5 * 104`\n*   `answerKey[i]` is either `'T'` or `'F'`\n*   `1 <= k <= n`Can we use the maximum length at the previous position to help us find the answer for the current position? Can we use binary search to find the maximum consecutive same answer at every position?",
          "output": "def max_consecutive_answers(answer_key: str, k: int) -> int:\n    max_len, left, T_cnt, F_cnt = 0, 0, 0, 0\n\n    for right, c in enumerate(answer_key):\n        if c == 'T':\n            T_cnt += 1\n        else:\n            F_cnt += 1\n\n        if min(T_cnt, F_cnt) > k:\n            if answer_key[left] == 'T':\n                T_cnt -= 1\n            else:\n                F_cnt -= 1\n            left += 1\n        else:\n            max_len = max(max_len, T_cnt + F_cnt)\n\n    return max_len\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` of length `n`. The number of ways to **partition** `nums` is the number of `pivot` indices that satisfy both conditions:\n\n*   `1 <= pivot < n`\n*   `nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]`\n\nYou are also given an integer `k`. You can choose to change the value of **one** element of `nums` to `k`, or to leave the array **unchanged**.\n\nReturn _the **maximum** possible number of ways to **partition**_ `nums` _to satisfy both conditions after changing **at most** one element_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,-1,2\\], k = 3\n**Output:** 1\n**Explanation:** One optimal approach is to change nums\\[0\\] to k. The array becomes \\[**3**,-1,2\\].\nThere is one way to partition the array:\n- For pivot = 2, we have the partition \\[3,-1 | 2\\]: 3 + -1 == 2.\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,0\\], k = 1\n**Output:** 2\n**Explanation:** The optimal approach is to leave the array unchanged.\nThere are two ways to partition the array:\n- For pivot = 1, we have the partition \\[0 | 0,0\\]: 0 == 0 + 0.\n- For pivot = 2, we have the partition \\[0,0 | 0\\]: 0 + 0 == 0.\n\n**Example 3:**\n\n**Input:** nums = \\[22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14\\], k = -33\n**Output:** 4\n**Explanation:** One optimal approach is to change nums\\[2\\] to k. The array becomes \\[22,4,**\\-33**,-20,-15,15,-16,7,19,-10,0,-13,-14\\].\nThere are four ways to partition the array.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `2 <= n <= 105`\n*   `-105 <= k, nums[i] <= 105`A pivot point splits the array into equal prefix and suffix. If no change is made to the array, the goal is to find the number of pivot p such that prefix[p-1] == suffix[p]. Consider how prefix and suffix will change when we change a number nums[i] to k. When sweeping through each element, can you find the total number of pivots where the difference of prefix and suffix happens to equal to the changes of k-nums[i].",
          "output": "def make_equal(words):\n    chars = set()\n    total_chars = 0\n    for word in words:\n        total_chars += len(word)\n        for c in word:\n            chars.add(c)\n    return total_chars % len(chars) == 0\n"
     },
     {
          "instruction": "Write python code for this problem: There is a programming language with only **four** operations and **one** variable `X`:\n\n*   `++X` and `X++` **increments** the value of the variable `X` by `1`.\n*   `--X` and `X--` **decrements** the value of the variable `X` by `1`.\n\nInitially, the value of `X` is `0`.\n\nGiven an array of strings `operations` containing a list of operations, return _the **final** value of_ `X` _after performing all the operations_.\n\n",
          "input": "**Example 1:**\n\n**Input:** operations = \\[ \"--X \", \"X++ \", \"X++ \"\\]\n**Output:** 1\n**Explanation:** The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1.\n\n**Example 2:**\n\n**Input:** operations = \\[ \"++X \", \"++X \", \"X++ \"\\]\n**Output:** 3\n**Explanation:** The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.\n\n**Example 3:**\n\n**Input:** operations = \\[ \"X++ \", \"++X \", \"--X \", \"X-- \"\\]\n**Output:** 0\n**Explanation:** The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0.\n\n**Constraints:**\n\n*   `1 <= operations.length <= 100`\n*   `operations[i]` will be either `\"++X \"`, `\"X++ \"`, `\"--X \"`, or `\"X-- \"`.There are only two operations to keep track of. Use a variable to store the value after each operation.",
          "output": "def max_value(n: str, x: int) -> str:\n    is_negative = n[0] == '-'\n    pos = 1 if is_negative else 0\n\n    while pos < len(n):\n        if (is_negative and int(n[pos]) > x) or (not is_negative and int(n[pos]) < x):\n            break\n        pos += 1\n\n    return n[:pos] + str(x) + n[pos:]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`. For each index `i` (`1 <= i <= nums.length - 2`) the **beauty** of `nums[i]` equals:\n\n*   `2`, if `nums[j] < nums[i] < nums[k]`, for **all** `0 <= j < i` and for **all** `i < k <= nums.length - 1`.\n*   `1`, if `nums[i - 1] < nums[i] < nums[i + 1]`, and the previous condition is not satisfied.\n*   `0`, if none of the previous conditions holds.\n\nReturn _the **sum of beauty** of all_ `nums[i]` _where_ `1 <= i <= nums.length - 2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 2\n**Explanation:** For each index i in the range 1 <= i <= 1:\n- The beauty of nums\\[1\\] equals 2.\n\n**Example 2:**\n\n**Input:** nums = \\[2,4,6,4\\]\n**Output:** 1\n**Explanation:** For each index i in the range 1 <= i <= 2:\n- The beauty of nums\\[1\\] equals 1.\n- The beauty of nums\\[2\\] equals 0.\n\n**Example 3:**\n\n**Input:** nums = \\[3,2,1\\]\n**Output:** 0\n**Explanation:** For each index i in the range 1 <= i <= 1:\n- The beauty of nums\\[1\\] equals 0.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`Use suffix/prefix arrays. prefix[i] records the maximum value in range (0, i - 1) inclusive. suffix[i] records the minimum value in range (i + 1, n - 1) inclusive.",
          "output": "from queue import PriorityQueue\n\ndef assignTasks(servers, tasks):\n    n, m = len(servers), len(tasks)\n    ans = [0] * m\n    freeServers = PriorityQueue()\n\n    for i in range(n):\n        freeServers.put((servers[i], i))\n\n    busyServers = PriorityQueue()\n    currentTask = 0\n\n    while currentTask < m:\n        while not busyServers.empty() and busyServers.queue[0][0] <= currentTask:\n            _, idx = busyServers.get()\n            freeServers.put((servers[idx], idx))\n\n        while not freeServers.empty() and currentTask < m:\n            _, idx = freeServers.get()\n            ans[currentTask] = idx\n            busyServers.put((currentTask + tasks[currentTask], idx))\n            currentTask += 1\n            \n        if freeServers.empty():\n            currentTask = busyServers.queue[0][0]\n    \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a stream of points on the X-Y plane. Design an algorithm that:\n\n*   **Adds** new points from the stream into a data structure. **Duplicate** points are allowed and should be treated as different points.\n*   Given a query point, **counts** the number of ways to choose three points from the data structure such that the three points and the query point form an **axis-aligned square** with **positive area**.\n\nAn **axis-aligned square** is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.\n\nImplement the `DetectSquares` class:\n\n*   `DetectSquares()` Initializes the object with an empty data structure.\n*   `void add(int[] point)` Adds a new point `point = [x, y]` to the data structure.\n*   `int count(int[] point)` Counts the number of ways to form **axis-aligned squares** with point `point = [x, y]` as described above.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"DetectSquares \",  \"add \",  \"add \",  \"add \",  \"count \",  \"count \",  \"add \",  \"count \"\\]\n\\[\\[\\], \\[\\[3, 10\\]\\], \\[\\[11, 2\\]\\], \\[\\[3, 2\\]\\], \\[\\[11, 10\\]\\], \\[\\[14, 8\\]\\], \\[\\[11, 2\\]\\], \\[\\[11, 10\\]\\]\\]\n**Output**\n\\[null, null, null, null, 1, 0, null, 2\\]\n\n**Explanation**\nDetectSquares detectSquares = new DetectSquares();\ndetectSquares.add(\\[3, 10\\]);\ndetectSquares.add(\\[11, 2\\]);\ndetectSquares.add(\\[3, 2\\]);\ndetectSquares.count(\\[11, 10\\]); // return 1. You can choose:\n                               //   - The first, second, and third points\ndetectSquares.count(\\[14, 8\\]);  // return 0. The query point cannot form a square with any points in the data structure.\ndetectSquares.add(\\[11, 2\\]);    // Adding duplicate points is allowed.\ndetectSquares.count(\\[11, 10\\]); // return 2. You can choose:\n                               //   - The first, second, and third points\n                               //   - The first, third, and fourth points\n\n**Constraints:**\n\n*   `point.length == 2`\n*   `0 <= x, y <= 1000`\n*   At most `3000` calls **in total** will be made to `add` and `count`.Maintain the frequency of all the points in a hash map. Traverse the hash map and if any point has the same y-coordinate as the query point, consider this point and the query point to form one of the horizontal lines of the square.",
          "output": "from math import ceil\n\ndef min_skips(dist, speed, hours_before):\n    n = len(dist)\n    dp = [[1e6] * (n + 1) for _ in range(n + 1)]\n    \n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        dp[i][0] = ceil(dp[i - 1][0] + dist[i - 1] / speed)\n    \n    for i in range(1, n + 1):\n        for skip in range(1, i + 1):\n            dp[i][skip] = min(dp[i][skip], dp[i - 1][skip - 1] + dist[i - 1] / speed)\n            dp[i][skip] = min(dp[i][skip], ceil(dp[i - 1][skip] + dist[i - 1] / speed))\n    \n    for skip in range(n + 1):\n        if dp[n][skip] <= hours_before:\n            return skip\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` of length `n`, and an integer `k`. You are tasked to find the **longest subsequence repeated** `k` times in string `s`.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\nA subsequence `seq` is **repeated** `k` times in the string `s` if `seq * k` is a subsequence of `s`, where `seq * k` represents a string constructed by concatenating `seq` `k` times.\n\n*   For example, `\"bba \"` is repeated `2` times in the string `\"bababcba \"`, because the string `\"bbabba \"`, constructed by concatenating `\"bba \"` `2` times, is a subsequence of the string `\"**b**a**bab**c**ba** \"`.\n\nReturn _the **longest subsequence repeated**_ `k` _times in string_ `s`_. If multiple such subsequences are found, return the **lexicographically largest** one. If there is no such subsequence, return an **empty** string_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"letsleetcode \", k = 2\n**Output:**  \"let \"\n**Explanation:** There are two longest subsequences repeated 2 times:  \"let \" and  \"ete \".\n \"let \" is the lexicographically largest one.\n\n**Example 2:**\n\n**Input:** s =  \"bb \", k = 2\n**Output:**  \"b \"\n**Explanation:** The longest subsequence repeated 2 times is  \"b \".\n\n**Example 3:**\n\n**Input:** s =  \"ab \", k = 2\n**Output:**  \" \"\n**Explanation:** There is no subsequence repeated 2 times. Empty string is returned.\n\n**Constraints:**\n\n*   `n == s.length`\n*   `2 <= n, k <= 2000`\n*   `2 <= n < k * 8`\n*   `s` consists of lowercase English letters.The length of the longest subsequence does not exceed n/k. Do you know why? Find the characters that could be included in the potential answer. A character occurring more than or equal to k times can be used in the answer up to (count of the character / k) times. Try all possible candidates in reverse lexicographic order, and check the string for the subsequence condition.",
          "output": "def longestSubsequenceRepeatedK(s, k):\n    count = [0] * 26\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    seq = \"\".join(chr(i + ord('a')) * (count[i] // k) for i in range(26) if count[i] >= k)\n\n    def dp(i, j):\n        if (i, j) in memo:\n            return memo[(i, j)]\n        if i >= len(seq) or j >= len(seq):\n            return 0\n        if seq[i] == seq[j]:\n            res = 1 + dp(i + 1, j + 1)\n        else:\n            res = max(dp(i + 1, j), dp(i, j + 1))\n        memo[(i, j)] = res\n        return res\n\n    memo = {}\n    res = []\n    i, j = 0, 0\n    while j < len(seq) and len(res) < len(seq) // k:\n        if not res or seq[j] > res[-1]:\n            if dp(i, j) >= (len(seq) // k - len(res)) * 2:\n                res.append(seq[j])\n                i = j + 1\n        j += 1\n\n    return \"\".join(res)\n"
     },
     {
          "instruction": "Write python code for this problem: Given three integers, `k`, `digit1`, and `digit2`, you want to find the **smallest** integer that is:\n\n*   **Larger** than `k`,\n*   A **multiple** of `k`, and\n*   Comprised of **only** the digits `digit1` and/or `digit2`.\n\nReturn _the **smallest** such integer. If no such integer exists or the integer exceeds the limit of a signed 32-bit integer (_`231 - 1`_), return_ `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 2, digit1 = 0, digit2 = 2\n**Output:** 20\n**Explanation:**\n20 is the first integer larger than 2, a multiple of 2, and comprised of only the digits 0 and/or 2.\n\n**Example 2:**\n\n**Input:** k = 3, digit1 = 4, digit2 = 2\n**Output:** 24\n**Explanation:**\n24 is the first integer larger than 3, a multiple of 3, and comprised of only the digits 4 and/or 2.\n\n**Example 3:**\n\n**Input:** k = 2, digit1 = 0, digit2 = 0\n**Output:** -1\n**Explanation:**\nNo integer meets the requirements so return -1.\n\n**Constraints:**\n\n*   `1 <= k <= 1000`\n*   `0 <= digit1 <= 9`\n*   `0 <= digit2 <= 9`Could you generate all the different numbers comprised of only digit1 and digit2 with the constraints? Going from least to greatest, check if the number you generated is greater than k and a multiple of k.",
          "output": "def checkZeroOnes(s: str) -> bool:\n    longest_zero = longest_one = current_zero = current_one = 0\n    \n    for c in s:\n        if c == '0':\n            current_zero += 1\n            longest_zero = max(longest_zero, current_zero)\n            current_one = 0\n        else:\n            current_one += 1\n            longest_one = max(longest_one, current_one)\n            current_zero = 0\n            \n    return longest_one > longest_zero\n"
     },
     {
          "instruction": "Write python code for this problem: A perfectly straight street is represented by a number line. The street has building(s) on it and is represented by a 2D integer array `buildings`, where `buildings[i] = [starti, endi, heighti]`. This means that there is a building with `heighti` in the **half-closed segment** `[starti, endi)`.\n\nYou want to **describe** the heights of the buildings on the street with the **minimum** number of non-overlapping **segments**. The street can be represented by the 2D integer array `street` where `street[j] = [leftj, rightj, averagej]` describes a **half-closed segment** `[leftj, rightj)` of the road where the **average** heights of the buildings in the **segment** is `averagej`.\n\n*   For example, if `buildings = [[1,5,2],[3,10,4]],` the street could be represented by `street = [[1,3,2],[3,5,3],[5,10,4]]` because:\n    *   From 1 to 3, there is only the first building with an average height of `2 / 1 = 2`.\n    *   From 3 to 5, both the first and the second building are there with an average height of `(2+4) / 2 = 3`.\n    *   From 5 to 10, there is only the second building with an average height of `4 / 1 = 4`.\n\nGiven `buildings`, return _the 2D integer array_ `street` _as described above (**excluding** any areas of the street where there are no buldings). You may return the array in **any order**_.\n\nThe **average** of `n` elements is the **sum** of the `n` elements divided (**integer division**) by `n`.\n\nA **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** buildings = \\[\\[1,4,2\\],\\[3,9,4\\]\\]\n**Output:** \\[\\[1,3,2\\],\\[3,4,3\\],\\[4,9,4\\]\\]\n**Explanation:**\nFrom 1 to 3, there is only the first building with an average height of 2 / 1 = 2.\nFrom 3 to 4, both the first and the second building are there with an average height of (2+4) / 2 = 3.\nFrom 4 to 9, there is only the second building with an average height of 4 / 1 = 4.\n\n**Example 2:**\n\n**Input:** buildings = \\[\\[1,3,2\\],\\[2,5,3\\],\\[2,8,3\\]\\]\n**Output:** \\[\\[1,3,2\\],\\[3,8,3\\]\\]\n**Explanation:**\nFrom 1 to 2, there is only the first building with an average height of 2 / 1 = 2.\nFrom 2 to 3, all three buildings are there with an average height of (2+3+3) / 3 = 2.\nFrom 3 to 5, both the second and the third building are there with an average height of (3+3) / 2 = 3.\nFrom 5 to 8, there is only the last building with an average height of 3 / 1 = 3.\nThe average height from 1 to 3 is the same so we can group them into one segment.\nThe average height from 3 to 8 is the same so we can group them into one segment.\n\n**Example 3:**\n\n**Input:** buildings = \\[\\[1,2,1\\],\\[5,6,1\\]\\]\n**Output:** \\[\\[1,2,1\\],\\[5,6,1\\]\\]\n**Explanation:**\nFrom 1 to 2, there is only the first building with an average height of 1 / 1 = 1.\nFrom 2 to 5, there are no buildings, so it is not included in the output.\nFrom 5 to 6, there is only the second building with an average height of 1 / 1 = 1.\nWe cannot group the segments together because an empty space with no buildings seperates the segments.\n\n**Constraints:**\n\n*   `1 <= buildings.length <= 105`\n*   `buildings[i].length == 3`\n*   `0 <= starti < endi <= 108`\n*   `1 <= heighti <= 105`Try sorting the start and end points of each building. The naive solution is to go through each position on the street and keep track of the sum of all the buildings at that position and the number of buildings at that position. How could we optimize that solution to pass? We don't need to go through every position, just the ones where a building starts or a building ends.",
          "output": "def findRotation(mat, target):\n    for _ in range(4):\n        if mat == target:\n            return True\n        n = len(mat)\n        for r in range((n + 1) // 2):\n            for c in range(n // 2):\n                mat[r][c], mat[n - 1 - c][r], mat[n - 1 - r][n - 1 - c], mat[c][n - 1 - r] = mat[n - 1 - c][r], mat[n - 1 - r][n - 1 - c], mat[c][n - 1 - r], mat[r][c]\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **0-indexed** integer array `nums` of size `n`, find the **maximum difference** between `nums[i]` and `nums[j]` (i.e., `nums[j] - nums[i]`), such that `0 <= i < j < n` and `nums[i] < nums[j]`.\n\nReturn _the **maximum difference**._ If no such `i` and `j` exists, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[7,**1**,**5**,4\\]\n**Output:** 4\n**Explanation:**\nThe maximum difference occurs with i = 1 and j = 2, nums\\[j\\] - nums\\[i\\] = 5 - 1 = 4.\nNote that with i = 1 and j = 0, the difference nums\\[j\\] - nums\\[i\\] = 7 - 1 = 6, but i > j, so it is not valid.\n\n**Example 2:**\n\n**Input:** nums = \\[9,4,3,2\\]\n**Output:** -1\n**Explanation:**\nThere is no i and j such that i < j and nums\\[i\\] < nums\\[j\\].\n\n**Example 3:**\n\n**Input:** nums = \\[**1**,5,2,**10**\\]\n**Output:** 9\n**Explanation:**\nThe maximum difference occurs with i = 0 and j = 3, nums\\[j\\] - nums\\[i\\] = 10 - 1 = 9.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `2 <= n <= 1000`\n*   `1 <= nums[i] <= 109`Could you keep track of the minimum element visited while traversing? We have a potential candidate for the answer if the prefix min is lesser than nums[i].",
          "output": "def min_steps_to_equal_elements(nums):\n    min_elem = min(nums)\n    steps = 0\n    for num in nums:\n        steps += (num - min_elem)\n    return steps\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** 2D array `grid` of size `2 x n`, where `grid[r][c]` represents the number of points at position `(r, c)` on the matrix. Two robots are playing a game on this matrix.\n\nBoth robots initially start at `(0, 0)` and want to reach `(1, n-1)`. Each robot may only move to the **right** (`(r, c)` to `(r, c + 1)`) or **down** (`(r, c)` to `(r + 1, c)`).\n\nAt the start of the game, the **first** robot moves from `(0, 0)` to `(1, n-1)`, collecting all the points from the cells on its path. For all cells `(r, c)` traversed on the path, `grid[r][c]` is set to `0`. Then, the **second** robot moves from `(0, 0)` to `(1, n-1)`, collecting the points on its path. Note that their paths may intersect with one another.\n\nThe **first** robot wants to **minimize** the number of points collected by the **second** robot. In contrast, the **second** robot wants to **maximize** the number of points it collects. If both robots play **optimally**, return _the **number of points** collected by the **second** robot._\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[2,5,4\\],\\[1,5,1\\]\\]\n**Output:** 4\n**Explanation:** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 0 + 4 + 0 = 4 points.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[3,3,1\\],\\[8,5,2\\]\\]\n**Output:** 4\n**Explanation:** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 3 + 1 + 0 = 4 points.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,3,1,15\\],\\[1,3,3,1\\]\\]\n**Output:** 7\n**Explanation:** The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.\n\n**Constraints:**\n\n*   `grid.length == 2`\n*   `n == grid[r].length`\n*   `1 <= n <= 5 * 104`\n*   `1 <= grid[r][c] <= 105`There are n choices for when the first robot moves to the second row. Can we use prefix sums to help solve this problem?",
          "output": "def min_operations(s):\n    cnt = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            cnt += 1\n    return cnt\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` matrix `board`, representing the **current** state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), `' '` to represent any **empty** cells, and `'#'` to represent any **blocked** cells.\n\nA word can be placed **horizontally** (left to right **or** right to left) or **vertically** (top to bottom **or** bottom to top) in the board if:\n\n*   It does not occupy a cell containing the character `'#'`.\n*   The cell each letter is placed in must either be `' '` (empty) or **match** the letter already on the `board`.\n*   There must not be any empty cells `' '` or other lowercase letters **directly left or right** of the word if the word was placed **horizontally**.\n*   There must not be any empty cells `' '` or other lowercase letters **directly above or below** the word if the word was placed **vertically**.\n\nGiven a string `word`, return `true` _if_ `word` _can be placed in_ `board`_, or_ `false` _**otherwise**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** board = \\[\\[ \"# \",  \"  \",  \"# \"\\], \\[ \"  \",  \"  \",  \"# \"\\], \\[ \"# \",  \"c \",  \"  \"\\]\\], word =  \"abc \"\n**Output:** true\n**Explanation:** The word  \"abc \" can be placed as shown above (top to bottom).\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \"  \",  \"# \",  \"a \"\\], \\[ \"  \",  \"# \",  \"c \"\\], \\[ \"  \",  \"# \",  \"a \"\\]\\], word =  \"ac \"\n**Output:** false\n**Explanation:** It is impossible to place the word because there will always be a space/letter above or below it.\n\n**Example 3:**\n\n**Input:** board = \\[\\[ \"# \",  \"  \",  \"# \"\\], \\[ \"  \",  \"  \",  \"# \"\\], \\[ \"# \",  \"  \",  \"c \"\\]\\], word =  \"ca \"\n**Output:** true\n**Explanation:** The word  \"ca \" can be placed as shown above (right to left). \n\n**Constraints:**\n\n*   `m == board.length`\n*   `n == board[i].length`\n*   `1 <= m * n <= 2 * 105`\n*   `board[i][j]` will be `' '`, `'#'`, or a lowercase English letter.\n*   `1 <= word.length <= max(m, n)`\n*   `word` will contain only lowercase English letters.Check all possible placements for the word. There is a limited number of places where a word can start.",
          "output": "from bisect import bisect_right\n\nclass Solution:\n    def minWastedSpace(self, packages, boxes) -> int:\n        MOD = 10**9 + 7\n        packages.sort()\n        total_package_size = sum(packages)\n        min_wasted_space = float('inf')\n\n        for box_sizes in boxes:\n            box_sizes.sort()\n            if box_sizes[-1] < packages[-1]:\n                continue\n            wasted_space = 0\n            package_idx = 0\n            for box_size in box_sizes:\n                package_idx = bisect_right(packages, box_size, package_idx)\n                wasted_space += box_size - packages[package_idx - 1]\n            min_wasted_space = min(min_wasted_space, wasted_space)\n\n        return -1 if min_wasted_space == float('inf') else (total_package_size + min_wasted_space) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` that contains digits `0-9`, addition symbols `'+'`, and multiplication symbols `'*'` **only**, representing a **valid** math expression of **single digit numbers** (e.g., `3+5*2`). This expression was given to `n` elementary school students. The students were instructed to get the answer of the expression by following this **order of operations**:\n\n1.  Compute **multiplication**, reading from **left to right**; Then,\n2.  Compute **addition**, reading from **left to right**.\n\nYou are given an integer array `answers` of length `n`, which are the submitted answers of the students in no particular order. You are asked to grade the `answers`, by following these **rules**:\n\n*   If an answer **equals** the correct answer of the expression, this student will be rewarded `5` points;\n*   Otherwise, if the answer **could be interpreted** as if the student applied the operators **in the wrong order** but had **correct arithmetic**, this student will be rewarded `2` points;\n*   Otherwise, this student will be rewarded `0` points.\n\nReturn _the sum of the points of the students_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"7+3\\*1\\*2 \", answers = \\[20,13,42\\]\n**Output:** 7\n**Explanation:** As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: \\[20,**13**,42\\]\nA student might have applied the operators in this wrong order: ((7+3)\\*1)\\*2 = 20. Therefore one student is rewarded 2 points: \\[**20**,13,42\\]\nThe points for the students are: \\[2,5,0\\]. The sum of the points is 2+5+0=7.\n\n**Example 2:**\n\n**Input:** s =  \"3+5\\*2 \", answers = \\[13,0,10,13,13,16,16\\]\n**Output:** 19\n**Explanation:** The correct answer of the expression is 13, therefore three students are rewarded 5 points each: \\[**13**,0,10,**13**,**13**,16,16\\]\nA student might have applied the operators in this wrong order: ((3+5)\\*2 = 16. Therefore two students are rewarded 2 points: \\[13,0,10,13,13,**16**,**16**\\]\nThe points for the students are: \\[5,0,0,5,5,2,2\\]. The sum of the points is 5+0+0+5+5+2+2=19.\n\n**Example 3:**\n\n**Input:** s =  \"6+0\\*1 \", answers = \\[12,9,6,4,8,6\\]\n**Output:** 10\n**Explanation:** The correct answer of the expression is 6.\nIf a student had incorrectly done (6+0)\\*1, the answer would also be 6.\nBy the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.\nThe points for the students are: \\[0,0,5,0,0,5\\]. The sum of the points is 10.\n\n**Constraints:**\n\n*   `3 <= s.length <= 31`\n*   `s` represents a valid expression that contains only digits `0-9`, `'+'`, and `'*'` only.\n*   All the integer operands in the expression are in the **inclusive** range `[0, 9]`.\n*   `1 <=` The count of all operators (`'+'` and `'*'`) in the math expression `<= 15`\n*   Test data are generated such that the correct answer of the expression is in the range of `[0, 1000]`.\n*   `n == answers.length`\n*   `1 <= n <= 104`\n*   `0 <= answers[i] <= 1000`The number of operators in the equation is less. Could you find the right answer then generate all possible answers using different orders of operations? Divide the equation into blocks separated by the operators, and use memoization on the results of blocks for optimization. Use set and the max limit of the answer for further optimization.",
          "output": "def sumOfPoints(s: str, answers: List[int]) -> int:\n    correct = 0\n    mul = 1\n    add = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            num = int(s[i])\n            mul *= num\n            if i == len(s) - 1 or s[i + 1] == '+':\n                add += mul\n                mul = 1\n    correct = add\n\n    wrongOrder = int(s[0])\n    for i in range(2, len(s), 2):\n        if s[i - 1] == '+':\n            wrongOrder += int(s[i])\n        else:\n            wrongOrder *= int(s[i])\n\n    return sum(5 * (ans == correct) + 2 * (ans == wrongOrder) for ans in answers)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` seats and `n` students in a room. You are given an array `seats` of length `n`, where `seats[i]` is the position of the `ith` seat. You are also given the array `students` of length `n`, where `students[j]` is the position of the `jth` student.\n\nYou may perform the following move any number of times:\n\n*   Increase or decrease the position of the `ith` student by `1` (i.e., moving the `ith` student from position `x` to `x + 1` or `x - 1`)\n\nReturn _the **minimum number of moves** required to move each student to a seat_ _such that no two students are in the same seat._\n\nNote that there may be **multiple** seats or students in the **same** position at the beginning.\n\n",
          "input": "**Example 1:**\n\n**Input:** seats = \\[3,1,5\\], students = \\[2,7,4\\]\n**Output:** 4\n**Explanation:** The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.\n\n**Example 2:**\n\n**Input:** seats = \\[4,1,5,9\\], students = \\[1,3,2,6\\]\n**Output:** 7\n**Explanation:** The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.\n\n**Example 3:**\n\n**Input:** seats = \\[2,2,6,6\\], students = \\[1,3,2,6\\]\n**Output:** 4\n**Explanation:** Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.\n\n**Constraints:**\n\n*   `n == seats.length == students.length`\n*   `1 <= n <= 100`\n*   `1 <= seats[i], students[j] <= 100`Can we sort the arrays to help solve the problem? Can we greedily match each student to a seat? The smallest positioned student will go to the smallest positioned chair, and then the next smallest positioned student will go to the next smallest positioned chair, and so on.",
          "output": "def count_square_triples(n):\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(a, n + 1):\n            c = int((a * a + b * b)**0.5)\n            if c * c == a * a + b * b and c <= n:\n                count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` pieces arranged in a line, and each piece is colored either by `'A'` or by `'B'`. You are given a string `colors` of length `n` where `colors[i]` is the color of the `ith` piece.\n\nAlice and Bob are playing a game where they take **alternating turns** removing pieces from the line. In this game, Alice moves **first**.\n\n*   Alice is only allowed to remove a piece colored `'A'` if **both its neighbors** are also colored `'A'`. She is **not allowed** to remove pieces that are colored `'B'`.\n*   Bob is only allowed to remove a piece colored `'B'` if **both its neighbors** are also colored `'B'`. He is **not allowed** to remove pieces that are colored `'A'`.\n*   Alice and Bob **cannot** remove pieces from the edge of the line.\n*   If a player cannot make a move on their turn, that player **loses** and the other player **wins**.\n\nAssuming Alice and Bob play optimally, return `true` _if Alice wins, or return_ `false` _if Bob wins_.\n\n",
          "input": "**Example 1:**\n\n**Input:** colors =  \"AAABABB \"\n**Output:** true\n**Explanation:**\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\n\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true.\n\n**Example 2:**\n\n**Input:** colors =  \"AA \"\n**Output:** false\n**Explanation:**\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.\n\n**Example 3:**\n\n**Input:** colors =  \"ABBBBBBBAAA \"\n**Output:** false\n**Explanation:**\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\n\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\n\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false.\n\n**Constraints:**\n\n*   `1 <= colors.length <= 105`\n*   `colors` consists of only the letters `'A'` and `'B'`Does the number of moves a player can make depend on what the other player does? No How many moves can Alice make if colors == \"AAAAAA\" If a group of n consecutive pieces has the same color, the player can take n - 2 of those pieces if n is greater than or equal to 3",
          "output": "from collections import deque\n\ndef nearest_exit(maze, entrance):\n    m, n = len(maze), len(maze[0])\n    directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n    q = deque()\n    maze[entrance[0]][entrance[1]] = '+'\n    q.append((entrance[0], entrance[1]))\n    steps = 0\n\n    while q:\n        size = len(q)\n        for _ in range(size):\n            x, y = q.popleft()\n            if (x == 0 or x == m - 1 or y == 0 or y == n - 1) and (x != entrance[0] or y != entrance[1]):\n                return steps\n\n            for dir in directions:\n                xx, yy = x + dir[0], y + dir[1]\n                if 0 <= xx < m and 0 <= yy < n and maze[xx][yy] == '.':\n                    maze[xx][yy] = '+'\n                    q.append((xx, yy))\n        steps += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given two **sorted 0-indexed** integer arrays `nums1` and `nums2` as well as an integer `k`, return _the_ `kth` _(**1-based**) smallest product of_ `nums1[i] * nums2[j]` _where_ `0 <= i < nums1.length` _and_ `0 <= j < nums2.length`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[2,5\\], nums2 = \\[3,4\\], k = 2\n**Output:** 8\n**Explanation:** The 2 smallest products are:\n- nums1\\[0\\] \\* nums2\\[0\\] = 2 \\* 3 = 6\n- nums1\\[0\\] \\* nums2\\[1\\] = 2 \\* 4 = 8\nThe 2nd smallest product is 8.\n\n**Example 2:**\n\n**Input:** nums1 = \\[-4,-2,0,3\\], nums2 = \\[2,4\\], k = 6\n**Output:** 0\n**Explanation:** The 6 smallest products are:\n- nums1\\[0\\] \\* nums2\\[1\\] = (-4) \\* 4 = -16\n- nums1\\[0\\] \\* nums2\\[0\\] = (-4) \\* 2 = -8\n- nums1\\[1\\] \\* nums2\\[1\\] = (-2) \\* 4 = -8\n- nums1\\[1\\] \\* nums2\\[0\\] = (-2) \\* 2 = -4\n- nums1\\[2\\] \\* nums2\\[0\\] = 0 \\* 2 = 0\n- nums1\\[2\\] \\* nums2\\[1\\] = 0 \\* 4 = 0\nThe 6th smallest product is 0.\n\n**Example 3:**\n\n**Input:** nums1 = \\[-2,-1,0,1,2\\], nums2 = \\[-3,-1,2,4,5\\], k = 3\n**Output:** -6\n**Explanation:** The 3 smallest products are:\n- nums1\\[0\\] \\* nums2\\[4\\] = (-2) \\* 5 = -10\n- nums1\\[0\\] \\* nums2\\[3\\] = (-2) \\* 4 = -8\n- nums1\\[4\\] \\* nums2\\[0\\] = 2 \\* (-3) = -6\nThe 3rd smallest product is -6.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 5 * 104`\n*   `-105 <= nums1[i], nums2[j] <= 105`\n*   `1 <= k <= nums1.length * nums2.length`\n*   `nums1` and `nums2` are sorted.Can we split this problem into four cases depending on the sign of the numbers? Can we binary search the value?",
          "output": "import heapq\nfrom collections import defaultdict\n\ndef minCost(maxTime, edges, passingFees):\n    n = len(passingFees)\n    graph = defaultdict(list)\n    for x, y, time in edges:\n        graph[x].append((y, time))\n        graph[y].append((x, time))\n\n    dp = [[float('inf')] * (maxTime + 1) for _ in range(n)]\n    dp[0][0] = passingFees[0]\n\n    pq = [(0, 0, passingFees[0])]\n    while pq:\n        time, city, cost = heapq.heappop(pq)\n        if city == n - 1:\n            return cost\n\n        for neighbor, t in graph[city]:\n            next_time = time + t\n            if next_time > maxTime:\n                continue\n\n            new_cost = cost + passingFees[neighbor]\n            if new_cost < dp[neighbor][next_time]:\n                dp[neighbor][next_time] = new_cost\n                heapq.heappush(pq, (next_time, neighbor, new_cost))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: There is a network of `n` servers, labeled from `0` to `n - 1`. You are given a 2D integer array `edges`, where `edges[i] = [ui, vi]` indicates there is a message channel between servers `ui` and `vi`, and they can pass **any** number of messages to **each other** directly in **one** second. You are also given a **0-indexed** integer array `patience` of length `n`.\n\nAll servers are **connected**, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.\n\nThe server labeled `0` is the **master** server. The rest are **data** servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers **optimally**, so every message takes the **least amount of time** to arrive at the master server. The master server will process all newly arrived messages **instantly** and send a reply to the originating server via the **reversed path** the message had gone through.\n\nAt the beginning of second `0`, each data server sends its message to be processed. Starting from second `1`, at the **beginning** of **every** second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:\n\n*   If it has not, it will **resend** the message periodically. The data server `i` will resend the message every `patience[i]` second(s), i.e., the data server `i` will resend the message if `patience[i]` second(s) have **elapsed** since the **last** time the message was sent from this server.\n*   Otherwise, **no more resending** will occur from this server.\n\nThe network becomes **idle** when there are **no** messages passing between servers or arriving at servers.\n\nReturn _the **earliest second** starting from which the network becomes **idle**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** edges = \\[\\[0,1\\],\\[1,2\\]\\], patience = \\[0,2,1\\]\n**Output:** 8\n**Explanation:**\nAt (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\n\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 < patience\\[1\\] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience\\[2\\] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\n\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\n\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle.\n\n**Example 2:**\n\n**Input:** edges = \\[\\[0,1\\],\\[0,2\\],\\[1,2\\]\\], patience = \\[0,10,10\\]\n**Output:** 3\n**Explanation:** Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle.\n\n**Constraints:**\n\n*   `n == patience.length`\n*   `2 <= n <= 105`\n*   `patience[0] == 0`\n*   `1 <= patience[i] <= 105` for `1 <= i < n`\n*   `1 <= edges.length <= min(105, n * (n - 1) / 2)`\n*   `edges[i].length == 2`\n*   `0 <= ui, vi < n`\n*   `ui != vi`\n*   There are no duplicate edges.\n*   Each server can directly or indirectly reach another server.What method can you use to find the shortest time taken for a message from a data server to reach the master server? How can you use this value and the server's patience value to determine the time at which the server sends its last message? What is the time when the last message sent from a server gets back to the server? For each data server, by the time the server receives the first returned messages, how many messages has the server sent?",
          "output": "def sumGame(num: str) -> bool:\n    n = len(num)\n    sum1, sum2, cnt1, cnt2 = 0, 0, 0, 0\n\n    for i in range(n // 2):\n        if num[i] == '?': cnt1 += 1\n        else: sum1 += int(num[i])\n\n    for i in range(n // 2, n):\n        if num[i] == '?': cnt2 += 1\n        else: sum2 += int(num[i])\n\n    return (sum1 - sum2) != ((cnt2 - cnt1) // 2) * 9\n"
     },
     {
          "instruction": "Write python code for this problem: A **Fibonacci** tree is a binary tree created using the order function `order(n)`:\n\n*   `order(0)` is the empty tree.\n*   `order(1)` is a binary tree with only **one node**.\n*   `order(n)` is a binary tree that consists of a root node with the left subtree as `order(n - 2)` and the right subtree as `order(n - 1)`.\n\nAlice and Bob are playing a game with a **Fibonacci** tree with Alice staring first. On each turn, a player selects a node and removes that node **and** its subtree. The player that is forced to delete `root` loses.\n\nGiven the integer `n`, return `true` if Alice wins the game or `false` if Bob wins, assuming both players play optimally.\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.\n\n",
          "input": "**Example 1:**  \n\n**Input:** n = 3\n**Output:** true\n**Explanation:**\nAlice takes the node 1 in the right subtree.\nBob takes either the 1 in the left subtree or the 2 in the right subtree.\nAlice takes whichever node Bob doesn't take.\nBob is forced to take the root node 3, so Bob will lose.\nReturn true because Alice wins.\n\n**Example 2:**  \n\n**Input:** n = 1\n**Output:** false\n**Explanation:**\nAlice is forced to take the root node 1, so Alice will lose.\nReturn false because Alice loses.\n\n**Example 3:**  \n\n**Input:** n = 2\n**Output:** true\n**Explanation:**\nAlice takes the node 1.\nBob is forced to take the root node 2, so Bob will lose.\nReturn true because Alice wins.\n\n**Constraints:**\n\n*   `1 <= n <= 100`How can game theory help us solve this problem? Think about the Sprague\u2013Grundy theorem and the Colon Principle The Grundy value of a node is the nim sum of the Grundy values of its children.",
          "output": "def is_covered(ranges, left, right):\n    for i in range(left, right + 1):\n        is_covered = False\n        for range_ in ranges:\n            if i >= range_[0] and i <= range_[1]:\n                is_covered = True\n                break\n        if not is_covered:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` consisting of `n` characters which are either `'X'` or `'O'`.\n\nA **move** is defined as selecting **three** **consecutive characters** of `s` and converting them to `'O'`. Note that if a move is applied to the character `'O'`, it will stay the **same**.\n\nReturn _the **minimum** number of moves required so that all the characters of_ `s` _are converted to_ `'O'`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"XXX \"\n**Output:** 1\n**Explanation:** XXX -> OOO\nWe select all the 3 characters and convert them in one move.\n\n**Example 2:**\n\n**Input:** s =  \"XXOX \"\n**Output:** 2\n**Explanation:** XXOX -> OOOX -> OOOO\nWe select the first 3 characters in the first move, and convert them to `'O'`.\nThen we select the last 3 characters and convert them so that the final string contains all `'O'`s.\n\n**Example 3:**\n\n**Input:** s =  \"OOOO \"\n**Output:** 0\n**Explanation:** There are no `'X's` in `s` to convert.\n\n**Constraints:**\n\n*   `3 <= s.length <= 1000`\n*   `s[i]` is either `'X'` or `'O'`.Find the smallest substring you need to consider at a time. Try delaying a move as long as possible.",
          "output": "def maximumRemovals(s: str, p: str, removable: List[int]) -> int:\n    low, high = 0, len(removable)\n    while low < high:\n        mid = low + (high - low + 1) // 2\n        ss = list(s)\n        for i in range(mid):\n            ss[removable[i]] = '-'\n        j, i = 0, 0\n        while i < len(ss) and j < len(p):\n            if ss[i] == p[j]:\n                j += 1\n            i += 1\n        if j == len(p):\n            low = mid\n        else:\n            high = mid - 1\n    return low\n"
     },
     {
          "instruction": "Write python code for this problem: You have observations of `n + m` **6-sided** dice rolls with each face numbered from `1` to `6`. `n` of the observations went missing, and you only have the observations of `m` rolls. Fortunately, you have also calculated the **average value** of the `n + m` rolls.\n\nYou are given an integer array `rolls` of length `m` where `rolls[i]` is the value of the `ith` observation. You are also given the two integers `mean` and `n`.\n\nReturn _an array of length_ `n` _containing the missing observations such that the **average value** of the_ `n + m` _rolls is **exactly**_ `mean`. If there are multiple valid answers, return _any of them_. If no such array exists, return _an empty array_.\n\nThe **average value** of a set of `k` numbers is the sum of the numbers divided by `k`.\n\nNote that `mean` is an integer, so the sum of the `n + m` rolls should be divisible by `n + m`.\n\n",
          "input": "**Example 1:**\n\n**Input:** rolls = \\[3,2,4,3\\], mean = 4, n = 2\n**Output:** \\[6,6\\]\n**Explanation:** The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4.\n\n**Example 2:**\n\n**Input:** rolls = \\[1,5,6\\], mean = 3, n = 4\n**Output:** \\[2,3,2,2\\]\n**Explanation:** The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3.\n\n**Example 3:**\n\n**Input:** rolls = \\[1,2,3,4\\], mean = 6, n = 4\n**Output:** \\[\\]\n**Explanation:** It is impossible for the mean to be 6 no matter what the 4 missing rolls are.\n\n**Constraints:**\n\n*   `m == rolls.length`\n*   `1 <= n, m <= 105`\n*   `1 <= rolls[i], mean <= 6`What should the sum of the n rolls be? Could you generate an array of size n such that each element is between 1 and 6?",
          "output": "def earliest_and_latest(n, first_player, second_player):\n    earliest, latest = 1, 1\n    while (first_player + second_player) != n + 1 or abs(first_player - second_player) != 1:\n        if (first_player + second_player) <= n + 1 and (first_player - 1) // 2 == (second_player - 1) // 2:\n            break\n        if (first_player + second_player) > n + 1:\n            n = (n + 1) // 2\n            first_player, second_player = (n + 1) - second_player, (n + 1) - first_player\n        else:\n            first_player = (first_player + 1) // 2\n            second_player = (second_player + 1) // 2\n        earliest += 1\n        latest += 1\n\n    return [earliest, latest]\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array `stones`, where `stones[i]` is the **value** of the `ith` stone.\n\nAlice and Bob take turns, with **Alice** starting first. On each turn, the player may remove any stone from `stones`. The player who removes a stone **loses** if the **sum** of the values of **all removed stones** is divisible by `3`. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).\n\nAssuming both players play **optimally**, return `true` _if Alice wins and_ `false` _if Bob wins_.\n\n",
          "input": "**Example 1:**\n\n**Input:** stones = \\[2,1\\]\n**Output:** true\n**Explanation:** The game will be played as follows:\n- Turn 1: Alice can remove either stone.\n- Turn 2: Bob removes the remaining stone. \nThe sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game.\n\n**Example 2:**\n\n**Input:** stones = \\[2\\]\n**Output:** false\n**Explanation:** Alice will remove the only stone, and the sum of the values on the removed stones is 2. \nSince all the stones are removed and the sum of values is not divisible by 3, Bob wins the game.\n\n**Example 3:**\n\n**Input:** stones = \\[5,1,2,4,3\\]\n**Output:** false\n**Explanation:** Bob will always win. One possible way for Bob to win is shown below:\n- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.\n- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.\n- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.\n- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.\n- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.\nAlice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game.\n\n**Constraints:**\n\n*   `1 <= stones.length <= 105`\n*   `1 <= stones[i] <= 104`There are limited outcomes given the current sum and the stones remaining. Can we greedily simulate starting with taking a stone with remainder 1 or 2 divided by 3?",
          "output": "def stoneGameIX(stones: List[int]) -> bool:\n    cnt = [0, 0, 0]\n    for s in stones:\n        cnt[s % 3] += 1\n    return (cnt[1] and cnt[2]) or (cnt[1] > cnt[2] if cnt[1] > cnt[2] + 2 else cnt[2] > cnt[1] + 1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s`, an integer `k`, a letter `letter`, and an integer `repetition`.\n\nReturn _the **lexicographically smallest** subsequence of_ `s` _of length_ `k` _that has the letter_ `letter` _appear **at least**_ `repetition` _times_. The test cases are generated so that the `letter` appears in `s` **at least** `repetition` times.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\nA string `a` is **lexicographically smaller** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leet \", k = 3, letter =  \"e \", repetition = 1\n**Output:**  \"eet \"\n**Explanation:** There are four subsequences of length 3 that have the letter 'e' appear at least 1 time:\n-  \"lee \" (from  \"**lee**t \")\n-  \"let \" (from  \"**le**e**t** \")\n-  \"let \" (from  \"**l**e**et** \")\n-  \"eet \" (from  \"l**eet** \")\nThe lexicographically smallest subsequence among them is  \"eet \".\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \", k = 4, letter =  \"e \", repetition = 2\n**Output:**  \"ecde \"\n**Explanation:**  \"ecde \" is the lexicographically smallest subsequence of length 4 that has the letter  \"e \" appear at least 2 times.\n\n**Example 3:**\n\n**Input:** s =  \"bb \", k = 2, letter =  \"b \", repetition = 2\n**Output:**  \"bb \"\n**Explanation:**  \"bb \" is the only subsequence of length 2 that has the letter  \"b \" appear at least 2 times.\n\n**Constraints:**\n\n*   `1 <= repetition <= k <= s.length <= 5 * 104`\n*   `s` consists of lowercase English letters.\n*   `letter` is a lowercase English letter, and appears in `s` at least `repetition` times.Use stack. For every character to be appended, decide how many character(s) from the stack needs to get popped based on the stack length and the count of the required character. Pop the extra characters out from the stack and return the characters in the stack (reversed).",
          "output": "def smallestSubsequence(s, k, letter, repetition):\n    n = len(s)\n    remaining = n - k\n    letter_count = 0\n\n    res = []\n    for c in s:\n        while res and res[-1] > c and remaining > 0:\n            if res[-1] == letter:\n                if letter_count > repetition:\n                    letter_count -= 1\n                    res.pop()\n                    remaining -= 1\n            else:\n                res.pop()\n                remaining -= 1\n        if len(res) < k:\n            if c == letter:\n                letter_count += 1\n            elif k - len(res) > repetition - letter_count:\n            else:\n                continue\n            res.append(c)\n\n    return ''.join(res)\n"
     },
     {
          "instruction": "Write python code for this problem: Given three integer arrays `nums1`, `nums2`, and `nums3`, return _a **distinct** array containing all the values that are present in **at least two** out of the three arrays. You may return the values in **any** order_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,1,3,2\\], nums2 = \\[2,3\\], nums3 = \\[3\\]\n**Output:** \\[3,2\\]\n**Explanation:** The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.\n\n**Example 2:**\n\n**Input:** nums1 = \\[3,1\\], nums2 = \\[2,3\\], nums3 = \\[1,2\\]\n**Output:** \\[2,3,1\\]\n**Explanation:** The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3.\n\n**Example 3:**\n\n**Input:** nums1 = \\[1,2,2\\], nums2 = \\[4,3,3\\], nums3 = \\[5\\]\n**Output:** \\[\\]\n**Explanation:** No value is present in at least two arrays.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length, nums3.length <= 100`\n*   `1 <= nums1[i], nums2[j], nums3[k] <= 100`What data structure can we use to help us quickly find whether an element belongs in an array? Can we count the frequencies of the elements in each array?",
          "output": "def largest_odd(num: str) -> str:\n    for i in range(len(num)):\n        if (int(num[i]) % 2) == 1:\n            return num[:i + 1]\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer `grid` of size `m x n` and an integer `x`. In one operation, you can **add** `x` to or **subtract** `x` from any element in the `grid`.\n\nA **uni-value grid** is a grid where all the elements of it are equal.\n\nReturn _the **minimum** number of operations to make the grid **uni-value**_. If it is not possible, return `-1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[2,4\\],\\[6,8\\]\\], x = 2\n**Output:** 4\n**Explanation:** We can make every element equal to 4 by doing the following: \n- Add x to 2 once.\n- Subtract x from 6 once.\n- Subtract x from 8 twice.\nA total of 4 operations were used.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,5\\],\\[2,3\\]\\], x = 1\n**Output:** 5\n**Explanation:** We can make every element equal to 3.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,2\\],\\[3,4\\]\\], x = 2\n**Output:** -1\n**Explanation:** It is impossible to make every element equal.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 105`\n*   `1 <= m * n <= 105`\n*   `1 <= x, grid[i][j] <= 104`Is it possible to make two integers a and b equal if they have different remainders dividing by x? If it is possible, which number should you select to minimize the number of operations? What if the elements are sorted?",
          "output": "def full_rounds_played(login_time, logout_time):\n    login_hour, login_minute = map(int, login_time.split(':'))\n    logout_hour, logout_minute = map(int, logout_time.split(':'))\n\n    if (logout_hour * 60 + logout_minute) < (login_hour * 60 + login_minute):\n        logout_hour += 24\n\n    rounds = (logout_hour * 60 + logout_minute - (login_hour * 60 + login_minute)) // 15\n    return rounds\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a stream of **records** about a particular stock. Each record contains a **timestamp** and the corresponding **price** of the stock at that timestamp.\n\nUnfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream **correcting** the price of the previous wrong record.\n\nDesign an algorithm that:\n\n*   **Updates** the price of the stock at a particular timestamp, **correcting** the price from any previous records at the timestamp.\n*   Finds the **latest price** of the stock based on the current records. The **latest price** is the price at the latest timestamp recorded.\n*   Finds the **maximum price** the stock has been based on the current records.\n*   Finds the **minimum price** the stock has been based on the current records.\n\nImplement the `StockPrice` class:\n\n*   `StockPrice()` Initializes the object with no price records.\n*   `void update(int timestamp, int price)` Updates the `price` of the stock at the given `timestamp`.\n*   `int current()` Returns the **latest price** of the stock.\n*   `int maximum()` Returns the **maximum price** of the stock.\n*   `int minimum()` Returns the **minimum price** of the stock.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"StockPrice \",  \"update \",  \"update \",  \"current \",  \"maximum \",  \"update \",  \"maximum \",  \"update \",  \"minimum \"\\]\n\\[\\[\\], \\[1, 10\\], \\[2, 5\\], \\[\\], \\[\\], \\[1, 3\\], \\[\\], \\[4, 2\\], \\[\\]\\]\n**Output**\n\\[null, null, null, 5, 10, null, 5, null, 2\\]\n\n**Explanation**\nStockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // Timestamps are \\[1\\] with corresponding prices \\[10\\].\nstockPrice.update(2, 5);  // Timestamps are \\[1,2\\] with corresponding prices \\[10,5\\].\nstockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.\nstockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.\nstockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.\n                          // Timestamps are \\[1,2\\] with corresponding prices \\[3,5\\].\nstockPrice.maximum();     // return 5, the maximum price is 5 after the correction.\nstockPrice.update(4, 2);  // Timestamps are \\[1,2,4\\] with corresponding prices \\[3,5,2\\].\nstockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4.\n\n**Constraints:**\n\n*   `1 <= timestamp, price <= 109`\n*   At most `105` calls will be made **in total** to `update`, `current`, `maximum`, and `minimum`.\n*   `current`, `maximum`, and `minimum` will be called **only after** `update` has been called **at least once**.How would you solve the problem for offline queries (all queries given at once)? Think about which data structure can help insert and delete the most optimal way.",
          "output": "def min_absolute_difference(nums, queries):\n    result = []\n\n    for query in queries:\n        left, right = query\n        unique = list(set(nums[left:right + 1]))\n\n        if len(unique) == 1:\n            result.append(-1)\n        else:\n            unique.sort()\n            min_diff = float('inf')\n            for i in range(1, len(unique)):\n                min_diff = min(min_diff, unique[i] - unique[i - 1])\n\n            result.append(min_diff)\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of `2 * n` integers. You need to partition `nums` into **two** arrays of length `n` to **minimize the absolute difference** of the **sums** of the arrays. To partition `nums`, put each element of `nums` into **one** of the two arrays.\n\nReturn _the **minimum** possible absolute difference_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,9,7,3\\]\n**Output:** 2\n**Explanation:** One optimal partition is: \\[3,9\\] and \\[7,3\\].\nThe absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2.\n\n**Example 2:**\n\n**Input:** nums = \\[-36,36\\]\n**Output:** 72\n**Explanation:** One optimal partition is: \\[-36\\] and \\[36\\].\nThe absolute difference between the sums of the arrays is abs((-36) - (36)) = 72.\n\n**Example 3:**\n\n**Input:** nums = \\[2,-1,0,4,-2,-9\\]\n**Output:** 0\n**Explanation:** One optimal partition is: \\[2,4,-9\\] and \\[-1,0,-2\\].\nThe absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.\n\n**Constraints:**\n\n*   `1 <= n <= 15`\n*   `nums.length == 2 * n`\n*   `-107 <= nums[i] <= 107`The target sum for the two partitions is sum(nums) / 2. Could you reduce the time complexity if you arbitrarily divide nums into two halves (two arrays)? Meet-in-the-Middle? For both halves, pre-calculate a 2D array where the kth index will store all possible sum values if only k elements from this half are added. For each sum of k elements in the first half, find the best sum of n-k elements in the second half such that the two sums add up to a value closest to the target sum from hint 1. These two subsets will form one array of the partition.",
          "output": "def countSubIslands(grid1, grid2):\n    def dfs(i, j):\n        if i < 0 or i >= len(grid1) or j < 0 or j >= len(grid1[0]) or grid2[i][j] == 0:\n            return True\n\n        grid2[i][j] = 0\n\n        isSubIsland = grid1[i][j] == 1\n        isSubIsland &= dfs(i + 1, j)\n        isSubIsland &= dfs(i - 1, j)\n        isSubIsland &= dfs(i, j + 1)\n        isSubIsland &= dfs(i, j - 1)\n\n        return isSubIsland\n\n    count = 0\n\n    for i in range(len(grid1)):\n        for j in range(len(grid1[0])):\n            if grid2[i][j] == 1 and dfs(i, j):\n                count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: A **distinct string** is a string that is present only **once** in an array.\n\nGiven an array of strings `arr`, and an integer `k`, return _the_ `kth` _**distinct string** present in_ `arr`. If there are **fewer** than `k` distinct strings, return _an **empty string**_ `\" \"`.\n\nNote that the strings are considered in the **order in which they appear** in the array.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[ \"d \", \"b \", \"c \", \"b \", \"c \", \"a \"\\], k = 2\n**Output:**  \"a \"\n**Explanation:**\nThe only distinct strings in arr are  \"d \" and  \"a \".\n \"d \" appears 1st, so it is the 1st distinct string.\n \"a \" appears 2nd, so it is the 2nd distinct string.\nSince k == 2,  \"a \" is returned. \n\n**Example 2:**\n\n**Input:** arr = \\[ \"aaa \", \"aa \", \"a \"\\], k = 1\n**Output:**  \"aaa \"\n**Explanation:**\nAll strings in arr are distinct, so the 1st string  \"aaa \" is returned.\n\n**Example 3:**\n\n**Input:** arr = \\[ \"a \", \"b \", \"a \"\\], k = 3\n**Output:**  \" \"\n**Explanation:**\nThe only distinct string is  \"b \". Since there are fewer than 3 distinct strings, we return an empty string  \" \".\n\n**Constraints:**\n\n*   `1 <= k <= arr.length <= 1000`\n*   `1 <= arr[i].length <= 5`\n*   `arr[i]` consists of lowercase English letters.Try 'mapping' the strings to check if they are unique or not.",
          "output": "def is_good_string(s: str) -> bool:\n    freq_map = {}\n    for c in s:\n        if c in freq_map:\n            freq_map[c] += 1\n        else:\n            freq_map[c] = 1\n\n    count = next(iter(freq_map.values()))\n    for value in freq_map.values():\n        if value != count:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** 2D integer array of `events` where `events[i] = [startTimei, endTimei, valuei]`. The `ith` event starts at `startTimei` and ends at `endTimei`, and if you attend this event, you will receive a value of `valuei`. You can choose **at most** **two** **non-overlapping** events to attend such that the sum of their values is **maximized**.\n\nReturn _this **maximum** sum._\n\nNote that the start time and end time is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time `t`, the next event must start at or after `t + 1`.\n\n",
          "input": "**Example 1:**\n\n**Input:** events = \\[\\[1,3,2\\],\\[4,5,2\\],\\[2,4,3\\]\\]\n**Output:** 4\n**Explanation:** Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.\n\n**Example 2:**\n\n**Input:** events = \\[\\[1,3,2\\],\\[4,5,2\\],\\[1,5,5\\]\\]\n**Output:** 5\n**Explanation:** Choose event 2 for a sum of 5.\n\n**Example 3:**\n\n**Input:** events = \\[\\[1,5,3\\],\\[1,5,1\\],\\[6,6,5\\]\\]\n**Output:** 8\n**Explanation:** Choose events 0 and 2 for a sum of 3 + 5 = 8.\n\n**Constraints:**\n\n*   `2 <= events.length <= 105`\n*   `events[i].length == 3`\n*   `1 <= startTimei <= endTimei <= 109`\n*   `1 <= valuei <= 106`How can sorting the events on the basis of their start times help? How about end times? How can we quickly get the maximum score of an interval not intersecting with the interval we chose?",
          "output": "def find_chair(times, target_friend):\n    n = len(times)\n    events = []\n    for i, (arrival, leaving) in enumerate(times):\n        events.append((arrival, i))\n        events.append((leaving, ~i))\n    events.sort()\n    chairs = [-1] * n\n    available_chairs = sorted(range(n))\n    for time, friend_id in events:\n        if friend_id >= 0:\n            chairs[friend_id] = available_chairs.pop(0)\n            if friend_id == target_friend:\n                return chairs[friend_id]\n        else:\n            available_chairs.append(chairs[~friend_id])\n            available_chairs.sort()\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: There is a long table with a line of plates and candles arranged on top of it. You are given a **0-indexed** string `s` consisting of characters `'*'` and `'|'` only, where a `'*'` represents a **plate** and a `'|'` represents a **candle**.\n\nYou are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [lefti, righti]` denotes the **substring** `s[lefti...righti]` (**inclusive**). For each query, you need to find the **number** of plates **between candles** that are **in the substring**. A plate is considered **between candles** if there is at least one candle to its left **and** at least one candle to its right **in the substring**.\n\n*   For example, `s = \"||**||**|* \"`, and a query `[3, 8]` denotes the substring `\"*||******| \"`. The number of plates between candles in this substring is `2`, as each of the two plates has at least one candle **in the substring** to its left **and** right.\n\nReturn _an integer array_ `answer` _where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"\\*\\*|\\*\\*|\\*\\*\\*| \", queries = \\[\\[2,5\\],\\[5,9\\]\\]\n**Output:** \\[2,3\\]\n**Explanation:**\n- queries\\[0\\] has two plates between candles.\n- queries\\[1\\] has three plates between candles.\n\n**Example 2:**\n\n**Input:** s =  \"\\*\\*\\*|\\*\\*|\\*\\*\\*\\*\\*|\\*\\*||\\*\\*|\\* \", queries = \\[\\[1,17\\],\\[4,5\\],\\[14,17\\],\\[5,11\\],\\[15,16\\]\\]\n**Output:** \\[9,0,0,0,0\\]\n**Explanation:**\n- queries\\[0\\] has nine plates between candles.\n- The other queries have zero plates between candles.\n\n**Constraints:**\n\n*   `3 <= s.length <= 105`\n*   `s` consists of `'*'` and `'|'` characters.\n*   `1 <= queries.length <= 105`\n*   `queries[i].length == 2`\n*   `0 <= lefti <= righti < s.length`Can you find the indices of the most left and right candles for a given substring, perhaps by using binary search (or better) over an array of indices of all the bars? Once the indices of the most left and right bars are determined, how can you efficiently count the number of plates within the range? Prefix sums?",
          "output": "from collections import defaultdict\n\ndef splitPainting(segments):\n    changes = defaultdict(int)\n    for start, end, color in segments:\n        changes[start] += color\n        changes[end] -= color\n\n    result = []\n    start, color_sum = 0, 0\n    for key in sorted(changes.keys()):\n        if start != key:\n            if color_sum:\n                result.append([start, key, color_sum])\n            start = key\n        color_sum += changes[key]\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `8 x 8` chessboard containing `n` pieces (rooks, queens, or bishops). You are given a string array `pieces` of length `n`, where `pieces[i]` describes the type (rook, queen, or bishop) of the `ith` piece. In addition, you are given a 2D integer array `positions` also of length `n`, where `positions[i] = [ri, ci]` indicates that the `ith` piece is currently at the **1-based** coordinate `(ri, ci)` on the chessboard.\n\nWhen making a **move** for a piece, you choose a **destination** square that the piece will travel toward and stop on.\n\n*   A rook can only travel **horizontally or vertically** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, or `(r, c-1)`.\n*   A queen can only travel **horizontally, vertically, or diagonally** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, `(r, c-1)`, `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`.\n*   A bishop can only travel **diagonally** from `(r, c)` to the direction of `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`.\n\nYou must make a **move** for every piece on the board simultaneously. A **move combination** consists of all the **moves** performed on all the given pieces. Every second, each piece will instantaneously travel **one square** towards their destination if they are not already at it. All pieces start traveling at the `0th` second. A move combination is **invalid** if, at a given time, **two or more** pieces occupy the same square.\n\nReturn _the number of **valid** move combinations_\u200b\u200b\u200b\u200b\u200b.\n\n**Notes:**\n\n*   **No two pieces** will start in the **same** square.\n*   You may choose the square a piece is already on as its **destination**.\n*   If two pieces are **directly adjacent** to each other, it is valid for them to **move past each other** and swap positions in one second.\n\n",
          "input": "**Example 1:**\n\n**Input:** pieces = \\[ \"rook \"\\], positions = \\[\\[1,1\\]\\]\n**Output:** 15\n**Explanation:** The image above shows the possible squares the piece can move to.\n\n**Example 2:**\n\n**Input:** pieces = \\[ \"queen \"\\], positions = \\[\\[1,1\\]\\]\n**Output:** 22\n**Explanation:** The image above shows the possible squares the piece can move to.\n\n**Example 3:**\n\n**Input:** pieces = \\[ \"bishop \"\\], positions = \\[\\[4,3\\]\\]\n**Output:** 12\n**Explanation:** The image above shows the possible squares the piece can move to.\n\n**Constraints:**\n\n*   `n == pieces.length`\n*   `n == positions.length`\n*   `1 <= n <= 4`\n*   `pieces` only contains the strings `\"rook \"`, `\"queen \"`, and `\"bishop \"`.\n*   There will be at most one queen on the chessboard.\n*   `1 <= xi, yi <= 8`\n*   Each `positions[i]` is distinct.N is small, we can generate all possible move combinations. For each possible move combination, determine which ones are valid.",
          "output": "def count_valid_combos(pieces, positions, index=0):\n    if index == len(pieces):\n        return 1\n\n    r, c = positions[index]\n    dr = [0, 1, 0, -1, 1, 1, -1, -1]\n    dc = [1, 0, -1, 0, 1, -1, 1, -1]\n    valids = 0\n\n    for x in range(8):\n        if pieces[index] == \"bishop\" and x < 4:\n            continue\n        if pieces[index] == \"rook\" and x >= 4:\n            break\n\n        for dist in range(1, 9):\n            nr, nc = r + dr[x] * dist, c + dc[x] * dist\n            if nr < 1 or nr > 8 or nc < 1 or nc > 8:\n                break\n            if nr == r and nc == c:\n                continue\n\n            valid = True\n            for other in range(len(positions)):\n                if other == index:\n                    continue\n                orr, occ = positions[other]\n                if orr == nr and occ == nc:\n                    valid = False\n                    break\n                if orr + occ == nr + nc or orr - occ == nr - nc:\n                    valid = False\n                    break\n                if orr == nr or occ == nc:\n                    valid = False\n                    break\n\n            if valid:\n                positions[index] = [nr, nc]\n                valids += count_valid_combos(pieces, positions, index + 1)\n                positions[index] = [r, c]\n\n    return valids\n"
     },
     {
          "instruction": "Write python code for this problem: A sentence is a list of **tokens** separated by a **single** space with no leading or trailing spaces. Every token is either a **positive number** consisting of digits `0-9` with no leading zeros, or a **word** consisting of lowercase English letters.\n\n*   For example, `\"a puppy has 2 eyes 4 legs \"` is a sentence with seven tokens: `\"2 \"` and `\"4 \"` are numbers and the other tokens such as `\"puppy \"` are words.\n\nGiven a string `s` representing a sentence, you need to check if **all** the numbers in `s` are **strictly increasing** from left to right (i.e., other than the last number, **each** number is **strictly smaller** than the number on its **right** in `s`).\n\nReturn `true` _if so, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1 box has 3 blue 4 red 6 green and 12 yellow marbles \"\n**Output:** true\n**Explanation:** The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12.\n\n**Example 2:**\n\n**Input:** s =  \"hello world 5 x 5 \"\n**Output:** false\n**Explanation:** The numbers in s are: **5**, **5**. They are not strictly increasing.\n\n**Example 3:**\n\n**Input:** s =  \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s \"\n**Output:** false\n**Explanation:** The numbers in s are: 7, **51**, **50**, 60. They are not strictly increasing.\n\n**Constraints:**\n\n*   `3 <= s.length <= 200`\n*   `s` consists of lowercase English letters, spaces, and digits from `0` to `9`, inclusive.\n*   The number of tokens in `s` is between `2` and `100`, inclusive.\n*   The tokens in `s` are separated by a single space.\n*   There are at least **two** numbers in `s`.\n*   Each number in `s` is a **positive** number **less** than `100`, with no leading zeros.\n*   `s` contains no leading or trailing spaces.Use string tokenization of your language to extract all the tokens of the string easily. For each token extracted, how can you tell if it is a number? Does the first letter being a digit mean something? Compare the number with the previously occurring number to check if ascending order is maintained.",
          "output": "def maxProductDifference(nums):\n    min1, min2, max1, max2 = float('inf'), float('inf'), float('-inf'), float('-inf')\n    for num in nums:\n        if num < min1:\n            min2, min1 = min1, num\n        elif num < min2:\n            min2 = num\n        if num > max1:\n            max2, max1 = max1, num\n        elif num > max2:\n            max2 = num\n    return max1 * max2 - min1 * min2\n"
     },
     {
          "instruction": "Write python code for this problem: You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has `n` accounts numbered from `1` to `n`. The initial balance of each account is stored in a **0-indexed** integer array `balance`, with the `(i + 1)th` account having an initial balance of `balance[i]`.\n\nExecute all the **valid** transactions. A transaction is **valid** if:\n\n*   The given account number(s) are between `1` and `n`, and\n*   The amount of money withdrawn or transferred from is **less than or equal** to the balance of the account.\n\nImplement the `Bank` class:\n\n*   `Bank(long[] balance)` Initializes the object with the **0-indexed** integer array `balance`.\n*   `boolean transfer(int account1, int account2, long money)` Transfers `money` dollars from the account numbered `account1` to the account numbered `account2`. Return `true` if the transaction was successful, `false` otherwise.\n*   `boolean deposit(int account, long money)` Deposit `money` dollars into the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise.\n*   `boolean withdraw(int account, long money)` Withdraw `money` dollars from the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Bank \",  \"withdraw \",  \"transfer \",  \"deposit \",  \"transfer \",  \"withdraw \"\\]\n\\[\\[\\[10, 100, 20, 50, 30\\]\\], \\[3, 10\\], \\[5, 1, 20\\], \\[5, 20\\], \\[3, 4, 15\\], \\[10, 50\\]\\]\n**Output**\n\\[null, true, true, true, false, false\\]\n\n**Explanation**\nBank bank = new Bank(\\[10, 100, 20, 50, 30\\]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.\n\n**Constraints:**\n\n*   `n == balance.length`\n*   `1 <= n, account, account1, account2 <= 105`\n*   `0 <= balance[i], money <= 1012`\n*   At most `104` calls will be made to **each** function `transfer`, `deposit`, `withdraw`.How do you determine if a transaction will fail? Simply apply the operations if the transaction is valid.",
          "output": "def rotateGrid(grid, k):\n    def rotateLayer(layer, k):\n        m, n = len(grid), len(grid[0])\n        top, bottom = layer, m - 1 - layer\n        left, right = layer, n - 1 - layer\n        data_in_layer = (right - left + 1) * 2 + (bottom - top - 1) * 2\n        k %= data_in_layer\n        for _ in range(k):\n            temp = grid[top][left]\n            for j in range(left, right):\n                grid[top][j] = grid[top][j + 1]\n            for i in range(top, bottom):\n                grid[i][right] = grid[i + 1][right]\n            for j in range(right, left, -1):\n                grid[bottom][j] = grid[bottom][j - 1]\n            for i in range(bottom, top, -1):\n                grid[i][left] = grid[i - 1][left]\n            grid[top + 1][left] = temp\n\n    m, n = len(grid), len(grid[0])\n    layers = min(m, n) // 2\n    for layer in range(layers):\n        rotateLayer(layer, k)\n    return grid\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, find the **maximum** possible **bitwise OR** of a subset of `nums` and return _the **number of different non-empty subsets** with the maximum bitwise OR_.\n\nAn array `a` is a **subset** of an array `b` if `a` can be obtained from `b` by deleting some (possibly zero) elements of `b`. Two subsets are considered **different** if the indices of the elements chosen are different.\n\nThe bitwise OR of an array `a` is equal to `a[0] **OR** a[1] **OR** ... **OR** a[a.length - 1]` (**0-indexed**).\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1\\]\n**Output:** 2\n**Explanation:** The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:\n- \\[3\\]\n- \\[3,1\\]\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2\\]\n**Output:** 7\n**Explanation:** All non-empty subsets of \\[2,2,2\\] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets.\n\n**Example 3:**\n\n**Input:** nums = \\[3,2,1,5\\]\n**Output:** 6\n**Explanation:** The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:\n- \\[3,5\\]\n- \\[3,1,5\\]\n- \\[3,2,5\\]\n- \\[3,2,1,5\\]\n- \\[2,5\\]\n- \\[2,1,5\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 16`\n*   `1 <= nums[i] <= 105`Can we enumerate all possible subsets? The maximum bitwise-OR is the bitwise-OR of the whole array.",
          "output": "def wonderfulSubstrings(word: str) -> int:\n    res = 0\n    mask = 0\n    count = {0: 1}\n    for c in word:\n        mask ^= 1 << (ord(c) - ord('a'))\n        res += count.get(mask, 0)\n        for i in range(10):\n            res += count.get(mask ^ (1 << i), 0)\n        count[mask] = count.get(mask, 0) + 1\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: A city is represented as a **bi-directional connected** graph with `n` vertices where each vertex is labeled from `1` to `n` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself. The time taken to traverse any edge is `time` minutes.\n\nEach vertex has a traffic signal which changes its color from **green** to **red** and vice versa every `change` minutes. All signals change **at the same time**. You can enter a vertex at **any time**, but can leave a vertex **only when the signal is green**. You **cannot wait** at a vertex if the signal is **green**.\n\nThe **second minimum value** is defined as the smallest value **strictly larger** than the minimum value.\n\n*   For example the second minimum value of `[2, 3, 4]` is `3`, and the second minimum value of `[2, 2, 4]` is `4`.\n\nGiven `n`, `edges`, `time`, and `change`, return _the **second minimum time** it will take to go from vertex_ `1` _to vertex_ `n`.\n\n**Notes:**\n\n*   You can go through any vertex **any** number of times, **including** `1` and `n`.\n*   You can assume that when the journey **starts**, all signals have just turned **green**.\n\n",
          "input": "**Example 1:**\n\n\u2003 \u2003 \u2003 \u2003\n\n**Input:** n = 5, edges = \\[\\[1,2\\],\\[1,3\\],\\[1,4\\],\\[3,4\\],\\[4,5\\]\\], time = 3, change = 5\n**Output:** 13\n**Explanation:**\nThe figure on the left shows the given graph.\nThe blue path in the figure on the right is the minimum time path.\nThe time taken is:\n- Start at 1, time elapsed=0\n- 1 -> 4: 3 minutes, time elapsed=3\n- 4 -> 5: 3 minutes, time elapsed=6\nHence the minimum time needed is 6 minutes.\n\nThe red path shows the path to get the second minimum time.\n- Start at 1, time elapsed=0\n- 1 -> 3: 3 minutes, time elapsed=3\n- 3 -> 4: 3 minutes, time elapsed=6\n- Wait at 4 for 4 minutes, time elapsed=10\n- 4 -> 5: 3 minutes, time elapsed=13\nHence the second minimum time is 13 minutes.      \n\n**Example 2:**\n\n**Input:** n = 2, edges = \\[\\[1,2\\]\\], time = 3, change = 2\n**Output:** 11\n**Explanation:**\nThe minimum time path is 1 -> 2 with time = 3 minutes.\nThe second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes.\n\n**Constraints:**\n\n*   `2 <= n <= 104`\n*   `n - 1 <= edges.length <= min(2 * 104, n * (n - 1) / 2)`\n*   `edges[i].length == 2`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   There are no duplicate edges.\n*   Each vertex can be reached directly or indirectly from every other vertex.\n*   `1 <= time, change <= 103`How much is change actually necessary while calculating the required path? How many extra edges do we need to add to the shortest path?",
          "output": "from collections import defaultdict, deque\n\ndef secondMinimum(n, edges, time, change):\n    graph = defaultdict(list)\n    \n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    dist = [float('inf')] * (n + 1)\n    dist2 = [float('inf')] * (n + 1)\n    dist[1] = 0\n\n    q = deque([1])\n\n    while q:\n        cur = q.popleft()\n\n        nextDist = dist[cur] + time\n        waitTime = change if (nextDist // change) % 2 == 1 else 0\n        nextDist += waitTime\n\n        for next in graph[cur]:\n            if nextDist < dist[next]:\n                nextDist, dist[next] = dist[next], nextDist\n                q.append(next)\n            if nextDist < dist2[next]:\n                nextDist, dist2[next] = dist2[next], nextDist\n                q.append(next)\n\n    return dist2[n]\n"
     },
     {
          "instruction": "Write python code for this problem: A sentence consists of lowercase letters (`'a'` to `'z'`), digits (`'0'` to `'9'`), hyphens (`'-'`), punctuation marks (`'!'`, `'.'`, and `','`), and spaces (`' '`) only. Each sentence can be broken down into **one or more tokens** separated by one or more spaces `' '`.\n\nA token is a valid word if **all three** of the following are true:\n\n*   It only contains lowercase letters, hyphens, and/or punctuation (**no** digits).\n*   There is **at most one** hyphen `'-'`. If present, it **must** be surrounded by lowercase characters ( `\"a-b \"` is valid, but `\"-ab \"` and `\"ab- \"` are not valid).\n*   There is **at most one** punctuation mark. If present, it **must** be at the **end** of the token ( `\"ab, \"`, `\"cd! \"`, and `\". \"` are valid, but `\"a!b \"` and `\"c., \"` are not valid).\n\nExamples of valid words include `\"a-b. \"`, `\"afad \"`, `\"ba-c \"`, `\"a! \"`, and `\"! \"`.\n\nGiven a string `sentence`, return _the **number** of valid words in_ `sentence`.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentence =  \"cat and  dog \"\n**Output:** 3\n**Explanation:** The valid words in the sentence are  \"cat \",  \"and \", and  \"dog \".\n\n**Example 2:**\n\n**Input:** sentence =  \"!this  1-s b8d! \"\n**Output:** 0\n**Explanation:** There are no valid words in the sentence.\n \"!this \" is invalid because it starts with a punctuation mark.\n \"1-s \" and  \"b8d \" are invalid because they contain digits.\n\n**Example 3:**\n\n**Input:** sentence =  \"alice and  bob are playing stone-game10 \"\n**Output:** 5\n**Explanation:** The valid words in the sentence are  \"alice \",  \"and \",  \"bob \",  \"are \", and  \"playing \".\n \"stone-game10 \" is invalid because it contains digits.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 1000`\n*   `sentence` only contains lowercase English letters, digits, `' '`, `'-'`, `'!'`, `'.'`, and `','`.\n*   There will be at least `1` token.Iterate through the string to split it by spaces. Count the number of characters of each type (letters, numbers, hyphens, and punctuations).",
          "output": "def findPeakGrid(mat: List[List[int]]) -> List[int]:\n    m, n = len(mat), len(mat[0])\n    l, r = 0, n - 1\n\n    while l < r:\n        mid = (l + r) // 2\n        max_row = 0\n\n        for i in range(1, m):\n            if mat[i][mid] > mat[max_row][mid]:\n                max_row = i\n\n        if mat[max_row][mid] < mat[max_row][mid + 1]:\n            l = mid + 1\n        else:\n            r = mid\n\n    max_row = 0\n    for i in range(1, m):\n        if mat[i][l] > mat[max_row][l]:\n            max_row = i\n\n    return [max_row, l]\n"
     },
     {
          "instruction": "Write python code for this problem: An integer `x` is **numerically balanced** if for every digit `d` in the number `x`, there are **exactly** `d` occurrences of that digit in `x`.\n\nGiven an integer `n`, return _the **smallest numerically balanced** number **strictly greater** than_ `n`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 1\n**Output:** 22\n**Explanation:** \n22 is numerically balanced since:\n- The digit 2 occurs 2 times. \nIt is also the smallest numerically balanced number strictly greater than 1.\n\n**Example 2:**\n\n**Input:** n = 1000\n**Output:** 1333\n**Explanation:** \n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times. \nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times.\n\n**Example 3:**\n\n**Input:** n = 3000\n**Output:** 3133\n**Explanation:** \n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000.\n\n**Constraints:**\n\n*   `0 <= n <= 106`How far away can the next greater numerically balanced number be from n? With the given constraints, what is the largest numerically balanced number?",
          "output": "def build_array(nums):\n    ans = []\n    for i in range(len(nums)):\n        ans.append(nums[nums[i]])\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There is a **binary** tree rooted at `0` consisting of `n` nodes. The nodes are labeled from `0` to `n - 1`. You are given a **0-indexed** integer array `parents` representing the tree, where `parents[i]` is the parent of node `i`. Since node `0` is the root, `parents[0] == -1`.\n\nEach node has a **score**. To find the score of a node, consider if the node and the edges connected to it were **removed**. The tree would become one or more **non-empty** subtrees. The **size** of a subtree is the number of the nodes in it. The **score** of the node is the **product of the sizes** of all those subtrees.\n\nReturn _the **number** of nodes that have the **highest score**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** parents = \\[-1,2,0,2,0\\]\n**Output:** 3\n**Explanation:**\n- The score of node 0 is: 3 \\* 1 = 3\n- The score of node 1 is: 4 = 4\n- The score of node 2 is: 1 \\* 1 \\* 2 = 2\n- The score of node 3 is: 4 = 4\n- The score of node 4 is: 4 = 4\nThe highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.\n\n**Example 2:**\n\n**Input:** parents = \\[-1,2,0\\]\n**Output:** 2\n**Explanation:**\n- The score of node 0 is: 2 = 2\n- The score of node 1 is: 2 = 2\n- The score of node 2 is: 1 \\* 1 = 1\nThe highest score is 2, and two nodes (node 0 and node 1) have the highest score.\n\n**Constraints:**\n\n*   `n == parents.length`\n*   `2 <= n <= 105`\n*   `parents[0] == -1`\n*   `0 <= parents[i] <= n - 1` for `i != 0`\n*   `parents` represents a valid binary tree.For each node, you need to find the sizes of the subtrees rooted in each of its children. Maybe DFS? How to determine the number of nodes in the rest of the tree? Can you subtract the size of the subtree rooted at the node from the total number of nodes of the tree? Use these values to compute the score of the node. Track the maximum score, and how many nodes achieve such score.",
          "output": "def eliminate_monsters(dist, speed):\n    n = len(dist)\n    time_to_reach = sorted(dist[i] / speed[i] for i in range(n))\n    monsters_eliminated = 0\n    for time in time_to_reach:\n        if monsters_eliminated < time:\n            monsters_eliminated += 1\n    return monsters_eliminated\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given a 2D integer array `relations` where `relations[j] = [prevCoursej, nextCoursej]` denotes that course `prevCoursej` has to be completed **before** course `nextCoursej` (prerequisite relationship). Furthermore, you are given a **0-indexed** integer array `time` where `time[i]` denotes how many **months** it takes to complete the `(i+1)th` course.\n\nYou must find the **minimum** number of months needed to complete all the courses following these rules:\n\n*   You may start taking a course at **any time** if the prerequisites are met.\n*   **Any number of courses** can be taken at the **same time**.\n\nReturn _the **minimum** number of months needed to complete all the courses_.\n\n**Note:** The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, relations = \\[\\[1,3\\],\\[2,3\\]\\], time = \\[3,2,5\\]\n**Output:** 8\n**Explanation:** The figure above represents the given graph and the time required to complete each course. \nWe start course 1 and course 2 simultaneously at month 0.\nCourse 1 takes 3 months and course 2 takes 2 months to complete respectively.\nThus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.\n\n**Example 2:**\n\n**Input:** n = 5, relations = \\[\\[1,5\\],\\[2,5\\],\\[3,5\\],\\[3,4\\],\\[4,5\\]\\], time = \\[1,2,3,4,5\\]\n**Output:** 12\n**Explanation:** The figure above represents the given graph and the time required to complete each course.\nYou can start courses 1, 2, and 3 at month 0.\nYou can complete them after 1, 2, and 3 months respectively.\nCourse 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.\nCourse 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.\nThus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.\n\n**Constraints:**\n\n*   `1 <= n <= 5 * 104`\n*   `0 <= relations.length <= min(n * (n - 1) / 2, 5 * 104)`\n*   `relations[j].length == 2`\n*   `1 <= prevCoursej, nextCoursej <= n`\n*   `prevCoursej != nextCoursej`\n*   All the pairs `[prevCoursej, nextCoursej]` are **unique**.\n*   `time.length == n`\n*   `1 <= time[i] <= 104`\n*   The given graph is a directed acyclic graph.What is the earliest time a course can be taken? How would you solve the problem if all courses take equal time? How would you generalize this approach?",
          "output": "def count_good_digit_strings(n):\n    mod = 10 ** 9 + 7\n    even_digits, prime_digits = 5, 4\n    total = 1\n    for i in range(n):\n        total = total * (even_digits if i % 2 == 0 else prime_digits) % mod\n    return total\n"
     },
     {
          "instruction": "Write python code for this problem: Two strings `word1` and `word2` are considered **almost equivalent** if the differences between the frequencies of each letter from `'a'` to `'z'` between `word1` and `word2` is **at most** `3`.\n\nGiven two strings `word1` and `word2`, each of length `n`, return `true` _if_ `word1` _and_ `word2` _are **almost equivalent**, or_ `false` _otherwise_.\n\nThe **frequency** of a letter `x` is the number of times it occurs in the string.\n\n",
          "input": "**Example 1:**\n\n**Input:** word1 =  \"aaaa \", word2 =  \"bccb \"\n**Output:** false\n**Explanation:** There are 4 'a's in  \"aaaa \" but 0 'a's in  \"bccb \".\nThe difference is 4, which is more than the allowed 3.\n\n**Example 2:**\n\n**Input:** word1 =  \"abcdeef \", word2 =  \"abaaacc \"\n**Output:** true\n**Explanation:** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.\n\n**Example 3:**\n\n**Input:** word1 =  \"cccddabba \", word2 =  \"babababab \"\n**Output:** true\n**Explanation:** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.\n\n**Constraints:**\n\n*   `n == word1.length == word2.length`\n*   `1 <= n <= 100`\n*   `word1` and `word2` consist only of lowercase English letters.What data structure can we use to count the frequency of each character? Are there edge cases where a character is present in one string but not the other?",
          "output": "import collections\n\ndef maxGeneticDifference(parents, queries):\n    M = 17\n    tr = [0, 0]\n\n    def insert(x):\n        nonlocal tr\n        u = 0\n        for i in range(M - 1, -1, -1):\n            v = (x >> i) & 1\n            if not tr[u][v]:\n                tr[u][v] = len(tr)\n                tr.append([0, 0])\n            u = tr[u][v]\n\n    def query(x, y=0):\n        u = 0\n        ans = 0\n        for i in range(M - 1, -1, -1):\n            v = ((x >> i) & 1) ^ 1\n            if not tr[u][v]:\n                v ^= 1\n            ans |= (y := (y << 1) | v)\n            u = tr[u][v]\n        return ans\n\n    def dfs(u, tree=0, g=collections.defaultdict(list), ans=None):\n        nonlocal tr\n        insert(tree := tree ^ u)\n        ans[u] = query(tree)\n        for v in g[u]:\n            dfs(v, tree, g, ans)\n\n    n = len(parents)\n    root = -1\n    graph = collections.defaultdict(list)\n    for i, parent in enumerate(parents):\n        if parent != -1:\n            graph[parent].append(i)\n        else:\n            root = i\n\n    ans = [0] * n\n    dfs(root, 0, graph, ans)\n    result = [ans[node] ^ val for node, val in queries]\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A `width x height` grid is on an XY-plane with the **bottom-left** cell at `(0, 0)` and the **top-right** cell at `(width - 1, height - 1)`. The grid is aligned with the four cardinal directions ( `\"North \"`, `\"East \"`, `\"South \"`, and `\"West \"`). A robot is **initially** at cell `(0, 0)` facing direction `\"East \"`.\n\nThe robot can be instructed to move for a specific number of **steps**. For each step, it does the following.\n\n1.  Attempts to move **forward one** cell in the direction it is facing.\n2.  If the cell the robot is **moving to** is **out of bounds**, the robot instead **turns** 90 degrees **counterclockwise** and retries the step.\n\nAfter the robot finishes moving the number of steps required, it stops and awaits the next instruction.\n\nImplement the `Robot` class:\n\n*   `Robot(int width, int height)` Initializes the `width x height` grid with the robot at `(0, 0)` facing `\"East \"`.\n*   `void step(int num)` Instructs the robot to move forward `num` steps.\n*   `int[] getPos()` Returns the current cell the robot is at, as an array of length 2, `[x, y]`.\n*   `String getDir()` Returns the current direction of the robot, `\"North \"`, `\"East \"`, `\"South \"`, or `\"West \"`.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Robot \",  \"step \",  \"step \",  \"getPos \",  \"getDir \",  \"step \",  \"step \",  \"step \",  \"getPos \",  \"getDir \"\\]\n\\[\\[6, 3\\], \\[2\\], \\[2\\], \\[\\], \\[\\], \\[2\\], \\[1\\], \\[4\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, \\[4, 0\\],  \"East \", null, null, null, \\[1, 2\\],  \"West \"\\]\n\n**Explanation**\nRobot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.step(2);  // It moves two steps East to (2, 0), and faces East.\nrobot.step(2);  // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return \\[4, 0\\]\nrobot.getDir(); // return  \"East \"\nrobot.step(2);  // It moves one step East to (5, 0), and faces East.\n                // Moving the next step East would be out of bounds, so it turns and faces North.\n                // Then, it moves one step North to (5, 1), and faces North.\nrobot.step(1);  // It moves one step North to (5, 2), and faces **North** (not West).\nrobot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.\n                // Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return \\[1, 2\\]\nrobot.getDir(); // return  \"West \"\n\n**Constraints:**\n\n*   `2 <= width, height <= 100`\n*   `1 <= num <= 105`\n*   At most `104` calls **in total** will be made to `step`, `getPos`, and `getDir`.The robot only moves along the perimeter of the grid. Can you think if modulus can help you quickly compute which cell it stops at? After the robot moves one time, whenever the robot stops at some cell, it will always face a specific direction. i.e., The direction it faces is determined by the cell it stops at. Can you precompute what direction it faces when it stops at each cell along the perimeter, and reuse the results?",
          "output": "class Robot:\n\n    def __init__(self, width: int, height: int):\n        self.width = width\n        self.height = height\n        self.x, self.y = 0, 0\n        self.dir = 0\n        self.dx = [1, 0, -1, 0]\n        self.dy = [0, 1, 0, -1]\n\n    def step(self, num: int):\n        while num > 0:\n            nx, ny = self.x + self.dx[self.dir], self.y + self.dy[self.dir]\n            if 0 <= nx < self.width and 0 <= ny < self.height:\n                self.x, self.y = nx, ny\n            else:\n                self.dir = (self.dir + 1) % 4\n                num += 1  # Retry the step\n            num -= 1\n\n    def getPos(self) -> list[int]:\n        return [self.x, self.y]\n\n    def getDir(self) -> str:\n        return [\"East\", \"North\", \"West\", \"South\"][self.dir]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `items` where `items[i] = [pricei, beautyi]` denotes the **price** and **beauty** of an item respectively.\n\nYou are also given a **0-indexed** integer array `queries`. For each `queries[j]`, you want to determine the **maximum beauty** of an item whose **price** is **less than or equal** to `queries[j]`. If no such item exists, then the answer to this query is `0`.\n\nReturn _an array_ `answer` _of the same length as_ `queries` _where_ `answer[j]` _is the answer to the_ `jth` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** items = \\[\\[1,2\\],\\[3,2\\],\\[2,4\\],\\[5,6\\],\\[3,5\\]\\], queries = \\[1,2,3,4,5,6\\]\n**Output:** \\[2,4,5,5,6,6\\]\n**Explanation:**\n- For queries\\[0\\]=1, \\[1,2\\] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries\\[1\\]=2, the items which can be considered are \\[1,2\\] and \\[2,4\\]. \n  The maximum beauty among them is 4.\n- For queries\\[2\\]=3 and queries\\[3\\]=4, the items which can be considered are \\[1,2\\], \\[3,2\\], \\[2,4\\], and \\[3,5\\].\n  The maximum beauty among them is 5.\n- For queries\\[4\\]=5 and queries\\[5\\]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.\n\n**Example 2:**\n\n**Input:** items = \\[\\[1,2\\],\\[1,2\\],\\[1,3\\],\\[1,4\\]\\], queries = \\[1\\]\n**Output:** \\[4\\]\n**Explanation:** \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.  \n\n**Example 3:**\n\n**Input:** items = \\[\\[10,1000\\]\\], queries = \\[5\\]\n**Output:** \\[0\\]\n**Explanation:**\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0.\n\n**Constraints:**\n\n*   `1 <= items.length, queries.length <= 105`\n*   `items[i].length == 2`\n*   `1 <= pricei, beautyi, queries[j] <= 109`Can we process the queries in a smart order to avoid repeatedly checking the same items? How can we use the answer to a query for other queries?",
          "output": "from bisect import bisect_right\n\ndef maxPrices(items, queries):\n    answer = []\n    sorted_items = [item[0] for item in items]\n    sorted_items.sort()\n\n    max_beauty = 0\n    for i, price in enumerate(sorted_items):\n        max_beauty = max(max_beauty, items[i][1])\n        sorted_items[i] = max_beauty\n\n    for query in queries:\n        idx = bisect_right(sorted_items, query) - 1\n        answer.append(sorted_items[idx] if idx >= 0 else 0)\n\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` tasks and `m` workers. Each task has a strength requirement stored in a **0-indexed** integer array `tasks`, with the `ith` task requiring `tasks[i]` strength to complete. The strength of each worker is stored in a **0-indexed** integer array `workers`, with the `jth` worker having `workers[j]` strength. Each worker can only be assigned to a **single** task and must have a strength **greater than or equal** to the task's strength requirement (i.e., `workers[j] >= tasks[i]`).\n\nAdditionally, you have `pills` magical pills that will **increase a worker's strength** by `strength`. You can decide which workers receive the magical pills, however, you may only give each worker **at most one** magical pill.\n\nGiven the **0-indexed** integer arrays `tasks` and `workers` and the integers `pills` and `strength`, return _the **maximum** number of tasks that can be completed._\n\n",
          "input": "**Example 1:**\n\n**Input:** tasks = \\[**3**,**2**,**1**\\], workers = \\[**0**,**3**,**3**\\], pills = 1, strength = 1\n**Output:** 3\n**Explanation:**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 >= 1)\n- Assign worker 1 to task 1 (3 >= 2)\n- Assign worker 2 to task 0 (3 >= 3)\n\n**Example 2:**\n\n**Input:** tasks = \\[**5**,4\\], workers = \\[**0**,0,0\\], pills = 1, strength = 5\n**Output:** 1\n**Explanation:**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 >= 5)\n\n**Example 3:**\n\n**Input:** tasks = \\[**10**,**15**,30\\], workers = \\[**0**,**10**,10,10,10\\], pills = 3, strength = 10\n**Output:** 2\n**Explanation:**\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 >= 10)\n- Assign worker 1 to task 1 (10 + 10 >= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task.\n\n**Constraints:**\n\n*   `n == tasks.length`\n*   `m == workers.length`\n*   `1 <= n, m <= 5 * 104`\n*   `0 <= pills <= m`\n*   `0 <= tasks[i], workers[j], strength <= 109`Is it possible to assign the first k smallest tasks to the workers? How can you efficiently try every k?",
          "output": "def maxTasks(tasks, workers, pills, strength):\n  tasks.sort()\n  workers.sort()\n\n  cnt = 0\n  i = 0\n  for j in range(pills):\n    while i < len(tasks) and tasks[i] > workers[j] + strength:\n      i += 1\n    if i < len(tasks):\n      cnt += 1\n      i += 1\n\n  i = 0\n  for j in range(pills, len(workers)):\n    if i < len(tasks) and tasks[i] <= workers[j]:\n      cnt += 1\n      i += 1\n      \n  return cnt\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **0-indexed** integer array `nums`, return _the **smallest** index_ `i` _of_ `nums` _such that_ `i mod 10 == nums[i]`_, or_ `-1` _if such index does not exist_.\n\n`x mod y` denotes the **remainder** when `x` is divided by `y`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,2\\]\n**Output:** 0\n**Explanation:** \ni=0: 0 mod 10 = 0 == nums\\[0\\].\ni=1: 1 mod 10 = 1 == nums\\[1\\].\ni=2: 2 mod 10 = 2 == nums\\[2\\].\nAll indices have i mod 10 == nums\\[i\\], so we return the smallest index 0.\n\n**Example 2:**\n\n**Input:** nums = \\[4,3,2,1\\]\n**Output:** 2\n**Explanation:** \ni=0: 0 mod 10 = 0 != nums\\[0\\].\ni=1: 1 mod 10 = 1 != nums\\[1\\].\ni=2: 2 mod 10 = 2 == nums\\[2\\].\ni=3: 3 mod 10 = 3 != nums\\[3\\].\n2 is the only index which has i mod 10 == nums\\[i\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5,6,7,8,9,0\\]\n**Output:** -1\n**Explanation:** No index satisfies i mod 10 == nums\\[i\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 9`Starting with i=0, check the condition for each index. The first one you find to be true is the smallest index.",
          "output": "def smallest_index(nums):\n    for i, num in enumerate(nums):\n        if i % 10 == num:\n            return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: A **critical point** in a linked list is defined as **either** a **local maxima** or a **local minima**.\n\nA node is a **local maxima** if the current node has a value **strictly greater** than the previous node and the next node.\n\nA node is a **local minima** if the current node has a value **strictly smaller** than the previous node and the next node.\n\nNote that a node can only be a local maxima/minima if there exists **both** a previous node and a next node.\n\nGiven a linked list `head`, return _an array of length 2 containing_ `[minDistance, maxDistance]` _where_ `minDistance` _is the **minimum distance** between **any two distinct** critical points and_ `maxDistance` _is the **maximum distance** between **any two distinct** critical points. If there are **fewer** than two critical points, return_ `[-1, -1]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[3,1\\]\n**Output:** \\[-1,-1\\]\n**Explanation:** There are no critical points in \\[3,1\\].\n\n**Example 2:**\n\n**Input:** head = \\[5,3,1,2,5,1,2\\]\n**Output:** \\[1,3\\]\n**Explanation:** There are three critical points:\n- \\[5,3,**1**,2,5,1,2\\]: The third node is a local minima because 1 is less than 3 and 2.\n- \\[5,3,1,2,**5**,1,2\\]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- \\[5,3,1,2,5,**1**,2\\]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.\n\n**Example 3:**\n\n**Input:** head = \\[1,3,2,2,3,2,2,2,7\\]\n**Output:** \\[3,3\\]\n**Explanation:** There are two critical points:\n- \\[1,**3**,2,2,3,2,2,2,7\\]: The second node is a local maxima because 3 is greater than 1 and 2.\n- \\[1,3,2,2,**3**,2,2,2,7\\]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[2, 105]`.\n*   `1 <= Node.val <= 105`The maximum distance must be the distance between the first and last critical point. For each adjacent critical point, calculate the difference and check if it is the minimum distance.",
          "output": "def get_concatenation(nums):\n    n = len(nums)\n    ans = [0] * (2 * n)\n    for i in range(n):\n        ans[i] = nums[i]\n        ans[i + n] = nums[i]\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` containing **distinct** numbers, an integer `start`, and an integer `goal`. There is an integer `x` that is initially set to `start`, and you want to perform operations on `x` such that it is converted to `goal`. You can perform the following operation repeatedly on the number `x`:\n\nIf `0 <= x <= 1000`, then for any index `i` in the array (`0 <= i < nums.length`), you can set `x` to any of the following:\n\n*   `x + nums[i]`\n*   `x - nums[i]`\n*   `x ^ nums[i]` (bitwise-XOR)\n\nNote that you can use each `nums[i]` any number of times in any order. Operations that set `x` to be out of the range `0 <= x <= 1000` are valid, but no more operations can be done afterward.\n\nReturn _the **minimum** number of operations needed to convert_ `x = start` _into_ `goal`_, and_ `-1` _if it is not possible_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,4,12\\], start = 2, goal = 12\n**Output:** 2\n**Explanation:** We can go from 2 -> 14 -> 12 with the following 2 operations.\n- 2 + 12 = 14\n- 14 - 2 = 12\n\n**Example 2:**\n\n**Input:** nums = \\[3,5,7\\], start = 0, goal = -4\n**Output:** 2\n**Explanation:** We can go from 0 -> 3 -> -4 with the following 2 operations. \n- 0 + 3 = 3\n- 3 - 7 = -4\nNote that the last operation sets x out of the range 0 <= x <= 1000, which is valid.\n\n**Example 3:**\n\n**Input:** nums = \\[2,8,16\\], start = 0, goal = 1\n**Output:** -1\n**Explanation:** There is no way to convert 0 into 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-109 <= nums[i], goal <= 109`\n*   `0 <= start <= 1000`\n*   `start != goal`\n*   All the integers in `nums` are distinct.Once x drops below 0 or goes above 1000, is it possible to continue performing operations on x? How can you use BFS to find the minimum operations?",
          "output": "def count_three_char_palindromes(s):\n    count = 0\n    freq = {}\n    for ch in s:\n        if ch in freq:\n            freq[ch] += 1\n        else:\n            freq[ch] = 1\n    for value in freq.values():\n        count += value * (value - 1) // 2\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: An original string, consisting of lowercase English letters, can be encoded by the following steps:\n\n*   Arbitrarily **split** it into a **sequence** of some number of **non-empty** substrings.\n*   Arbitrarily choose some elements (possibly none) of the sequence, and **replace** each with **its length** (as a numeric string).\n*   **Concatenate** the sequence as the encoded string.\n\nFor example, **one way** to encode an original string `\"abcdefghijklmnop \"` might be:\n\n*   Split it as a sequence: `[ \"ab \", \"cdefghijklmn \", \"o \", \"p \"]`.\n*   Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes `[ \"ab \", \"12 \", \"1 \", \"p \"]`.\n*   Concatenate the elements of the sequence to get the encoded string: `\"ab121p \"`.\n\nGiven two encoded strings `s1` and `s2`, consisting of lowercase English letters and digits `1-9` (inclusive), return `true` _if there exists an original string that could be encoded as **both**_ `s1` _and_ `s2`_. Otherwise, return_ `false`.\n\n**Note**: The test cases are generated such that the number of consecutive digits in `s1` and `s2` does not exceed `3`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s1 =  \"internationalization \", s2 =  \"i18n \"\n**Output:** true\n**Explanation:** It is possible that  \"internationalization \" was the original string.\n-  \"internationalization \" \n  -> Split:       \\[ \"internationalization \"\\]\n  -> Do not replace any element\n  -> Concatenate:   \"internationalization \", which is s1.\n-  \"internationalization \"\n  -> Split:       \\[ \"i \",  \"nternationalizatio \",  \"n \"\\]\n  -> Replace:     \\[ \"i \",  \"18 \",                  \"n \"\\]\n  -> Concatenate:   \"i18n \", which is s2\n\n**Example 2:**\n\n**Input:** s1 =  \"l123e \", s2 =  \"44 \"\n**Output:** true\n**Explanation:** It is possible that  \"leetcode \" was the original string.\n-  \"leetcode \" \n  -> Split:      \\[ \"l \",  \"e \",  \"et \",  \"cod \",  \"e \"\\]\n  -> Replace:    \\[ \"l \",  \"1 \",  \"2 \",   \"3 \",    \"e \"\\]\n  -> Concatenate:  \"l123e \", which is s1.\n-  \"leetcode \" \n  -> Split:      \\[ \"leet \",  \"code \"\\]\n  -> Replace:    \\[ \"4 \",     \"4 \"\\]\n  -> Concatenate:  \"44 \", which is s2.\n\n**Example 3:**\n\n**Input:** s1 =  \"a5b \", s2 =  \"c5b \"\n**Output:** false\n**Explanation:** It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'.\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 40`\n*   `s1` and `s2` consist of digits `1-9` (inclusive), and lowercase English letters only.\n*   The number of consecutive digits in `s1` and `s2` does not exceed `3`.For s1 and s2, divide each into a sequence of single alphabet strings and digital strings. The problem now becomes comparing if two sequences are equal. A single alphabet string has no variation, but a digital string has variations. For example: \"124\" can be interpreted as 1+2+4, 12+4, 1+24, and 124 wildcard characters. There are four kinds of comparisons: a single alphabet vs another; a single alphabet vs a number, a number vs a single alphabet, and a number vs another number. In the case of a number vs another (a single alphabet or a number), can you decrease the number by the min length of both? There is a recurrence relation in the search which ends when either a single alphabet != another, or one sequence ran out, or both sequences ran out.",
          "output": "def merge_trees(trees):\n    while len(trees) > 1:\n        tree1 = trees.pop()\n        tree2 = trees.pop()\n\n        if tree1.val < tree2.val:\n            tree1.right = tree2\n            trees.append(tree1)\n        else:\n            tree2.right = tree1\n            trees.append(tree2)\n    return None if not trees else trees[0]\n"
     },
     {
          "instruction": "Write python code for this problem: A **substring** is a contiguous (non-empty) sequence of characters within a string.\n\nA **vowel substring** is a substring that **only** consists of vowels (`'a'`, `'e'`, `'i'`, `'o'`, and `'u'`) and has **all five** vowels present in it.\n\nGiven a string `word`, return _the number of **vowel substrings** in_ `word`.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"aeiouu \"\n**Output:** 2\n**Explanation:** The vowel substrings of word are as follows (underlined):\n-  \"**aeiou**u \"\n-  \"**aeiouu** \"\n\n**Example 2:**\n\n**Input:** word =  \"unicornarihan \"\n**Output:** 0\n**Explanation:** Not all 5 vowels are present, so there are no vowel substrings.\n\n**Example 3:**\n\n**Input:** word =  \"cuaieuouac \"\n**Output:** 7\n**Explanation:** The vowel substrings of word are as follows (underlined):\n-  \"c**uaieuo**uac \"\n-  \"c**uaieuou**ac \"\n-  \"c**uaieuoua**c \"\n-  \"cu**aieuo**uac \"\n-  \"cu**aieuou**ac \"\n-  \"cu**aieuoua**c \"\n-  \"cua**ieuoua**c \"\n\n**Constraints:**\n\n*   `1 <= word.length <= 100`\n*   `word` consists of lowercase English letters only.While generating substrings starting at any index, do you need to continue generating larger substrings if you encounter a consonant? Can you store the count of characters to avoid generating substrings altogether?",
          "output": "def count_vowel_substrings(word: str) -> int:\n    count, a, e, i, o, u = 0, 0, 0, 0, 0, 0\n    for c in word:\n        if c == 'a': a += 1\n        elif c == 'e': e = a + e\n        elif c == 'i': i = e + i\n        elif c == 'o': o = i + o\n        elif c == 'u': u = o + u\n    return u\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `word`, return _the **sum of the number of vowels** (_`'a'`, `'e'`_,_ `'i'`_,_ `'o'`_, and_ `'u'`_)_ _in every substring of_ `word`.\n\nA **substring** is a contiguous (non-empty) sequence of characters within a string.\n\n**Note:** Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.\n\n",
          "input": "**Example 1:**\n\n**Input:** word =  \"aba \"\n**Output:** 6\n**Explanation:** \nAll possible substrings are:  \"a \",  \"ab \",  \"aba \",  \"b \",  \"ba \", and  \"a \".\n-  \"b \" has 0 vowels in it\n-  \"a \",  \"ab \",  \"ba \", and  \"a \" have 1 vowel each\n-  \"aba \" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6. \n\n**Example 2:**\n\n**Input:** word =  \"abc \"\n**Output:** 3\n**Explanation:** \nAll possible substrings are:  \"a \",  \"ab \",  \"abc \",  \"b \",  \"bc \", and  \"c \".\n-  \"a \",  \"ab \", and  \"abc \" have 1 vowel each\n-  \"b \",  \"bc \", and  \"c \" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.\n\n**Example 3:**\n\n**Input:** word =  \"ltcd \"\n**Output:** 0\n**Explanation:** There are no vowels in any substring of  \"ltcd \".\n\n**Constraints:**\n\n*   `1 <= word.length <= 105`\n*   `word` consists of lowercase English letters.Since generating substrings is not an option, can we count the number of substrings a vowel appears in? How much does each vowel contribute to the total sum?",
          "output": "def count_vowels(word):\n    sum = 0\n    count = 0\n    for letter in word:\n        if letter in \"aeiou\":\n            count += 1\n        sum += count\n    return sum\n\ndef count_vowels_in_substrings(word):\n    return count_vowels(word)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` indicating there are `n` specialty retail stores. There are `m` product types of varying amounts, which are given as a **0-indexed** integer array `quantities`, where `quantities[i]` represents the number of products of the `ith` product type.\n\nYou need to distribute **all products** to the retail stores following these rules:\n\n*   A store can only be given **at most one product type** but can be given **any** amount of it.\n*   After distribution, each store will have been given some number of products (possibly `0`). Let `x` represent the maximum number of products given to any store. You want `x` to be as small as possible, i.e., you want to **minimize** the **maximum** number of products that are given to any store.\n\nReturn _the minimum possible_ `x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, quantities = \\[11,6\\]\n**Output:** 3\n**Explanation:** One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.\n\n**Example 2:**\n\n**Input:** n = 7, quantities = \\[15,10,10\\]\n**Output:** 5\n**Explanation:** One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5.\n\n**Example 3:**\n\n**Input:** n = 1, quantities = \\[100000\\]\n**Output:** 100000\n**Explanation:** The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000.\n\n**Constraints:**\n\n*   `m == quantities.length`\n*   `1 <= m <= n <= 105`\n*   `1 <= quantities[i] <= 105`There exists a monotonic nature such that when x is smaller than some number, there will be no way to distribute, and when x is not smaller than that number, there will always be a way to distribute. If you are given a number k, where the number of products given to any store does not exceed k, could you determine if all products can be distributed? Implement a function canDistribute(k), which returns true if you can distribute all products such that any store will not be given more than k products, and returns false if you cannot. Use this function to binary search for the smallest possible k.",
          "output": "def minimum_maximum(n, quantities):\n    sum_products = sum(quantities)\n    x = (sum_products + n - 1) // n\n    remaining_stores = n\n    for q in quantities:\n        remaining_stores -= (q + x - 1) // x\n        if remaining_stores < 0:\n            x = (sum_products + remaining_stores) // (n + remaining_stores)\n            remaining_stores = n\n    return x\n"
     },
     {
          "instruction": "Write python code for this problem: There is an **undirected** graph with `n` nodes numbered from `0` to `n - 1` (**inclusive**). You are given a **0-indexed** integer array `values` where `values[i]` is the **value** of the `ith` node. You are also given a **0-indexed** 2D integer array `edges`, where each `edges[j] = [uj, vj, timej]` indicates that there is an undirected edge between the nodes `uj` and `vj`, and it takes `timej` seconds to travel between the two nodes. Finally, you are given an integer `maxTime`.\n\nA **valid** **path** in the graph is any path that starts at node `0`, ends at node `0`, and takes **at most** `maxTime` seconds to complete. You may visit the same node multiple times. The **quality** of a valid path is the **sum** of the values of the **unique nodes** visited in the path (each node's value is added **at most once** to the sum).\n\nReturn _the **maximum** quality of a valid path_.\n\n**Note:** There are **at most four** edges connected to each node.\n\n",
          "input": "**Example 1:**\n\n**Input:** values = \\[0,32,10,43\\], edges = \\[\\[0,1,10\\],\\[1,2,15\\],\\[0,3,10\\]\\], maxTime = 49\n**Output:** 75\n**Explanation:**\nOne possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.\n\n**Example 2:**\n\n**Input:** values = \\[5,10,15,20\\], edges = \\[\\[0,1,10\\],\\[1,2,10\\],\\[0,3,10\\]\\], maxTime = 30\n**Output:** 25\n**Explanation:**\nOne possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.\n\n**Example 3:**\n\n**Input:** values = \\[1,2,3,4\\], edges = \\[\\[0,1,10\\],\\[1,2,11\\],\\[2,3,12\\],\\[1,3,13\\]\\], maxTime = 50\n**Output:** 7\n**Explanation:**\nOne possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.\n\n**Constraints:**\n\n*   `n == values.length`\n*   `1 <= n <= 1000`\n*   `0 <= values[i] <= 108`\n*   `0 <= edges.length <= 2000`\n*   `edges[j].length == 3`\n*   `0 <= uj < vj <= n - 1`\n*   `10 <= timej, maxTime <= 100`\n*   All the pairs `[uj, vj]` are **unique**.\n*   There are **at most four** edges connected to each node.\n*   The graph may not be connected.How many nodes can you visit within maxTime seconds? Can you try every valid path?",
          "output": "from collections import defaultdict\n\ndef maxQuality_dfs(node, time_left, visited, values, neighbors):\n    acc = 0\n    for neighbor, cost in neighbors[node]:\n        if time_left >= cost and not visited[neighbor]:\n            visited[neighbor] = 1\n            acc = max(acc, values[neighbor] + maxQuality_dfs(neighbor, time_left - cost, visited, values, neighbors))\n            visited[neighbor] = 0\n    return acc\n\ndef maxQuality(values, edges, maxTime):\n    neighbors = defaultdict(list)\n    for u, v, cost in edges:\n        neighbors[u].append((v, cost))\n        neighbors[v].append((u, cost))\n    visited = [0] * len(values)\n    return maxQuality_dfs(0, maxTime, visited, values, neighbors)\n"
     },
     {
          "instruction": "Write python code for this problem: Given two string arrays `words1` and `words2`, return _the number of strings that appear **exactly once** in **each** of the two arrays._\n\n",
          "input": "**Example 1:**\n\n**Input:** words1 = \\[ \"leetcode \", \"is \", \"amazing \", \"as \", \"is \"\\], words2 = \\[ \"amazing \", \"leetcode \", \"is \"\\]\n**Output:** 2\n**Explanation:**\n-  \"leetcode \" appears exactly once in each of the two arrays. We count this string.\n-  \"amazing \" appears exactly once in each of the two arrays. We count this string.\n-  \"is \" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n-  \"as \" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays.\n\n**Example 2:**\n\n**Input:** words1 = \\[ \"b \", \"bb \", \"bbb \"\\], words2 = \\[ \"a \", \"aa \", \"aaa \"\\]\n**Output:** 0\n**Explanation:** There are no strings that appear in each of the two arrays.\n\n**Example 3:**\n\n**Input:** words1 = \\[ \"a \", \"ab \"\\], words2 = \\[ \"a \", \"a \", \"a \", \"ab \"\\]\n**Output:** 1\n**Explanation:** The only string that appears exactly once in each of the two arrays is  \"ab \".\n\n**Constraints:**\n\n*   `1 <= words1.length, words2.length <= 1000`\n*   `1 <= words1[i].length, words2[j].length <= 30`\n*   `words1[i]` and `words2[j]` consists only of lowercase English letters.Could you try every word? Could you use a hash map to achieve a good complexity?",
          "output": "def rearrangeArray(nums):\n    nums.sort()\n    for i in range(1, len(nums) - 1, 2):\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `m x n` grid, where `(0, 0)` is the top-left cell and `(m - 1, n - 1)` is the bottom-right cell. You are given an integer array `startPos` where `startPos = [startrow, startcol]` indicates that **initially**, a **robot** is at the cell `(startrow, startcol)`. You are also given an integer array `homePos` where `homePos = [homerow, homecol]` indicates that its **home** is at the cell `(homerow, homecol)`.\n\nThe robot needs to go to its home. It can move one cell in four directions: **left**, **right**, **up**, or **down**, and it can not move outside the boundary. Every move incurs some cost. You are further given two **0-indexed** integer arrays: `rowCosts` of length `m` and `colCosts` of length `n`.\n\n*   If the robot moves **up** or **down** into a cell whose **row** is `r`, then this move costs `rowCosts[r]`.\n*   If the robot moves **left** or **right** into a cell whose **column** is `c`, then this move costs `colCosts[c]`.\n\nReturn _the **minimum total cost** for this robot to return home_.\n\n",
          "input": "**Example 1:**\n\n**Input:** startPos = \\[1, 0\\], homePos = \\[2, 3\\], rowCosts = \\[5, 4, 3\\], colCosts = \\[8, 2, 6, 7\\]\n**Output:** 18\n**Explanation:** One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (**2**, 0). This move costs rowCosts\\[2\\] = 3.\n-> It goes right to (2, **1**). This move costs colCosts\\[1\\] = 2.\n-> It goes right to (2, **2**). This move costs colCosts\\[2\\] = 6.\n-> It goes right to (2, **3**). This move costs colCosts\\[3\\] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18\n\n**Example 2:**\n\n**Input:** startPos = \\[0, 0\\], homePos = \\[0, 0\\], rowCosts = \\[5\\], colCosts = \\[26\\]\n**Output:** 0\n**Explanation:** The robot is already at its home. Since no moves occur, the total cost is 0.\n\n**Constraints:**\n\n*   `m == rowCosts.length`\n*   `n == colCosts.length`\n*   `1 <= m, n <= 105`\n*   `0 <= rowCosts[r], colCosts[c] <= 104`\n*   `startPos.length == 2`\n*   `homePos.length == 2`\n*   `0 <= startrow, homerow < m`\n*   `0 <= startcol, homecol < n`Irrespective of what path the robot takes, it will have to traverse all the rows between startRow and homeRow and all the columns between startCol and homeCol. Hence, making any other move other than traversing the required rows and columns will potentially incur more cost which can be avoided.",
          "output": "def minTotalCost(startPos, homePos, rowCosts, colCosts):\n    row_difference = abs(startPos[0] - homePos[0])\n    col_difference = abs(startPos[1] - homePos[1])\n\n    row_cost = sum(rowCosts[min(startPos[0], homePos[0]):min(startPos[0], homePos[0]) + row_difference])\n    col_cost = sum(colCosts[min(startPos[1], homePos[1]):min(startPos[1], homePos[1]) + col_difference])\n\n    return row_cost + col_cost\n"
     },
     {
          "instruction": "Write python code for this problem: A farmer has a **rectangular grid** of land with `m` rows and `n` columns that can be divided into unit cells. Each cell is either **fertile** (represented by a `1`) or **barren** (represented by a `0`). All cells outside the grid are considered barren.\n\nA **pyramidal plot** of land can be defined as a set of cells with the following criteria:\n\n1.  The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**.\n2.  The **apex** of a pyramid is the **topmost** cell of the pyramid. The **height** of a pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r <= i <= r + h - 1` **and** `c - (i - r) <= j <= c + (i - r)`.\n\nAn **inverse pyramidal plot** of land can be defined as a set of cells with similar criteria:\n\n1.  The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**.\n2.  The **apex** of an inverse pyramid is the **bottommost** cell of the inverse pyramid. The **height** of an inverse pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r - h + 1 <= i <= r` **and** `c - (r - i) <= j <= c + (r - i)`.\n\nSome examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.\n\nGiven a **0-indexed** `m x n` binary matrix `grid` representing the farmland, return _the **total number** of pyramidal and inverse pyramidal plots that can be found in_ `grid`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1,1,0\\],\\[1,1,1,1\\]\\]\n**Output:** 2\n**Explanation:** The 2 possible pyramidal plots are shown in blue and red respectively.\nThere are no inverse pyramidal plots in this grid. \nHence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[1,1,1\\]\\]\n**Output:** 2\n**Explanation:** The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red. \nHence the total number of plots is 1 + 1 = 2.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,1,1,0\\],\\[1,1,1,1,1\\],\\[1,1,1,1,1\\],\\[0,1,0,0,1\\]\\]\n**Output:** 13\n**Explanation:** There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.\nThere are 6 inverse pyramidal plots, 2 of which are shown in the last figure.\nThe total number of plots is 7 + 6 = 13.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 1000`\n*   `1 <= m * n <= 105`\n*   `grid[i][j]` is either `0` or `1`.Think about how dynamic programming can help solve the problem. For any fixed cell (r, c), can you calculate the maximum height of the pyramid for which it is the apex? Let us denote this value as dp[r][c]. How will the values at dp[r+1][c-1] and dp[r+1][c+1] help in determining the value at dp[r][c]? For the cell (r, c), is there a relation between the number of pyramids for which it serves as the apex and dp[r][c]? How does it help in calculating the answer?",
          "output": "def min_time_to_type(word: str) -> int:\n    time, prev = 0, 0\n    for c in word:\n        pos = ord(c) - ord('a')\n        time += min(abs(pos - prev), 26 - abs(pos - prev)) + 1\n        prev = pos\n    return time\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` people in a line queuing to buy tickets, where the `0th` person is at the **front** of the line and the `(n - 1)th` person is at the **back** of the line.\n\nYou are given a **0-indexed** integer array `tickets` of length `n` where the number of tickets that the `ith` person would like to buy is `tickets[i]`.\n\nEach person takes **exactly 1 second** to buy a ticket. A person can only buy **1 ticket at a time** and has to go back to **the end** of the line (which happens **instantaneously**) in order to buy more tickets. If a person does not have any tickets left to buy, the person will **leave** the line.\n\nReturn _the **time taken** for the person at position_ `k` **_(0-indexed)_** _to finish buying tickets_.\n\n",
          "input": "**Example 1:**\n\n**Input:** tickets = \\[2,3,2\\], k = 2\n**Output:** 6\n**Explanation:** \n- In the first pass, everyone in the line buys a ticket and the line becomes \\[1, 2, 1\\].\n- In the second pass, everyone in the line buys a ticket and the line becomes \\[0, 1, 0\\].\nThe person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.\n\n**Example 2:**\n\n**Input:** tickets = \\[5,1,1,1\\], k = 0\n**Output:** 8\n**Explanation:**\n- In the first pass, everyone in the line buys a ticket and the line becomes \\[4, 0, 0, 0\\].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.\n\n**Constraints:**\n\n*   `n == tickets.length`\n*   `1 <= n <= 100`\n*   `1 <= tickets[i] <= 100`\n*   `0 <= k < n`Loop through the line of people and decrement the number of tickets for each to buy one at a time as if simulating the line moving forward. Keep track of how many tickets have been sold up until person k has no more tickets to buy. Remember that those who have no more tickets to buy will leave the line.",
          "output": "def time_to_buy_tickets(tickets, k):\n    time = 0\n    while tickets[k] > 0:\n        for i in range(len(tickets)):\n            if tickets[i] > 0:\n                tickets[i] -= 1\n                time += 1\n                if i == k and tickets[k] == 0:\n                    break\n    return time\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `head` of a linked list.\n\nThe nodes in the linked list are **sequentially** assigned to **non-empty** groups whose lengths form the sequence of the natural numbers (`1, 2, 3, 4, ...`). The **length** of a group is the number of nodes assigned to it. In other words,\n\n*   The `1st` node is assigned to the first group.\n*   The `2nd` and the `3rd` nodes are assigned to the second group.\n*   The `4th`, `5th`, and `6th` nodes are assigned to the third group, and so on.\n\nNote that the length of the last group may be less than or equal to `1 + the length of the second to last group`.\n\n**Reverse** the nodes in each group with an **even** length, and return _the_ `head` _of the modified linked list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[5,2,6,3,9,1,7,3,8,4\\]\n**Output:** \\[5,6,2,3,9,1,4,8,3,7\\]\n**Explanation:**\n- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed.\n\n**Example 2:**\n\n**Input:** head = \\[1,1,0,6\\]\n**Output:** \\[1,0,1,6\\]\n**Explanation:**\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs.\n\n**Example 3:**\n\n**Input:** head = \\[1,1,0,6,5\\]\n**Output:** \\[1,0,1,5,6\\]\n**Explanation:**\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 105]`.\n*   `0 <= Node.val <= 105`Consider the list structure ...A \u2192 (B \u2192 ... \u2192 C) \u2192 D..., where the nodes between B and C (inclusive) form a group, A is the last node of the previous group, and D is the first node of the next group. How can you utilize this structure? Suppose you have B \u2192 ... \u2192 C reversed (because it was of even length) so that it is now C \u2192 ... \u2192 B. What references do you need to fix so that the transitions between the previous, current, and next groups are correct? A.next should be set to C, and B.next should be set to D. Once the current group is finished being modified, you need to find the new A, B, C, and D nodes for the next group. How can you use the old A, B, C, and D nodes to find the new ones? The new A is either the old B or old C depending on if the group was of even or odd length. The new B is always the old D. The new C and D can be found based on the new B and the next group's length. You can set the initial values of A, B, C, and D to A = null, B = head, C = head, D = head.next. Repeat the steps from the previous hints until D is null.",
          "output": "class Solution:\n    def reverseGroup(self, head, k):\n        if not head or k == 1:\n            return head\n        prev = None\n        cur = head\n        for _ in range(k):\n            next = cur.next\n            cur.next = prev\n            prev = cur\n            cur = next\n        head.next = cur\n        return prev\n\n    def reverseEvenGroups(self, head):\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        n = 0\n        cur = head\n        while cur:\n            n += 1\n            cur = cur.next\n        i, k = 1, 1\n        while n >= 0 and k <= n:\n            if i % 2 == 0:\n                tail = prev.next\n                next = prev.next\n                for _ in range(k):\n                    next = next.next\n                prev.next = self.reverseGroup(tail, k)\n                tail.next = next\n            n -= k\n            for _ in range(k):\n                prev = prev.next\n            i += 1\n            k += i\n        return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: A string `originalText` is encoded using a **slanted transposition cipher** to a string `encodedText` with the help of a matrix having a **fixed number of rows** `rows`.\n\n`originalText` is placed first in a top-left to bottom-right manner.\n\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of `originalText`. The arrow indicates the order in which the cells are filled. All empty cells are filled with `' '`. The number of columns is chosen such that the rightmost column will **not be empty** after filling in `originalText`.\n\n`encodedText` is then formed by appending all characters of the matrix in a row-wise fashion.\n\nThe characters in the blue cells are appended first to `encodedText`, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\n\nFor example, if `originalText = \"cipher \"` and `rows = 3`, then we encode it in the following manner:\n\nThe blue arrows depict how `originalText` is placed in the matrix, and the red arrows denote the order in which `encodedText` is formed. In the above example, `encodedText = \"ch ie pr \"`.\n\nGiven the encoded string `encodedText` and number of rows `rows`, return _the original string_ `originalText`.\n\n**Note:** `originalText` **does not** have any trailing spaces `' '`. The test cases are generated such that there is only one possible `originalText`.\n\n",
          "input": "**Example 1:**\n\n**Input:** encodedText =  \"ch   ie   pr \", rows = 3\n**Output:**  \"cipher \"\n**Explanation:** This is the same example described in the problem description.\n\n**Example 2:**\n\n**Input:** encodedText =  \"iveo    eed   l te   olc \", rows = 4\n**Output:**  \"i love leetcode \"\n**Explanation:** The figure above denotes the matrix that was used to encode originalText. \nThe blue arrows show how we can find originalText from encodedText.\n\n**Example 3:**\n\n**Input:** encodedText =  \"coding \", rows = 1\n**Output:**  \"coding \"\n**Explanation:** Since there is only 1 row, both originalText and encodedText are the same.\n\n**Constraints:**\n\n*   `0 <= encodedText.length <= 106`\n*   `encodedText` consists of lowercase English letters and `' '` only.\n*   `encodedText` is a valid encoding of some `originalText` that **does not** have trailing spaces.\n*   `1 <= rows <= 1000`\n*   The testcases are generated such that there is **only one** possible `originalText`.How can you use rows and encodedText to find the number of columns of the matrix? Once you have the number of rows and columns, you can create the matrix and place encodedText in it. How should you place it in the matrix? How should you traverse the matrix to \"decode\" originalText?",
          "output": "def slanted_transposition_cipher(encodedText, rows):\n    if rows == 1:\n        return encodedText\n    \n    n = len(encodedText)\n    cols = (n + rows - 2) // (rows - 1)\n    pos = 0\n    matrix = [[' ' for col in range(cols)] for row in range(rows)]\n    for k in range(cols):\n        for i in range(rows):\n            if k % 2 == 0 or i != 0:\n                matrix[i][k] = encodedText[pos]\n                pos += 1\n                \n    originalText = ''.join(''.join(row) for row in matrix)\n    \n    return originalText\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` indicating the number of people in a network. Each person is labeled from `0` to `n - 1`.\n\nYou are also given a **0-indexed** 2D integer array `restrictions`, where `restrictions[i] = [xi, yi]` means that person `xi` and person `yi` **cannot** become **friends**, either **directly** or **indirectly** through other people.\n\nInitially, no one is friends with each other. You are given a list of friend requests as a **0-indexed** 2D integer array `requests`, where `requests[j] = [uj, vj]` is a friend request between person `uj` and person `vj`.\n\nA friend request is **successful** if `uj` and `vj` can be **friends**. Each friend request is processed in the given order (i.e., `requests[j]` occurs before `requests[j + 1]`), and upon a successful request, `uj` and `vj` **become direct friends** for all future friend requests.\n\nReturn _a **boolean array**_ `result`, _where each_ `result[j]` _is_ `true` _if the_ `jth` _friend request is **successful** or_ `false` _if it is not_.\n\n**Note:** If `uj` and `vj` are already direct friends, the request is still **successful**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, restrictions = \\[\\[0,1\\]\\], requests = \\[\\[0,2\\],\\[2,1\\]\\]\n**Output:** \\[true,false\\]\n**Explanation:**\nRequest 0: Person 0 and person 2 can be friends, so they become direct friends. \nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).\n\n**Example 2:**\n\n**Input:** n = 3, restrictions = \\[\\[0,1\\]\\], requests = \\[\\[1,2\\],\\[0,2\\]\\]\n**Output:** \\[true,false\\]\n**Explanation:**\nRequest 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).\n\n**Example 3:**\n\n**Input:** n = 5, restrictions = \\[\\[0,1\\],\\[1,2\\],\\[2,3\\]\\], requests = \\[\\[0,4\\],\\[1,2\\],\\[3,1\\],\\[3,4\\]\\]\n**Output:** \\[true,false,true,false\\]\n**Explanation:**\nRequest 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).\n\n**Constraints:**\n\n*   `2 <= n <= 1000`\n*   `0 <= restrictions.length <= 1000`\n*   `restrictions[i].length == 2`\n*   `0 <= xi, yi <= n - 1`\n*   `xi != yi`\n*   `1 <= requests.length <= 1000`\n*   `requests[j].length == 2`\n*   `0 <= uj, vj <= n - 1`\n*   `uj != vj`For each request, we could loop through all restrictions. Can you think of doing a check-in close to O(1)? Could you use Union Find?",
          "output": "def alphabet_position_sum(s, k):\n    sum = 0\n    for c in s:\n        sum += ord(c) - ord('a') + 1\n    for _ in range(k):\n        new_sum = 0\n        while sum > 0:\n            new_sum += sum % 10\n            sum //= 10\n        sum = new_sum\n    return sum\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` houses evenly lined up on the street, and each house is beautifully painted. You are given a **0-indexed** integer array `colors` of length `n`, where `colors[i]` represents the color of the `ith` house.\n\nReturn _the **maximum** distance between **two** houses with **different** colors_.\n\nThe distance between the `ith` and `jth` houses is `abs(i - j)`, where `abs(x)` is the **absolute value** of `x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** colors = \\[**1**,1,1,**6**,1,1,1\\]\n**Output:** 3\n**Explanation:** In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer.\n\n**Example 2:**\n\n**Input:** colors = \\[**1**,8,3,8,**3**\\]\n**Output:** 4\n**Explanation:** In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.\n\n**Example 3:**\n\n**Input:** colors = \\[**0**,**1**\\]\n**Output:** 1\n**Explanation:** The furthest two houses with different colors are house 0 and house 1.\nHouse 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.\n\n**Constraints:**\n\n*   `n == colors.length`\n*   `2 <= n <= 100`\n*   `0 <= colors[i] <= 100`\n*   Test data are generated such that **at least** two houses have different colors.The constraints are small. Can you try the combination of every two houses? Greedily, the maximum distance will come from either the pair of the leftmost house and possibly some house on the right with a different color, or the pair of the rightmost house and possibly some house on the left with a different color.",
          "output": "from itertools import permutations\n\ndef maxCompatibilitySum(students, mentors):\n    ans = 0\n    for mentors_perm in permutations(mentors):\n        cur_sum = sum(sum(a == b for a, b in zip(student, mentor)) for student, mentor in zip(students, mentors_perm))\n        ans = max(ans, cur_sum)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `grid` where each cell is either `0` (empty) or `1` (occupied).\n\nYou are then given stamps of size `stampHeight x stampWidth`. We want to fit the stamps such that they follow the given **restrictions** and **requirements**:\n\n1.  Cover all the **empty** cells.\n2.  Do not cover any of the **occupied** cells.\n3.  We can put as **many** stamps as we want.\n4.  Stamps can **overlap** with each other.\n5.  Stamps are not allowed to be **rotated**.\n6.  Stamps must stay completely **inside** the grid.\n\nReturn `true` _if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,0,0,0\\],\\[1,0,0,0\\],\\[1,0,0,0\\],\\[1,0,0,0\\],\\[1,0,0,0\\]\\], stampHeight = 4, stampWidth = 3\n**Output:** true\n**Explanation:** We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,0,0,0\\],\\[0,1,0,0\\],\\[0,0,1,0\\],\\[0,0,0,1\\]\\], stampHeight = 2, stampWidth = 2 \n**Output:** false \n**Explanation:** There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[r].length`\n*   `1 <= m, n <= 105`\n*   `1 <= m * n <= 2 * 105`\n*   `grid[r][c]` is either `0` or `1`.\n*   `1 <= stampHeight, stampWidth <= 105`We can check if every empty cell is a part of a consecutive row of empty cells that has a width of at least stampWidth as well as a consecutive column of empty cells that has a height of at least stampHeight. We can prove that this condition is sufficient and necessary to fit the stamps while following the given restrictions and requirements. For each row, find every consecutive row of empty cells, and mark all the cells where the consecutive row is at least stampWidth wide. Do the same for the columns with stampHeight. Then, you can check if every cell is marked twice.",
          "output": "def construct2DArray(original, m, n):\n    if m * n != len(original): return []\n    res = [[0] * n for _ in range(m)]\n    for i in range(len(original)):\n        res[i // n][i % n] = original[i]\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** 2D integer array `pairs` where `pairs[i] = [starti, endi]`. An arrangement of `pairs` is **valid** if for every index `i` where `1 <= i < pairs.length`, we have `endi-1 == starti`.\n\nReturn _**any** valid arrangement of_ `pairs`.\n\n**Note:** The inputs will be generated such that there exists a valid arrangement of `pairs`.\n\n",
          "input": "**Example 1:**\n\n**Input:** pairs = \\[\\[5,1\\],\\[4,5\\],\\[11,9\\],\\[9,4\\]\\]\n**Output:** \\[\\[11,9\\],\\[9,4\\],\\[4,5\\],\\[5,1\\]\\]\n**Explanation:**\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 9 == 9 = start1 \nend1 = 4 == 4 = start2\nend2 = 5 == 5 = start3\n\n**Example 2:**\n\n**Input:** pairs = \\[\\[1,3\\],\\[3,2\\],\\[2,1\\]\\]\n**Output:** \\[\\[1,3\\],\\[3,2\\],\\[2,1\\]\\]\n**Explanation:**\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 3 == 3 = start1\nend1 = 2 == 2 = start2\nThe arrangements \\[\\[2,1\\],\\[1,3\\],\\[3,2\\]\\] and \\[\\[3,2\\],\\[2,1\\],\\[1,3\\]\\] are also valid.\n\n**Example 3:**\n\n**Input:** pairs = \\[\\[1,2\\],\\[1,3\\],\\[2,1\\]\\]\n**Output:** \\[\\[1,2\\],\\[2,1\\],\\[1,3\\]\\]\n**Explanation:**\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 2 == 2 = start1\nend1 = 1 == 1 = start2\n\n**Constraints:**\n\n*   `1 <= pairs.length <= 105`\n*   `pairs[i].length == 2`\n*   `0 <= starti, endi <= 109`\n*   `starti != endi`\n*   No two pairs are exactly the same.\n*   There **exists** a valid arrangement of `pairs`.Could you convert this into a graph problem? Consider the pairs as edges and each number as a node. We have to find an Eulerian path of this graph. Hierholzer\u2019s algorithm can be used.",
          "output": "def valid_arrangement(pairs):\n    graph = {}\n    for start, end in pairs:\n        if start not in graph:\n            graph[start] = []\n        graph[start].append(end)\n\n    result = []\n    current = pairs[0][0]\n\n    while graph:\n        pair = [current, graph[current].pop()]\n        if not graph[current]:\n            del graph[current]\n        result.append(pair)\n        current = pair[1]\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: A **k-mirror number** is a **positive** integer **without leading zeros** that reads the same both forward and backward in base-10 **as well as** in base-k.\n\n*   For example, `9` is a 2-mirror number. The representation of `9` in base-10 and base-2 are `9` and `1001` respectively, which read the same both forward and backward.\n*   On the contrary, `4` is not a 2-mirror number. The representation of `4` in base-2 is `100`, which does not read the same both forward and backward.\n\nGiven the base `k` and the number `n`, return _the **sum** of the_ `n` _**smallest** k-mirror numbers_.\n\n",
          "input": "**Example 1:**\n\n**Input:** k = 2, n = 5\n**Output:** 25\n**Explanation:**\nThe 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:\n  base-10    base-2\n    1          1\n    3          11\n    5          101\n    7          111\n    9          1001\nTheir sum = 1 + 3 + 5 + 7 + 9 = 25. \n\n**Example 2:**\n\n**Input:** k = 3, n = 7\n**Output:** 499\n**Explanation:**\nThe 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:\n  base-10    base-3\n    1          1\n    2          2\n    4          11\n    8          22\n    121        11111\n    151        12121\n    212        21212\nTheir sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.\n\n**Example 3:**\n\n**Input:** k = 7, n = 17\n**Output:** 20379000\n**Explanation:** The 17 smallest 7-mirror numbers are:\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596\n\n**Constraints:**\n\n*   `2 <= k <= 9`\n*   `1 <= n <= 30`Since we need to reduce search space, instead of checking if every number is a palindrome in base-10, can we try to \"generate\" the palindromic numbers? If you are provided with a d digit number, how can you generate a palindrome with 2*d or 2*d - 1 digit? Try brute-forcing and checking if the palindrome you generated is a \"k-Mirror\" number.",
          "output": "def minWastedSpace(nums, k):\n    n = len(nums)\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        total = 0\n        for j in range(i, 0, -1):\n            total += nums[j - 1]\n            for l in range(k):\n                dp[i][l + 1] = min(dp[i][l + 1], dp[j - 1][l] + (i - j + 1) * nums[j - 1] - total)\n\n    return min(dp[n])\n"
     },
     {
          "instruction": "Write python code for this problem: A room is represented by a **0-indexed** 2D binary matrix `room` where a `0` represents an **empty** space and a `1` represents a space with an **object**. The top left corner of the room will be empty in all test cases.\n\nA cleaning robot starts at the top left corner of the room and is facing right. The robot will continue heading straight until it reaches the edge of the room or it hits an object, after which it will turn 90 degrees **clockwise** and repeat this process. The starting space and all spaces that the robot visits are **cleaned** by it.\n\nReturn _the number of **clean** spaces in the room if the robot runs indefinetely._\n\n",
          "input": "**Example 1:**  \n\n**Input:** room = \\[\\[0,0,0\\],\\[1,1,0\\],\\[0,0,0\\]\\]\n**Output:** 7\n**Explanation:**\nThe robot cleans the spaces at (0, 0), (0, 1), and (0, 2).\nThe robot is at the edge of the room, so it turns 90 degrees clockwise and now faces down.\nThe robot cleans the spaces at (1, 2), and (2, 2).\nThe robot is at the edge of the room, so it turns 90 degrees clockwise and now faces left.\nThe robot cleans the spaces at (2, 1), and (2, 0).\nThe robot has cleaned all 7 empty spaces, so return 7.\n\n**Example 2:**  \n\n**Input:** room = \\[\\[0,1,0\\],\\[1,0,0\\],\\[0,0,0\\]\\]\n**Output:** 1\n**Explanation:**\nThe robot cleans the space at (0, 0).\nThe robot hits an object, so it turns 90 degrees clockwise and now faces down.\nThe robot hits an object, so it turns 90 degrees clockwise and now faces left.\nThe robot is at the edge of the room, so it turns 90 degrees clockwise and now faces up.\nThe robot is at the edge of the room, so it turns 90 degrees clockwise and now faces right.\nThe robot is back at its starting position.\nThe robot has cleaned 1 space, so return 1.\n\n**Constraints:**\n\n*   `m == room.length`\n*   `n == room[r].length`\n*   `1 <= m, n <= 300`\n*   `room[r][c]` is either `0` or `1`.\n*   `room[0][0] == 0`Simulate how the robot moves and keep track of how many spaces it has cleaned so far. When can we stop the simulation? When the robot reaches a space that it has already cleaned and is facing the same direction as before, we can stop the simulation.",
          "output": "def colorTheGrid(m, n):\n    mod = 10**9 + 7\n    dp = [6, 6]\n    dpf = [3, 3]\n\n    for _ in range(2, max(m, n) + 1):\n        temp = dp[1]\n        dp[1] = (dpf[1] * 2) % mod\n        dp[0] = temp\n        dpf[1] = (dpf[1] + dpf[0]) % mod\n        dpf[0] = (dpf[0] + temp) % mod\n\n    return (dp[0 if m == 1 else 1] * dpf[0 if n == 1 else 1]) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `k`. You want to find a **subsequence** of `nums` of length `k` that has the **largest** sum.\n\nReturn _**any** such subsequence as an integer array of length_ `k`.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,1,3,3\\], k = 2\n**Output:** \\[3,3\\]\n**Explanation:**\nThe subsequence has the largest sum of 3 + 3 = 6.\n\n**Example 2:**\n\n**Input:** nums = \\[-1,-2,3,4\\], k = 3\n**Output:** \\[-1,3,4\\]\n**Explanation:** \nThe subsequence has the largest sum of -1 + 3 + 4 = 6.\n\n**Example 3:**\n\n**Input:** nums = \\[3,4,3,3\\], k = 2\n**Output:** \\[3,4\\]\n**Explanation:**\nThe subsequence has the largest sum of 3 + 4 = 7. \nAnother possible subsequence is \\[4, 3\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-105 <= nums[i] <= 105`\n*   `1 <= k <= nums.length`From a greedy perspective, what k elements should you pick? Could you sort the array while maintaining the index?",
          "output": "def count_patterns_in_word(patterns, word):\n    count = 0\n    for pattern in patterns:\n        if pattern in word:\n            count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You and a gang of thieves are planning on robbing a bank. You are given a **0-indexed** integer array `security`, where `security[i]` is the number of guards on duty on the `ith` day. The days are numbered starting from `0`. You are also given an integer `time`.\n\nThe `ith` day is a good day to rob the bank if:\n\n*   There are at least `time` days before and after the `ith` day,\n*   The number of guards at the bank for the `time` days **before** `i` are **non-increasing**, and\n*   The number of guards at the bank for the `time` days **after** `i` are **non-decreasing**.\n\nMore formally, this means day `i` is a good day to rob the bank if and only if `security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time]`.\n\nReturn _a list of **all** days **(0-indexed)** that are good days to rob the bank_. _The order that the days are returned in does **not** matter._\n\n",
          "input": "**Example 1:**\n\n**Input:** security = \\[5,3,3,3,5,6,2\\], time = 2\n**Output:** \\[2,3\\]\n**Explanation:**\nOn day 2, we have security\\[0\\] >= security\\[1\\] >= security\\[2\\] <= security\\[3\\] <= security\\[4\\].\nOn day 3, we have security\\[1\\] >= security\\[2\\] >= security\\[3\\] <= security\\[4\\] <= security\\[5\\].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.\n\n**Example 2:**\n\n**Input:** security = \\[1,1,1,1,1\\], time = 0\n**Output:** \\[0,1,2,3,4\\]\n**Explanation:**\nSince time equals 0, every day is a good day to rob the bank, so return every day.\n\n**Example 3:**\n\n**Input:** security = \\[1,2,3,4,5,6\\], time = 2\n**Output:** \\[\\]\n**Explanation:**\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list.\n\n**Constraints:**\n\n*   `1 <= security.length <= 105`\n*   `0 <= security[i], time <= 105`The trivial solution is to check the time days before and after each day. There are a lot of repeated operations using this solution. How could we optimize this solution? We can use precomputation to make the solution faster. Use an array to store the number of days before the ith day that is non-increasing, and another array to store the number of days after the ith day that is non-decreasing.",
          "output": "def minNonZeroProduct(p):\n    MOD = 10**9 + 7\n    prod = 1\n    a = (1 << p) - 2\n    b = ((1 << p) - 1) % MOD\n       \n    while a > 0:\n        if a % 2:\n            prod = (prod * b) % MOD\n        b = (b * b) % MOD\n        a //= 2\n    return prod\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a list of bombs. The **range** of a bomb is defined as the area where its effect can be felt. This area is in the shape of a **circle** with the center as the location of the bomb.\n\nThe bombs are represented by a **0-indexed** 2D integer array `bombs` where `bombs[i] = [xi, yi, ri]`. `xi` and `yi` denote the X-coordinate and Y-coordinate of the location of the `ith` bomb, whereas `ri` denotes the **radius** of its range.\n\nYou may choose to detonate a **single** bomb. When a bomb is detonated, it will detonate **all bombs** that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\n\nGiven the list of `bombs`, return _the **maximum** number of bombs that can be detonated if you are allowed to detonate **only one** bomb_.\n\n",
          "input": "**Example 1:**\n\n**Input:** bombs = \\[\\[2,1,3\\],\\[6,1,4\\]\\]\n**Output:** 2\n**Explanation:**\nThe above figure shows the positions and ranges of the 2 bombs.\nIf we detonate the left bomb, the right bomb will not be affected.\nBut if we detonate the right bomb, both bombs will be detonated.\nSo the maximum bombs that can be detonated is max(1, 2) = 2.\n\n**Example 2:**\n\n**Input:** bombs = \\[\\[1,1,5\\],\\[10,10,5\\]\\]\n**Output:** 1\n**Explanation:**\nDetonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.\n\n**Example 3:**\n\n**Input:** bombs = \\[\\[1,2,3\\],\\[2,3,1\\],\\[3,4,2\\],\\[4,5,3\\],\\[5,6,4\\]\\]\n**Output:** 5\n**Explanation:**\nThe best bomb to detonate is bomb 0 because:\n- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\nThus all 5 bombs are detonated.\n\n**Constraints:**\n\n*   `1 <= bombs.length <= 100`\n*   `bombs[i].length == 3`\n*   `1 <= xi, yi, ri <= 105`How can we model the relationship between different bombs? Can \"graphs\" help us? Bombs are nodes and are connected to other bombs in their range by directed edges. If we know which bombs will be affected when any bomb is detonated, how can we find the total number of bombs that will be detonated if we start from a fixed bomb? Run a Depth First Search (DFS) from every node, and all the nodes it reaches are the bombs that will be detonated.",
          "output": "def can_reach_bottom(grid, row, col):\n    if row == len(grid) - 1:\n        return True\n    grid[row][col] = 1\n\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n\n    for dr, dc in directions:\n        nr, nc = row + dr, col + dc\n        if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] == 0:\n            if can_reach_bottom(grid, nr, nc):\n                return True\n\n    return False\n\ndef latestDayToCross(row, col, cells):\n    grid = [[0] * col for _ in range(row)]\n    ans = 0\n\n    for day, cell in enumerate(cells):\n        grid[cell[0] - 1][cell[1] - 1] = 1\n\n        found = False\n        for j in range(col):\n            if grid[0][j] == 0 and can_reach_bottom(grid, 0, j):\n                found = True\n                break\n\n        if not found:\n            ans = day\n            break\n\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: A scenic location is represented by its `name` and attractiveness `score`, where `name` is a **unique** string among all locations and `score` is an integer. Locations can be ranked from the best to the worst. The **higher** the score, the better the location. If the scores of two locations are equal, then the location with the **lexicographically smaller** name is better.\n\nYou are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:\n\n*   **Adding** scenic locations, **one at a time**.\n*   **Querying** the `ith` **best** location of **all locations already added**, where `i` is the number of times the system has been queried (including the current query).\n    *   For example, when the system is queried for the `4th` time, it returns the `4th` best location of all locations already added.\n\nNote that the test data are generated so that **at any time**, the number of queries **does not exceed** the number of locations added to the system.\n\nImplement the `SORTracker` class:\n\n*   `SORTracker()` Initializes the tracker system.\n*   `void add(string name, int score)` Adds a scenic location with `name` and `score` to the system.\n*   `string get()` Queries and returns the `ith` best location, where `i` is the number of times this method has been invoked (including this invocation).\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"SORTracker \",  \"add \",  \"add \",  \"get \",  \"add \",  \"get \",  \"add \",  \"get \",  \"add \",  \"get \",  \"add \",  \"get \",  \"get \"\\]\n\\[\\[\\], \\[ \"bradford \", 2\\], \\[ \"branford \", 3\\], \\[\\], \\[ \"alps \", 2\\], \\[\\], \\[ \"orland \", 2\\], \\[\\], \\[ \"orlando \", 3\\], \\[\\], \\[ \"alpine \", 2\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null,  \"branford \", null,  \"alps \", null,  \"bradford \", null,  \"bradford \", null,  \"bradford \",  \"orland \"\\]\n\n**Explanation**\nSORTracker tracker = new SORTracker(); // Initialize the tracker system.\ntracker.add( \"bradford \", 2); // Add location with name= \"bradford \" and score=2 to the system.\ntracker.add( \"branford \", 3); // Add location with name= \"branford \" and score=3 to the system.\ntracker.get();              // The sorted locations, from best to worst, are: branford, bradford.\n                            // Note that branford precedes bradford due to its **higher score** (3 > 2).\n                            // This is the 1st time get() is called, so return the best location:  \"branford \".\ntracker.add( \"alps \", 2);     // Add location with name= \"alps \" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford.\n                            // Note that alps precedes bradford even though they have the same score (2).\n                            // This is because  \"alps \" is **lexicographically smaller** than  \"bradford \".\n                            // Return the 2nd best location  \"alps \", as it is the 2nd time get() is called.\ntracker.add( \"orland \", 2);   // Add location with name= \"orland \" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford, orland.\n                            // Return  \"bradford \", as it is the 3rd time get() is called.\ntracker.add( \"orlando \", 3);  // Add location with name= \"orlando \" and score=3 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alps, bradford, orland.\n                            // Return  \"bradford \".\ntracker.add( \"alpine \", 2);   // Add location with name= \"alpine \" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return  \"bradford \".\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return  \"orland \".\n\n**Constraints:**\n\n*   `name` consists of lowercase English letters, and is unique among all locations.\n*   `1 <= name.length <= 10`\n*   `1 <= score <= 105`\n*   At any time, the number of calls to `get` does not exceed the number of calls to `add`.\n*   At most `4 * 104` calls **in total** will be made to `add` and `get`.If the problem were to find the median of a stream of scenery locations while they are being added, can you solve it? We can use a similar approach as an optimization to avoid repeated sorting. Employ two heaps: left heap and right heap. The left heap is a max-heap, and the right heap is a min-heap. The size of the left heap is k + 1 (best locations), where k is the number of times the get method was invoked. The other locations are maintained in the right heap. Every time when add is being called, we add it to the left heap. If the size of the left heap exceeds k + 1, we move the head element to the right heap. When the get method is invoked again (the k + 1 time it is invoked), we can return the head element of the left heap. But before returning it, if the right heap is not empty, we maintain the left heap to have the best k + 2 items by moving the best location from the right heap to the left heap.",
          "output": "def findMiddleIndex(nums):\n    total_sum = sum(nums)\n    \n    left_sum = 0\n    for i, num in enumerate(nums):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    \n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s` consisting of only lowercase English letters, and an integer `count`. A **substring** of `s` is said to be an **equal count substring** if, for each **unique** letter in the substring, it appears exactly `count` times in the substring.\n\nReturn _the number of **equal count substrings** in_ `s`.\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaabcbbcc \", count = 3\n**Output:** 3\n**Explanation:**\nThe substring that starts at index 0 and ends at index 2 is  \"aaa \".\nThe letter 'a' in the substring appears exactly 3 times.\nThe substring that starts at index 3 and ends at index 8 is  \"bcbbcc \".\nThe letters 'b' and 'c' in the substring appear exactly 3 times.\nThe substring that starts at index 0 and ends at index 8 is  \"aaabcbbcc \".\nThe letters 'a', 'b', and 'c' in the substring appear exactly 3 times.\n\n**Example 2:**\n\n**Input:** s =  \"abcd \", count = 2\n**Output:** 0\n**Explanation:**\nThe number of times each letter appears in s is less than count.\nTherefore, no substrings in s are equal count substrings, so return 0.\n\n**Example 3:**\n\n**Input:** s =  \"a \", count = 5\n**Output:** 0\n**Explanation:**\nThe number of times each letter appears in s is less than count.\nTherefore, no substrings in s are equal count substrings, so return 0\n\n**Constraints:**\n\n*   `1 <= s.length <= 3 * 104`\n*   `1 <= count <= 3 * 104`\n*   `s` consists only of lowercase English letters.The brute force solution is to check every substring, which would TLE. How can we improve this solution? In an equal count substring, the first character appears count times, the second character appears count times, and so on. The length of an equal count substring is the number of unique characters multiplied by count. The length of all equal count substrings are multiples of count.",
          "output": "def maxScore(points):\n    m, n = len(points), len(points[0])\n    dp = [points[0]]\n\n    for r in range(1, m):\n        dp.append([0] * n)\n        for c in range(n):\n            score = points[r][c]\n            dp[r][c] = max(dp[r - 1][c_prev] + score - abs(c - c_prev) for c_prev in range(n))\n            \n    return max(dp[m - 1])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` and a target element `target`.\n\nA **target index** is an index `i` such that `nums[i] == target`.\n\nReturn _a list of the target indices of_ `nums` after _sorting_ `nums` _in **non-decreasing** order_. If there are no target indices, return _an **empty** list_. The returned list must be sorted in **increasing** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 2\n**Output:** \\[1,2\\]\n**Explanation:** After sorting, nums is \\[1,**2**,**2**,3,5\\].\nThe indices where nums\\[i\\] == 2 are 1 and 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 3\n**Output:** \\[3\\]\n**Explanation:** After sorting, nums is \\[1,2,2,**3**,5\\].\nThe index where nums\\[i\\] == 3 is 3.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 5\n**Output:** \\[4\\]\n**Explanation:** After sorting, nums is \\[1,2,2,3,**5**\\].\nThe index where nums\\[i\\] == 5 is 4.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i], target <= 100`Try \"sorting\" the array first. Now find all indices in the array whose values are equal to target.",
          "output": "def maxMatrixSum(matrix):\n    n = len(matrix)\n    minValue, negativeCount, total = float('inf'), 0, 0\n\n    for i in range(n):\n        for j in range(n):\n            total += abs(matrix[i][j])\n            minValue = min(minValue, abs(matrix[i][j]))\n            if matrix[i][j] < 0:\n                negativeCount += 1\n\n    if negativeCount % 2 == 0:\n        return total\n    else:\n        return total - 2 * minValue\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array `nums` of `n` integers, and an integer `k`.\n\nThe **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`.\n\nBuild and return _an array_ `avgs` _of length_ `n` _where_ `avgs[i]` _is the **k-radius average** for the subarray centered at index_ `i`.\n\nThe **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part.\n\n*   For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[7,4,3,9,1,8,5,2,6\\], k = 3\n**Output:** \\[-1,-1,-1,5,4,4,-1,-1,-1\\]\n**Explanation:**\n- avg\\[0\\], avg\\[1\\], and avg\\[2\\] are -1 because there are less than k elements **before** each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using **integer division**, avg\\[3\\] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg\\[4\\] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg\\[5\\] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg\\[6\\], avg\\[7\\], and avg\\[8\\] are -1 because there are less than k elements **after** each index.\n\n**Example 2:**\n\n**Input:** nums = \\[100000\\], k = 0\n**Output:** \\[100000\\]\n**Explanation:**\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n  avg\\[0\\] = 100000 / 1 = 100000.\n\n**Example 3:**\n\n**Input:** nums = \\[8\\], k = 100000\n**Output:** \\[-1\\]\n**Explanation:** \n- avg\\[0\\] is -1 because there are less than k elements before and after index 0.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `0 <= nums[i], k <= 105`To calculate the average of a subarray, you need the sum and the K. K is already given. How could you quickly calculate the sum of a subarray? Use the Prefix Sums method to calculate the subarray sums. It is possible that the sum of all the elements does not fit in a 32-bit integer type. Be sure to use a 64-bit integer type for the prefix sum array.",
          "output": "from heapq import heappush, heappop\n\nMODULO = 1000000007\n\ndef countPaths(n, roads):\n    adj_list = [[] for _ in range(n)]\n\n    for u, v, time in roads:\n        adj_list[u].append((v, time))\n        adj_list[v].append((u, time))\n\n    dist = [float('inf')] * n\n    dist[0] = 0\n    count = [0] * n\n    count[0] = 1\n    pq = [(0, 0)]\n\n    while pq:\n        distance, node = heappop(pq)\n\n        if distance > dist[node]:\n            continue\n\n        for next_node, edge_distance in adj_list[node]:\n            if distance + edge_distance > dist[next_node]:\n                continue\n\n            if distance + edge_distance == dist[next_node]:\n                count[next_node] = (count[next_node] + count[node]) % MODULO\n            else:\n                count[next_node] = count[node]\n                dist[next_node] = distance + edge_distance\n                heappush(pq, (dist[next_node], next_node))\n\n    return count[n - 1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of **distinct** integers `nums`.\n\nThere is an element in `nums` that has the **lowest** value and an element that has the **highest** value. We call them the **minimum** and **maximum** respectively. Your goal is to remove **both** these elements from the array.\n\nA **deletion** is defined as either removing an element from the **front** of the array or removing an element from the **back** of the array.\n\nReturn _the **minimum** number of deletions it would take to remove **both** the minimum and maximum element from the array._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,**10**,7,5,4,**1**,8,6\\]\n**Output:** 5\n**Explanation:** \nThe minimum element in the array is nums\\[5\\], which is 1.\nThe maximum element in the array is nums\\[1\\], which is 10.\nWe can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.\nThis results in 2 + 3 = 5 deletions, which is the minimum number possible.\n\n**Example 2:**\n\n**Input:** nums = \\[0,**\\-4**,**19**,1,8,-2,-3,5\\]\n**Output:** 3\n**Explanation:** \nThe minimum element in the array is nums\\[1\\], which is -4.\nThe maximum element in the array is nums\\[2\\], which is 19.\nWe can remove both the minimum and maximum by removing 3 elements from the front.\nThis results in only 3 deletions, which is the minimum number possible.\n\n**Example 3:**\n\n**Input:** nums = \\[**101**\\]\n**Output:** 1\n**Explanation:**  \nThere is only one element in the array, which makes it both the minimum and maximum element.\nWe can remove it with 1 deletion.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-105 <= nums[i] <= 105`\n*   The integers in `nums` are **distinct**.There can only be three scenarios for deletions such that both minimum and maximum elements are removed: Scenario 1: Both elements are removed by only deleting from the front. Scenario 2: Both elements are removed by only deleting from the back. Scenario 3: Delete from the front to remove one of the elements, and delete from the back to remove the other element. Compare which of the three scenarios results in the minimum number of moves.",
          "output": "def numberOfLists(num: str) -> int:\n    mod = 10 ** 9 + 7\n    n = len(num)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(n):\n        for j in range(1, n + 1):\n            if num[i] == '0': continue\n            for k in range(1, min(n - i + 1, 11)):\n                if k > 1 and num[i + k - 1] == '0': break\n                dp[i + k][j] = (dp[i + k][j] + dp[i][j - 1]) % mod\n\n    return sum(dp[n]) % mod\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` indicating there are `n` people numbered from `0` to `n - 1`. You are also given a **0-indexed** 2D integer array `meetings` where `meetings[i] = [xi, yi, timei]` indicates that person `xi` and person `yi` have a meeting at `timei`. A person may attend **multiple meetings** at the same time. Finally, you are given an integer `firstPerson`.\n\nPerson `0` has a **secret** and initially shares the secret with a person `firstPerson` at time `0`. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person `xi` has the secret at `timei`, then they will share the secret with person `yi`, and vice versa.\n\nThe secrets are shared **instantaneously**. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\n\nReturn _a list of all the people that have the secret after all the meetings have taken place._ You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, meetings = \\[\\[1,2,5\\],\\[2,3,8\\],\\[1,5,10\\]\\], firstPerson = 1\n**Output:** \\[0,1,2,3,5\\]\n**Explanation:**\nAt time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.\n\n**Example 2:**\n\n**Input:** n = 4, meetings = \\[\\[3,1,3\\],\\[1,2,2\\],\\[0,3,3\\]\\], firstPerson = 3\n**Output:** \\[0,1,3\\]\n**Explanation:**\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings.\n\n**Example 3:**\n\n**Input:** n = 5, meetings = \\[\\[3,4,2\\],\\[1,2,1\\],\\[2,3,1\\]\\], firstPerson = 1\n**Output:** \\[0,1,2,3,4\\]\n**Explanation:**\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.\n\n**Constraints:**\n\n*   `2 <= n <= 105`\n*   `1 <= meetings.length <= 105`\n*   `meetings[i].length == 3`\n*   `0 <= xi, yi <= n - 1`\n*   `xi != yi`\n*   `1 <= timei <= 105`\n*   `1 <= firstPerson <= n - 1`Could you model all the meetings happening at the same time as a graph? What data structure can you use to efficiently share the secret? You can use the union-find data structure to quickly determine who knows the secret and share the secret.",
          "output": "def find_secret_sharers(n, meetings, first_person):\n    secret_holders = [-1] * n\n    secret_holders[0] = 0\n    secret_holders[first_person] = 0\n\n    meetings.sort(key=lambda x: x[2])\n\n    for x, y, time in meetings:\n        if secret_holders[x] != -1 and secret_holders[x] <= time:\n            secret_holders[y] = time\n        if secret_holders[y] != -1 and secret_holders[y] <= time:\n            secret_holders[x] = time\n\n    return [i for i in range(n) if secret_holders[i] != -1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `digits`, where each element is a digit. The array may contain duplicates.\n\nYou need to find **all** the **unique** integers that follow the given requirements:\n\n*   The integer consists of the **concatenation** of **three** elements from `digits` in **any** arbitrary order.\n*   The integer does not have **leading zeros**.\n*   The integer is **even**.\n\nFor example, if the given `digits` were `[1, 2, 3]`, integers `132` and `312` follow the requirements.\n\nReturn _a **sorted** array of the unique integers._\n\n",
          "input": "**Example 1:**\n\n**Input:** digits = \\[2,1,3,0\\]\n**Output:** \\[102,120,130,132,210,230,302,310,312,320\\]\n**Explanation:** All the possible integers that follow the requirements are in the output array. \nNotice that there are no **odd** integers or integers with **leading zeros**.\n\n**Example 2:**\n\n**Input:** digits = \\[2,2,8,8,2\\]\n**Output:** \\[222,228,282,288,822,828,882\\]\n**Explanation:** The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882. \n\n**Example 3:**\n\n**Input:** digits = \\[3,7,5\\]\n**Output:** \\[\\]\n**Explanation:** No **even** integers can be formed using the given digits.\n\n**Constraints:**\n\n*   `3 <= digits.length <= 100`\n*   `0 <= digits[i] <= 9`The range of possible answers includes all even numbers between 100 and 999 inclusive. Could you check each possible answer to see if it could be formed from the digits in the array?",
          "output": "def min_stones_remaining(piles, k):\n    for _ in range(k):\n        max_pile_index = piles.index(max(piles))\n        piles[max_pile_index] -= piles[max_pile_index] // 2\n\n    return sum(piles)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `head` of a linked list. **Delete** the **middle node**, and return _the_ `head` _of the modified linked list_.\n\nThe **middle node** of a linked list of size `n` is the `\u230an / 2\u230bth` node from the **start** using **0-based indexing**, where `\u230ax\u230b` denotes the largest integer less than or equal to `x`.\n\n*   For `n` = `1`, `2`, `3`, `4`, and `5`, the middle nodes are `0`, `1`, `1`, `2`, and `2`, respectively.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[1,3,4,7,1,2,6\\]\n**Output:** \\[1,3,4,1,2,6\\]\n**Explanation:**\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node. \n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4\\]\n**Output:** \\[1,2,4\\]\n**Explanation:**\nThe above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red.\n\n**Example 3:**\n\n**Input:** head = \\[2,1\\]\n**Output:** \\[2\\]\n**Explanation:**\nThe above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 105]`.\n*   `1 <= Node.val <= 105`If a point with a speed s moves n units in a given time, a point with speed 2 * s will move 2 * n units at the same time. Can you use this to find the middle node of a linked list? If you are given the middle node, the node before it, and the node after it, how can you modify the linked list?",
          "output": "def min_swaps_to_balance(s: str) -> int:\n    open_brackets = 0\n    swaps = 0\n\n    for c in s:\n        if c == '[':\n            open_brackets += 1\n        else:\n            if open_brackets == 0:\n                swaps += 1\n                open_brackets += 1\n            else:\n                open_brackets -= 1\n\n    return swaps\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a **binary tree** with `n` nodes. Each node is uniquely assigned a value from `1` to `n`. You are also given an integer `startValue` representing the value of the start node `s`, and a different integer `destValue` representing the value of the destination node `t`.\n\nFind the **shortest path** starting from node `s` and ending at node `t`. Generate step-by-step directions of such path as a string consisting of only the **uppercase** letters `'L'`, `'R'`, and `'U'`. Each letter indicates a specific direction:\n\n*   `'L'` means to go from a node to its **left child** node.\n*   `'R'` means to go from a node to its **right child** node.\n*   `'U'` means to go from a node to its **parent** node.\n\nReturn _the step-by-step directions of the **shortest path** from node_ `s` _to node_ `t`.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[5,1,2,3,null,6,4\\], startValue = 3, destValue = 6\n**Output:**  \"UURL \"\n**Explanation:** The shortest path is: 3 -> 1 -> 5 -> 2 -> 6.\n\n**Example 2:**\n\n**Input:** root = \\[2,1\\], startValue = 2, destValue = 1\n**Output:**  \"L \"\n**Explanation:** The shortest path is: 2 -> 1.\n\n**Constraints:**\n\n*   The number of nodes in the tree is `n`.\n*   `2 <= n <= 105`\n*   `1 <= Node.val <= n`\n*   All the values in the tree are **unique**.\n*   `1 <= startValue, destValue <= n`\n*   `startValue != destValue`The shortest path between any two nodes in a tree must pass through their Lowest Common Ancestor (LCA). The path will travel upwards from node s to the LCA and then downwards from the LCA to node t. Find the path strings from root \u2192 s, and root \u2192 t. Can you use these two strings to prepare the final answer? Remove the longest common prefix of the two path strings to get the path LCA \u2192 s, and LCA \u2192 t. Each step in the path of LCA \u2192 s should be reversed as 'U'.",
          "output": "from bisect import bisect_right\n\ndef longest_obstacle_course(obstacles):\n    ans, active = [0] * len(obstacles), []\n    for i, obstacle in enumerate(obstacles):\n        idx = bisect_right(active, obstacle)\n        ans[i] = idx + 1\n        if idx == len(active):\n            active.append(obstacle)\n        else:\n            active[idx] = obstacle\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: A maze consists of `n` rooms numbered from `1` to `n`, and some rooms are connected by corridors. You are given a 2D integer array `corridors` where `corridors[i] = [room1i, room2i]` indicates that there is a corridor connecting `room1i` and `room2i`, allowing a person in the maze to go from `room1i` to `room2i` **and vice versa**.\n\nThe designer of the maze wants to know how confusing the maze is. The **confusion** **score** of the maze is the number of different cycles of **length 3**.\n\n*   For example, `1 -> 2 -> 3 -> 1` is a cycle of length 3, but `1 -> 2 -> 3 -> 4` and `1 -> 2 -> 3 -> 2 -> 1` are not.\n\nTwo cycles are considered to be **different** if one or more of the rooms visited in the first cycle is **not** in the second cycle.\n\nReturn _the_ _**confusion** **score** of the maze._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, corridors = \\[\\[1,2\\],\\[5,2\\],\\[4,1\\],\\[2,4\\],\\[3,1\\],\\[3,4\\]\\]\n**Output:** 2\n**Explanation:**\nOne cycle of length 3 is 4 -> 1 -> 3 -> 4, denoted in red.\nNote that this is the same cycle as 3 -> 4 -> 1 -> 3 or 1 -> 3 -> 4 -> 1 because the rooms are the same.\nAnother cycle of length 3 is 1 -> 2 -> 4 -> 1, denoted in blue.\nThus, there are two different cycles of length 3.\n\n**Example 2:**\n\n**Input:** n = 4, corridors = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** 0\n**Explanation:**\nThere are no cycles of length 3.\n\n**Constraints:**\n\n*   `2 <= n <= 1000`\n*   `1 <= corridors.length <= 5 * 104`\n*   `corridors[i].length == 2`\n*   `1 <= room1i, room2i <= n`\n*   `room1i != room2i`\n*   There are no duplicate corridors.If the path starts at room i, what properties must the other two rooms in the cycle have? The other two rooms must be connected to room i, and must be connected to each other.",
          "output": "def maximumNumber(num: str, change: List[int]) -> str:\n    num = list(num)\n    mutatable = False\n    for i in range(len(num)):\n        digit = int(num[i])\n        if digit < change[digit]:\n            if not mutatable: mutatable = True\n            num[i] = str(change[digit])\n        elif digit > change[digit] and mutatable:\n            break\n    return \"\".join(num)\n"
     },
     {
          "instruction": "Write python code for this problem: A **sentence** is a list of **words** that are separated by a single space with no leading or trailing spaces.\n\nYou are given an array of strings `sentences`, where each `sentences[i]` represents a single **sentence**.\n\nReturn _the **maximum number of words** that appear in a single sentence_.\n\n",
          "input": "**Example 1:**\n\n**Input:** sentences = \\[ \"alice and bob love leetcode \",  \"i think so too \",  \"this is great thanks very much \"\\]\n**Output:** 6\n**Explanation:** \n- The first sentence,  \"alice and bob love leetcode \", has 5 words in total.\n- The second sentence,  \"i think so too \", has 4 words in total.\n- The third sentence,  \"this is great thanks very much \", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.\n\n**Example 2:**\n\n**Input:** sentences = \\[ \"please wait \",  \"continue to fight \",  \"continue to win \"\\]\n**Output:** 3\n**Explanation:** It is possible that multiple sentences contain the same number of words. \nIn this example, the second and third sentences (underlined) have the same number of words.\n\n**Constraints:**\n\n*   `1 <= sentences.length <= 100`\n*   `1 <= sentences[i].length <= 100`\n*   `sentences[i]` consists only of lowercase English letters and `' '` only.\n*   `sentences[i]` does not have leading or trailing spaces.\n*   All the words in `sentences[i]` are separated by a single space.Process each sentence separately and count the number of words by looking for the number of space characters in the sentence and adding it by 1.",
          "output": "def min_sessions(tasks, session_time):\n    sessions = []\n    tasks.sort(reverse=True)\n\n    for task in tasks:\n        added = False\n        for session_idx, session in enumerate(sessions):\n            if session + task <= session_time:\n                sessions[session_idx] += task\n                added = True\n                break\n\n        if not added:\n            sessions.append(task)\n\n    return len(sessions)\n"
     },
     {
          "instruction": "Write python code for this problem: You have information about `n` different recipes. You are given a string array `recipes` and a 2D string array `ingredients`. The `ith` recipe has the name `recipes[i]`, and you can **create** it if you have **all** the needed ingredients from `ingredients[i]`. Ingredients to a recipe may need to be created from **other** recipes, i.e., `ingredients[i]` may contain a string that is in `recipes`.\n\nYou are also given a string array `supplies` containing all the ingredients that you initially have, and you have an infinite supply of all of them.\n\nReturn _a list of all the recipes that you can create._ You may return the answer in **any order**.\n\nNote that two recipes may contain each other in their ingredients.\n\n",
          "input": "**Example 1:**\n\n**Input:** recipes = \\[ \"bread \"\\], ingredients = \\[\\[ \"yeast \", \"flour \"\\]\\], supplies = \\[ \"yeast \", \"flour \", \"corn \"\\]\n**Output:** \\[ \"bread \"\\]\n**Explanation:**\nWe can create  \"bread \" since we have the ingredients  \"yeast \" and  \"flour \".\n\n**Example 2:**\n\n**Input:** recipes = \\[ \"bread \", \"sandwich \"\\], ingredients = \\[\\[ \"yeast \", \"flour \"\\],\\[ \"bread \", \"meat \"\\]\\], supplies = \\[ \"yeast \", \"flour \", \"meat \"\\]\n**Output:** \\[ \"bread \", \"sandwich \"\\]\n**Explanation:**\nWe can create  \"bread \" since we have the ingredients  \"yeast \" and  \"flour \".\nWe can create  \"sandwich \" since we have the ingredient  \"meat \" and can create the ingredient  \"bread \".\n\n**Example 3:**\n\n**Input:** recipes = \\[ \"bread \", \"sandwich \", \"burger \"\\], ingredients = \\[\\[ \"yeast \", \"flour \"\\],\\[ \"bread \", \"meat \"\\],\\[ \"sandwich \", \"meat \", \"bread \"\\]\\], supplies = \\[ \"yeast \", \"flour \", \"meat \"\\]\n**Output:** \\[ \"bread \", \"sandwich \", \"burger \"\\]\n**Explanation:**\nWe can create  \"bread \" since we have the ingredients  \"yeast \" and  \"flour \".\nWe can create  \"sandwich \" since we have the ingredient  \"meat \" and can create the ingredient  \"bread \".\nWe can create  \"burger \" since we have the ingredient  \"meat \" and can create the ingredients  \"bread \" and  \"sandwich \".\n\n**Constraints:**\n\n*   `n == recipes.length == ingredients.length`\n*   `1 <= n <= 100`\n*   `1 <= ingredients[i].length, supplies.length <= 100`\n*   `1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10`\n*   `recipes[i], ingredients[i][j]`, and `supplies[k]` consist only of lowercase English letters.\n*   All the values of `recipes` and `supplies` combined are unique.\n*   Each `ingredients[i]` does not contain any duplicate values.Can we use a data structure to quickly query whether we have a certain ingredient? Once we verify that we can make a recipe, we can add it to our ingredient data structure. We can then check if we can make more recipes as a result of this.",
          "output": "def numDistinct(binary):\n    mod = 10**9 + 7\n    zero_count, ones_count = 0, 0\n\n    for c in binary:\n        if c == '0':\n            zero_count = (zero_count + ones_count) % mod\n        else:\n            ones_count = (ones_count * 2 + 1) % mod\n    \n    return zero_count\n"
     },
     {
          "instruction": "Write python code for this problem: A parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is valid if **any** of the following conditions is **true**:\n\n*   It is `()`.\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings.\n*   It can be written as `(A)`, where `A` is a valid parentheses string.\n\nYou are given a parentheses string `s` and a string `locked`, both of length `n`. `locked` is a binary string consisting only of `'0'`s and `'1'`s. For **each** index `i` of `locked`,\n\n*   If `locked[i]` is `'1'`, you **cannot** change `s[i]`.\n*   But if `locked[i]` is `'0'`, you **can** change `s[i]` to either `'('` or `')'`.\n\nReturn `true` _if you can make `s` a valid parentheses string_. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"))())) \", locked =  \"010100 \"\n**Output:** true\n**Explanation:** locked\\[1\\] == '1' and locked\\[3\\] == '1', so we cannot change s\\[1\\] or s\\[3\\].\nWe change s\\[0\\] and s\\[4\\] to '(' while leaving s\\[2\\] and s\\[5\\] unchanged to make s valid.\n\n**Example 2:**\n\n**Input:** s =  \"()() \", locked =  \"0000 \"\n**Output:** true\n**Explanation:** We do not need to make any changes because s is already valid.\n\n**Example 3:**\n\n**Input:** s =  \") \", locked =  \"0 \"\n**Output:** false\n**Explanation:** locked permits us to change s\\[0\\]. \nChanging s\\[0\\] to either '(' or ')' will not make s valid.\n\n**Constraints:**\n\n*   `n == s.length == locked.length`\n*   `1 <= n <= 105`\n*   `s[i]` is either `'('` or `')'`.\n*   `locked[i]` is either `'0'` or `'1'`.\n\nx if x >= 0, or -x if x < 0.Can an odd length string ever be valid? From left to right, if a locked ')' is encountered, it must be balanced with either a locked '(' or an unlocked index on its left. If neither exist, what conclusion can be drawn? If both exist, which one is more preferable to use? After the above, we may have locked indices of '(' and additional unlocked indices. How can you balance out the locked '(' now? What if you cannot balance any locked '('?",
          "output": "def count_pairs_with_difference_k(nums, k):\n    freq_map = {}\n    count = 0\n\n    for num in nums:\n        count += freq_map.get(num - k, 0) + freq_map.get(num + k, 0)\n        freq_map[num] = freq_map.get(num, 0) + 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two positive integers `left` and `right` with `left <= right`. Calculate the **product** of all integers in the **inclusive** range `[left, right]`.\n\nSince the product may be very large, you will **abbreviate** it following these steps:\n\n1.  Count all **trailing** zeros in the product and **remove** them. Let us denote this count as `C`.\n    *   For example, there are `3` trailing zeros in `1000`, and there are `0` trailing zeros in `546`.\n2.  Denote the remaining number of digits in the product as `d`. If `d > 10`, then express the product as\n    \n        ...\n    \n3.  Finally, represent the product as a **string** `\"`\n    \n        ...eC \"\n    \n\nReturn _a string denoting the **abbreviated product** of all integers in the **inclusive** range_ `[left, right]`.\n\n",
          "input": "**Example 1:**\n\n**Input:** left = 1, right = 4\n**Output:**  \"24e0 \"\n**Explanation:** The product is 1 \\* 2 \\* 3 \\* 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with  \"e0 \".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is  \"24e0 \".\n\n**Example 2:**\n\n**Input:** left = 2, right = 11\n**Output:**  \"399168e2 \"\n**Explanation:** The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with  \"e2 \".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is  \"399168e2 \".\n\n**Example 3:**\n\n**Input:** left = 371, right = 375\n**Output:**  \"7219856259e3 \"\n**Explanation:** The product is 7219856259000.\n\n**Constraints:**\n\n*   `1 <= left <= right <= 104`Calculating the number of trailing zeros, the last five digits, and the first five digits can all be done separately. Use a prime factorization property to find the number of trailing zeros. Use modulo to find the last 5 digits. Use a logarithm property to find the first 5 digits. The number of trailing zeros C is nothing but the number of times the product is completely divisible by 10. Since 2 and 5 are the only prime factors of 10,  C will be equal to the minimum number of times 2 or 5 appear in the prime factorization of the product. Iterate through the integers from left to right. For every integer, keep dividing it by 2 as long as it is divisible by 2 and C occurrences of 2 haven't been removed in total. Repeat this process for 5. Finally, multiply the integer under modulo of 10^5 with the product obtained till now to obtain the last five digits. The product P can be represented as P=10^(x+y) where x is the integral part and y is the fractional part of x+y. Using the property \"if S = A * B, then log(S) = log(A) + log(B)\", we can write x+y = log_10(P) = sum(log_10(i)) for each integer i in [left, right]. Once we obtain the sum, the first five digits can be represented as floor(10^(y+4)).",
          "output": "def findOriginalArray(changed):\n    count = {}\n    for num in changed:\n        count[num] = count.get(num, 0) + 1\n\n    sorted_values = sorted(count.keys())\n\n    original = []\n    for num in sorted_values:\n        while count[num] > 0 and count.get(num * 2, 0) > 0:\n            original.append(num)\n            count[num] -= 1\n            count[num * 2] -= 1\n        if count[num] > 0:\n            return []\n\n    return original\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s` consisting of only lowercase English letters. Return _the number of **substrings** in_ `s` _that begin and end with the **same** character._\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcba \"\n**Output:** 7\n**Explanation:**\nThe substrings of length 1 that start and end with the same letter are:  \"a \",  \"b \",  \"c \",  \"b \", and  \"a \".\nThe substring of length 3 that starts and ends with the same letter is:  \"bcb \".\nThe substring of length 5 that starts and ends with the same letter is:  \"abcba \".\n\n**Example 2:**\n\n**Input:** s =  \"abacad \"\n**Output:** 9\n**Explanation:**\nThe substrings of length 1 that start and end with the same letter are:  \"a \",  \"b \",  \"a \",  \"c \",  \"a \", and  \"d \".\nThe substrings of length 3 that start and end with the same letter are:  \"aba \" and  \"aca \".\nThe substring of length 5 that starts and ends with the same letter is:  \"abaca \".\n\n**Example 3:**\n\n**Input:** s =  \"a \"\n**Output:** 1\n**Explanation:**\nThe substring of length 1 that starts and ends with the same letter is:  \"a \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists only of lowercase English letters.In the string \"abacad\", the letter \"a\" appears 3 times. How many substrings begin with the first \"a\" and end with any \"a\"? There are 3 substrings (\"a\", \"aba\", and \"abaca\"). How many substrings begin with the second \"a\" and end with any \"a\"? How about the third? 2 substrings begin with the second \"a\" (\"a\", and \"aca\") and 1 substring begins with the third \"a\" (\"a\"). There is a total of 3 + 2 + 1 = 6 substrings that begin and end with \"a\". If a character appears i times in the string, there are i * (i + 1) / 2 substrings that begin and end with that character.",
          "output": "def has_three_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n        if count > 3:\n            break\n    return count == 3\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` rings and each ring is either red, green, or blue. The rings are distributed **across ten rods** labeled from `0` to `9`.\n\nYou are given a string `rings` of length `2n` that describes the `n` rings that are placed onto the rods. Every two characters in `rings` forms a **color-position pair** that is used to describe each ring where:\n\n*   The **first** character of the `ith` pair denotes the `ith` ring's **color** (`'R'`, `'G'`, `'B'`).\n*   The **second** character of the `ith` pair denotes the **rod** that the `ith` ring is placed on (`'0'` to `'9'`).\n\nFor example, `\"R3G2B1 \"` describes `n == 3` rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\n\nReturn _the number of rods that have **all three colors** of rings on them._\n\n",
          "input": "**Example 1:**\n\n**Input:** rings =  \"B0B6G0R6R0R6G9 \"\n**Output:** 1\n**Explanation:** \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.\n\n**Example 2:**\n\n**Input:** rings =  \"B0R0G0R9R0B0G0 \"\n**Output:** 1\n**Explanation:** \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.\n\n**Example 3:**\n\n**Input:** rings =  \"G4 \"\n**Output:** 0\n**Explanation:** \nOnly one ring is given. Thus, no rods have all three colors.\n\n**Constraints:**\n\n*   `rings.length == 2 * n`\n*   `1 <= n <= 100`\n*   `rings[i]` where `i` is **even** is either `'R'`, `'G'`, or `'B'` (**0-indexed**).\n*   `rings[i]` where `i` is **odd** is a digit from `'0'` to `'9'` (**0-indexed**).For every rod, look through \u2018rings\u2019 to see if the rod contains all colors. Create 3 booleans, 1 for each color, to store if that color is present for the current rod. If all 3 are true after looking through the string, then the rod contains all the colors.",
          "output": "def findFarmland(land):\n    m, n = len(land), len(land[0])\n    res = []\n    \n    for i in range(m):\n        for j in range(n):\n            if land[i][j] == 1:\n                r, c = i, j\n                while r < m and land[r][j] == 1: r += 1\n                while c < n and land[i][c] == 1: c += 1\n                for x in range(i, r):\n                    for y in range(j,c):\n                        land[x][y] = 0\n                res.append([i, j, r - 1, c - 1])\n\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. The **range** of a subarray of `nums` is the difference between the largest and smallest element in the subarray.\n\nReturn _the **sum of all** subarray ranges of_ `nums`_._\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 4\n**Explanation:** The 6 subarrays of nums are the following:\n\\[1\\], range = largest - smallest = 1 - 1 = 0 \n\\[2\\], range = 2 - 2 = 0\n\\[3\\], range = 3 - 3 = 0\n\\[1,2\\], range = 2 - 1 = 1\n\\[2,3\\], range = 3 - 2 = 1\n\\[1,2,3\\], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,3\\]\n**Output:** 4\n**Explanation:** The 6 subarrays of nums are the following:\n\\[1\\], range = largest - smallest = 1 - 1 = 0\n\\[3\\], range = 3 - 3 = 0\n\\[3\\], range = 3 - 3 = 0\n\\[1,3\\], range = 3 - 1 = 2\n\\[3,3\\], range = 3 - 3 = 0\n\\[1,3,3\\], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.\n\n**Example 3:**\n\n**Input:** nums = \\[4,-2,-3,4,1\\]\n**Output:** 59\n**Explanation:** The sum of all subarray ranges of nums is 59.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-109 <= nums[i] <= 109`\n\n**Follow-up:** Could you find a solution with `O(n)` time complexity?Can you get the max/min of a certain subarray by using the max/min of a smaller subarray within it? Notice that the max of the subarray from index i to j is equal to max of (max of the subarray from index i to j-1) and nums[j].",
          "output": "from collections import defaultdict\n\nclass LockingTree:\n\n    def __init__(self, parent):\n        self.parent = parent\n        self.children = defaultdict(set)\n        self.locks = [-1] * len(parent)\n        for i in range(1, len(parent)):\n            self.children[parent[i]].add(i)\n    \n    def lock(self, num, user):\n        if self.locks[num] == -1:\n            self.locks[num] = user\n            return True\n        return False\n    \n    def unlock(self, num, user):\n        if self.locks[num] == user:\n            self.locks[num] = -1\n            return True\n        return False\n    \n    def upgrade(self, num, user):\n        if self.locks[num] != -1: return False\n        \n        cur = num\n        while cur != -1:\n            if self.locks[cur] != -1: return False\n            cur = self.parent[cur]\n        \n        locked_descendant = self._has_locked_descendants(num)\n        if locked_descendant:\n            self.locks[num] = user\n        return locked_descendant\n    \n    def _has_locked_descendants(self, node):\n        locked_descendant = False\n        for child in self.children[node]:\n            if self.locks[child] != -1:\n                locked_descendant = True\n                self.locks[child] = -1\n            locked_descendant |= self._has_locked_descendants(child)\n        return locked_descendant\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob want to water `n` plants in their garden. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`.\n\nEach plant needs a specific amount of water. Alice and Bob have a watering can each, **initially full**. They water the plants in the following way:\n\n*   Alice waters the plants in order from **left to right**, starting from the `0th` plant. Bob waters the plants in order from **right to left**, starting from the `(n - 1)th` plant. They begin watering the plants **simultaneously**.\n*   It takes the same amount of time to water each plant regardless of how much water it needs.\n*   Alice/Bob **must** water the plant if they have enough in their can to **fully** water it. Otherwise, they **first** refill their can (instantaneously) then water the plant.\n*   In case both Alice and Bob reach the same plant, the one with **more** water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.\n\nGiven a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and two integers `capacityA` and `capacityB` representing the capacities of Alice's and Bob's watering cans respectively, return _the **number of times** they have to refill to water all the plants_.\n\n",
          "input": "**Example 1:**\n\n**Input:** plants = \\[2,2,3,3\\], capacityA = 5, capacityB = 5\n**Output:** 1\n**Explanation:**\n- Initially, Alice and Bob have 5 units of water each in their watering cans.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 3 units and 2 units of water respectively.\n- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.\nSo, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1.\n\n**Example 2:**\n\n**Input:** plants = \\[2,2,3,3\\], capacityA = 3, capacityB = 4\n**Output:** 2\n**Explanation:**\n- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.\n- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.\nSo, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2.\n\n**Example 3:**\n\n**Input:** plants = \\[5\\], capacityA = 10, capacityB = 8\n**Output:** 0\n**Explanation:**\n- There is only one plant.\n- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.\nSo, the total number of times they have to refill is 0.\n\n**Constraints:**\n\n*   `n == plants.length`\n*   `1 <= n <= 105`\n*   `1 <= plants[i] <= 106`\n*   `max(plants[i]) <= capacityA, capacityB <= 109`Try \"simulating\" the process. Since watering each plant takes the same amount of time, where will Alice and Bob meet if they start watering the plants simultaneously? How can you use this to optimize your solution? What will you do when both Alice and Bob have to water the same plant?",
          "output": "def numberOfGoodSubsets(nums: list[int]) -> int:\n    MOD = 10**9 + 7\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 91) if is_prime(i)]\n    cnt = [0] * 100\n    for n in nums:\n        cnt[n] += 1\n\n    dp = [0] * (1 << 20)\n    dp[0] = 1\n    \n    for i in range(30, 0, -1):\n        if cnt[i] == 0:\n            continue\n        mask = [j for j in primes if i % j == 0]\n        i = i // j\n        if i > 1:\n            continue\n\n        m = 0\n        for j in mask:\n            m |= 1 << (j - 2)\n\n        for j in range(len(dp)-1, -1, -1):\n            if dp[j] == 0:\n                continue\n            cur = 1\n            for k in range(cnt[m]):\n                cur = (cur * 2) % MOD\n                dp[j | m] = (dp[j | m] + dp[j] * cur) % MOD\n\n    ans = sum(dp) % MOD\n    ans = (ans - dp[0] + MOD) % MOD\n    return (ans * (1 << (cnt[1] - 1))) % MOD\n"
     },
     {
          "instruction": "Write python code for this problem: Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array `fruits` where `fruits[i] = [positioni, amounti]` depicts `amounti` fruits at the position `positioni`. `fruits` is already **sorted** by `positioni` in **ascending order**, and each `positioni` is **unique**.\n\nYou are also given an integer `startPos` and an integer `k`. Initially, you are at the position `startPos`. From any position, you can either walk to the **left or right**. It takes **one step** to move **one unit** on the x-axis, and you can walk **at most** `k` steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\n\nReturn _the **maximum total number** of fruits you can harvest_.\n\n",
          "input": "**Example 1:**\n\n**Input:** fruits = \\[\\[2,8\\],\\[6,3\\],\\[8,6\\]\\], startPos = 5, k = 4\n**Output:** 9\n**Explanation:** \nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total.\n\n**Example 2:**\n\n**Input:** fruits = \\[\\[0,9\\],\\[4,1\\],\\[5,7\\],\\[6,2\\],\\[7,4\\],\\[10,9\\]\\], startPos = 5, k = 4\n**Output:** 14\n**Explanation:** \nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.\n\n**Example 3:**\n\n**Input:** fruits = \\[\\[0,3\\],\\[6,4\\],\\[8,5\\]\\], startPos = 3, k = 2\n**Output:** 0\n**Explanation:**\nYou can move at most k = 2 steps and cannot reach any position with fruits.\n\n**Constraints:**\n\n*   `1 <= fruits.length <= 105`\n*   `fruits[i].length == 2`\n*   `0 <= startPos, positioni <= 2 * 105`\n*   `positioni-1 < positioni` for any `i > 0` (**0-indexed**)\n*   `1 <= amounti <= 104`\n*   `0 <= k <= 2 * 105`Does an optimal path have very few patterns? For example, could a path that goes left, turns and goes right, then turns again and goes left be any better than a path that simply goes left, turns, and goes right? The optimal path turns at most once. That is, the optimal path is one of these: to go left only; to go right only; to go left, turn and go right; or to go right, turn and go left. Moving x steps left then k-x steps right gives you a range of positions that you can reach. Use prefix sums to get the sum of all fruits for each possible range. Use a similar strategy for all the paths that go right, then turn and go left.",
          "output": "from math import gcd\n\ndef findGCD(nums):\n    return gcd(min(nums), max(nums))\n"
     },
     {
          "instruction": "Write python code for this problem: A series of highways connect `n` cities numbered from `0` to `n - 1`. You are given a 2D integer array `highways` where `highways[i] = [city1i, city2i, tolli]` indicates that there is a highway that connects `city1i` and `city2i`, allowing a car to go from `city1i` to `city2i` **and vice versa** for a cost of `tolli`.\n\nYou are also given an integer `discounts` which represents the number of discounts you have. You can use a discount to travel across the `ith` highway for a cost of `tolli / 2` (**integer** **division**). Each discount may only be used **once**, and you can only use at most **one** discount per highway.\n\nReturn _the **minimum total cost** to go from city_ `0` _to city_ `n - 1`_, or_ `-1` _if it is not possible to go from city_ `0` _to city_ `n - 1`_._\n\n",
          "input": "**Example 1:**  \n\n**Input:** n = 5, highways = \\[\\[0,1,4\\],\\[2,1,3\\],\\[1,4,11\\],\\[3,2,3\\],\\[3,4,2\\]\\], discounts = 1\n**Output:** 9\n**Explanation:**\nGo from 0 to 1 for a cost of 4.\nGo from 1 to 4 and use a discount for a cost of 11 / 2 = 5.\nThe minimum cost to go from 0 to 4 is 4 + 5 = 9.\n\n**Example 2:**  \n\n**Input:** n = 4, highways = \\[\\[1,3,17\\],\\[1,2,7\\],\\[3,2,5\\],\\[0,1,6\\],\\[3,0,20\\]\\], discounts = 20\n**Output:** 8\n**Explanation:**\nGo from 0 to 1 and use a discount for a cost of 6 / 2 = 3.\nGo from 1 to 2 and use a discount for a cost of 7 / 2 = 3.\nGo from 2 to 3 and use a discount for a cost of 5 / 2 = 2.\nThe minimum cost to go from 0 to 3 is 3 + 3 + 2 = 8.\n\n**Example 3:**  \n\n**Input:** n = 4, highways = \\[\\[0,1,3\\],\\[2,3,2\\]\\], discounts = 0\n**Output:** -1\n**Explanation:**\nIt is impossible to go from 0 to 3 so return -1.\n\n**Constraints:**\n\n*   `2 <= n <= 1000`\n*   `1 <= highways.length <= 1000`\n*   `highways[i].length == 3`\n*   `0 <= city1i, city2i <= n - 1`\n*   `city1i != city2i`\n*   `0 <= tolli <= 105`\n*   `0 <= discounts <= 500`\n*   There are no duplicate highways.Try to construct a graph out of highways. What type of graph is this? We essentially need to find the minimum distance to get from node 0 to node n - 1 in an undirected weighted graph. What algorithm should we use to do this? Use Dijkstra's algorithm to find the minimum weight path. Keep track of the minimum distance to each vertex with d discounts left",
          "output": "def is_prefix_string(s, words):\n    temp = \"\"\n    for word in words:\n        temp += word\n        if temp == s:\n            return True\n        if len(temp) > len(s):\n            break\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: Given an array of strings `words`, return _the first **palindromic** string in the array_. If there is no such string, return _an **empty string**_ `\" \"`.\n\nA string is **palindromic** if it reads the same forward and backward.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"abc \", \"car \", \"ada \", \"racecar \", \"cool \"\\]\n**Output:**  \"ada \"\n**Explanation:** The first string that is palindromic is  \"ada \".\nNote that  \"racecar \" is also palindromic, but it is not the first.\n\n**Example 2:**\n\n**Input:** words = \\[ \"notapalindrome \", \"racecar \"\\]\n**Output:**  \"racecar \"\n**Explanation:** The first and only string that is palindromic is  \"racecar \".\n\n**Example 3:**\n\n**Input:** words = \\[ \"def \", \"ghi \"\\]\n**Output:**  \" \"\n**Explanation:** There are no palindromic strings, so the empty string is returned.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists only of lowercase English letters.Iterate through the elements in order. As soon as the current element is a palindrome, return it. To check if an element is a palindrome, can you reverse the string?",
          "output": "def minimizeTheDifference(mat, target):\n    m, n = len(mat), len(mat[0])\n    dp, new_dp = [1] + [0] * 4900, [0] * 4901\n    for i in range(m):\n        for j in range(n):\n            for k in range(4900 - mat[i][j] + 1):\n                new_dp[k + mat[i][j]] |= dp[k]\n        dp, new_dp = new_dp, [0] * 4901\n    for i in range(4901):\n        if dp[i]:\n            return abs(target - i)\n    return float('inf')\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s` and a **0-indexed** integer array `spaces` that describes the indices in the original string where spaces will be added. Each space should be inserted **before** the character at the given index.\n\n*   For example, given `s = \"EnjoyYourCoffee \"` and `spaces = [5, 9]`, we place spaces before `'Y'` and `'C'`, which are at indices `5` and `9` respectively. Thus, we obtain `\"Enjoy **Y**our **C**offee \"`.\n\nReturn _the modified string **after** the spaces have been added._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"LeetcodeHelpsMeLearn \", spaces = \\[8,13,15\\]\n**Output:**  \"Leetcode Helps Me Learn \"\n**Explanation:** \nThe indices 8, 13, and 15 correspond to the underlined characters in  \"Leetcode**H**elps**M**e**L**earn \".\nWe then place spaces before those characters.\n\n**Example 2:**\n\n**Input:** s =  \"icodeinpython \", spaces = \\[1,5,7,9\\]\n**Output:**  \"i code in py thon \"\n**Explanation:**\nThe indices 1, 5, 7, and 9 correspond to the underlined characters in  \"i**c**ode**i**n**p**y**t**hon \".\nWe then place spaces before those characters.\n\n**Example 3:**\n\n**Input:** s =  \"spacing \", spaces = \\[0,1,2,3,4,5,6\\]\n**Output:**  \" s p a c i n g \"\n**Explanation:**\nWe are also able to place spaces before the first character of the string.\n\n**Constraints:**\n\n*   `1 <= s.length <= 3 * 105`\n*   `s` consists only of lowercase and uppercase English letters.\n*   `1 <= spaces.length <= 3 * 105`\n*   `0 <= spaces[i] <= s.length - 1`\n*   All the values of `spaces` are **strictly increasing**.Create a new string, initially empty, as the modified string. Iterate through the original string and append each character of the original string to the new string. However, each time you reach a character that requires a space before it, append a space before appending the character. Since the array of indices for the space locations is sorted, use a pointer to keep track of the next index to place a space. Only increment the pointer once a space has been appended. Ensure that your append operation can be done in O(1).",
          "output": "from collections import Counter\ndef recoverArray(n, sums):\n    counter = Counter(sums)\n    ans = []\n    for _ in range(n):\n        num, _ = counter.most_common(1)[0]\n        counter -= Counter([num] + [prevNum - num for prevNum in ans])\n        ans.append(num)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `prices` representing the daily price history of a stock, where `prices[i]` is the stock price on the `ith` day.\n\nA **smooth descent period** of a stock consists of **one or more contiguous** days such that the price on each day is **lower** than the price on the **preceding day** by **exactly** `1`. The first day of the period is exempted from this rule.\n\nReturn _the number of **smooth descent periods**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** prices = \\[3,2,1,4\\]\n**Output:** 7\n**Explanation:** There are 7 smooth descent periods:\n\\[3\\], \\[2\\], \\[1\\], \\[4\\], \\[3,2\\], \\[2,1\\], and \\[3,2,1\\]\nNote that a period with one day is a smooth descent period by the definition.\n\n**Example 2:**\n\n**Input:** prices = \\[8,6,7,7\\]\n**Output:** 4\n**Explanation:** There are 4 smooth descent periods: \\[8\\], \\[6\\], \\[7\\], and \\[7\\]\nNote that \\[8,6\\] is not a smooth descent period as 8 - 6 \u2260 1.\n\n**Example 3:**\n\n**Input:** prices = \\[1\\]\n**Output:** 1\n**Explanation:** There is 1 smooth descent period: \\[1\\]\n\n**Constraints:**\n\n*   `1 <= prices.length <= 105`\n*   `1 <= prices[i] <= 105`Any array is a series of adjacent longest possible smooth descent periods. For example, [5,3,2,1,7,6] is [5] + [3,2,1] + [7,6]. Think of a 2-pointer approach to traverse the array and find each longest possible period. Suppose you found the longest possible period with a length of k. How many periods are within that period? How can you count them quickly? Think of the formula to calculate the sum of 1, 2, 3, ..., k.",
          "output": "def num_smooth_descent_periods(prices):\n    result = 0\n    count = 0\n    for i in range(1, len(prices)):\n        if prices[i] == prices[i - 1] - 1:\n            count += 1\n        else:\n            count = 0\n        result += count + 1\n    return result + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array `arr` consisting of `n` positive integers, and a positive integer `k`.\n\nThe array `arr` is called **K-increasing** if `arr[i-k] <= arr[i]` holds for every index `i`, where `k <= i <= n-1`.\n\n*   For example, `arr = [4, 1, 5, 2, 6, 2]` is K-increasing for `k = 2` because:\n    *   `arr[0] <= arr[2] (4 <= 5)`\n    *   `arr[1] <= arr[3] (1 <= 2)`\n    *   `arr[2] <= arr[4] (5 <= 6)`\n    *   `arr[3] <= arr[5] (2 <= 2)`\n*   However, the same `arr` is not K-increasing for `k = 1` (because `arr[0] > arr[1]`) or `k = 3` (because `arr[0] > arr[3]`).\n\nIn one **operation**, you can choose an index `i` and **change** `arr[i]` into **any** positive integer.\n\nReturn _the **minimum number of operations** required to make the array K-increasing for the given_ `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[5,4,3,2,1\\], k = 1\n**Output:** 4\n**Explanation:**\nFor k = 1, the resultant array has to be non-decreasing.\nSome of the K-increasing arrays that can be formed are \\[5,**6**,**7**,**8**,**9**\\], \\[**1**,**1**,**1**,**1**,1\\], \\[**2**,**2**,3,**4**,**4**\\]. All of them require 4 operations.\nIt is suboptimal to change the array to, for example, \\[**6**,**7**,**8**,**9**,**10**\\] because it would take 5 operations.\nIt can be shown that we cannot make the array K-increasing in less than 4 operations.\n\n**Example 2:**\n\n**Input:** arr = \\[4,1,5,2,6,2\\], k = 2\n**Output:** 0\n**Explanation:**\nThis is the same example as the one in the problem description.\nHere, for every index i where 2 <= i <= 5, arr\\[i-2\\] <= arr\\[i\\].\nSince the given array is already K-increasing, we do not need to perform any operations.\n\n**Example 3:**\n\n**Input:** arr = \\[4,1,5,2,6,2\\], k = 3\n**Output:** 2\n**Explanation:**\nIndices 3 and 5 are the only ones not satisfying arr\\[i-3\\] <= arr\\[i\\] for 3 <= i <= 5.\nOne of the ways we can make the array K-increasing is by changing arr\\[3\\] to 4 and arr\\[5\\] to 5.\nThe array will now be \\[4,1,5,**4**,6,**5**\\].\nNote that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 105`\n*   `1 <= arr[i], k <= arr.length`Can we divide the array into non-overlapping subsequences and simplify the problem? In the final array, arr[i-k] \u2264 arr[i] should hold. We can use this to divide the array into at most k non-overlapping sequences, where arr[i] will belong to the (i%k)th sequence. Now our problem boils down to performing the minimum operations on each sequence such that it becomes non-decreasing. Our answer will be the sum of operations on each sequence. Which indices of a sequence should we not change in order to count the minimum operations? Can finding the longest non-decreasing subsequence of the sequence help?",
          "output": "def minOperations(arr, k):\n    dp = [0] * len(arr)\n    for i in range(k, len(arr)):\n        dp[i] = max(dp[i - k] + 1 - (arr[i] - arr[i - k]), 0)\n    return sum(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `title` consisting of one or more words separated by a single space, where each word consists of English letters. **Capitalize** the string by changing the capitalization of each word such that:\n\n*   If the length of the word is `1` or `2` letters, change all letters to lowercase.\n*   Otherwise, change the first letter to uppercase and the remaining letters to lowercase.\n\nReturn _the **capitalized**_ `title`.\n\n",
          "input": "**Example 1:**\n\n**Input:** title =  \"capiTalIze tHe titLe \"\n**Output:**  \"Capitalize The Title \"\n**Explanation:**\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.\n\n**Example 2:**\n\n**Input:** title =  \"First leTTeR of EACH Word \"\n**Output:**  \"First Letter of Each Word \"\n**Explanation:**\nThe word  \"of \" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n\n**Example 3:**\n\n**Input:** title =  \"i lOve leetcode \"\n**Output:**  \"i Love Leetcode \"\n**Explanation:**\nThe word  \"i \" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n\n**Constraints:**\n\n*   `1 <= title.length <= 100`\n*   `title` consists of words separated by a single space without any leading or trailing spaces.\n*   Each word consists of uppercase and lowercase English letters and is **non-empty**.Firstly, try to find all the words present in the string. On the basis of each word's lengths, simulate the process explained in Problem.",
          "output": "def interchangeable_rectangles(rectangles):\n    ratio_count = {}\n    count = 0\n\n    for r in rectangles:\n        ratio = r[0] / r[1]\n        count += ratio_count.get(ratio, 0)\n        ratio_count[ratio] = ratio_count.get(ratio, 0) + 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: In a linked list of size `n`, where `n` is **even**, the `ith` node (**0-indexed**) of the linked list is known as the **twin** of the `(n-1-i)th` node, if `0 <= i <= (n / 2) - 1`.\n\n*   For example, if `n = 4`, then node `0` is the twin of node `3`, and node `1` is the twin of node `2`. These are the only nodes with twins for `n = 4`.\n\nThe **twin sum** is defined as the sum of a node and its twin.\n\nGiven the `head` of a linked list with even length, return _the **maximum twin sum** of the linked list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[5,4,2,1\\]\n**Output:** 6\n**Explanation:**\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6. \n\n**Example 2:**\n\n**Input:** head = \\[4,2,2,3\\]\n**Output:** 7\n**Explanation:**\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7. \n\n**Example 3:**\n\n**Input:** head = \\[1,100000\\]\n**Output:** 100001\n**Explanation:**\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.\n\n**Constraints:**\n\n*   The number of nodes in the list is an **even** integer in the range `[2, 105]`.\n*   `1 <= Node.val <= 105`How can \"reversing\" a part of the linked list help find the answer? We know that the nodes of the first half are twins of nodes in the second half, so try dividing the linked list in half and reverse the second half. How can two pointers be used to find every twin sum optimally? Use two different pointers pointing to the first nodes of the two halves of the linked list. The second pointer will point to the first node of the reversed half, which is the (n-1-i)th node in the original linked list. By moving both pointers forward at the same time, we find all twin sums.",
          "output": "def maxProduct(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    max_product = 0\n    for i in range(1, n):\n        max_product = max(max_product, dp[0][i - 1] * dp[i][n - 1])\n\n    return max_product\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `words`. Each element of `words` consists of **two** lowercase English letters.\n\nCreate the **longest possible palindrome** by selecting some elements from `words` and concatenating them in **any order**. Each element can be selected **at most once**.\n\nReturn _the **length** of the longest palindrome that you can create_. If it is impossible to create any palindrome, return `0`.\n\nA **palindrome** is a string that reads the same forward and backward.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"lc \", \"cl \", \"gg \"\\]\n**Output:** 6\n**Explanation:** One longest palindrome is  \"lc \" +  \"gg \" +  \"cl \" =  \"lcggcl \", of length 6.\nNote that  \"clgglc \" is another longest palindrome that can be created.\n\n**Example 2:**\n\n**Input:** words = \\[ \"ab \", \"ty \", \"yt \", \"lc \", \"cl \", \"ab \"\\]\n**Output:** 8\n**Explanation:** One longest palindrome is  \"ty \" +  \"lc \" +  \"cl \" +  \"yt \" =  \"tylcclyt \", of length 8.\nNote that  \"lcyttycl \" is another longest palindrome that can be created.\n\n**Example 3:**\n\n**Input:** words = \\[ \"cc \", \"ll \", \"xx \"\\]\n**Output:** 2\n**Explanation:** One longest palindrome is  \"cc \", of length 2.\nNote that  \"ll \" is another longest palindrome that can be created, and so is  \"xx \".\n\n**Constraints:**\n\n*   `1 <= words.length <= 105`\n*   `words[i].length == 2`\n*   `words[i]` consists of lowercase English letters.A palindrome must be mirrored over the center. Suppose we have a palindrome. If we prepend the word \"ab\" on the left, what must we append on the right to keep it a palindrome? We must append \"ba\" on the right. The number of times we can do this is the minimum of (occurrences of \"ab\") and (occurrences of \"ba\"). For words that are already palindromes, e.g. \"aa\", we can prepend and append these in pairs as described in the previous hint. We can also use exactly one in the middle to form an even longer palindrome.",
          "output": "def smallest_missing_value_subtree(parents, nums):\n    def dfs(node, parents, nums, tree, ans):\n        tree[node].add(nums[node])\n        for i in range(1, len(parents)):\n            if parents[i] == node:\n                dfs(i, parents, nums, tree, ans)\n                tree[node].update(tree[i])\n        missing = 1\n        while missing in tree[node]:\n            missing += 1\n        ans[node] = missing\n\n    n = len(parents)\n    ans = [0] * n\n    tree = [set() for _ in range(n)]\n    \n    dfs(0, parents, nums, tree, ans)\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: **Reversing** an integer means to reverse all its digits.\n\n*   For example, reversing `2021` gives `1202`. Reversing `12300` gives `321` as the **leading zeros are not retained**.\n\nGiven an integer `num`, **reverse** `num` to get `reversed1`, **then reverse** `reversed1` to get `reversed2`. Return `true` _if_ `reversed2` _equals_ `num`. Otherwise return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 526\n**Output:** true\n**Explanation:** Reverse num to get 625, then reverse 625 to get 526, which equals num.\n\n**Example 2:**\n\n**Input:** num = 1800\n**Output:** false\n**Explanation:** Reverse num to get 81, then reverse 81 to get 18, which does not equal num.\n\n**Example 3:**\n\n**Input:** num = 0\n**Output:** true\n**Explanation:** Reverse num to get 0, then reverse 0 to get 0, which equals num.\n\n**Constraints:**\n\n*   `0 <= num <= 106`Other than the number 0 itself, any number that ends with 0 would lose some digits permanently when reversed.",
          "output": "def minOperations(nums):\n    nums = sorted(set(nums))\n    n = len(nums)\n    ans = n\n    for i in range(n):\n        j = 0\n        while j < n and nums[j] <= nums[i] + n - 1:\n            j += 1\n        ans = min(ans, n - (j - i))\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: There is an `n x n` grid, with the top-left cell at `(0, 0)` and the bottom-right cell at `(n - 1, n - 1)`. You are given the integer `n` and an integer array `startPos` where `startPos = [startrow, startcol]` indicates that a robot is initially at cell `(startrow, startcol)`.\n\nYou are also given a **0-indexed** string `s` of length `m` where `s[i]` is the `ith` instruction for the robot: `'L'` (move left), `'R'` (move right), `'U'` (move up), and `'D'` (move down).\n\nThe robot can begin executing from any `ith` instruction in `s`. It executes the instructions one by one towards the end of `s` but it stops if either of these conditions is met:\n\n*   The next instruction will move the robot off the grid.\n*   There are no more instructions left to execute.\n\nReturn _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is **the number of instructions** the robot can execute if the robot **begins executing from** the_ `ith` _instruction in_ `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 3, startPos = \\[0,1\\], s =  \"RRDDLU \"\n**Output:** \\[1,5,4,3,1,0\\]\n**Explanation:** Starting from startPos and beginning execution from the ith instruction:\n- 0th:  \"**R**RDDLU \". Only one instruction  \"R \" can be executed before it moves off the grid.\n- 1st:   \"**RDDLU** \". All five instructions can be executed while it stays in the grid and ends at (1, 1).\n- 2nd:    \"**DDLU** \". All four instructions can be executed while it stays in the grid and ends at (1, 0).\n- 3rd:     \"**DLU** \". All three instructions can be executed while it stays in the grid and ends at (0, 0).\n- 4th:      \"**L**U \". Only one instruction  \"L \" can be executed before it moves off the grid.\n- 5th:       \"U \". If moving up, it would move off the grid.\n\n**Example 2:**\n\n**Input:** n = 2, startPos = \\[1,1\\], s =  \"LURD \"\n**Output:** \\[4,1,0,0\\]\n**Explanation:**\n- 0th:  \"**LURD** \".\n- 1st:   \"**U**RD \".\n- 2nd:    \"RD \".\n- 3rd:     \"D \".\n\n**Example 3:**\n\n**Input:** n = 1, startPos = \\[0,0\\], s =  \"LRUD \"\n**Output:** \\[0,0,0,0\\]\n**Explanation:** No matter which instruction the robot begins execution from, it would move off the grid.\n\n**Constraints:**\n\n*   `m == s.length`\n*   `1 <= n, m <= 500`\n*   `startPos.length == 2`\n*   `0 <= startrow, startcol < n`\n*   `s` consists of `'L'`, `'R'`, `'U'`, and `'D'`.The constraints are not very large. Can we simulate the execution by starting from each index of s? Before any of the stopping conditions is met, stop the simulation for that index and set the answer for that index.",
          "output": "def findNoOfInstructions(n: int, startPos: List[int], s: str) -> List[int]:\n    answer = [0] * len(s)\n    x, y = startPos\n\n    for i in range(len(s)):\n        cnt = 0\n        cx, cy = x, y\n        for j in range(i, len(s)):\n            step = s[j]\n            if step == 'L':\n                if cy == 0: break\n                cy -= 1\n            elif step == 'R':\n                if cy == n - 1: break\n                cy += 1\n            elif step == 'U':\n                if cx == 0: break\n                cx -= 1\n            else:\n                if cx == n - 1: break\n                cx += 1\n            cnt += 1\n            if j == len(s) - 1: break\n        answer[i] = cnt\n\n    return answer\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of `n` integers `arr`.\n\nThe **interval** between two elements in `arr` is defined as the **absolute difference** between their indices. More formally, the **interval** between `arr[i]` and `arr[j]` is `|i - j|`.\n\nReturn _an array_ `intervals` _of length_ `n` _where_ `intervals[i]` _is **the sum of intervals** between_ `arr[i]` _and each element in_ `arr` _with the same value as_ `arr[i]`_._\n\n**Note:** `|x|` is the absolute value of `x`.\n\n",
          "input": "**Example 1:**\n\n**Input:** arr = \\[2,1,3,1,2,3,3\\]\n**Output:** \\[4,2,7,2,4,4,5\\]\n**Explanation:**\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5\n\n**Example 2:**\n\n**Input:** arr = \\[10,5,10,10\\]\n**Output:** \\[5,0,3,4\\]\n**Explanation:**\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4\n\n**Constraints:**\n\n*   `n == arr.length`\n*   `1 <= n <= 105`\n*   `1 <= arr[i] <= 105`For each unique value found in the array, store a sorted list of indices of elements that have this value in the array. One way of doing this is to use a HashMap that maps the values to their list of indices. Update this mapping as you iterate through the array. Process each list of indices separately and get the sum of intervals for the elements of that value by utilizing prefix sums. For each element, keep track of the sum of indices of the identical elements that have come before and that will come after respectively. Use this to calculate the sum of intervals for that element to the rest of the elements with identical values.",
          "output": "from collections import defaultdict, deque\n\ndef has_path(n, edges, source, destination):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    q = deque([source])\n    visited = [False] * n\n    while q:\n        current = q.popleft()\n        visited[current] = True\n        if current == destination:\n            return True\n        for neighbor in graph[current]:\n            if not visited[neighbor]:\n                q.append(neighbor)\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `k`. Find the **largest even sum** of any subsequence of `nums` that has a length of `k`.\n\nReturn _this sum, or_ `-1` _if such a sum does not exist_.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,1,5,3,1\\], k = 3\n**Output:** 12\n**Explanation:**\nThe subsequence with the largest possible even sum is \\[4,5,3\\]. It has a sum of 4 + 5 + 3 = 12.\n\n**Example 2:**\n\n**Input:** nums = \\[4,6,2\\], k = 3\n**Output:** 12\n**Explanation:**\nThe subsequence with the largest possible even sum is \\[4,6,2\\]. It has a sum of 4 + 6 + 2 = 12.\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,5\\], k = 1\n**Output:** -1\n**Explanation:**\nNo subsequence of nums with length 1 has an even sum.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 105`\n*   `1 <= k <= nums.length`Is the sum of two even numbers even or odd? How about two odd numbers? One odd number and one even number? If there is an even number of odd numbers, the sum will be even and vice versa. Create an integer array to store all the even numbers in nums and another array to store all the odd numbers in nums. Sort both arrays.",
          "output": "def largest_even_sum(nums, k):\n    evens = sorted([num for num in nums if num % 2 == 0], reverse=True)\n    odds = sorted([num for num in nums if num % 2 != 0], reverse=True)\n\n    sum = 0\n    for _ in range(k):\n        if evens:\n            sum += evens.pop()\n\n    for _ in range(0, k - 1, 2):\n        if odds:\n            first = odds.pop()\n            if odds:\n                second = odds.pop()\n                sum += first + second\n\n    return sum if sum % 2 == 0 else -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a string `s` consisting of **only** the characters `'a'` and `'b'`, return `true` _if **every**_ `'a'` _appears before **every**_ `'b'` _in the string_. Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"aaabbb \"\n**Output:** true\n**Explanation:**\nThe 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true.\n\n**Example 2:**\n\n**Input:** s =  \"abab \"\n**Output:** false\n**Explanation:**\nThere is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false.\n\n**Example 3:**\n\n**Input:** s =  \"bbb \"\n**Output:** true\n**Explanation:**\nThere are no 'a's, hence, every 'a' appears before every 'b' and we return true.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s[i]` is either `'a'` or `'b'`.You can check the opposite: check if there is a \u2018b\u2019 before an \u2018a\u2019. Then, negate and return that answer. s should not have any occurrences of \u201cba\u201d as a substring.",
          "output": "def firstDayBeenInAllRooms(nextVisit):\n    n = len(nextVisit)\n    ans = 0\n    MOD = 10**9 + 7\n    dp = [0] * n\n\n    for i in range(1, n):\n        dp[i] = (dp[i - 1] + 1 + dp[i - 1] - dp[nextVisit[i - 1]] + MOD) % MOD\n        ans = (ans + dp[i]) % MOD\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: Anti-theft security devices are activated inside a bank. You are given a **0-indexed** binary string array `bank` representing the floor plan of the bank, which is an `m x n` 2D matrix. `bank[i]` represents the `ith` row, consisting of `'0'`s and `'1'`s. `'0'` means the cell is empty, while`'1'` means the cell has a security device.\n\nThere is **one** laser beam between any **two** security devices **if both** conditions are met:\n\n*   The two devices are located on two **different rows**: `r1` and `r2`, where `r1 < r2`.\n*   For **each** row `i` where `r1 < i < r2`, there are **no security devices** in the `ith` row.\n\nLaser beams are independent, i.e., one beam does not interfere nor join with another.\n\nReturn _the total number of laser beams in the bank_.\n\n",
          "input": "**Example 1:**\n\n**Input:** bank = \\[ \"011001 \", \"000000 \", \"010100 \", \"001000 \"\\]\n**Output:** 8\n**Explanation:** Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n \\* bank\\[0\\]\\[1\\] -- bank\\[2\\]\\[1\\]\n \\* bank\\[0\\]\\[1\\] -- bank\\[2\\]\\[3\\]\n \\* bank\\[0\\]\\[2\\] -- bank\\[2\\]\\[1\\]\n \\* bank\\[0\\]\\[2\\] -- bank\\[2\\]\\[3\\]\n \\* bank\\[0\\]\\[5\\] -- bank\\[2\\]\\[1\\]\n \\* bank\\[0\\]\\[5\\] -- bank\\[2\\]\\[3\\]\n \\* bank\\[2\\]\\[1\\] -- bank\\[3\\]\\[2\\]\n \\* bank\\[2\\]\\[3\\] -- bank\\[3\\]\\[2\\]\nNote that there is no beam between any device on the 0th row with any on the 3rd row.\nThis is because the 2nd row contains security devices, which breaks the second condition.\n\n**Example 2:**\n\n**Input:** bank = \\[ \"000 \", \"111 \", \"000 \"\\]\n**Output:** 0\n**Explanation:** There does not exist two devices located on two different rows.\n\n**Constraints:**\n\n*   `m == bank.length`\n*   `n == bank[i].length`\n*   `1 <= m, n <= 500`\n*   `bank[i][j]` is either `'0'` or `'1'`.What is the commonality between security devices on the same row? Each device on the same row has the same number of beams pointing towards the devices on the next row with devices. If you were given an integer array where each element is the number of security devices on each row, can you solve it? Convert the input to such an array, skip any row with no security device, then find the sum of the product between adjacent elements.",
          "output": "def can_sort_using_swap(nums):\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n            if sorted(nums) == nums:\n                return True\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `mass`, which represents the original mass of a planet. You are further given an integer array `asteroids`, where `asteroids[i]` is the mass of the `ith` asteroid.\n\nYou can arrange for the planet to collide with the asteroids in **any arbitrary order**. If the mass of the planet is **greater than or equal to** the mass of the asteroid, the asteroid is **destroyed** and the planet **gains** the mass of the asteroid. Otherwise, the planet is destroyed.\n\nReturn `true` _if **all** asteroids can be destroyed. Otherwise, return_ `false`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** mass = 10, asteroids = \\[3,9,19,5,21\\]\n**Output:** true\n**Explanation:** One way to order the asteroids is \\[9,19,5,3,21\\]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed.\n\n**Example 2:**\n\n**Input:** mass = 5, asteroids = \\[4,9,23,4\\]\n**Output:** false\n**Explanation:** \nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid.\n\n**Constraints:**\n\n*   `1 <= mass <= 105`\n*   `1 <= asteroids.length <= 105`\n*   `1 <= asteroids[i] <= 105`Choosing the asteroid to collide with can be done greedily. If an asteroid will destroy the planet, then every bigger asteroid will also destroy the planet. You only need to check the smallest asteroid at each collision. If it will destroy the planet, then every other asteroid will also destroy the planet. Sort the asteroids in non-decreasing order by mass, then greedily try to collide with the asteroids in that order.",
          "output": "def can_destroy_all(mass: int, asteroids: List[int]) -> bool:\n    asteroids.sort()\n    for asteroid in asteroids:\n        if mass >= asteroid:\n            mass += asteroid\n        else:\n            return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: A company is organizing a meeting and has a list of `n` employees, waiting to be invited. They have arranged for a large **circular** table, capable of seating **any number** of employees.\n\nThe employees are numbered from `0` to `n - 1`. Each employee has a **favorite** person and they will attend the meeting **only if** they can sit next to their favorite person at the table. The favorite person of an employee is **not** themself.\n\nGiven a **0-indexed** integer array `favorite`, where `favorite[i]` denotes the favorite person of the `ith` employee, return _the **maximum number of employees** that can be invited to the meeting_.\n\n",
          "input": "**Example 1:**\n\n**Input:** favorite = \\[2,2,1,2\\]\n**Output:** 3\n**Explanation:**\nThe above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.\nAll employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.\nNote that the company can also invite employees 1, 2, and 3, and give them their desired seats.\nThe maximum number of employees that can be invited to the meeting is 3. \n\n**Example 2:**\n\n**Input:** favorite = \\[1,2,0\\]\n**Output:** 3\n**Explanation:** \nEach employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee.\nThe seating arrangement will be the same as that in the figure given in example 1:\n- Employee 0 will sit between employees 2 and 1.\n- Employee 1 will sit between employees 0 and 2.\n- Employee 2 will sit between employees 1 and 0.\nThe maximum number of employees that can be invited to the meeting is 3.\n\n**Example 3:**\n\n**Input:** favorite = \\[3,0,1,4,1\\]\n**Output:** 4\n**Explanation:**\nThe above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.\nEmployee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.\nSo the company leaves them out of the meeting.\nThe maximum number of employees that can be invited to the meeting is 4.\n\n**Constraints:**\n\n*   `n == favorite.length`\n*   `2 <= n <= 105`\n*   `0 <= favorite[i] <= n - 1`\n*   `favorite[i] != i`From the given array favorite, create a graph where for every index i, there is a directed edge from favorite[i] to i. The graph will be a combination of cycles and chains of acyclic edges. Now, what are the ways in which we can choose employees to sit at the table? The first way by which we can choose employees is by selecting a cycle of the graph. It can be proven that in this case, the employees that do not lie in the cycle can never be seated at the table. The second way is by combining acyclic chains. At most two chains can be combined by a cycle of length 2, where each chain ends on one of the employees in the cycle.",
          "output": "def max_invited(favorite):\n    in_degree = [0] * len(favorite)\n    for fav in favorite:\n        in_degree[fav] += 1\n    result = 0\n    for degree in in_degree:\n        result += max(degree - 1, 0)\n    return min(result + 2, len(favorite))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `candies`, where `candies[i]` represents the flavor of the `ith` candy. Your mom wants you to share these candies with your little sister by giving her `k` **consecutive** candies, but you want to keep as many flavors of candies as possible.\n\nReturn _the **maximum** number of **unique** flavors of candy you can keep after sharing_ _with your sister._\n\n",
          "input": "**Example 1:**\n\n**Input:** candies = \\[1,2,2,3,4,3\\], k = 3\n**Output:** 3\n**Explanation:** \nGive the candies in the range \\[1, 3\\] (inclusive) with flavors \\[2,2,3\\].\nYou can eat candies with flavors \\[1,4,3\\].\nThere are 3 unique flavors, so return 3.\n\n**Example 2:**\n\n**Input:** candies = \\[2,2,2,2,3,3\\], k = 2\n**Output:** 2\n**Explanation:** \nGive the candies in the range \\[3, 4\\] (inclusive) with flavors \\[2,3\\].\nYou can eat candies with flavors \\[2,2,2,3\\].\nThere are 2 unique flavors, so return 2.\nNote that you can also share the candies with flavors \\[2,2\\] and eat the candies with flavors \\[2,2,3,3\\].\n\n**Example 3:**\n\n**Input:** candies = \\[2,4,5\\], k = 0\n**Output:** 3\n**Explanation:** \nYou do not have to give any candies.\nYou can eat the candies with flavors \\[2,4,5\\].\nThere are 3 unique flavors, so return 3.\n\n**Constraints:**\n\n*   `1 <= candies.length <= 105`\n*   `1 <= candies[i] <= 105`\n*   `0 <= k <= candies.length`For every group of k consecutive candies, count the number of unique flavors not inside that group. Return the largest number of unique flavors. When calculating an adjacent group of k consecutive candies, can you use some of your previous calculations? Use a sliding window where the window is the group of k consecutive candies you are sharing. Use a hash map to store the number of candies of each type you can keep.",
          "output": "def find_different_binary_string(nums):\n    return \"\".join(\"1\" if nums[i][i] == \"0\" else \"0\" for i in range(len(nums)))\n"
     },
     {
          "instruction": "Write python code for this problem: A shop is selling candies at a discount. For **every two** candies sold, the shop gives a **third** candy for **free**.\n\nThe customer can choose **any** candy to take away for free as long as the cost of the chosen candy is less than or equal to the **minimum** cost of the two candies bought.\n\n*   For example, if there are `4` candies with costs `1`, `2`, `3`, and `4`, and the customer buys candies with costs `2` and `3`, they can take the candy with cost `1` for free, but not the candy with cost `4`.\n\nGiven a **0-indexed** integer array `cost`, where `cost[i]` denotes the cost of the `ith` candy, return _the **minimum cost** of buying **all** the candies_.\n\n",
          "input": "**Example 1:**\n\n**Input:** cost = \\[1,2,3\\]\n**Output:** 5\n**Explanation:** We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the **only** way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.\n\n**Example 2:**\n\n**Input:** cost = \\[6,5,7,9,2,2\\]\n**Output:** 23\n**Explanation:** The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.\n\n**Example 3:**\n\n**Input:** cost = \\[5,5\\]\n**Output:** 10\n**Explanation:** Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.\n\n**Constraints:**\n\n*   `1 <= cost.length <= 100`\n*   `1 <= cost[i] <= 100`If we consider costs from high to low, what is the maximum cost of a single candy that we can get for free? How can we generalize this approach to maximize the costs of the candies we get for free? Can \u201csorting\u201d the array help us find the minimum cost? If we consider costs from high to low, what is the maximum cost of a single candy that we can get for free? How can we generalize this approach to maximize the costs of the candies we get for free? Can \u201csorting\u201d the array help us find the minimum cost?",
          "output": "def max_difference(nums):\n    min_val = nums[0]\n    max_diff = -1\n\n    for i in range(1, len(nums)):\n        if nums[i] > min_val:\n            max_diff = max(max_diff, nums[i] - min_val)\n        else:\n            min_val = nums[i]\n\n    return max_diff\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of `n` integers `differences`, which describes the **differences** between each pair of **consecutive** integers of a **hidden** sequence of length `(n + 1)`. More formally, call the hidden sequence `hidden`, then we have that `differences[i] = hidden[i + 1] - hidden[i]`.\n\nYou are further given two integers `lower` and `upper` that describe the **inclusive** range of values `[lower, upper]` that the hidden sequence can contain.\n\n*   For example, given `differences = [1, -3, 4]`, `lower = 1`, `upper = 6`, the hidden sequence is a sequence of length `4` whose elements are in between `1` and `6` (**inclusive**).\n    *   `[3, 4, 1, 5]` and `[4, 5, 2, 6]` are possible hidden sequences.\n    *   `[5, 6, 3, 7]` is not possible since it contains an element greater than `6`.\n    *   `[1, 2, 3, 4]` is not possible since the differences are not correct.\n\nReturn _the number of **possible** hidden sequences there are._ If there are no possible sequences, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** differences = \\[1,-3,4\\], lower = 1, upper = 6\n**Output:** 2\n**Explanation:** The possible hidden sequences are:\n- \\[3, 4, 1, 5\\]\n- \\[4, 5, 2, 6\\]\nThus, we return 2.\n\n**Example 2:**\n\n**Input:** differences = \\[3,-4,5,1,-2\\], lower = -4, upper = 5\n**Output:** 4\n**Explanation:** The possible hidden sequences are:\n- \\[-3, 0, -4, 1, 2, 0\\]\n- \\[-2, 1, -3, 2, 3, 1\\]\n- \\[-1, 2, -2, 3, 4, 2\\]\n- \\[0, 3, -1, 4, 5, 3\\]\nThus, we return 4.\n\n**Example 3:**\n\n**Input:** differences = \\[4,-7,2\\], lower = 3, upper = 6\n**Output:** 0\n**Explanation:** There are no possible hidden sequences. Thus, we return 0.\n\n**Constraints:**\n\n*   `n == differences.length`\n*   `1 <= n <= 105`\n*   `-105 <= differences[i] <= 105`\n*   `-105 <= lower <= upper <= 105`Fix the first element of the hidden sequence to any value x and ignore the given bounds. Notice that we can then determine all the other elements of the sequence by using the differences array. We will also be able to determine the difference between the minimum and maximum elements of the sequence. Notice that the value of x does not affect this. We now have the \u2018range\u2019 of the sequence (difference between min and max element), we can then calculate how many ways there are to fit this range into the given range of lower to upper. Answer is (upper - lower + 1) - (range of sequence)",
          "output": "def min_second_robot_points(grid: List[List[int]]) -> int:\n    n = len(grid[0])\n    for r in range(2):\n        for c in range(1, n):\n            grid[r][c] += grid[r][c - 1]\n    dp = [grid[0][n - 1], 0]\n    for c in range(n - 2, -1, -1):\n        dp_new = [max(dp[0] - grid[0][c], dp[1] + grid[1][c]), max(dp[1] - grid[1][c], dp[0] + grid[0][c])]\n        dp = dp_new\n    return max(dp)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** 2D integer array `grid` of size `m x n` that represents a map of the items in a shop. The integers in the grid represent the following:\n\n*   `0` represents a wall that you cannot pass through.\n*   `1` represents an empty cell that you can freely move to and from.\n*   All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.\n\nIt takes `1` step to travel between adjacent grid cells.\n\nYou are also given integer arrays `pricing` and `start` where `pricing = [low, high]` and `start = [row, col]` indicates that you start at the position `(row, col)` and are interested only in items with a price in the range of `[low, high]` (**inclusive**). You are further given an integer `k`.\n\nYou are interested in the **positions** of the `k` **highest-ranked** items whose prices are **within** the given price range. The rank is determined by the **first** of these criteria that is different:\n\n1.  Distance, defined as the length of the shortest path from the `start` (**shorter** distance has a higher rank).\n2.  Price (**lower** price has a higher rank, but it must be **in the price range**).\n3.  The row number (**smaller** row number has a higher rank).\n4.  The column number (**smaller** column number has a higher rank).\n\nReturn _the_ `k` _highest-ranked items within the price range **sorted** by their rank (highest to lowest)_. If there are fewer than `k` reachable items within the price range, return _**all** of them_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,2,0,1\\],\\[1,3,0,1\\],\\[0,2,5,1\\]\\], pricing = \\[2,5\\], start = \\[0,0\\], k = 3\n**Output:** \\[\\[0,1\\],\\[1,1\\],\\[2,1\\]\\]\n**Explanation:** You start at (0,0).\nWith a price range of \\[2,5\\], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1).\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,2,0,1\\],\\[1,3,3,1\\],\\[0,2,5,1\\]\\], pricing = \\[2,3\\], start = \\[2,3\\], k = 2\n**Output:** \\[\\[2,1\\],\\[1,2\\]\\]\n**Explanation:** You start at (2,3).\nWith a price range of \\[2,3\\], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2).\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[0,0,1\\],\\[2,3,4\\]\\], pricing = \\[2,3\\], start = \\[0,0\\], k = 3\n**Output:** \\[\\[2,1\\],\\[2,0\\]\\]\n**Explanation:** You start at (0,0).\nWith a price range of \\[2,3\\], we can take items from (2,0) and (2,1). \nThe ranks of these items are: \n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0). \nNote that k = 3 but there are only 2 reachable items within the price range.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 105`\n*   `1 <= m * n <= 105`\n*   `0 <= grid[i][j] <= 105`\n*   `pricing.length == 2`\n*   `2 <= low <= high <= 105`\n*   `start.length == 2`\n*   `0 <= row <= m - 1`\n*   `0 <= col <= n - 1`\n*   `grid[row][col] > 0`\n*   `1 <= k <= m * n`Could you determine the rank of every item efficiently? We can perform a breadth-first search from the starting position and know the length of the shortest path from start to every item. Sort all the items according to the conditions listed in the problem, and return the first k (or all if less than k exist) items as the answer.",
          "output": "def can_place_word(board, word):\n    m, n = len(board), len(board[0])\n    for i in range(m):\n        for j in range(n):\n            if board[i][j] == word[0]:\n                if check_word(board, word, i, j, 0, 1) or check_word(board, word, i, j, 1, 0):\n                    return True\n    return False\n\ndef check_word(board, word, i, j, di, dj):\n    m, n = len(board), len(board[0])\n    for k in range(len(word)):\n        i += di\n        j += dj\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if k == 0 or k == len(word) - 1:\n            if board[i][j] != word[k] and board[i][j] != ' ':\n                return False\n        if k > 0 and k < len(word) - 1:\n            if board[i][j] != word[k] and board[i][j] != ' ' and board[i][j] != '#':\n                return False\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: Along a long library corridor, there is a line of seats and decorative plants. You are given a **0-indexed** string `corridor` of length `n` consisting of letters `'S'` and `'P'` where each `'S'` represents a seat and each `'P'` represents a plant.\n\nOne room divider has **already** been installed to the left of index `0`, and **another** to the right of index `n - 1`. Additional room dividers can be installed. For each position between indices `i - 1` and `i` (`1 <= i <= n - 1`), at most one divider can be installed.\n\nDivide the corridor into non-overlapping sections, where each section has **exactly two seats** with any number of plants. There may be multiple ways to perform the division. Two ways are **different** if there is a position with a room divider installed in the first way but not in the second way.\n\nReturn _the number of ways to divide the corridor_. Since the answer may be very large, return it **modulo** `109 + 7`. If there is no way, return `0`.\n\n",
          "input": "**Example 1:**\n\n**Input:** corridor =  \"SSPPSPS \"\n**Output:** 3\n**Explanation:** There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, **each** section has exactly **two** seats.\n\n**Example 2:**\n\n**Input:** corridor =  \"PPSPSP \"\n**Output:** 1\n**Explanation:** There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats.\n\n**Example 3:**\n\n**Input:** corridor =  \"S \"\n**Output:** 0\n**Explanation:** There is no way to divide the corridor because there will always be a section that does not have exactly two seats.\n\n**Constraints:**\n\n*   `n == corridor.length`\n*   `1 <= n <= 105`\n*   `corridor[i]` is either `'S'` or `'P'`.Divide the corridor into segments. Each segment has two seats, starts precisely with one seat, and ends precisely with the other seat. How many dividers can you install between two adjacent segments? You must install precisely one. Otherwise, you would have created a section with not exactly two seats. If there are k plants between two adjacent segments, there are k + 1 positions (ways) you could install the divider you must install. The problem now becomes: Find the product of all possible positions between every two adjacent segments.",
          "output": "def sum_of_points(s, answers):\n    total_points = 0\n    result = 0\n    term = 1\n    sign = \"+\"\n\n    for char in s:\n        if char.isdigit():\n            number = int(char)\n            if sign == \"+\":\n                result += term\n                term = number\n            elif sign == \"*\":\n                term *= number\n        else:\n            sign = char\n\n    result += term\n\n    for ans in answers:\n        total_points += (ans == result)\n\n    return total_points\n"
     },
     {
          "instruction": "Write python code for this problem: An `n x n` matrix is **valid** if every row and every column contains **all** the integers from `1` to `n` (**inclusive**).\n\nGiven an `n x n` integer matrix `matrix`, return `true` _if the matrix is **valid**._ Otherwise, return `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[3,1,2\\],\\[2,3,1\\]\\]\n**Output:** true\n**Explanation:** In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,1,1\\],\\[1,2,3\\],\\[1,2,3\\]\\]\n**Output:** false\n**Explanation:** In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false.\n\n**Constraints:**\n\n*   `n == matrix.length == matrix[i].length`\n*   `1 <= n <= 100`\n*   `1 <= matrix[i][j] <= n`Use for loops to check each row for every number from 1 to n. Similarly, do the same for each column. For each check, you can keep a set of the unique elements in the checked row/col. By the end of the check, the size of the set should be n.",
          "output": "def count_pairs(nums, target):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target or nums[j] + nums[i] == target:\n                count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: A **swap** is defined as taking two **distinct** positions in an array and swapping the values in them.\n\nA **circular** array is defined as an array where we consider the **first** element and the **last** element to be **adjacent**.\n\nGiven a **binary** **circular** array `nums`, return _the minimum number of swaps required to group all_ `1`_'s present in the array together at **any location**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,0,1,1,0,0\\]\n**Output:** 1\n**Explanation:** Here are a few of the ways to group all the 1's together:\n\\[0,0,1,1,1,0,0\\] using 1 swap.\n\\[0,1,1,1,0,0,0\\] using 1 swap.\n\\[1,1,0,0,0,0,1\\] using 2 swaps (using the circular property of the array).\nThere is no way to group all 1's together with 0 swaps.\nThus, the minimum number of swaps required is 1.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,1,1,0,0,1,1,0\\]\n**Output:** 2\n**Explanation:** Here are a few of the ways to group all the 1's together:\n\\[1,1,1,0,0,0,0,1,1\\] using 2 swaps (using the circular property of the array).\n\\[1,1,1,1,1,0,0,0,0\\] using 2 swaps.\nThere is no way to group all 1's together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,0,0,1\\]\n**Output:** 0\n**Explanation:** All the 1's are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`.Notice that the number of 1\u2019s to be grouped together is fixed. It is the number of 1's the whole array has. Call this number total. We should then check for every subarray of size total (possibly wrapped around), how many swaps are required to have the subarray be all 1\u2019s. The number of swaps required is the number of 0\u2019s in the subarray. To eliminate the circular property of the array, we can append the original array to itself. Then, we check each subarray of length total. How do we avoid recounting the number of 0\u2019s in the subarray each time? The Sliding Window technique can help.",
          "output": "def max_consecutive_answers(answer_key: str, k: int) -> int:\n    n = len(answer_key)\n    start, max_len, max_count = 0, 0, 0\n    count = {'T': 0, 'F': 0}\n\n    for end in range(n):\n        max_count = max(max_count, count.__setitem__(answer_key[end], count[answer_key[end]] + 1))\n\n        if end - start + 1 - max_count > k:\n            count[answer_key[start]] -= 1\n            start += 1\n\n        max_len = max(max_len, end - start + 1)\n\n    return max_len\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **0-indexed** arrays of strings `startWords` and `targetWords`. Each string consists of **lowercase English letters** only.\n\nFor each string in `targetWords`, check if it is possible to choose a string from `startWords` and perform a **conversion operation** on it to be equal to that from `targetWords`.\n\nThe **conversion operation** is described in the following two steps:\n\n1.  **Append** any lowercase letter that is **not present** in the string to its end.\n    *   For example, if the string is `\"abc \"`, the letters `'d'`, `'e'`, or `'y'` can be added to it, but not `'a'`. If `'d'` is added, the resulting string will be `\"abcd \"`.\n2.  **Rearrange** the letters of the new string in **any** arbitrary order.\n    *   For example, `\"abcd \"` can be rearranged to `\"acbd \"`, `\"bacd \"`, `\"cbda \"`, and so on. Note that it can also be rearranged to `\"abcd \"` itself.\n\nReturn _the **number of strings** in_ `targetWords` _that can be obtained by performing the operations on **any** string of_ `startWords`.\n\n**Note** that you will only be verifying if the string in `targetWords` can be obtained from a string in `startWords` by performing the operations. The strings in `startWords` **do not** actually change during this process.\n\n",
          "input": "**Example 1:**\n\n**Input:** startWords = \\[ \"ant \", \"act \", \"tack \"\\], targetWords = \\[ \"tack \", \"act \", \"acti \"\\]\n**Output:** 2\n**Explanation:**\n- In order to form targetWords\\[0\\] =  \"tack \", we use startWords\\[1\\] =  \"act \", append 'k' to it, and rearrange  \"actk \" to  \"tack \".\n- There is no string in startWords that can be used to obtain targetWords\\[1\\] =  \"act \".\n  Note that  \"act \" does exist in startWords, but we **must** append one letter to the string before rearranging it.\n- In order to form targetWords\\[2\\] =  \"acti \", we use startWords\\[1\\] =  \"act \", append 'i' to it, and rearrange  \"acti \" to  \"acti \" itself.\n\n**Example 2:**\n\n**Input:** startWords = \\[ \"ab \", \"a \"\\], targetWords = \\[ \"abc \", \"abcd \"\\]\n**Output:** 1\n**Explanation:**\n- In order to form targetWords\\[0\\] =  \"abc \", we use startWords\\[0\\] =  \"ab \", add 'c' to it, and rearrange it to  \"abc \".\n- There is no string in startWords that can be used to obtain targetWords\\[1\\] =  \"abcd \".\n\n**Constraints:**\n\n*   `1 <= startWords.length, targetWords.length <= 5 * 104`\n*   `1 <= startWords[i].length, targetWords[j].length <= 26`\n*   Each string of `startWords` and `targetWords` consists of lowercase English letters only.\n*   No letter occurs more than once in any string of `startWords` or `targetWords`.Which data structure can be used to efficiently check if a string exists in startWords? After appending a letter, all letters of a string can be rearranged in any possible way. How can we use this to reduce our search space while checking if a string in targetWords can be obtained from a string in startWords?",
          "output": "def numOfWays(nums, k):\n    left = 0\n    right = 0\n    for num in nums:\n        if num < k:\n            left += 1\n        if num <= k:\n            right += 1\n\n    if left == len(nums):\n        return 0\n    if right - left != len(nums) - right:\n        return left + 1\n    return left\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two **0-indexed** integer arrays `plantTime` and `growTime`, of length `n` each:\n\n*   `plantTime[i]` is the number of **full days** it takes you to **plant** the `ith` seed. Every day, you can work on planting exactly one seed. You **do not** have to work on planting the same seed on consecutive days, but the planting of a seed is not complete **until** you have worked `plantTime[i]` days on planting it in total.\n*   `growTime[i]` is the number of **full days** it takes the `ith` seed to grow after being completely planted. **After** the last day of its growth, the flower **blooms** and stays bloomed forever.\n\nFrom the beginning of day `0`, you can plant the seeds in **any** order.\n\nReturn _the **earliest** possible day where **all** seeds are blooming_.\n\n",
          "input": "**Example 1:**\n\n**Input:** plantTime = \\[1,4,3\\], growTime = \\[2,3,1\\]\n**Output:** 9\n**Explanation:** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n\n**Example 2:**\n\n**Input:** plantTime = \\[1,2,3,2\\], growTime = \\[2,1,2,1\\]\n**Output:** 9\n**Explanation:** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n\n**Example 3:**\n\n**Input:** plantTime = \\[1\\], growTime = \\[1\\]\n**Output:** 2\n**Explanation:** On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming.\n\n**Constraints:**\n\n*   `n == plantTime.length == growTime.length`\n*   `1 <= n <= 105`\n*   `1 <= plantTime[i], growTime[i] <= 104`List the planting like the diagram above shows, where a row represents the timeline of a seed. A row i is above another row j if the last day planting seed i is ahead of the last day for seed j. Does it have any advantage to spend some days to plant seed j before completely planting seed i? No. It does not help seed j but could potentially delay the completion of seed i, resulting in a worse final answer. Remaining focused is a part of the optimal solution. Sort the seeds by their growTime in descending order. Can you prove why this strategy is the other part of the optimal solution? Note the bloom time of a seed is the sum of plantTime of all seeds preceding this seed plus the growTime of this seed. There is no way to improve this strategy. The seed to bloom last dominates the final answer. Exchanging the planting of this seed with another seed with either a larger or smaller growTime will result in a potentially worse answer.",
          "output": "def earliestBlooms(plantTime, growTime):\n    n = len(plantTime)\n    processTime = list(zip(plantTime, growTime))\n    processTime.sort()\n\n    day = 0\n    blooms = 0\n    for p in processTime:\n        day += p[0]\n        blooms = max(blooms, day + p[1])\n    return blooms\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`. Initially on minute `0`, the array is unchanged. Every minute, the **leftmost** element in `nums` is removed until no elements remain. Then, every minute, one element is appended to the **end** of `nums`, in the order they were removed in, until the original array is restored. This process repeats indefinitely.\n\n*   For example, the array `[0,1,2]` would change as follows: `[0,1,2] -> [1,2] -> [2] -> [] -> [0] -> [0,1] -> [0,1,2] -> [1,2] -> [2] -> [] -> [0] -> [0,1] -> [0,1,2] -> ...`\n\nYou are also given a 2D integer array `queries` of size `n` where `queries[j] = [timej, indexj]`. The answer to the `jth` query is:\n\n*   `nums[indexj]` if `indexj < nums.length` at minute `timej`\n*   `-1` if `indexj >= nums.length` at minute `timej`\n\nReturn _an integer array `ans` of size_ `n` _where_ `ans[j]` _is the answer to the_ `jth` _query_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,1,2\\], queries = \\[\\[0,2\\],\\[2,0\\],\\[3,2\\],\\[5,0\\]\\]\n**Output:** \\[2,2,-1,0\\]\n**Explanation:**\nMinute 0: \\[0,1,2\\] - All elements are in the nums.\nMinute 1: \\[1,2\\]   - The leftmost element, 0, is removed.\nMinute 2: \\[2\\]     - The leftmost element, 1, is removed.\nMinute 3: \\[\\]      - The leftmost element, 2, is removed.\nMinute 4: \\[0\\]     - 0 is added to the end of nums.\nMinute 5: \\[0,1\\]   - 1 is added to the end of nums.\n\nAt minute 0, nums\\[2\\] is 2.\nAt minute 2, nums\\[0\\] is 2.\nAt minute 3, nums\\[2\\] does not exist.\nAt minute 5, nums\\[0\\] is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[2\\], queries = \\[\\[0,0\\],\\[1,0\\],\\[2,0\\],\\[3,0\\]\\]\n**Output:** \\[2,-1,2,-1\\]\nMinute 0: \\[2\\] - All elements are in the nums.\nMinute 1: \\[\\]  - The leftmost element, 2, is removed.\nMinute 2: \\[2\\] - 2 is added to the end of nums.\nMinute 3: \\[\\]  - The leftmost element, 2, is removed.\n\nAt minute 0, nums\\[0\\] is 2.\nAt minute 1, nums\\[0\\] does not exist.\nAt minute 2, nums\\[0\\] is 2.\nAt minute 3, nums\\[0\\] does not exist.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 100`\n*   `n == queries.length`\n*   `1 <= n <= 105`\n*   `queries[j].length == 2`\n*   `0 <= timej <= 105`\n*   `0 <= indexj < nums.length`Try to find a pattern in how nums changes. Let m be the original length of nums. If time_i / m (integer division) is even, then nums is at its original size or decreasing in size. If it is odd, then it is empty, or increasing in size. time_i % m can be used to find how many elements are in nums at minute time_i.",
          "output": "def kthLargestNumber(nums, k):\n    nums.sort(key=lambda x: (len(x), x))\n    return nums[-k]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** binary matrix `grid`. In one operation, you can flip any `1` in `grid` to be `0`.\n\nA binary matrix is **well-isolated** if there is no `1` in the matrix that is **4-directionally connected** (i.e., horizontal and vertical) to another `1`.\n\nReturn _the minimum number of operations to make_ `grid` _**well-isolated**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,0\\],\\[0,1,1\\],\\[1,1,1\\]\\]\n**Output:** 3\n**Explanation:** Use 3 operations to change grid\\[0\\]\\[1\\], grid\\[1\\]\\[2\\], and grid\\[2\\]\\[1\\] to 0.\nAfter, no more 1's are 4-directionally connected and grid is well-isolated.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]\n**Output:** 0\n**Explanation:** There are no 1's in grid and it is well-isolated.\nNo operations were done so return 0.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[0,1\\],\\[1,0\\]\\]\n**Output:** 0\n**Explanation:** None of the 1's are 4-directionally connected and grid is well-isolated.\nNo operations were done so return 0.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 300`\n*   `grid[i][j]` is either `0` or `1`.Consider each cell containing a 1 as a vertex whose neighbors are the cells 4-directionally connected to it. The grid then becomes a bipartite graph. You want to find the smallest set of vertices such that every edge in the graph has an endpoint in this set. If you remove every vertex in this set from the graph, then all the 1\u2019s will be disconnected. Are there any well-known algorithms for finding this set? This set of vertices is called a minimum vertex cover. You can find the size of a minimum vertex cover by finding the size of a maximum matching (Konig\u2019s theorem). There are well-known algorithms such as Kuhn\u2019s algorithm and Hopcroft-Karp-Karzanov algorithm which can find a maximum matching in a bipartite graph quickly.",
          "output": "def numberOfWeakCharacters(properties):\n    properties.sort(key=lambda x: (x[0], -x[1]))\n    \n    max_defense = 0\n    weak_count = 0\n    for attack, defense in reversed(properties):\n        if defense < max_defense:\n            weak_count += 1\n        else:\n            max_defense = defense\n            \n    return weak_count\n"
     },
     {
          "instruction": "Write python code for this problem: A string `s` can be partitioned into groups of size `k` using the following procedure:\n\n*   The first group consists of the first `k` characters of the string, the second group consists of the next `k` characters of the string, and so on. Each character can be a part of **exactly one** group.\n*   For the last group, if the string **does not** have `k` characters remaining, a character `fill` is used to complete the group.\n\nNote that the partition is done so that after removing the `fill` character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be `s`.\n\nGiven the string `s`, the size of each group `k` and the character `fill`, return _a string array denoting the **composition of every group**_ `s` _has been divided into, using the above procedure_.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"abcdefghi \", k = 3, fill =  \"x \"\n**Output:** \\[ \"abc \", \"def \", \"ghi \"\\]\n**Explanation:**\nThe first 3 characters  \"abc \" form the first group.\nThe next 3 characters  \"def \" form the second group.\nThe last 3 characters  \"ghi \" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are  \"abc \",  \"def \", and  \"ghi \".\n\n**Example 2:**\n\n**Input:** s =  \"abcdefghij \", k = 3, fill =  \"x \"\n**Output:** \\[ \"abc \", \"def \", \"ghi \", \"jxx \"\\]\n**Explanation:**\nSimilar to the previous example, we are forming the first three groups  \"abc \",  \"def \", and  \"ghi \".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are  \"abc \",  \"def \",  \"ghi \", and  \"jxx \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of lowercase English letters only.\n*   `1 <= k <= 100`\n*   `fill` is a lowercase English letter.Using the length of the string and k, can you count the number of groups the string can be divided into? Try completing each group using characters from the string. If there aren\u2019t enough characters for the last group, use the fill character to complete the group.",
          "output": "def sum_of_beauties(nums: List[int]) -> int:\n    n = len(nums)\n    result = 0\n\n    left_max = [0] * n\n    left_max[0] = nums[0]\n    right_min = [0] * n\n    right_min[n - 1] = nums[n - 1]\n\n    for i in range(1, n):\n        left_max[i] = max(left_max[i - 1], nums[i])\n\n    for i in range(n - 2, -1, -1):\n        right_min[i] = min(right_min[i + 1], nums[i])\n\n    for i in range(1, n - 1):\n        if nums[i] > left_max[i - 1] and nums[i] < right_min[i + 1]:\n            result += 1\n\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** binary array `nums` of length `n`. `nums` can be divided at index `i` (where `0 <= i <= n)` into two arrays (possibly empty) `numsleft` and `numsright`:\n\n*   `numsleft` has all the elements of `nums` between index `0` and `i - 1` **(inclusive)**, while `numsright` has all the elements of nums between index `i` and `n - 1` **(inclusive)**.\n*   If `i == 0`, `numsleft` is **empty**, while `numsright` has all the elements of `nums`.\n*   If `i == n`, `numsleft` has all the elements of nums, while `numsright` is **empty**.\n\nThe **division score** of an index `i` is the **sum** of the number of `0`'s in `numsleft` and the number of `1`'s in `numsright`.\n\nReturn _**all distinct indices** that have the **highest** possible **division score**_. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,0,1,0\\]\n**Output:** \\[2,4\\]\n**Explanation:** Division at index\n- 0: numsleft is \\[\\]. numsright is \\[0,0,**1**,0\\]. The score is 0 + 1 = 1.\n- 1: numsleft is \\[**0**\\]. numsright is \\[0,**1**,0\\]. The score is 1 + 1 = 2.\n- 2: numsleft is \\[**0**,**0**\\]. numsright is \\[**1**,0\\]. The score is 2 + 1 = 3.\n- 3: numsleft is \\[**0**,**0**,1\\]. numsright is \\[0\\]. The score is 2 + 0 = 2.\n- 4: numsleft is \\[**0**,**0**,1,**0**\\]. numsright is \\[\\]. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer \\[4,2\\] would also be accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,0\\]\n**Output:** \\[3\\]\n**Explanation:** Division at index\n- 0: numsleft is \\[\\]. numsright is \\[0,0,0\\]. The score is 0 + 0 = 0.\n- 1: numsleft is \\[**0**\\]. numsright is \\[0,0\\]. The score is 1 + 0 = 1.\n- 2: numsleft is \\[**0**,**0**\\]. numsright is \\[0\\]. The score is 2 + 0 = 2.\n- 3: numsleft is \\[**0**,**0**,**0**\\]. numsright is \\[\\]. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1\\]\n**Output:** \\[0\\]\n**Explanation:** Division at index\n- 0: numsleft is \\[\\]. numsright is \\[**1**,**1**\\]. The score is 0 + 2 = 2.\n- 1: numsleft is \\[1\\]. numsright is \\[**1**\\]. The score is 0 + 1 = 1.\n- 2: numsleft is \\[1,1\\]. numsright is \\[\\]. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `nums[i]` is either `0` or `1`.When you iterate the array, maintain the number of zeros and ones on the left side. Can you quickly calculate the number of ones on the right side? The number of ones on the right side equals the number of ones in the whole array minus the number of ones on the left side. Alternatively, you can quickly calculate it by using a prefix sum array.",
          "output": "from typing import List\n\ndef missing_rolls(rolls: List[int], mean: int, n: int) -> List[int]:\n    m = len(rolls)\n    total_sum = mean * (n + m)\n    sum_m = sum(rolls)\n    \n    if total_sum - sum_m < n or total_sum - sum_m > 6 * n:\n        return []\n    \n    ans = [1] * n\n    total_sum -= sum_m + n\n    for i in range(n):\n        add = min(5, total_sum)\n        ans[i] += add\n        total_sum -= add\n    \n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** 2D integer array `questions` where `questions[i] = [pointsi, brainpoweri]`.\n\nThe array describes the questions of an exam, where you have to process the questions **in order** (i.e., starting from question `0`) and make a decision whether to **solve** or **skip** each question. Solving question `i` will **earn** you `pointsi` points but you will be **unable** to solve each of the next `brainpoweri` questions. If you skip question `i`, you get to make the decision on the next question.\n\n*   For example, given `questions = [[3, 2], [4, 3], [4, 4], [2, 5]]`:\n    *   If question `0` is solved, you will earn `3` points but you will be unable to solve questions `1` and `2`.\n    *   If instead, question `0` is skipped and question `1` is solved, you will earn `4` points but you will be unable to solve questions `2` and `3`.\n\nReturn _the **maximum** points you can earn for the exam_.\n\n",
          "input": "**Example 1:**\n\n**Input:** questions = \\[\\[3,2\\],\\[4,3\\],\\[4,4\\],\\[2,5\\]\\]\n**Output:** 5\n**Explanation:** The maximum points can be earned by solving questions 0 and 3.\n- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions\n- Unable to solve questions 1 and 2\n- Solve question 3: Earn 2 points\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.\n\n**Example 2:**\n\n**Input:** questions = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\],\\[5,5\\]\\]\n**Output:** 7\n**Explanation:** The maximum points can be earned by solving questions 1 and 4.\n- Skip question 0\n- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions\n- Unable to solve questions 2 and 3\n- Solve question 4: Earn 5 points\nTotal points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.\n\n**Constraints:**\n\n*   `1 <= questions.length <= 105`\n*   `questions[i].length == 2`\n*   `1 <= pointsi, brainpoweri <= 105`For each question, we can either solve it or skip it. How can we use Dynamic Programming to decide the most optimal option for each problem? We store for each question the maximum points we can earn if we started the exam on that question. If we skip a question, then the answer for it will be the same as the answer for the next question. If we solve a question, then the answer for it will be the points of the current question plus the answer for the next solvable question. The maximum of these two values will be the answer to the current question.",
          "output": "def longest_subsequence_repeated_k(s, k):\n    counts = [0] * 26\n    for c in s:\n        counts[ord(c) - ord('a')] += 1\n    seq = ''.join([chr(i + ord('a')) * (counts[i] // k) for i in range(25, -1, -1)])\n    return seq\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` computers. You are given the integer `n` and a **0-indexed** integer array `batteries` where the `ith` battery can **run** a computer for `batteries[i]` minutes. You are interested in running **all** `n` computers **simultaneously** using the given batteries.\n\nInitially, you can insert **at most one battery** into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery **any number of times**. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\n\nNote that the batteries cannot be recharged.\n\nReturn _the **maximum** number of minutes you can run all the_ `n` _computers simultaneously._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 2, batteries = \\[3,3,3\\]\n**Output:** 4\n**Explanation:** \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.\n\n**Example 2:**\n\n**Input:** n = 2, batteries = \\[1,1,1,1\\]\n**Output:** 2\n**Explanation:** \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.\n\n**Constraints:**\n\n*   `1 <= n <= batteries.length <= 105`\n*   `1 <= batteries[i] <= 109`For a given running time, can you determine if it is possible to run all n computers simultaneously? Try to use Binary Search to find the maximal running time",
          "output": "def max_computer_runtime(n, batteries):\n    batteries.sort()\n    result = 0\n    for i in range(len(batteries)):\n        result = max(result, min(n, len(batteries) - i) * batteries[i])\n    return result\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **positive** integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the **digits** found in `num`. **Leading zeros** are allowed in `new1` and `new2`, and **all** the digits found in `num` must be used.\n\n*   For example, given `num = 2932`, you have the following digits: two `2`'s, one `9` and one `3`. Some of the possible pairs `[new1, new2]` are `[22, 93]`, `[23, 92]`, `[223, 9]` and `[2, 329]`.\n\nReturn _the **minimum** possible sum of_ `new1` _and_ `new2`.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 2932\n**Output:** 52\n**Explanation:** Some possible pairs \\[new1, new2\\] are \\[29, 23\\], \\[223, 9\\], etc.\nThe minimum sum can be obtained by the pair \\[29, 23\\]: 29 + 23 = 52.\n\n**Example 2:**\n\n**Input:** num = 4009\n**Output:** 13\n**Explanation:** Some possible pairs \\[new1, new2\\] are \\[0, 49\\], \\[490, 0\\], etc. \nThe minimum sum can be obtained by the pair \\[4, 9\\]: 4 + 9 = 13.\n\n**Constraints:**\n\n*   `1000 <= num <= 9999`Notice that the most optimal way to obtain the minimum possible sum using 4 digits is by summing up two 2-digit numbers. We can use the two smallest digits out of the four as the digits found in the tens place respectively. Similarly, we use the final 2 larger digits as the digits found in the ones place.",
          "output": "def min_operations(grid, x):\n    min_element = min(min(row) for row in grid)\n    min_ops = float('inf')\n\n    base = min_element\n    while True:\n        operations = 0\n        impossible = False\n        for row in grid:\n            if impossible:\n                break\n            for cell in row:\n                diff = abs(cell - base)\n                if diff % x != 0:\n                    impossible = True\n                    break\n                operations += diff // x\n        if impossible:\n            break\n        min_ops = min(min_ops, operations)\n        base -= 1\n\n    return -1 if min_ops == float('inf') else min_ops\n"
     },
     {
          "instruction": "Write python code for this problem: A generic microwave supports cooking times for:\n\n*   at least `1` second.\n*   at most `99` minutes and `99` seconds.\n\nTo set the cooking time, you push **at most four digits**. The microwave normalizes what you push as four digits by **prepending zeroes**. It interprets the **first** two digits as the minutes and the **last** two digits as the seconds. It then **adds** them up as the cooking time. For example,\n\n*   You push `9` `5` `4` (three digits). It is normalized as `0954` and interpreted as `9` minutes and `54` seconds.\n*   You push `0` `0` `0` `8` (four digits). It is interpreted as `0` minutes and `8` seconds.\n*   You push `8` `0` `9` `0`. It is interpreted as `80` minutes and `90` seconds.\n*   You push `8` `1` `3` `0`. It is interpreted as `81` minutes and `30` seconds.\n\nYou are given integers `startAt`, `moveCost`, `pushCost`, and `targetSeconds`. **Initially**, your finger is on the digit `startAt`. Moving the finger above **any specific digit** costs `moveCost` units of fatigue. Pushing the digit below the finger **once** costs `pushCost` units of fatigue.\n\nThere can be multiple ways to set the microwave to cook for `targetSeconds` seconds but you are interested in the way with the minimum cost.\n\nReturn _the **minimum cost** to set_ `targetSeconds` _seconds of cooking time_.\n\nRemember that one minute consists of `60` seconds.\n\n",
          "input": "**Example 1:**\n\n**Input:** startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600\n**Output:** 6\n**Explanation:** The following are the possible ways to set the cooking time.\n- 1 0 0 0, interpreted as 10 minutes and 0 seconds.\n  The finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).\n  The cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.\n- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.\n  The finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n  The cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.\n- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.\n  The finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n  The cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9.\n\n**Example 2:**\n\n**Input:** startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76\n**Output:** 6\n**Explanation:** The optimal way is to push two digits: 7 6, interpreted as 76 seconds.\nThe finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6\nNote other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost.\n\n**Constraints:**\n\n*   `0 <= startAt <= 9`\n*   `1 <= moveCost, pushCost <= 105`\n*   `1 <= targetSeconds <= 6039`Define a separate function Cost(mm, ss) where 0 <= mm <= 99 and 0 <= ss <= 99. This function should calculate the cost of setting the cocking time to mm minutes and ss seconds The range of the minutes is small (i.e., [0, 99]), how can you use that? For every mm in [0, 99], calculate the needed ss to make mm:ss equal to targetSeconds and minimize the cost of setting the cocking time to mm:ss Be careful in some cases when ss is not in the valid range [0, 99].",
          "output": "def min_partition_difference(nums):\n    n = len(nums) // 2\n    nums.sort(reverse=True)\n    return sum(nums[:n]) - sum(nums[n:])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` consisting of `3 * n` elements.\n\nYou are allowed to remove any **subsequence** of elements of size **exactly** `n` from `nums`. The remaining `2 * n` elements will be divided into two **equal** parts:\n\n*   The first `n` elements belonging to the first part and their sum is `sumfirst`.\n*   The next `n` elements belonging to the second part and their sum is `sumsecond`.\n\nThe **difference in sums** of the two parts is denoted as `sumfirst - sumsecond`.\n\n*   For example, if `sumfirst = 3` and `sumsecond = 2`, their difference is `1`.\n*   Similarly, if `sumfirst = 2` and `sumsecond = 3`, their difference is `-1`.\n\nReturn _the **minimum difference** possible between the sums of the two parts after the removal of_ `n` _elements_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,2\\]\n**Output:** -1\n**Explanation:** Here, nums has 3 elements, so n = 1. \nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums\\[0\\] = 3, the array will be \\[1,2\\]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums\\[1\\] = 1, the array will be \\[3,2\\]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums\\[2\\] = 2, the array will be \\[3,1\\]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1. \n\n**Example 2:**\n\n**Input:** nums = \\[7,9,5,8,1,3\\]\n**Output:** 1\n**Explanation:** Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums\\[2\\] = 5 and nums\\[3\\] = 8, the resultant array will be \\[7,9,1,3\\]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums\\[1\\] = 9 and nums\\[4\\] = 1. The resultant array becomes \\[7,5,8,3\\]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1.\n\n**Constraints:**\n\n*   `nums.length == 3 * n`\n*   `1 <= n <= 105`\n*   `1 <= nums[i] <= 105`The lowest possible difference can be obtained when the sum of the first n elements in the resultant array is minimum, and the sum of the next n elements is maximum. For every index i, think about how you can find the minimum possible sum of n elements with indices lesser or equal to i, if possible. Similarly, for every index i, try to find the maximum possible sum of n elements with indices greater or equal to i, if possible. Now for all indices, check if we can consider it as the partitioning index and hence find the answer.",
          "output": "def kth_distinct_string(arr, k):\n    frequency = {}\n    for s in arr:\n        frequency[s] = frequency.get(s, 0) + 1\n\n    count = 0\n    for s in arr:\n        if frequency[s] == 1:\n            count += 1\n            if count == k:\n                return s\n\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an `m x n` binary matrix `grid`.\n\nIn one operation, you can choose **any** row or column and flip each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s).\n\nReturn `true` _if it is possible to remove all_ `1`_'s from_ `grid` using **any** number of operations or `false` otherwise.\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[0,1,0\\],\\[1,0,1\\],\\[0,1,0\\]\\]\n**Output:** true\n**Explanation:** One possible way to remove all 1's from grid is to:\n- Flip the middle row\n- Flip the middle column\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]\n**Output:** false\n**Explanation:** It is impossible to remove all 1's from grid.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[0\\]\\]\n**Output:** true\n**Explanation:** There are no 1's in grid.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 300`\n*   `grid[i][j]` is either `0` or `1`.Does the order, in which you do the operations, matter? No, it does not. An element will keep its original value if the number of operations done on it is even and vice versa. This also means that doing more than 1 operation on the same row or column is unproductive. Try working backward, start with a matrix of all zeros and try to construct grid using operations. Start with operations on columns, after doing them what do you notice about each row? Each row is the exact same. If we then flip some rows, that leaves only two possible arrangements for each row: the same as the original or the opposite.",
          "output": "def reverse_prefix(word: str, ch: str) -> str:\n    try:\n        index = word.index(ch)\n        return word[:index+1][::-1] + word[index+1:]\n    except ValueError:\n        return word\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer array `nums`, return _the number of elements that have **both** a strictly smaller and a strictly greater element appear in_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[11,7,2,15\\]\n**Output:** 2\n**Explanation:** The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in `nums`.\n\n**Example 2:**\n\n**Input:** nums = \\[-3,3,3,90\\]\n**Output:** 2\n**Explanation:** The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in `nums`.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-105 <= nums[i] <= 105`All the elements in the array should be counted except for the minimum and maximum elements. If the array has n elements, the answer will be n - count(min(nums)) - count(max(nums)) This formula will not work in case the array has all the elements equal, why?",
          "output": "def min_moves(seats, students):\n    seats.sort()\n    students.sort()\n\n    moves = 0\n    for i in range(len(seats)):\n        moves += abs(seats[i] - students[i])\n    return moves\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums`. A number `x` is **lonely** when it appears only **once**, and no **adjacent** numbers (i.e. `x + 1` and `x - 1)` appear in the array.\n\nReturn _**all** lonely numbers in_ `nums`. You may return the answer in **any order**.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[10,6,5,8\\]\n**Output:** \\[10,8\\]\n**Explanation:** \n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are \\[10, 8\\].\nNote that \\[8, 10\\] may also be returned.\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,5,3\\]\n**Output:** \\[1,5\\]\n**Explanation:** \n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are \\[1, 5\\].\nNote that \\[5, 1\\] may also be returned.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 106`For a given element x, how can you quickly check if x - 1 and x + 1 are present in the array without reiterating through the entire array? Use a set or a hash map.",
          "output": "ript\nfunction lonelyNumbers(nums) {\n    const count = {};\n    const result = [];\n\n    for (const num of nums) {\n        if (count[num] === undefined) {\n            count[num] = 1;\n        } else {\n            count[num]++;\n        }\n    }\n\n    for (const key in count) {\n        const k = parseInt(key);\n        if (count[k] === 1 && count[k - 1] === undefined && count[k + 1] === undefined) {\n            result.push(k);\n        }\n    }\n\n    return result;\n}\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` of **even** length consisting of an **equal** number of positive and negative integers.\n\nYou should **rearrange** the elements of `nums` such that the modified array follows the given conditions:\n\n1.  Every **consecutive pair** of integers have **opposite signs**.\n2.  For all integers with the same sign, the **order** in which they were present in `nums` is **preserved**.\n3.  The rearranged array begins with a positive integer.\n\nReturn _the modified array after rearranging the elements to satisfy the aforementioned conditions_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,-2,-5,2,-4\\]\n**Output:** \\[3,-2,1,-5,2,-4\\]\n**Explanation:**\nThe positive integers in nums are \\[3,1,2\\]. The negative integers are \\[-2,-5,-4\\].\nThe only possible way to rearrange them such that they satisfy all conditions is \\[3,-2,1,-5,2,-4\\].\nOther ways such as \\[1,-2,2,-5,3,-4\\], \\[3,1,2,-2,-5,-4\\], \\[-2,3,-5,1,-4,2\\] are incorrect because they do not satisfy one or more conditions.  \n\n**Example 2:**\n\n**Input:** nums = \\[-1,1\\]\n**Output:** \\[1,-1\\]\n**Explanation:**\n1 is the only positive integer and -1 the only negative integer in nums.\nSo nums is rearranged to \\[1,-1\\].\n\n**Constraints:**\n\n*   `2 <= nums.length <= 2 * 105`\n*   `nums.length` is **even**\n*   `1 <= |nums[i]| <= 105`\n*   `nums` consists of **equal** number of positive and negative integers.Divide the array into two parts- one comprising of only positive integers and the other of negative integers. Merge the two parts to get the resultant array.",
          "output": "def solve_puzzle(colors: str) -> bool:\n    return colors.count('A') % 2 == 1\n"
     },
     {
          "instruction": "Write python code for this problem: There are two types of persons:\n\n*   The **good person**: The person who always tells the truth.\n*   The **bad person**: The person who might tell the truth and might lie.\n\nYou are given a **0-indexed** 2D integer array `statements` of size `n x n` that represents the statements made by `n` people about each other. More specifically, `statements[i][j]` could be one of the following:\n\n*   `0` which represents a statement made by person `i` that person `j` is a **bad** person.\n*   `1` which represents a statement made by person `i` that person `j` is a **good** person.\n*   `2` represents that **no statement** is made by person `i` about person `j`.\n\nAdditionally, no person ever makes a statement about themselves. Formally, we have that `statements[i][i] = 2` for all `0 <= i < n`.\n\nReturn _the **maximum** number of people who can be **good** based on the statements made by the_ `n` _people_.\n\n",
          "input": "**Example 1:**\n\n**Input:** statements = \\[\\[2,1,2\\],\\[1,2,2\\],\\[2,0,2\\]\\]\n**Output:** 2\n**Explanation:** Each person makes a single statement.\n- Person 0 states that person 1 is good.\n- Person 1 states that person 0 is good.\n- Person 2 states that person 1 is bad.\nLet's take person 2 as the key.\n- Assuming that person 2 is a good person:\n    - Based on the statement made by person 2, person 1 is a bad person.\n    - Now we know for sure that person 1 is bad and person 2 is good.\n    - Based on the statement made by person 1, and since person 1 is bad, they could be:\n        - telling the truth. There will be a contradiction in this case and this assumption is invalid.\n        - lying. In this case, person 0 is also a bad person and lied in their statement.\n    - **Following that person 2 is a good person, there will be only one good person in the group**.\n- Assuming that person 2 is a bad person:\n    - Based on the statement made by person 2, and since person 2 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.\n            - **Following that person 2 is bad but told the truth, there will be no good persons in the group**.\n        - lying. In this case person 1 is a good person.\n            - Since person 1 is a good person, person 0 is also a good person.\n            - **Following that person 2 is bad and lied, there will be two good persons in the group**.\nWe can see that at most 2 persons are good in the best case, so we return 2.\nNote that there is more than one way to arrive at this conclusion.\n\n**Example 2:**\n\n**Input:** statements = \\[\\[2,0\\],\\[0,2\\]\\]\n**Output:** 1\n**Explanation:** Each person makes a single statement.\n- Person 0 states that person 1 is bad.\n- Person 1 states that person 0 is bad.\nLet's take person 0 as the key.\n- Assuming that person 0 is a good person:\n    - Based on the statement made by person 0, person 1 is a bad person and was lying.\n    - **Following that person 0 is a good person, there will be only one good person in the group**.\n- Assuming that person 0 is a bad person:\n    - Based on the statement made by person 0, and since person 0 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad.\n            - **Following that person 0 is bad but told the truth, there will be no good persons in the group**.\n        - lying. In this case person 1 is a good person.\n            - **Following that person 0 is bad and lied, there will be only one good person in the group**.\nWe can see that at most, one person is good in the best case, so we return 1.\nNote that there is more than one way to arrive at this conclusion.\n\n**Constraints:**\n\n*   `n == statements.length == statements[i].length`\n*   `2 <= n <= 15`\n*   `statements[i][j]` is either `0`, `1`, or `2`.\n*   `statements[i][i] == 2`You should test every possible assignment of good and bad people, using a bitmask. In each bitmask, if the person i is good, then his statements should be consistent with the bitmask in order for the assignment to be valid. If the assignment is valid, count how many people are good and keep track of the maximum.",
          "output": "from collections import defaultdict, deque\n\ndef network_becomes_idle(edges, patience):\n    n = len(patience)\n    graph = defaultdict(list)\n    \n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    dist = [-1] * n\n    dist[0] = 0\n    q = deque([0])\n    \n    while q:\n        node = q.popleft()\n        \n        for neighbor in graph[node]:\n            if dist[neighbor] == -1:\n                dist[neighbor] = dist[node] + 1\n                q.append(neighbor)\n\n    max_time = 0\n    for i in range(1, n):\n        time = ((2 * dist[i] - 1) // patience[i]) * patience[i] + 2 * dist[i]\n        max_time = max(max_time, time)\n    \n    return max_time + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You have `n` buckets each containing some gallons of water in it, represented by a **0-indexed** integer array `buckets`, where the `ith` bucket contains `buckets[i]` gallons of water. You are also given an integer `loss`.\n\nYou want to make the amount of water in each bucket equal. You can pour any amount of water from one bucket to another bucket (not necessarily an integer). However, every time you pour `k` gallons of water, you spill `loss` **percent** of `k`.\n\nReturn _the **maximum** amount of water in each bucket after making the amount of water equal._ Answers within `10-5` of the actual answer will be accepted.\n\n",
          "input": "**Example 1:**\n\n**Input:** buckets = \\[1,2,7\\], loss = 80\n**Output:** 2.00000\n**Explanation:** Pour 5 gallons of water from buckets\\[2\\] to buckets\\[0\\].\n5 \\* 80% = 4 gallons are spilled and buckets\\[0\\] only receives 5 - 4 = 1 gallon of water.\nAll buckets have 2 gallons of water in them so return 2.\n\n**Example 2:**\n\n**Input:** buckets = \\[2,4,6\\], loss = 50\n**Output:** 3.50000\n**Explanation:** Pour 0.5 gallons of water from buckets\\[1\\] to buckets\\[0\\].\n0.5 \\* 50% = 0.25 gallons are spilled and buckets\\[0\\] only receives 0.5 - 0.25 = 0.25 gallons of water.\nNow, buckets = \\[2.25, 3.5, 6\\].\nPour 2.5 gallons of water from buckets\\[2\\] to buckets\\[0\\].\n2.5 \\* 50% = 1.25 gallons are spilled and buckets\\[0\\] only receives 2.5 - 1.25 = 1.25 gallons of water.\nAll buckets have 3.5 gallons of water in them so return 3.5.\n\n**Example 3:**\n\n**Input:** buckets = \\[3,3,3,3\\], loss = 40\n**Output:** 3.00000\n**Explanation:** All buckets already have the same amount of water in them.\n\n**Constraints:**\n\n*   `1 <= buckets.length <= 105`\n*   `0 <= buckets[i] <= 105`\n*   `0 <= loss <= 99`What is the range that the answer must fall into? The answer has to be in the range [0, max(buckets)] (inclusive). For a number x, is there an efficient way to check if it is possible to make the amount of water in each bucket x. Let in be the total amount of water that needs to be poured into buckets and out be the total amount of water that needs to be poured out of buckets to make the amount of water in each bucket x. If out - (out * loss) >= in, then it is possible.",
          "output": "def perform_operations(operations):\n    X = 0\n    for op in operations:\n        if op == \"++X\" or op == \"X++\":\n            X += 1\n        elif op == \"--X\" or op == \"X--\":\n            X -= 1\n    return X\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `nums`. You are also given an integer `original` which is the first number that needs to be searched for in `nums`.\n\nYou then do the following steps:\n\n1.  If `original` is found in `nums`, **multiply** it by two (i.e., set `original = 2 * original`).\n2.  Otherwise, **stop** the process.\n3.  **Repeat** this process with the new number as long as you keep finding the number.\n\nReturn _the **final** value of_ `original`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,3,6,1,12\\], original = 3\n**Output:** 24\n**Explanation:** \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.\n\n**Example 2:**\n\n**Input:** nums = \\[2,7,9\\], original = 4\n**Output:** 4\n**Explanation:**\n- 4 is not found in nums. Thus, 4 is returned.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i], original <= 1000`Repeatedly iterate through the array and check if the current value of original is in the array. If original is not found, stop and return its current value. Otherwise, multiply original by 2 and repeat the process. Use set data structure to check the existence faster.",
          "output": "def min_moves_to_convert(s):\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == \"X\" and s[i + 1] == \"X\" and s[i + 2] == \"X\":\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: The hash of a **0-indexed** string `s` of length `k`, given integers `p` and `m`, is computed using the following function:\n\n*   `hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m`.\n\nWhere `val(s[i])` represents the index of `s[i]` in the alphabet from `val('a') = 1` to `val('z') = 26`.\n\nYou are given a string `s` and the integers `power`, `modulo`, `k`, and `hashValue.` Return `sub`, _the **first** **substring** of_ `s` _of length_ `k` _such that_ `hash(sub, power, modulo) == hashValue`.\n\nThe test cases will be generated such that an answer always **exists**.\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"leetcode \", power = 7, modulo = 20, k = 2, hashValue = 0\n**Output:**  \"ee \"\n**Explanation:** The hash of  \"ee \" can be computed to be hash( \"ee \", 7, 20) = (5 \\* 1 + 5 \\* 7) mod 20 = 40 mod 20 = 0. \n \"ee \" is the first substring of length 2 with hashValue 0. Hence, we return  \"ee \".\n\n**Example 2:**\n\n**Input:** s =  \"fbxzaad \", power = 31, modulo = 100, k = 3, hashValue = 32\n**Output:**  \"fbx \"\n**Explanation:** The hash of  \"fbx \" can be computed to be hash( \"fbx \", 31, 100) = (6 \\* 1 + 2 \\* 31 + 24 \\* 312) mod 100 = 23132 mod 100 = 32. \nThe hash of  \"bxz \" can be computed to be hash( \"bxz \", 31, 100) = (2 \\* 1 + 24 \\* 31 + 26 \\* 312) mod 100 = 25732 mod 100 = 32. \n \"fbx \" is the first substring of length 3 with hashValue 32. Hence, we return  \"fbx \".\nNote that  \"bxz \" also has a hash of 32 but it appears later than  \"fbx \".\n\n**Constraints:**\n\n*   `1 <= k <= s.length <= 2 * 104`\n*   `1 <= power, modulo <= 109`\n*   `0 <= hashValue < modulo`\n*   `s` consists of lowercase English letters only.\n*   The test cases are generated such that an answer always **exists**.How can we update the hash value efficiently while iterating instead of recalculating it each time? Use the rolling hash method.",
          "output": "def alice_wins(stones):\n    sum_, count = 0, [0] * 3\n    for stone in stones:\n        sum_ += stone\n        count[stone % 3] += 1\n    if sum_ % 3:\n        return count[sum_ % 3] % 2 == 1\n    return count[1] % 2 == 0 or count[2] % 2 == 0 or count[1] == 0 or count[2] == 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array of strings `words`. Each string consists of **lowercase English letters** only. No letter occurs more than once in any string of `words`.\n\nTwo strings `s1` and `s2` are said to be **connected** if the set of letters of `s2` can be obtained from the set of letters of `s1` by any **one** of the following operations:\n\n*   Adding exactly one letter to the set of the letters of `s1`.\n*   Deleting exactly one letter from the set of the letters of `s1`.\n*   Replacing exactly one letter from the set of the letters of `s1` with any letter, **including** itself.\n\nThe array `words` can be divided into one or more non-intersecting **groups**. A string belongs to a group if any **one** of the following is true:\n\n*   It is connected to **at least one** other string of the group.\n*   It is the **only** string present in the group.\n\nNote that the strings in `words` should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\n\nReturn _an array_ `ans` _of size_ `2` _where:_\n\n*   `ans[0]` _is the **maximum number** of groups_ `words` _can be divided into, and_\n*   `ans[1]` _is the **size of the largest** group_.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"a \", \"b \", \"ab \", \"cde \"\\]\n**Output:** \\[2,3\\]\n**Explanation:**\n- words\\[0\\] can be used to obtain words\\[1\\] (by replacing 'a' with 'b'), and words\\[2\\] (by adding 'b'). So words\\[0\\] is connected to words\\[1\\] and words\\[2\\].\n- words\\[1\\] can be used to obtain words\\[0\\] (by replacing 'b' with 'a'), and words\\[2\\] (by adding 'a'). So words\\[1\\] is connected to words\\[0\\] and words\\[2\\].\n- words\\[2\\] can be used to obtain words\\[0\\] (by deleting 'b'), and words\\[1\\] (by deleting 'a'). So words\\[2\\] is connected to words\\[0\\] and words\\[1\\].\n- words\\[3\\] is not connected to any string in words.\nThus, words can be divided into 2 groups \\[ \"a \", \"b \", \"ab \"\\] and \\[ \"cde \"\\]. The size of the largest group is 3.  \n\n**Example 2:**\n\n**Input:** words = \\[ \"a \", \"ab \", \"abc \"\\]\n**Output:** \\[1,3\\]\n**Explanation:**\n- words\\[0\\] is connected to words\\[1\\].\n- words\\[1\\] is connected to words\\[0\\] and words\\[2\\].\n- words\\[2\\] is connected to words\\[1\\].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3.\n\n**Constraints:**\n\n*   `1 <= words.length <= 2 * 104`\n*   `1 <= words[i].length <= 26`\n*   `words[i]` consists of lowercase English letters only.\n*   No letter occurs more than once in `words[i]`.Can we build a graph from words, where there exists an edge between nodes i and j if words[i] and words[j] are connected? The problem now boils down to finding the total number of components and the size of the largest component in the graph. How can we use bit masking to reduce the search space while adding edges to node i?",
          "output": "from heapq import heappop, heappush\n\ndef smallest_subsequence(s, k, letter, repetition):\n    result = []\n    letter_count = s.count(letter)\n\n    pq = []\n    for c in s:\n        if c <= letter or letter_count > repetition:\n            while pq and pq[0] > c:\n                if heappop(pq) == letter:\n                    letter_count -= 1\n            heappush(pq, c)\n            if len(pq) > k:\n                heappop(pq)\n        if k - len(pq) == repetition:\n            letter_count -= 1\n        repetition = max(0, repetition)\n\n    return \"\".join(pq)\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return _the **number of pairs**_ `(i, j)` _where_ `0 <= i < j < n`, _such that_ `nums[i] == nums[j]` _and_ `(i * j)` _is divisible by_ `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,2,2,2,1,3\\], k = 2\n**Output:** 4\n**Explanation:**\nThere are 4 pairs that meet all the requirements:\n- nums\\[0\\] == nums\\[6\\], and 0 \\* 6 == 0, which is divisible by 2.\n- nums\\[2\\] == nums\\[3\\], and 2 \\* 3 == 6, which is divisible by 2.\n- nums\\[2\\] == nums\\[4\\], and 2 \\* 4 == 8, which is divisible by 2.\n- nums\\[3\\] == nums\\[4\\], and 3 \\* 4 == 12, which is divisible by 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\], k = 1\n**Output:** 0\n**Explanation:** Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i], k <= 100`For every possible pair of indices (i, j) where i < j, check if it satisfies the given conditions.",
          "output": "def min_months(n, relations, time):\n    order = [0] * n\n    for r in relations:\n        order[r[1] - 1] = max(order[r[1] - 1], r[0])\n    totalTime = 0\n    for i in range(n):\n        totalTime = max(totalTime, time[i] + order[i])\n    return totalTime\n"
     },
     {
          "instruction": "Write python code for this problem: Given an integer `num`, return _three consecutive integers (as a sorted array)_ _that **sum** to_ `num`. If `num` cannot be expressed as the sum of three consecutive integers, return _an **empty** array._\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 33\n**Output:** \\[10,11,12\\]\n**Explanation:** 33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return \\[10, 11, 12\\].\n\n**Example 2:**\n\n**Input:** num = 4\n**Output:** \\[\\]\n**Explanation:** There is no way to express 4 as the sum of 3 consecutive integers.\n\n**Constraints:**\n\n*   `0 <= num <= 1015`Notice that if a solution exists, we can represent them as x-1, x, x+1. What does this tell us about the number? Notice the sum of the numbers will be 3x. Can you solve for x?",
          "output": "def almost_equivalent(word1, word2):\n    freq1 = {}\n    freq2 = {}\n\n    for c in word1:\n        freq1[c] = freq1.get(c, 0) + 1\n    for c in word2:\n        freq2[c] = freq2.get(c, 0) + 1\n\n    for c in \"abcdefghijklmnopqrstuvwxyz\":\n        if abs(freq1.get(c, 0) - freq2.get(c, 0)) > 3:\n            return False\n\n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `finalSum`. Split it into a sum of a **maximum** number of **unique** positive even integers.\n\n*   For example, given `finalSum = 12`, the following splits are **valid** (unique positive even integers summing up to `finalSum`): `(12)`, `(2 + 10)`, `(2 + 4 + 6)`, and `(4 + 8)`. Among them, `(2 + 4 + 6)` contains the maximum number of integers. Note that `finalSum` cannot be split into `(2 + 2 + 4 + 4)` as all the numbers should be unique.\n\nReturn _a list of integers that represent a valid split containing a **maximum** number of integers_. If no valid split exists for `finalSum`, return _an **empty** list_. You may return the integers in **any** order.\n\n",
          "input": "**Example 1:**\n\n**Input:** finalSum = 12\n**Output:** \\[2,4,6\\]\n**Explanation:** The following are valid splits: `(12)`, `(2 + 10)`, `(2 + 4 + 6)`, and `(4 + 8)`.\n(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return \\[2,4,6\\].\nNote that \\[2,6,4\\], \\[6,2,4\\], etc. are also accepted.\n\n**Example 2:**\n\n**Input:** finalSum = 7\n**Output:** \\[\\]\n**Explanation:** There are no valid splits for the given finalSum.\nThus, we return an empty array.\n\n**Example 3:**\n\n**Input:** finalSum = 28\n**Output:** \\[6,8,2,12\\]\n**Explanation:** The following are valid splits: `(2 + 26)`, `(6 + 8 + 2 + 12)`, and `(4 + 24)`. \n`(6 + 8 + 2 + 12)` has the maximum number of integers, which is 4. Thus, we return \\[6,8,2,12\\].\nNote that \\[10,2,4,12\\], \\[6,2,4,16\\], etc. are also accepted.\n\n**Constraints:**\n\n*   `1 <= finalSum <= 1010`First, check if finalSum is divisible by 2. If it isn\u2019t, then we cannot split it into even integers. Let k be the number of elements in our split. As we want the maximum number of elements, we should try to use the first k - 1 even elements to grow our sum as slowly as possible. Thus, we find the maximum sum of the first k - 1 even elements which is less than finalSum. We then add the difference over to the kth element.",
          "output": "class Robot:\n    def __init__(self):\n        self.x, self.y, self.dir = 0, 0, 1\n\n    def move(self, steps):\n        if self.dir == 0:\n            self.y += steps\n        elif self.dir == 1:\n            self.x += steps\n        elif self.dir == 2:\n            self.y -= steps\n        else:\n            self.x -= steps\n\n    def turn_left(self):\n        self.dir = (self.dir + 3) % 4\n\n    def turn_right(self):\n        self.dir = (self.dir + 1) % 4\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **0-indexed** arrays `nums1` and `nums2` of length `n`, both of which are **permutations** of `[0, 1, ..., n - 1]`.\n\nA **good triplet** is a set of `3` **distinct** values which are present in **increasing order** by position both in `nums1` and `nums2`. In other words, if we consider `pos1v` as the index of the value `v` in `nums1` and `pos2v` as the index of the value `v` in `nums2`, then a good triplet will be a set `(x, y, z)` where `0 <= x, y, z <= n - 1`, such that `pos1x < pos1y < pos1z` and `pos2x < pos2y < pos2z`.\n\nReturn _the **total number** of good triplets_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[2,0,1,3\\], nums2 = \\[0,1,2,3\\]\n**Output:** 1\n**Explanation:** \nThere are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). \nOut of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet.\n\n**Example 2:**\n\n**Input:** nums1 = \\[4,0,1,3,2\\], nums2 = \\[4,1,0,2,3\\]\n**Output:** 4\n**Explanation:** The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).\n\n**Constraints:**\n\n*   `n == nums1.length == nums2.length`\n*   `3 <= n <= 105`\n*   `0 <= nums1[i], nums2[i] <= n - 1`\n*   `nums1` and `nums2` are permutations of `[0, 1, ..., n - 1]`.For every value y, how can you find the number of values x  (0 \u2264 x, y \u2264 n - 1) such that x appears before y in both of the arrays? Similarly, for every value y, try finding the number of values z (0 \u2264 y, z \u2264 n - 1) such that z appears after y in both of the arrays. Now, for every value y, count the number of good triplets that can be formed if y is considered as the middle element.",
          "output": "def max_beauty(items, queries):\n    sorted_items = [0] * 10001\n    for price, beauty in items:\n        sorted_items[price] = max(sorted_items[price], beauty)\n\n    for i in range(1, len(sorted_items)):\n        sorted_items[i] = max(sorted_items[i], sorted_items[i - 1])\n\n    return [sorted_items[query] for query in queries]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two **0-indexed** integer arrays `nums1` and `nums2` of length `n`.\n\nA range `[l, r]` (**inclusive**) where `0 <= l <= r < n` is **balanced** if:\n\n*   For every `i` in the range `[l, r]`, you pick either `nums1[i]` or `nums2[i]`.\n*   The sum of the numbers you pick from `nums1` equals to the sum of the numbers you pick from `nums2` (the sum is considered to be `0` if you pick no numbers from an array).\n\nTwo **balanced** ranges from `[l1, r1]` and `[l2, r2]` are considered to be **different** if at least one of the following is true:\n\n*   `l1 != l2`\n*   `r1 != r2`\n*   `nums1[i]` is picked in the first range, and `nums2[i]` is picked in the second range or **vice versa** for at least one `i`.\n\nReturn _the number of **different** ranges that are balanced._ Since the answer may be very large, return it **modulo** `109 + 7`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums1 = \\[1,2,5\\], nums2 = \\[2,6,3\\]\n**Output:** 3\n**Explanation:** The balanced ranges are:\n- \\[0, 1\\] where we choose nums2\\[0\\], and nums1\\[1\\].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 2 = 2.\n- \\[0, 2\\] where we choose nums1\\[0\\], nums2\\[1\\], and nums1\\[2\\].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 1 + 5 = 6.\n- \\[0, 2\\] where we choose nums1\\[0\\], nums1\\[1\\], and nums2\\[2\\].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 1 + 2 = 3.\nNote that the second and third balanced ranges are different.\nIn the second balanced range, we choose nums2\\[1\\] and in the third balanced range, we choose nums1\\[1\\].\n\n**Example 2:**\n\n**Input:** nums1 = \\[0,1\\], nums2 = \\[1,0\\]\n**Output:** 4\n**Explanation:** The balanced ranges are:\n- \\[0, 0\\] where we choose nums1\\[0\\].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 0 = 0.\n- \\[1, 1\\] where we choose nums2\\[1\\].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 0 = 0.\n- \\[0, 1\\] where we choose nums1\\[0\\] and nums2\\[1\\].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 0 = 0.\n- \\[0, 1\\] where we choose nums2\\[0\\] and nums1\\[1\\].\n  The sum of the numbers chosen from nums1 equals the sum of the numbers chosen from nums2: 1 = 1.\n\n**Constraints:**\n\n*   `n == nums1.length == nums2.length`\n*   `1 <= n <= 100`\n*   `0 <= nums1[i], nums2[i] <= 100`If you know the possible sums you can get for a range [l, r], how can you use this information to calculate the possible sums you can get for a range [l, r + 1]? For the range [l, r], if it is possible to choose elements such that the sum of elements you picked from nums1 is x and the sum of elements you picked from nums2 is y, then (x + nums1[r + 1], y) and (x, y + nums2[r + 1]) are possible sums you can get in the range [l, r + 1]. How can we save the possible sums obtainable at a given index so that we can reuse this information later?",
          "output": "def numberOfBalancedRanges(nums1, nums2):\n    MOD = 10**9 + 7\n    dp = [[[0] * (101) for _ in range(101)] for _ in range(101)]\n\n    dp[0][0] = 2\n    sums1, sums2 = [0] * (len(nums1) + 1), [0] * (len(nums1) + 1)\n    for i, (a, b) in enumerate(zip(nums1, nums2)):\n        sums1[i + 1], sums2[i + 1] = sums1[i] + a, sums2[i] + b\n\n    ans = 0\n    for r in range(len(nums1)):\n        for l in range(r, -1, -1):\n            for k in range(l, r + 1):\n                leftSum1 = sums1[l]\n                rightSum1 = sums1[len(nums1)] - sums1[k + 1]\n                leftSum2 = sums2[l]\n                rightSum2 = sums2[len(nums1)] - sums2[r + 1]\n\n                if leftSum1 + rightSum2 == leftSum2 and leftSum1 + rightSum1 == rightSum2:\n                    for last in range(3):\n                        ans += dp[l][r][k][last]\n                        ans %= MOD\n                        next = k + 1 if last == 2 else k\n                        dp[next][k if k else r + 1][k - 1 if k else r +\n                                                   2][last] += dp[l][r][k][last]\n                        dp[l][r][k][last] = (dp[l][r][k][last] +\n                                             ((!last) or last == 2)) % MOD\n    return ans\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`. Rearrange the values of `nums` according to the following rules:\n\n1.  Sort the values at **odd indices** of `nums` in **non-increasing** order.\n    *   For example, if `nums = [4,**1**,2,**3**]` before this step, it becomes `[4,**3**,2,**1**]` after. The values at odd indices `1` and `3` are sorted in non-increasing order.\n2.  Sort the values at **even indices** of `nums` in **non-decreasing** order.\n    *   For example, if `nums = [**4**,1,**2**,3]` before this step, it becomes `[**2**,1,**4**,3]` after. The values at even indices `0` and `2` are sorted in non-decreasing order.\n\nReturn _the array formed after rearranging the values of_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,1,2,3\\]\n**Output:** \\[2,3,4,1\\]\n**Explanation:** \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from \\[4,**1**,2,**3**\\] to \\[4,**3**,2,**1**\\].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from \\[**4**,1,**2**,3\\] to \\[**2**,3,**4**,1\\].\nThus, the array formed after rearranging the values is \\[2,3,4,1\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,1\\]\n**Output:** \\[2,1\\]\n**Explanation:** \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is \\[2,1\\], which is the same as the initial array. \n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`Try to separate the elements at odd indices from the elements at even indices. Sort the two groups of elements individually. Combine them to form the resultant array.",
          "output": "def maxValue(events):\n    events.sort(key=lambda a: a[1])\n\n    dp = [0] * len(events)\n    dp[0] = events[0][2]\n\n    for i in range(1, len(events)):\n        lastNonConflict = -1\n        for j in range(i - 1, -1, -1):\n            if events[j][1] < events[i][0]:\n                lastNonConflict = j\n                break\n                \n        includedValue = events[i][2]\n        if lastNonConflict != -1:\n            includedValue += dp[lastNonConflict]\n\n        dp[i] = max(includedValue, dp[i - 1])\n\n    return dp[-1]\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.\n\nReturn _the rearranged number with minimal value_.\n\nNote that the sign of the number does not change after rearranging the digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 310\n**Output:** 103\n**Explanation:** The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n\n**Example 2:**\n\n**Input:** num = -7605\n**Output:** -7650\n**Explanation:** Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n\n**Constraints:**\n\n*   `-1015 <= num <= 1015`For positive numbers, the leading digit should be the smallest nonzero digit. Then the remaining digits follow in ascending order. For negative numbers, the digits should be arranged in descending order.",
          "output": "from typing import List, Tuple\n\ndef plates_between_candles(s: str, queries: List[Tuple[int, int]]) -> List[int]:\n    n = len(s)\n    prefix = [0] * n\n    plates = 0\n    \n    for i in range(1, n):\n        prefix[i] = prefix[i - 1]\n        if s[i] == '*' and s[i - 1] == '|':\n            plates += 1\n        prefix[i] += plates\n    \n    res = []\n    for left, right in queries:\n        res.append(prefix[right] - (prefix[left - 1] if left > 0 else 0))\n    \n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: A **Bitset** is a data structure that compactly stores bits.\n\nImplement the `Bitset` class:\n\n*   `Bitset(int size)` Initializes the Bitset with `size` bits, all of which are `0`.\n*   `void fix(int idx)` Updates the value of the bit at the index `idx` to `1`. If the value was already `1`, no change occurs.\n*   `void unfix(int idx)` Updates the value of the bit at the index `idx` to `0`. If the value was already `0`, no change occurs.\n*   `void flip()` Flips the values of each bit in the Bitset. In other words, all bits with value `0` will now have value `1` and vice versa.\n*   `boolean all()` Checks if the value of **each** bit in the Bitset is `1`. Returns `true` if it satisfies the condition, `false` otherwise.\n*   `boolean one()` Checks if there is **at least one** bit in the Bitset with value `1`. Returns `true` if it satisfies the condition, `false` otherwise.\n*   `int count()` Returns the **total number** of bits in the Bitset which have value `1`.\n*   `String toString()` Returns the current composition of the Bitset. Note that in the resultant string, the character at the `ith` index should coincide with the value at the `ith` bit of the Bitset.\n\n",
          "input": "**Example 1:**\n\n**Input**\n\\[ \"Bitset \",  \"fix \",  \"fix \",  \"flip \",  \"all \",  \"unfix \",  \"flip \",  \"one \",  \"unfix \",  \"count \",  \"toString \"\\]\n\\[\\[5\\], \\[3\\], \\[1\\], \\[\\], \\[\\], \\[0\\], \\[\\], \\[\\], \\[0\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, null, false, null, null, true, null, 2,  \"01010 \"\\]\n\n**Explanation**\nBitset bs = new Bitset(5); // bitset =  \"00000 \".\nbs.fix(3);     // the value at idx = 3 is updated to 1, so bitset =  \"00010 \".\nbs.fix(1);     // the value at idx = 1 is updated to 1, so bitset =  \"01010 \". \nbs.flip();     // the value of each bit is flipped, so bitset =  \"10101 \". \nbs.all();      // return False, as not all values of the bitset are 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset =  \"00101 \".\nbs.flip();     // the value of each bit is flipped, so bitset =  \"11010 \". \nbs.one();      // return True, as there is at least 1 index with value 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset =  \"01010 \".\nbs.count();    // return 2, as there are 2 bits with value 1.\nbs.toString(); // return  \"01010 \", which is the composition of bitset.\n\n**Constraints:**\n\n*   `1 <= size <= 105`\n*   `0 <= idx <= size - 1`\n*   At most `105` calls will be made **in total** to `fix`, `unfix`, `flip`, `all`, `one`, `count`, and `toString`.\n*   At least one call will be made to `all`, `one`, `count`, or `toString`.\n*   At most `5` calls will be made to `toString`.Note that flipping a bit twice does nothing. In order to determine the value of a bit, consider how you can efficiently count the number of flips made on the bit since its latest update.",
          "output": "def valid_move_combinations(pieces, positions):\n    n = len(pieces)\n    count = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and not (pieces[i] == \"bishop\" and (positions[i][0] + positions[i][1]) % 2 != (positions[j][0] + positions[j][1]) % 2):\n                count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** binary string `s` which represents a sequence of train cars. `s[i] = '0'` denotes that the `ith` car does **not** contain illegal goods and `s[i] = '1'` denotes that the `ith` car does contain illegal goods.\n\nAs the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations **any** number of times:\n\n1.  Remove a train car from the **left** end (i.e., remove `s[0]`) which takes 1 unit of time.\n2.  Remove a train car from the **right** end (i.e., remove `s[s.length - 1]`) which takes 1 unit of time.\n3.  Remove a train car from **anywhere** in the sequence which takes 2 units of time.\n\nReturn _the **minimum** time to remove all the cars containing illegal goods_.\n\nNote that an empty sequence of cars is considered to have no cars containing illegal goods.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"**11**00**1**0**1** \"\n**Output:** 5\n**Explanation:** \nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 \\* 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5. \n\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 \\* 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 \\* 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n\n5 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.\n\n**Example 2:**\n\n**Input:** s =  \"00**1**0 \"\n**Output:** 2\n**Explanation:**\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 \\* 1 = 3.\nThis obtains a total time of 3.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to \n- remove a car from the right end 2 times. Time taken is 2 \\* 1 = 2. \nThis obtains a total time of 2.\n\n2 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2 * 105`\n*   `s[i]` is either `'0'` or `'1'`.Build an array withoutFirst where withoutFirst[i] stores the minimum time to remove all the cars containing illegal goods from the \u2018suffix\u2019 of the sequence starting from the ith car without using any type 1 operations. Next, build an array onlyFirst where onlyFirst[i] stores the minimum time to remove all the cars containing illegal goods from the \u2018prefix\u2019 of the sequence ending on the ith car using only type 1 operations. Finally, we can compare the best way to split the operations amongst these two types by finding the minimum time across all onlyFirst[i] + withoutFirst[i + 1].",
          "output": "def min_time_to_remove_illegal_goods(s: str) -> int:\n    ones = twos = 0\n    for c in s:\n        if c == '1':\n            twos += ones\n            ones += 1\n    return ones + min(ones, twos)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `points` where `points[i] = [xi, yi]` represents a point on an **X-Y** plane.\n\n**Straight lines** are going to be added to the **X-Y** plane, such that every point is covered by at **least** one line.\n\nReturn _the **minimum** number of **straight lines** needed to cover all the points_.\n\n",
          "input": "**Example 1:**\n\n**Input:** points = \\[\\[0,1\\],\\[2,3\\],\\[4,5\\],\\[4,3\\]\\]\n**Output:** 2\n**Explanation:** The minimum number of straight lines needed is two. One possible solution is to add:\n- One line connecting the point at (0, 1) to the point at (4, 5).\n- Another line connecting the point at (2, 3) to the point at (4, 3).\n\n**Example 2:**\n\n**Input:** points = \\[\\[0,2\\],\\[-2,-2\\],\\[1,4\\]\\]\n**Output:** 1\n**Explanation:** The minimum number of straight lines needed is one. The only solution is to add:\n- One line connecting the point at (-2, -2) to the point at (1, 4).\n\n**Constraints:**\n\n*   `1 <= points.length <= 10`\n*   `points[i].length == 2`\n*   `-100 <= xi, yi <= 100`\n*   All the `points` are **unique**.What is the highest possible answer for a set of n points? The highest possible answer is n / 2 (rounded up). This is because you can cover at least two points with a line, and if n is odd, you need to add one extra line to cover the last point. Suppose you have a line covering two points, how can you quickly check if a third point is also covered by that line? Calculate the slope from the first point to the second point. If the slope from the first point to the third point is the same, then it is also covered by that line.",
          "output": "from math import gcd\nfrom itertools import combinations\n\ndef minStraightLines(points):\n    lines = set()\n    for p1, p2 in combinations(points, 2):\n        dy, dx = p2[1] - p1[1], p2[0] - p1[0]\n        g = gcd(dx, dy)\n        lines.add((dy // g, dx // g))\n    return len(lines)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** array `nums` consisting of `n` positive integers.\n\nThe array `nums` is called **alternating** if:\n\n*   `nums[i - 2] == nums[i]`, where `2 <= i <= n - 1`.\n*   `nums[i - 1] != nums[i]`, where `1 <= i <= n - 1`.\n\nIn one **operation**, you can choose an index `i` and **change** `nums[i]` into **any** positive integer.\n\nReturn _the **minimum number of operations** required to make the array alternating_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,1,3,2,4,3\\]\n**Output:** 3\n**Explanation:**\nOne way to make the array alternating is by converting it to \\[3,1,3,**1**,**3**,**1**\\].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations. \n\n**Example 2:**\n\n**Input:** nums = \\[1,2,2,2,2\\]\n**Output:** 2\n**Explanation:**\nOne way to make the array alternating is by converting it to \\[1,2,**1**,2,**1**\\].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to \\[**2**,2,2,2,2\\] because in this case nums\\[0\\] == nums\\[1\\] which violates the conditions of an alternating array.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`Count the frequency of each element in odd positions in the array. Do the same for elements in even positions. To minimize the number of operations we need to maximize the number of elements we keep from the original array. What are the possible combinations of elements we can choose from odd indices and even indices so that the number of unchanged elements is maximized?",
          "output": "def count_max_or_subsets(nums):\n    max_OR = 0\n    for num in nums:\n        max_OR |= num\n\n    OR_subsets = {0}\n    for num in nums:\n        tmp = OR_subsets.copy()\n        for x in OR_subsets:\n            tmp.add(x | num)\n        OR_subsets = tmp\n\n    return OR_subsets.count(max_OR)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of **positive** integers `beans`, where each integer represents the number of magic beans found in a particular magic bag.\n\n**Remove** any number of beans (**possibly none**) from each bag such that the number of beans in each remaining **non-empty** bag (still containing **at least one** bean) is **equal**. Once a bean has been removed from a bag, you are **not** allowed to return it to any of the bags.\n\nReturn _the **minimum** number of magic beans that you have to remove_.\n\n",
          "input": "**Example 1:**\n\n**Input:** beans = \\[4,**1**,6,5\\]\n**Output:** 4\n**Explanation:** \n- We remove 1 bean from the bag with only 1 bean.\n  This results in the remaining bags: \\[4,**0**,6,5\\]\n- Then we remove 2 beans from the bag with 6 beans.\n  This results in the remaining bags: \\[4,0,**4**,5\\]\n- Then we remove 1 bean from the bag with 5 beans.\n  This results in the remaining bags: \\[4,0,4,**4**\\]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer.\n\n**Example 2:**\n\n**Input:** beans = \\[**2**,10,**3**,**2**\\]\n**Output:** 7\n**Explanation:**\n- We remove 2 beans from one of the bags with 2 beans.\n  This results in the remaining bags: \\[**0**,10,3,2\\]\n- Then we remove 2 beans from the other bag with 2 beans.\n  This results in the remaining bags: \\[0,10,3,**0**\\]\n- Then we remove 3 beans from the bag with 3 beans. \n  This results in the remaining bags: \\[0,10,**0**,0\\]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer.\n\n**Constraints:**\n\n*   `1 <= beans.length <= 105`\n*   `1 <= beans[i] <= 105`Notice that if we choose to make x bags of beans empty, we should choose the x bags with the least amount of beans. Notice that if the minimum number of beans in a non-empty bag is m, then the best way to make all bags have an equal amount of beans is to reduce all the bags to have m beans. Can we iterate over how many bags we should remove and choose the one that minimizes the total amount of beans to remove? Sort the bags of beans first.",
          "output": "import heapq\n\ndef second_minimum(n: int, edges: List[List[int]], time: int, change: int) -> int:\n    adj = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dist = [-1] * (n + 1)\n    queue = [(0, 1)]\n    dist[1] = 0\n\n    while queue:\n        t1, v1 = heapq.heappop(queue)\n\n        if v1 == n:\n            return t1\n\n        for v2 in adj[v1]:\n            t2 = t1 + time\n            waiting = change - (t2 % change) if (t2 // change) % 2 == 1 else 0\n\n            if dist[v2] == -1 or dist[v2] > t2 + waiting:\n                if dist[v2] != -1:\n                    heapq.heappush(queue, (dist[v2], v2))\n                dist[v2] = t2 + waiting\n                heapq.heappush(queue, (dist[v2], v2))\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` of length `n` and an integer `numSlots` such that `2 * numSlots >= n`. There are `numSlots` slots numbered from `1` to `numSlots`.\n\nYou have to place all `n` integers into the slots such that each slot contains at **most** two numbers. The **AND sum** of a given placement is the sum of the **bitwise** `AND` of every number with its respective slot number.\n\n*   For example, the **AND sum** of placing the numbers `[1, 3]` into slot `1` and `[4, 6]` into slot `2` is equal to `(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4`.\n\nReturn _the maximum possible **AND sum** of_ `nums` _given_ `numSlots` _slots._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5,6\\], numSlots = 3\n**Output:** 9\n**Explanation:** One possible placement is \\[1, 4\\] into slot 1, \\[2, 6\\] into slot 2, and \\[3, 5\\] into slot 3. \nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9.\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,10,4,7,1\\], numSlots = 9\n**Output:** 24\n**Explanation:** One possible placement is \\[1, 1\\] into slot 1, \\[3\\] into slot 3, \\[4\\] into slot 4, \\[7\\] into slot 7, and \\[10\\] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= numSlots <= 9`\n*   `1 <= n <= 2 * numSlots`\n*   `1 <= nums[i] <= 15`Can you think of a dynamic programming solution to this problem? Can you use a bitmask to represent the state of the slots?",
          "output": "def max_and_sum(nums, num_slots, idx, used, sum):\n    if idx == len(nums):\n        return sum\n    max_sum = 0\n    for i in range(1, num_slots + 1):\n        if not used & (1 << (i - 1)):\n            new_sum = sum + (nums[idx] & i)\n            new_used = used | (1 << (i - 1))\n            max_sum = max(max_sum, max_and_sum(nums, num_slots, idx + 1, new_used, new_sum))\n            if idx + 1 < len(nums):\n                new_sum = new_sum + (nums[idx + 1] & i)\n                max_sum = max(max_sum, max_and_sum(nums, num_slots, idx + 2, new_used, new_sum))\n    return max_sum\n\ndef max_and_sum(nums, num_slots):\n    return max_and_sum(nums, num_slots, 0, 0, 0)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of strings `words` and a string `pref`.\n\nReturn _the number of strings in_ `words` _that contain_ `pref` _as a **prefix**_.\n\nA **prefix** of a string `s` is any leading contiguous substring of `s`.\n\n",
          "input": "**Example 1:**\n\n**Input:** words = \\[ \"pay \", \"**at**tention \", \"practice \", \"**at**tend \"\\], `pref` \\=  \"at \"\n**Output:** 2\n**Explanation:** The 2 strings that contain  \"at \" as a prefix are:  \"**at**tention \" and  \"**at**tend \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"leetcode \", \"win \", \"loops \", \"success \"\\], `pref` \\=  \"code \"\n**Output:** 0\n**Explanation:** There are no strings that contain  \"code \" as a prefix.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length, pref.length <= 100`\n*   `words[i]` and `pref` consist of lowercase English letters.Go through each word in words and increment the answer if pref is a prefix of the word.",
          "output": "def count_prefixes(words, pref):\n    return sum(1 for word in words if word.startswith(pref))\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `s` and `t`. In one step, you can append **any character** to either `s` or `t`.\n\nReturn _the minimum number of steps to make_ `s` _and_ `t` _**anagrams** of each other._\n\nAn **anagram** of a string is a string that contains the same characters with a different (or the same) ordering.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"**lee**tco**de** \", t =  \"co**a**t**s** \"\n**Output:** 7\n**Explanation:** \n- In 2 steps, we can append the letters in  \"as \" onto s =  \"leetcode \", forming s =  \"leetcode**as** \".\n- In 5 steps, we can append the letters in  \"leede \" onto t =  \"coats \", forming t =  \"coats**leede** \".\n \"leetcodeas \" and  \"coatsleede \" are now anagrams of each other.\nWe used a total of 2 + 5 = 7 steps.\nIt can be shown that there is no way to make them anagrams of each other with less than 7 steps.\n\n**Example 2:**\n\n**Input:** s =  \"night \", t =  \"thing \"\n**Output:** 0\n**Explanation:** The given strings are already anagrams of each other. Thus, we do not need any further steps.\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 2 * 105`\n*   `s` and `t` consist of lowercase English letters.Notice that for anagrams, the order of the letters is irrelevant. For each letter, we can count its frequency in s and t. For each letter, its contribution to the answer is the absolute difference between its frequency in s and t.",
          "output": "def count_vowel_substrings(word: str) -> int:\n    count = 0\n    n = len(word)\n    vowels = set()\n\n    for i in range(n):\n        if word[i] in \"aeiou\":\n            vowels.clear()\n            for j in range(i, n):\n                if word[j] in \"aeiou\":\n                    vowels.add(word[j])\n                if len(vowels) == 5:\n                    count += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `time` where `time[i]` denotes the time taken by the `ith` bus to complete **one trip**.\n\nEach bus can make multiple trips **successively**; that is, the next trip can start **immediately after** completing the current trip. Also, each bus operates **independently**; that is, the trips of one bus do not influence the trips of any other bus.\n\nYou are also given an integer `totalTrips`, which denotes the number of trips all buses should make **in total**. Return _the **minimum time** required for all buses to complete **at least**_ `totalTrips` _trips_.\n\n",
          "input": "**Example 1:**\n\n**Input:** time = \\[1,2,3\\], totalTrips = 5\n**Output:** 3\n**Explanation:**\n- At time t = 1, the number of trips completed by each bus are \\[1,0,0\\]. \n  The total number of trips completed is 1 + 0 + 0 = 1.\n- At time t = 2, the number of trips completed by each bus are \\[2,1,0\\]. \n  The total number of trips completed is 2 + 1 + 0 = 3.\n- At time t = 3, the number of trips completed by each bus are \\[3,1,1\\]. \n  The total number of trips completed is 3 + 1 + 1 = 5.\nSo the minimum time needed for all buses to complete at least 5 trips is 3.\n\n**Example 2:**\n\n**Input:** time = \\[2\\], totalTrips = 1\n**Output:** 2\n**Explanation:**\nThere is only one bus, and it will complete its first trip at t = 2.\nSo the minimum time needed to complete 1 trip is 2.\n\n**Constraints:**\n\n*   `1 <= time.length <= 105`\n*   `1 <= time[i], totalTrips <= 107`For a given amount of time, how can we count the total number of trips completed by all buses within that time? Consider using binary search.",
          "output": "def sum_of_vowels_in_the_substrings(word: str) -> int:\n    total_sum = 0\n    n = len(word)\n\n    for i, char in enumerate(word):\n        if char in {'a', 'e', 'i', 'o', 'u'}:\n            total_sum += (i + 1) * (n - i)\n\n    return total_sum\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** 2D integer array `tires` where `tires[i] = [fi, ri]` indicates that the `ith` tire can finish its `xth` successive lap in `fi * ri(x-1)` seconds.\n\n*   For example, if `fi = 3` and `ri = 2`, then the tire would finish its `1st` lap in `3` seconds, its `2nd` lap in `3 * 2 = 6` seconds, its `3rd` lap in `3 * 22 = 12` seconds, etc.\n\nYou are also given an integer `changeTime` and an integer `numLaps`.\n\nThe race consists of `numLaps` laps and you may start the race with **any** tire. You have an **unlimited** supply of each tire and after every lap, you may **change** to any given tire (including the current tire type) if you wait `changeTime` seconds.\n\nReturn _the **minimum** time to finish the race._\n\n",
          "input": "**Example 1:**\n\n**Input:** tires = \\[\\[2,3\\],\\[3,4\\]\\], changeTime = 5, numLaps = 4\n**Output:** 21\n**Explanation:** \nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 \\* 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 \\* 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds.\nThe minimum time to complete the race is 21 seconds.\n\n**Example 2:**\n\n**Input:** tires = \\[\\[1,10\\],\\[2,2\\],\\[3,4\\]\\], changeTime = 6, numLaps = 5\n**Output:** 25\n**Explanation:** \nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 \\* 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 \\* 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.\nThe minimum time to complete the race is 25 seconds. \n\n**Constraints:**\n\n*   `1 <= tires.length <= 105`\n*   `tires[i].length == 2`\n*   `1 <= fi, changeTime <= 105`\n*   `2 <= ri <= 105`\n*   `1 <= numLaps <= 1000`What is the maximum number of times we would want to go around the track without changing tires? Can we precompute the minimum time to go around the track x times without changing tires? Can we use dynamic programming to solve this efficiently using the precomputed values?",
          "output": "def min_x(n, quantities):\n    total_products = sum(quantities)\n    return (total_products + n - 1) // n\n"
     },
     {
          "instruction": "Write python code for this problem: There is a long and thin painting that can be represented by a number line. You are given a **0-indexed** 2D integer array `paint` of length `n`, where `paint[i] = [starti, endi]`. This means that on the `ith` day you need to paint the area **between** `starti` and `endi`.\n\nPainting the same area multiple times will create an uneven painting so you only want to paint each area of the painting at most **once**.\n\nReturn _an integer array_ `worklog` _of length_ `n`_, where_ `worklog[i]` _is the amount of **new** area that you painted on the_ `ith` _day._\n\n",
          "input": "**Example 1:**\n\n**Input:** paint = \\[\\[1,4\\],\\[4,7\\],\\[5,8\\]\\]\n**Output:** \\[3,3,1\\]\n**Explanation:**\nOn day 0, paint everything between 1 and 4.\nThe amount of new area painted on day 0 is 4 - 1 = 3.\nOn day 1, paint everything between 4 and 7.\nThe amount of new area painted on day 1 is 7 - 4 = 3.\nOn day 2, paint everything between 7 and 8.\nEverything between 5 and 7 was already painted on day 1.\nThe amount of new area painted on day 2 is 8 - 7 = 1. \n\n**Example 2:**\n\n**Input:** paint = \\[\\[1,4\\],\\[5,8\\],\\[4,7\\]\\]\n**Output:** \\[3,3,1\\]\n**Explanation:**\nOn day 0, paint everything between 1 and 4.\nThe amount of new area painted on day 0 is 4 - 1 = 3.\nOn day 1, paint everything between 5 and 8.\nThe amount of new area painted on day 1 is 8 - 5 = 3.\nOn day 2, paint everything between 4 and 5.\nEverything between 5 and 7 was already painted on day 1.\nThe amount of new area painted on day 2 is 5 - 4 = 1. \n\n**Example 3:**\n\n**Input:** paint = \\[\\[1,5\\],\\[2,4\\]\\]\n**Output:** \\[4,0\\]\n**Explanation:**\nOn day 0, paint everything between 1 and 5.\nThe amount of new area painted on day 0 is 5 - 1 = 4.\nOn day 1, paint nothing because everything between 2 and 4 was already painted on day 0.\nThe amount of new area painted on day 1 is 0.\n\n**Constraints:**\n\n*   `1 <= paint.length <= 105`\n*   `paint[i].length == 2`\n*   `0 <= starti < endi <= 5 * 104`What\u2019s a good way to keep track of intervals that you have already painted? Create an array of all 1\u2019s, and when you have painted an interval, set the values in that interval to 0. Using this array, how can you quickly calculate the amount of new area that you paint on a given day? Calculate the sum of the new array in the interval that you paint.",
          "output": "def painting_plan(paint):\n    worklog = [0] * len(paint)\n    painted = set()\n\n    for i in range(len(paint)):\n        start, end = paint[i]\n\n        for j in range(start, end):\n            if j not in painted:\n                painted.add(j)\n                worklog[i] += 1\n\n    return worklog\n"
     },
     {
          "instruction": "Write python code for this problem: Given a positive integer `num`, return _the number of positive integers **less than or equal to**_ `num` _whose digit sums are **even**_.\n\nThe **digit sum** of a positive integer is the sum of all its digits.\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 4\n**Output:** 2\n**Explanation:**\nThe only integers less than or equal to 4 whose digit sums are even are 2 and 4.    \n\n**Example 2:**\n\n**Input:** num = 30\n**Output:** 14\n**Explanation:**\nThe 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.\n\n**Constraints:**\n\n*   `1 <= num <= 1000`Iterate through all integers from 1 to num. For any integer, extract the individual digits to compute their sum and check if it is even.",
          "output": "def max_tasks(tasks, workers, pills, strength):\n    tasks.sort()\n    workers.sort()\n    task_index = 0\n    pill_index = pills\n    completed_tasks = 0\n\n    for worker_strength in workers:\n        while pill_index > 0 and worker_strength + strength >= tasks[task_index]:\n            worker_strength += strength\n            pill_index -= 1\n        \n        if worker_strength >= tasks[task_index]:\n            task_index += 1\n            completed_tasks += 1\n\n        if task_index >= len(tasks):\n            break\n\n    return completed_tasks\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `head` of a linked list, which contains a series of integers **separated** by `0`'s. The **beginning** and **end** of the linked list will have `Node.val == 0`.\n\nFor **every** two consecutive `0`'s, **merge** all the nodes lying in between them into a single node whose value is the **sum** of all the merged nodes. The modified list should not contain any `0`'s.\n\nReturn _the_ `head` _of the modified linked list_.\n\n",
          "input": "**Example 1:**\n\n**Input:** head = \\[0,3,1,0,4,5,2,0\\]\n**Output:** \\[4,11\\]\n**Explanation:** \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 3 + 1 = 4.\n- The sum of the nodes marked in red: 4 + 5 + 2 = 11.\n\n**Example 2:**\n\n**Input:** head = \\[0,1,0,3,0,2,2,0\\]\n**Output:** \\[1,3,4\\]\n**Explanation:** \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 1 = 1.\n- The sum of the nodes marked in red: 3 = 3.\n- The sum of the nodes marked in yellow: 2 + 2 = 4.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[3, 2 * 105]`.\n*   `0 <= Node.val <= 1000`\n*   There are **no** two consecutive nodes with `Node.val == 0`.\n*   The **beginning** and **end** of the linked list have `Node.val == 0`.How can you use two pointers to modify the original list into the new list? Have a pointer traverse the entire linked list, while another pointer looks at a node that is currently being modified. Keep on summing the values of the nodes between the traversal pointer and the modifying pointer until the former comes across a \u20180\u2019. In that case, the modifying pointer is incremented to modify the next node. Do not forget to have the next pointer of the final node of the modified list point to null.",
          "output": "def smallest_index(nums):\n    for i in range(len(nums)):\n        if i % 10 == nums[i]:\n            return i\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a string `s` and an integer `repeatLimit`. Construct a new string `repeatLimitedString` using the characters of `s` such that no letter appears **more than** `repeatLimit` times **in a row**. You do **not** have to use all characters from `s`.\n\nReturn _the **lexicographically largest**_ `repeatLimitedString` _possible_.\n\nA string `a` is **lexicographically larger** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears later in the alphabet than the corresponding letter in `b`. If the first `min(a.length, b.length)` characters do not differ, then the longer string is the lexicographically larger one.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"cczazcc \", repeatLimit = 3\n**Output:**  \"zzcccac \"\n**Explanation:** We use all of the characters from s to construct the repeatLimitedString  \"zzcccac \".\nThe letter 'a' appears at most 1 time in a row.\nThe letter 'c' appears at most 3 times in a row.\nThe letter 'z' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return  \"zzcccac \".\nNote that the string  \"zzcccca \" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.\n\n**Example 2:**\n\n**Input:** s =  \"aababab \", repeatLimit = 2\n**Output:**  \"bbabaa \"\n**Explanation:** We use only some of the characters from s to construct the repeatLimitedString  \"bbabaa \". \nThe letter 'a' appears at most 2 times in a row.\nThe letter 'b' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return  \"bbabaa \".\nNote that the string  \"bbabaaa \" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.\n\n**Constraints:**\n\n*   `1 <= repeatLimit <= s.length <= 105`\n*   `s` consists of lowercase English letters.Start constructing the string in descending order of characters. When repeatLimit is reached, pick the next largest character.",
          "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef critical_distance(head):\n    min_distance, max_distance = float('inf'), float('-inf')\n    last_cp, index = -1, 0\n    current = head.next\n\n    while current and current.next:\n        if (current.val > current.next.val and current.val > current.prev.val) or \\\n           (current.val < current.next.val and current.val < current.prev.val):\n\n            if last_cp != -1:\n                min_distance = min(min_distance, index - last_cp)\n                max_distance = max(max_distance, index - last_cp)\n            last_cp = index\n\n        current = current.next\n        index += 1\n\n    if min_distance != float('inf'):\n        return [min_distance, max_distance]\n    return [-1, -1]\n"
     },
     {
          "instruction": "Write python code for this problem: Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return _the **number of pairs**_ `(i, j)` _such that:_\n\n*   `0 <= i < j <= n - 1` _and_\n*   `nums[i] * nums[j]` _is divisible by_ `k`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5\\], k = 2\n**Output:** 7\n**Explanation:** \nThe 7 pairs of indices whose corresponding products are divisible by 2 are\n(0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4).\nTheir products are 2, 4, 6, 8, 10, 12, and 20 respectively.\nOther pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2.    \n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\], k = 5\n**Output:** 0\n**Explanation:** There does not exist any pair of indices whose corresponding product is divisible by 5.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i], k <= 105`For any element in the array, what is the smallest number it should be multiplied with such that the product is divisible by k? The smallest number which should be multiplied with nums[i] so that the product is divisible by k is k / gcd(k, nums[i]). Now think about how you can store and update the count of such numbers present in the array efficiently.",
          "output": "from collections import deque\n\ndef minOperations(nums, start, goal):\n    seen = {start}\n    q = deque([start])\n    level = 0\n\n    while q:\n        size = len(q)\n        for i in range(size):\n            x = q.popleft()\n            if x == goal:\n                return level\n            for num in nums:\n                next_x = x + num\n                if 0 <= next_x <= 1000 and next_x not in seen:\n                    seen.add(next_x)\n                    q.append(next_x)\n        level += 1\n\n    return -1\n"
     },
     {
          "instruction": "Write python code for this problem: Given a digit string `s`, return _the number of **unique substrings** of_ `s` _where every digit appears the same number of times._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"1212 \"\n**Output:** 5\n**Explanation:** The substrings that meet the requirements are  \"1 \",  \"2 \",  \"12 \",  \"21 \",  \"1212 \".\nNote that although the substring  \"12 \" appears twice, it is only counted once.\n\n**Example 2:**\n\n**Input:** s =  \"12321 \"\n**Output:** 9\n**Explanation:** The substrings that meet the requirements are  \"1 \",  \"2 \",  \"3 \",  \"12 \",  \"23 \",  \"32 \",  \"21 \",  \"123 \",  \"321 \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of digits.With the constraints, could we try every substring? Yes, checking every substring has runtime O(n^2), which will pass. How can we make sure we only count unique substrings? Use a set to store previously counted substrings. Hashing a string s of length m takes O(m) time. Is there a fast way to compute the hash of s if we know the hash of s[0..m - 2]? Use a rolling hash.",
          "output": "def are_numbers_increasing(s: str) -> bool:\n    tokens = s.split()\n    numbers = []\n    \n    for token in tokens:\n        if token.isdigit():\n            num = int(token)\n            if numbers and numbers[-1] >= num:\n                return False\n            numbers.append(num)\n    \n    return True\n"
     },
     {
          "instruction": "Write python code for this problem: A cell `(r, c)` of an excel sheet is represented as a string `\" \"` where:\n\n*   denotes the column number `c` of the cell. It is represented by **alphabetical letters**.\n    *   For example, the `1st` column is denoted by `'A'`, the `2nd` by `'B'`, the `3rd` by `'C'`, and so on.\n*   is the row number `r` of the cell. The `rth` row is represented by the **integer** `r`.\n\nYou are given a string `s` in the format `\": \"`, where represents the column `c1`, represents the row `r1`, represents the column `c2`, and represents the row `r2`, such that `r1 <= r2` and `c1 <= c2`.\n\nReturn _the **list of cells**_ `(x, y)` _such that_ `r1 <= x <= r2` _and_ `c1 <= y <= c2`. The cells should be represented as **strings** in the format mentioned above and be sorted in **non-decreasing** order first by columns and then by rows.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"K1:L2 \"\n**Output:** \\[ \"K1 \", \"K2 \", \"L1 \", \"L2 \"\\]\n**Explanation:**\nThe above diagram shows the cells which should be present in the list.\nThe red arrows denote the order in which the cells should be presented.\n\n**Example 2:**\n\n**Input:** s =  \"A1:F1 \"\n**Output:** \\[ \"A1 \", \"B1 \", \"C1 \", \"D1 \", \"E1 \", \"F1 \"\\]\n**Explanation:**\nThe above diagram shows the cells which should be present in the list.\nThe red arrow denotes the order in which the cells should be presented.\n\n**Constraints:**\n\n*   `s.length == 5`\n*   `'A' <= s[0] <= s[3] <= 'Z'`\n*   `'1' <= s[1] <= s[4] <= '9'`\n*   `s` consists of uppercase English letters, digits and `':'`.From the given string, find the corresponding rows and columns. Iterate through the columns in ascending order and for each column, iterate through the rows in ascending order to obtain the required cells in sorted order.",
          "output": "def cell_range(s):\n    r1 = int(s[1])\n    r2 = int(s[4])\n    c1 = ord(s[0]) - ord('A') + 1\n    c2 = ord(s[3]) - ord('A') + 1\n\n    res = []\n    for c in range(c1, c2 + 1):\n        for r in range(r1, r2 + 1):\n            res.append(chr(ord('A') + c - 1) + str(r))\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` and an integer `k`. Append `k` **unique positive** integers that do **not** appear in `nums` to `nums` such that the resulting total sum is **minimum**.\n\nReturn _the sum of the_ `k` _integers appended to_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,4,25,10,25\\], k = 2\n**Output:** 5\n**Explanation:** The two unique positive integers that do not appear in nums which we append are 2 and 3.\nThe resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum.\nThe sum of the two integers appended is 2 + 3 = 5, so we return 5.\n\n**Example 2:**\n\n**Input:** nums = \\[5,6\\], k = 6\n**Output:** 25\n**Explanation:** The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8.\nThe resulting sum of nums is 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 = 36, which is the minimum. \nThe sum of the six integers appended is 1 + 2 + 3 + 4 + 7 + 8 = 25, so we return 25.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`\n*   `1 <= k <= 108`The k smallest numbers that do not appear in nums will result in the minimum sum. Recall that the sum of the first n positive numbers is equal to n * (n+1) / 2. Initialize the answer as the sum of 1 to k. Then, adjust the answer depending on the values in nums.",
          "output": "def time_to_buy_tickets(tickets, k):\n    time = 0\n    while tickets[k] > 0:\n        for i in range(len(tickets)):\n            if tickets[i] > 0:\n                tickets[i] -= 1\n                time += 1\n                if i == k and tickets[k] == 0:\n                    return time\n    return time\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a 2D integer array `descriptions` where `descriptions[i] = [parenti, childi, isLefti]` indicates that `parenti` is the **parent** of `childi` in a **binary** tree of **unique** values. Furthermore,\n\n*   If `isLefti == 1`, then `childi` is the left child of `parenti`.\n*   If `isLefti == 0`, then `childi` is the right child of `parenti`.\n\nConstruct the binary tree described by `descriptions` and return _its **root**_.\n\nThe test cases will be generated such that the binary tree is **valid**.\n\n",
          "input": "**Example 1:**\n\n**Input:** descriptions = \\[\\[20,15,1\\],\\[20,17,0\\],\\[50,20,1\\],\\[50,80,0\\],\\[80,19,1\\]\\]\n**Output:** \\[50,20,80,15,17,19\\]\n**Explanation:** The root node is the node with value 50 since it has no parent.\nThe resulting binary tree is shown in the diagram.\n\n**Example 2:**\n\n**Input:** descriptions = \\[\\[1,2,1\\],\\[2,3,0\\],\\[3,4,1\\]\\]\n**Output:** \\[1,2,null,null,3,4\\]\n**Explanation:** The root node is the node with value 1 since it has no parent.\nThe resulting binary tree is shown in the diagram.\n\n**Constraints:**\n\n*   `1 <= descriptions.length <= 104`\n*   `descriptions[i].length == 3`\n*   `1 <= parenti, childi <= 105`\n*   `0 <= isLefti <= 1`\n*   The binary tree described by `descriptions` is valid.Could you represent and store the descriptions more efficiently? Could you find the root node? The node that is not a child in any of the descriptions is the root node.",
          "output": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_even_groups(head: ListNode) -> ListNode:\n    dummy = ListNode(-1)\n    dummy.next = head\n    prev, curr = dummy, head\n    count = 0\n    while curr:\n        count += 1\n        curr = curr.next\n    curr = head\n    i = 2\n    while i <= count:\n        next_group_head = curr\n        for _ in range(i):\n            if not next_group_head:\n                break\n            next_group_head = next_group_head.next\n        prev_group_tail = prev\n        for _ in range(i):\n            if not curr:\n                break\n            next_node = curr.next\n            curr.next = prev_group_tail.next\n            prev_group_tail.next = curr\n            curr = next_node\n        for _ in range(i):\n            prev = prev.next\n        i += 2\n    return dummy.next\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of integers `nums`. Perform the following steps:\n\n1.  Find **any** two **adjacent** numbers in `nums` that are **non-coprime**.\n2.  If no such numbers are found, **stop** the process.\n3.  Otherwise, delete the two numbers and **replace** them with their **LCM (Least Common Multiple)**.\n4.  **Repeat** this process as long as you keep finding two adjacent non-coprime numbers.\n\nReturn _the **final** modified array._ It can be shown that replacing adjacent non-coprime numbers in **any** arbitrary order will lead to the same result.\n\nThe test cases are generated such that the values in the final array are **less than or equal** to `108`.\n\nTwo values `x` and `y` are **non-coprime** if `GCD(x, y) > 1` where `GCD(x, y)` is the **Greatest Common Divisor** of `x` and `y`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[6,4,3,2,7,6,2\\]\n**Output:** \\[12,7,6\\]\n**Explanation:** \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = \\[**12**,3,2,7,6,2\\].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = \\[**12**,2,7,6,2\\].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = \\[**12**,7,6,2\\].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = \\[12,7,**6**\\].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is \\[12,7,6\\].\nNote that there are other ways to obtain the same resultant array.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,1,1,3,3,3\\]\n**Output:** \\[2,1,1,3\\]\n**Explanation:** \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = \\[2,2,1,1,**3**,3\\].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = \\[2,2,1,1,**3**\\].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = \\[**2**,1,1,3\\].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is \\[2,1,1,3\\].\nNote that there are other ways to obtain the same resultant array.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 105`\n*   The test cases are generated such that the values in the final array are **less than or equal** to `108`.Notice that the order of merging two numbers into their LCM does not matter so we can greedily merge elements to its left if possible. If a new value is formed, we should recursively check if it can be merged with the value to its left. To simulate the merge efficiently, we can maintain a stack that stores processed elements. When we iterate through the array, we only compare with the top of the stack (which is the value to its left).",
          "output": "def decode_slanted_cipher(encoded_text, rows):\n    matrix = ['' for _ in range(rows)]\n    index = 0\n\n    for diagonal in range(2 * (rows - 1)):\n        for row in range(max(0, diagonal - rows + 1), min(diagonal, rows - 1) + 1):\n            if index < len(encoded_text):\n                matrix[row] += encoded_text[index]\n                index += 1\n\n    return ''.join(matrix)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer array `nums` consisting of `2 * n` integers.\n\nYou need to divide `nums` into `n` pairs such that:\n\n*   Each element belongs to **exactly one** pair.\n*   The elements present in a pair are **equal**.\n\nReturn `true` _if nums can be divided into_ `n` _pairs, otherwise return_ `false`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,2,3,2,2,2\\]\n**Output:** true\n**Explanation:** \nThere are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.\nIf nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** false\n**Explanation:** \nThere is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.\n\n**Constraints:**\n\n*   `nums.length == 2 * n`\n*   `1 <= n <= 500`\n*   `1 <= nums[i] <= 500`For any number x in the range [1, 500], count the number of elements in nums whose values are equal to x. The elements with equal value can be divided completely into pairs if and only if their count is even.",
          "output": "from typing import List\n\ndef max_bombs_detonated(bombs: List[List[int]]) -> int:\n    n = len(bombs)\n    max_bombs = 0\n\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            dx = bombs[i][0] - bombs[j][0]\n            dy = bombs[i][1] - bombs[j][1]\n            distance = dx * dx + dy * dy\n            range_ = bombs[i][2] * bombs[i][2] + bombs[j][2] * bombs[j][2]\n            if distance <= range_:\n                count += 1\n        max_bombs = max(max_bombs, count)\n\n    return max_bombs\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array `nums` of positive integers. In one operation, you can choose **any** number from `nums` and reduce it to **exactly** half the number. (Note that you may choose this reduced number in future operations.)\n\nReturn _the **minimum** number of operations to reduce the sum of_ `nums` _by **at least** half._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[5,19,8,1\\]\n**Output:** 3\n**Explanation:** The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 19 and reduce it to 9.5.\nPick the number 9.5 and reduce it to 4.75.\nPick the number 8 and reduce it to 4.\nThe final array is \\[5, 4.75, 4, 1\\] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. \nThe sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n\n**Example 2:**\n\n**Input:** nums = \\[3,8,20\\]\n**Output:** 3\n**Explanation:** The initial sum of nums is equal to 3 + 8 + 20 = 31.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 20 and reduce it to 10.\nPick the number 10 and reduce it to 5.\nPick the number 3 and reduce it to 1.5.\nThe final array is \\[1.5, 8, 5\\] with a total sum of 1.5 + 8 + 5 = 14.5. \nThe sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 15.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `1 <= nums[i] <= 107`It is always optimal to halve the largest element. What data structure allows for an efficient query of the maximum element? Use a heap or priority queue to maintain the current elements.",
          "output": "import heapq\n\ndef min_operations(nums):\n    max_heap = [-num for num in nums]\n    heapq.heapify(max_heap)\n    initial_sum = sum(nums)\n    target_sum = initial_sum // 2\n    sum_so_far = 0\n    operations = 0\n\n    while sum_so_far <= target_sum:\n        largest = -heapq.heappop(max_heap)\n        sum_so_far += largest // 2\n        operations += 1\n\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed binary** string `floor`, which represents the colors of tiles on a floor:\n\n*   `floor[i] = '0'` denotes that the `ith` tile of the floor is colored **black**.\n*   On the other hand, `floor[i] = '1'` denotes that the `ith` tile of the floor is colored **white**.\n\nYou are also given `numCarpets` and `carpetLen`. You have `numCarpets` **black** carpets, each of length `carpetLen` tiles. Cover the tiles with the given carpets such that the number of **white** tiles still visible is **minimum**. Carpets may overlap one another.\n\nReturn _the **minimum** number of white tiles still visible._\n\n",
          "input": "**Example 1:**\n\n**Input:** floor =  \"10110101 \", numCarpets = 2, carpetLen = 2\n**Output:** 2\n**Explanation:** \nThe figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.\nNo other way of covering the tiles with the carpets can leave less than 2 white tiles visible.\n\n**Example 2:**\n\n**Input:** floor =  \"11111 \", numCarpets = 2, carpetLen = 3\n**Output:** 0\n**Explanation:** \nThe figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.\nNote that the carpets are able to overlap one another.\n\n**Constraints:**\n\n*   `1 <= carpetLen <= floor.length <= 1000`\n*   `floor[i]` is either `'0'` or `'1'`.\n*   `1 <= numCarpets <= 1000`Can you think of a DP solution? Let DP[i][j] denote the minimum number of white tiles still visible from indices i to floor.length-1 after covering with at most j carpets. The transition will be whether to put down the carpet at position i (if possible), or not.",
          "output": "def minVisibleWhiteTiles(floor: str, numCarpets: int, carpetLen: int) -> int:\n    n, res = len(floor), len(floor)\n    for i in range(n - carpetLen + 1):\n        count = sum(1 for j in range(carpetLen) if floor[i + j] == '1')\n        for k in range(1, numCarpets + 1):\n            if k * carpetLen - 1 <= i + carpetLen:\n                res = min(res, n - count * k)\n                if i + carpetLen < n:\n                    count -= floor[i + carpetLen - k * carpetLen] == '1'\n                    count += floor[i + carpetLen] == '1'\n    return res\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`. You are also given an integer `key`, which is present in `nums`.\n\nFor every unique integer `target` in `nums`, **count** the number of times `target` immediately follows an occurrence of `key` in `nums`. In other words, count the number of indices `i` such that:\n\n*   `0 <= i <= nums.length - 2`,\n*   `nums[i] == key` and,\n*   `nums[i + 1] == target`.\n\nReturn _the_ `target` _with the **maximum** count_. The test cases will be generated such that the `target` with maximum count is unique.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,100,200,1,100\\], key = 1\n**Output:** 100\n**Explanation:** For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,3\\], key = 2\n**Output:** 2\n**Explanation:** For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`\n*   The test cases will be generated such that the answer is unique.Count the number of times each target value follows the key in the array. Choose the target with the maximum count and return it.",
          "output": "def count_once_in_both(words1, words2):\n    counter1 = {}\n    counter2 = {}\n\n    for word in words1:\n        counter1[word] = counter1.get(word, 0) + 1\n    for word in words2:\n        counter2[word] = counter2.get(word, 0) + 1\n\n    count = 0\n    for item in counter1.items():\n        if item[1] == 1 and counter2.get(item[0], 0) == 1:\n            count += 1\n\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** `m x n` **binary** matrix `grid`.\n\nIn one operation, you can choose any `i` and `j` that meet the following conditions:\n\n*   `0 <= i < m`\n*   `0 <= j < n`\n*   `grid[i][j] == 1`\n\nand change the values of **all** cells in row `i` and column `j` to zero.\n\nReturn _the **minimum** number of operations needed to remove all_ `1`_'s from_ `grid`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[1,1,1\\],\\[0,1,0\\]\\]\n**Output:** 2\n**Explanation:**\nIn the first operation, change all cell values of row 1 and column 1 to zero.\nIn the second operation, change all cell values of row 0 and column 0 to zero.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[0,1,0\\],\\[1,0,1\\],\\[0,1,0\\]\\]\n**Output:** 2\n**Explanation:**\nIn the first operation, change all cell values of row 1 and column 0 to zero.\nIn the second operation, change all cell values of row 2 and column 1 to zero.\nNote that we cannot perform an operation using row 1 and column 1 because grid\\[1\\]\\[1\\] != 1.\n\n**Example 3:**\n\n**Input:** grid = \\[\\[0,0\\],\\[0,0\\]\\]\n**Output:** 0\n**Explanation:**\nThere are no 1's to remove so return 0.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 15`\n*   `1 <= m * n <= 15`\n*   `grid[i][j]` is either `0` or `1`.With the given constraints, could a brute force solution pass? What would a brute force solution look like? We can try every single possibility of choosing to do an operation on a cell with a 1 or choosing to ignore it.",
          "output": "def next_balanced(n):\n    while True:\n        n += 1\n        digit_count = {}\n        temp = n\n        while temp:\n            digit = temp % 10\n            digit_count[digit] = digit_count.get(digit, 0) + 1\n            temp //= 10\n        balanced = all(k == v for k, v in digit_count.items())\n        if balanced:\n            return n\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`. An index `i` is part of a **hill** in `nums` if the closest non-equal neighbors of `i` are smaller than `nums[i]`. Similarly, an index `i` is part of a **valley** in `nums` if the closest non-equal neighbors of `i` are larger than `nums[i]`. Adjacent indices `i` and `j` are part of the **same** hill or valley if `nums[i] == nums[j]`.\n\nNote that for an index to be part of a hill or valley, it must have a non-equal neighbor on **both** the left and right of the index.\n\nReturn _the number of hills and valleys in_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[2,4,1,1,6,5\\]\n**Output:** 3\n**Explanation:**\nAt index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill. \nAt index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley.\nAt index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2.\nAt index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill.\nAt index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. \nThere are 3 hills and valleys so we return 3.\n\n**Example 2:**\n\n**Input:** nums = \\[6,6,5,5,4,1\\]\n**Output:** 0\n**Explanation:**\nAt index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.\nAt index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley.\nAt index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley.\nAt index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley.\nAt index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.\nThere are 0 hills and valleys so we return 0.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`For each index, could you find the closest non-equal neighbors? Ensure that adjacent indices that are part of the same hill or valley are not double-counted.",
          "output": "def sorted_target_indices(nums, target):\n    result = [i for i, num in enumerate(nums) if num == target]\n    return sorted(result)\n"
     },
     {
          "instruction": "Write python code for this problem: There are `n` cars on an infinitely long road. The cars are numbered from `0` to `n - 1` from left to right and each car is present at a **unique** point.\n\nYou are given a **0-indexed** string `directions` of length `n`. `directions[i]` can be either `'L'`, `'R'`, or `'S'` denoting whether the `ith` car is moving towards the **left**, towards the **right**, or **staying** at its current point respectively. Each moving car has the **same speed**.\n\nThe number of collisions can be calculated as follows:\n\n*   When two cars moving in **opposite** directions collide with each other, the number of collisions increases by `2`.\n*   When a moving car collides with a stationary car, the number of collisions increases by `1`.\n\nAfter a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.\n\nReturn _the **total number of collisions** that will happen on the road_.\n\n",
          "input": "**Example 1:**\n\n**Input:** directions =  \"RLRSLL \"\n**Output:** 5\n**Explanation:**\nThe collisions that will happen on the road are:\n- Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2.\n- Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3.\n- Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4.\n- Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5.\nThus, the total number of collisions that will happen on the road is 5. \n\n**Example 2:**\n\n**Input:** directions =  \"LLRR \"\n**Output:** 0\n**Explanation:**\nNo cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0.\n\n**Constraints:**\n\n*   `1 <= directions.length <= 105`\n*   `directions[i]` is either `'L'`, `'R'`, or `'S'`.In what circumstances does a moving car not collide with another car? If we disregard the moving cars that do not collide with another car, what does each moving car contribute to the answer? Will stationary cars contribute towards the answer?",
          "output": "def k_radius_average(nums, k):\n    n = len(nums)\n    avgs = [-1] * n\n    for i in range(k, n - k):\n        sum = 0\n        for j in range(i - k, i + k + 1):\n            sum += nums[j]\n        avgs[i] = sum // (2 * k + 1)\n    return avgs\n"
     },
     {
          "instruction": "Write python code for this problem: Alice and Bob are opponents in an archery competition. The competition has set the following rules:\n\n1.  Alice first shoots `numArrows` arrows and then Bob shoots `numArrows` arrows.\n2.  The points are then calculated as follows:\n    1.  The target has integer scoring sections ranging from `0` to `11` **inclusive**.\n    2.  For **each** section of the target with score `k` (in between `0` to `11`), say Alice and Bob have shot `ak` and `bk` arrows on that section respectively. If `ak >= bk`, then Alice takes `k` points. If `ak < bk`, then Bob takes `k` points.\n    3.  However, if `ak == bk == 0`, then **nobody** takes `k` points.\n\n*   For example, if Alice and Bob both shot `2` arrows on the section with score `11`, then Alice takes `11` points. On the other hand, if Alice shot `0` arrows on the section with score `11` and Bob shot `2` arrows on that same section, then Bob takes `11` points.\n    \n\nYou are given the integer `numArrows` and an integer array `aliceArrows` of size `12`, which represents the number of arrows Alice shot on each scoring section from `0` to `11`. Now, Bob wants to **maximize** the total number of points he can obtain.\n\nReturn _the array_ `bobArrows` _which represents the number of arrows Bob shot on **each** scoring section from_ `0` _to_ `11`. The sum of the values in `bobArrows` should equal `numArrows`.\n\nIf there are multiple ways for Bob to earn the maximum total points, return **any** one of them.\n\n",
          "input": "**Example 1:**\n\n**Input:** numArrows = 9, aliceArrows = \\[1,1,0,1,0,0,2,1,0,1,2,0\\]\n**Output:** \\[0,0,0,0,1,1,0,0,1,2,3,1\\]\n**Explanation:** The table above shows how the competition is scored. \nBob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.\nIt can be shown that Bob cannot obtain a score higher than 47 points.\n\n**Example 2:**\n\n**Input:** numArrows = 3, aliceArrows = \\[0,0,1,0,0,0,0,0,0,0,0,2\\]\n**Output:** \\[0,0,0,0,0,0,0,0,1,1,1,0\\]\n**Explanation:** The table above shows how the competition is scored.\nBob earns a total point of 8 + 9 + 10 = 27.\nIt can be shown that Bob cannot obtain a score higher than 27 points.\n\n**Constraints:**\n\n*   `1 <= numArrows <= 105`\n*   `aliceArrows.length == bobArrows.length == 12`\n*   `0 <= aliceArrows[i], bobArrows[i] <= numArrows`\n*   `sum(aliceArrows[i]) == numArrows`To obtain points for some certain section x, what is the minimum number of arrows Bob must shoot? Given the small number of sections, can we brute force which sections Bob wants to win? For every set of sections Bob wants to win, check if we have the required amount of arrows. If we do, it is a valid selection.",
          "output": "def min_deletions(nums):\n    n = len(nums)\n    if n <= 2:\n        return 0\n        \n    min_idx, max_idx = 0, 0\n\n    for i in range(1, n):\n        if nums[i] < nums[min_idx]:\n            min_idx = i\n        if nums[i] > nums[max_idx]:\n            max_idx = i\n\n    return min(max(min_idx, max_idx), n - min(min_idx, max_idx) - 1, min_idx + n - max_idx - 1)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `s`. You are also given a **0-indexed** string `queryCharacters` of length `k` and a **0-indexed** array of integer **indices** `queryIndices` of length `k`, both of which are used to describe `k` queries.\n\nThe `ith` query updates the character in `s` at index `queryIndices[i]` to the character `queryCharacters[i]`.\n\nReturn _an array_ `lengths` _of length_ `k` _where_ `lengths[i]` _is the **length** of the **longest substring** of_ `s` _consisting of **only one repeating** character **after** the_ `ith` _query_ _is performed._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"babacc \", queryCharacters =  \"bcb \", queryIndices = \\[1,3,3\\]\n**Output:** \\[3,3,4\\]\n**Explanation:** \n- 1st query updates s =  \"b**b**bacc \". The longest substring consisting of one repeating character is  \"bbb \" with length 3.\n- 2nd query updates s =  \"bbb**c**cc \". \n  The longest substring consisting of one repeating character can be  \"bbb \" or  \"ccc \" with length 3.\n- 3rd query updates s =  \"bbb**b**cc \". The longest substring consisting of one repeating character is  \"bbbb \" with length 4.\nThus, we return \\[3,3,4\\].\n\n**Example 2:**\n\n**Input:** s =  \"abyzz \", queryCharacters =  \"aa \", queryIndices = \\[2,1\\]\n**Output:** \\[2,3\\]\n**Explanation:**\n- 1st query updates s =  \"ab**a**zz \". The longest substring consisting of one repeating character is  \"zz \" with length 2.\n- 2nd query updates s =  \"a**a**azz \". The longest substring consisting of one repeating character is  \"aaa \" with length 3.\nThus, we return \\[2,3\\].\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.\n*   `k == queryCharacters.length == queryIndices.length`\n*   `1 <= k <= 105`\n*   `queryCharacters` consists of lowercase English letters.\n*   `0 <= queryIndices[i] < s.length`Use a segment tree to perform fast point updates and range queries. We need each segment tree node to store the length of the longest substring of that segment consisting of only 1 repeating character. We will also have each segment tree node store the leftmost and rightmost character of the segment, the max length of a prefix substring consisting of only 1 repeating character, and the max length of a suffix substring consisting of only 1 repeating character. Use this information to properly merge the two segment tree nodes together.",
          "output": "from collections import defaultdict\n\ndef people_with_secret(n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:\n    secret_holders = set([firstPerson])\n    meetings_by_time = defaultdict(list)\n\n    for meeting in meetings:\n        meetings_by_time[meeting[2]].append(tuple(meeting[:2]))\n        \n    for time in range(n):\n        if time in meetings_by_time:\n            for x, y in meetings_by_time[time]:\n                if x in secret_holders or y in secret_holders:\n                    secret_holders.add(x)\n                    secret_holders.add(y)\n\n    return list(secret_holders)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` and two integers `key` and `k`. A **k-distant index** is an index `i` of `nums` for which there exists at least one index `j` such that `|i - j| <= k` and `nums[j] == key`.\n\nReturn _a list of all k-distant indices sorted in **increasing order**_.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[3,4,9,1,3,9,5\\], key = 9, k = 1\n**Output:** \\[1,2,3,4,5,6\\]\n**Explanation:** Here, `nums[2] == key` and `nums[5] == key. - For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j` where `|0 - j| <= k` and `nums[j] == key. Thus, 0 is not a k-distant index. - For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index. - For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index. - For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index. - For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index. - For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index. - For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.`\nThus, we return \\[1,2,3,4,5,6\\] which is sorted in increasing order. \n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\], key = 2, k = 2\n**Output:** \\[0,1,2,3,4\\]\n**Explanation:** For all indices i in nums, there exists some index j such that |i - j| <= k and nums\\[j\\] == key, so every index is a k-distant index. \nHence, we return \\[0,1,2,3,4\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`\n*   `key` is an integer from the array `nums`.\n*   `1 <= k <= nums.length`For every occurrence of key in nums, find all indices within distance k from it. Use a hash table to remove duplicate indices.",
          "output": "def can_fit_stamps(grid, stampHeight, stampWidth):\n    m, n = len(grid), len(grid[0])\n    for i in range(m - stampHeight + 1):\n        for j in range(n - stampWidth + 1):\n            canFit = True\n            for x in range(stampHeight):\n                for y in range(stampWidth):\n                    if grid[i + x][j + y] == 1:\n                        canFit = False\n                        break\n                if not canFit:\n                    break\n            if canFit:\n                return True\n    return False\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n` denoting the number of nodes of a **weighted directed** graph. The nodes are numbered from `0` to `n - 1`.\n\nYou are also given a 2D integer array `edges` where `edges[i] = [fromi, toi, weighti]` denotes that there exists a **directed** edge from `fromi` to `toi` with weight `weighti`.\n\nLastly, you are given three **distinct** integers `src1`, `src2`, and `dest` denoting three distinct nodes of the graph.\n\nReturn _the **minimum weight** of a subgraph of the graph such that it is **possible** to reach_ `dest` _from both_ `src1` _and_ `src2` _via a set of edges of this subgraph_. In case such a subgraph does not exist, return `-1`.\n\nA **subgraph** is a graph whose vertices and edges are subsets of the original graph. The **weight** of a subgraph is the sum of weights of its constituent edges.\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 6, edges = \\[\\[0,2,2\\],\\[0,5,6\\],\\[1,0,3\\],\\[1,4,5\\],\\[2,1,1\\],\\[2,3,3\\],\\[2,3,4\\],\\[3,4,2\\],\\[4,5,1\\]\\], src1 = 0, src2 = 1, dest = 5\n**Output:** 9\n**Explanation:**\nThe above figure represents the input graph.\nThe blue edges represent one of the subgraphs that yield the optimal answer.\nNote that the subgraph \\[\\[1,0,3\\],\\[0,5,6\\]\\] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints.\n\n**Example 2:**\n\n**Input:** n = 3, edges = \\[\\[0,1,1\\],\\[2,1,1\\]\\], src1 = 0, src2 = 1, dest = 2\n**Output:** -1\n**Explanation:**\nThe above figure represents the input graph.\nIt can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints.\n\n**Constraints:**\n\n*   `3 <= n <= 105`\n*   `0 <= edges.length <= 105`\n*   `edges[i].length == 3`\n*   `0 <= fromi, toi, src1, src2, dest <= n - 1`\n*   `fromi != toi`\n*   `src1`, `src2`, and `dest` are pairwise distinct.\n*   `1 <= weight[i] <= 105`Consider what the paths from src1 to dest and src2 to dest would look like in the optimal solution. It can be shown that in an optimal solution, the two paths from src1 and src2 will coincide at one node, and the remaining part to dest will be the same for both paths. Now consider how to find the node where the paths will coincide. How can algorithms for finding the shortest path between two nodes help us?",
          "output": "from heapq import heappop, heappush\nfrom sys import maxsize\n\ndef dijkstra(src, adj):\n    dist = [maxsize] * len(adj)\n    dist[src] = 0\n    pq = [(0, src)]\n\n    while pq:\n        d, u = heappop(pq)\n        if d != dist[u]:\n            continue\n        for v, w in adj[u]:\n            if d + w < dist[v]:\n                dist[v] = d + w\n                heappush(pq, (dist[v], v))\n\n    return dist\n\ndef min_weight_subgraph(n, edges, src1, src2, dest):\n    adj = [[] for _ in range(n)]\n    for u, v, w in edges:\n        adj[u].append((v, w))\n\n    dist1 = dijkstra(src1, adj)\n    dist2 = dijkstra(src2, adj)\n\n    res = dist1[dest] + dist2[dest]\n    for u, v, w in edges:\n        res = min(res, dist1[u] + dist2[v] + w)\n        res = min(res, dist1[v] + dist2[u] + w)\n\n    return res if res != maxsize else -1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given integers `height` and `width` which specify the dimensions of a brick wall you are building. You are also given a **0-indexed** array of **unique** integers `bricks`, where the `ith` brick has a height of `1` and a width of `bricks[i]`. You have an **infinite** supply of each type of brick and bricks may **not** be rotated.\n\nEach row in the wall must be exactly `width` units long. For the wall to be **sturdy**, adjacent rows in the wall should **not** join bricks at the same location, except at the ends of the wall.\n\nReturn _the number of ways to build a **sturdy** wall._ Since the answer may be very large, return it **modulo** `109 + 7`.\n\n",
          "input": "**Example 1:**\n\n**Input:** height = 2, width = 3, bricks = \\[1,2\\]\n**Output:** 2\n**Explanation:**\nThe first two walls in the diagram show the only two ways to build a sturdy brick wall.\nNote that the third wall in the diagram is not sturdy because adjacent rows join bricks 2 units from the left.\n\n**Example 2:**\n\n**Input:** height = 1, width = 1, bricks = \\[5\\]\n**Output:** 0\n**Explanation:**\nThere are no ways to build a sturdy wall because the only type of brick we have is longer than the width of the wall.\n\n**Constraints:**\n\n*   `1 <= height <= 100`\n*   `1 <= width <= 10`\n*   `1 <= bricks.length <= 10`\n*   `1 <= bricks[i] <= 10`\n*   All the values of `bricks` are **unique**.A row of bricks can be represented uniquely by the points where two bricks are joined together. For a given row of bricks, how many configurations of bricks could you have put below this row such that the wall is sturdy? Use dynamic programming to store the number of possible sturdy walls with a given height and configuration of bricks on the top row.",
          "output": "def are_encoded_strings_equal(s1: str, s2: str) -> bool:\n    decoded1, decoded2 = \"\", \"\"\n\n    for i, c in enumerate(s1):\n        if c.isdigit():\n            count = int(c)\n            decoded1 += s1[i - 1] * count\n        else:\n            decoded1 += c\n\n    for i, c in enumerate(s2):\n        if c.isdigit():\n            count = int(c)\n            decoded2 += s2[i - 1] * count\n        else:\n            decoded2 += c\n\n    return decoded1 == decoded2\n"
     },
     {
          "instruction": "Write python code for this problem: A **bit flip** of a number `x` is choosing a bit in the binary representation of `x` and **flipping** it from either `0` to `1` or `1` to `0`.\n\n*   For example, for `x = 7`, the binary representation is `111` and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get `110`, flip the second bit from the right to get `101`, flip the fifth bit from the right (a leading zero) to get `10111`, etc.\n\nGiven two integers `start` and `goal`, return _the **minimum** number of **bit flips** to convert_ `start` _to_ `goal`.\n\n",
          "input": "**Example 1:**\n\n**Input:** start = 10, goal = 7\n**Output:** 3\n**Explanation:** The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 1010 -> 1011.\n- Flip the third bit from the right: 1011 -> 1111.\n- Flip the fourth bit from the right: 1111 -> 0111.\nIt can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.\n\n**Example 2:**\n\n**Input:** start = 3, goal = 4\n**Output:** 3\n**Explanation:** The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 011 -> 010.\n- Flip the second bit from the right: 010 -> 000.\n- Flip the third bit from the right: 000 -> 100.\nIt can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.\n\n**Constraints:**\n\n*   `0 <= start, goal <= 109`If the value of a bit in start and goal differ, then we need to flip that bit. Consider using the XOR operation to determine which bits need a bit flip.",
          "output": "   None\n   "
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums`, where `nums[i]` is a digit between `0` and `9` (**inclusive**).\n\nThe **triangular sum** of `nums` is the value of the only element present in `nums` after the following process terminates:\n\n1.  Let `nums` comprise of `n` elements. If `n == 1`, **end** the process. Otherwise, **create** a new **0-indexed** integer array `newNums` of length `n - 1`.\n2.  For each index `i`, where `0 <= i < n - 1`, **assign** the value of `newNums[i]` as `(nums[i] + nums[i+1]) % 10`, where `%` denotes modulo operator.\n3.  **Replace** the array `nums` with `newNums`.\n4.  **Repeat** the entire process starting from step 1.\n\nReturn _the triangular sum of_ `nums`.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5\\]\n**Output:** 8\n**Explanation:**\nThe above diagram depicts the process from which we obtain the triangular sum of the array.\n\n**Example 2:**\n\n**Input:** nums = \\[5\\]\n**Output:** 5\n**Explanation:**\nSince there is only one element in nums, the triangular sum is the value of that element itself.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] <= 9`Try simulating the entire process. To reduce space, use a temporary array to update nums in every step instead of creating a new array at each step.",
          "output": "def is_valid_parentheses_string(s: str, locked: str) -> bool:\n    balance = 0\n    for i in range(len(s)):\n        if locked[i] == '0':\n            balance += 1 if s[i] == '(' else -1\n            if balance < 0:\n                return False\n    return balance == 0\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** binary string `s` which represents the types of buildings along a street where:\n\n*   `s[i] = '0'` denotes that the `ith` building is an office and\n*   `s[i] = '1'` denotes that the `ith` building is a restaurant.\n\nAs a city official, you would like to **select** 3 buildings for random inspection. However, to ensure variety, **no two consecutive** buildings out of the **selected** buildings can be of the same type.\n\n*   For example, given `s = \"0**0**1**1**0**1** \"`, we cannot select the `1st`, `3rd`, and `5th` buildings as that would form `\"0**11** \"` which is **not** allowed due to having two consecutive buildings of the same type.\n\nReturn _the **number of valid ways** to select 3 buildings._\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"001101 \"\n**Output:** 6\n**Explanation:** \nThe following sets of indices selected are valid:\n- \\[0,2,4\\] from  \"**0**0**1**1**0**1 \" forms  \"010 \"\n- \\[0,3,4\\] from  \"**0**01**10**1 \" forms  \"010 \"\n- \\[1,2,4\\] from  \"0**01**1**0**1 \" forms  \"010 \"\n- \\[1,3,4\\] from  \"0**0**1**10**1 \" forms  \"010 \"\n- \\[2,4,5\\] from  \"00**1**1**01** \" forms  \"101 \"\n- \\[3,4,5\\] from  \"001**101** \" forms  \"101 \"\nNo other selection is valid. Thus, there are 6 total ways.\n\n**Example 2:**\n\n**Input:** s =  \"11100 \"\n**Output:** 0\n**Explanation:** It can be shown that there are no valid selections.\n\n**Constraints:**\n\n*   `3 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`.There are only 2 valid patterns: \u2018101\u2019 and \u2018010\u2019. Think about how we can construct these 2 patterns from smaller patterns. Count the number of subsequences of the form \u201801\u2019 or \u201810\u2019 first. Let n01[i] be the number of \u201801\u2019 subsequences that exist in the prefix of s up to the ith building. How can you compute n01[i]? Let n0[i] and n1[i] be the number of \u20180\u2019s and \u20181\u2019s that exists in the prefix of s up to i respectively. Then n01[i] = n01[i \u2013 1] if s[i] == \u20180\u2019, otherwise n01[i] = n01[i \u2013 1] + n0[i \u2013 1]. The same logic applies to building the n10 array and subsequently the n101 and n010 arrays for the number of \u2018101\u2019 and \u2018010\u2018 subsequences.",
          "output": "def abbreviated_product(left: int, right: int) -> str:\n    product = 1\n    for i in range(left, right + 1):\n        product *= i\n    return str(product)\n"
     },
     {
          "instruction": "Write python code for this problem: You are **building** a string `s` of length `n` **one** character at a time, **prepending** each new character to the **front** of the string. The strings are labeled from `1` to `n`, where the string with length `i` is labeled `si`.\n\n*   For example, for `s = \"abaca \"`, `s1 == \"a \"`, `s2 == \"ca \"`, `s3 == \"aca \"`, etc.\n\nThe **score** of `si` is the length of the **longest common prefix** between `si` and `sn` (Note that `s == sn`).\n\nGiven the final string `s`, return _the **sum** of the **score** of every_ `si`.\n\n",
          "input": "**Example 1:**\n\n**Input:** s =  \"babab \"\n**Output:** 9\n**Explanation:**\nFor s1 ==  \"b \", the longest common prefix is  \"b \" which has a score of 1.\nFor s2 ==  \"ab \", there is no common prefix so the score is 0.\nFor s3 ==  \"bab \", the longest common prefix is  \"bab \" which has a score of 3.\nFor s4 ==  \"abab \", there is no common prefix so the score is 0.\nFor s5 ==  \"babab \", the longest common prefix is  \"babab \" which has a score of 5.\nThe sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.\n\n**Example 2:**\n\n**Input:** s =  \"azbazbzaz \"\n**Output:** 14\n**Explanation:** \nFor s2 ==  \"az \", the longest common prefix is  \"az \" which has a score of 2.\nFor s6 ==  \"azbzaz \", the longest common prefix is  \"azb \" which has a score of 3.\nFor s9 ==  \"azbazbzaz \", the longest common prefix is  \"azbazbzaz \" which has a score of 9.\nFor all other si, the score is 0.\nThe sum of the scores is 2 + 3 + 9 = 14, so we return 14.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters.Each s_i is a suffix of the string s, so consider algorithms that can determine the longest prefix that is also a suffix. Could you use the Z array from the Z algorithm to find the score of each s_i?",
          "output": "def string_sum_scores(s):\n    score = 0\n    prefix_length = 0\n\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == s[-1]:\n            prefix_length += 1\n        else:\n            prefix_length = 0\n        score += prefix_length\n        \n    return score\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a positive integer `num`. You may swap any two digits of `num` that have the same **parity** (i.e. both odd digits or both even digits).\n\nReturn _the **largest** possible value of_ `num` _after **any** number of swaps._\n\n",
          "input": "**Example 1:**\n\n**Input:** num = 1234\n**Output:** 3412\n**Explanation:** Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.\n\n**Example 2:**\n\n**Input:** num = 65875\n**Output:** 87655\n**Explanation:** Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.\n\n**Constraints:**\n\n*   `1 <= num <= 109`The bigger digit should appear first (more to the left) because it contributes more to the value of the number. Get all the even digits, as well as odd digits. Sort them separately. Reconstruct the number by giving the earlier digits the highest available digit of the same parity.",
          "output": "def first_palindrome(words):\n    for word in words:\n        if word == word[::-1]:\n            return word\n    return \"\"\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** string `expression` of the form `\"+ \"` where and represent positive integers.\n\nAdd a pair of parentheses to `expression` such that after the addition of parentheses, `expression` is a **valid** mathematical expression and evaluates to the **smallest** possible value. The left parenthesis **must** be added to the left of `'+'` and the right parenthesis **must** be added to the right of `'+'`.\n\nReturn `expression` _after adding a pair of parentheses such that_ `expression` _evaluates to the **smallest** possible value._ If there are multiple answers that yield the same result, return any of them.\n\nThe input has been generated such that the original value of `expression`, and the value of `expression` after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.\n\n",
          "input": "**Example 1:**\n\n**Input:** expression =  \"247+38 \"\n**Output:**  \"2(47+38) \"\n**Explanation:** The `expression` evaluates to 2 \\* (47 + 38) = 2 \\* 85 = 170.\nNote that  \"2(4)7+38 \" is invalid because the right parenthesis must be to the right of the `'+'`.\nIt can be shown that 170 is the smallest possible value.\n\n**Example 2:**\n\n**Input:** expression =  \"12+34 \"\n**Output:**  \"1(2+3)4 \"\n**Explanation:** The expression evaluates to 1 \\* (2 + 3) \\* 4 = 1 \\* 5 \\* 4 = 20.\n\n**Example 3:**\n\n**Input:** expression =  \"999+999 \"\n**Output:**  \"(999+999) \"\n**Explanation:** The `expression` evaluates to 999 + 999 = 1998.\n\n**Constraints:**\n\n*   `3 <= expression.length <= 10`\n*   `expression` consists of digits from `'1'` to `'9'` and `'+'`.\n*   `expression` starts and ends with digits.\n*   `expression` contains exactly one `'+'`.\n*   The original value of `expression`, and the value of `expression` after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.The maximum length of expression is very low. We can try every possible spot to place the parentheses. Every possibility of expression is of the form a * (b + c) * d where a, b, c, d represent integers. Note the edge cases where a and/or d do not exist, in which case use 1 instead of them.",
          "output": "def add_spaces(s: str, spaces: List[int]) -> str:\n    result = []\n    j = 0\n    for i, c in enumerate(s):\n        while j < len(spaces) and i == spaces[j]:\n            result.append(' ')\n            j += 1\n        result.append(c)\n    return ''.join(result)\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an array of non-negative integers `nums` and an integer `k`. In one operation, you may choose **any** element from `nums` and **increment** it by `1`.\n\nReturn _the **maximum** **product** of_ `nums` _after **at most**_ `k` _operations._ Since the answer may be very large, return it **modulo** `109 + 7`. Note that you should maximize the product before taking the modulo.\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[0,4\\], k = 5\n**Output:** 20\n**Explanation:** Increment the first number 5 times.\nNow nums = \\[5, 4\\], with a product of 5 \\* 4 = 20.\nIt can be shown that 20 is maximum product possible, so we return 20.\nNote that there may be other ways to increment nums to have the maximum product.\n\n**Example 2:**\n\n**Input:** nums = \\[6,3,3,2\\], k = 2\n**Output:** 216\n**Explanation:** Increment the second number 1 time and increment the fourth number 1 time.\nNow nums = \\[6, 4, 3, 3\\], with a product of 6 \\* 4 \\* 3 \\* 3 = 216.\nIt can be shown that 216 is maximum product possible, so we return 216.\nNote that there may be other ways to increment nums to have the maximum product.\n\n**Constraints:**\n\n*   `1 <= nums.length, k <= 105`\n*   `0 <= nums[i] <= 106`If you can increment only once, which number should you increment? We should always prioritize the smallest number. What kind of data structure could we use? Use a min heap to hold all the numbers. Each time we do an operation, replace the top of the heap x by x + 1.",
          "output": "def smooth_descent_periods(prices):\n    count = 0\n    i = 1\n    while i < len(prices):\n        if prices[i] == prices[i - 1] - 1:\n            while i < len(prices) and prices[i] == prices[i - 1] - 1:\n                i += 1\n            count += 1\n        else:\n            i += 1\n    return count\n"
     },
     {
          "instruction": "Write python code for this problem: Alice is a caretaker of `n` gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\n\nYou are given a **0-indexed** integer array `flowers` of size `n`, where `flowers[i]` is the number of flowers already planted in the `ith` garden. Flowers that are already planted **cannot** be removed. You are then given another integer `newFlowers`, which is the **maximum** number of flowers that Alice can additionally plant. You are also given the integers `target`, `full`, and `partial`.\n\nA garden is considered **complete** if it has **at least** `target` flowers. The **total beauty** of the gardens is then determined as the **sum** of the following:\n\n*   The number of **complete** gardens multiplied by `full`.\n*   The **minimum** number of flowers in any of the **incomplete** gardens multiplied by `partial`. If there are no incomplete gardens, then this value will be `0`.\n\nReturn _the **maximum** total beauty that Alice can obtain after planting at most_ `newFlowers` _flowers._\n\n",
          "input": "**Example 1:**\n\n**Input:** flowers = \\[1,3,1,1\\], newFlowers = 7, target = 6, full = 12, partial = 1\n**Output:** 14\n**Explanation:** Alice can plant\n- 2 flowers in the 0th garden\n- 3 flowers in the 1st garden\n- 1 flower in the 2nd garden\n- 1 flower in the 3rd garden\nThe gardens will then be \\[3,6,2,2\\]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 \\* 12 + 2 \\* 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.\n\n**Example 2:**\n\n**Input:** flowers = \\[2,4,5,3\\], newFlowers = 10, target = 5, full = 2, partial = 6\n**Output:** 30\n**Explanation:** Alice can plant\n- 3 flowers in the 0th garden\n- 0 flowers in the 1st garden\n- 0 flowers in the 2nd garden\n- 2 flowers in the 3rd garden\nThe gardens will then be \\[5,4,5,5\\]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 \\* 2 + 4 \\* 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.\n\n**Constraints:**\n\n*   `1 <= flowers.length <= 105`\n*   `1 <= flowers[i], target <= 105`\n*   `1 <= newFlowers <= 1010`\n*   `1 <= full, partial <= 105`Say we choose k gardens to be complete, is there an optimal way of choosing which gardens to plant more flowers to achieve this? For a given k, we should greedily fill-up the k gardens with the most flowers planted already. This gives us the most remaining flowers to fill up the other gardens. After sorting flowers, we can thus try every possible k and what is left is to find the highest minimum flowers we can obtain by planting the remaining flowers in the other gardens. To find the highest minimum in the other gardens, we can use binary search to find the most optimal way of planting.",
          "output": "def min_operations_to_K_increasing(arr, k):\n    operations = 0\n    for i in range(k, len(arr)):\n        if arr[i] <= arr[i - k]:\n            operations += (arr[i - k] - arr[i] + 1)\n            arr[i] = arr[i - k] + 1\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: You are given two strings `current` and `correct` representing two **24-hour times**.\n\n24-hour times are formatted as `\"HH:MM \"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\nIn one operation you can increase the time `current` by `1`, `5`, `15`, or `60` minutes. You can perform this operation **any** number of times.\n\nReturn _the **minimum number of operations** needed to convert_ `current` _to_ `correct`.\n\n",
          "input": "**Example 1:**\n\n**Input:** current =  \"02:30 \", correct =  \"04:35 \"\n**Output:** 3\n**Explanation:**\nWe can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes  \"03:30 \".\n- Add 60 minutes to current. current becomes  \"04:30 \".\n- Add 5 minutes to current. current becomes  \"04:35 \".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations.\n\n**Example 2:**\n\n**Input:** current =  \"11:00 \", correct =  \"11:01 \"\n**Output:** 1\n**Explanation:** We only have to add one minute to current, so the minimum number of operations needed is 1.\n\n**Constraints:**\n\n*   `current` and `correct` are in the format `\"HH:MM \"`\n*   `current <= correct`Convert the times to minutes. Use the operation with the biggest value possible at each step.",
          "output": "def minimum_operations(current: str, correct: str) -> int:\n    ch, cm = map(int, current.split(':'))\n    th, tm = map(int, correct.split(':'))\n    ct = ch * 60 + cm\n    tt = th * 60 + tm\n\n    operations = 0\n    while ct < tt:\n        if tt - ct >= 60:\n            ct += 60\n        elif tt - ct >= 15:\n            ct += 15\n        elif tt - ct >= 5:\n            ct += 5\n        else:\n            ct += 1\n\n        operations += 1\n\n    return operations\n"
     },
     {
          "instruction": "Write python code for this problem: You are playing a game that has `n` levels numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `damage` where `damage[i]` is the amount of health you will lose to complete the `ith` level.\n\nYou are also given an integer `armor`. You may use your armor ability **at most once** during the game on **any** level which will protect you from **at most** `armor` damage.\n\nYou must complete the levels in order and your health must be **greater than** `0` at all times to beat the game.\n\nReturn _the **minimum** health you need to start with to beat the game._\n\n",
          "input": "**Example 1:**\n\n**Input:** damage = \\[2,7,4,3\\], armor = 4\n**Output:** 13\n**Explanation:** One optimal way to beat the game starting at 13 health is:\nOn round 1, take 2 damage. You have 13 - 2 = 11 health.\nOn round 2, take 7 damage. You have 11 - 7 = 4 health.\nOn round 3, use your armor to protect you from 4 damage. You have 4 - 0 = 4 health.\nOn round 4, take 3 damage. You have 4 - 3 = 1 health.\nNote that 13 is the minimum health you need to start with to beat the game.\n\n**Example 2:**\n\n**Input:** damage = \\[2,5,3,4\\], armor = 7\n**Output:** 10\n**Explanation:** One optimal way to beat the game starting at 10 health is:\nOn round 1, take 2 damage. You have 10 - 2 = 8 health.\nOn round 2, use your armor to protect you from 5 damage. You have 8 - 0 = 8 health.\nOn round 3, take 3 damage. You have 8 - 3 = 5 health.\nOn round 4, take 4 damage. You have 5 - 4 = 1 health.\nNote that 10 is the minimum health you need to start with to beat the game.\n\n**Example 3:**\n\n**Input:** damage = \\[3,3,3\\], armor = 0\n**Output:** 10\n**Explanation:** One optimal way to beat the game starting at 10 health is:\nOn round 1, take 3 damage. You have 10 - 3 = 7 health.\nOn round 2, take 3 damage. You have 7 - 3 = 4 health.\nOn round 3, take 3 damage. You have 4 - 3 = 1 health.\nNote that you did not use your armor ability.\n\n**Constraints:**\n\n*   `n == damage.length`\n*   `1 <= n <= 105`\n*   `0 <= damage[i] <= 105`\n*   `0 <= armor <= 105`When should you use your armor ability? It is always optimal to use your armor ability on the level where you take the most amount of damage.",
          "output": "def min_health(damage, armor):\n    health = 0\n    for dmg in reversed(damage):\n        health += dmg\n        if health > armor:\n            health -= armor\n            armor = 0\n    return health + 1\n"
     },
     {
          "instruction": "Write python code for this problem: You are given a **0-indexed** integer array `nums` of length `n`.\n\nThe **sum** **score** of `nums` at an index `i` where `0 <= i < n` is the **maximum** of:\n\n*   The sum of the **first** `i + 1` elements of `nums`.\n*   The sum of the **last** `n - i` elements of `nums`.\n\nReturn _the **maximum** **sum** **score** of_ `nums` _at any index._\n\n",
          "input": "**Example 1:**\n\n**Input:** nums = \\[4,3,-2,5\\]\n**Output:** 10\n**Explanation:**\nThe sum score at index 0 is max(4, 4 + 3 + -2 + 5) = max(4, 10) = 10.\nThe sum score at index 1 is max(4 + 3, 3 + -2 + 5) = max(7, 6) = 7.\nThe sum score at index 2 is max(4 + 3 + -2, -2 + 5) = max(5, 3) = 5.\nThe sum score at index 3 is max(4 + 3 + -2 + 5, 5) = max(10, 5) = 10.\nThe maximum sum score of nums is 10.\n\n**Example 2:**\n\n**Input:** nums = \\[-3,-5\\]\n**Output:** -3\n**Explanation:**\nThe sum score at index 0 is max(-3, -3 + -5) = max(-3, -8) = -3.\nThe sum score at index 1 is max(-3 + -5, -5) = max(-8, -5) = -5.\nThe maximum sum score of nums is -3.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `-105 <= nums[i] <= 105`How can we use precalculation to efficiently calculate the average difference at an index? Create a prefix and/or suffix sum array.",
          "output": "def max_words_in_sentence(sentences):\n    max_words = 0\n    for sentence in sentences:\n        words = len(sentence.split())\n        max_words = max(max_words, words)\n    return max_words\n"
     },
     {
          "instruction": "Write python code for this problem: Given two integers `num1` and `num2`, return _the **sum** of the two integers_.\n\n",
          "input": "**Example 1:**\n\n**Input:** num1 = 12, num2 = 5\n**Output:** 17\n**Explanation:** num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.\n\n**Example 2:**\n\n**Input:** num1 = -10, num2 = 4\n**Output:** -6\n**Explanation:** num1 + num2 = -6, so -6 is returned.\n\n**Constraints:**\n\n*   `-100 <= num1, num2 <= 100`",
          "output": "def capitalize_title(title):\n    return ' '.join([word.capitalize() for word in title.split(' ')])\n"
     },
     {
          "instruction": "Write python code for this problem: You are given the `root` of a **binary tree** that consists of exactly `3` nodes: the root, its left child, and its right child.\n\nReturn `true` _if the value of the root is equal to the **sum** of the values of its two children, or_ `false` _otherwise_.\n\n",
          "input": "**Example 1:**\n\n**Input:** root = \\[10,4,6\\]\n**Output:** true\n**Explanation:** The values of the root, its left child, and its right child are 10, 4, and 6, respectively.\n10 is equal to 4 + 6, so we return true.\n\n**Example 2:**\n\n**Input:** root = \\[5,3,1\\]\n**Output:** false\n**Explanation:** The values of the root, its left child, and its right child are 5, 3, and 1, respectively.\n5 is not equal to 3 + 1, so we return false.\n\n**Constraints:**\n\n*   The tree consists only of the root, its left child, and its right child.\n*   `-100 <= Node.val <= 100`",
          "output": "def max_twin_sum(head):\n    sum = 0\n    max_sum = 0\n    i = 0\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n        fast = fast.next.next\n        i += 1\n\n    for j in range(i):\n        sum = slow.val + fast.val\n        max_sum = max(max_sum, sum)\n        slow = slow.next\n        fast = fast.prev\n\n    return max_sum\n"
     },
     {
          "instruction": "Write python code for this problem: You are given an integer `n`. A perfectly straight street is represented by a number line ranging from `0` to `n - 1`. You are given a 2D integer array `lights` representing the street lamp(s) on the street. Each `lights[i] = [positioni, rangei]` indicates that there is a street lamp at position `positioni` that lights up the area from `[max(0, positioni - rangei), min(n - 1, positioni + rangei)]` (**inclusive**).\n\nThe **brightness** of a position `p` is defined as the number of street lamps that light up the position `p`. You are given a **0-indexed** integer array `requirement` of size `n` where `requirement[i]` is the minimum **brightness** of the `ith` position on the street.\n\nReturn _the number of positions_ `i` _on the street between_ `0` _and_ `n - 1` _that have a **brightness**_ _of **at least**_ `requirement[i]`_._\n\n",
          "input": "**Example 1:**\n\n**Input:** n = 5, lights = \\[\\[0,1\\],\\[2,1\\],\\[3,2\\]\\], requirement = \\[0,2,1,4,1\\]\n**Output:** 4\n**Explanation:**\n- The first street lamp lights up the area from \\[max(0, 0 - 1), min(n - 1, 0 + 1)\\] = \\[0, 1\\] (inclusive).\n- The second street lamp lights up the area from \\[max(0, 2 - 1), min(n - 1, 2 + 1)\\] = \\[1, 3\\] (inclusive).\n- The third street lamp lights up the area from \\[max(0, 3 - 2), min(n - 1, 3 + 2)\\] = \\[1, 4\\] (inclusive).\n\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is greater than requirement\\[0\\].\n- Position 1 is covered by the first, second, and third street lamps. It is covered by 3 street lamps which is greater than requirement\\[1\\].\n- Position 2 is covered by the second and third street lamps. It is covered by 2 street lamps which is greater than requirement\\[2\\].\n- Position 3 is covered by the second and third street lamps. It is covered by 2 street lamps which is less than requirement\\[3\\].\n- Position 4 is covered by the third street lamp. It is covered by 1 street lamp which is equal to requirement\\[4\\].\n\nPositions 0, 1, 2, and 4 meet the requirement so we return 4.\n\n**Example 2:**\n\n**Input:** n = 1, lights = \\[\\[0,1\\]\\], requirement = \\[2\\]\n**Output:** 0\n**Explanation:**\n- The first street lamp lights up the area from \\[max(0, 0 - 1), min(n - 1, 0 + 1)\\] = \\[0, 0\\] (inclusive).\n- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is less than requirement\\[0\\].\n- We return 0 because no position meets their brightness requirement.\n\n**Constraints:**\n\n*   `1 <= n <= 105`\n*   `1 <= lights.length <= 105`\n*   `0 <= positioni < n`\n*   `0 <= rangei <= 105`\n*   `requirement.length == n`\n*   `0 <= requirement[i] <= 105`How can we find the brightness at every position on the street? We can use a hash table to store the change in brightness from the previous position to the current position.",
          "output": "def longest_palindrome(words):\n    from collections import defaultdict\n    dict = defaultdict(int)\n    result = 0\n    has_odd = False\n\n    for word in words:\n        dict[word[0]] += 1\n        dict[word[1]] += 1\n\n    for count in dict.values():\n        result += count // 2 * 2\n        has_odd |= count % 2\n\n    return result + has_odd\n"
     }
]