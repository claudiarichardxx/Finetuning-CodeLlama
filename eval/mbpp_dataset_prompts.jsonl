{"task_id": "MBPP/1", "prompt": "R = 3\r\nC = 3\r\n\ndef min_cost(cost, m, n):\n    '''\n    Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n    You need to pass these assertions:\n    assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\n    assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\n    assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16.\n    '''\n\n", "entry_point": "min_cost", "canonical_solution": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\n    assert candidate([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\n    assert candidate([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16\n"}
{"task_id": "MBPP/2", "prompt": "\ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the similar elements from the given two tuple lists.\n    You need to pass these assertions:\n    assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n    assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\n    assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14).\n    '''\n\n", "entry_point": "similar_elements", "canonical_solution": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n    assert candidate((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\n    assert candidate((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n"}
{"task_id": "MBPP/3", "prompt": "import math\r\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    You need to pass these assertions:\n    assert is_not_prime(2) == False\n    assert is_not_prime(10) == True\n    assert is_not_prime(35) == True.\n    '''\n\n", "entry_point": "is_not_prime", "canonical_solution": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n"}
{"task_id": "MBPP/4", "prompt": "import heapq as hq\r\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n    You need to pass these assertions:\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35].\n    '''\n\n", "entry_point": "heap_queue_largest", "canonical_solution": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n"}
{"task_id": "MBPP/5", "prompt": "\ndef count_ways(n):\n    '''\n    Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n    You need to pass these assertions:\n    assert count_ways(2) == 3\n    assert count_ways(8) == 153\n    assert count_ways(12) == 2131.\n    '''\n\n", "entry_point": "count_ways", "canonical_solution": "def count_ways(n): \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 3\n    assert candidate(8) == 153\n    assert candidate(12) == 2131\n"}
{"task_id": "MBPP/6", "prompt": "\ndef is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    You need to pass these assertions:\n    assert differ_At_One_Bit_Pos(13,9) == True\n    assert differ_At_One_Bit_Pos(15,8) == False\n    assert differ_At_One_Bit_Pos(2,4) == False.\n    '''\n\n", "entry_point": "is_Power_Of_Two ", "canonical_solution": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert differ_At_One_Bit_Pos(13,9) == True\n    assert differ_At_One_Bit_Pos(15,8) == False\n    assert differ_At_One_Bit_Pos(2,4) == False\n"}
{"task_id": "MBPP/7", "prompt": "import re\r\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\n    You need to pass these assertions:\n    assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n    assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\n    assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone'].\n    '''\n\n", "entry_point": "find_char_long", "canonical_solution": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n    assert candidate('Jing Eco and Tech') == ['Jing', 'Tech']\n    assert candidate('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']\n"}
{"task_id": "MBPP/8", "prompt": "\ndef square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list using lambda function.\n    You need to pass these assertions:\n    assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert square_nums([10,20,30])==([100,400,900])\n    assert square_nums([12,15])==([144,225]).\n    '''\n\n", "entry_point": "square_nums", "canonical_solution": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n"}
{"task_id": "MBPP/9", "prompt": "\ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations required to get the same string.\n    You need to pass these assertions:\n    assert find_Rotations(\"aaaa\") == 1\n    assert find_Rotations(\"ab\") == 2\n    assert find_Rotations(\"abc\") == 3.\n    '''\n\n", "entry_point": "find_Rotations", "canonical_solution": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n"}
{"task_id": "MBPP/10", "prompt": "import heapq\r\n\ndef small_nnum(list1,n):\n    '''\n    Write a function to get the n smallest items from a dataset.\n    You need to pass these assertions:\n    assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n    assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\n    assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20].\n    '''\n\n", "entry_point": "small_nnum", "canonical_solution": "import heapq\ndef small_nnum(list1,n):\n  smallest=heapq.nsmallest(n,list1)\n  return smallest", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]\n"}
