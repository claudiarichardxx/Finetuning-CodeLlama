{"task_id": "MBPP/11", "prompt": "'''Write a python function to remove first and last occurrence of a given character from the string. You need to pass these assertions:     assert remove_Occ(\"hello\",\"l\") == \"heo\"\n    assert remove_Occ(\"abcda\",\"a\") == \"bcd\"\n    assert remove_Occ(\"PHP\",\"P\") == \"H\".'''\n\n ", "entry_point": "remove_Occ", "canonical_solution": "    def remove_Occ(s,ch): \n        for i in range(len(s)): \n            if (s[i] == ch): \n                s = s[0 : i] + s[i + 1:] \n                break\n        for i in range(len(s) - 1,-1,-1):  \n            if (s[i] == ch): \n                s = s[0 : i] + s[i + 1:] \n                break\n        return s ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"hello\",\"l\") == \"heo\"\n    assert candidate(\"abcda\",\"a\") == \"bcd\"\n    assert candidate(\"PHP\",\"P\") == \"H\"\n"}
{"task_id": "MBPP/12", "prompt": "'''Write a function to sort a given matrix in ascending order according to the sum of its rows. You need to pass these assertions:     assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]].'''\n\n ", "entry_point": "sort_matrix", "canonical_solution": "    def sort_matrix(M):\n        result = sorted(M, key=sum)\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n"}
{"task_id": "MBPP/13", "prompt": "'''Write a function to count the most common words in a dictionary. You need to pass these assertions:     assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)].'''\n\n ", "entry_point": "count_common", "canonical_solution": "    from collections import Counter\n    def count_common(words):\n      word_counts = Counter(words)\n      top_four = word_counts.most_common(4)\n      return (top_four)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert candidate(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert candidate(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n"}
{"task_id": "MBPP/14", "prompt": "'''Write a python function to find the volume of a triangular prism. You need to pass these assertions:     assert find_Volume(10,8,6) == 240\n    assert find_Volume(3,2,2) == 6\n    assert find_Volume(1,2,1) == 1.'''\n\n ", "entry_point": "find_Volume", "canonical_solution": "    def find_Volume(l,b,h) : \n        return ((l * b * h) / 2) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n"}
{"task_id": "MBPP/15", "prompt": "'''Write a function to split a string at lowercase letters. You need to pass these assertions:     assert split_lowerstring(\"AbCd\")==['bC','d']\n    assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\n    assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g'].'''\n\n ", "entry_point": "split_lowerstring", "canonical_solution": "    import re\n    def split_lowerstring(text):\n     return (re.findall('[a-z][^a-z]*', text))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"AbCd\")==['bC','d']\n    assert candidate(\"Python\")==['y', 't', 'h', 'o', 'n']\n    assert candidate(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n"}
{"task_id": "MBPP/16", "prompt": "'''Write a function to find sequences of lowercase letters joined with an underscore. You need to pass these assertions:     assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n    assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!').'''\n\n ", "entry_point": "text_lowercase_underscore", "canonical_solution": "    import re\n    def text_lowercase_underscore(text):\n            patterns = '^[a-z]+_[a-z]+$'\n            if re.search(patterns,  text):\n                    return 'Found a match!'\n            else:\n                    return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\")==('Found a match!')\n    assert candidate(\"aab_Abbbc\")==('Not matched!')\n    assert candidate(\"Aaab_abbbc\")==('Not matched!')\n"}
{"task_id": "MBPP/17", "prompt": "'''Write a function to find the perimeter of a square. You need to pass these assertions:     assert square_perimeter(10)==40\n    assert square_perimeter(5)==20\n    assert square_perimeter(4)==16.'''\n\n ", "entry_point": "square_perimeter", "canonical_solution": "    def square_perimeter(a):\n      perimeter=4*a\n      return perimeter", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n"}
{"task_id": "MBPP/18", "prompt": "'''Write a function to remove characters from the first string which are present in the second string. You need to pass these assertions:     assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' .'''\n\n ", "entry_point": "str_to_list", "canonical_solution": "    NO_OF_CHARS = 256\n    def str_to_list(string): \n    \ttemp = [] \n    \tfor x in string: \n    \t\ttemp.append(x) \n    \treturn temp \n    def lst_to_string(List): \n    \treturn ''.join(List) \n    def get_char_count_array(string): \n    \tcount = [0] * NO_OF_CHARS \n    \tfor i in string: \n    \t\tcount[ord(i)] += 1\n    \treturn count \n    def remove_dirty_chars(string, second_string): \n    \tcount = get_char_count_array(second_string) \n    \tip_ind = 0\n    \tres_ind = 0\n    \ttemp = '' \n    \tstr_list = str_to_list(string) \n    \twhile ip_ind != len(str_list): \n    \t\ttemp = str_list[ip_ind] \n    \t\tif count[ord(temp)] == 0: \n    \t\t\tstr_list[res_ind] = str_list[ip_ind] \n    \t\t\tres_ind += 1\n    \t\tip_ind+=1\n    \treturn lst_to_string(str_list[0:res_ind]) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' \n"}
{"task_id": "MBPP/19", "prompt": "'''Write a function to find whether a given array of integers contains any duplicate element. You need to pass these assertions:     assert test_duplicate(([1,2,3,4,5]))==False\n    assert test_duplicate(([1,2,3,4, 4]))==True\n    assert test_duplicate([1,1,2,2,3,3,4,4,5])==True.'''\n\n ", "entry_point": "test_duplicate", "canonical_solution": "    def test_duplicate(arraynums):\n        nums_set = set(arraynums)    \n        return len(arraynums) != len(nums_set)     ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n"}
{"task_id": "MBPP/20", "prompt": "'''Write a function to check if the given number is woodball or not. You need to pass these assertions:     assert is_woodall(383) == True\n    assert is_woodall(254) == False\n    assert is_woodall(200) == False.'''\n\n ", "entry_point": "is_woodall", "canonical_solution": "    def is_woodall(x): \n    \tif (x % 2 == 0): \n    \t\treturn False\n    \tif (x == 1): \n    \t\treturn True\n    \tx = x + 1 \n    \tp = 0\n    \twhile (x % 2 == 0): \n    \t\tx = x/2\n    \t\tp = p + 1\n    \t\tif (p == x): \n    \t\t\treturn True\n    \treturn False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n"}
{"task_id": "MBPP/21", "prompt": "'''Write a function to find m number of multiples of n. You need to pass these assertions:     assert multiples_of_num(4,3)== [3,6,9,12]\n    assert multiples_of_num(2,5)== [5,10]\n    assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18].'''\n\n ", "entry_point": "multiples_of_num", "canonical_solution": "    def multiples_of_num(m,n): \n        multiples_of_num= list(range(n,(m+1)*n, n)) \n        return list(multiples_of_num)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,3)== [3,6,9,12]\n    assert candidate(2,5)== [5,10]\n    assert candidate(9,2)== [2,4,6,8,10,12,14,16,18]\n"}
{"task_id": "MBPP/22", "prompt": "'''Write a function to find the first duplicate element in a given array of integers. You need to pass these assertions:     assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n    assert find_first_duplicate([1, 2, 3, 4])==-1\n    assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1.'''\n\n ", "entry_point": "find_first_duplicate", "canonical_solution": "    def find_first_duplicate(nums):\n        num_set = set()\n        no_duplicate = -1\n    \n        for i in range(len(nums)):\n    \n            if nums[i] in num_set:\n                return nums[i]\n            else:\n                num_set.add(nums[i])\n    \n        return no_duplicate", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(([1, 2, 3, 4, 4, 5]))==4\n    assert candidate([1, 2, 3, 4])==-1\n    assert candidate([1, 1, 2, 3, 3, 2, 2])==1\n"}
{"task_id": "MBPP/23", "prompt": "'''Write a python function to find the maximum sum of elements of list in a list of lists. You need to pass these assertions:     assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19.'''\n\n ", "entry_point": "maximum_Sum", "canonical_solution": "    def maximum_Sum(list1): \n        maxi = -100000\n        for x in list1: \n            sum = 0 \n            for y in x: \n                sum+= y      \n            maxi = max(sum,maxi)     \n        return maxi ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert candidate([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert candidate([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19\n"}
{"task_id": "MBPP/24", "prompt": "'''Write a function to convert the given binary number to its decimal equivalent. You need to pass these assertions:     assert binary_to_decimal(100) == 4\n    assert binary_to_decimal(1011) == 11\n    assert binary_to_decimal(1101101) == 109.'''\n\n ", "entry_point": "binary_to_decimal", "canonical_solution": "    def binary_to_decimal(binary): \n        binary1 = binary \n        decimal, i, n = 0, 0, 0\n        while(binary != 0): \n            dec = binary % 10\n            decimal = decimal + dec * pow(2, i) \n            binary = binary//10\n            i += 1\n        return (decimal)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(100) == 4\n    assert candidate(1011) == 11\n    assert candidate(1101101) == 109\n"}
{"task_id": "MBPP/25", "prompt": "'''Write a python function to find the product of non-repeated elements in a given array. You need to pass these assertions:     assert find_Product([1,1,2,3],4) == 6\n    assert find_Product([1,2,3,1,1],5) == 6\n    assert find_Product([1,1,4,5,6],5) == 120.'''\n\n ", "entry_point": "find_Product", "canonical_solution": "    def find_Product(arr,n): \n        arr.sort() \n        prod = 1\n        for i in range(0,n,1): \n            if (arr[i - 1] != arr[i]): \n                prod = prod * arr[i] \n        return prod; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,1,2,3],4) == 6\n    assert candidate([1,2,3,1,1],5) == 6\n    assert candidate([1,1,4,5,6],5) == 120\n"}
{"task_id": "MBPP/26", "prompt": "'''Write a function to check if the given tuple list has all k elements. You need to pass these assertions:     assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\n    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False.'''\n\n ", "entry_point": "check_k_elements", "canonical_solution": "    def check_k_elements(test_list, K):\n      res = True\n      for tup in test_list:\n        for ele in tup:\n          if ele != K:\n            res = False\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert candidate([(7, 7, 7), (7, 7)], 7) == True\n    assert candidate([(9, 9), (9, 9, 9, 9)], 7) == False\n"}
{"task_id": "MBPP/27", "prompt": "'''Write a python function to remove all digits from a list of strings. You need to pass these assertions:     assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n    assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder'].'''\n\n ", "entry_point": "remove", "canonical_solution": "    import re  \n    def remove(list): \n        pattern = '[0-9]'\n        list = [re.sub(pattern, '', i) for i in list] \n        return list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert candidate(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n    assert candidate(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']\n"}
{"task_id": "MBPP/28", "prompt": "'''Write a python function to find binomial co-efficient. You need to pass these assertions:     assert binomial_Coeff(5,2) == 10\n    assert binomial_Coeff(4,3) == 4\n    assert binomial_Coeff(3,2) == 3.'''\n\n ", "entry_point": "binomial_Coeff", "canonical_solution": "    def binomial_Coeff(n,k): \n        if k > n : \n           return 0\n        if k==0 or k ==n : \n            return 1 \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,2) == 10\n    assert candidate(4,3) == 4\n    assert candidate(3,2) == 3\n"}
{"task_id": "MBPP/29", "prompt": "'''Write a python function to find the element occurring odd number of times. You need to pass these assertions:     assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n    assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\n    assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5.'''\n\n ", "entry_point": "get_Odd_Occurrence", "canonical_solution": "    def get_Odd_Occurrence(arr,arr_size):   \n        for i in range(0,arr_size): \n            count = 0\n            for j in range(0,arr_size): \n                if arr[i] == arr[j]: \n                    count+=1     \n            if (count % 2 != 0): \n                return arr[i]     \n        return -1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,1,2,3,1],7) == 1\n    assert candidate([1,2,3,2,3,1,3],7) == 3\n    assert candidate([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5\n"}
{"task_id": "MBPP/30", "prompt": "'''Write a python function to count all the substrings starting and ending with same characters. You need to pass these assertions:     assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abcda\") == 6\n    assert count_Substring_With_Equal_Ends(\"ab\") == 2.'''\n\n ", "entry_point": "check_Equality", "canonical_solution": "    def check_Equality(s): \n        return (ord(s[0]) == ord(s[len(s) - 1])); \n    def count_Substring_With_Equal_Ends(s): \n        result = 0; \n        n = len(s); \n        for i in range(n): \n            for j in range(1,n-i+1):  \n                if (check_Equality(s[i:i+j])): \n                    result+=1; \n        return result; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abcda\") == 6\n    assert count_Substring_With_Equal_Ends(\"ab\") == 2\n"}
{"task_id": "MBPP/31", "prompt": "'''Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm. You need to pass these assertions:     assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1].'''\n\n ", "entry_point": "func", "canonical_solution": "    def func(nums, k):\n        import collections\n        d = collections.defaultdict(int)\n        for row in nums:\n            for i in row:\n                d[i] += 1\n        temp = []\n        import heapq\n        for key, v in d.items():\n            if len(temp) < k:\n                temp.append((v, key))\n                if len(temp) == k:\n                    heapq.heapify(temp)\n            else:\n                if v > temp[0][0]:\n                    heapq.heappop(temp)\n                    heapq.heappush(temp, (v, key))\n        result = []\n        while temp:\n            v, key = heapq.heappop(temp)\n            result.append(key)\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]\n"}
{"task_id": "MBPP/32", "prompt": "'''Write a python function to find the largest prime factor of a given number. You need to pass these assertions:     assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(6) == 3\n    assert max_Prime_Factors(2) == 2.'''\n\n ", "entry_point": "max_Prime_Factors ", "canonical_solution": "    import math \n    def max_Prime_Factors (n): \n        maxPrime = -1 \n        while n%2 == 0: \n            maxPrime = 2\n            n >>= 1    \n        for i in range(3,int(math.sqrt(n))+1,2): \n            while n % i == 0: \n                maxPrime = i \n                n = n / i \n        if n > 2: \n            maxPrime = n  \n        return int(maxPrime)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(6) == 3\n    assert max_Prime_Factors(2) == 2\n"}
{"task_id": "MBPP/33", "prompt": "'''Write a python function to convert a decimal number to binary number. You need to pass these assertions:     assert decimal_To_Binary(10) == 1010\n    assert decimal_To_Binary(1) == 1\n    assert decimal_To_Binary(20) == 10100.'''\n\n ", "entry_point": "decimal_To_Binary", "canonical_solution": "    def decimal_To_Binary(N): \n        B_Number = 0\n        cnt = 0\n        while (N != 0): \n            rem = N % 2\n            c = pow(10,cnt)  \n            B_Number += rem*c  \n            N //= 2 \n            cnt += 1\n        return B_Number  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 1010\n    assert candidate(1) == 1\n    assert candidate(20) == 10100\n"}
{"task_id": "MBPP/34", "prompt": "'''Write a python function to find the missing number in a sorted array. You need to pass these assertions:     assert find_missing([1,2,3,5],4) == 4\n    assert find_missing([1,3,4,5],4) == 2\n    assert find_missing([1,2,3,5,6,7],5) == 4.'''\n\n ", "entry_point": "find_missing", "canonical_solution": "    def find_missing(ar,N): \n        l = 0\n        r = N - 1\n        while (l <= r):  \n            mid = (l + r) / 2\n            mid= int (mid) \n            if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n                return (mid + 1)  \n            elif (ar[mid] != mid + 1): \n                r = mid - 1 \n            else: \n                l = mid + 1\n        return (-1) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,5],4) == 4\n    assert candidate([1,3,4,5],4) == 2\n    assert candidate([1,2,3,5,6,7],5) == 4\n"}
{"task_id": "MBPP/35", "prompt": "'''Write a function to find the n-th rectangular number. You need to pass these assertions:     assert find_rect_num(4) == 20\n    assert find_rect_num(5) == 30\n    assert find_rect_num(6) == 42.'''\n\n ", "entry_point": "find_rect_num", "canonical_solution": "    def find_rect_num(n):\n      return n*(n + 1) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4) == 20\n    assert candidate(5) == 30\n    assert candidate(6) == 42\n"}
{"task_id": "MBPP/36", "prompt": "'''Write a python function to find the nth digit in the proper fraction of two given numbers. You need to pass these assertions:     assert find_Nth_Digit(1,2,1) == 5\n    assert find_Nth_Digit(3,5,1) == 6\n    assert find_Nth_Digit(5,6,5) == 3.'''\n\n ", "entry_point": "find_Nth_Digit", "canonical_solution": "    def find_Nth_Digit(p,q,N) :  \n        while (N > 0) : \n            N -= 1;  \n            p *= 10;  \n            res = p // q;  \n            p %= q;  \n        return res;  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,2,1) == 5\n    assert candidate(3,5,1) == 6\n    assert candidate(5,6,5) == 3\n"}
{"task_id": "MBPP/37", "prompt": "'''Write a function to sort a given mixed list of integers and strings. You need to pass these assertions:     assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white'].'''\n\n ", "entry_point": "sort_mixed_list", "canonical_solution": "    def sort_mixed_list(mixed_list):\n        int_part = sorted([i for i in mixed_list if type(i) is int])\n        str_part = sorted([i for i in mixed_list if type(i) is str])\n        return int_part + str_part", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n"}
{"task_id": "MBPP/38", "prompt": "'''Write a function to find the division of first even and odd number of a given list. You need to pass these assertions:     assert div_even_odd([1,3,5,7,4,1,6,8])==4\n    assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n    assert div_even_odd([1,5,7,9,10])==10.'''\n\n ", "entry_point": "div_even_odd", "canonical_solution": "    def div_even_odd(list1):\n        first_even = next((el for el in list1 if el%2==0),-1)\n        first_odd = next((el for el in list1 if el%2!=0),-1)\n        return (first_even/first_odd)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n"}
{"task_id": "MBPP/39", "prompt": "'''Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different. You need to pass these assertions:     assert rearange_string(\"aab\")==('aba')\n    assert rearange_string(\"aabb\")==('abab')\n    assert rearange_string(\"abccdd\")==('cdabcd').'''\n\n ", "entry_point": "rearange_string", "canonical_solution": "    import heapq\n    from collections import Counter\n    def rearange_string(S):\n        ctr = Counter(S)\n        heap = [(-value, key) for key, value in ctr.items()]\n        heapq.heapify(heap)\n        if (-heap[0][0]) * 2 > len(S) + 1: \n            return \"\"\n        ans = []\n        while len(heap) >= 2:\n            nct1, char1 = heapq.heappop(heap)\n            nct2, char2 = heapq.heappop(heap)\n            ans.extend([char1, char2])\n            if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n            if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n        return \"\".join(ans) + (heap[0][1] if heap else \"\")", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"aab\")==('aba')\n    assert candidate(\"aabb\")==('abab')\n    assert candidate(\"abccdd\")==('cdabcd')\n"}
{"task_id": "MBPP/40", "prompt": "'''Write a function to find frequency of the elements in a given list of lists using collections module. You need to pass these assertions:     assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}).'''\n\n ", "entry_point": "freq_element", "canonical_solution": "    from collections import Counter\n    from itertools import chain\n    def freq_element(nums):\n      result = Counter(chain.from_iterable(nums))\n      return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n    assert candidate([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\n"}
{"task_id": "MBPP/41", "prompt": "'''Write a function to filter even numbers using lambda function. You need to pass these assertions:     assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\n    assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4].'''\n\n ", "entry_point": "filter_evennumbers", "canonical_solution": "    def filter_evennumbers(nums):\n     even_nums = list(filter(lambda x: x%2 == 0, nums))\n     return even_nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    assert candidate([10,20,45,67,84,93])==[10,20,84]\n    assert candidate([5,7,9,8,6,4,3])==[8,6,4]\n"}
{"task_id": "MBPP/42", "prompt": "'''Write a python function to find the sum of repeated elements in a given array. You need to pass these assertions:     assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n    assert find_Sum([1,2,3,1,1],5) == 3\n    assert find_Sum([1,1,2],3) == 2.'''\n\n ", "entry_point": "find_Sum", "canonical_solution": "    def find_Sum(arr,n): \n        return sum([x for x in arr if arr.count(x) > 1])", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,1,1,4,5,6],8) == 3\n    assert candidate([1,2,3,1,1],5) == 3\n    assert candidate([1,1,2],3) == 2\n"}
{"task_id": "MBPP/43", "prompt": "'''Write a function to find sequences of lowercase letters joined with an underscore using regex. You need to pass these assertions:     assert text_match(\"aab_cbbbc\") == 'Found a match!'\n    assert text_match(\"aab_Abbbc\") == 'Not matched!'\n    assert text_match(\"Aaab_abbbc\") == 'Not matched!'.'''\n\n ", "entry_point": "text_match", "canonical_solution": "    import re\n    def text_match(text):\n      patterns = '^[a-z]+_[a-z]+$'\n      if re.search(patterns,  text):\n        return ('Found a match!')\n      else:\n        return ('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\") == 'Found a match!'\n    assert candidate(\"aab_Abbbc\") == 'Not matched!'\n    assert candidate(\"Aaab_abbbc\") == 'Not matched!'\n"}
{"task_id": "MBPP/44", "prompt": "'''Write a function that matches a word at the beginning of a string. You need to pass these assertions:     assert text_match_string(\" python\")==('Not matched!')\n    assert text_match_string(\"python\")==('Found a match!')\n    assert text_match_string(\"  lang\")==('Not matched!').'''\n\n ", "entry_point": "text_match_string", "canonical_solution": "    import re\n    def text_match_string(text):\n            patterns = '^\\w+'\n            if re.search(patterns,  text):\n                    return 'Found a match!'\n            else:\n                    return 'Not matched!'", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\" python\")==('Not matched!')\n    assert candidate(\"python\")==('Found a match!')\n    assert candidate(\"  lang\")==('Not matched!')\n"}
{"task_id": "MBPP/45", "prompt": "'''Write a function to find the gcd of the given array elements. You need to pass these assertions:     assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([2, 4, 6, 8]) == 2 .'''\n\n ", "entry_point": "find_gcd", "canonical_solution": "    def find_gcd(x, y): \n    \twhile(y): \n    \t\tx, y = y, x % y \n    \treturn x \n    def get_gcd(l):\n      num1 = l[0]\n      num2 = l[1]\n      gcd = find_gcd(num1, num2)\n      for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n      return gcd", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([2, 4, 6, 8]) == 2 \n"}
{"task_id": "MBPP/46", "prompt": "'''Write a python function to determine whether all the numbers are different from each other are not. You need to pass these assertions:     assert test_distinct([1,5,7,9]) == True\n    assert test_distinct([2,4,5,5,7,9]) == False\n    assert test_distinct([1,2,3]) == True.'''\n\n ", "entry_point": "test_distinct", "canonical_solution": "    def test_distinct(data):\n      if len(data) == len(set(data)):\n        return True\n      else:\n        return False;", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,5,7,9]) == True\n    assert candidate([2,4,5,5,7,9]) == False\n    assert candidate([1,2,3]) == True\n"}
{"task_id": "MBPP/47", "prompt": "'''Write a python function to find the last digit when factorial of a divides factorial of b. You need to pass these assertions:     assert compute_Last_Digit(2,4) == 2\n    assert compute_Last_Digit(6,8) == 6\n    assert compute_Last_Digit(1,2) == 2.'''\n\n ", "entry_point": "compute_Last_Digit", "canonical_solution": "    def compute_Last_Digit(A,B): \n        variable = 1\n        if (A == B): \n            return 1\n        elif ((B - A) >= 5):  \n            return 0\n        else:   \n            for i in range(A + 1,B + 1): \n                variable = (variable * (i % 10)) % 10\n            return variable % 10", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2,4) == 2\n    assert candidate(6,8) == 6\n    assert candidate(1,2) == 2\n"}
{"task_id": "MBPP/48", "prompt": "'''Write a python function to set all odd bits of a given number. You need to pass these assertions:     assert odd_bit_set_number(10) == 15\n    assert odd_bit_set_number(20) == 21\n    assert odd_bit_set_number(30) == 31.'''\n\n ", "entry_point": "odd_bit_set_number", "canonical_solution": "    def odd_bit_set_number(n):\n        count = 0;res = 0;temp = n\n        while temp > 0:\n            if count % 2 == 0:\n                res |= (1 << count)\n            count += 1\n            temp >>= 1\n        return (n | res)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 21\n    assert candidate(30) == 31\n"}
{"task_id": "MBPP/49", "prompt": "'''Write a function to extract every first or specified element from a given two-dimensional list. You need to pass these assertions:     assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1].'''\n\n ", "entry_point": "specified_element", "canonical_solution": "    def specified_element(nums, N):\n        result = [i[N] for i in nums]\n        return result\n        ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]\n"}
{"task_id": "MBPP/50", "prompt": "'''Write a function to find the list with minimum length using lambda function. You need to pass these assertions:     assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n    assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2]).'''\n\n ", "entry_point": "min_length_list", "canonical_solution": "    def min_length_list(input_list):\n        min_length = min(len(x) for x in input_list )  \n        min_list = min(input_list, key = lambda i: len(i))\n        return(min_length, min_list)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])\n"}
{"task_id": "MBPP/51", "prompt": "'''Write a function to print check if the triangle is equilateral or not. You need to pass these assertions:     assert check_equilateral(6,8,12)==False \n    assert check_equilateral(6,6,12)==False\n    assert check_equilateral(6,6,6)==True.'''\n\n ", "entry_point": "check_equilateral", "canonical_solution": "    def check_equilateral(x,y,z):\n      if x == y == z:\n    \t   return True\n      else:\n         return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(6,8,12)==False \n    assert candidate(6,6,12)==False\n    assert candidate(6,6,6)==True\n"}
{"task_id": "MBPP/52", "prompt": "'''Write a function to caluclate area of a parallelogram. You need to pass these assertions:     assert parallelogram_area(10,20)==200\n    assert parallelogram_area(15,20)==300\n    assert parallelogram_area(8,9)==72.'''\n\n ", "entry_point": "parallelogram_area", "canonical_solution": "    def parallelogram_area(b,h):\n      area=b*h\n      return area", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(15,20)==300\n    assert candidate(8,9)==72\n"}
{"task_id": "MBPP/53", "prompt": "'''Write a python function to check whether the first and last characters of a given string are equal or not. You need to pass these assertions:     assert check_Equality(\"abcda\") == \"Equal\"\n    assert check_Equality(\"ab\") == \"Not Equal\"\n    assert check_Equality(\"mad\") == \"Not Equal\".'''\n\n ", "entry_point": "check_Equality", "canonical_solution": "    def check_Equality(str):\n      if (str[0] == str[-1]):  \n        return (\"Equal\") \n      else:  \n        return (\"Not Equal\") ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"abcda\") == \"Equal\"\n    assert candidate(\"ab\") == \"Not Equal\"\n    assert candidate(\"mad\") == \"Not Equal\"\n"}
{"task_id": "MBPP/54", "prompt": "'''Write a function to sort the given array by using counting sort. You need to pass these assertions:     assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n    assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14].'''\n\n ", "entry_point": "counting_sort", "canonical_solution": "    def counting_sort(my_list):\n        max_value = 0\n        for i in range(len(my_list)):\n            if my_list[i] > max_value:\n                max_value = my_list[i]\n        buckets = [0] * (max_value + 1)\n        for i in my_list:\n            buckets[i] += 1\n        i = 0\n        for j in range(max_value + 1):\n             for a in range(buckets[j]):\n                 my_list[i] = j\n                 i += 1\n        return my_list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    assert candidate([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n    assert candidate([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\n"}
{"task_id": "MBPP/55", "prompt": "'''Write a function to find t-nth term of geometric series. You need to pass these assertions:     assert tn_gp(1,5,2)==16\n    assert tn_gp(1,5,4)==256\n    assert tn_gp(2,6,3)==486.'''\n\n ", "entry_point": "tn_gp", "canonical_solution": "    import math\n    def tn_gp(a,n,r):\n      tn = a * (math.pow(r, n - 1))\n      return tn", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,5,2)==16\n    assert candidate(1,5,4)==256\n    assert candidate(2,6,3)==486\n"}
{"task_id": "MBPP/56", "prompt": "'''Write a python function to check if a given number is one less than twice its reverse. You need to pass these assertions:     assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True.'''\n\n ", "entry_point": "rev", "canonical_solution": "    def rev(num):    \n        rev_num = 0\n        while (num > 0):  \n            rev_num = (rev_num * 10 + num % 10) \n            num = num // 10  \n        return rev_num  \n    def check(n):    \n        return (2 * rev(n) == n + 1)  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True\n"}
{"task_id": "MBPP/57", "prompt": "'''Write a python function to find the largest number that can be formed with the given digits. You need to pass these assertions:     assert find_Max_Num([1,2,3],3) == 321\n    assert find_Max_Num([4,5,6,1],4) == 6541\n    assert find_Max_Num([1,2,3,9],4) == 9321.'''\n\n ", "entry_point": "find_Max_Num", "canonical_solution": "    def find_Max_Num(arr,n) : \n        arr.sort(reverse = True) \n        num = arr[0] \n        for i in range(1,n) : \n            num = num * 10 + arr[i] \n        return num ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3],3) == 321\n    assert candidate([4,5,6,1],4) == 6541\n    assert candidate([1,2,3,9],4) == 9321\n"}
{"task_id": "MBPP/58", "prompt": "'''Write a python function to check whether the given two integers have opposite sign or not. You need to pass these assertions:     assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(3,2) == False\n    assert opposite_Signs(-10,-10) == False.'''\n\n ", "entry_point": "opposite_Signs", "canonical_solution": "    def opposite_Signs(x,y): \n        return ((x ^ y) < 0); ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n"}
{"task_id": "MBPP/59", "prompt": "'''Write a function to find the nth octagonal number. You need to pass these assertions:     assert is_octagonal(5) == 65\n    assert is_octagonal(10) == 280\n    assert is_octagonal(15) == 645.'''\n\n ", "entry_point": "is_octagonal", "canonical_solution": "    def is_octagonal(n): \n    \treturn 3 * n * n - 2 * n ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n"}
{"task_id": "MBPP/60", "prompt": "'''Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array. You need to pass these assertions:     assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n    assert max_len_sub([9, 11, 13, 15, 18], 5) == 1.'''\n\n ", "entry_point": "max_len_sub", "canonical_solution": "    def max_len_sub( arr, n): \n    \tmls=[] \n    \tmax = 0\n    \tfor i in range(n): \n    \t\tmls.append(1) \n    \tfor i in range(n): \n    \t\tfor j in range(i): \n    \t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n    \t\t\t\tmls[i] = mls[j] + 1\n    \tfor i in range(n): \n    \t\tif (max < mls[i]): \n    \t\t\tmax = mls[i] \n    \treturn max", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert candidate([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n    assert candidate([9, 11, 13, 15, 18], 5) == 1\n"}
{"task_id": "MBPP/61", "prompt": "'''Write a python function to count number of substrings with the sum of digits equal to their length. You need to pass these assertions:     assert count_Substrings('112112',6) == 6\n    assert count_Substrings('111',3) == 6\n    assert count_Substrings('1101112',7) == 12.'''\n\n ", "entry_point": "count_Substrings", "canonical_solution": "    from collections import defaultdict\n    def count_Substrings(s,n):\n        count,sum = 0,0\n        mp = defaultdict(lambda : 0)\n        mp[0] += 1\n        for i in range(n):\n            sum += ord(s[i]) - ord('0')\n            count += mp[sum - (i + 1)]\n            mp[sum - (i + 1)] += 1\n        return count", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('112112',6) == 6\n    assert candidate('111',3) == 6\n    assert candidate('1101112',7) == 12\n"}
{"task_id": "MBPP/62", "prompt": "'''Write a python function to find smallest number in a list. You need to pass these assertions:     assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([1, 2, 3]) == 1\n    assert smallest_num([45, 46, 50, 60]) == 45.'''\n\n ", "entry_point": "smallest_num", "canonical_solution": "    def smallest_num(xs):\n      return min(xs)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n"}
{"task_id": "MBPP/63", "prompt": "'''Write a function to find the maximum difference between available pairs in the given tuple list. You need to pass these assertions:     assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23.'''\n\n ", "entry_point": "max_difference", "canonical_solution": "    def max_difference(test_list):\n      temp = [abs(b - a) for a, b in test_list]\n      res = max(temp)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n"}
{"task_id": "MBPP/64", "prompt": "'''Write a function to sort a list of tuples using lambda. You need to pass these assertions:     assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)]).'''\n\n ", "entry_point": "subject_marks", "canonical_solution": "    def subject_marks(subjectmarks):\n    #subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n     subjectmarks.sort(key = lambda x: x[1])\n     return subjectmarks", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n"}
{"task_id": "MBPP/65", "prompt": "'''Write a function of recursion list sum. You need to pass these assertions:     assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n    assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210.'''\n\n ", "entry_point": "recursive_list_sum", "canonical_solution": "    def recursive_list_sum(data_list):\n    \ttotal = 0\n    \tfor element in data_list:\n    \t\tif type(element) == type([]):\n    \t\t\ttotal = total + recursive_list_sum(element)\n    \t\telse:\n    \t\t\ttotal = total + element\n    \treturn total", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n"}
{"task_id": "MBPP/66", "prompt": "'''Write a python function to count positive numbers in a list. You need to pass these assertions:     assert pos_count([1,-2,3,-4]) == 2\n    assert pos_count([3,4,5,-1]) == 3\n    assert pos_count([1,2,3,4]) == 4.'''\n\n ", "entry_point": "pos_count", "canonical_solution": "    def pos_count(list):\n      pos_count= 0\n      for num in list: \n        if num >= 0: \n          pos_count += 1\n      return pos_count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n"}
{"task_id": "MBPP/67", "prompt": "'''Write a function to find the number of ways to partition a set of bell numbers. You need to pass these assertions:     assert bell_number(2)==2\n    assert bell_number(10)==115975\n    assert bell_number(56)==6775685320645824322581483068371419745979053216268760300.'''\n\n ", "entry_point": "bell_number", "canonical_solution": "    def bell_number(n):   \n        bell = [[0 for i in range(n+1)] for j in range(n+1)] \n        bell[0][0] = 1\n        for i in range(1, n+1): \n            bell[i][0] = bell[i-1][i-1]  \n            for j in range(1, i+1): \n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n        return bell[n][0] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n"}
{"task_id": "MBPP/68", "prompt": "'''Write a python function to check whether the given array is monotonic or not. You need to pass these assertions:     assert is_Monotonic([6, 5, 4, 4]) == True\n    assert is_Monotonic([1, 2, 2, 3]) == True\n    assert is_Monotonic([1, 3, 2]) == False.'''\n\n ", "entry_point": "is_Monotonic", "canonical_solution": "    def is_Monotonic(A): \n        return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n                all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n"}
{"task_id": "MBPP/69", "prompt": "'''Write a function to check whether a list contains the given sublist or not. You need to pass these assertions:     assert is_sublist([2,4,3,5,7],[3,7])==False\n    assert is_sublist([2,4,3,5,7],[4,3])==True\n    assert is_sublist([2,4,3,5,7],[1,6])==False.'''\n\n ", "entry_point": "is_sublist", "canonical_solution": "    def is_sublist(l, s):\n    \tsub_set = False\n    \tif s == []:\n    \t\tsub_set = True\n    \telif s == l:\n    \t\tsub_set = True\n    \telif len(s) > len(l):\n    \t\tsub_set = False\n    \telse:\n    \t\tfor i in range(len(l)):\n    \t\t\tif l[i] == s[0]:\n    \t\t\t\tn = 1\n    \t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n    \t\t\t\t\tn += 1\t\t\t\t\n    \t\t\t\tif n == len(s):\n    \t\t\t\t\tsub_set = True\n    \treturn sub_set", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2,4,3,5,7],[3,7])==False\n    assert candidate([2,4,3,5,7],[4,3])==True\n    assert candidate([2,4,3,5,7],[1,6])==False\n"}
{"task_id": "MBPP/70", "prompt": "'''Write a function to find whether all the given tuples have equal length or not. You need to pass these assertions:     assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'.'''\n\n ", "entry_point": "find_equal_tuple", "canonical_solution": "    def find_equal_tuple(Input, k):\n      flag = 1\n      for tuple in Input:\n        if len(tuple) != k:\n          flag = 0\n          break\n      return flag\n    def get_equal(Input, k):\n      if find_equal_tuple(Input, k) == 1:\n        return (\"All tuples have same length\")\n      else:\n        return (\"All tuples do not have same length\")", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n"}
{"task_id": "MBPP/71", "prompt": "'''Write a function to sort a list of elements using comb sort. You need to pass these assertions:     assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99].'''\n\n ", "entry_point": "comb_sort", "canonical_solution": "    def comb_sort(nums):\n        shrink_fact = 1.3\n        gaps = len(nums)\n        swapped = True\n        i = 0\n        while gaps > 1 or swapped:\n            gaps = int(float(gaps) / shrink_fact)\n            swapped = False\n            i = 0\n            while gaps + i < len(nums):\n                if nums[i] > nums[i+gaps]:\n                    nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                    swapped = True\n                i += 1\n        return nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n"}
{"task_id": "MBPP/72", "prompt": "'''Write a python function to check whether the given number can be represented as difference of two squares or not. You need to pass these assertions:     assert dif_Square(5) == True\n    assert dif_Square(10) == False\n    assert dif_Square(15) == True.'''\n\n ", "entry_point": "dif_Square", "canonical_solution": "    def dif_Square(n): \n        if (n % 4 != 2): \n            return True\n        return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n"}
{"task_id": "MBPP/73", "prompt": "'''Write a function to split the given string with multiple delimiters by using regex. You need to pass these assertions:     assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.'].'''\n\n ", "entry_point": "multiple_split", "canonical_solution": "    import re\n    def multiple_split(text):\n      return (re.split('; |, |\\*|\\n',text))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert candidate('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    assert candidate('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n"}
{"task_id": "MBPP/74", "prompt": "'''Write a function to check whether it follows the sequence given in the patterns array. You need to pass these assertions:     assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False .'''\n\n ", "entry_point": "is_samepatterns", "canonical_solution": "    def is_samepatterns(colors, patterns):    \n        if len(colors) != len(patterns):\n            return False    \n        sdict = {}\n        pset = set()\n        sset = set()    \n        for i in range(len(patterns)):\n            pset.add(patterns[i])\n            sset.add(colors[i])\n            if patterns[i] not in sdict.keys():\n                sdict[patterns[i]] = []\n    \n            keys = sdict[patterns[i]]\n            keys.append(colors[i])\n            sdict[patterns[i]] = keys\n    \n        if len(pset) != len(sset):\n            return False   \n    \n        for values in sdict.values():\n    \n            for i in range(len(values) - 1):\n                if values[i] != values[i+1]:\n                    return False\n    \n        return True", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False \n"}
{"task_id": "MBPP/75", "prompt": "'''Write a function to find tuples which have all elements divisible by k from the given list of tuples. You need to pass these assertions:     assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'.'''\n\n ", "entry_point": "find_tuples", "canonical_solution": "    def find_tuples(test_list, K):\n      res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n      return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'\n"}
{"task_id": "MBPP/76", "prompt": "'''Write a python function to count the number of squares in a rectangle. You need to pass these assertions:     assert count_Squares(4,3) == 20\n    assert count_Squares(2,2) == 5\n    assert count_Squares(1,1) == 1.'''\n\n ", "entry_point": "count_Squares", "canonical_solution": "    def count_Squares(m,n):\n        if(n < m):\n            temp = m\n            m = n\n            n = temp\n        return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,3) == 20\n    assert candidate(2,2) == 5\n    assert candidate(1,1) == 1\n"}
{"task_id": "MBPP/77", "prompt": "'''Write a python function to find the difference between sum of even and odd digits. You need to pass these assertions:     assert is_Diff (12345) == False\n    assert is_Diff(1212112) == True\n    assert is_Diff(1212) == False.'''\n\n ", "entry_point": "is_Diff", "canonical_solution": "    def is_Diff(n): \n        return (n % 11 == 0) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n"}
{"task_id": "MBPP/78", "prompt": "'''Write a python function to find number of integers with odd number of set bits. You need to pass these assertions:     assert count_With_Odd_SetBits(5) == 3\n    assert count_With_Odd_SetBits(10) == 5\n    assert count_With_Odd_SetBits(15) == 8.'''\n\n ", "entry_point": "count_With_Odd_SetBits", "canonical_solution": "    def count_With_Odd_SetBits(n): \n        if (n % 2 != 0): \n            return (n + 1) / 2\n        count = bin(n).count('1') \n        ans = n / 2\n        if (count % 2 != 0): \n            ans += 1\n        return ans ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == 3\n    assert candidate(10) == 5\n    assert candidate(15) == 8\n"}
{"task_id": "MBPP/79", "prompt": "'''Write a python function to check whether the length of the word is odd or not. You need to pass these assertions:     assert word_len(\"Hadoop\") == False\n    assert word_len(\"great\") == True\n    assert word_len(\"structure\") == True.'''\n\n ", "entry_point": "word_len", "canonical_solution": "    def word_len(s): \n        s = s.split(' ')   \n        for word in s:    \n            if len(word)%2!=0: \n                return True  \n            else:\n              return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n"}
{"task_id": "MBPP/80", "prompt": "'''Write a function to find the nth tetrahedral number. You need to pass these assertions:     assert tetrahedral_number(5) == 35.0\n    assert tetrahedral_number(6) == 56.0\n    assert tetrahedral_number(7) == 84.0.'''\n\n ", "entry_point": "tetrahedral_number", "canonical_solution": "    def tetrahedral_number(n): \n    \treturn (n * (n + 1) * (n + 2)) / 6", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == 35.0\n    assert candidate(6) == 56.0\n    assert candidate(7) == 84.0\n"}
{"task_id": "MBPP/81", "prompt": "'''Write a function to zip the two given tuples. You need to pass these assertions:     assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)].'''\n\n ", "entry_point": "zip_tuples", "canonical_solution": "    def zip_tuples(test_tup1, test_tup2):\n      res = []\n      for i, j in enumerate(test_tup1):\n        res.append((j, test_tup2[i % len(test_tup2)])) \n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert candidate((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert candidate((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n"}
{"task_id": "MBPP/82", "prompt": "'''Write a function to find the volume of a sphere. You need to pass these assertions:     assert volume_sphere(10)==4188.790204786391\n    assert volume_sphere(25)==65449.84694978735\n    assert volume_sphere(20)==33510.32163829113.'''\n\n ", "entry_point": "volume_sphere", "canonical_solution": "    import math\n    def volume_sphere(r):\n      volume=(4/3)*math.pi*r*r*r\n      return volume", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10)==4188.790204786391\n    assert candidate(25)==65449.84694978735\n    assert candidate(20)==33510.32163829113\n"}
{"task_id": "MBPP/83", "prompt": "'''Write a python function to find the character made by adding all the characters of the given string. You need to pass these assertions:     assert get_Char(\"abc\") == \"f\"\n    assert get_Char(\"gfg\") == \"t\"\n    assert get_Char(\"ab\") == \"c\".'''\n\n ", "entry_point": "get_Char", "canonical_solution": "    def get_Char(strr):  \n        summ = 0\n        for i in range(len(strr)): \n            summ += (ord(strr[i]) - ord('a') + 1)  \n        if (summ % 26 == 0): \n            return ord('z') \n        else: \n            summ = summ % 26\n            return chr(ord('a') + summ - 1)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"abc\") == \"f\"\n    assert candidate(\"gfg\") == \"t\"\n    assert candidate(\"ab\") == \"c\"\n"}
{"task_id": "MBPP/84", "prompt": "'''Write a function to find the n-th number in newman conway sequence. You need to pass these assertions:     assert sequence(10) == 6\n    assert sequence(2) == 1\n    assert sequence(3) == 2.'''\n\n ", "entry_point": "sequence", "canonical_solution": "    def sequence(n): \n    \tif n == 1 or n == 2: \n    \t\treturn 1\n    \telse: \n    \t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n"}
{"task_id": "MBPP/85", "prompt": "'''Write a function to find the surface area of a sphere. You need to pass these assertions:     assert surfacearea_sphere(10)==1256.6370614359173\n    assert surfacearea_sphere(15)==2827.4333882308138\n    assert surfacearea_sphere(20)==5026.548245743669.'''\n\n ", "entry_point": "surfacearea_sphere", "canonical_solution": "    import math\n    def surfacearea_sphere(r):\n      surfacearea=4*math.pi*r*r\n      return surfacearea", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10)==1256.6370614359173\n    assert candidate(15)==2827.4333882308138\n    assert candidate(20)==5026.548245743669\n"}
{"task_id": "MBPP/86", "prompt": "'''Write a function to find nth centered hexagonal number. You need to pass these assertions:     assert centered_hexagonal_number(10) == 271\n    assert centered_hexagonal_number(2) == 7\n    assert centered_hexagonal_number(9) == 217.'''\n\n ", "entry_point": "centered_hexagonal_number", "canonical_solution": "    def centered_hexagonal_number(n):\n      return 3 * n * (n - 1) + 1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n"}
{"task_id": "MBPP/87", "prompt": "'''Write a function to merge three dictionaries into a single expression. You need to pass these assertions:     assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}.'''\n\n ", "entry_point": "merge_dictionaries_three", "canonical_solution": "    import collections as ct\n    def merge_dictionaries_three(dict1,dict2, dict3):\n        merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n        return merged_dict", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n"}
{"task_id": "MBPP/88", "prompt": "'''Write a function to get the frequency of the elements in a list. You need to pass these assertions:     assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) .'''\n\n ", "entry_point": "freq_count", "canonical_solution": "    import collections\n    def freq_count(list1):\n      freq_count= collections.Counter(list1)\n      return freq_count", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) \n"}
{"task_id": "MBPP/89", "prompt": "'''Write a function to find the closest smaller number than n. You need to pass these assertions:     assert closest_num(11) == 10\n    assert closest_num(7) == 6\n    assert closest_num(12) == 11.'''\n\n ", "entry_point": "closest_num", "canonical_solution": "    def closest_num(N):\n      return (N - 1)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n"}
{"task_id": "MBPP/90", "prompt": "'''Write a python function to find the length of the longest word. You need to pass these assertions:     assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert len_log([\"a\",\"ab\",\"abc\"]) == 3\n    assert len_log([\"small\",\"big\",\"tall\"]) == 5.'''\n\n ", "entry_point": "len_log", "canonical_solution": "    def len_log(list1):\n        max=len(list1[0])\n        for i in list1:\n            if len(i)>max:\n                max=len(i)\n        return max", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n"}
{"task_id": "MBPP/91", "prompt": "'''Write a function to check if a substring is present in a given list of string values. You need to pass these assertions:     assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True.'''\n\n ", "entry_point": "find_substring", "canonical_solution": "    def find_substring(str1, sub_str):\n       if any(sub_str in s for s in str1):\n           return True\n       return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n"}
{"task_id": "MBPP/92", "prompt": "'''Write a function to check whether the given number is undulating or not. You need to pass these assertions:     assert is_undulating(\"1212121\") == True\n    assert is_undulating(\"1991\") == False\n    assert is_undulating(\"121\") == True.'''\n\n ", "entry_point": "is_undulating", "canonical_solution": "    def is_undulating(n): \n    \tif (len(n) <= 2): \n    \t\treturn False\n    \tfor i in range(2, len(n)): \n    \t\tif (n[i - 2] != n[i]): \n    \t\t\treturn False\n    \treturn True", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"1212121\") == True\n    assert candidate(\"1991\") == False\n    assert candidate(\"121\") == True\n"}
{"task_id": "MBPP/93", "prompt": "'''Write a function to calculate the value of 'a' to the power 'b'. You need to pass these assertions:     assert power(3,4) == 81\n    assert power(2,3) == 8\n    assert power(5,5) == 3125.'''\n\n ", "entry_point": "power", "canonical_solution": "    def power(a,b):\n    \tif b==0:\n    \t\treturn 1\n    \telif a==0:\n    \t\treturn 0\n    \telif b==1:\n    \t\treturn a\n    \telse:\n    \t\treturn a*power(a,b-1)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n"}
{"task_id": "MBPP/94", "prompt": "'''Write a function to extract the index minimum value record from the given tuples. You need to pass these assertions:     assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'.'''\n\n ", "entry_point": "index_minimum", "canonical_solution": "    from operator import itemgetter \n    def index_minimum(test_list):\n      res = min(test_list, key = itemgetter(1))[0]\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n"}
{"task_id": "MBPP/95", "prompt": "'''Write a python function to find the minimum length of sublist. You need to pass these assertions:     assert Find_Min_Length([[1],[1,2]]) == 1\n    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3.'''\n\n ", "entry_point": "Find_Min_Length", "canonical_solution": "    def Find_Min_Length(lst):  \n        minLength = min(len(x) for x in lst )\n        return minLength ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n"}
{"task_id": "MBPP/96", "prompt": "'''Write a python function to find the number of divisors of a given integer. You need to pass these assertions:     assert divisor(15) == 4 \n    assert divisor(12) == 6\n    assert divisor(9) == 3.'''\n\n ", "entry_point": "divisor", "canonical_solution": "    def divisor(n):\n      for i in range(n):\n        x = len([i for i in range(1,n+1) if not n % i])\n      return x", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(15) == 4 \n    assert candidate(12) == 6\n    assert candidate(9) == 3\n"}
{"task_id": "MBPP/97", "prompt": "'''Write a function to find frequency count of list of lists. You need to pass these assertions:     assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}.'''\n\n ", "entry_point": "frequency_lists", "canonical_solution": "    def frequency_lists(list1):\n        list1 = [item for sublist in list1 for item in sublist]\n        dic_data = {}\n        for num in list1:\n            if num in dic_data.keys():\n                dic_data[num] += 1\n            else:\n                key = num\n                value = 1\n                dic_data[key] = value\n        return dic_data", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n"}
{"task_id": "MBPP/98", "prompt": "'''Write a function to multiply all the numbers in a list and divide with the length of the list. You need to pass these assertions:     assert multiply_num((8, 2, 3, -1, 7))==-67.2\n    assert multiply_num((-10,-20,-30))==-2000.0\n    assert multiply_num((19,15,18))==1710.0.'''\n\n ", "entry_point": "multiply_num", "canonical_solution": "    def multiply_num(numbers):  \n        total = 1\n        for x in numbers:\n            total *= x  \n        return total/len(numbers) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((8, 2, 3, -1, 7))==-67.2\n    assert candidate((-10,-20,-30))==-2000.0\n    assert candidate((19,15,18))==1710.0\n"}
{"task_id": "MBPP/99", "prompt": "'''Write a function to convert the given decimal number to its binary equivalent. You need to pass these assertions:     assert decimal_to_binary(8) == '1000'\n    assert decimal_to_binary(18) == '10010'\n    assert decimal_to_binary(7) == '111' .'''\n\n ", "entry_point": "decimal_to_binary", "canonical_solution": "    def decimal_to_binary(n): \n        return bin(n).replace(\"0b\",\"\") ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111' \n"}
{"task_id": "MBPP/100", "prompt": "'''Write a function to find the next smallest palindrome of a specified number. You need to pass these assertions:     assert next_smallest_palindrome(99)==101\n    assert next_smallest_palindrome(1221)==1331\n    assert next_smallest_palindrome(120)==121.'''\n\n ", "entry_point": "next_smallest_palindrome", "canonical_solution": "    import sys\n    def next_smallest_palindrome(num):\n        numstr = str(num)\n        for i in range(num+1,sys.maxsize):\n            if str(i) == str(i)[::-1]:\n                return i", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(99)==101\n    assert candidate(1221)==1331\n    assert candidate(120)==121\n"}
{"task_id": "MBPP/101", "prompt": "'''Write a function to find the kth element in the given array. You need to pass these assertions:     assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([17,24,8,23], 4, 3) == 8\n    assert kth_element([16,21,25,36,4], 5, 4) == 36.'''\n\n ", "entry_point": "kth_element", "canonical_solution": "    def kth_element(arr, n, k):\n      for i in range(n):\n        for j in range(0, n-i-1):\n          if arr[j] > arr[j+1]:\n            arr[j], arr[j+1] == arr[j+1], arr[j]\n      return arr[k-1]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([12,3,5,7,19], 5, 2) == 3\n    assert candidate([17,24,8,23], 4, 3) == 8\n    assert candidate([16,21,25,36,4], 5, 4) == 36\n"}
{"task_id": "MBPP/102", "prompt": "'''Write a function to convert snake case string to camel case string. You need to pass these assertions:     assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_language')==('PythonLanguage')\n    assert snake_to_camel('programming_language')==('ProgrammingLanguage').'''\n\n ", "entry_point": "snake_to_camel", "canonical_solution": "    def snake_to_camel(word):\n            import re\n            return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('python_program')=='PythonProgram'\n    assert candidate('python_language')==('PythonLanguage')\n    assert candidate('programming_language')==('ProgrammingLanguage')\n"}
{"task_id": "MBPP/103", "prompt": "'''Write a function to find eulerian number a(n, m). You need to pass these assertions:     assert eulerian_num(3, 1) == 4\n    assert eulerian_num(4, 1) == 11\n    assert eulerian_num(5, 3) == 26.'''\n\n ", "entry_point": "eulerian_num", "canonical_solution": "    def eulerian_num(n, m): \n    \tif (m >= n or n == 0): \n    \t\treturn 0 \n    \tif (m == 0): \n    \t\treturn 1 \n    \treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n"}
{"task_id": "MBPP/104", "prompt": "'''Write a function to sort each sublist of strings in a given list of lists using lambda function. You need to pass these assertions:     assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']].'''\n\n ", "entry_point": "sort_sublists", "canonical_solution": "    def sort_sublists(input_list):\n        result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n"}
{"task_id": "MBPP/105", "prompt": "'''Write a python function to count true booleans in the given list. You need to pass these assertions:     assert count([True,False,True]) == 2\n    assert count([False,False]) == 0\n    assert count([True,True,True]) == 3.'''\n\n ", "entry_point": "count", "canonical_solution": "    def count(lst):   \n        return sum(lst) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n"}
{"task_id": "MBPP/106", "prompt": "'''Write a function to add the given list to the given tuples. You need to pass these assertions:     assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9).'''\n\n ", "entry_point": "add_lists", "canonical_solution": "    def add_lists(test_list, test_tup):\n      res = tuple(list(test_tup) + test_list)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n"}
{"task_id": "MBPP/107", "prompt": "'''Write a python function to count hexadecimal numbers for a given range. You need to pass these assertions:     assert count_Hexadecimal(10,15) == 6\n    assert count_Hexadecimal(2,4) == 0\n    assert count_Hexadecimal(15,16) == 1.'''\n\n ", "entry_point": "count_Hexadecimal", "canonical_solution": "    def count_Hexadecimal(L,R) :  \n        count = 0;  \n        for i in range(L,R + 1) : \n            if (i >= 10 and i <= 15) : \n                count += 1;  \n            elif (i > 15) : \n                k = i;  \n                while (k != 0) :  \n                    if (k % 16 >= 10) : \n                        count += 1;  \n                    k = k // 16;  \n        return count;  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(2,4) == 0\n    assert candidate(15,16) == 1\n"}
{"task_id": "MBPP/108", "prompt": "'''Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm. You need to pass these assertions:     assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85].'''\n\n ", "entry_point": "merge_sorted_list", "canonical_solution": "    import heapq\n    def merge_sorted_list(num1,num2,num3):\n      num1=sorted(num1)\n      num2=sorted(num2)\n      num3=sorted(num3)\n      result = heapq.merge(num1,num2,num3)\n      return list(result)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n"}
{"task_id": "MBPP/109", "prompt": "'''Write a python function to find the count of rotations of a binary string with odd value. You need to pass these assertions:     assert odd_Equivalent(\"011001\",6) == 3\n    assert odd_Equivalent(\"11011\",5) == 4\n    assert odd_Equivalent(\"1010\",4) == 2.'''\n\n ", "entry_point": "odd_Equivalent", "canonical_solution": "    def odd_Equivalent(s,n): \n        count=0\n        for i in range(0,n): \n            if (s[i] == '1'): \n                count = count + 1\n        return count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"011001\",6) == 3\n    assert candidate(\"11011\",5) == 4\n    assert candidate(\"1010\",4) == 2\n"}
{"task_id": "MBPP/110", "prompt": "'''Write a function to extract the ranges that are missing from the given list with the given start range and end range values. You need to pass these assertions:     assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)].'''\n\n ", "entry_point": "extract_missing", "canonical_solution": "    def extract_missing(test_list, strt_val, stop_val):\n      res = []\n      for sub in test_list:\n        if sub[0] > strt_val:\n          res.append((strt_val, sub[0]))\n          strt_val = sub[1]\n        if strt_val < stop_val:\n          res.append((strt_val, stop_val))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n"}
{"task_id": "MBPP/111", "prompt": "'''Write a function to find common elements in given nested lists. * list item * list item * list item * list item You need to pass these assertions:     assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4].'''\n\n ", "entry_point": "common_in_nested_lists", "canonical_solution": "    def common_in_nested_lists(nestedlist):\n        result = list(set.intersection(*map(set, nestedlist)))\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    assert candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n    assert candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]\n"}
{"task_id": "MBPP/112", "prompt": "'''Write a python function to find the perimeter of a cylinder. You need to pass these assertions:     assert perimeter(2,4) == 12\n    assert perimeter(1,2) == 6\n    assert perimeter(3,1) == 8.'''\n\n ", "entry_point": "perimeter", "canonical_solution": "    def perimeter(diameter,height) : \n        return 2*(diameter+height)  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2,4) == 12\n    assert candidate(1,2) == 6\n    assert candidate(3,1) == 8\n"}
{"task_id": "MBPP/113", "prompt": "'''Write a function to check if a string represents an integer or not. You need to pass these assertions:     assert check_integer(\"python\")==False\n    assert check_integer(\"1\")==True\n    assert check_integer(\"12345\")==True.'''\n\n ", "entry_point": "check_integer", "canonical_solution": "    def check_integer(text):\n     text = text.strip()\n     if len(text) < 1:\n        return None\n     else:\n         if all(text[i] in \"0123456789\" for i in range(len(text))):\n              return True\n         elif (text[0] in \"+-\") and \\\n             all(text[i] in \"0123456789\" for i in range(1,len(text))):\n             return True\n         else:\n            return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n"}
{"task_id": "MBPP/114", "prompt": "'''Write a function to assign frequency to each tuple in the given tuple list. You need to pass these assertions:     assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'.'''\n\n ", "entry_point": "assign_freq", "canonical_solution": "    from collections import Counter \n    def assign_freq(test_list):\n      res = [(*key, val) for key, val in Counter(test_list).items()]\n      return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    assert candidate([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n    assert candidate([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n"}
{"task_id": "MBPP/115", "prompt": "'''Write a function to check whether all dictionaries in a list are empty or not. You need to pass these assertions:     assert empty_dit([{},{},{}])==True\n    assert empty_dit([{1,2},{},{}])==False\n    assert empty_dit({})==True.'''\n\n ", "entry_point": "empty_dit", "canonical_solution": "    def empty_dit(list1):\n     empty_dit=all(not d for d in list1)\n     return empty_dit", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n"}
{"task_id": "MBPP/116", "prompt": "'''Write a function to convert a given tuple of positive integers into an integer. You need to pass these assertions:     assert tuple_to_int((1,2,3))==123\n    assert tuple_to_int((4,5,6))==456\n    assert tuple_to_int((5,6,7))==567.'''\n\n ", "entry_point": "tuple_to_int", "canonical_solution": "    def tuple_to_int(nums):\n        result = int(''.join(map(str,nums)))\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n"}
{"task_id": "MBPP/117", "prompt": "'''Write a function to convert all possible convertible elements in the list to float. You need to pass these assertions:     assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n    assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'.'''\n\n ", "entry_point": "list_to_float", "canonical_solution": "    def list_to_float(test_list):\n      res = []\n      for tup in test_list:\n        temp = []\n        for ele in tup:\n          if ele.isalpha():\n            temp.append(ele)\n          else:\n            temp.append(float(ele))\n        res.append((temp[0],temp[1])) \n      return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    assert candidate( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n    assert candidate( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\n"}
{"task_id": "MBPP/118", "prompt": "'''[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list. You need to pass these assertions:     assert string_to_list(\"python programming\")==['python','programming']\n    assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n    assert string_to_list(\"write a program\")==['write','a','program'].'''\n\n ", "entry_point": "string_to_list", "canonical_solution": "    def string_to_list(string): \n        lst = list(string.split(\" \")) \n        return lst", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python programming\")==['python','programming']\n    assert candidate(\"lists tuples strings\")==['lists','tuples','strings']\n    assert candidate(\"write a program\")==['write','a','program']\n"}
{"task_id": "MBPP/119", "prompt": "'''Write a python function to find the element that appears only once in a sorted array. You need to pass these assertions:     assert search([1,1,2,2,3],5) == 3\n    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n    assert search([1,2,2,3,3,4,4],7) == 1.'''\n\n ", "entry_point": "search", "canonical_solution": "    def search(arr,n) :\n        XOR = 0\n        for i in range(n) :\n            XOR = XOR ^ arr[i]\n        return (XOR)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,1,2,2,3],5) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n    assert candidate([1,2,2,3,3,4,4],7) == 1\n"}
{"task_id": "MBPP/120", "prompt": "'''Write a function to find the maximum product from the pairs of tuples within a given list. You need to pass these assertions:     assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200\n    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484.'''\n\n ", "entry_point": "max_product_tuple", "canonical_solution": "    def max_product_tuple(list1):\n        result_max = max([abs(x * y) for x, y in list1] )\n        return result_max", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert candidate([(10,20), (15,2), (5,10)] )==200\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484\n"}
{"task_id": "MBPP/121", "prompt": "'''Write a function to find the triplet with sum of the given array You need to pass these assertions:     assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\n    assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True.'''\n\n ", "entry_point": "check_triplet", "canonical_solution": "    def check_triplet(A, n, sum, count):\n        if count == 3 and sum == 0:\n            return True\n        if count == 3 or n == 0 or sum < 0:\n            return False\n        return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n               check_triplet(A, n - 1, sum, count)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert candidate([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\n    assert candidate([10, 4, 2, 3, 5], 5, 15, 0) == True\n"}
{"task_id": "MBPP/122", "prompt": "'''Write a function to find n\u2019th smart number. You need to pass these assertions:     assert smartNumber(1) == 30\n    assert smartNumber(50) == 273\n    assert smartNumber(1000) == 2664.'''\n\n ", "entry_point": "smartNumber", "canonical_solution": "    MAX = 3000 \n    def smartNumber(n): \n    \tprimes = [0] * MAX \n    \tresult = [] \n    \tfor i in range(2, MAX): \n    \t\tif (primes[i] == 0): \n    \t\t\tprimes[i] = 1 \n    \t\t\tj = i * 2 \n    \t\t\twhile (j < MAX): \n    \t\t\t\tprimes[j] -= 1 \n    \t\t\t\tif ( (primes[j] + 3) == 0): \n    \t\t\t\t\tresult.append(j) \n    \t\t\t\tj = j + i \n    \tresult.sort() \n    \treturn result[n - 1] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1) == 30\n    assert candidate(50) == 273\n    assert candidate(1000) == 2664\n"}
{"task_id": "MBPP/123", "prompt": "'''Write a function to sum all amicable numbers from 1 to a specified number. You need to pass these assertions:     assert amicable_numbers_sum(999)==504\n    assert amicable_numbers_sum(9999)==31626\n    assert amicable_numbers_sum(99)==0.'''\n\n ", "entry_point": "amicable_numbers_sum", "canonical_solution": "    def amicable_numbers_sum(limit):\n        if not isinstance(limit, int):\n            return \"Input is not an integer!\"\n        if limit < 1:\n            return \"Input must be bigger than 0!\"\n        amicables = set()\n        for num in range(2, limit+1):\n            if num in amicables:\n                continue\n            sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n            sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n            if num == sum_fact2 and num != sum_fact:\n                amicables.add(num)\n                amicables.add(sum_fact2)\n        return sum(amicables)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n"}
{"task_id": "MBPP/124", "prompt": "'''Write a function to get the angle of a complex number. You need to pass these assertions:     assert angle_complex(0,1j)==1.5707963267948966 \n    assert angle_complex(2,1j)==0.4636476090008061\n    assert angle_complex(0,2j)==1.5707963267948966.'''\n\n ", "entry_point": "angle_complex", "canonical_solution": "    import cmath\n    def angle_complex(a,b):\n      cn=complex(a,b)\n      angle=cmath.phase(a+b)\n      return angle", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(0,1j)==1.5707963267948966 \n    assert candidate(2,1j)==0.4636476090008061\n    assert candidate(0,2j)==1.5707963267948966\n"}
{"task_id": "MBPP/125", "prompt": "'''Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. You need to pass these assertions:     assert find_length(\"11000010001\", 11) == 6\n    assert find_length(\"10111\", 5) == 1\n    assert find_length(\"11011101100101\", 14) == 2 .'''\n\n ", "entry_point": "find_length", "canonical_solution": "    def find_length(string, n): \n    \tcurrent_sum = 0\n    \tmax_sum = 0\n    \tfor i in range(n): \n    \t\tcurrent_sum += (1 if string[i] == '0' else -1) \n    \t\tif current_sum < 0: \n    \t\t\tcurrent_sum = 0\n    \t\tmax_sum = max(current_sum, max_sum) \n    \treturn max_sum if max_sum else 0", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"11000010001\", 11) == 6\n    assert candidate(\"10111\", 5) == 1\n    assert candidate(\"11011101100101\", 14) == 2 \n"}
{"task_id": "MBPP/126", "prompt": "'''Write a python function to find the sum of common divisors of two given numbers. You need to pass these assertions:     assert sum(10,15) == 6\n    assert sum(100,150) == 93\n    assert sum(4,6) == 3.'''\n\n ", "entry_point": "sum", "canonical_solution": "    def sum(a,b): \n        sum = 0\n        for i in range (1,min(a,b)): \n            if (a % i == 0 and b % i == 0): \n                sum += i \n        return sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n"}
{"task_id": "MBPP/127", "prompt": "'''Write a function to multiply two integers without using the * operator in python. You need to pass these assertions:     assert multiply_int(10,20)==200\n    assert multiply_int(5,10)==50\n    assert multiply_int(4,8)==32.'''\n\n ", "entry_point": "multiply_int", "canonical_solution": "    def multiply_int(x, y):\n        if y < 0:\n            return -multiply_int(x, -y)\n        elif y == 0:\n            return 0\n        elif y == 1:\n            return x\n        else:\n            return x + multiply_int(x, y - 1)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n"}
{"task_id": "MBPP/128", "prompt": "'''Write a function to shortlist words that are longer than n from a given list of words. You need to pass these assertions:     assert long_words(3,\"python is a programming language\")==['python','programming','language']\n    assert long_words(2,\"writing a program\")==['writing','program']\n    assert long_words(5,\"sorting list\")==['sorting'].'''\n\n ", "entry_point": "long_words", "canonical_solution": "    def long_words(n, str):\n        word_len = []\n        txt = str.split(\" \")\n        for x in txt:\n            if len(x) > n:\n                word_len.append(x)\n        return word_len\t", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3,\"python is a programming language\")==['python','programming','language']\n    assert candidate(2,\"writing a program\")==['writing','program']\n    assert candidate(5,\"sorting list\")==['sorting']\n"}
{"task_id": "MBPP/129", "prompt": "'''Write a function to calculate magic square. You need to pass these assertions:     assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False.'''\n\n ", "entry_point": "magic_square_test", "canonical_solution": "    def magic_square_test(my_matrix):\n        iSize = len(my_matrix[0])\n        sum_list = []\n        sum_list.extend([sum (lines) for lines in my_matrix])   \n        for col in range(iSize):\n            sum_list.append(sum(row[col] for row in my_matrix))\n        result1 = 0\n        for i in range(0,iSize):\n            result1 +=my_matrix[i][i]\n        sum_list.append(result1)      \n        result2 = 0\n        for i in range(iSize-1,-1,-1):\n            result2 +=my_matrix[i][i]\n        sum_list.append(result2)\n        if len(set(sum_list))>1:\n            return False\n        return True", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n"}
{"task_id": "MBPP/130", "prompt": "'''Write a function to find the item with maximum frequency in a given list. You need to pass these assertions:     assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n    assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3).'''\n\n ", "entry_point": "max_occurrences", "canonical_solution": "    from collections import defaultdict\n    def max_occurrences(nums):\n        dict = defaultdict(int)\n        for i in nums:\n            dict[i] += 1\n        result = max(dict.items(), key=lambda x: x[1]) \n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)\n"}
{"task_id": "MBPP/131", "prompt": "'''Write a python function to reverse only the vowels of a given string. You need to pass these assertions:     assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"USA\") == \"ASU\"\n    assert reverse_vowels(\"ab\") == \"ab\".'''\n\n ", "entry_point": "reverse_vowels", "canonical_solution": "    def reverse_vowels(str1):\n    \tvowels = \"\"\n    \tfor char in str1:\n    \t\tif char in \"aeiouAEIOU\":\n    \t\t\tvowels += char\n    \tresult_string = \"\"\n    \tfor char in str1:\n    \t\tif char in \"aeiouAEIOU\":\n    \t\t\tresult_string += vowels[-1]\n    \t\t\tvowels = vowels[:-1]\n    \t\telse:\n    \t\t\tresult_string += char\n    \treturn result_string", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n"}
{"task_id": "MBPP/132", "prompt": "'''Write a function to convert tuple to a string. You need to pass these assertions:     assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert tup_string(('p','y','t','h','o','n'))==(\"python\")\n    assert tup_string(('p','r','o','g','r','a','m'))==(\"program\").'''\n\n ", "entry_point": "tup_string", "canonical_solution": "    def tup_string(tup1):\n      str =  ''.join(tup1)\n      return str", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert candidate(('p','y','t','h','o','n'))==(\"python\")\n    assert candidate(('p','r','o','g','r','a','m'))==(\"program\")\n"}
{"task_id": "MBPP/133", "prompt": "'''Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function. You need to pass these assertions:     assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\n    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894.'''\n\n ", "entry_point": "sum_negativenum", "canonical_solution": "    def sum_negativenum(nums):\n      sum_negativenum = list(filter(lambda nums:nums<0,nums))\n      return sum(sum_negativenum)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n"}
{"task_id": "MBPP/134", "prompt": "'''Write a python function to check whether the last element of given array is even or odd after performing an operation p times. You need to pass these assertions:     assert check_last([5,7,10],3,1) == \"ODD\"\n    assert check_last([2,3],2,3) == \"EVEN\"\n    assert check_last([1,2,3],3,1) == \"ODD\".'''\n\n ", "entry_point": "check_last ", "canonical_solution": "    def check_last (arr,n,p): \n        _sum = 0\n        for i in range(n): \n            _sum = _sum + arr[i] \n        if p == 1: \n            if _sum % 2 == 0: \n                return \"ODD\"\n            else: \n                return \"EVEN\"\n        return \"EVEN\"\n          ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_last([5,7,10],3,1) == \"ODD\"\n    assert check_last([2,3],2,3) == \"EVEN\"\n    assert check_last([1,2,3],3,1) == \"ODD\"\n"}
{"task_id": "MBPP/135", "prompt": "'''Write a function to find the nth hexagonal number. You need to pass these assertions:     assert hexagonal_num(10) == 190\n    assert hexagonal_num(5) == 45\n    assert hexagonal_num(7) == 91.'''\n\n ", "entry_point": "hexagonal_num", "canonical_solution": "    def hexagonal_num(n): \n    \treturn n*(2*n - 1) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n"}
{"task_id": "MBPP/136", "prompt": "'''Write a function to calculate electricity bill. You need to pass these assertions:     assert cal_electbill(75)==246.25\n    assert cal_electbill(265)==1442.75\n    assert cal_electbill(100)==327.5.'''\n\n ", "entry_point": "cal_electbill", "canonical_solution": "    def cal_electbill(units):\n     if(units < 50):\n        amount = units * 2.60\n        surcharge = 25\n     elif(units <= 100):\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n     elif(units <= 200):\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n     else:\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n     total = amount + surcharge\n     return total", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(75)==246.25\n    assert candidate(265)==1442.75\n    assert candidate(100)==327.5\n"}
{"task_id": "MBPP/137", "prompt": "'''Write a function to find the ration of zeroes in an array of integers. You need to pass these assertions:     assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n    assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00.'''\n\n ", "entry_point": "zero_count", "canonical_solution": "    from array import array\n    def zero_count(nums):\n        n = len(nums)\n        n1 = 0\n        for x in nums:\n            if x == 0:\n                n1 += 1\n            else:\n              None\n        return round(n1/n,2)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00\n"}
{"task_id": "MBPP/138", "prompt": "'''Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. You need to pass these assertions:     assert is_Sum_Of_Powers_Of_Two(10) == True\n    assert is_Sum_Of_Powers_Of_Two(7) == False\n    assert is_Sum_Of_Powers_Of_Two(14) == True.'''\n\n ", "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": "    def is_Sum_Of_Powers_Of_Two(n): \n        if (n % 2 == 1): \n            return False\n        else: \n            return True", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n"}
{"task_id": "MBPP/139", "prompt": "'''Write a function to find the circumference of a circle. You need to pass these assertions:     assert circle_circumference(10)==62.830000000000005\n    assert circle_circumference(5)==31.415000000000003\n    assert circle_circumference(4)==25.132.'''\n\n ", "entry_point": "circle_circumference", "canonical_solution": "    def circle_circumference(r):\n      perimeter=2*3.1415*r\n      return perimeter", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10)==62.830000000000005\n    assert candidate(5)==31.415000000000003\n    assert candidate(4)==25.132\n"}
{"task_id": "MBPP/140", "prompt": "'''Write a function to extract elements that occur singly in the given tuple list. You need to pass these assertions:     assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12].'''\n\n ", "entry_point": "extract_singly", "canonical_solution": "    def extract_singly(test_list):\n      res = []\n      temp = set()\n      for inner in test_list:\n        for ele in inner:\n          if not ele in temp:\n            temp.add(ele)\n            res.append(ele)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert candidate([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    assert candidate([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\n"}
{"task_id": "MBPP/141", "prompt": "'''Write a function to sort a list of elements using pancake sort. You need to pass these assertions:     assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42].'''\n\n ", "entry_point": "pancake_sort", "canonical_solution": "    def pancake_sort(nums):\n        arr_len = len(nums)\n        while arr_len > 1:\n            mi = nums.index(max(nums[0:arr_len]))\n            nums = nums[mi::-1] + nums[mi+1:len(nums)]\n            nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n            arr_len -= 1\n        return nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n"}
{"task_id": "MBPP/142", "prompt": "'''Write a function to count the same pair in three given lists. You need to pass these assertions:     assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5.'''\n\n ", "entry_point": "count_samepair", "canonical_solution": "    def count_samepair(list1,list2,list3):\n        result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n"}
{"task_id": "MBPP/143", "prompt": "'''Write a function to find number of lists present in the given tuple. You need to pass these assertions:     assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\n    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1.'''\n\n ", "entry_point": "find_lists", "canonical_solution": "    def find_lists(Input): \n    \tif isinstance(Input, list): \n    \t\treturn 1\n    \telse: \n    \t\treturn len(Input) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert candidate(([1, 2], [3, 4], [5, 6]))  == 3\n    assert candidate(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n"}
{"task_id": "MBPP/144", "prompt": "'''Write a python function to find the sum of absolute differences in all pairs of the given array. You need to pass these assertions:     assert sum_Pairs([1,8,9,15,16],5) == 74\n    assert sum_Pairs([1,2,3,4],4) == 10\n    assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188.'''\n\n ", "entry_point": "sum_Pairs", "canonical_solution": "    def sum_Pairs(arr,n): \n        sum = 0\n        for i in range(n - 1,-1,-1): \n            sum += i*arr[i] - (n-1-i) * arr[i] \n        return sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,8,9,15,16],5) == 74\n    assert candidate([1,2,3,4],4) == 10\n    assert candidate([1,2,3,4,5,7,9,11,14],9) == 188\n"}
{"task_id": "MBPP/145", "prompt": "'''Write a python function to find the maximum difference between any two elements in a given array. You need to pass these assertions:     assert max_Abs_Diff((2,1,5,3),4) == 4\n    assert max_Abs_Diff((9,3,2,5,1),5) == 8\n    assert max_Abs_Diff((3,2,1),3) == 2.'''\n\n ", "entry_point": "max_Abs_Diff", "canonical_solution": "    def max_Abs_Diff(arr,n): \n        minEle = arr[0] \n        maxEle = arr[0] \n        for i in range(1, n): \n            minEle = min(minEle,arr[i]) \n            maxEle = max(maxEle,arr[i]) \n        return (maxEle - minEle) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((2,1,5,3),4) == 4\n    assert candidate((9,3,2,5,1),5) == 8\n    assert candidate((3,2,1),3) == 2\n"}
{"task_id": "MBPP/146", "prompt": "'''Write a function to find the ascii value of total characters in a string. You need to pass these assertions:     assert ascii_value_string(\"python\")==112\n    assert ascii_value_string(\"Program\")==80\n    assert ascii_value_string(\"Language\")==76.'''\n\n ", "entry_point": "ascii_value_string", "canonical_solution": "    def ascii_value_string(str1):\n      for i in range(len(str1)):\n       return ord(str1[i])", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python\")==112\n    assert candidate(\"Program\")==80\n    assert candidate(\"Language\")==76\n"}
{"task_id": "MBPP/147", "prompt": "'''Write a function to find the maximum total path sum in the given triangle. You need to pass these assertions:     assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \n    assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53.'''\n\n ", "entry_point": "max_path_sum", "canonical_solution": "    def max_path_sum(tri, m, n): \n    \tfor i in range(m-1, -1, -1): \n    \t\tfor j in range(i+1): \n    \t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n    \t\t\t\ttri[i][j] += tri[i+1][j] \n    \t\t\telse: \n    \t\t\t\ttri[i][j] += tri[i+1][j+1] \n    \treturn tri[0][0]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert candidate([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \n    assert candidate([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53\n"}
{"task_id": "MBPP/148", "prompt": "'''Write a function to divide a number into two parts such that the sum of digits is maximum. You need to pass these assertions:     assert sum_digits_twoparts(35)==17\n    assert sum_digits_twoparts(7)==7\n    assert sum_digits_twoparts(100)==19.'''\n\n ", "entry_point": "sum_digits_single", "canonical_solution": "    def sum_digits_single(x) : \n        ans = 0\n        while x : \n            ans += x % 10\n            x //= 10  \n        return ans \n    def closest(x) : \n        ans = 0\n        while (ans * 10 + 9 <= x) : \n            ans = ans * 10 + 9  \n        return ans   \n    def sum_digits_twoparts(N) : \n        A = closest(N)  \n        return sum_digits_single(A) + sum_digits_single(N - A) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_digits_twoparts(35)==17\n    assert sum_digits_twoparts(7)==7\n    assert sum_digits_twoparts(100)==19\n"}
{"task_id": "MBPP/149", "prompt": "'''Write a function to find the longest subsequence such that the difference between adjacents is one for the given array. You need to pass these assertions:     assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n    assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\n    assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7.'''\n\n ", "entry_point": "longest_subseq_with_diff_one", "canonical_solution": "    def longest_subseq_with_diff_one(arr, n): \n    \tdp = [1 for i in range(n)] \n    \tfor i in range(n): \n    \t\tfor j in range(i): \n    \t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n    \t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n    \tresult = 1\n    \tfor i in range(n): \n    \t\tif (result < dp[i]): \n    \t\t\tresult = dp[i] \n    \treturn result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 3, 2], 7) == 6\n    assert candidate([10, 9, 4, 5, 4, 8, 6], 7) == 3\n    assert candidate([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7\n"}
{"task_id": "MBPP/150", "prompt": "'''Write a python function to find whether the given number is present in the infinite sequence or not. You need to pass these assertions:     assert does_Contain_B(1,7,3) == True\n    assert does_Contain_B(1,-3,5) == False\n    assert does_Contain_B(3,2,5) == False.'''\n\n ", "entry_point": "does_Contain_B", "canonical_solution": "    def does_Contain_B(a,b,c): \n        if (a == b): \n            return True\n        if ((b - a) * c > 0 and (b - a) % c == 0): \n            return True\n        return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,7,3) == True\n    assert candidate(1,-3,5) == False\n    assert candidate(3,2,5) == False\n"}
{"task_id": "MBPP/151", "prompt": "'''Write a python function to check whether the given number is co-prime or not. You need to pass these assertions:     assert is_coprime(17,13) == True\n    assert is_coprime(15,21) == False\n    assert is_coprime(25,45) == False.'''\n\n ", "entry_point": "gcd", "canonical_solution": "    def gcd(p,q):\n        while q != 0:\n            p, q = q,p%q\n        return p\n    def is_coprime(x,y):\n        return gcd(x,y) == 1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_coprime(17,13) == True\n    assert is_coprime(15,21) == False\n    assert is_coprime(25,45) == False\n"}
{"task_id": "MBPP/152", "prompt": "'''Write a function to sort the given array by using merge sort. You need to pass these assertions:     assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\n    assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9].'''\n\n ", "entry_point": "merge", "canonical_solution": "    def merge(a,b):\n        c = []\n        while len(a) != 0 and len(b) != 0:\n            if a[0] < b[0]:\n                c.append(a[0])\n                a.remove(a[0])\n            else:\n                c.append(b[0])\n                b.remove(b[0])\n        if len(a) == 0:\n            c += b\n        else:\n            c += a\n        return c\n    def merge_sort(x):\n        if len(x) == 0 or len(x) == 1:\n            return x\n        else:\n            middle = len(x)//2\n            a = merge_sort(x[:middle])\n            b = merge_sort(x[middle:])\n            return merge(a,b)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert candidate_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\n    assert candidate_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]\n"}
{"task_id": "MBPP/153", "prompt": "'''Write a function to find the vertex of a parabola. You need to pass these assertions:     assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n    assert parabola_vertex(2,4,6)==(-1.0, 4.0).'''\n\n ", "entry_point": "parabola_vertex", "canonical_solution": "    def parabola_vertex(a, b, c): \n      vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n      return vertex", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,3,2)==(-0.3, 1.55)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n    assert candidate(2,4,6)==(-1.0, 4.0)\n"}
{"task_id": "MBPP/154", "prompt": "'''Write a function to extract every specified element from a given two dimensional list. You need to pass these assertions:     assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5].'''\n\n ", "entry_point": "specified_element", "canonical_solution": "    def specified_element(nums, N):\n        result = [i[N] for i in nums]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]\n"}
{"task_id": "MBPP/155", "prompt": "'''Write a python function to toggle all even bits of a given number. You need to pass these assertions:     assert even_bit_toggle_number(10) == 0\n    assert even_bit_toggle_number(20) == 30\n    assert even_bit_toggle_number(30) == 20.'''\n\n ", "entry_point": "even_bit_toggle_number", "canonical_solution": "    def even_bit_toggle_number(n) : \n        res = 0; count = 0; temp = n \n        while (temp > 0) :     \n            if (count % 2 == 1) : \n                res = res | (1 << count)      \n            count = count + 1\n            temp >>= 1 \n        return n ^ res ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 0\n    assert candidate(20) == 30\n    assert candidate(30) == 20\n"}
{"task_id": "MBPP/156", "prompt": "'''Write a function to convert a tuple of string values to a tuple of integer values. You need to pass these assertions:     assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\n    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555)).'''\n\n ", "entry_point": "tuple_int_str", "canonical_solution": "    def tuple_int_str(tuple_str):\n        result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n    assert candidate((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\n    assert candidate((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))\n"}
{"task_id": "MBPP/157", "prompt": "'''Write a function to reflect the run-length encoding from a list. You need to pass these assertions:     assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']].'''\n\n ", "entry_point": "encode_list", "canonical_solution": "    from itertools import groupby\n    def encode_list(list1):\n        return [[len(list(group)), key] for key, group in groupby(list1)]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    assert candidate('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    assert candidate('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n"}
{"task_id": "MBPP/158", "prompt": "'''Write a python function to find k number of operations required to make all elements equal. You need to pass these assertions:     assert min_Ops([2,2,2,2],4,3) == 0\n    assert min_Ops([4,2,6,8],4,3) == -1\n    assert min_Ops([21,33,9,45,63],5,6) == 24.'''\n\n ", "entry_point": "min_Ops", "canonical_solution": "    def min_Ops(arr,n,k): \n        max1 = max(arr) \n        res = 0\n        for i in range(0,n):  \n            if ((max1 - arr[i]) % k != 0): \n                return -1 \n            else: \n                res += (max1 - arr[i]) / k \n        return int(res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2,2,2,2],4,3) == 0\n    assert candidate([4,2,6,8],4,3) == -1\n    assert candidate([21,33,9,45,63],5,6) == 24\n"}
{"task_id": "MBPP/159", "prompt": "'''Write a function to print the season for the given month and day. You need to pass these assertions:     assert month_season('January',4)==('winter')\n    assert month_season('October',28)==('autumn')\n    assert month_season('June',6)==('spring').'''\n\n ", "entry_point": "month_season", "canonical_solution": "    def month_season(month,days):\n     if month in ('January', 'February', 'March'):\n    \t season = 'winter'\n     elif month in ('April', 'May', 'June'):\n    \t season = 'spring'\n     elif month in ('July', 'August', 'September'):\n    \t season = 'summer'\n     else:\n    \t season = 'autumn'\n     if (month == 'March') and (days > 19):\n    \t season = 'spring'\n     elif (month == 'June') and (days > 20):\n    \t season = 'summer'\n     elif (month == 'September') and (days > 21):\n    \t season = 'autumn'\n     elif (month == 'October') and (days > 21):\n    \t season = 'autumn'\n     elif (month == 'November') and (days > 21):\n    \t season = 'autumn'\n     elif (month == 'December') and (days > 20):\n    \t season = 'winter'\n     return season", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('January',4)==('winter')\n    assert candidate('October',28)==('autumn')\n    assert candidate('June',6)==('spring')\n"}
{"task_id": "MBPP/160", "prompt": "'''Write a function to find x and y that satisfies ax + by = n. You need to pass these assertions:     assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert solution(4, 2, 7) == 'No solution'\n    assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1).'''\n\n ", "entry_point": "solution ", "canonical_solution": "    def solution (a, b, n): \n    \ti = 0\n    \twhile i * a <= n: \n    \t\tif (n - (i * a)) % b == 0: \n    \t\t\treturn (\"x = \",i ,\", y = \", \n    \t\t\tint((n - (i * a)) / b)) \n    \t\t\treturn 0\n    \t\ti = i + 1\n    \treturn (\"No solution\") ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert solution(4, 2, 7) == 'No solution'\n    assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)\n"}
{"task_id": "MBPP/161", "prompt": "'''Write a function to remove all elements from a given list present in another list. You need to pass these assertions:     assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10].'''\n\n ", "entry_point": "remove_elements", "canonical_solution": "    def remove_elements(list1, list2):\n        result = [x for x in list1 if x not in list2]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]\n"}
{"task_id": "MBPP/162", "prompt": "'''Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). You need to pass these assertions:     assert sum_series(6)==12\n    assert sum_series(10)==30\n    assert sum_series(9)==25.'''\n\n ", "entry_point": "sum_series", "canonical_solution": "    def sum_series(n):\n      if n < 1:\n        return 0\n      else:\n        return n + sum_series(n - 2)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(6)==12\n    assert candidate(10)==30\n    assert candidate(9)==25\n"}
{"task_id": "MBPP/163", "prompt": "'''Write a function to calculate the area of a regular polygon. You need to pass these assertions:     assert area_polygon(4,20)==400.00000000000006\n    assert area_polygon(10,15)==1731.1969896610804\n    assert area_polygon(9,7)==302.90938549487214.'''\n\n ", "entry_point": "area_polygon", "canonical_solution": "    from math import tan, pi\n    def area_polygon(s,l):\n      area = s * (l ** 2) / (4 * tan(pi / s))\n      return area", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,20)==400.00000000000006\n    assert candidate(10,15)==1731.1969896610804\n    assert candidate(9,7)==302.90938549487214\n"}
{"task_id": "MBPP/164", "prompt": "'''Write a python function to check whether the sum of divisors are same or not. You need to pass these assertions:     assert areEquivalent(36,57) == False\n    assert areEquivalent(2,4) == False\n    assert areEquivalent(23,47) == True.'''\n\n ", "entry_point": "divSum", "canonical_solution": "    import math \n    def divSum(n): \n        sum = 1; \n        i = 2; \n        while(i * i <= n): \n            if (n % i == 0): \n                sum = (sum + i +math.floor(n / i)); \n            i += 1; \n        return sum; \n    def areEquivalent(num1,num2): \n        return divSum(num1) == divSum(num2); ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert areEquivalent(36,57) == False\n    assert areEquivalent(2,4) == False\n    assert areEquivalent(23,47) == True\n"}
{"task_id": "MBPP/165", "prompt": "'''Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet. You need to pass these assertions:     assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"ABcED\") == 3\n    assert count_char_position(\"AbgdeF\") == 5.'''\n\n ", "entry_point": "count_char_position", "canonical_solution": "    def count_char_position(str1): \n        count_chars = 0\n        for i in range(len(str1)):\n            if ((i == ord(str1[i]) - ord('A')) or \n                (i == ord(str1[i]) - ord('a'))): \n                count_chars += 1\n        return count_chars ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n"}
{"task_id": "MBPP/166", "prompt": "'''Write a python function to count the pairs with xor as an even number. You need to pass these assertions:     assert find_even_Pair([5,4,7,2,1],5) == 4\n    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9\n    assert find_even_Pair([1,2,3],3) == 1.'''\n\n ", "entry_point": "find_even_Pair", "canonical_solution": "    def find_even_Pair(A,N): \n        evenPair = 0\n        for i in range(0,N): \n            for j in range(i+1,N): \n                if ((A[i] ^ A[j]) % 2 == 0): \n                    evenPair+=1\n        return evenPair; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([5,4,7,2,1],5) == 4\n    assert candidate([7,2,8,1,0,5,11],7) == 9\n    assert candidate([1,2,3],3) == 1\n"}
{"task_id": "MBPP/167", "prompt": "'''Write a python function to find smallest power of 2 greater than or equal to n. You need to pass these assertions:     assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(5) == 8\n    assert next_Power_Of_2(17) == 32.'''\n\n ", "entry_point": "next_Power_Of_2", "canonical_solution": "    def next_Power_Of_2(n): \n        count = 0; \n        if (n and not(n & (n - 1))): \n            return n   \n        while( n != 0): \n            n >>= 1\n            count += 1\n        return 1 << count; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n"}
{"task_id": "MBPP/168", "prompt": "'''Write a python function to find the frequency of a number in a given array. You need to pass these assertions:     assert frequency([1,2,3],4) == 0\n    assert frequency([1,2,2,3,3,3,4],3) == 3\n    assert frequency([0,1,2,3,1,2],1) == 2.'''\n\n ", "entry_point": "frequency", "canonical_solution": "    def frequency(a,x): \n        count = 0  \n        for i in a: \n            if i == x: count += 1\n        return count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3],4) == 0\n    assert candidate([1,2,2,3,3,3,4],3) == 3\n    assert candidate([0,1,2,3,1,2],1) == 2\n"}
{"task_id": "MBPP/169", "prompt": "'''Write a function to calculate the nth pell number. You need to pass these assertions:     assert get_pell(4) == 12\n    assert get_pell(7) == 169\n    assert get_pell(8) == 408.'''\n\n ", "entry_point": "get_pell", "canonical_solution": "    def get_pell(n): \n    \tif (n <= 2): \n    \t\treturn n \n    \ta = 1\n    \tb = 2\n    \tfor i in range(3, n+1): \n    \t\tc = 2 * b + a \n    \t\ta = b \n    \t\tb = c \n    \treturn b ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4) == 12\n    assert candidate(7) == 169\n    assert candidate(8) == 408\n"}
{"task_id": "MBPP/170", "prompt": "'''Write a function to find sum of the numbers in a list between the indices of a specified range. You need to pass these assertions:     assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38.'''\n\n ", "entry_point": "sum_range_list", "canonical_solution": "    def sum_range_list(list1, m, n):                                                                                                                                                                                                \n        sum_range = 0                                                                                                                                                                                                         \n        for i in range(m, n+1, 1):                                                                                                                                                                                        \n            sum_range += list1[i]                                                                                                                                                                                                  \n        return sum_range   ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38\n"}
{"task_id": "MBPP/171", "prompt": "'''Write a function to find the perimeter of a pentagon. You need to pass these assertions:     assert perimeter_pentagon(5)==25\n    assert perimeter_pentagon(10)==50\n    assert perimeter_pentagon(15)==75.'''\n\n ", "entry_point": "perimeter_pentagon", "canonical_solution": "    import math\n    def perimeter_pentagon(a):\n      perimeter=(5*a)\n      return perimeter", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5)==25\n    assert candidate(10)==50\n    assert candidate(15)==75\n"}
{"task_id": "MBPP/172", "prompt": "'''Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item You need to pass these assertions:     assert count_occurance(\"letstdlenstdporstd\") == 3\n    assert count_occurance(\"truststdsolensporsd\") == 1\n    assert count_occurance(\"makestdsostdworthit\") == 2.'''\n\n ", "entry_point": "count_occurance", "canonical_solution": "    def count_occurance(s):\n      count=0\n      for i in range(len(s)):\n        if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n          count = count + 1\n      return count", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n"}
{"task_id": "MBPP/173", "prompt": "'''Write a function to remove everything except alphanumeric characters from a string. You need to pass these assertions:     assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program').'''\n\n ", "entry_point": "remove_splchar", "canonical_solution": "    import re\n    def remove_splchar(text): \n     pattern = re.compile('[\\W_]+')\n     return (pattern.sub('', text))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('python  @#&^%$*program123')==('pythonprogram123')\n    assert candidate('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n    assert candidate('python   ^%&^()(+_)(_^&67)                  program')==('python67program')\n"}
{"task_id": "MBPP/174", "prompt": "'''Write a function to group a sequence of key-value pairs into a dictionary of lists. You need to pass these assertions:     assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\n    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}.'''\n\n ", "entry_point": "group_keyvalue", "canonical_solution": "    def group_keyvalue(l):\n        result = {}\n        for k, v in l:\n             result.setdefault(k, []).append(v)\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert candidate([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\n    assert candidate([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n"}
{"task_id": "MBPP/175", "prompt": "'''Write a function to verify validity of a string of parentheses. You need to pass these assertions:     assert is_valid_parenthese(\"(){}[]\")==True\n    assert is_valid_parenthese(\"()[{)}\")==False\n    assert is_valid_parenthese(\"()\")==True.'''\n\n ", "entry_point": "is_valid_parenthese", "canonical_solution": "    def is_valid_parenthese( str1):\n            stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n            for parenthese in str1:\n                if parenthese in pchar:\n                    stack.append(parenthese)\n                elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                    return False\n            return len(stack) == 0", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"(){}[]\")==True\n    assert candidate(\"()[{)}\")==False\n    assert candidate(\"()\")==True\n"}
{"task_id": "MBPP/176", "prompt": "'''Write a function to find the perimeter of a triangle. You need to pass these assertions:     assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(3,4,5)==12\n    assert perimeter_triangle(25,35,45)==105.'''\n\n ", "entry_point": "perimeter_triangle", "canonical_solution": "    def perimeter_triangle(a,b,c):\n      perimeter=a+b+c\n      return perimeter", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,20,30)==60\n    assert candidate(3,4,5)==12\n    assert candidate(25,35,45)==105\n"}
{"task_id": "MBPP/177", "prompt": "'''Write a python function to find two distinct numbers such that their lcm lies within the given range. You need to pass these assertions:     assert answer(3,8) == (3,6)\n    assert answer(2,6) == (2,4)\n    assert answer(1,3) == (1,2).'''\n\n ", "entry_point": "answer", "canonical_solution": "    def answer(L,R): \n        if (2 * L <= R): \n            return (L ,2*L)\n        else: \n            return (-1) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3,8) == (3,6)\n    assert candidate(2,6) == (2,4)\n    assert candidate(1,3) == (1,2)\n"}
{"task_id": "MBPP/178", "prompt": "'''Write a function to search some literals strings in a string. You need to pass these assertions:     assert string_literals(['language'],'python language')==('Matched!')\n    assert string_literals(['program'],'python language')==('Not Matched!')\n    assert string_literals(['python'],'programming language')==('Not Matched!').'''\n\n ", "entry_point": "string_literals", "canonical_solution": "    import re\n    def string_literals(patterns,text):\n      for pattern in patterns:\n         if re.search(pattern,  text):\n           return ('Matched!')\n         else:\n           return ('Not Matched!')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['language'],'python language')==('Matched!')\n    assert candidate(['program'],'python language')==('Not Matched!')\n    assert candidate(['python'],'programming language')==('Not Matched!')\n"}
{"task_id": "MBPP/179", "prompt": "'''Write a function to find if the given number is a keith number or not. You need to pass these assertions:     assert is_num_keith(14) == True\n    assert is_num_keith(12) == False\n    assert is_num_keith(197) == True.'''\n\n ", "entry_point": "is_num_keith", "canonical_solution": "    def is_num_keith(x): \n    \tterms = [] \n    \ttemp = x \n    \tn = 0 \n    \twhile (temp > 0): \n    \t\tterms.append(temp % 10) \n    \t\ttemp = int(temp / 10) \n    \t\tn+=1 \n    \tterms.reverse() \n    \tnext_term = 0 \n    \ti = n \n    \twhile (next_term < x): \n    \t\tnext_term = 0 \n    \t\tfor j in range(1,n+1): \n    \t\t\tnext_term += terms[i - j] \n    \t\tterms.append(next_term) \n    \t\ti+=1 \n    \treturn (next_term == x) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(14) == True\n    assert candidate(12) == False\n    assert candidate(197) == True\n"}
{"task_id": "MBPP/180", "prompt": "'''Write a function to calculate distance between two points using latitude and longitude. You need to pass these assertions:     assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\n    assert distance_lat_long(10,20,30,40)==6783.751974994595.'''\n\n ", "entry_point": "distance_lat_long", "canonical_solution": "    from math import radians, sin, cos, acos\n    def distance_lat_long(slat,slon,elat,elon):\n     dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n     return dist", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(23.5,67.5,25.5,69.5)==12179.372041317429\n    assert candidate(10.5,20.5,30.5,40.5)==6069.397933300514\n    assert candidate(10,20,30,40)==6783.751974994595\n"}
{"task_id": "MBPP/181", "prompt": "'''Write a function to find the longest common prefix in the given set of strings. You need to pass these assertions:     assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\n    assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'.'''\n\n ", "entry_point": "common_prefix_util", "canonical_solution": "    def common_prefix_util(str1, str2): \n    \tresult = \"\"; \n    \tn1 = len(str1) \n    \tn2 = len(str2) \n    \ti = 0\n    \tj = 0\n    \twhile i <= n1 - 1 and j <= n2 - 1: \n    \t\tif (str1[i] != str2[j]): \n    \t\t\tbreak\n    \t\tresult += str1[i] \n    \t\ti += 1\n    \t\tj += 1\n    \treturn (result) \n    def common_prefix (arr, n): \n    \tprefix = arr[0] \n    \tfor i in range (1, n): \n    \t\tprefix = common_prefix_util(prefix, arr[i]) \n    \treturn (prefix) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\n    assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'\n"}
{"task_id": "MBPP/182", "prompt": "'''Write a function to find uppercase, lowercase, special character and numeric values using regex. You need to pass these assertions:     assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], []).'''\n\n ", "entry_point": "find_character", "canonical_solution": "    import re\n    def find_character(string):\n      uppercase_characters = re.findall(r\"[A-Z]\", string) \n      lowercase_characters = re.findall(r\"[a-z]\", string) \n      numerical_characters = re.findall(r\"[0-9]\", string) \n      special_characters = re.findall(r\"[, .!?]\", string) \n      return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    assert candidate(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    assert candidate(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n"}
{"task_id": "MBPP/183", "prompt": "'''Write a function to count all the distinct pairs having a difference of k in any array. You need to pass these assertions:     assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\n    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3.'''\n\n ", "entry_point": "count_pairs", "canonical_solution": "    def count_pairs(arr, n, k):\n      count=0;\n      for i in range(0,n):\n        for j in range(i+1, n):\n          if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n            count += 1\n      return count", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 5, 3, 4, 2], 5, 3) == 2\n    assert candidate([8, 12, 16, 4, 0, 20], 6, 4) == 5\n    assert candidate([2, 4, 1, 3, 4], 5, 2) == 3\n"}
{"task_id": "MBPP/184", "prompt": "'''Write a function to find all the values in a list that are greater than a specified number. You need to pass these assertions:     assert greater_specificnum([220, 330, 500],200)==True\n    assert greater_specificnum([12, 17, 21],20)==False\n    assert greater_specificnum([1,2,3,4],10)==False.'''\n\n ", "entry_point": "greater_specificnum", "canonical_solution": "    def greater_specificnum(list,num):\n     greater_specificnum=all(x >= num for x in list)\n     return greater_specificnum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([220, 330, 500],200)==True\n    assert candidate([12, 17, 21],20)==False\n    assert candidate([1,2,3,4],10)==False\n"}
{"task_id": "MBPP/185", "prompt": "'''Write a function to find the focus of a parabola. You need to pass these assertions:     assert parabola_focus(5,3,2)==(-0.3, 1.6)\n    assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\n    assert parabola_focus(2,4,6)==(-1.0, 4.125).'''\n\n ", "entry_point": "parabola_focus", "canonical_solution": "    def parabola_focus(a, b, c): \n      focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n      return focus", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,3,2)==(-0.3, 1.6)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.25)\n    assert candidate(2,4,6)==(-1.0, 4.125)\n"}
{"task_id": "MBPP/186", "prompt": "'''Write a function to search some literals strings in a string by using regex. You need to pass these assertions:     assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'.'''\n\n ", "entry_point": "check_literals", "canonical_solution": "    import re\n    def check_literals(text, patterns):\n      for pattern in patterns:\n        if re.search(pattern,  text):\n            return ('Matched!')\n        else:\n            return ('Not Matched!')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'\n"}
{"task_id": "MBPP/187", "prompt": "'''Write a function to find the longest common subsequence for the given two sequences. You need to pass these assertions:     assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\n    assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2.'''\n\n ", "entry_point": "longest_common_subsequence", "canonical_solution": "    def longest_common_subsequence(X, Y, m, n): \n        if m == 0 or n == 0: \n           return 0 \n        elif X[m-1] == Y[n-1]: \n           return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n        else: \n           return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    assert candidate(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\n    assert candidate(\"AXYT\" , \"AYZX\", 4, 4) == 2\n"}
{"task_id": "MBPP/188", "prompt": "'''Write a python function to check whether the given number can be represented by product of two squares or not. You need to pass these assertions:     assert prod_Square(25) == False\n    assert prod_Square(30) == False\n    assert prod_Square(16) == True.'''\n\n ", "entry_point": "prod_Square", "canonical_solution": "    def prod_Square(n):\n        for i in range(2,(n) + 1):\n            if (i*i < (n+1)):\n                for j in range(2,n + 1):\n                    if ((i*i*j*j) == n):\n                        return True;\n        return False;", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(25) == False\n    assert candidate(30) == False\n    assert candidate(16) == True\n"}
{"task_id": "MBPP/189", "prompt": "'''Write a python function to find the first missing positive number. You need to pass these assertions:     assert first_Missing_Positive([1,2,3,-1,5],5) == 4\n    assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\n    assert first_Missing_Positive([0,1,2,5,-8],5) == 3.'''\n\n ", "entry_point": "first_Missing_Positive", "canonical_solution": "    def first_Missing_Positive(arr,n): \n        ptr = 0\n        for i in range(n):\n            if arr[i] == 1:\n                ptr = 1\n                break\n        if ptr == 0:\n            return(1)\n        for i in range(n):\n            if arr[i] <= 0 or arr[i] > n:\n                arr[i] = 1\n        for i in range(n):\n            arr[(arr[i] - 1) % n] += n\n        for i in range(n):\n            if arr[i] <= n:\n                return(i + 1)\n        return(n + 1)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,-1,5],5) == 4\n    assert candidate([0,-1,-2,1,5,8],6) == 2\n    assert candidate([0,1,2,5,-8],5) == 3\n"}
{"task_id": "MBPP/190", "prompt": "'''Write a python function to count the number of integral co-ordinates that lie inside a square. You need to pass these assertions:     assert count_Intgral_Points(1,1,4,4) == 4\n    assert count_Intgral_Points(1,2,1,2) == 1\n    assert count_Intgral_Points(4,2,6,4) == 1.'''\n\n ", "entry_point": "count_Intgral_Points", "canonical_solution": "    def count_Intgral_Points(x1,y1,x2,y2): \n        return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,1,4,4) == 4\n    assert candidate(1,2,1,2) == 1\n    assert candidate(4,2,6,4) == 1\n"}
{"task_id": "MBPP/191", "prompt": "'''Write a function to check whether the given month name contains 30 days or not. You need to pass these assertions:     assert check_monthnumber(\"February\")==False\n    assert check_monthnumber(\"June\")==True\n    assert check_monthnumber(\"April\")==True.'''\n\n ", "entry_point": "check_monthnumber", "canonical_solution": "    def check_monthnumber(monthname3):\n      if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n        return True\n      else:\n        return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"February\")==False\n    assert candidate(\"June\")==True\n    assert candidate(\"April\")==True\n"}
{"task_id": "MBPP/192", "prompt": "'''Write a python function to check whether a string has atleast one letter and one number. You need to pass these assertions:     assert check_String('thishasboth29') == True\n    assert check_String('python') == False\n    assert check_String ('string') == False.'''\n\n ", "entry_point": "check_String", "canonical_solution": "    def check_String(str): \n        flag_l = False\n        flag_n = False\n        for i in str: \n            if i.isalpha(): \n                flag_l = True  \n            if i.isdigit(): \n                flag_n = True\n        return flag_l and flag_n ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('thishasboth29') == True\n    assert candidate('python') == False\n    assert candidate ('string') == False\n"}
{"task_id": "MBPP/193", "prompt": "'''Write a function to remove the duplicates from the given tuple. You need to pass these assertions:     assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\n    assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14).'''\n\n ", "entry_point": "remove_tuple", "canonical_solution": "    def remove_tuple(test_tup):\n      res = tuple(set(test_tup))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\n    assert candidate((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)\n"}
{"task_id": "MBPP/194", "prompt": "'''Write a python function to convert octal number to decimal number. You need to pass these assertions:     assert octal_To_Decimal(25) == 21\n    assert octal_To_Decimal(30) == 24\n    assert octal_To_Decimal(40) == 32.'''\n\n ", "entry_point": "octal_To_Decimal", "canonical_solution": "    def octal_To_Decimal(n):  \n        num = n; \n        dec_value = 0; \n        base = 1; \n        temp = num; \n        while (temp): \n            last_digit = temp % 10; \n            temp = int(temp / 10); \n            dec_value += last_digit*base; \n            base = base * 8; \n        return dec_value; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(25) == 21\n    assert candidate(30) == 24\n    assert candidate(40) == 32\n"}
{"task_id": "MBPP/195", "prompt": "'''Write a python function to find the first position of an element in a sorted array. You need to pass these assertions:     assert first([1,2,3,4,5,6,6],6,6) == 5\n    assert first([1,2,2,2,3,2,2,4,2],2,9) == 1\n    assert first([1,2,3],1,3) == 0.'''\n\n ", "entry_point": "first", "canonical_solution": "    def first(arr,x,n): \n        low = 0\n        high = n - 1\n        res = -1  \n        while (low <= high):\n            mid = (low + high) // 2 \n            if arr[mid] > x:\n                high = mid - 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                res = mid\n                high = mid - 1\n        return res", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,6],6,6) == 5\n    assert candidate([1,2,2,2,3,2,2,4,2],2,9) == 1\n    assert candidate([1,2,3],1,3) == 0\n"}
{"task_id": "MBPP/196", "prompt": "'''Write a function to remove all the tuples with length k. You need to pass these assertions:     assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\n    assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)].'''\n\n ", "entry_point": "remove_tuples", "canonical_solution": "    def remove_tuples(test_list, K):\n      res = [ele for ele in test_list if len(ele) != K]\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert candidate([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\n    assert candidate([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]\n"}
{"task_id": "MBPP/197", "prompt": "'''Write a function to perform the exponentiation of the given two tuples. You need to pass these assertions:     assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n    assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\n    assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152).'''\n\n ", "entry_point": "find_exponentio", "canonical_solution": "    def find_exponentio(test_tup1, test_tup2):\n      res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n      return (res)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)\n"}
{"task_id": "MBPP/198", "prompt": "'''Write a function to find the largest triangle that can be inscribed in an ellipse. You need to pass these assertions:     assert largest_triangle(4,2)==10.392304845413264\n    assert largest_triangle(5,7)==4.639421805988064\n    assert largest_triangle(9,1)==105.2220865598093.'''\n\n ", "entry_point": "largest_triangle", "canonical_solution": "    import math\n    def largest_triangle(a,b): \n        if (a < 0 or b < 0): \n            return -1 \n        area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n        return area ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,2)==10.392304845413264\n    assert candidate(5,7)==4.639421805988064\n    assert candidate(9,1)==105.2220865598093\n"}
{"task_id": "MBPP/199", "prompt": "'''Write a python function to find highest power of 2 less than or equal to given number. You need to pass these assertions:     assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(19) == 16\n    assert highest_Power_of_2(32) == 32.'''\n\n ", "entry_point": "highest_Power_of_2", "canonical_solution": "    def highest_Power_of_2(n): \n        res = 0; \n        for i in range(n, 0, -1):  \n            if ((i & (i - 1)) == 0): \n                res = i; \n                break;      \n        return res; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n"}
{"task_id": "MBPP/200", "prompt": "'''Write a function to find all index positions of the maximum values in a given list. You need to pass these assertions:     assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n    assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\n    assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11].'''\n\n ", "entry_point": "position_max", "canonical_solution": "    def position_max(list1):\n        max_val = max(list1)\n        max_result = [i for i, j in enumerate(list1) if j == max_val]\n        return max_result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[11]\n"}
{"task_id": "MBPP/201", "prompt": "'''Write a python function to check whether the elements in a list are same or not. You need to pass these assertions:     assert chkList(['one','one','one']) == True\n    assert chkList(['one','Two','Three']) == False\n    assert chkList(['bigdata','python','Django']) == False.'''\n\n ", "entry_point": "chkList", "canonical_solution": "    def chkList(lst): \n        return len(set(lst)) == 1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['one','one','one']) == True\n    assert candidate(['one','Two','Three']) == False\n    assert candidate(['bigdata','python','Django']) == False\n"}
{"task_id": "MBPP/202", "prompt": "'''Write a function to remove even characters in a string. You need to pass these assertions:     assert remove_even(\"python\")==(\"pto\")\n    assert remove_even(\"program\")==(\"porm\")\n    assert remove_even(\"language\")==(\"lnug\").'''\n\n ", "entry_point": "remove_even", "canonical_solution": "    def remove_even(str1):\n     str2 = ''\n     for i in range(1, len(str1) + 1):\n        if(i % 2 != 0):\n            str2 = str2 + str1[i - 1]\n     return str2", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python\")==(\"pto\")\n    assert candidate(\"program\")==(\"porm\")\n    assert candidate(\"language\")==(\"lnug\")\n"}
{"task_id": "MBPP/203", "prompt": "'''Write a python function to find the hamming distance between given two integers. You need to pass these assertions:     assert hamming_Distance(4,8) == 2\n    assert hamming_Distance(2,4) == 2\n    assert hamming_Distance(1,2) == 2.'''\n\n ", "entry_point": "hamming_Distance", "canonical_solution": "    def hamming_Distance(n1,n2) : \n        x = n1 ^ n2  \n        setBits = 0\n        while (x > 0) : \n            setBits += x & 1\n            x >>= 1\n        return setBits  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,8) == 2\n    assert candidate(2,4) == 2\n    assert candidate(1,2) == 2\n"}
{"task_id": "MBPP/204", "prompt": "'''Write a python function to count the occurrence of a given character in a string. You need to pass these assertions:     assert count(\"abcc\",\"c\") == 2\n    assert count(\"ababca\",\"a\") == 3\n    assert count(\"mnmm0pm\",\"m\") == 4.'''\n\n ", "entry_point": "count", "canonical_solution": "    def count(s,c) : \n        res = 0 \n        for i in range(len(s)) : \n            if (s[i] == c): \n                res = res + 1\n        return res ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"abcc\",\"c\") == 2\n    assert candidate(\"ababca\",\"a\") == 3\n    assert candidate(\"mnmm0pm\",\"m\") == 4\n"}
{"task_id": "MBPP/205", "prompt": "'''Write a function to find the inversions of tuple elements in the given tuple list. You need to pass these assertions:     assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\n    assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14).'''\n\n ", "entry_point": "inversion_elements", "canonical_solution": "    def inversion_elements(test_tup):\n      res = tuple(list(map(lambda x: ~x, list(test_tup))))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert candidate((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\n    assert candidate((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)\n"}
{"task_id": "MBPP/206", "prompt": "'''Write a function to perform the adjacent element concatenation in the given tuples. You need to pass these assertions:     assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD').'''\n\n ", "entry_point": "concatenate_elements", "canonical_solution": "    def concatenate_elements(test_tup):\n      res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert candidate((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    assert candidate((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n"}
{"task_id": "MBPP/207", "prompt": "'''Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions. You need to pass these assertions:     assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n    assert find_longest_repeating_subseq(\"aabb\") == 2\n    assert find_longest_repeating_subseq(\"aab\") == 1.'''\n\n ", "entry_point": "find_longest_repeating_subseq", "canonical_solution": "    def find_longest_repeating_subseq(str): \n    \tn = len(str) \n    \tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n    \tfor i in range(1, n+1): \n    \t\tfor j in range(1, n+1): \n    \t\t\tif (str[i-1] == str[j-1] and i != j): \n    \t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \n    \t\t\telse: \n    \t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n    \treturn dp[n][n]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"AABEBCDD\") == 3\n    assert candidate(\"aabb\") == 2\n    assert candidate(\"aab\") == 1\n"}
{"task_id": "MBPP/208", "prompt": "'''Write a function to check the given decimal with a precision of 2 by using regex. You need to pass these assertions:     assert is_decimal('123.11') == True\n    assert is_decimal('0.21') == True\n    assert is_decimal('123.1214') == False.'''\n\n ", "entry_point": "is_decimal", "canonical_solution": "    import re\n    def is_decimal(num):\n      num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n      result = num_fetch.search(num)\n      return bool(result)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('123.11') == True\n    assert candidate('0.21') == True\n    assert candidate('123.1214') == False\n"}
{"task_id": "MBPP/209", "prompt": "'''Write a function to delete the smallest element from the given heap and then insert a new item. You need to pass these assertions:     assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89].'''\n\n ", "entry_point": "heap_replace", "canonical_solution": "    import heapq as hq\n    def heap_replace(heap,a):\n      hq.heapify(heap)\n      hq.heapreplace(heap, a)\n      return heap", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]\n"}
{"task_id": "MBPP/210", "prompt": "'''Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex. You need to pass these assertions:     assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n    assert is_allowed_specific_char(\"*&%@#!}{\") == False\n    assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True.'''\n\n ", "entry_point": "is_allowed_specific_char", "canonical_solution": "    import re\n    def is_allowed_specific_char(string):\n        get_char = re.compile(r'[^a-zA-Z0-9.]')\n        string = get_char.search(string)\n        return not bool(string)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"ABCDEFabcdef123450\") == True\n    assert candidate(\"*&%@#!}{\") == False\n    assert candidate(\"HELLOhowareyou98765\") == True\n"}
{"task_id": "MBPP/211", "prompt": "'''Write a python function to count numbers whose oth and nth bits are set. You need to pass these assertions:     assert count_Num(2) == 1\n    assert count_Num(3) == 2\n    assert count_Num(1) == 1.'''\n\n ", "entry_point": "count_Num", "canonical_solution": "    def count_Num(n): \n        if (n == 1): \n            return 1\n        count = pow(2,n - 2) \n        return count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n    assert candidate(1) == 1\n"}
{"task_id": "MBPP/212", "prompt": "'''Write a python function to find the sum of fourth power of n natural numbers. You need to pass these assertions:     assert fourth_Power_Sum(2) == 17\n    assert fourth_Power_Sum(4) == 354\n    assert fourth_Power_Sum(6) == 2275.'''\n\n ", "entry_point": "fourth_Power_Sum", "canonical_solution": "    import math  \n    def fourth_Power_Sum(n): \n        sum = 0\n        for i in range(1,n+1) : \n            sum = sum + (i*i*i*i) \n        return sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 17\n    assert candidate(4) == 354\n    assert candidate(6) == 2275\n"}
{"task_id": "MBPP/213", "prompt": "'''Write a function to perform the concatenation of two string tuples. You need to pass these assertions:     assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi').'''\n\n ", "entry_point": "concatenate_strings", "canonical_solution": "    def concatenate_strings(test_tup1, test_tup2):\n      res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert candidate((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    assert candidate((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n"}
{"task_id": "MBPP/214", "prompt": "'''Write a function to convert radians to degrees. You need to pass these assertions:     assert degree_radian(90)==5156.620156177409\n    assert degree_radian(60)==3437.746770784939\n    assert degree_radian(120)==6875.493541569878.'''\n\n ", "entry_point": "degree_radian", "canonical_solution": "    import math\n    def degree_radian(radian):\n     degree = radian*(180/math.pi)\n     return degree", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(90)==5156.620156177409\n    assert candidate(60)==3437.746770784939\n    assert candidate(120)==6875.493541569878\n"}
{"task_id": "MBPP/215", "prompt": "'''Write a function to decode a run-length encoded given list. You need to pass these assertions:     assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n    assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n'].'''\n\n ", "entry_point": "decode_list", "canonical_solution": "    def decode_list(alist):\n        def aux(g):\n            if isinstance(g, list):\n                return [(g[1], range(g[0]))]\n            else:\n                return [(g, [0])]\n        return [x for g in alist for x, R in aux(g) for i in R]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n    assert candidate(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\n"}
{"task_id": "MBPP/216", "prompt": "'''Write a function to check if a nested list is a subset of another nested list. You need to pass these assertions:     assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n    assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\n    assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False.'''\n\n ", "entry_point": "check_subset_list", "canonical_solution": "    def check_subset_list(list1, list2): \n        l1, l2 = list1[0], list2[0] \n        exist = True\n        for i in list2: \n            if i not in list1: \n                exist = False\n        return exist ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\n    assert candidate([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\n"}
{"task_id": "MBPP/217", "prompt": "'''Write a python function to find the first repeated character in a given string. You need to pass these assertions:     assert first_Repeated_Char(\"Google\") == \"o\"\n    assert first_Repeated_Char(\"data\") == \"a\"\n    assert first_Repeated_Char(\"python\") == '\\0'.'''\n\n ", "entry_point": "first_Repeated_Char", "canonical_solution": "    def first_Repeated_Char(str): \n        h = {}\n        for ch in str:\n            if ch in h: \n                return ch;\n            else: \n                h[ch] = 0\n        return '\\0'", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"Google\") == \"o\"\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"python\") == '\\0'\n"}
{"task_id": "MBPP/218", "prompt": "'''Write a python function to find the minimum operations required to make two numbers equal. You need to pass these assertions:     assert min_Operations(2,4) == 1\n    assert min_Operations(4,10) == 4\n    assert min_Operations(1,4) == 3.'''\n\n ", "entry_point": "min_Operations", "canonical_solution": "    import math   \n    def min_Operations(A,B):  \n        if (A > B): \n            swap(A,B)  \n        B = B // math.gcd(A,B);  \n        return B - 1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2,4) == 1\n    assert candidate(4,10) == 4\n    assert candidate(1,4) == 3\n"}
{"task_id": "MBPP/219", "prompt": "'''Write a function to extract maximum and minimum k elements in the given tuple. You need to pass these assertions:     assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\n    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11).'''\n\n ", "entry_point": "extract_min_max", "canonical_solution": "    \n    def extract_min_max(test_tup, K):\n      res = []\n      test_tup = list(test_tup)\n      temp = sorted(test_tup)\n      for idx, val in enumerate(temp):\n        if idx < K or idx >= len(temp) - K:\n          res.append(val)\n      res = tuple(res)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert candidate((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\n    assert candidate((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)\n"}
{"task_id": "MBPP/220", "prompt": "'''Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon. You need to pass these assertions:     assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\n    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim').'''\n\n ", "entry_point": "replace_max_specialchar", "canonical_solution": "    import re\n    def replace_max_specialchar(text,n):\n     return (re.sub(\"[ ,.]\", \":\", text, n))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert candidate('a b c,d e f',3)==('a:b:c:d e f')\n    assert candidate('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\n"}
{"task_id": "MBPP/221", "prompt": "'''Write a python function to find the first even number in a given list of numbers. You need to pass these assertions:     assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert first_even([2, 3, 4]) == 2\n    assert first_even([5, 6, 7]) == 6.'''\n\n ", "entry_point": "first_even", "canonical_solution": "    def first_even(nums):\n        first_even = next((el for el in nums if el%2==0),-1)\n        return first_even", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert candidate([2, 3, 4]) == 2\n    assert candidate([5, 6, 7]) == 6\n"}
{"task_id": "MBPP/222", "prompt": "'''Write a function to check if all the elements in tuple have same data type or not. You need to pass these assertions:     assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((1, 2, \"4\") ) == False\n    assert check_type((3, 2, 1, 4, 5) ) == True.'''\n\n ", "entry_point": "check_type", "canonical_solution": "    def check_type(test_tuple):\n      res = True\n      for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n          res = False\n          break\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n"}
{"task_id": "MBPP/223", "prompt": "'''Write a function to check for majority element in the given sorted array. You need to pass these assertions:     assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True.'''\n\n ", "entry_point": "is_majority", "canonical_solution": "    def is_majority(arr, n, x):\n    \ti = binary_search(arr, 0, n-1, x)\n    \tif i == -1:\n    \t\treturn False\n    \tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n    \t\treturn True\n    \telse:\n    \t\treturn False\n    def binary_search(arr, low, high, x):\n    \tif high >= low:\n    \t\tmid = (low + high)//2 \n    \t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n    \t\t\treturn mid\n    \t\telif x > arr[mid]:\n    \t\t\treturn binary_search(arr, (mid + 1), high, x)\n    \t\telse:\n    \t\t\treturn binary_search(arr, low, (mid -1), x)\n    \treturn -1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n"}
{"task_id": "MBPP/224", "prompt": "'''Write a python function to count set bits of a given number. You need to pass these assertions:     assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(4) == 1\n    assert count_Set_Bits(6) == 2.'''\n\n ", "entry_point": "count_Set_Bits", "canonical_solution": "    def count_Set_Bits(n): \n        count = 0\n        while (n): \n            count += n & 1\n            n >>= 1\n        return count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n"}
{"task_id": "MBPP/225", "prompt": "'''Write a python function to find the minimum element in a sorted and rotated array. You need to pass these assertions:     assert find_Min([1,2,3,4,5],0,4) == 1\n    assert find_Min([4,6,8],0,2) == 4\n    assert find_Min([2,3,5,7,9],0,4) == 2.'''\n\n ", "entry_point": "find_Min", "canonical_solution": "    def find_Min(arr,low,high): \n        while (low < high): \n            mid = low + (high - low) // 2;   \n            if (arr[mid] == arr[high]): \n                high -= 1; \n            elif (arr[mid] > arr[high]): \n                low = mid + 1; \n            else: \n                high = mid; \n        return arr[high]; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],0,4) == 1\n    assert candidate([4,6,8],0,2) == 4\n    assert candidate([2,3,5,7,9],0,4) == 2\n"}
{"task_id": "MBPP/226", "prompt": "'''Write a python function to remove the characters which have odd index values of a given string. You need to pass these assertions:     assert odd_values_string('abcdef') == 'ace'\n    assert odd_values_string('python') == 'pto'\n    assert odd_values_string('data') == 'dt'.'''\n\n ", "entry_point": "odd_values_string", "canonical_solution": "    def odd_values_string(str):\n      result = \"\" \n      for i in range(len(str)):\n        if i % 2 == 0:\n          result = result + str[i]\n      return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n"}
{"task_id": "MBPP/227", "prompt": "'''Write a function to find minimum of three numbers. You need to pass these assertions:     assert min_of_three(10,20,0)==0\n    assert min_of_three(19,15,18)==15\n    assert min_of_three(-10,-20,-30)==-30.'''\n\n ", "entry_point": "min_of_three", "canonical_solution": "    def min_of_three(a,b,c): \n          if (a <= b) and (a <= c): \n            smallest = a \n          elif (b <= a) and (b <= c): \n            smallest = b \n          else: \n            smallest = c \n          return smallest ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,20,0)==0\n    assert candidate(19,15,18)==15\n    assert candidate(-10,-20,-30)==-30\n"}
{"task_id": "MBPP/228", "prompt": "'''Write a python function to check whether all the bits are unset in the given range or not. You need to pass these assertions:     assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n    assert all_Bits_Set_In_The_Given_Range(17,2,4) == True\n    assert all_Bits_Set_In_The_Given_Range(39,4,6) == False.'''\n\n ", "entry_point": "all_Bits_Set_In_The_Given_Range", "canonical_solution": "    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n        num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n        new_num = n & num\n        if (new_num == 0): \n            return True\n        return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,1,2) == True\n    assert candidate(17,2,4) == True\n    assert candidate(39,4,6) == False\n"}
{"task_id": "MBPP/229", "prompt": "'''Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones. You need to pass these assertions:     assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85].'''\n\n ", "entry_point": "re_arrange_array", "canonical_solution": "    def re_arrange_array(arr, n):\n      j=0\n      for i in range(0, n):\n        if (arr[i] < 0):\n          temp = arr[i]\n          arr[i] = arr[j]\n          arr[j] = temp\n          j = j + 1\n      return arr", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n"}
{"task_id": "MBPP/230", "prompt": "'''Write a function to replace blank spaces with any character in a string. You need to pass these assertions:     assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n    assert replace_blank(\"python program language\",'$')==(\"python$program$language\")\n    assert replace_blank(\"blank space\",\"-\")==(\"blank-space\").'''\n\n ", "entry_point": "replace_blank", "canonical_solution": "    def replace_blank(str1,char):\n     str2 = str1.replace(' ', char)\n     return str2", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"hello people\",'@')==(\"hello@people\")\n    assert candidate(\"python program language\",'$')==(\"python$program$language\")\n    assert candidate(\"blank space\",\"-\")==(\"blank-space\")\n"}
{"task_id": "MBPP/231", "prompt": "'''Write a function to find the maximum sum in the given right triangle of numbers. You need to pass these assertions:     assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n    assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \n    assert max_sum([[2], [3,2], [13,23,12]], 3) == 28.'''\n\n ", "entry_point": "max_sum", "canonical_solution": "    def max_sum(tri, n): \n    \tif n > 1: \n    \t\ttri[1][1] = tri[1][1]+tri[0][0] \n    \t\ttri[1][0] = tri[1][0]+tri[0][0] \n    \tfor i in range(2, n): \n    \t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n    \t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n    \t\tfor j in range(1, i): \n    \t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n    \t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \n    \t\t\telse: \n    \t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \n    \treturn (max(tri[n-1]))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1], [2,1], [3,3,2]], 3) == 6\n    assert candidate([[1], [1, 2], [4, 1, 12]], 3) == 15 \n    assert candidate([[2], [3,2], [13,23,12]], 3) == 28\n"}
{"task_id": "MBPP/232", "prompt": "'''Write a function to get the n largest items from a dataset. You need to pass these assertions:     assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80].'''\n\n ", "entry_point": "larg_nnum", "canonical_solution": "    import heapq\n    def larg_nnum(list1,n):\n     largest=heapq.nlargest(n,list1)\n     return largest", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]\n"}
{"task_id": "MBPP/233", "prompt": "'''Write a function to find the lateral surface area of a cylinder. You need to pass these assertions:     assert lateralsuface_cylinder(10,5)==314.15000000000003\n    assert lateralsuface_cylinder(4,5)==125.66000000000001\n    assert lateralsuface_cylinder(4,10)==251.32000000000002.'''\n\n ", "entry_point": "lateralsuface_cylinder", "canonical_solution": "    def lateralsuface_cylinder(r,h):\n      lateralsurface= 2*3.1415*r*h\n      return lateralsurface", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,5)==314.15000000000003\n    assert candidate(4,5)==125.66000000000001\n    assert candidate(4,10)==251.32000000000002\n"}
{"task_id": "MBPP/234", "prompt": "'''Write a function to find the volume of a cube. You need to pass these assertions:     assert volume_cube(3)==27\n    assert volume_cube(2)==8\n    assert volume_cube(5)==125.'''\n\n ", "entry_point": "volume_cube", "canonical_solution": "    def volume_cube(l):\n      volume = l * l * l\n      return volume", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3)==27\n    assert candidate(2)==8\n    assert candidate(5)==125\n"}
{"task_id": "MBPP/235", "prompt": "'''Write a python function to set all even bits of a given number. You need to pass these assertions:     assert even_bit_set_number(10) == 10\n    assert even_bit_set_number(20) == 30\n    assert even_bit_set_number(30) == 30.'''\n\n ", "entry_point": "even_bit_set_number", "canonical_solution": "    def even_bit_set_number(n): \n        count = 0;res = 0;temp = n \n        while(temp > 0): \n            if (count % 2 == 1): \n                res |= (1 << count)\n            count+=1\n            temp >>= 1\n        return (n | res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 10\n    assert candidate(20) == 30\n    assert candidate(30) == 30\n"}
{"task_id": "MBPP/236", "prompt": "'''Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle. You need to pass these assertions:     assert No_of_Triangle(4,2) == 7\n    assert No_of_Triangle(4,3) == 3\n    assert No_of_Triangle(1,3) == -1.'''\n\n ", "entry_point": "No_of_Triangle", "canonical_solution": "    def No_of_Triangle(N,K):\n        if (N < K):\n            return -1;\n        else:\n            Tri_up = 0;\n            Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n            Tri_down = 0;\n            Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n            return Tri_up + Tri_down;", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,2) == 7\n    assert candidate(4,3) == 3\n    assert candidate(1,3) == -1\n"}
{"task_id": "MBPP/237", "prompt": "'''Write a function to check the occurrences of records which occur similar times in the given tuples. You need to pass these assertions:     assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}.'''\n\n ", "entry_point": "check_occurences", "canonical_solution": "    from collections import Counter \n    def check_occurences(test_list):\n      res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n      return  (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n"}
{"task_id": "MBPP/238", "prompt": "'''Write a python function to count number of non-empty substrings of a given string. You need to pass these assertions:     assert number_of_substrings(\"abc\") == 6\n    assert number_of_substrings(\"abcd\") == 10\n    assert number_of_substrings(\"abcde\") == 15.'''\n\n ", "entry_point": "number_of_substrings", "canonical_solution": "    def number_of_substrings(str): \n    \tstr_len = len(str); \n    \treturn int(str_len * (str_len + 1) / 2); ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n"}
{"task_id": "MBPP/239", "prompt": "'''Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m. You need to pass these assertions:     assert get_total_number_of_sequences(10, 4) == 4\n    assert get_total_number_of_sequences(5, 2) == 6\n    assert get_total_number_of_sequences(16, 3) == 84.'''\n\n ", "entry_point": "get_total_number_of_sequences", "canonical_solution": "    def get_total_number_of_sequences(m,n): \n    \tT=[[0 for i in range(n+1)] for i in range(m+1)] \n    \tfor i in range(m+1): \n    \t\tfor j in range(n+1): \n    \t\t\tif i==0 or j==0: \n    \t\t\t\tT[i][j]=0\n    \t\t\telif i<j: \n    \t\t\t\tT[i][j]=0\n    \t\t\telif j==1: \n    \t\t\t\tT[i][j]=i \n    \t\t\telse: \n    \t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n    \treturn T[m][n]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n"}
{"task_id": "MBPP/240", "prompt": "'''Write a function to replace the last element of the list with another list. You need to pass these assertions:     assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"].'''\n\n ", "entry_point": "replace_list", "canonical_solution": "    def replace_list(list1,list2):\n     list1[-1:] = list2\n     replace_list=list1\n     return replace_list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert candidate([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n"}
{"task_id": "MBPP/241", "prompt": "'''Write a function to generate a 3d array having each element as '*'. You need to pass these assertions:     assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n    assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]].'''\n\n ", "entry_point": "array_3d", "canonical_solution": "    def array_3d(m,n,o):\n     array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n     return array_3d", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    assert candidate(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n    assert candidate(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]\n"}
{"task_id": "MBPP/242", "prompt": "'''Write a function to count total characters in a string. You need to pass these assertions:     assert count_charac(\"python programming\")==18\n    assert count_charac(\"language\")==8\n    assert count_charac(\"words\")==5.'''\n\n ", "entry_point": "count_charac", "canonical_solution": "    def count_charac(str1):\n     total = 0\n     for i in str1:\n        total = total + 1\n     return total", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python programming\")==18\n    assert candidate(\"language\")==8\n    assert candidate(\"words\")==5\n"}
{"task_id": "MBPP/243", "prompt": "'''Write a function to sort the given list based on the occurrence of first element of tuples. You need to pass these assertions:     assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)].'''\n\n ", "entry_point": "sort_on_occurence", "canonical_solution": "    def sort_on_occurence(lst): \n    \tdct = {} \n    \tfor i, j in lst: \n    \t\tdct.setdefault(i, []).append(j) \n    \treturn ([(i, *dict.fromkeys(j), len(j)) \n    \t\t\t\tfor i, j in dct.items()]) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert candidate([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    assert candidate([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n"}
{"task_id": "MBPP/244", "prompt": "'''Write a python function to find the next perfect square greater than a given number. You need to pass these assertions:     assert next_Perfect_Square(35) == 36\n    assert next_Perfect_Square(6) == 9\n    assert next_Perfect_Square(9) == 16.'''\n\n ", "entry_point": "next_Perfect_Square", "canonical_solution": "    import math  \n    def next_Perfect_Square(N): \n        nextN = math.floor(math.sqrt(N)) + 1\n        return nextN * nextN ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n"}
{"task_id": "MBPP/245", "prompt": "'''Write a function to find the maximum sum of bi-tonic sub-sequence for the given array. You need to pass these assertions:     assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\n    assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138.'''\n\n ", "entry_point": "max_sum", "canonical_solution": "    def max_sum(arr, n): \n    \tMSIBS = arr[:] \n    \tfor i in range(n): \n    \t\tfor j in range(0, i): \n    \t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n    \t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n    \tMSDBS = arr[:] \n    \tfor i in range(1, n + 1): \n    \t\tfor j in range(1, i): \n    \t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n    \t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n    \tmax_sum = float(\"-Inf\") \n    \tfor i, j, k in zip(MSIBS, MSDBS, arr): \n    \t\tmax_sum = max(max_sum, i + j - k) \n    \treturn max_sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert candidate([80, 60, 30, 40, 20, 10], 6) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\n"}
{"task_id": "MBPP/246", "prompt": "'''Write a function for computing square roots using the babylonian method. You need to pass these assertions:     assert babylonian_squareroot(10)==3.162277660168379\n    assert babylonian_squareroot(2)==1.414213562373095\n    assert babylonian_squareroot(9)==3.0.'''\n\n ", "entry_point": "babylonian_squareroot", "canonical_solution": "    def babylonian_squareroot(number):\n        if(number == 0):\n            return 0;\n        g = number/2.0;\n        g2 = g + 1;\n        while(g != g2):\n            n = number/ g;\n            g2 = g;\n            g = (g + n)/2;\n        return g;", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10)==3.162277660168379\n    assert candidate(2)==1.414213562373095\n    assert candidate(9)==3.0\n"}
{"task_id": "MBPP/247", "prompt": "'''Write a function to find the longest palindromic subsequence in the given string. You need to pass these assertions:     assert lps(\"TENS FOR TENS\") == 5 \n    assert lps(\"CARDIO FOR CARDS\") == 7\n    assert lps(\"PART OF THE JOURNEY IS PART\") == 9 .'''\n\n ", "entry_point": "lps", "canonical_solution": "    def lps(str): \n    \tn = len(str) \n    \tL = [[0 for x in range(n)] for x in range(n)] \n    \tfor i in range(n): \n    \t\tL[i][i] = 1\n    \tfor cl in range(2, n+1): \n    \t\tfor i in range(n-cl+1): \n    \t\t\tj = i+cl-1\n    \t\t\tif str[i] == str[j] and cl == 2: \n    \t\t\t\tL[i][j] = 2\n    \t\t\telif str[i] == str[j]: \n    \t\t\t\tL[i][j] = L[i+1][j-1] + 2\n    \t\t\telse: \n    \t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n    \treturn L[0][n-1]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5 \n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9 \n"}
{"task_id": "MBPP/248", "prompt": "'''Write a function to calculate the harmonic sum of n-1. You need to pass these assertions:     assert harmonic_sum(7) == 2.5928571428571425\n    assert harmonic_sum(4) == 2.083333333333333\n    assert harmonic_sum(19) == 3.547739657143682.'''\n\n ", "entry_point": "harmonic_sum", "canonical_solution": "    def harmonic_sum(n):\n      if n < 2:\n        return 1\n      else:\n        return 1 / n + (harmonic_sum(n - 1)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(7) == 2.5928571428571425\n    assert candidate(4) == 2.083333333333333\n    assert candidate(19) == 3.547739657143682\n"}
{"task_id": "MBPP/249", "prompt": "'''Write a function to find the intersection of two arrays using lambda function. You need to pass these assertions:     assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10].'''\n\n ", "entry_point": "intersection_array", "canonical_solution": "    def intersection_array(array_nums1,array_nums2):\n     result = list(filter(lambda x: x in array_nums1, array_nums2)) \n     return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n"}
{"task_id": "MBPP/250", "prompt": "'''Write a python function to count the occcurences of an element in a tuple. You need to pass these assertions:     assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4.'''\n\n ", "entry_point": "count_X", "canonical_solution": "    def count_X(tup, x): \n        count = 0\n        for ele in tup: \n            if (ele == x): \n                count = count + 1\n        return count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n"}
{"task_id": "MBPP/251", "prompt": "'''Write a function to insert an element before each element of a list. You need to pass these assertions:     assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] .'''\n\n ", "entry_point": "insert_element", "canonical_solution": "    def insert_element(list,element):\n     list = [v for elt in list for v in (element, elt)]\n     return list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] \n"}
{"task_id": "MBPP/252", "prompt": "'''Write a python function to convert complex numbers to polar coordinates. You need to pass these assertions:     assert convert(1) == (1.0, 0.0)\n    assert convert(4) == (4.0,0.0)\n    assert convert(5) == (5.0,0.0).'''\n\n ", "entry_point": "convert", "canonical_solution": "    import cmath  \n    def convert(numbers):    \n      num = cmath.polar(numbers)  \n      return (num) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0,0.0)\n    assert candidate(5) == (5.0,0.0)\n"}
{"task_id": "MBPP/253", "prompt": "'''Write a python function to count integers from a given list. You need to pass these assertions:     assert count_integer([1,2,'abc',1.2]) == 2\n    assert count_integer([1,2,3]) == 3\n    assert count_integer([1,1.2,4,5.1]) == 2.'''\n\n ", "entry_point": "count_integer", "canonical_solution": "    def count_integer(list1):\n        ctr = 0\n        for i in list1:\n            if isinstance(i, int):\n                ctr = ctr + 1\n        return ctr", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n"}
{"task_id": "MBPP/254", "prompt": "'''Write a function to find all words starting with 'a' or 'e' in a given string. You need to pass these assertions:     assert words_ae(\"python programe\")==['ame']\n    assert words_ae(\"python programe language\")==['ame','anguage']\n    assert words_ae(\"assert statement\")==['assert', 'atement'].'''\n\n ", "entry_point": "words_ae", "canonical_solution": "    import re\n    def words_ae(text):\n     list = re.findall(\"[ae]\\w+\", text)\n     return list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python programe\")==['ame']\n    assert candidate(\"python programe language\")==['ame','anguage']\n    assert candidate(\"assert statement\")==['assert', 'atement']\n"}
{"task_id": "MBPP/255", "prompt": "'''Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions. You need to pass these assertions:     assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')].'''\n\n ", "entry_point": "combinations_colors", "canonical_solution": "    from itertools import combinations_with_replacement \n    def combinations_colors(l, n):\n        return list(combinations_with_replacement(l,n))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n"}
{"task_id": "MBPP/256", "prompt": "'''Write a python function to count the number of prime numbers less than a given non-negative number. You need to pass these assertions:     assert count_Primes_nums(5) == 2\n    assert count_Primes_nums(10) == 4\n    assert count_Primes_nums(100) == 25.'''\n\n ", "entry_point": "count_Primes_nums", "canonical_solution": "    def count_Primes_nums(n):\n        ctr = 0\n        for num in range(n):\n            if num <= 1:\n                continue\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                ctr += 1\n        return ctr", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n"}
{"task_id": "MBPP/257", "prompt": "'''Write a function to swap two numbers. You need to pass these assertions:     assert swap_numbers(10,20)==(20,10)\n    assert swap_numbers(15,17)==(17,15)\n    assert swap_numbers(100,200)==(200,100).'''\n\n ", "entry_point": "swap_numbers", "canonical_solution": "    def swap_numbers(a,b):\n     temp = a\n     a = b\n     b = temp\n     return (a,b)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n"}
{"task_id": "MBPP/258", "prompt": "'''Write a function to find number of odd elements in the given list using lambda function. You need to pass these assertions:     assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n    assert count_odd([10,15,14,13,-18,12,-20])==2\n    assert count_odd([1, 2, 4, 8, 9])==2.'''\n\n ", "entry_point": "count_odd", "canonical_solution": "    def count_odd(array_nums):\n       count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n       return count_odd", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 10])==4\n    assert candidate([10,15,14,13,-18,12,-20])==2\n    assert candidate([1, 2, 4, 8, 9])==2\n"}
{"task_id": "MBPP/259", "prompt": "'''Write a function to maximize the given two tuples. You need to pass these assertions:     assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12)).'''\n\n ", "entry_point": "maximize_elements", "canonical_solution": "    def maximize_elements(test_tup1, test_tup2):\n      res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n       for tup1, tup2 in zip(test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n"}
{"task_id": "MBPP/260", "prompt": "'''Write a function to find the nth newman\u2013shanks\u2013williams prime number. You need to pass these assertions:     assert newman_prime(3) == 7 \n    assert newman_prime(4) == 17\n    assert newman_prime(5) == 41.'''\n\n ", "entry_point": "newman_prime", "canonical_solution": "    def newman_prime(n): \n    \tif n == 0 or n == 1: \n    \t\treturn 1\n    \treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3) == 7 \n    assert candidate(4) == 17\n    assert candidate(5) == 41\n"}
{"task_id": "MBPP/261", "prompt": "'''Write a function to perform mathematical division operation across the given tuples. You need to pass these assertions:     assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2).'''\n\n ", "entry_point": "division_elements", "canonical_solution": "    def division_elements(test_tup1, test_tup2):\n      res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n"}
{"task_id": "MBPP/262", "prompt": "'''Write a function to split a given list into two parts where the length of the first part of the list is given. You need to pass these assertions:     assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n']).'''\n\n ", "entry_point": "split_two_parts", "canonical_solution": "    def split_two_parts(list1, L):\n        return list1[:L], list1[L:]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n"}
{"task_id": "MBPP/263", "prompt": "'''Write a function to merge two dictionaries. You need to pass these assertions:     assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n    assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}.'''\n\n ", "entry_point": "merge_dict", "canonical_solution": "    def merge_dict(d1,d2):\n     d = d1.copy()\n     d.update(d2)\n     return d", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n    assert candidate({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\n"}
{"task_id": "MBPP/264", "prompt": "'''Write a function to calculate a dog's age in dog's years. You need to pass these assertions:     assert dog_age(12)==61\n    assert dog_age(15)==73\n    assert dog_age(24)==109.'''\n\n ", "entry_point": "dog_age", "canonical_solution": "    def dog_age(h_age):\n     if h_age < 0:\n     \texit()\n     elif h_age <= 2:\n    \t d_age = h_age * 10.5\n     else:\n    \t d_age = 21 + (h_age - 2)*4\n     return d_age", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n"}
{"task_id": "MBPP/265", "prompt": "'''Write a function to split a list for every nth element. You need to pass these assertions:     assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n    assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] .'''\n\n ", "entry_point": "list_split", "canonical_solution": "    def list_split(S, step):\n        return [S[i::step] for i in range(step)]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \n"}
{"task_id": "MBPP/266", "prompt": "'''Write a function to find the lateral surface area of a cube. You need to pass these assertions:     assert lateralsurface_cube(5)==100\n    assert lateralsurface_cube(9)==324\n    assert lateralsurface_cube(10)==400.'''\n\n ", "entry_point": "lateralsurface_cube", "canonical_solution": "    def lateralsurface_cube(l):\n      LSA = 4 * (l * l)\n      return LSA", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n"}
{"task_id": "MBPP/267", "prompt": "'''Write a python function to find the sum of squares of first n odd natural numbers. You need to pass these assertions:     assert square_Sum(2) == 10\n    assert square_Sum(3) == 35\n    assert square_Sum(4) == 84.'''\n\n ", "entry_point": "square_Sum", "canonical_solution": "    def square_Sum(n):  \n        return int(n*(4*n*n-1)/3) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n"}
{"task_id": "MBPP/268", "prompt": "'''Write a function to find the n'th star number. You need to pass these assertions:     assert find_star_num(3) == 37\n    assert find_star_num(4) == 73\n    assert find_star_num(5) == 121.'''\n\n ", "entry_point": "find_star_num", "canonical_solution": "    def find_star_num(n): \n    \treturn (6 * n * (n - 1) + 1) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n"}
{"task_id": "MBPP/269", "prompt": "'''Write a function to find the ascii value of a character. You need to pass these assertions:     assert ascii_value('A')==65\n    assert ascii_value('R')==82\n    assert ascii_value('S')==83.'''\n\n ", "entry_point": "ascii_value", "canonical_solution": "    def ascii_value(k):\n      ch=k\n      return ord(ch)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n"}
{"task_id": "MBPP/270", "prompt": "'''Write a python function to find the sum of even numbers at even positions. You need to pass these assertions:     assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n    assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n    assert sum_even_and_even_index([5, 6, 12, 1],4) == 12.'''\n\n ", "entry_point": "sum_even_and_even_index", "canonical_solution": "    def sum_even_and_even_index(arr,n):  \n        i = 0\n        sum = 0\n        for i in range(0,n,2): \n            if (arr[i] % 2 == 0) : \n                sum += arr[i]  \n        return sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8],6) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n    assert candidate([5, 6, 12, 1],4) == 12\n"}
{"task_id": "MBPP/271", "prompt": "'''Write a python function to find the sum of fifth power of first n even natural numbers. You need to pass these assertions:     assert even_Power_Sum(2) == 1056\n    assert even_Power_Sum(3) == 8832\n    assert even_Power_Sum(1) == 32.'''\n\n ", "entry_point": "even_Power_Sum", "canonical_solution": "    def even_Power_Sum(n): \n        sum = 0; \n        for i in range(1,n+1): \n            j = 2*i; \n            sum = sum + (j*j*j*j*j); \n        return sum; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n"}
{"task_id": "MBPP/272", "prompt": "'''Write a function to perfom the rear element extraction from list of tuples records. You need to pass these assertions:     assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56].'''\n\n ", "entry_point": "rear_extract", "canonical_solution": "    def rear_extract(test_list):\n      res = [lis[-1] for lis in test_list]\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n"}
{"task_id": "MBPP/273", "prompt": "'''Write a function to substract the contents of one tuple with corresponding index of other tuple. You need to pass these assertions:     assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3).'''\n\n ", "entry_point": "substract_elements", "canonical_solution": "    def substract_elements(test_tup1, test_tup2):\n      res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n"}
{"task_id": "MBPP/274", "prompt": "'''Write a python function to find sum of even index binomial coefficients. You need to pass these assertions:     assert even_binomial_Coeff_Sum(4) == 8\n    assert even_binomial_Coeff_Sum(6) == 32\n    assert even_binomial_Coeff_Sum(2) == 2.'''\n\n ", "entry_point": "even_binomial_Coeff_Sum", "canonical_solution": "    import math  \n    def even_binomial_Coeff_Sum( n): \n        return (1 << (n - 1)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n"}
{"task_id": "MBPP/275", "prompt": "'''Write a python function to find the position of the last removed element from the given array. You need to pass these assertions:     assert get_Position([2,5,4],3,2) == 2\n    assert get_Position([4,3],2,2) == 2\n    assert get_Position([1,2,3,4],4,1) == 4.'''\n\n ", "entry_point": "get_Position", "canonical_solution": "    import math as mt \n    def get_Position(a,n,m): \n        for i in range(n): \n            a[i] = (a[i] // m + (a[i] % m != 0))  \n        result,maxx = -1,-1\n        for i in range(n - 1,-1,-1): \n            if (maxx < a[i]): \n                maxx = a[i] \n                result = i \n        return result + 1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2,5,4],3,2) == 2\n    assert candidate([4,3],2,2) == 2\n    assert candidate([1,2,3,4],4,1) == 4\n"}
{"task_id": "MBPP/276", "prompt": "'''Write a function to find the volume of a cylinder. You need to pass these assertions:     assert volume_cylinder(10,5)==1570.7500000000002\n    assert volume_cylinder(4,5)==251.32000000000002\n    assert volume_cylinder(4,10)==502.64000000000004.'''\n\n ", "entry_point": "volume_cylinder", "canonical_solution": "    def volume_cylinder(r,h):\n      volume=3.1415*r*r*h\n      return volume", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,5)==1570.7500000000002\n    assert candidate(4,5)==251.32000000000002\n    assert candidate(4,10)==502.64000000000004\n"}
{"task_id": "MBPP/277", "prompt": "'''Write a function to filter a dictionary based on values. You need to pass these assertions:     assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}.'''\n\n ", "entry_point": "dict_filter", "canonical_solution": "    def dict_filter(dict,n):\n     result = {key:value for (key, value) in dict.items() if value >=n}\n     return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n"}
{"task_id": "MBPP/278", "prompt": "'''Write a function to find the element count that occurs before the record in the given tuple. You need to pass these assertions:     assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n    assert count_first_elements((2, 9, (5, 7), 11) ) == 2\n    assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4.'''\n\n ", "entry_point": "count_first_elements", "canonical_solution": "    def count_first_elements(test_tup):\n      for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n          break\n      return (count) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n"}
{"task_id": "MBPP/279", "prompt": "'''Write a function to find the nth decagonal number. You need to pass these assertions:     assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(7) == 175\n    assert is_num_decagonal(10) == 370.'''\n\n ", "entry_point": "is_num_decagonal", "canonical_solution": "    def is_num_decagonal(n): \n    \treturn 4 * n * n - 3 * n ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n"}
{"task_id": "MBPP/280", "prompt": "'''Write a function to search an element in the given array by using sequential search. You need to pass these assertions:     assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6).'''\n\n ", "entry_point": "sequential_search", "canonical_solution": "    def sequential_search(dlist, item):\n        pos = 0\n        found = False\n        while pos < len(dlist) and not found:\n            if dlist[pos] == item:\n                found = True\n            else:\n                pos = pos + 1\n        return found, pos", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n"}
{"task_id": "MBPP/281", "prompt": "'''Write a python function to check if the elements of a given list are unique or not. You need to pass these assertions:     assert all_unique([1,2,3]) == True\n    assert all_unique([1,2,1,2]) == False\n    assert all_unique([1,2,3,4,5]) == True.'''\n\n ", "entry_point": "all_unique", "canonical_solution": "    def all_unique(test_list):\n        if len(test_list) > len(set(test_list)):\n            return False\n        return True", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n"}
{"task_id": "MBPP/282", "prompt": "'''Write a function to substaract two lists using map and lambda function. You need to pass these assertions:     assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert sub_list([1,2],[3,4])==[-2,-2]\n    assert sub_list([90,120],[50,70])==[40,50].'''\n\n ", "entry_point": "sub_list", "canonical_solution": "    def sub_list(nums1,nums2):\n      result = map(lambda x, y: x - y, nums1, nums2)\n      return list(result)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n"}
{"task_id": "MBPP/283", "prompt": "'''Write a python function to check whether the frequency of each digit is less than or equal to the digit itself. You need to pass these assertions:     assert validate(1234) == True\n    assert validate(51241) == False\n    assert validate(321) == True.'''\n\n ", "entry_point": "validate", "canonical_solution": "    def validate(n): \n        for i in range(10): \n            temp = n;  \n            count = 0; \n            while (temp): \n                if (temp % 10 == i): \n                    count+=1;  \n                if (count > i): \n                    return False\n                temp //= 10; \n        return True", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n"}
{"task_id": "MBPP/284", "prompt": "'''Write a function to check whether all items of a list are equal to a given string. You need to pass these assertions:     assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert check_element([1,2,3,4],7)==False\n    assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True.'''\n\n ", "entry_point": "check_element", "canonical_solution": "    def check_element(list,element):\n      check_element=all(v== element for v in list)\n      return check_element", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],'green')==True\n"}
{"task_id": "MBPP/285", "prompt": "'''Write a function that matches a string that has an a followed by two to three 'b'. You need to pass these assertions:     assert text_match_two_three(\"ac\")==('Not matched!')\n    assert text_match_two_three(\"dc\")==('Not matched!')\n    assert text_match_two_three(\"abbbba\")==('Found a match!').'''\n\n ", "entry_point": "text_match_two_three", "canonical_solution": "    import re\n    def text_match_two_three(text):\n            patterns = 'ab{2,3}'\n            if re.search(patterns,  text):\n                    return 'Found a match!'\n            else:\n                    return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n"}
{"task_id": "MBPP/286", "prompt": "'''Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times. You need to pass these assertions:     assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\n    assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1.'''\n\n ", "entry_point": "max_sub_array_sum_repeated", "canonical_solution": "    def max_sub_array_sum_repeated(a, n, k): \n    \tmax_so_far = -2147483648\n    \tmax_ending_here = 0\n    \tfor i in range(n*k): \n    \t\tmax_ending_here = max_ending_here + a[i%n] \n    \t\tif (max_so_far < max_ending_here): \n    \t\t\tmax_so_far = max_ending_here \n    \t\tif (max_ending_here < 0): \n    \t\t\tmax_ending_here = 0\n    \treturn max_so_far", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n"}
{"task_id": "MBPP/287", "prompt": "'''Write a python function to find the sum of squares of first n even natural numbers. You need to pass these assertions:     assert square_Sum(2) == 20\n    assert square_Sum(3) == 56\n    assert square_Sum(4) == 120.'''\n\n ", "entry_point": "square_Sum", "canonical_solution": "    def square_Sum(n):  \n        return int(2*n*(n+1)*(2*n+1)/3)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n"}
{"task_id": "MBPP/288", "prompt": "'''Write a function to count array elements having modular inverse under given prime number p equal to itself. You need to pass these assertions:     assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\n    assert modular_inverse([2, 3, 4, 5], 4, 6) == 1.'''\n\n ", "entry_point": "modular_inverse", "canonical_solution": "    def modular_inverse(arr, N, P):\n    \tcurrent_element = 0\n    \tfor i in range(0, N):\n    \t\tif ((arr[i] * arr[i]) % P == 1):\n    \t\t\tcurrent_element = current_element + 1\n    \treturn current_element", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert candidate([1, 3, 8, 12, 12], 5, 13) == 3\n    assert candidate([2, 3, 4, 5], 4, 6) == 1\n"}
{"task_id": "MBPP/289", "prompt": "'''Write a python function to calculate the number of odd days in a given year. You need to pass these assertions:     assert odd_Days(100) == 5\n    assert odd_Days(50) ==6\n    assert odd_Days(75) == 2.'''\n\n ", "entry_point": "odd_Days", "canonical_solution": "    def odd_Days(N): \n        hund1 = N // 100\n        hund4 = N // 400\n        leap = N >> 2\n        ordd = N - leap \n        if (hund1): \n            ordd += hund1 \n            leap -= hund1 \n        if (hund4): \n            ordd -= hund4 \n            leap += hund4 \n        days = ordd + leap * 2\n        odd = days % 7\n        return odd ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(100) == 5\n    assert candidate(50) ==6\n    assert candidate(75) == 2\n"}
{"task_id": "MBPP/290", "prompt": "'''Write a function to find the list of lists with maximum length. You need to pass these assertions:     assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert max_length([[5], [15,20,25]])==(3, [15,20,25]).'''\n\n ", "entry_point": "max_length", "canonical_solution": "    def max_length(list1):\n        max_length = max(len(x) for x in  list1 )  \n        max_list = max((x) for x in   list1)\n        return(max_length, max_list)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert candidate([[5], [15,20,25]])==(3, [15,20,25])\n"}
{"task_id": "MBPP/291", "prompt": "'''Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. You need to pass these assertions:     assert count_no_of_ways(2, 4) == 16\n    assert count_no_of_ways(3, 2) == 6\n    assert count_no_of_ways(4, 4) == 228.'''\n\n ", "entry_point": "count_no_of_ways", "canonical_solution": "    def count_no_of_ways(n, k): \n    \tdp = [0] * (n + 1) \n    \ttotal = k \n    \tmod = 1000000007\n    \tdp[1] = k \n    \tdp[2] = k * k\t \n    \tfor i in range(3,n+1): \n    \t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n    \treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n"}
{"task_id": "MBPP/292", "prompt": "'''Write a python function to find quotient of two numbers. You need to pass these assertions:     assert find(10,3) == 3\n    assert find(4,2) == 2\n    assert find(20,5) == 4.'''\n\n ", "entry_point": "find", "canonical_solution": "    def find(n,m):  \n        q = n//m \n        return (q)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n"}
{"task_id": "MBPP/293", "prompt": "'''Write a function to find the third side of a right angled triangle. You need to pass these assertions:     assert otherside_rightangle(7,8)==10.63014581273465\n    assert otherside_rightangle(3,4)==5\n    assert otherside_rightangle(7,15)==16.55294535724685.'''\n\n ", "entry_point": "otherside_rightangle", "canonical_solution": "    import math\n    def otherside_rightangle(w,h):\n      s=math.sqrt((w*w)+(h*h))\n      return s", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n"}
{"task_id": "MBPP/294", "prompt": "'''Write a function to find the maximum value in a given heterogeneous list. You need to pass these assertions:     assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n    assert max_val(['Python', 15, 20, 25])==25\n    assert max_val(['Python', 30, 20, 40, 50, 'version'])==50.'''\n\n ", "entry_point": "max_val", "canonical_solution": "    def max_val(listval):\n         max_val = max(i for i in listval if isinstance(i, int)) \n         return(max_val)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5\n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n"}
{"task_id": "MBPP/295", "prompt": "'''Write a function to return the sum of all divisors of a number. You need to pass these assertions:     assert sum_div(8)==7\n    assert sum_div(12)==16\n    assert sum_div(7)==1.'''\n\n ", "entry_point": "sum_div", "canonical_solution": "    def sum_div(number):\n        divisors = [1]\n        for i in range(2, number):\n            if (number % i)==0:\n                divisors.append(i)\n        return sum(divisors)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n"}
{"task_id": "MBPP/296", "prompt": "'''Write a python function to count inversions in an array. You need to pass these assertions:     assert get_Inv_Count([1,20,6,4,5],5) == 5\n    assert get_Inv_Count([1,2,1],3) == 1\n    assert get_Inv_Count([1,2,5,6,1],5) == 3.'''\n\n ", "entry_point": "get_Inv_Count", "canonical_solution": "    def get_Inv_Count(arr,n): \n        inv_count = 0\n        for i in range(n): \n            for j in range(i + 1,n): \n                if (arr[i] > arr[j]): \n                    inv_count += 1\n        return inv_count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,20,6,4,5],5) == 5\n    assert candidate([1,2,1],3) == 1\n    assert candidate([1,2,5,6,1],5) == 3\n"}
{"task_id": "MBPP/297", "prompt": "'''Write a function to flatten a given nested list structure. You need to pass these assertions:     assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9].'''\n\n ", "entry_point": "flatten_list", "canonical_solution": "    def flatten_list(list1):\n        result_list = []\n        if not list1: return result_list\n        stack = [list(list1)]\n        while stack:\n            c_num = stack.pop()\n            next = c_num.pop()\n            if c_num: stack.append(c_num)\n            if isinstance(next, list):\n                if next: stack.append(list(next))\n            else: result_list.append(next)\n        result_list.reverse()\n        return result_list ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n"}
{"task_id": "MBPP/298", "prompt": "'''Write a function to find the nested list elements which are present in another list. You need to pass these assertions:     assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n    assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []].'''\n\n ", "entry_point": "intersection_nested_lists", "canonical_solution": "    def intersection_nested_lists(l1, l2):\n        result = [[n for n in lst if n in l1] for lst in l2]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n    assert candidate(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n"}
{"task_id": "MBPP/299", "prompt": "'''Write a function to calculate the maximum aggregate from the list of tuples. You need to pass these assertions:     assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70).'''\n\n ", "entry_point": "max_aggregate", "canonical_solution": "    from collections import defaultdict\n    def max_aggregate(stdata):\n        temp = defaultdict(int)\n        for name, marks in stdata:\n            temp[name] += marks\n        return max(temp.items(), key=lambda x: x[1])", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n"}
{"task_id": "MBPP/300", "prompt": "'''Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. You need to pass these assertions:     assert count_binary_seq(1) == 2.0\n    assert count_binary_seq(2) == 6.0\n    assert count_binary_seq(3) == 20.0.'''\n\n ", "entry_point": "count_binary_seq", "canonical_solution": "    def count_binary_seq(n): \n    \tnCr = 1\n    \tres = 1\n    \tfor r in range(1, n + 1): \n    \t\tnCr = (nCr * (n + 1 - r)) / r \n    \t\tres += nCr * nCr \n    \treturn res ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1) == 2.0\n    assert candidate(2) == 6.0\n    assert candidate(3) == 20.0\n"}
{"task_id": "MBPP/301", "prompt": "'''Write a function to find the depth of a dictionary. You need to pass these assertions:     assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({'a':1, 'b': {'c':'python'}})==2\n    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3.'''\n\n ", "entry_point": "dict_depth", "canonical_solution": "    def dict_depth(d):\n        if isinstance(d, dict):\n            return 1 + (max(map(dict_depth, d.values())) if d else 0)\n        return 0", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert candidate({'a':1, 'b': {'c':'python'}})==2\n    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n"}
{"task_id": "MBPP/302", "prompt": "'''Write a python function to find the most significant bit number which is also a set bit. You need to pass these assertions:     assert set_Bit_Number(6) == 4\n    assert set_Bit_Number(10) == 8\n    assert set_Bit_Number(18) == 16.'''\n\n ", "entry_point": "set_Bit_Number", "canonical_solution": "    def set_Bit_Number(n): \n        if (n == 0): \n            return 0; \n        msb = 0; \n        n = int(n / 2); \n        while (n > 0): \n            n = int(n / 2); \n            msb += 1; \n        return (1 << msb)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(6) == 4\n    assert candidate(10) == 8\n    assert candidate(18) == 16\n"}
{"task_id": "MBPP/303", "prompt": "'''Write a python function to check whether the count of inversion of two types are same or not. You need to pass these assertions:     assert solve([1,0,2],3) == True\n    assert solve([1,2,0],3) == False\n    assert solve([1,2,1],3) == True.'''\n\n ", "entry_point": "solve", "canonical_solution": "    import sys \n    def solve(a,n):   \n        mx = -sys.maxsize - 1\n        for j in range(1,n):  \n            if (mx > a[j]):  \n                return False  \n            mx = max(mx,a[j - 1])    \n        return True", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,0,2],3) == True\n    assert candidate([1,2,0],3) == False\n    assert candidate([1,2,1],3) == True\n"}
{"task_id": "MBPP/304", "prompt": "'''Write a python function to find element at a given index after number of rotations. You need to pass these assertions:     assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1.'''\n\n ", "entry_point": "find_Element", "canonical_solution": "    def find_Element(arr,ranges,rotations,index) :  \n        for i in range(rotations - 1,-1,-1 ) : \n            left = ranges[i][0] \n            right = ranges[i][1] \n            if (left <= index and right >= index) : \n                if (index == left) : \n                    index = right \n                else : \n                    index = index - 1 \n        return arr[index] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n"}
{"task_id": "MBPP/305", "prompt": "'''Write a function to match two words from a list of words starting with letter 'p'. You need to pass these assertions:     assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr').'''\n\n ", "entry_point": "start_withp", "canonical_solution": "    import re\n    def start_withp(words):\n     for w in words:\n            m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n            if m:\n                return m.groups()", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert candidate([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert candidate([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n"}
{"task_id": "MBPP/306", "prompt": "'''Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i . You need to pass these assertions:     assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71.'''\n\n ", "entry_point": "max_sum_increasing_subseq", "canonical_solution": "    def max_sum_increasing_subseq(a, n, index, k):\n    \tdp = [[0 for i in range(n)] \n    \t\t\tfor i in range(n)]\n    \tfor i in range(n):\n    \t\tif a[i] > a[0]:\n    \t\t\tdp[0][i] = a[i] + a[0]\n    \t\telse:\n    \t\t\tdp[0][i] = a[i]\n    \tfor i in range(1, n):\n    \t\tfor j in range(n):\n    \t\t\tif a[j] > a[i] and j > i:\n    \t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n    \t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n    \t\t\t\telse:\n    \t\t\t\t\tdp[i][j] = dp[i - 1][j]\n    \t\t\telse:\n    \t\t\t\tdp[i][j] = dp[i - 1][j]\n    \treturn dp[index][k]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n"}
{"task_id": "MBPP/307", "prompt": "'''Write a function to get a colon of a tuple. You need to pass these assertions:     assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True).'''\n\n ", "entry_point": "colon_tuplex", "canonical_solution": "    from copy import deepcopy\n    def colon_tuplex(tuplex,m,n):\n      tuplex_colon = deepcopy(tuplex)\n      tuplex_colon[m].append(n)\n      return tuplex_colon", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n    assert candidate((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert candidate((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n"}
{"task_id": "MBPP/308", "prompt": "'''Write a function to find the specified number of largest products from two given lists. You need to pass these assertions:     assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45].'''\n\n ", "entry_point": "large_product", "canonical_solution": "    def large_product(nums1, nums2, N):\n        result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n"}
{"task_id": "MBPP/309", "prompt": "'''Write a python function to find the maximum of two numbers. You need to pass these assertions:     assert maximum(5,10) == 10\n    assert maximum(-1,-2) == -1\n    assert maximum(9,7) == 9.'''\n\n ", "entry_point": "maximum", "canonical_solution": "    def maximum(a,b):   \n        if a >= b: \n            return a \n        else: \n            return b ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n"}
{"task_id": "MBPP/310", "prompt": "'''Write a function to convert a given string to a tuple. You need to pass these assertions:     assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0').'''\n\n ", "entry_point": "string_to_tuple", "canonical_solution": "    def string_to_tuple(str1):\n        result = tuple(x for x in str1 if not x.isspace()) \n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert candidate(\"15.10\")==('1', '5', '.', '1', '0')\n"}
{"task_id": "MBPP/311", "prompt": "'''Write a python function to set the left most unset bit. You need to pass these assertions:     assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(12) == 14\n    assert set_left_most_unset_bit(15) == 15.'''\n\n ", "entry_point": "set_left_most_unset_bit", "canonical_solution": "    def set_left_most_unset_bit(n): \n        if not (n & (n + 1)): \n            return n \n        pos, temp, count = 0, n, 0 \n        while temp: \n            if not (temp & 1): \n                pos = count      \n            count += 1; temp>>=1\n        return (n | (1 << (pos))) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 14\n    assert candidate(12) == 14\n    assert candidate(15) == 15\n"}
{"task_id": "MBPP/312", "prompt": "'''Write a function to find the volume of a cone. You need to pass these assertions:     assert volume_cone(5,12)==314.15926535897927\n    assert volume_cone(10,15)==1570.7963267948965\n    assert volume_cone(19,17)==6426.651371693521.'''\n\n ", "entry_point": "volume_cone", "canonical_solution": "    import math\n    def volume_cone(r,h):\n      volume = (1.0/3) * math.pi * r * r * h\n      return volume", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,12)==314.15926535897927\n    assert candidate(10,15)==1570.7963267948965\n    assert candidate(19,17)==6426.651371693521\n"}
{"task_id": "MBPP/313", "prompt": "'''Write a python function to print positive numbers in a list. You need to pass these assertions:     assert pos_nos([-1,-2,1,2]) == 1,2\n    assert pos_nos([3,4,-5]) == 3,4\n    assert pos_nos([-2,-3,1]) == 1.'''\n\n ", "entry_point": "pos_nos", "canonical_solution": "    def pos_nos(list1):\n      for num in list1: \n        if num >= 0: \n           return num ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([-1,-2,1,2]) == 1,2\n    assert candidate([3,4,-5]) == 3,4\n    assert candidate([-2,-3,1]) == 1\n"}
{"task_id": "MBPP/314", "prompt": "'''Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n. You need to pass these assertions:     assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n    assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81.'''\n\n ", "entry_point": "max_sum_rectangular_grid", "canonical_solution": "    def max_sum_rectangular_grid(grid, n) : \n    \tincl = max(grid[0][0], grid[1][0]) \n    \texcl = 0\n    \tfor i in range(1, n) : \n    \t\texcl_new = max(excl, incl) \n    \t\tincl = excl + max(grid[0][i], grid[1][i]) \n    \t\texcl = excl_new \n    \treturn max(excl, incl)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert candidate([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n    assert candidate([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81\n"}
{"task_id": "MBPP/315", "prompt": "'''Write a python function to find the first maximum length of even word. You need to pass these assertions:     assert find_Max_Len_Even(\"python language\") == \"language\"\n    assert find_Max_Len_Even(\"maximum even length\") == \"length\"\n    assert find_Max_Len_Even(\"eve\") == \"-1\".'''\n\n ", "entry_point": "find_Max_Len_Even", "canonical_solution": "    def find_Max_Len_Even(str): \n        n = len(str) \n        i = 0\n        currlen = 0\n        maxlen = 0\n        st = -1\n        while (i < n): \n            if (str[i] == ' '): \n                if (currlen % 2 == 0): \n                    if (maxlen < currlen): \n                        maxlen = currlen \n                        st = i - currlen \n                currlen = 0 \n            else : \n                currlen += 1\n            i += 1\n        if (currlen % 2 == 0): \n            if (maxlen < currlen): \n                maxlen = currlen \n                st = i - currlen \n        if (st == -1): \n            return \"-1\" \n        return str[st: st + maxlen] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python language\") == \"language\"\n    assert candidate(\"maximum even length\") == \"length\"\n    assert candidate(\"eve\") == \"-1\"\n"}
{"task_id": "MBPP/316", "prompt": "'''Write a function to find the index of the last occurrence of a given number in a sorted array. You need to pass these assertions:     assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n    assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6.'''\n\n ", "entry_point": "find_last_occurrence", "canonical_solution": "    def find_last_occurrence(A, x):\n        (left, right) = (0, len(A) - 1)\n        result = -1\n        while left <= right:\n            mid = (left + right) // 2\n            if x == A[mid]:\n                result = mid\n                left = mid + 1\n            elif x < A[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return result ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert candidate([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n    assert candidate([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6\n"}
{"task_id": "MBPP/317", "prompt": "'''Write a function to reflect the modified run-length encoding from a list. You need to pass these assertions:     assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n'].'''\n\n ", "entry_point": "modified_encode", "canonical_solution": "    from itertools import groupby\n    def modified_encode(alist):\n            def ctr_ele(el):\n                if len(el)>1: return [len(el), el[0]]\n                else: return el[0]\n            return [ctr_ele(list(group)) for key, group in groupby(alist)]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    assert candidate('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    assert candidate('python')==['p', 'y', 't', 'h', 'o', 'n']\n"}
{"task_id": "MBPP/318", "prompt": "'''Write a python function to find the maximum volume of a cuboid with given sum of sides. You need to pass these assertions:     assert max_volume(8) == 18\n    assert max_volume(4) == 2\n    assert max_volume(1) == 0.'''\n\n ", "entry_point": "max_volume ", "canonical_solution": "    def max_volume (s): \n        maxvalue = 0\n        i = 1\n        for i in range(s - 1): \n            j = 1\n            for j in range(s): \n                k = s - i - j \n                maxvalue = max(maxvalue, i * j * k)         \n        return maxvalue ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_volume(8) == 18\n    assert max_volume(4) == 2\n    assert max_volume(1) == 0\n"}
{"task_id": "MBPP/319", "prompt": "'''Write a function to find all five characters long word in the given string by using regex. You need to pass these assertions:     assert find_long_word('Please move back to strem') == ['strem']\n    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']\n    assert find_long_word('Streaming Media Player') == ['Media'].'''\n\n ", "entry_point": "find_long_word", "canonical_solution": "    import re\n    def find_long_word(text):\n      return (re.findall(r\"\\b\\w{5}\\b\", text))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('Please move back to strem') == ['strem']\n    assert candidate('4K Ultra HD streaming player') == ['Ultra']\n    assert candidate('Streaming Media Player') == ['Media']\n"}
{"task_id": "MBPP/320", "prompt": "'''Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers. You need to pass these assertions:     assert sum_difference(12)==5434\n    assert sum_difference(20)==41230\n    assert sum_difference(54)==2151270.'''\n\n ", "entry_point": "sum_difference", "canonical_solution": "    def sum_difference(n):\n        sumofsquares = 0\n        squareofsum = 0\n        for num in range(1, n+1):\n            sumofsquares += num * num\n            squareofsum += num\n        squareofsum = squareofsum ** 2\n        return squareofsum - sumofsquares", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(12)==5434\n    assert candidate(20)==41230\n    assert candidate(54)==2151270\n"}
{"task_id": "MBPP/321", "prompt": "'''Write a function to find the demlo number for the given number. You need to pass these assertions:     assert find_demlo(\"111111\") == '12345654321'\n    assert find_demlo(\"1111\") == '1234321'\n    assert find_demlo(\"13333122222\") == '123456789101110987654321'.'''\n\n ", "entry_point": "find_demlo", "canonical_solution": "    def find_demlo(s): \n    \tl = len(s) \n    \tres = \"\" \n    \tfor i in range(1,l+1): \n    \t\tres = res + str(i) \n    \tfor i in range(l-1,0,-1): \n    \t\tres = res + str(i) \n    \treturn res \t", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"111111\") == '12345654321'\n    assert candidate(\"1111\") == '1234321'\n    assert candidate(\"13333122222\") == '123456789101110987654321'\n"}
{"task_id": "MBPP/322", "prompt": "'''Write a function to find all index positions of the minimum values in a given list. You need to pass these assertions:     assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n    assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\n    assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1].'''\n\n ", "entry_point": "position_min", "canonical_solution": "    def position_min(list1):\n        min_val = min(list1)\n        min_result = [i for i, j in enumerate(list1) if j == min_val]\n        return min_result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[0]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[1]\n"}
{"task_id": "MBPP/323", "prompt": "'''Write a function to re-arrange the given array in alternating positive and negative items. You need to pass these assertions:     assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5].'''\n\n ", "entry_point": "right_rotate", "canonical_solution": "    def right_rotate(arr, n, out_of_place, cur):\n    \ttemp = arr[cur]\n    \tfor i in range(cur, out_of_place, -1):\n    \t\tarr[i] = arr[i - 1]\n    \tarr[out_of_place] = temp\n    \treturn arr\n    def re_arrange(arr, n):\n    \tout_of_place = -1\n    \tfor index in range(n):\n    \t\tif (out_of_place >= 0):\n    \t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n    \t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n    \t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n    \t\t\t\tif (index-out_of_place > 2):\n    \t\t\t\t\tout_of_place += 2\n    \t\t\t\telse:\n    \t\t\t\t\tout_of_place = - 1\n    \t\tif (out_of_place == -1):\n    \t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n    \t\t\t (arr[index] < 0 and index % 2 == 1)):\n    \t\t\t\tout_of_place = index\n    \treturn arr", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\n"}
{"task_id": "MBPP/324", "prompt": "'''Write a function to extract the sum of alternate chains of tuples. You need to pass these assertions:     assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\n    assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18).'''\n\n ", "entry_point": "sum_of_alternates", "canonical_solution": "    def sum_of_alternates(test_tuple):\n      sum1 = 0\n      sum2 = 0\n      for idx, ele in enumerate(test_tuple):\n        if idx % 2:\n          sum1 += ele\n        else:\n          sum2 += ele\n      return ((sum1),(sum2)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert candidate((1, 2, 3, 4, 5)) == (6, 9)\n    assert candidate((6, 7, 8, 9, 4, 5)) == (21, 18)\n"}
{"task_id": "MBPP/325", "prompt": "'''Write a python function to find the minimum number of squares whose sum is equal to a given number. You need to pass these assertions:     assert get_Min_Squares(6) == 3\n    assert get_Min_Squares(2) == 2\n    assert get_Min_Squares(4) == 1.'''\n\n ", "entry_point": "get_Min_Squares", "canonical_solution": "    def get_Min_Squares(n):\n        if n <= 3:\n            return n;\n        res = n \n        for x in range(1,n + 1):\n            temp = x * x;\n            if temp > n:\n                break\n            else:\n                res = min(res,1 + get_Min_Squares(n  - temp)) \n        return res;", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n    assert candidate(4) == 1\n"}
{"task_id": "MBPP/326", "prompt": "'''Write a function to get the word with most number of occurrences in the given strings list. You need to pass these assertions:     assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n    assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\n    assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'.'''\n\n ", "entry_point": "most_occurrences", "canonical_solution": "    from collections import defaultdict \n    \n    def most_occurrences(test_list):\n      temp = defaultdict(int)\n      for sub in test_list:\n        for wrd in sub.split():\n          temp[wrd] += 1\n      res = max(temp, key=temp.get)\n      return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n    assert candidate([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\n    assert candidate([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'\n"}
{"task_id": "MBPP/327", "prompt": "'''Write a function to print check if the triangle is isosceles or not. You need to pass these assertions:     assert check_isosceles(6,8,12)==False \n    assert check_isosceles(6,6,12)==True\n    assert check_isosceles(6,16,20)==False.'''\n\n ", "entry_point": "check_isosceles", "canonical_solution": "    def check_isosceles(x,y,z):\n      if x==y or y==z or z==x:\n    \t   return True\n      else:\n         return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(6,8,12)==False \n    assert candidate(6,6,12)==True\n    assert candidate(6,16,20)==False\n"}
{"task_id": "MBPP/328", "prompt": "'''Write a function to rotate a given list by specified number of items to the left direction. You need to pass these assertions:     assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2].'''\n\n ", "entry_point": "rotate_left", "canonical_solution": "    def rotate_left(list1,m,n):\n      result =  list1[m:]+list1[:n]\n      return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\n"}
{"task_id": "MBPP/329", "prompt": "'''Write a python function to count negative numbers in a list. You need to pass these assertions:     assert neg_count([-1,-2,3,-4,-5]) == 4\n    assert neg_count([1,2,3]) == 0\n    assert neg_count([1,2,-3,-10,20]) == 2.'''\n\n ", "entry_point": "neg_count", "canonical_solution": "    def neg_count(list):\n      neg_count= 0\n      for num in list: \n        if num <= 0: \n          neg_count += 1\n      return neg_count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([-1,-2,3,-4,-5]) == 4\n    assert candidate([1,2,3]) == 0\n    assert candidate([1,2,-3,-10,20]) == 2\n"}
{"task_id": "MBPP/330", "prompt": "'''Write a function to find all three, four, five characters long words in the given string by using regex. You need to pass these assertions:     assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\n    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal'].'''\n\n ", "entry_point": "find_char", "canonical_solution": "    import re\n    def find_char(text):\n      return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert candidate('Certain service are subject to change MSR') == ['are', 'MSR']\n    assert candidate('Third party legal desclaimers') == ['Third', 'party', 'legal']\n"}
{"task_id": "MBPP/331", "prompt": "'''Write a python function to count unset bits of a given number. You need to pass these assertions:     assert count_unset_bits(2) == 1\n    assert count_unset_bits(4) == 2\n    assert count_unset_bits(6) == 1.'''\n\n ", "entry_point": "count_unset_bits", "canonical_solution": "    def count_unset_bits(n): \n        count = 0\n        x = 1\n        while(x < n + 1): \n            if ((x & n) == 0): \n                count += 1\n            x = x << 1\n        return count  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 2\n    assert candidate(6) == 1\n"}
{"task_id": "MBPP/332", "prompt": "'''Write a function to count character frequency of a given string. You need to pass these assertions:     assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}.'''\n\n ", "entry_point": "char_frequency", "canonical_solution": "    def char_frequency(str1):\n        dict = {}\n        for n in str1:\n            keys = dict.keys()\n            if n in keys:\n                dict[n] += 1\n            else:\n                dict[n] = 1\n        return dict", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert candidate('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    assert candidate('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n"}
{"task_id": "MBPP/333", "prompt": "'''Write a python function to sort a list according to the second element in sublist. You need to pass these assertions:     assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]].'''\n\n ", "entry_point": "Sort", "canonical_solution": "    def Sort(sub_li): \n        sub_li.sort(key = lambda x: x[1]) \n        return sub_li ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    assert candidate([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    assert candidate([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n"}
{"task_id": "MBPP/334", "prompt": "'''Write a python function to check whether the triangle is valid or not if sides are given. You need to pass these assertions:     assert check_Validity(1,2,3) == False\n    assert check_Validity(2,3,5) == False\n    assert check_Validity(7,10,5) == True.'''\n\n ", "entry_point": "check_Validity", "canonical_solution": "    def check_Validity(a,b,c):  \n        if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n            return False\n        else: \n            return True        ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,2,3) == False\n    assert candidate(2,3,5) == False\n    assert candidate(7,10,5) == True\n"}
{"task_id": "MBPP/335", "prompt": "'''Write a function to find the sum of arithmetic progression. You need to pass these assertions:     assert ap_sum(1,5,2)==25\n    assert ap_sum(2,6,4)==72\n    assert ap_sum(1,4,5)==34.'''\n\n ", "entry_point": "ap_sum", "canonical_solution": "    def ap_sum(a,n,d):\n      total = (n * (2 * a + (n - 1) * d)) / 2\n      return total", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,5,2)==25\n    assert candidate(2,6,4)==72\n    assert candidate(1,4,5)==34\n"}
{"task_id": "MBPP/336", "prompt": "'''Write a function to check whether the given month name contains 28 days or not. You need to pass these assertions:     assert check_monthnum(\"February\")==True\n    assert check_monthnum(\"January\")==False\n    assert check_monthnum(\"March\")==False.'''\n\n ", "entry_point": "check_monthnum", "canonical_solution": "    def check_monthnum(monthname1):\n      if monthname1 == \"February\":\n        return True\n      else:\n        return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"February\")==True\n    assert candidate(\"January\")==False\n    assert candidate(\"March\")==False\n"}
{"task_id": "MBPP/337", "prompt": "'''Write a function that matches a word at the end of a string, with optional punctuation. You need to pass these assertions:     assert text_match_word(\"python.\")==('Found a match!')\n    assert text_match_word(\"python.\")==('Found a match!')\n    assert text_match_word(\"  lang  .\")==('Not matched!').'''\n\n ", "entry_point": "text_match_word", "canonical_solution": "    import re\n    def text_match_word(text):\n            patterns = '\\w+\\S*$'\n            if re.search(patterns,  text):\n                    return 'Found a match!'\n            else:\n                    return 'Not matched!'", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n"}
{"task_id": "MBPP/338", "prompt": "'''Write a python function to count the number of substrings with same first and last characters. You need to pass these assertions:     assert count_Substring_With_Equal_Ends('aba') == 4\n    assert count_Substring_With_Equal_Ends('abcab') == 7\n    assert count_Substring_With_Equal_Ends('abc') == 3.'''\n\n ", "entry_point": "check_Equality", "canonical_solution": "    def check_Equality(s): \n        return (ord(s[0]) == ord(s[len(s) - 1])); \n    def count_Substring_With_Equal_Ends(s): \n        result = 0; \n        n = len(s); \n        for i in range(n):\n            for j in range(1,n-i+1): \n                if (check_Equality(s[i:i+j])): \n                    result+=1; \n        return result; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Substring_With_Equal_Ends('aba') == 4\n    assert count_Substring_With_Equal_Ends('abcab') == 7\n    assert count_Substring_With_Equal_Ends('abc') == 3\n"}
{"task_id": "MBPP/339", "prompt": "'''Write a python function to find the maximum occuring divisor in an interval. You need to pass these assertions:     assert find_Divisor(2,2) == 2\n    assert find_Divisor(2,5) == 2\n    assert find_Divisor(5,10) == 2.'''\n\n ", "entry_point": "find_Divisor", "canonical_solution": "    def find_Divisor(x,y):  \n        if (x==y): \n            return y \n        return 2", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2,2) == 2\n    assert candidate(2,5) == 2\n    assert candidate(5,10) == 2\n"}
{"task_id": "MBPP/340", "prompt": "'''Write a python function to find the sum of the three lowest positive numbers from a given list of numbers. You need to pass these assertions:     assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n    assert sum_three_smallest_nums([1,2,3,4,5]) == 6\n    assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6.'''\n\n ", "entry_point": "sum_three_smallest_nums", "canonical_solution": "    def sum_three_smallest_nums(lst):\n    \treturn sum(sorted([x for x in lst if x > 0])[:3])", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([10,20,30,40,50,60,7]) == 37\n    assert candidate([1,2,3,4,5]) == 6\n    assert candidate([0,1,2,3,4,5]) == 6\n"}
{"task_id": "MBPP/341", "prompt": "'''Write a function to convert the given set into ordered tuples. You need to pass these assertions:     assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n    assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16).'''\n\n ", "entry_point": "set_to_tuple", "canonical_solution": "    def set_to_tuple(s):\n      t = tuple(sorted(s))\n      return (t)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert candidate({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n    assert candidate({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)\n"}
{"task_id": "MBPP/342", "prompt": "'''Write a function to find the smallest range that includes at-least one element from each of the given arrays. You need to pass these assertions:     assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n    assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7).'''\n\n ", "entry_point": "__init__", "canonical_solution": "    from heapq import heappop, heappush\n    class Node:\n        def __init__(self, value, list_num, index):\n            self.value = value\n            self.list_num = list_num\n            self.index = index\n        def __lt__(self, other):\n            return self.value < other.value\n    def find_minimum_range(list):\n        high = float('-inf')\n        p = (0, float('inf'))\n        pq = []\n        for i in range(len(list)):\n            heappush(pq, Node(list[i][0], i, 0))\n            high = max(high, list[i][0])\n        while True:\n            top = heappop(pq)\n            low = top.value\n            i = top.list_num\n            j = top.index\n            if high - low < p[1] - p[0]:\n                p = (low, high)\n            if j == len(list[i]) - 1:\n                return p\n            heappush(pq, Node(list[i][j + 1], i, j + 1))\n            high = max(high, list[i][j + 1])", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n    assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)\n"}
{"task_id": "MBPP/343", "prompt": "'''Write a function to calculate the number of digits and letters in a string. You need to pass these assertions:     assert dig_let(\"python\")==(6,0)\n    assert dig_let(\"program\")==(7,0)\n    assert dig_let(\"python3.0\")==(6,2).'''\n\n ", "entry_point": "dig_let", "canonical_solution": "    def dig_let(s):\n     d=l=0\n     for c in s:\n        if c.isdigit():\n            d=d+1\n        elif c.isalpha():\n            l=l+1\n        else:\n            pass\n     return (l,d)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python\")==(6,0)\n    assert candidate(\"program\")==(7,0)\n    assert candidate(\"python3.0\")==(6,2)\n"}
{"task_id": "MBPP/344", "prompt": "'''Write a python function to find number of elements with odd factors in a given range. You need to pass these assertions:     assert count_Odd_Squares(5,100) == 8\n    assert count_Odd_Squares(8,65) == 6\n    assert count_Odd_Squares(2,5) == 1.'''\n\n ", "entry_point": "count_Odd_Squares", "canonical_solution": "    def count_Odd_Squares(n,m): \n        return int(m**0.5) - int((n-1)**0.5) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,100) == 8\n    assert candidate(8,65) == 6\n    assert candidate(2,5) == 1\n"}
{"task_id": "MBPP/345", "prompt": "'''Write a function to find the difference between two consecutive numbers in a given list. You need to pass these assertions:     assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n    assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2].'''\n\n ", "entry_point": "diff_consecutivenums", "canonical_solution": "    def diff_consecutivenums(nums):\n        result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    assert candidate([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]\n"}
{"task_id": "MBPP/346", "prompt": "'''Write a function to find entringer number e(n, k). You need to pass these assertions:     assert zigzag(4, 3) == 5\n    assert zigzag(4, 2) == 4\n    assert zigzag(3, 1) == 1.'''\n\n ", "entry_point": "zigzag", "canonical_solution": "    def zigzag(n, k): \n    \tif (n == 0 and k == 0): \n    \t\treturn 1\n    \tif (k == 0): \n    \t\treturn 0\n    \treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4, 3) == 5\n    assert candidate(4, 2) == 4\n    assert candidate(3, 1) == 1\n"}
{"task_id": "MBPP/347", "prompt": "'''Write a python function to count the number of squares in a rectangle. You need to pass these assertions:     assert count_Squares(4,3) == 20\n    assert count_Squares(1,2) == 2\n    assert count_Squares(2,2) == 5.'''\n\n ", "entry_point": "count_Squares", "canonical_solution": "    def count_Squares(m,n): \n        if (n < m): \n            temp = m \n            m = n \n            n = temp \n        return n * (n + 1) * (3 * m - n + 1) // 6", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4,3) == 20\n    assert candidate(1,2) == 2\n    assert candidate(2,2) == 5\n"}
{"task_id": "MBPP/348", "prompt": "'''Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values. You need to pass these assertions:     assert find_ways(4) == 2\n    assert find_ways(6) == 5\n    assert find_ways(8) == 14.'''\n\n ", "entry_point": "bin_coff", "canonical_solution": "    def bin_coff(n, r): \n    \tval = 1\n    \tif (r > (n - r)): \n    \t\tr = (n - r) \n    \tfor i in range(0, r): \n    \t\tval *= (n - i) \n    \t\tval //= (i + 1) \n    \treturn val \n    def find_ways(M): \n    \tn = M // 2\n    \ta = bin_coff(2 * n, n) \n    \tb = a // (n + 1) \n    \treturn (b) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_ways(4) == 2\n    assert find_ways(6) == 5\n    assert find_ways(8) == 14\n"}
{"task_id": "MBPP/349", "prompt": "'''Write a python function to check whether the given string is a binary string or not. You need to pass these assertions:     assert check(\"01010101010\") == \"Yes\"\n    assert check(\"name0\") == \"No\"\n    assert check(\"101\") == \"Yes\".'''\n\n ", "entry_point": "check", "canonical_solution": "    def check(string) :\n        p = set(string) \n        s = {'0', '1'} \n        if s == p or p == {'0'} or p == {'1'}: \n            return (\"Yes\") \n        else : \n            return (\"No\") ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef candidate(candidate):\n    assert candidate(\"01010101010\") == \"Yes\"\n    assert candidate(\"name0\") == \"No\"\n    assert candidate(\"101\") == \"Yes\"\n"}
{"task_id": "MBPP/350", "prompt": "'''Write a python function to minimize the length of the string by removing occurrence of only one character. You need to pass these assertions:     assert minimum_Length(\"mnm\") == 1\n    assert minimum_Length(\"abcda\") == 3\n    assert minimum_Length(\"abcb\") == 2.'''\n\n ", "entry_point": "minimum_Length", "canonical_solution": "    def minimum_Length(s) : \n        maxOcc = 0\n        n = len(s) \n        arr = [0]*26\n        for i in range(n) : \n            arr[ord(s[i]) -ord('a')] += 1\n        for i in range(26) : \n            if arr[i] > maxOcc : \n                maxOcc = arr[i] \n        return n - maxOcc ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"mnm\") == 1\n    assert candidate(\"abcda\") == 3\n    assert candidate(\"abcb\") == 2\n"}
{"task_id": "MBPP/351", "prompt": "'''Write a python function to find the first element occurring k times in a given array. You need to pass these assertions:     assert first_Element([0,1,2,3,4,5],6,1) == 0\n    assert first_Element([1,2,1,3,4],5,2) == 1\n    assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2.'''\n\n ", "entry_point": "first_Element", "canonical_solution": "    def first_Element(arr,n,k): \n        count_map = {}; \n        for i in range(0, n): \n            if(arr[i] in count_map.keys()): \n                count_map[arr[i]] += 1\n            else: \n                count_map[arr[i]] = 1\n            i += 1\n        for i in range(0, n):  \n            if (count_map[arr[i]] == k): \n                return arr[i] \n            i += 1 \n        return -1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([0,1,2,3,4,5],6,1) == 0\n    assert candidate([1,2,1,3,4],5,2) == 1\n    assert candidate([2,3,4,3,5,7,1,2,3,5],10,2) == 2\n"}
{"task_id": "MBPP/352", "prompt": "'''Write a python function to check whether all the characters in a given string are unique. You need to pass these assertions:     assert unique_Characters('aba') == False\n    assert unique_Characters('abc') == True\n    assert unique_Characters('abab') == False.'''\n\n ", "entry_point": "unique_Characters", "canonical_solution": "    def unique_Characters(str):\n        for i in range(len(str)):\n            for j in range(i + 1,len(str)): \n                if (str[i] == str[j]):\n                    return False;\n        return True;", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('aba') == False\n    assert candidate('abc') == True\n    assert candidate('abab') == False\n"}
{"task_id": "MBPP/353", "prompt": "'''Write a function to remove a specified column from a given nested list. You need to pass these assertions:     assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n    assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n    assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]].'''\n\n ", "entry_point": "remove_column", "canonical_solution": "    def remove_column(list1, n):\n       for i in list1: \n        del i[n] \n       return list1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]\n"}
{"task_id": "MBPP/354", "prompt": "'''Write a function to find t-nth term of arithemetic progression. You need to pass these assertions:     assert tn_ap(1,5,2)==9\n    assert tn_ap(2,6,4)==22\n    assert tn_ap(1,4,5)==16.'''\n\n ", "entry_point": "tn_ap", "canonical_solution": "    def tn_ap(a,n,d):\n      tn = a + (n - 1) * d\n      return tn", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,5,2)==9\n    assert candidate(2,6,4)==22\n    assert candidate(1,4,5)==16\n"}
{"task_id": "MBPP/355", "prompt": "'''Write a python function to count the number of rectangles in a circle of radius r. You need to pass these assertions:     assert count_Rectangles(2) == 8\n    assert count_Rectangles(1) == 1\n    assert count_Rectangles(0) == 0.'''\n\n ", "entry_point": "count_Rectangles", "canonical_solution": "    def count_Rectangles(radius):  \n        rectangles = 0 \n        diameter = 2 * radius \n        diameterSquare = diameter * diameter \n        for a in range(1, 2 * radius):  \n            for b in range(1, 2 * radius): \n                diagnalLengthSquare = (a * a +  b * b)  \n                if (diagnalLengthSquare <= diameterSquare) : \n                    rectangles += 1\n        return rectangles ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 8\n    assert candidate(1) == 1\n    assert candidate(0) == 0\n"}
{"task_id": "MBPP/356", "prompt": "'''Write a function to find the third angle of a triangle using two angles. You need to pass these assertions:     assert find_angle(47,89)==44\n    assert find_angle(45,95)==40\n    assert find_angle(50,40)==90.'''\n\n ", "entry_point": "find_angle", "canonical_solution": "    def find_angle(a,b):\n     c = 180 - (a + b)\n     return c", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(47,89)==44\n    assert candidate(45,95)==40\n    assert candidate(50,40)==90\n"}
{"task_id": "MBPP/357", "prompt": "'''Write a function to find the maximum element of all the given tuple records. You need to pass these assertions:     assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n    assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12.'''\n\n ", "entry_point": "find_max", "canonical_solution": "    def find_max(test_list):\n      res = max(int(j) for i in test_list for j in i)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12\n"}
{"task_id": "MBPP/358", "prompt": "'''Write a function to find modulo division of two lists using map and lambda function. You need to pass these assertions:     assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n    assert moddiv_list([3,2],[1,4])==[0, 2]\n    assert moddiv_list([90,120],[50,70])==[40, 50].'''\n\n ", "entry_point": "moddiv_list", "canonical_solution": "    def moddiv_list(nums1,nums2):\n      result = map(lambda x, y: x % y, nums1, nums2)\n      return list(result)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[0, 1, 0]\n    assert candidate([3,2],[1,4])==[0, 2]\n    assert candidate([90,120],[50,70])==[40, 50]\n"}
{"task_id": "MBPP/359", "prompt": "'''Write a python function to check whether one root of the quadratic equation is twice of the other or not. You need to pass these assertions:     assert Check_Solution(1,3,2) == \"Yes\"\n    assert Check_Solution(1,2,3) == \"No\"\n    assert Check_Solution(1,-5,6) == \"No\".'''\n\n ", "entry_point": "Check_Solution", "canonical_solution": "    def Check_Solution(a,b,c): \n        if (2*b*b == 9*a*c): \n            return (\"Yes\"); \n        else: \n            return (\"No\"); ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,3,2) == \"Yes\"\n    assert candidate(1,2,3) == \"No\"\n    assert candidate(1,-5,6) == \"No\"\n"}
{"task_id": "MBPP/360", "prompt": "'''Write a function to find the n\u2019th carol number. You need to pass these assertions:     assert get_carol(2) == 7\n    assert get_carol(4) == 223\n    assert get_carol(5) == 959.'''\n\n ", "entry_point": "get_carol", "canonical_solution": "    def get_carol(n): \n    \tresult = (2**n) - 1\n    \treturn result * result - 2", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 7\n    assert candidate(4) == 223\n    assert candidate(5) == 959\n"}
{"task_id": "MBPP/361", "prompt": "'''Write a function to remove empty lists from a given list of lists. You need to pass these assertions:     assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language'].'''\n\n ", "entry_point": "remove_empty", "canonical_solution": "    def remove_empty(list1):\n      remove_empty = [x for x in list1 if x]\n      return remove_empty", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\n"}
{"task_id": "MBPP/362", "prompt": "'''Write a python function to find the item with maximum occurrences in a given list. You need to pass these assertions:     assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\n    assert max_occurrences([1,2,3,1,2,4,1]) == 1.'''\n\n ", "entry_point": "max_occurrences", "canonical_solution": "    def max_occurrences(nums):\n        max_val = 0\n        result = nums[0] \n        for i in nums:\n            occu = nums.count(i)\n            if occu > max_val:\n                max_val = occu\n                result = i \n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,1,2,3,12,4,2]) ==  2\n    assert candidate([1,2,6,7,0,1,0,1,0]) == 1,0\n    assert candidate([1,2,3,1,2,4,1]) == 1\n"}
{"task_id": "MBPP/363", "prompt": "'''Write a function to add the k elements to each element in the tuple. You need to pass these assertions:     assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)].'''\n\n ", "entry_point": "add_K_element", "canonical_solution": "    def add_K_element(test_list, K):\n      res = [tuple(j + K for j in sub ) for sub in test_list]\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert candidate([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    assert candidate([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n"}
{"task_id": "MBPP/364", "prompt": "'''Write a function to find the number of flips required to make the given binary string a sequence of alternate characters. You need to pass these assertions:     assert min_flip_to_make_string_alternate(\"0001010111\") == 2\n    assert min_flip_to_make_string_alternate(\"001\") == 1\n    assert min_flip_to_make_string_alternate(\"010111011\") == 2 .'''\n\n ", "entry_point": "make_flip", "canonical_solution": "    def make_flip(ch): \n    \treturn '1' if (ch == '0') else '0'\n    def get_flip_with_starting_charcter(str, expected): \n    \tflip_count = 0\n    \tfor i in range(len( str)): \n    \t\tif (str[i] != expected): \n    \t\t\tflip_count += 1\n    \t\texpected = make_flip(expected) \n    \treturn flip_count \n    def min_flip_to_make_string_alternate(str): \n    \treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2\n    assert min_flip_to_make_string_alternate(\"001\") == 1\n    assert min_flip_to_make_string_alternate(\"010111011\") == 2 \n"}
{"task_id": "MBPP/365", "prompt": "'''Write a python function to count the number of digits of a given number. You need to pass these assertions:     assert count_Digit(12345) == 5\n    assert count_Digit(11223305) == 8\n    assert count_Digit(4123459) == 7.'''\n\n ", "entry_point": "count_Digit", "canonical_solution": "    def count_Digit(n):\n        count = 0\n        while n != 0:\n            n //= 10\n            count += 1\n        return count", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(12345) == 5\n    assert candidate(11223305) == 8\n    assert candidate(4123459) == 7\n"}
{"task_id": "MBPP/366", "prompt": "'''Write a python function to find the largest product of the pair of adjacent elements from a given list of integers. You need to pass these assertions:     assert adjacent_num_product([1,2,3,4,5,6]) == 30\n    assert adjacent_num_product([1,2,3,4,5]) == 20\n    assert adjacent_num_product([2,3]) == 6.'''\n\n ", "entry_point": "adjacent_num_product", "canonical_solution": "    def adjacent_num_product(list_nums):\n        return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == 30\n    assert candidate([1,2,3,4,5]) == 20\n    assert candidate([2,3]) == 6\n"}
{"task_id": "MBPP/367", "prompt": "'''Write a function to check if a binary tree is balanced or not. You need to pass these assertions:     assert is_tree_balanced(root) == False\n    assert is_tree_balanced(root1) == True\n    assert is_tree_balanced(root2) == False .'''\n\n ", "entry_point": "__init__", "canonical_solution": "    class Node: \n    \tdef __init__(self, data): \n    \t\tself.data = data \n    \t\tself.left = None\n    \t\tself.right = None\n    def get_height(root): \n    \tif root is None: \n    \t\treturn 0\n    \treturn max(get_height(root.left), get_height(root.right)) + 1\n    def is_tree_balanced(root): \n    \tif root is None: \n    \t\treturn True\n    \tlh = get_height(root.left) \n    \trh = get_height(root.right) \n    \tif (abs(lh - rh) <= 1) and is_tree_balanced( \n    \troot.left) is True and is_tree_balanced( root.right) is True: \n    \t\treturn True\n    \treturn False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_tree_balanced(root) == False\n    assert is_tree_balanced(root1) == True\n    assert is_tree_balanced(root2) == False \n"}
{"task_id": "MBPP/368", "prompt": "'''Write a function to repeat the given tuple n times. You need to pass these assertions:     assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4)).'''\n\n ", "entry_point": "repeat_tuples", "canonical_solution": "    def repeat_tuples(test_tup, N):\n      res = ((test_tup, ) * N)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert candidate((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert candidate((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n"}
{"task_id": "MBPP/369", "prompt": "'''Write a function to find the lateral surface area of cuboid You need to pass these assertions:     assert lateralsurface_cuboid(8,5,6)==156\n    assert lateralsurface_cuboid(7,9,10)==320\n    assert lateralsurface_cuboid(10,20,30)==1800.'''\n\n ", "entry_point": "lateralsurface_cuboid", "canonical_solution": "    def lateralsurface_cuboid(l,w,h):\n      LSA = 2*h*(l+w)\n      return LSA", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(8,5,6)==156\n    assert candidate(7,9,10)==320\n    assert candidate(10,20,30)==1800\n"}
{"task_id": "MBPP/370", "prompt": "'''Write a function to sort a tuple by its float element. You need to pass these assertions:     assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n    assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] .'''\n\n ", "entry_point": "float_sort", "canonical_solution": "    def float_sort(price):\n      float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n      return float_sort", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    assert candidate([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n    assert candidate([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] \n"}
{"task_id": "MBPP/371", "prompt": "'''Write a function to find the smallest missing element in a sorted array. You need to pass these assertions:     assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0.'''\n\n ", "entry_point": "smallest_missing", "canonical_solution": "    def smallest_missing(A, left_element, right_element):\n        if left_element > right_element:\n            return left_element\n        mid = left_element + (right_element - left_element) // 2\n        if A[mid] == mid:\n            return smallest_missing(A, mid + 1, right_element)\n        else:\n            return smallest_missing(A, left_element, mid - 1)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert candidate([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert candidate([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n"}
{"task_id": "MBPP/372", "prompt": "'''Write a function to sort a given list of elements in ascending order using heap queue algorithm. You need to pass these assertions:     assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].'''\n\n ", "entry_point": "heap_assending", "canonical_solution": "    import heapq as hq\n    def heap_assending(nums):\n      hq.heapify(nums)\n      s_result = [hq.heappop(nums) for i in range(len(nums))]\n      return s_result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": "MBPP/373", "prompt": "'''Write a function to find the volume of a cuboid. You need to pass these assertions:     assert volume_cuboid(1,2,3)==6\n    assert volume_cuboid(5,7,9)==315\n    assert volume_cuboid(10,15,21)==3150.'''\n\n ", "entry_point": "volume_cuboid", "canonical_solution": "    def volume_cuboid(l,w,h):\n      volume=l*w*h\n      return volume", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,2,3)==6\n    assert candidate(5,7,9)==315\n    assert candidate(10,15,21)==3150\n"}
{"task_id": "MBPP/374", "prompt": "'''Write a function to print all permutations of a given string including duplicates. You need to pass these assertions:     assert permute_string('ab')==['ab', 'ba']\n    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba'].'''\n\n ", "entry_point": "permute_string", "canonical_solution": "    def permute_string(str):\n        if len(str) == 0:\n            return ['']\n        prev_list = permute_string(str[1:len(str)])\n        next_list = []\n        for i in range(0,len(prev_list)):\n            for j in range(0,len(str)):\n                new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n                if new_str not in next_list:\n                    next_list.append(new_str)\n        return next_list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('ab')==['ab', 'ba']\n    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert candidate('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n"}
{"task_id": "MBPP/375", "prompt": "'''Write a function to round the given number to the nearest multiple of a specific number. You need to pass these assertions:     assert round_num(4722,10)==4720\n    assert round_num(1111,5)==1110\n    assert round_num(219,2)==218.'''\n\n ", "entry_point": "round_num", "canonical_solution": "    def round_num(n,m):\n        a = (n //m) * m\n        b = a + m\n        return (b if n - a > b - n else a)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4722,10)==4720\n    assert candidate(1111,5)==1110\n    assert candidate(219,2)==218\n"}
{"task_id": "MBPP/376", "prompt": "'''Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value. You need to pass these assertions:     assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP').'''\n\n ", "entry_point": "remove_replica", "canonical_solution": "    def remove_replica(test_tup):\n      temp = set()\n      res = tuple(ele if ele not in temp and not temp.add(ele) \n    \t\t\t\telse 'MSP' for ele in test_tup)\n      return (res)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert candidate((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n"}
{"task_id": "MBPP/377", "prompt": "'''Write a python function to remove all occurrences of a character in a given string. You need to pass these assertions:     assert remove_Char(\"aba\",'a') == \"b\"\n    assert remove_Char(\"toggle\",'g') == \"tole\"\n    assert remove_Char(\"aabbc\",'b') == \"aac\".'''\n\n ", "entry_point": "remove_Char", "canonical_solution": "    def remove_Char(s,c) :  \n        counts = s.count(c) \n        s = list(s) \n        while counts :  \n            s.remove(c) \n            counts -= 1 \n        s = '' . join(s)   \n        return (s) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"aba\",'a') == \"b\"\n    assert candidate(\"toggle\",'g') == \"tole\"\n    assert candidate(\"aabbc\",'b') == \"aac\"\n"}
{"task_id": "MBPP/378", "prompt": "'''Write a python function to shift last element to first position in the given list. You need to pass these assertions:     assert move_first([1,2,3,4]) == [4,1,2,3]\n    assert move_first([0,1,2,3]) == [3,0,1,2]\n    assert move_first([9,8,7,1]) == [1,9,8,7].'''\n\n ", "entry_point": "move_first", "canonical_solution": "    def move_first(test_list):\n      test_list = test_list[-1:] + test_list[:-1]  \n      return test_list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [4,1,2,3]\n    assert candidate([0,1,2,3]) == [3,0,1,2]\n    assert candidate([9,8,7,1]) == [1,9,8,7]\n"}
{"task_id": "MBPP/379", "prompt": "'''Write a function to find the surface area of a cuboid. You need to pass these assertions:     assert surfacearea_cuboid(1,2,3)==22\n    assert surfacearea_cuboid(5,7,9)==286\n    assert surfacearea_cuboid(10,15,21)==1350.'''\n\n ", "entry_point": "surfacearea_cuboid", "canonical_solution": "    def surfacearea_cuboid(l,w,h):\n      SA = 2*(l*w + l * h + w * h)\n      return SA", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,2,3)==22\n    assert candidate(5,7,9)==286\n    assert candidate(10,15,21)==1350\n"}
{"task_id": "MBPP/380", "prompt": "'''Write a function to generate a two-dimensional array. You need to pass these assertions:     assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]].'''\n\n ", "entry_point": "multi_list", "canonical_solution": "    def multi_list(rownum,colnum):\n      multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n      for row in range(rownum):\n        for col in range(colnum):\n            multi_list[row][col]= row*col\n      return multi_list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    assert candidate(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert candidate(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n"}
{"task_id": "MBPP/381", "prompt": "'''Write a function to sort a list of lists by a given index of the inner list. You need to pass these assertions:     assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)].'''\n\n ", "entry_point": "index_on_inner_list", "canonical_solution": "    from operator import itemgetter\n    def index_on_inner_list(list_data, index_no):\n        result = sorted(list_data, key=itemgetter(index_no))\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n"}
{"task_id": "MBPP/382", "prompt": "'''Write a function to find the number of rotations in a circularly sorted array. You need to pass these assertions:     assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\n    assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0.'''\n\n ", "entry_point": "find_rotation_count", "canonical_solution": "    def find_rotation_count(A):\n        (left, right) = (0, len(A) - 1)\n        while left <= right:\n            if A[left] <= A[right]:\n                return left\n            mid = (left + right) // 2\n            next = (mid + 1) % len(A)\n            prev = (mid - 1 + len(A)) % len(A)\n            if A[mid] <= A[next] and A[mid] <= A[prev]:\n                return mid\n            elif A[mid] <= A[right]:\n                right = mid - 1\n            elif A[mid] >= A[left]:\n                left = mid + 1\n        return -1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert candidate([8, 9, 10,2, 5, 6]) == 3\n    assert candidate([2, 5, 6, 8, 9, 10]) == 0\n"}
{"task_id": "MBPP/383", "prompt": "'''Write a python function to toggle all odd bits of a given number. You need to pass these assertions:     assert even_bit_toggle_number(10) == 15\n    assert even_bit_toggle_number(20) == 1\n    assert even_bit_toggle_number(30) == 11.'''\n\n ", "entry_point": "even_bit_toggle_number", "canonical_solution": "    def even_bit_toggle_number(n) : \n        res = 0; count = 0; temp = n    \n        while(temp > 0 ) : \n            if (count % 2 == 0) : \n                res = res | (1 << count)      \n            count = count + 1\n            temp >>= 1 \n        return n ^ res ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 1\n    assert candidate(30) == 11\n"}
{"task_id": "MBPP/384", "prompt": "'''Write a python function to find the frequency of the smallest value in a given array. You need to pass these assertions:     assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n    assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\n    assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3.'''\n\n ", "entry_point": "frequency_Of_Smallest", "canonical_solution": "    def frequency_Of_Smallest(n,arr): \n        mn = arr[0] \n        freq = 1\n        for i in range(1,n): \n            if (arr[i] < mn): \n                mn = arr[i] \n                freq = 1\n            elif (arr[i] == mn): \n                freq += 1\n        return freq ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,[1,2,3,4,3]) == 1\n    assert candidate(7,[3,1,2,5,6,2,3]) == 1\n    assert candidate(7,[3,3,6,3,7,4,9]) == 3\n"}
{"task_id": "MBPP/385", "prompt": "'''Write a function to find the n'th perrin number using recursion. You need to pass these assertions:     assert get_perrin(9) == 12\n    assert get_perrin(4) == 2\n    assert get_perrin(6) == 5.'''\n\n ", "entry_point": "get_perrin", "canonical_solution": "    def get_perrin(n):\n      if (n == 0):\n        return 3\n      if (n == 1):\n        return 0\n      if (n == 2):\n        return 2 \n      return get_perrin(n - 2) + get_perrin(n - 3)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(9) == 12\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n"}
{"task_id": "MBPP/386", "prompt": "'''Write a function to find out the minimum no of swaps required for bracket balancing in the given string. You need to pass these assertions:     assert swap_count(\"[]][][\") == 2\n    assert swap_count(\"[[][]]\") == 0\n    assert swap_count(\"[[][]]][\") == 1.'''\n\n ", "entry_point": "swap_count", "canonical_solution": "    def swap_count(s):\n    \tchars = s\n    \tcount_left = 0\n    \tcount_right = 0\n    \tswap = 0\n    \timbalance = 0; \n    \tfor i in range(len(chars)):\n    \t\tif chars[i] == '[':\n    \t\t\tcount_left += 1\n    \t\t\tif imbalance > 0:\n    \t\t\t\tswap += imbalance\n    \t\t\t\timbalance -= 1\n    \t\telif chars[i] == ']':\n    \t\t\tcount_right += 1\n    \t\t\timbalance = (count_right - count_left) \n    \treturn swap", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"[]][][\") == 2\n    assert candidate(\"[[][]]\") == 0\n    assert candidate(\"[[][]]][\") == 1\n"}
{"task_id": "MBPP/387", "prompt": "'''Write a python function to check whether the hexadecimal number is even or odd. You need to pass these assertions:     assert even_or_odd(\"AB3454D\") ==\"Odd\"\n    assert even_or_odd(\"ABC\") == \"Even\"\n    assert even_or_odd(\"AAD\") == \"Odd\".'''\n\n ", "entry_point": "even_or_odd", "canonical_solution": "    def even_or_odd(N): \n        l = len(N) \n        if (N[l-1] =='0'or N[l-1] =='2'or \n            N[l-1] =='4'or N[l-1] =='6'or \n            N[l-1] =='8'or N[l-1] =='A'or \n            N[l-1] =='C'or N[l-1] =='E'): \n            return (\"Even\") \n        else: \n            return (\"Odd\") ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"AB3454D\") ==\"Odd\"\n    assert candidate(\"ABC\") == \"Even\"\n    assert candidate(\"AAD\") == \"Odd\"\n"}
{"task_id": "MBPP/388", "prompt": "'''Write a python function to find the highest power of 2 that is less than or equal to n. You need to pass these assertions:     assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(19) == 16\n    assert highest_Power_of_2(32) == 32.'''\n\n ", "entry_point": "highest_Power_of_2", "canonical_solution": "    def highest_Power_of_2(n): \n        res = 0; \n        for i in range(n, 0, -1): \n            if ((i & (i - 1)) == 0): \n                res = i; \n                break; \n        return res; ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n"}
{"task_id": "MBPP/389", "prompt": "'''Write a function to find the n'th lucas number. You need to pass these assertions:     assert find_lucas(9) == 76\n    assert find_lucas(4) == 7\n    assert find_lucas(3) == 4.'''\n\n ", "entry_point": "find_lucas", "canonical_solution": "    def find_lucas(n): \n    \tif (n == 0): \n    \t\treturn 2\n    \tif (n == 1): \n    \t\treturn 1\n    \treturn find_lucas(n - 1) + find_lucas(n - 2) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n"}
{"task_id": "MBPP/390", "prompt": "'''Write a function to insert a given string at the beginning of all items in a list. You need to pass these assertions:     assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8'].'''\n\n ", "entry_point": "add_string", "canonical_solution": "    def add_string(list,string):\n     add_string=[string.format(i) for i in  list]\n     return add_string", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n"}
{"task_id": "MBPP/391", "prompt": "'''Write a function to convert more than one list to nested dictionary. You need to pass these assertions:     assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}].'''\n\n ", "entry_point": "convert_list_dictionary", "canonical_solution": "    def convert_list_dictionary(l1, l2, l3):\n         result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n         return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n"}
{"task_id": "MBPP/392", "prompt": "'''Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). You need to pass these assertions:     assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2.'''\n\n ", "entry_point": "get_max_sum ", "canonical_solution": "    def get_max_sum (n):\n    \tres = list()\n    \tres.append(0)\n    \tres.append(1)\n    \ti = 2\n    \twhile i<n + 1:\n    \t\tres.append(max(i, (res[int(i / 2)] \n    \t\t\t\t\t\t+ res[int(i / 3)] +\n    \t\t\t\t\t\t\tres[int(i / 4)]\n    \t\t\t\t\t\t+ res[int(i / 5)])))\n    \t\ti = i + 1\n    \treturn res[n]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2\n"}
{"task_id": "MBPP/393", "prompt": "'''Write a function to find the list with maximum length using lambda function. You need to pass these assertions:     assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9]).'''\n\n ", "entry_point": "max_length_list", "canonical_solution": "    def max_length_list(input_list):\n        max_length = max(len(x) for x in input_list )   \n        max_list = max(input_list, key = lambda i: len(i))    \n        return(max_length, max_list)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n"}
{"task_id": "MBPP/394", "prompt": "'''Write a function to check if given tuple is distinct or not. You need to pass these assertions:     assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    assert check_distinct((1, 4, 5, 6)) == True\n    assert check_distinct((2, 3, 4, 5, 6)) == True.'''\n\n ", "entry_point": "check_distinct", "canonical_solution": "    def check_distinct(test_tup):\n      res = True\n      temp = set()\n      for ele in test_tup:\n        if ele in temp:\n          res = False\n          break\n        temp.add(ele)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n"}
{"task_id": "MBPP/395", "prompt": "'''Write a python function to find the first non-repeated character in a given string. You need to pass these assertions:     assert first_non_repeating_character(\"abcabc\") == None\n    assert first_non_repeating_character(\"abc\") == \"a\"\n    assert first_non_repeating_character(\"ababc\") == \"c\".'''\n\n ", "entry_point": "first_non_repeating_character", "canonical_solution": "    def first_non_repeating_character(str1):\n      char_order = []\n      ctr = {}\n      for c in str1:\n        if c in ctr:\n          ctr[c] += 1\n        else:\n          ctr[c] = 1 \n          char_order.append(c)\n      for c in char_order:\n        if ctr[c] == 1:\n          return c\n      return None", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n"}
{"task_id": "MBPP/396", "prompt": "'''Write a function to check whether the given string starts and ends with the same character or not using regex. You need to pass these assertions:     assert check_char(\"abba\") == \"Valid\"\n    assert check_char(\"a\") == \"Valid\"\n    assert check_char(\"abcd\") == \"Invalid\".'''\n\n ", "entry_point": "check_char", "canonical_solution": "    import re  \n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    def check_char(string): \n    \tif(re.search(regex, string)): \n    \t\treturn \"Valid\" \n    \telse: \n    \t\treturn \"Invalid\" ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n"}
{"task_id": "MBPP/397", "prompt": "'''Write a function to find the median of three specific numbers. You need to pass these assertions:     assert median_numbers(25,55,65)==55.0\n    assert median_numbers(20,10,30)==20.0\n    assert median_numbers(15,45,75)==45.0.'''\n\n ", "entry_point": "median_numbers", "canonical_solution": "    def median_numbers(a,b,c):\n     if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n     else:\n        if a > c:\n            median = a\n        elif b < c:\n            median = b\n        else:\n            median = c\n     return median", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n"}
{"task_id": "MBPP/398", "prompt": "'''Write a function to compute the sum of digits of each number of a given list. You need to pass these assertions:     assert sum_of_digits([10,2,56])==14\n    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\n    assert sum_of_digits([10,20,-4,5,-70])==19.'''\n\n ", "entry_point": "sum_of_digits", "canonical_solution": "    def sum_of_digits(nums):\n        return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([10,2,56])==14\n    assert candidate([[10,20,4,5,'b',70,'a']])==19\n    assert candidate([10,20,-4,5,-70])==19\n"}
{"task_id": "MBPP/399", "prompt": "'''Write a function to perform the mathematical bitwise xor operation across the given tuples. You need to pass these assertions:     assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13).'''\n\n ", "entry_point": "bitwise_xor", "canonical_solution": "    def bitwise_xor(test_tup1, test_tup2):\n      res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n"}
{"task_id": "MBPP/400", "prompt": "'''Write a function to extract the frequency of unique tuples in the given list order irrespective. You need to pass these assertions:     assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4.'''\n\n ", "entry_point": "extract_freq", "canonical_solution": "    def extract_freq(test_list):\n      res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n      return (res)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n"}
{"task_id": "MBPP/401", "prompt": "'''Write a function to perform index wise addition of tuple elements in the given two nested tuples. You need to pass these assertions:     assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17)).'''\n\n ", "entry_point": "add_nested_tuples", "canonical_solution": "    def add_nested_tuples(test_tup1, test_tup2):\n      res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n       for tup1, tup2 in zip(test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n"}
{"task_id": "MBPP/402", "prompt": "'''Write a function to compute the value of ncr%p. You need to pass these assertions:     assert ncr_modp(10,2,13)==6\n    assert ncr_modp(15,12,43)==25\n    assert ncr_modp(17,9,18)==10.'''\n\n ", "entry_point": "ncr_modp", "canonical_solution": "    def ncr_modp(n, r, p): \n        C = [0 for i in range(r+1)]   \n        C[0] = 1\n        for i in range(1, n+1): \n            for j in range(min(i, r), 0, -1): \n                C[j] = (C[j] + C[j-1]) % p   \n        return C[r] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,2,13)==6\n    assert candidate(15,12,43)==25\n    assert candidate(17,9,18)==10\n"}
{"task_id": "MBPP/403", "prompt": "'''Write a function to check if a url is valid or not using regex. You need to pass these assertions:     assert is_valid_URL(\"https://www.google.com\") == True\n    assert is_valid_URL(\"https:/www.gmail.com\") == False\n    assert is_valid_URL(\"https:// www.redit.com\") == False.'''\n\n ", "entry_point": "is_valid_URL", "canonical_solution": "    import re\n    def is_valid_URL(str):\n    \tregex = (\"((http|https)://)(www.)?\" +\n    \t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n    \t\t\t\"{2,256}\\\\.[a-z]\" +\n    \t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n    \t\t\t\"._\\\\+~#?&//=]*)\")\n    \tp = re.compile(regex)\n    \tif (str == None):\n    \t\treturn False\n    \tif(re.search(p, str)):\n    \t\treturn True\n    \telse:\n    \t\treturn False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"https://www.google.com\") == True\n    assert candidate(\"https:/www.gmail.com\") == False\n    assert candidate(\"https:// www.redit.com\") == False\n"}
{"task_id": "MBPP/404", "prompt": "'''Write a python function to find the minimum of two numbers. You need to pass these assertions:     assert minimum(1,2) == 1\n    assert minimum(-5,-4) == -5\n    assert minimum(0,0) == 0.'''\n\n ", "entry_point": "minimum", "canonical_solution": "    def minimum(a,b):   \n        if a <= b: \n            return a \n        else: \n            return b ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n"}
{"task_id": "MBPP/405", "prompt": "'''Write a function to check whether an element exists within a tuple. You need to pass these assertions:     assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True.'''\n\n ", "entry_point": "check_tuplex", "canonical_solution": "    def check_tuplex(tuplex,tuple1): \n      if tuple1 in tuplex:\n        return True\n      else:\n         return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n"}
{"task_id": "MBPP/406", "prompt": "'''Write a python function to find the parity of a given number. You need to pass these assertions:     assert find_Parity(12) == \"Even Parity\"\n    assert find_Parity(7) == \"Odd Parity\"\n    assert find_Parity(10) == \"Even Parity\".'''\n\n ", "entry_point": "find_Parity", "canonical_solution": "    def find_Parity(x): \n        y = x ^ (x >> 1); \n        y = y ^ (y >> 2); \n        y = y ^ (y >> 4); \n        y = y ^ (y >> 8); \n        y = y ^ (y >> 16); \n        if (y & 1): \n            return (\"Odd Parity\"); \n        return (\"Even Parity\"); ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(12) == \"Even Parity\"\n    assert candidate(7) == \"Odd Parity\"\n    assert candidate(10) == \"Even Parity\"\n"}
{"task_id": "MBPP/407", "prompt": "'''Write a function to create the next bigger number by rearranging the digits of a given number. You need to pass these assertions:     assert rearrange_bigger(12)==21\n    assert rearrange_bigger(10)==False\n    assert rearrange_bigger(102)==120.'''\n\n ", "entry_point": "rearrange_bigger", "canonical_solution": "    def rearrange_bigger(n):\n        nums = list(str(n))\n        for i in range(len(nums)-2,-1,-1):\n            if nums[i] < nums[i+1]:\n                z = nums[i:]\n                y = min(filter(lambda x: x > z[0], z))\n                z.remove(y)\n                z.sort()\n                nums[i:] = [y] + z\n                return int(\"\".join(nums))\n        return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(12)==21\n    assert candidate(10)==False\n    assert candidate(102)==120\n"}
{"task_id": "MBPP/408", "prompt": "'''Write a function to find k number of pairs which consist of one element from the first array and one element from the second array. You need to pass these assertions:     assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]].'''\n\n ", "entry_point": "k_smallest_pairs", "canonical_solution": "    import heapq\n    def k_smallest_pairs(nums1, nums2, k):\n       queue = []\n       def push(i, j):\n           if i < len(nums1) and j < len(nums2):\n               heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n       push(0, 0)\n       pairs = []\n       while queue and len(pairs) < k:\n           _, i, j = heapq.heappop(queue)\n           pairs.append([nums1[i], nums2[j]])\n           push(i, j + 1)\n           if j == 0:\n               push(i + 1, 0)\n       return pairs", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert candidate([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert candidate([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n"}
{"task_id": "MBPP/409", "prompt": "'''Write a function to find the minimum product from the pairs of tuples within a given list. You need to pass these assertions:     assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30\n    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100.'''\n\n ", "entry_point": "min_product_tuple", "canonical_solution": "    def min_product_tuple(list1):\n        result_min = min([abs(x * y) for x, y in list1] )\n        return result_min", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n"}
{"task_id": "MBPP/410", "prompt": "'''Write a function to find the minimum value in a given heterogeneous list. You need to pass these assertions:     assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n    assert min_val(['Python', 15, 20, 25])==15\n    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20.'''\n\n ", "entry_point": "min_val", "canonical_solution": "    def min_val(listval):\n         min_val = min(i for i in listval if isinstance(i, int))\n         return min_val", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n"}
{"task_id": "MBPP/411", "prompt": "'''Write a function to convert the given snake case string to camel case string by using regex. You need to pass these assertions:     assert snake_to_camel('android_tv') == 'AndroidTv'\n    assert snake_to_camel('google_pixel') == 'GooglePixel'\n    assert snake_to_camel('apple_watch') == 'AppleWatch'.'''\n\n ", "entry_point": "snake_to_camel", "canonical_solution": "    import re\n    def snake_to_camel(word):\n      return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n"}
{"task_id": "MBPP/412", "prompt": "'''Write a python function to remove odd numbers from a given list. You need to pass these assertions:     assert remove_odd([1,2,3]) == [2]\n    assert remove_odd([2,4,6]) == [2,4,6]\n    assert remove_odd([10,20,3]) == [10,20].'''\n\n ", "entry_point": "remove_odd", "canonical_solution": "    def remove_odd(l):\n        for i in l:\n            if i % 2 != 0:\n                l.remove(i)\n        return l", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n"}
{"task_id": "MBPP/413", "prompt": "'''Write a function to extract the nth element from a given list of tuples. You need to pass these assertions:     assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94].'''\n\n ", "entry_point": "extract_nth_element", "canonical_solution": "    def extract_nth_element(list1, n):\n        result = [x[n] for x in list1]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n"}
{"task_id": "MBPP/414", "prompt": "'''Write a python function to check whether the value exists in a sequence or not. You need to pass these assertions:     assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    assert overlapping([1,2,3],[4,5,6]) == False\n    assert overlapping([1,4,5],[1,4,5]) == True.'''\n\n ", "entry_point": "overlapping", "canonical_solution": "    def overlapping(list1,list2):  \n        c=0\n        d=0\n        for i in list1: \n            c+=1\n        for i in list2: \n            d+=1\n        for i in range(0,c): \n            for j in range(0,d): \n                if(list1[i]==list2[j]): \n                    return 1\n        return 0", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n"}
{"task_id": "MBPP/415", "prompt": "'''Write a python function to find a pair with highest product from a given array of integers. You need to pass these assertions:     assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert max_Product([1,2,3]) == (2,3).'''\n\n ", "entry_point": "max_Product", "canonical_solution": "    def max_Product(arr): \n        arr_len = len(arr) \n        if (arr_len < 2): \n            return (\"No pairs exists\")           \n        x = arr[0]; y = arr[1]      \n        for i in range(0,arr_len): \n            for j in range(i + 1,arr_len): \n                if (arr[i] * arr[j] > x * y): \n                    x = arr[i]; y = arr[j] \n        return x,y    ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert candidate([1,2,3]) == (2,3)\n"}
{"task_id": "MBPP/416", "prompt": "'''Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number. You need to pass these assertions:     assert breakSum(12) == 13\n    assert breakSum(24) == 27\n    assert breakSum(23) == 23.'''\n\n ", "entry_point": "breakSum", "canonical_solution": "    MAX = 1000000\n    def breakSum(n): \n    \tdp = [0]*(n+1) \n    \tdp[0] = 0\n    \tdp[1] = 1\n    \tfor i in range(2, n+1): \n    \t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n    \treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(12) == 13\n    assert candidate(24) == 27\n    assert candidate(23) == 23\n"}
{"task_id": "MBPP/417", "prompt": "'''Write a function to find common first element in given list of tuple. You need to pass these assertions:     assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')].'''\n\n ", "entry_point": "group_tuples", "canonical_solution": "    def group_tuples(Input): \n    \tout = {} \n    \tfor elem in Input: \n    \t\ttry: \n    \t\t\tout[elem[0]].extend(elem[1:]) \n    \t\texcept KeyError: \n    \t\t\tout[elem[0]] = list(elem) \n    \treturn [tuple(values) for values in out.values()] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n"}
{"task_id": "MBPP/418", "prompt": "'''Write a python function to find the sublist having maximum length. You need to pass these assertions:     assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1].'''\n\n ", "entry_point": "Find_Max", "canonical_solution": "    def Find_Max(lst): \n        maxList = max((x) for x in lst) \n        return maxList", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n"}
{"task_id": "MBPP/419", "prompt": "'''Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. You need to pass these assertions:     assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert round_and_sum([5,2,9,24.3,29])==345\n    assert round_and_sum([25.0,56.7,89.2])==513.'''\n\n ", "entry_point": "round_and_sum", "canonical_solution": "    def round_and_sum(list1):\n      lenght=len(list1)\n      round_and_sum=sum(list(map(round,list1))* lenght)\n      return round_and_sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert candidate([5,2,9,24.3,29])==345\n    assert candidate([25.0,56.7,89.2])==513\n"}
{"task_id": "MBPP/420", "prompt": "'''Write a python function to find the cube sum of first n even natural numbers. You need to pass these assertions:     assert cube_Sum(2) == 72\n    assert cube_Sum(3) == 288\n    assert cube_Sum(4) == 800.'''\n\n ", "entry_point": "cube_Sum", "canonical_solution": "    def cube_Sum(n): \n        sum = 0\n        for i in range(1,n + 1): \n            sum += (2*i)*(2*i)*(2*i) \n        return sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n"}
{"task_id": "MBPP/421", "prompt": "'''Write a function to concatenate each element of tuple by the delimiter. You need to pass these assertions:     assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'.'''\n\n ", "entry_point": "concatenate_tuple", "canonical_solution": "    def concatenate_tuple(test_tup):\n        delim = \"-\"\n        res = ''.join([str(ele) + delim for ele in test_tup])\n        res = res[ : len(res) - len(delim)]\n        return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n"}
{"task_id": "MBPP/422", "prompt": "'''Write a python function to find the average of cubes of first n natural numbers. You need to pass these assertions:     assert find_Average_Of_Cube(2) == 4.5\n    assert find_Average_Of_Cube(3) == 12\n    assert find_Average_Of_Cube(1) == 1.'''\n\n ", "entry_point": "find_Average_Of_Cube", "canonical_solution": "    def find_Average_Of_Cube(n):  \n        sum = 0\n        for i in range(1, n + 1): \n            sum += i * i * i  \n        return round(sum / n, 6) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n"}
{"task_id": "MBPP/423", "prompt": "'''Write a function to solve gold mine problem. You need to pass these assertions:     assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert get_maxgold([[10,20],[30,40]],2,2)==70\n    assert get_maxgold([[4,9],[3,7]],2,2)==13.'''\n\n ", "entry_point": "get_maxgold", "canonical_solution": "    def get_maxgold(gold, m, n): \n        goldTable = [[0 for i in range(n)] \n                            for j in range(m)]   \n        for col in range(n-1, -1, -1): \n            for row in range(m):  \n                if (col == n-1): \n                    right = 0\n                else: \n                    right = goldTable[row][col+1] \n                if (row == 0 or col == n-1): \n                    right_up = 0\n                else: \n                    right_up = goldTable[row-1][col+1] \n                if (row == m-1 or col == n-1): \n                    right_down = 0\n                else: \n                    right_down = goldTable[row+1][col+1] \n                goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n        res = goldTable[0][0] \n        for i in range(1, m): \n            res = max(res, goldTable[i][0])  \n        return res ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert candidate([[10,20],[30,40]],2,2)==70\n    assert candidate([[4,9],[3,7]],2,2)==13\n"}
{"task_id": "MBPP/424", "prompt": "'''Write a function to extract only the rear index element of each string in the given tuple. You need to pass these assertions:     assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o'].'''\n\n ", "entry_point": "extract_rear", "canonical_solution": "    def extract_rear(test_tuple):\n      res = list(sub[len(sub) - 1] for sub in test_tuple)\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n"}
{"task_id": "MBPP/425", "prompt": "'''Write a function to count the number of sublists containing a particular element. You need to pass these assertions:     assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1.'''\n\n ", "entry_point": "count_element_in_list", "canonical_solution": "    def count_element_in_list(list1, x): \n        ctr = 0\n        for i in range(len(list1)): \n            if x in list1[i]: \n                ctr+= 1          \n        return ctr", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n"}
{"task_id": "MBPP/426", "prompt": "'''Write a function to filter odd numbers using lambda function. You need to pass these assertions:     assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\n    assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3].'''\n\n ", "entry_point": "filter_oddnumbers", "canonical_solution": "    def filter_oddnumbers(nums):\n     odd_nums = list(filter(lambda x: x%2 != 0, nums))\n     return odd_nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n"}
{"task_id": "MBPP/427", "prompt": "'''Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex. You need to pass these assertions:     assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    assert change_date_format(\"2020-11-13\") == '13-11-2020'\n    assert change_date_format(\"2021-04-26\") == '26-04-2021'.'''\n\n ", "entry_point": "change_date_format", "canonical_solution": "    import re\n    def change_date_format(dt):\n            return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n"}
{"task_id": "MBPP/428", "prompt": "'''Write a function to sort the given array by using shell sort. You need to pass these assertions:     assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96].'''\n\n ", "entry_point": "shell_sort", "canonical_solution": "    def shell_sort(my_list):\n        gap = len(my_list) // 2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                current_item = my_list[i]\n                j = i\n                while j >= gap and my_list[j - gap] > current_item:\n                    my_list[j] = my_list[j - gap]\n                    j -= gap\n                my_list[j] = current_item\n            gap //= 2\n    \n        return my_list", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n"}
{"task_id": "MBPP/429", "prompt": "'''Write a function to extract the elementwise and tuples from the given two tuples. You need to pass these assertions:     assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0).'''\n\n ", "entry_point": "and_tuples", "canonical_solution": "    def and_tuples(test_tup1, test_tup2):\n      res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n"}
{"task_id": "MBPP/430", "prompt": "'''Write a function to find the directrix of a parabola. You need to pass these assertions:     assert parabola_directrix(5,3,2)==-198\n    assert parabola_directrix(9,8,4)==-2336\n    assert parabola_directrix(2,4,6)==-130.'''\n\n ", "entry_point": "parabola_directrix", "canonical_solution": "    def parabola_directrix(a, b, c): \n      directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n      return directrix", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,3,2)==-198\n    assert candidate(9,8,4)==-2336\n    assert candidate(2,4,6)==-130\n"}
{"task_id": "MBPP/431", "prompt": "'''Write a function that takes two lists and returns true if they have at least one common element. You need to pass these assertions:     assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n    assert common_element([1,2,3,4,5], [6,7,8,9])==None\n    assert common_element(['a','b','c'], ['d','b','e'])==True.'''\n\n ", "entry_point": "common_element", "canonical_solution": "    def common_element(list1, list2):\n         result = False\n         for x in list1:\n             for y in list2:\n                 if x == y:\n                     result = True\n                     return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\n    assert candidate(['a','b','c'], ['d','b','e'])==True\n"}
{"task_id": "MBPP/432", "prompt": "'''Write a function to find the median of a trapezium. You need to pass these assertions:     assert median_trapezium(15,25,35)==20\n    assert median_trapezium(10,20,30)==15\n    assert median_trapezium(6,9,4)==7.5.'''\n\n ", "entry_point": "median_trapezium", "canonical_solution": "    def median_trapezium(base1,base2,height):\n     median = 0.5 * (base1+ base2)\n     return median", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n"}
{"task_id": "MBPP/433", "prompt": "'''Write a function to check whether the entered number is greater than the elements of the given array. You need to pass these assertions:     assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'.'''\n\n ", "entry_point": "check_greater", "canonical_solution": "    def check_greater(arr, number):\n      arr.sort()\n      if number > arr[-1]:\n        return ('Yes, the entered number is greater than those in the array')\n      else:\n        return ('No, entered number is less than those in the array')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert candidate([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n"}
{"task_id": "MBPP/434", "prompt": "'''Write a function that matches a string that has an a followed by one or more b's. You need to pass these assertions:     assert text_match_one(\"ac\")==('Not matched!')\n    assert text_match_one(\"dc\")==('Not matched!')\n    assert text_match_one(\"abba\")==('Found a match!').'''\n\n ", "entry_point": "text_match_one", "canonical_solution": "    import re\n    def text_match_one(text):\n            patterns = 'ab+?'\n            if re.search(patterns,  text):\n                    return 'Found a match!'\n            else:\n                    return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n"}
{"task_id": "MBPP/435", "prompt": "'''Write a python function to find the last digit of a given number. You need to pass these assertions:     assert last_Digit(123) == 3\n    assert last_Digit(25) == 5\n    assert last_Digit(30) == 0.'''\n\n ", "entry_point": "last_Digit", "canonical_solution": "    def last_Digit(n) :\n        return (n % 10) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n"}
{"task_id": "MBPP/436", "prompt": "'''Write a python function to print negative numbers in a list. You need to pass these assertions:     assert neg_nos([-1,4,5,-6]) == -1,-6\n    assert neg_nos([-1,-2,3,4]) == -1,-2\n    assert neg_nos([-7,-6,8,9]) == -7,-6.'''\n\n ", "entry_point": "neg_nos", "canonical_solution": "    def neg_nos(list1):\n      for num in list1: \n        if num < 0: \n           return num ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([-1,4,5,-6]) == -1,-6\n    assert candidate([-1,-2,3,4]) == -1,-2\n    assert candidate([-7,-6,8,9]) == -7,-6\n"}
{"task_id": "MBPP/437", "prompt": "'''Write a function to remove odd characters in a string. You need to pass these assertions:     assert remove_odd(\"python\")==(\"yhn\")\n    assert remove_odd(\"program\")==(\"rga\")\n    assert remove_odd(\"language\")==(\"agae\").'''\n\n ", "entry_point": "remove_odd", "canonical_solution": "    def remove_odd(str1):\n     str2 = ''\n     for i in range(1, len(str1) + 1):\n        if(i % 2 == 0):\n            str2 = str2 + str1[i - 1]\n     return str2", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"python\")==(\"yhn\")\n    assert candidate(\"program\")==(\"rga\")\n    assert candidate(\"language\")==(\"agae\")\n"}
{"task_id": "MBPP/438", "prompt": "'''Write a function to count bidirectional tuple pairs. You need to pass these assertions:     assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'.'''\n\n ", "entry_point": "count_bidirectional", "canonical_solution": "    def count_bidirectional(test_list):\n      res = 0\n      for idx in range(0, len(test_list)):\n        for iidx in range(idx + 1, len(test_list)):\n          if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n            res += 1\n      return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\n"}
{"task_id": "MBPP/439", "prompt": "'''Write a function to convert a list of multiple integers into a single integer. You need to pass these assertions:     assert multiple_to_single([11, 33, 50])==113350\n    assert multiple_to_single([-1,2,3,4,5,6])==-123456\n    assert multiple_to_single([10,15,20,25])==10152025.'''\n\n ", "entry_point": "multiple_to_single", "canonical_solution": "    def multiple_to_single(L):\n      x = int(\"\".join(map(str, L)))\n      return x", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n"}
{"task_id": "MBPP/440", "prompt": "'''Write a function to find all adverbs and their positions in a given sentence. You need to pass these assertions:     assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately').'''\n\n ", "entry_point": "find_adverb_position", "canonical_solution": "    import re\n    def find_adverb_position(text):\n     for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n"}
{"task_id": "MBPP/441", "prompt": "'''Write a function to find the surface area of a cube. You need to pass these assertions:     assert surfacearea_cube(5)==150\n    assert surfacearea_cube(3)==54\n    assert surfacearea_cube(10)==600.'''\n\n ", "entry_point": "surfacearea_cube", "canonical_solution": "    def surfacearea_cube(l):\n      surfacearea= 6*l*l\n      return surfacearea", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n"}
{"task_id": "MBPP/442", "prompt": "'''Write a function to find the ration of positive numbers in an array of integers. You need to pass these assertions:     assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56.'''\n\n ", "entry_point": "positive_count", "canonical_solution": "    from array import array\n    def positive_count(nums):\n        n = len(nums)\n        n1 = 0\n        for x in nums:\n            if x > 0:\n                n1 += 1\n            else:\n              None\n        return round(n1/n,2)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n"}
{"task_id": "MBPP/443", "prompt": "'''Write a python function to find the largest negative number from the given list. You need to pass these assertions:     assert largest_neg([1,2,3,-4,-6]) == -6\n    assert largest_neg([1,2,3,-8,-9]) == -9\n    assert largest_neg([1,2,3,4,-1]) == -1.'''\n\n ", "entry_point": "largest_neg", "canonical_solution": "    def largest_neg(list1): \n        max = list1[0] \n        for x in list1: \n            if x < max : \n                 max = x  \n        return max", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n"}
{"task_id": "MBPP/444", "prompt": "'''Write a function to trim each tuple by k in the given tuple list. You need to pass these assertions:     assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'.'''\n\n ", "entry_point": "trim_tuple", "canonical_solution": "    def trim_tuple(test_list, K):\n      res = []\n      for ele in test_list:\n        N = len(ele)\n        res.append(tuple(list(ele)[K: N - K]))\n      return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n"}
{"task_id": "MBPP/445", "prompt": "'''Write a function to perform index wise multiplication of tuple elements in the given two tuples. You need to pass these assertions:     assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60)).'''\n\n ", "entry_point": "index_multiplication", "canonical_solution": "    def index_multiplication(test_tup1, test_tup2):\n      res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n       for tup1, tup2 in zip(test_tup1, test_tup2))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n"}
{"task_id": "MBPP/446", "prompt": "'''Write a python function to count the occurence of all elements of list in a tuple. You need to pass these assertions:     assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2.'''\n\n ", "entry_point": "count_Occurrence", "canonical_solution": "    from collections import Counter \n    def count_Occurrence(tup, lst): \n        count = 0\n        for item in tup: \n            if item in lst: \n                count+= 1 \n        return count  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n"}
{"task_id": "MBPP/447", "prompt": "'''Write a function to find cubes of individual elements in a list using lambda function. You need to pass these assertions:     assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert cube_nums([10,20,30])==([1000, 8000, 27000])\n    assert cube_nums([12,15])==([1728, 3375]).'''\n\n ", "entry_point": "cube_nums", "canonical_solution": "    def cube_nums(nums):\n     cube_nums = list(map(lambda x: x ** 3, nums))\n     return cube_nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n"}
{"task_id": "MBPP/448", "prompt": "'''Write a function to calculate the sum of perrin numbers. You need to pass these assertions:     assert cal_sum(9) == 49\n    assert cal_sum(10) == 66\n    assert cal_sum(11) == 88.'''\n\n ", "entry_point": "cal_sum", "canonical_solution": "    def cal_sum(n): \n    \ta = 3\n    \tb = 0\n    \tc = 2\n    \tif (n == 0): \n    \t\treturn 3\n    \tif (n == 1): \n    \t\treturn 3\n    \tif (n == 2): \n    \t\treturn 5\n    \tsum = 5\n    \twhile (n > 2): \n    \t\td = a + b \n    \t\tsum = sum + d \n    \t\ta = b \n    \t\tb = c \n    \t\tc = d \n    \t\tn = n-1\n    \treturn sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n"}
{"task_id": "MBPP/449", "prompt": "'''Write a python function to check whether the triangle is valid or not if 3 points are given. You need to pass these assertions:     assert check_Triangle(1,5,2,5,4,6) == 'Yes'\n    assert check_Triangle(1,1,1,4,1,5) == 'No'\n    assert check_Triangle(1,1,1,1,1,1) == 'No'.'''\n\n ", "entry_point": "check_Triangle", "canonical_solution": "    def check_Triangle(x1,y1,x2,y2,x3,y3): \n        a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n        if a == 0: \n            return ('No') \n        else: \n            return ('Yes') ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,5,2,5,4,6) == 'Yes'\n    assert candidate(1,1,1,4,1,5) == 'No'\n    assert candidate(1,1,1,1,1,1) == 'No'\n"}
{"task_id": "MBPP/450", "prompt": "'''Write a function to extract specified size of strings from a give list of string values. You need to pass these assertions:     assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises'].'''\n\n ", "entry_point": "extract_string", "canonical_solution": "    def extract_string(str, l):\n        result = [e for e in str if len(e) == l] \n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n"}
{"task_id": "MBPP/451", "prompt": "'''Write a function to remove all whitespaces from the given string using regex. You need to pass these assertions:     assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\n    assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'.'''\n\n ", "entry_point": "remove_whitespaces", "canonical_solution": "    import re\n    def remove_whitespaces(text1):\n      return (re.sub(r'\\s+', '',text1))", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n"}
{"task_id": "MBPP/452", "prompt": "'''Write a function that gives loss amount if the given amount has loss else return none. You need to pass these assertions:     assert loss_amount(1500,1200)==None\n    assert loss_amount(100,200)==100\n    assert loss_amount(2000,5000)==3000.'''\n\n ", "entry_point": "loss_amount", "canonical_solution": "    def loss_amount(actual_cost,sale_amount): \n      if(sale_amount > actual_cost):\n        amount = sale_amount - actual_cost\n        return amount\n      else:\n        return None", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1500,1200)==None\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n"}
{"task_id": "MBPP/453", "prompt": "'''Write a python function to find the sum of even factors of a number. You need to pass these assertions:     assert sumofFactors(18) == 26\n    assert sumofFactors(30) == 48\n    assert sumofFactors(6) == 8.'''\n\n ", "entry_point": "sumofFactors", "canonical_solution": "    import math \n    def sumofFactors(n) : \n        if (n % 2 != 0) : \n            return 0\n        res = 1\n        for i in range(2, (int)(math.sqrt(n)) + 1) :    \n            count = 0\n            curr_sum = 1\n            curr_term = 1\n            while (n % i == 0) : \n                count= count + 1\n                n = n // i \n                if (i == 2 and count == 1) : \n                    curr_sum = 0\n                curr_term = curr_term * i \n                curr_sum = curr_sum + curr_term \n            res = res * curr_sum  \n        if (n >= 2) : \n            res = res * (1 + n) \n        return res ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n"}
{"task_id": "MBPP/454", "prompt": "'''Write a function that matches a word containing 'z'. You need to pass these assertions:     assert text_match_wordz(\"pythonz.\")==('Found a match!')\n    assert text_match_wordz(\"xyz.\")==('Found a match!')\n    assert text_match_wordz(\"  lang  .\")==('Not matched!').'''\n\n ", "entry_point": "text_match_wordz", "canonical_solution": "    import re\n    def text_match_wordz(text):\n            patterns = '\\w*z.\\w*'\n            if re.search(patterns,  text):\n                    return 'Found a match!'\n            else:\n                    return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"pythonz.\")==('Found a match!')\n    assert candidate(\"xyz.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n"}
{"task_id": "MBPP/455", "prompt": "'''Write a function to check whether the given month number contains 31 days or not. You need to pass these assertions:     assert check_monthnumb_number(5)==True\n    assert check_monthnumb_number(2)==False\n    assert check_monthnumb_number(6)==False.'''\n\n ", "entry_point": "check_monthnumb_number", "canonical_solution": "    def check_monthnumb_number(monthnum2):\n      if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n        return True\n      else:\n        return False", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n"}
{"task_id": "MBPP/456", "prompt": "'''Write a function to reverse strings in a given list of string values. You need to pass these assertions:     assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram'].'''\n\n ", "entry_point": "reverse_string_list", "canonical_solution": "    def reverse_string_list(stringlist):\n        result = [x[::-1] for x in stringlist]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n"}
{"task_id": "MBPP/457", "prompt": "'''Write a python function to find the sublist having minimum length. You need to pass these assertions:     assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x'].'''\n\n ", "entry_point": "Find_Min", "canonical_solution": "    def Find_Min(lst): \n        minList = min((x) for x in lst) \n        return minList", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n"}
{"task_id": "MBPP/458", "prompt": "'''Write a function to find the area of a rectangle. You need to pass these assertions:     assert rectangle_area(10,20)==200\n    assert rectangle_area(10,5)==50\n    assert rectangle_area(4,2)==8.'''\n\n ", "entry_point": "rectangle_area", "canonical_solution": "    def rectangle_area(l,b):\n      area=l*b\n      return area", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n"}
{"task_id": "MBPP/459", "prompt": "'''Write a function to remove uppercase substrings from a given string by using regex. You need to pass these assertions:     assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'.'''\n\n ", "entry_point": "remove_uppercase", "canonical_solution": "    import re\n    def remove_uppercase(str1):\n      remove_upper = lambda text: re.sub('[A-Z]', '', text)\n      result =  remove_upper(str1)\n      return (result)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n"}
{"task_id": "MBPP/460", "prompt": "'''Write a python function to get the first element of each sublist. You need to pass these assertions:     assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([[1,2,3],[4, 5]]) == [1,4]\n    assert Extract([[9,8,1],[1,2]]) == [9,1].'''\n\n ", "entry_point": "Extract", "canonical_solution": "    def Extract(lst): \n        return [item[0] for item in lst] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n"}
{"task_id": "MBPP/461", "prompt": "'''Write a python function to count the upper case characters in a given string. You need to pass these assertions:     assert upper_ctr('PYthon') == 1\n    assert upper_ctr('BigData') == 1\n    assert upper_ctr('program') == 0.'''\n\n ", "entry_point": "upper_ctr", "canonical_solution": "    def upper_ctr(str):\n        upper_ctr = 0\n        for i in range(len(str)):\n              if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n              return upper_ctr", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n"}
{"task_id": "MBPP/462", "prompt": "'''Write a function to find all possible combinations of the elements of a given list. You need to pass these assertions:     assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']].'''\n\n ", "entry_point": "combinations_list", "canonical_solution": "    def combinations_list(list1):\n        if len(list1) == 0:\n            return [[]]\n        result = []\n        for el in combinations_list(list1[1:]):\n            result += [el, el+[list1[0]]]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n"}
{"task_id": "MBPP/463", "prompt": "'''Write a function to find the maximum product subarray of the given array. You need to pass these assertions:     assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert max_subarray_product([6, -3, -10, 0, 2]) == 180 \n    assert max_subarray_product([-2, -40, 0, -2, -3]) == 80.'''\n\n ", "entry_point": "max_subarray_product", "canonical_solution": "    def max_subarray_product(arr):\n    \tn = len(arr)\n    \tmax_ending_here = 1\n    \tmin_ending_here = 1\n    \tmax_so_far = 0\n    \tflag = 0\n    \tfor i in range(0, n):\n    \t\tif arr[i] > 0:\n    \t\t\tmax_ending_here = max_ending_here * arr[i]\n    \t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n    \t\t\tflag = 1\n    \t\telif arr[i] == 0:\n    \t\t\tmax_ending_here = 1\n    \t\t\tmin_ending_here = 1\n    \t\telse:\n    \t\t\ttemp = max_ending_here\n    \t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n    \t\t\tmin_ending_here = temp * arr[i]\n    \t\tif (max_so_far < max_ending_here):\n    \t\t\tmax_so_far = max_ending_here\n    \tif flag == 0 and max_so_far == 0:\n    \t\treturn 0\n    \treturn max_so_far", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180 \n    assert candidate([-2, -40, 0, -2, -3]) == 80\n"}
{"task_id": "MBPP/464", "prompt": "'''Write a function to check if all values are same in a dictionary. You need to pass these assertions:     assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False.'''\n\n ", "entry_point": "check_value", "canonical_solution": "    def check_value(dict, n):\n        result = all(x == n for x in dict.values()) \n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n"}
{"task_id": "MBPP/465", "prompt": "'''Write a function to drop empty items from a given dictionary. You need to pass these assertions:     assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}.'''\n\n ", "entry_point": "drop_empty", "canonical_solution": "    def drop_empty(dict1):\n      dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n      return dict1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n"}
{"task_id": "MBPP/466", "prompt": "'''Write a function to find the peak element in the given array. You need to pass these assertions:     assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([2, 3, 4, 5, 6], 5) == 4\n    assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 .'''\n\n ", "entry_point": "find_peak_util", "canonical_solution": "    def find_peak_util(arr, low, high, n): \n    \tmid = low + (high - low)/2\n    \tmid = int(mid) \n    \tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n    \t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n    \t\treturn mid \n    \telif (mid > 0 and arr[mid - 1] > arr[mid]): \n    \t\treturn find_peak_util(arr, low, (mid - 1), n) \n    \telse: \n    \t\treturn find_peak_util(arr, (mid + 1), high, n) \n    def find_peak(arr, n): \n    \treturn find_peak_util(arr, 0, n - 1, n) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([2, 3, 4, 5, 6], 5) == 4\n    assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 \n"}
{"task_id": "MBPP/467", "prompt": "'''Write a python function to convert decimal number to octal number. You need to pass these assertions:     assert decimal_to_Octal(10) == 12\n    assert decimal_to_Octal(2) == 2\n    assert decimal_to_Octal(33) == 41.'''\n\n ", "entry_point": "decimal_to_Octal", "canonical_solution": "    def decimal_to_Octal(deciNum):\n        octalNum = 0\n        countval = 1;\n        dNo = deciNum;\n        while (deciNum!= 0):\n            remainder= deciNum % 8;\n            octalNum+= remainder*countval;\n            countval= countval*10;\n            deciNum //= 8; \n        return (octalNum)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n    assert candidate(33) == 41\n"}
{"task_id": "MBPP/468", "prompt": "'''Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. You need to pass these assertions:     assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n    assert max_product([4, 42, 55, 68, 80], 5) == 50265600\n    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 .'''\n\n ", "entry_point": "max_product", "canonical_solution": "    def max_product(arr, n ): \n    \tmpis =[0] * (n) \n    \tfor i in range(n): \n    \t\tmpis[i] = arr[i] \n    \tfor i in range(1, n): \n    \t\tfor j in range(i): \n    \t\t\tif (arr[i] > arr[j] and\n    \t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n    \t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n    \treturn max(mpis)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000 \n    assert candidate([4, 42, 55, 68, 80], 5) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 \n"}
{"task_id": "MBPP/469", "prompt": "'''Write a function to find the maximum profit earned from a maximum of k stock transactions You need to pass these assertions:     assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert max_profit([10, 6, 8, 4, 2], 2) == 2.'''\n\n ", "entry_point": "max_profit", "canonical_solution": "    def max_profit(price, k):\n        n = len(price)\n        final_profit = [[None for x in range(n)] for y in range(k + 1)]\n        for i in range(k + 1):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    final_profit[i][j] = 0\n                else:\n                    max_so_far = 0\n                    for x in range(j):\n                        curr_price = price[j] - price[x] + final_profit[i-1][x]\n                        if max_so_far < curr_price:\n                            max_so_far = curr_price\n                    final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n        return final_profit[k][n-1]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert candidate([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert candidate([10, 6, 8, 4, 2], 2) == 2\n"}
{"task_id": "MBPP/470", "prompt": "'''Write a function to find the pairwise addition of the elements of the given tuples. You need to pass these assertions:     assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22).'''\n\n ", "entry_point": "add_pairwise", "canonical_solution": "    def add_pairwise(test_tup):\n      res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n"}
{"task_id": "MBPP/471", "prompt": "'''Write a python function to find remainder of array multiplication divided by n. You need to pass these assertions:     assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert find_remainder([1,1,1],3,1) == 0\n    assert find_remainder([1,2,1],3,2) == 0.'''\n\n ", "entry_point": "find_remainder", "canonical_solution": "    def find_remainder(arr, lens, n): \n        mul = 1\n        for i in range(lens):  \n            mul = (mul * (arr[i] % n)) % n \n        return mul % n ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert candidate([1,1,1],3,1) == 0\n    assert candidate([1,2,1],3,2) == 0\n"}
{"task_id": "MBPP/472", "prompt": "'''Write a python function to check whether the given list contains consecutive numbers or not. You need to pass these assertions:     assert check_Consecutive([1,2,3,4,5]) == True\n    assert check_Consecutive([1,2,3,5,6]) == False\n    assert check_Consecutive([1,2,1]) == False.'''\n\n ", "entry_point": "check_Consecutive", "canonical_solution": "    def check_Consecutive(l): \n        return sorted(l) == list(range(min(l),max(l)+1)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n"}
{"task_id": "MBPP/473", "prompt": "'''Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. You need to pass these assertions:     assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}.'''\n\n ", "entry_point": "tuple_intersection", "canonical_solution": "    def tuple_intersection(test_list1, test_list2):\n      res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n      return (res)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n"}
{"task_id": "MBPP/474", "prompt": "'''Write a function to replace characters in a string. You need to pass these assertions:     assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"character\",'c','a')==(\"aharaater\")\n    assert replace_char(\"python\",'l','a')==(\"python\").'''\n\n ", "entry_point": "replace_char", "canonical_solution": "    def replace_char(str1,ch,newch):\n     str2 = str1.replace(ch, newch)\n     return str2", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"polygon\",'y','l')==(\"pollgon\")\n    assert candidate(\"character\",'c','a')==(\"aharaater\")\n    assert candidate(\"python\",'l','a')==(\"python\")\n"}
{"task_id": "MBPP/475", "prompt": "'''Write a function to sort counter by value. You need to pass these assertions:     assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)].'''\n\n ", "entry_point": "sort_counter", "canonical_solution": "    from collections import Counter\n    def sort_counter(dict1):\n     x = Counter(dict1)\n     sort_counter=x.most_common()\n     return sort_counter", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n"}
{"task_id": "MBPP/476", "prompt": "'''Write a python function to find the sum of the largest and smallest value in a given array. You need to pass these assertions:     assert big_sum([1,2,3]) == 4\n    assert big_sum([-1,2,3,4]) == 3\n    assert big_sum([2,3,6]) == 8.'''\n\n ", "entry_point": "big_sum", "canonical_solution": "    def big_sum(nums):\n          sum= max(nums)+min(nums)\n          return sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n"}
{"task_id": "MBPP/477", "prompt": "'''Write a python function to convert the given string to lower case. You need to pass these assertions:     assert is_lower(\"InValid\") == \"invalid\"\n    assert is_lower(\"TruE\") == \"true\"\n    assert is_lower(\"SenTenCE\") == \"sentence\".'''\n\n ", "entry_point": "is_lower", "canonical_solution": "    def is_lower(string):\n      return (string.lower())", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n"}
{"task_id": "MBPP/478", "prompt": "'''Write a function to remove lowercase substrings from a given string. You need to pass these assertions:     assert remove_lowercase(\"PYTHon\")==('PYTH')\n    assert remove_lowercase(\"FInD\")==('FID')\n    assert remove_lowercase(\"STRinG\")==('STRG').'''\n\n ", "entry_point": "remove_lowercase", "canonical_solution": "    import re\n    def remove_lowercase(str1):\n     remove_lower = lambda text: re.sub('[a-z]', '', text)\n     result =  remove_lower(str1)\n     return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"PYTHon\")==('PYTH')\n    assert candidate(\"FInD\")==('FID')\n    assert candidate(\"STRinG\")==('STRG')\n"}
{"task_id": "MBPP/479", "prompt": "'''Write a python function to find the first digit of a given number. You need to pass these assertions:     assert first_Digit(123) == 1\n    assert first_Digit(456) == 4\n    assert first_Digit(12) == 1.'''\n\n ", "entry_point": "first_Digit", "canonical_solution": "    def first_Digit(n) :  \n        while n >= 10:  \n            n = n / 10; \n        return int(n) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n"}
{"task_id": "MBPP/480", "prompt": "'''Write a python function to find the maximum occurring character in a given string. You need to pass these assertions:     assert get_max_occuring_char(\"data\") == \"a\"\n    assert get_max_occuring_char(\"create\") == \"e\"\n    assert get_max_occuring_char(\"brilliant girl\") == \"i\".'''\n\n ", "entry_point": "get_max_occuring_char", "canonical_solution": "    def get_max_occuring_char(str1):\n      ASCII_SIZE = 256\n      ctr = [0] * ASCII_SIZE\n      max = -1\n      ch = ''\n      for i in str1:\n        ctr[ord(i)]+=1;\n      for i in str1:\n        if max < ctr[ord(i)]:\n          max = ctr[ord(i)]\n          ch = i\n      return ch", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"create\") == \"e\"\n    assert candidate(\"brilliant girl\") == \"i\"\n"}
{"task_id": "MBPP/481", "prompt": "'''Write a function to determine if there is a subset of the given set with sum equal to the given sum. You need to pass these assertions:     assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True.'''\n\n ", "entry_point": "is_subset_sum", "canonical_solution": "    def is_subset_sum(set, n, sum):\n    \tif (sum == 0):\n    \t\treturn True\n    \tif (n == 0):\n    \t\treturn False\n    \tif (set[n - 1] > sum):\n    \t\treturn is_subset_sum(set, n - 1, sum)\n    \treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 15) == True\n"}
{"task_id": "MBPP/482", "prompt": "'''Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex. You need to pass these assertions:     assert match(\"Geeks\") == 'Yes'\n    assert match(\"geeksforGeeks\") == 'Yes'\n    assert match(\"geeks\") == 'No'.'''\n\n ", "entry_point": "match", "canonical_solution": "    import re \n    def match(text): \n    \t\tpattern = '[A-Z]+[a-z]+$'\n    \t\tif re.search(pattern, text): \n    \t\t\t\treturn('Yes') \n    \t\telse: \n    \t\t\t\treturn('No') ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(\"Geeks\") == 'Yes'\n    assert candidate(\"geeksforGeeks\") == 'Yes'\n    assert candidate(\"geeks\") == 'No'\n"}
{"task_id": "MBPP/483", "prompt": "'''Write a python function to find the first natural number whose factorial is divisible by x. You need to pass these assertions:     assert first_Factorial_Divisible_Number(10) == 5\n    assert first_Factorial_Divisible_Number(15) == 5\n    assert first_Factorial_Divisible_Number(5) == 4.'''\n\n ", "entry_point": "first_Factorial_Divisible_Number", "canonical_solution": "    def first_Factorial_Divisible_Number(x): \n        i = 1;\n        fact = 1; \n        for i in range(1,x): \n            fact = fact * i \n            if (fact % x == 0): \n                break\n        return i ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10) == 5\n    assert candidate(15) == 5\n    assert candidate(5) == 4\n"}
{"task_id": "MBPP/484", "prompt": "'''Write a function to remove the matching tuples from the given two tuples. You need to pass these assertions:     assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')].'''\n\n ", "entry_point": "remove_matching_tuple", "canonical_solution": "    def remove_matching_tuple(test_list1, test_list2):\n      res = [sub for sub in test_list1 if sub not in test_list2]\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert candidate([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert candidate([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\n"}
{"task_id": "MBPP/485", "prompt": "'''Write a function to find the largest palindromic number in the given array. You need to pass these assertions:     assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\n    assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9.'''\n\n ", "entry_point": "is_palindrome", "canonical_solution": "    def is_palindrome(n) : \n    \tdivisor = 1\n    \twhile (n / divisor >= 10) : \n    \t\tdivisor *= 10\n    \twhile (n != 0) : \n    \t\tleading = n // divisor \n    \t\ttrailing = n % 10\n    \t\tif (leading != trailing) : \n    \t\t\treturn False\n    \t\tn = (n % divisor) // 10\n    \t\tdivisor = divisor // 100\n    \treturn True\n    def largest_palindrome(A, n) : \n    \tA.sort() \n    \tfor i in range(n - 1, -1, -1) : \n    \t\tif (is_palindrome(A[i])) : \n    \t\t\treturn A[i] \n    \treturn -1", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\n    assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9\n"}
{"task_id": "MBPP/486", "prompt": "'''Write a function to compute binomial probability for the given number. You need to pass these assertions:     assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375\n    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488.'''\n\n ", "entry_point": "nCr", "canonical_solution": "    def nCr(n, r): \n    \tif (r > n / 2): \n    \t\tr = n - r \n    \tanswer = 1 \n    \tfor i in range(1, r + 1): \n    \t\tanswer *= (n - r + i) \n    \t\tanswer /= i \n    \treturn answer \n    def binomial_probability(n, k, p): \n    \treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375\n    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488\n"}
{"task_id": "MBPP/487", "prompt": "'''Write a function to sort a list of tuples in increasing order by the last element in each tuple. You need to pass these assertions:     assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n    assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)].'''\n\n ", "entry_point": "sort_tuple", "canonical_solution": "    def sort_tuple(tup): \n    \tlst = len(tup) \n    \tfor i in range(0, lst): \n    \t\tfor j in range(0, lst-i-1): \n    \t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n    \t\t\t\ttemp = tup[j] \n    \t\t\t\ttup[j]= tup[j + 1] \n    \t\t\t\ttup[j + 1]= temp \n    \treturn tup", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    assert candidate([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n    assert candidate([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]\n"}
{"task_id": "MBPP/488", "prompt": "'''Write a function to find the area of a pentagon. You need to pass these assertions:     assert area_pentagon(5)==43.01193501472417\n    assert area_pentagon(10)==172.0477400588967\n    assert area_pentagon(15)==387.10741513251753.'''\n\n ", "entry_point": "area_pentagon", "canonical_solution": "    import math\n    def area_pentagon(a):\n      area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n      return area", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5)==43.01193501472417\n    assert candidate(10)==172.0477400588967\n    assert candidate(15)==387.10741513251753\n"}
{"task_id": "MBPP/489", "prompt": "'''Write a python function to find the frequency of the largest value in a given array. You need to pass these assertions:     assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n    assert frequency_Of_Largest(3,[5,6,5]) == 1\n    assert frequency_Of_Largest(4,[2,7,7,7]) == 3.'''\n\n ", "entry_point": "frequency_Of_Largest", "canonical_solution": "    def frequency_Of_Largest(n,arr): \n        mn = arr[0] \n        freq = 1\n        for i in range(1,n): \n            if (arr[i] >mn): \n                mn = arr[i] \n                freq = 1\n            elif (arr[i] == mn): \n                freq += 1\n        return freq ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,[1,2,3,4,4]) == 2\n    assert candidate(3,[5,6,5]) == 1\n    assert candidate(4,[2,7,7,7]) == 3\n"}
{"task_id": "MBPP/490", "prompt": "'''Write a function to extract all the pairs which are symmetric in the given tuple list. You need to pass these assertions:     assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\n    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}.'''\n\n ", "entry_point": "extract_symmetric", "canonical_solution": "    def extract_symmetric(test_list):\n      temp = set(test_list) & {(b, a) for a, b in test_list}\n      res = {(a, b) for a, b in temp if a < b}\n      return (res) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    assert candidate([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\n    assert candidate([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\n"}
{"task_id": "MBPP/491", "prompt": "'''Write a function to find the sum of geometric progression series. You need to pass these assertions:     assert sum_gp(1,5,2)==31\n    assert sum_gp(1,5,4)==341\n    assert sum_gp(2,6,3)==728.'''\n\n ", "entry_point": "sum_gp", "canonical_solution": "    import math\n    def sum_gp(a,n,r):\n     total = (a * (1 - math.pow(r, n ))) / (1- r)\n     return total", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,5,2)==31\n    assert candidate(1,5,4)==341\n    assert candidate(2,6,3)==728\n"}
{"task_id": "MBPP/492", "prompt": "'''Write a function to search an element in the given array by using binary search. You need to pass these assertions:     assert binary_search([1,2,3,5,8], 6) == False\n    assert binary_search([7, 8, 9, 10, 13], 10) == True\n    assert binary_search([11, 13, 14, 19, 22, 36], 23) == False.'''\n\n ", "entry_point": "binary_search", "canonical_solution": "    def binary_search(item_list,item):\n    \tfirst = 0\n    \tlast = len(item_list)-1\n    \tfound = False\n    \twhile( first<=last and not found):\n    \t\tmid = (first + last)//2\n    \t\tif item_list[mid] == item :\n    \t\t\tfound = True\n    \t\telse:\n    \t\t\tif item < item_list[mid]:\n    \t\t\t\tlast = mid - 1\n    \t\t\telse:\n    \t\t\t\tfirst = mid + 1\t\n    \treturn found", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,5,8], 6) == False\n    assert candidate([7, 8, 9, 10, 13], 10) == True\n    assert candidate([11, 13, 14, 19, 22, 36], 23) == False\n"}
{"task_id": "MBPP/493", "prompt": "'''Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates. You need to pass these assertions:     assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]].'''\n\n ", "entry_point": "calculate_polygons", "canonical_solution": "    import math\n    def calculate_polygons(startx, starty, endx, endy, radius):\n        sl = (2 * radius) * math.tan(math.pi / 6)\n        p = sl * 0.5\n        b = sl * math.cos(math.radians(30))\n        w = b * 2\n        h = 2 * sl   \n        startx = startx - w\n        starty = starty - h\n        endx = endx + w\n        endy = endy + h\n        origx = startx\n        origy = starty\n        xoffset = b\n        yoffset = 3 * p\n        polygons = []\n        row = 1\n        counter = 0\n        while starty < endy:\n            if row % 2 == 0:\n                startx = origx + xoffset\n            else:\n                startx = origx\n            while startx < endx:\n                p1x = startx\n                p1y = starty + p\n                p2x = startx\n                p2y = starty + (3 * p)\n                p3x = startx + b\n                p3y = starty + h\n                p4x = startx + w\n                p4y = starty + (3 * p)\n                p5x = startx + w\n                p5y = starty + p\n                p6x = startx + b\n                p6y = starty\n                poly = [\n                    (p1x, p1y),\n                    (p2x, p2y),\n                    (p3x, p3y),\n                    (p4x, p4y),\n                    (p5x, p5y),\n                    (p6x, p6y),\n                    (p1x, p1y)]\n                polygons.append(poly)\n                counter += 1\n                startx += w\n            starty += yoffset\n            row += 1\n        return polygons", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    assert candidate(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    assert candidate(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n"}
{"task_id": "MBPP/494", "prompt": "'''Write a function to convert the given binary tuple to integer. You need to pass these assertions:     assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n    assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\n    assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'.'''\n\n ", "entry_point": "binary_to_integer", "canonical_solution": "    def binary_to_integer(test_tup):\n      res = int(\"\".join(str(ele) for ele in test_tup), 2)\n      return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate((1, 1, 0, 1, 0, 0, 1)) == '105'\n    assert candidate((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\n    assert candidate((1, 1, 0, 1, 0, 1)) == '53'\n"}
{"task_id": "MBPP/495", "prompt": "'''Write a function to remove lowercase substrings from a given string by using regex. You need to pass these assertions:     assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'.'''\n\n ", "entry_point": "remove_lowercase", "canonical_solution": "    import re\n    def remove_lowercase(str1):\n      remove_lower = lambda text: re.sub('[a-z]', '', text)\n      result =  remove_lower(str1)\n      return (result)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert candidate('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert candidate('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\n"}
{"task_id": "MBPP/496", "prompt": "'''Write a function to find the smallest integers from a given list of numbers using heap queue algorithm. You need to pass these assertions:     assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35].'''\n\n ", "entry_point": "heap_queue_smallest", "canonical_solution": "    import heapq as hq\n    def heap_queue_smallest(nums,n):\n      smallest_nums = hq.nsmallest(n, nums)\n      return smallest_nums", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]\n"}
{"task_id": "MBPP/497", "prompt": "'''Write a function to find the surface area of a cone. You need to pass these assertions:     assert surfacearea_cone(5,12)==282.7433388230814\n    assert surfacearea_cone(10,15)==880.5179353159282\n    assert surfacearea_cone(19,17)==2655.923961165254.'''\n\n ", "entry_point": "surfacearea_cone", "canonical_solution": "    import math\n    def surfacearea_cone(r,h):\n      l = math.sqrt(r * r + h * h)\n      SA = math.pi * r * (r + l)\n      return SA", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5,12)==282.7433388230814\n    assert candidate(10,15)==880.5179353159282\n    assert candidate(19,17)==2655.923961165254\n"}
{"task_id": "MBPP/498", "prompt": "'''Write a python function to find gcd of two positive integers. You need to pass these assertions:     assert gcd(12, 17) == 1\n    assert gcd(4,6) == 2\n    assert gcd(2,9) == 1.'''\n\n ", "entry_point": "gcd", "canonical_solution": "    def gcd(x, y):\n        gcd = 1\n        if x % y == 0:\n            return y\n        for k in range(int(y / 2), 0, -1):\n            if x % k == 0 and y % k == 0:\n                gcd = k\n                break  \n        return gcd", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(12, 17) == 1\n    assert candidate(4,6) == 2\n    assert candidate(2,9) == 1\n"}
{"task_id": "MBPP/499", "prompt": "'''Write a function to find the diameter of a circle. You need to pass these assertions:     assert diameter_circle(10)==20\n    assert diameter_circle(40)==80\n    assert diameter_circle(15)==30.'''\n\n ", "entry_point": "diameter_circle", "canonical_solution": "    def diameter_circle(r):\n      diameter=2*r\n      return diameter", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10)==20\n    assert candidate(40)==80\n    assert candidate(15)==30\n"}
{"task_id": "MBPP/500", "prompt": "'''Write a function to concatenate all elements of the given list into a string. You need to pass these assertions:     assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\n    assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'.'''\n\n ", "entry_point": "concatenate_elements", "canonical_solution": "    def concatenate_elements(list):\n      ans = ' '\n      for i in list:\n        ans = ans+ ' '+i\n      return (ans) ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    assert candidate([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\n    assert candidate([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'\n"}
{"task_id": "MBPP/501", "prompt": "'''Write a python function to find common divisor between two numbers in a given pair. You need to pass these assertions:     assert num_comm_div(2,4) == 2\n    assert num_comm_div(2,8) == 2\n    assert num_comm_div(12,24) == 6.'''\n\n ", "entry_point": "ngcd", "canonical_solution": "    def ngcd(x,y):\n        i=1\n        while(i<=x and i<=y):\n            if(x%i==0 and y%i == 0):\n                gcd=i;\n            i+=1\n        return gcd;\n    def num_comm_div(x,y):\n      n = ngcd(x,y)\n      result = 0\n      z = int(n**0.5)\n      i = 1\n      while(i <= z):\n        if(n % i == 0):\n          result += 2 \n          if(i == n/i):\n            result-=1\n        i+=1\n      return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert num_comm_div(2,4) == 2\n    assert num_comm_div(2,8) == 2\n    assert num_comm_div(12,24) == 6\n"}
{"task_id": "MBPP/502", "prompt": "'''Write a python function to find remainder of two numbers. You need to pass these assertions:     assert find(3,3) == 0\n    assert find(10,3) == 1\n    assert find(16,5) == 1.'''\n\n ", "entry_point": "find", "canonical_solution": "    def find(n,m):\n      r = n%m\n      return (r)", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(3,3) == 0\n    assert candidate(10,3) == 1\n    assert candidate(16,5) == 1\n"}
{"task_id": "MBPP/503", "prompt": "'''Write a function to add consecutive numbers of a given list. You need to pass these assertions:     assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19].'''\n\n ", "entry_point": "add_consecutive_nums", "canonical_solution": "    def add_consecutive_nums(nums):\n        result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n        return result", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    assert candidate([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]\n"}
{"task_id": "MBPP/504", "prompt": "'''Write a python function to find the cube sum of first n natural numbers. You need to pass these assertions:     assert sum_Of_Series(5) == 225\n    assert sum_Of_Series(2) == 9\n    assert sum_Of_Series(3) == 36.'''\n\n ", "entry_point": "sum_Of_Series", "canonical_solution": "    def sum_Of_Series(n): \n        sum = 0\n        for i in range(1,n + 1): \n            sum += i * i*i       \n        return sum", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == 225\n    assert candidate(2) == 9\n    assert candidate(3) == 36\n"}
{"task_id": "MBPP/505", "prompt": "'''Write a function to move all zeroes to the end of the given array. You need to pass these assertions:     assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0].'''\n\n ", "entry_point": "re_order", "canonical_solution": "    def re_order(A):\n        k = 0\n        for i in A:\n            if i:\n                A[k] = i\n                k = k + 1\n        for i in range(k, len(A)):\n            A[i] = 0\n        return A", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert candidate([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    assert candidate([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]\n"}
{"task_id": "MBPP/506", "prompt": "'''Write a function to calculate the permutation coefficient of given p(n, k). You need to pass these assertions:     assert permutation_coefficient(10, 2) == 90\n    assert permutation_coefficient(10, 3) == 720\n    assert permutation_coefficient(10, 1) == 10.'''\n\n ", "entry_point": "permutation_coefficient", "canonical_solution": "    def permutation_coefficient(n, k): \n    \tP = [[0 for i in range(k + 1)] \n    \t\t\tfor j in range(n + 1)] \n    \tfor i in range(n + 1): \n    \t\tfor j in range(min(i, k) + 1): \n    \t\t\tif (j == 0): \n    \t\t\t\tP[i][j] = 1\n    \t\t\telse: \n    \t\t\t\tP[i][j] = P[i - 1][j] + ( \n    \t\t\t\t\t\tj * P[i - 1][j - 1]) \n    \t\t\tif (j < k): \n    \t\t\t\tP[i][j + 1] = 0\n    \treturn P[n][k] ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10, 2) == 90\n    assert candidate(10, 3) == 720\n    assert candidate(10, 1) == 10\n"}
{"task_id": "MBPP/507", "prompt": "'''Write a function to remove specific words from a given list. You need to pass these assertions:     assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange'].'''\n\n ", "entry_point": "remove_words", "canonical_solution": "    def remove_words(list1, removewords):\n        for word in list(list1):\n            if word in removewords:\n                list1.remove(word)\n        return list1  ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']\n"}
{"task_id": "MBPP/508", "prompt": "'''Write a function to check if the common elements between two given lists are in the same order or not. You need to pass these assertions:     assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n    assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True.'''\n\n ", "entry_point": "same_order", "canonical_solution": "    def same_order(l1, l2):\n        common_elements = set(l1) & set(l2)\n        l1 = [e for e in l1 if e in common_elements]\n        l2 = [e for e in l2 if e in common_elements]\n        return l1 == l2", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    assert candidate([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n"}
{"task_id": "MBPP/509", "prompt": "'''Write a python function to find the average of odd numbers till a given odd number. You need to pass these assertions:     assert average_Odd(9) == 5\n    assert average_Odd(5) == 3\n    assert average_Odd(11) == 6.'''\n\n ", "entry_point": "average_Odd", "canonical_solution": "    def average_Odd(n) : \n        if (n%2==0) : \n            return (\"Invalid Input\") \n            return -1 \n        sm =0\n        count =0\n        while (n>=1) : \n            count=count+1\n            sm = sm + n \n            n = n-2\n        return sm//count ", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(9) == 5\n    assert candidate(5) == 3\n    assert candidate(11) == 6\n"}
{"task_id": "MBPP/510", "prompt": "'''Write a function to find the number of subsequences having product smaller than k for the given non negative array. You need to pass these assertions:     assert no_of_subsequences([1,2,3,4], 10) == 11\n    assert no_of_subsequences([4,8,7,2], 50) == 9\n    assert no_of_subsequences([5,6,7,8], 15) == 4.'''\n\n ", "entry_point": "no_of_subsequences", "canonical_solution": "    def no_of_subsequences(arr, k): \n    \tn = len(arr) \n    \tdp = [[0 for i in range(n + 1)] \n    \t\t\tfor j in range(k + 1)] \n    \tfor i in range(1, k + 1): \n    \t\tfor j in range(1, n + 1): \n    \t\t\tdp[i][j] = dp[i][j - 1] \n    \t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n    \t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    \treturn dp[k][n]", "test": "\n\nMETADATA = {\n    'author': 'google',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1,2,3,4], 10) == 11\n    assert candidate([4,8,7,2], 50) == 9\n    assert candidate([5,6,7,8], 15) == 4\n"}
